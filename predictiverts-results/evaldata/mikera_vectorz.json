[
    {
        "commit": "f286e759",
        "prev_commit": "b0211e72",
        "changed_files": [
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 13,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t@Override\n+\tpublic void setMultiple(INDArray a, INDArray b) {\n+\t\tif (a instanceof AMatrix) {\n+\t\t\tif (b instanceof AMatrix) {\n+\t\t\t\tsetMultiple((AMatrix)a,(AMatrix)b);\n+\t\t\t\treturn;\n+\t\t\t} else if (b.dimensionality()==0) {\n+\t\t\t\tsetMultiple((AMatrix)a,b.get());\n+\t\t\t} else {\n+\t\t\t\tset((AMatrix)a);\n+\t\t\t\tmultiply(b);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tset(a);\n+\t\t\tmultiply(b);\n+\t\t}\n+\t}\n+\tpublic void setMultiple(AMatrix a, AMatrix b) {\n+\t\tset(a);\n+\t\tmultiply(b);\n+\t}\n+\t\n+\t@Override\n+\tpublic void addMultiple(INDArray src, double factor) {\n+\t\tadd(src.get()*factor);\n+\t}\n+\t\n+\t@Override\n+\tpublic void addPower(INDArray src, double factor) {\n+\t\tadd(Math.pow(src.get(),factor));\n+\t}\n+\t\n+\t@Override\n+\tpublic void setApplyOp(Op op, INDArray a) {\n+\t\tset(op.apply(a.get()));\n+\t}\n+\t\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": "\t@Override\n\tpublic void setMultiple(INDArray a, INDArray b) {\n\t\tif (a instanceof AMatrix) {\n\t\t\tif (b instanceof AMatrix) {\n\t\t\t\tsetMultiple((AMatrix)a,(AMatrix)b);\n\t\t\t\treturn;\n\t\t\t} else if (b.dimensionality()==0) {\n\t\t\t\tsetMultiple((AMatrix)a,b.get());\n\t\t\t} else {\n\t\t\t\tset((AMatrix)a);\n\t\t\t\tmultiply(b);\n\t\t\t}\n\t\t} else {\n\t\t\tset(a);\n\t\t\tmultiply(b);\n\t\t}\n\t}\n\tpublic void setMultiple(AMatrix a, AMatrix b) {\n\t\tset(a);\n\t\tmultiply(b);\n\t}\n",
            "src/main/java/mikera/vectorz/AScalar.java": "\t@Override\n\tpublic void addMultiple(INDArray src, double factor) {\n\t\tadd(src.get()*factor);\n\t}\n\t@Override\n\tpublic void addPower(INDArray src, double factor) {\n\t\tadd(Math.pow(src.get(),factor));\n\t}\n\t@Override\n\tpublic void setApplyOp(Op op, INDArray a) {\n\t\tset(op.apply(a.get()));\n\t}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": [
                635,
                636,
                637,
                638,
                639,
                640,
                641,
                642,
                643,
                644,
                645,
                646,
                647,
                648,
                649,
                650,
                651,
                658,
                659,
                660,
                661
            ],
            "src/main/java/mikera/vectorz/AScalar.java": [
                172,
                173,
                174,
                175,
                177,
                178,
                179,
                180,
                333,
                334,
                335,
                336
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "b0211e72",
        "prev_commit": "f113a614",
        "changed_files": [
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/test/java/mikera/matrixx/TestMatrix.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/test/java/mikera/matrixx/TestMatrix.java"
        ],
        "changed_java_files_num": 3,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 13,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t@Override\n+\tpublic void setElements(double... values) {\n+\t\tint vl=values.length;\n+\t\tif (vl!=1) throw new IllegalArgumentException(\"Wrong number of elements in source array: \"+vl);\n+\t\tset(values[0]);\n+\t}\n+\t\n",
        "diff_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": "\t@Override\n\tpublic void setElements(double... values) {\n\t\tint vl=values.length;\n\t\tif (vl!=1) throw new IllegalArgumentException(\"Wrong number of elements in source array: \"+vl);\n\t\tset(values[0]);\n\t}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": [
                291,
                292,
                293,
                294,
                295,
                296
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "f113a614",
        "prev_commit": "433d6039",
        "changed_files": [
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java",
            "src/test/java/mikera/matrixx/TestMatrices.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java",
            "src/test/java/mikera/matrixx/TestMatrices.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 13,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\tAMatrix result=clone();\n+\t\tresult.getLeadingDiagonal().multiply(a.getLeadingDiagonal());\n+\t\treturn result;\n+\t\t} \n+\t\n+\t\tif (dimensions!=a.dimensions) throw new IllegalArgumentException(ErrorMessages.mismatch(this, a));\n+\t\treturn wrap(v.clone());\n+\t\n+\t@Test public void g_DiagonalMatrix() {\t\n+\t\tdoGenericTests(DiagonalMatrix.create(Vectorz.createUniformRandomVector(5)));\n+\t}\n+\t\n+\t@Test public void g_WrappedDiagonalMatrix() {\t\n+\t\tdoGenericTests(WrappedDiagonalMatrix.wrap(Vector2.of(1,2).join(Vector.of(3,4))));\n+\t}\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java": "\t\tAMatrix result=clone();\n\t\tresult.getLeadingDiagonal().multiply(a.getLeadingDiagonal());\n\t\treturn result;\n\t\t} \n",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": "\t\tif (dimensions!=a.dimensions) throw new IllegalArgumentException(ErrorMessages.mismatch(this, a));\n",
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java": "\t\treturn wrap(v.clone());\n",
            "src/test/java/mikera/matrixx/TestMatrices.java": "import mikera.matrixx.impl.DiagonalMatrix;\nimport mikera.matrixx.impl.WrappedDiagonalMatrix;\nimport mikera.vectorz.Vector2;\n\t@Test public void g_DiagonalMatrix() {\t\n\t\tdoGenericTests(DiagonalMatrix.create(Vectorz.createUniformRandomVector(5)));\n\t}\n\t@Test public void g_WrappedDiagonalMatrix() {\t\n\t\tdoGenericTests(WrappedDiagonalMatrix.wrap(Vector2.of(1,2).join(Vector.of(3,4))));\n\t}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java": [
                231,
                232,
                233,
                240
            ],
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": [
                250
            ],
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java": [
                50
            ],
            "src/test/java/mikera/matrixx/TestMatrices.java": [
                18,
                34,
                41,
                755,
                756,
                757,
                759,
                760,
                761
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java": "\t\tint dims=this.dimensions;\n\t\tif (dims!=a.dimensions) throw new IllegalArgumentException(ErrorMessages.incompatibleShapes(this,a));\n\t\tdouble[] data=this.getLeadingDiagonal().toDoubleArray();\n\t\ta.getLeadingDiagonal().multiplyTo(data, 0);\n\t\treturn DiagonalMatrix.wrap(data);\n\t\t} else if (a instanceof Matrix) {\n\t\t\treturn innerProduct((Matrix) a);\n\t\t}\n",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": "\t\tif (!(a instanceof DiagonalMatrix)) return a.innerProduct(this);\n\t\tif (!(dimensions==a.dimensions)) throw new IllegalArgumentException(ErrorMessages.mismatch(this, a));\n",
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java": "\t\treturn wrap(v.toDoubleArray());\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java": [
                231,
                232,
                233,
                234,
                235,
                242,
                243,
                244
            ],
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": [
                250,
                251
            ],
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java": [
                50
            ]
        }
    },
    {
        "commit": "a55d9673",
        "prev_commit": "709eac8d",
        "changed_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/Tools.java",
            "src/main/java/mikera/vectorz/util/DoubleArrays.java",
            "src/test/java/mikera/arrayz/TestArrays.java",
            "src/test/java/mikera/matrixx/algo/TestLinear.java",
            "src/test/java/mikera/vectorz/TestQuaternions.java"
        ],
        "changed_files_num": 9,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/Tools.java",
            "src/main/java/mikera/vectorz/util/DoubleArrays.java",
            "src/test/java/mikera/arrayz/TestArrays.java",
            "src/test/java/mikera/matrixx/algo/TestLinear.java",
            "src/test/java/mikera/vectorz/TestQuaternions.java"
        ],
        "changed_java_files_num": 9,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 13,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\t\treturn Tools.equals(get(),a.get());\n+\t@Override\n+\tpublic int compareTo(INDArray a) {\n+\t\treturn Double.compare(get(), a.get());\n+\t}\n+\t\n+\t\treturn (o.dimensionality()==0)&&(Tools.equals(o.get(),get()));\n+\t\treturn Tools.equals(data[offset],get());\n+\t\t\tif (!Tools.equals(unsafeGet(i),v.unsafeGet(i)))\n+\t\n+\tpublic static boolean equals(double a, double b) {\n+\t\treturn Double.compare(a, b)==0;\n+\t}\n+\t\t\tif (!Tools.equals(as[i+aOffset],bs[i+bOffset])) return false;\n+\t\t\t\tassertTrue(b.slice(i).epsilonEquals(c.slice(i),0.0));\n+\t\t\t\tassertTrue(b.epsilonEquals(c,0.0));\n+        assertTrue(Vector.of(0,0.5).epsilonEquals(x));\n+\t\tassertTrue(Vector4.of(0,0,0,1).epsilonEquals(Quaternions.invert(Vector4.of(0,0,0,1)),0.0));\n",
        "diff_per_file": {
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t\t\treturn Tools.equals(get(),a.get());\n",
            "src/main/java/mikera/vectorz/AScalar.java": "\t@Override\n\tpublic int compareTo(INDArray a) {\n\t\treturn Double.compare(get(), a.get());\n\t}\n\t\treturn (o.dimensionality()==0)&&(Tools.equals(o.get(),get()));\n\t\treturn Tools.equals(data[offset],get());\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\t\tif (!Tools.equals(unsafeGet(i),v.unsafeGet(i)))\n",
            "src/main/java/mikera/vectorz/Tools.java": "\tpublic static boolean equals(double a, double b) {\n\t\treturn Double.compare(a, b)==0;\n\t}\n",
            "src/main/java/mikera/vectorz/util/DoubleArrays.java": "\t\t\tif (!Tools.equals(as[i+aOffset],bs[i+bOffset])) return false;\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\t\t\tassertTrue(b.slice(i).epsilonEquals(c.slice(i),0.0));\n\t\t\t\tassertTrue(b.epsilonEquals(c,0.0));\n",
            "src/test/java/mikera/matrixx/algo/TestLinear.java": "        assertTrue(Vector.of(0,0.5).epsilonEquals(x));\n",
            "src/test/java/mikera/vectorz/TestQuaternions.java": "\t\tassertTrue(Vector4.of(0,0,0,1).epsilonEquals(Quaternions.invert(Vector4.of(0,0,0,1)),0.0));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                827
            ],
            "src/main/java/mikera/vectorz/AScalar.java": [
                455,
                456,
                457,
                458,
                462,
                467
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                379
            ],
            "src/main/java/mikera/vectorz/Tools.java": [
                175,
                176,
                177
            ],
            "src/main/java/mikera/vectorz/util/DoubleArrays.java": [
                536
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                475,
                483
            ],
            "src/test/java/mikera/matrixx/algo/TestLinear.java": [
                32
            ],
            "src/test/java/mikera/vectorz/TestQuaternions.java": [
                11
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t\t\treturn (get()==a.get());\n",
            "src/main/java/mikera/vectorz/AScalar.java": "\t\treturn (o.dimensionality()==0)&&(o.get()==get());\n\t\treturn data[offset]==get();\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\t\tif (unsafeGet(i) != v.unsafeGet(i))\n",
            "src/main/java/mikera/vectorz/util/DoubleArrays.java": "\t\t\tif (as[i+aOffset]!=bs[i+bOffset]) return false;\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\t\t\tassertEquals(b.slice(i),c.slice(i));\n\t\t\t\tassertEquals(b, c);\n",
            "src/test/java/mikera/matrixx/algo/TestLinear.java": "        assertEquals(Vector.of(0,0.5),x);\n",
            "src/test/java/mikera/vectorz/TestQuaternions.java": "\t\tassertEquals(Vector4.of(0,0,0,1),Quaternions.invert(Vector4.of(0,0,0,1)));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                827
            ],
            "src/main/java/mikera/vectorz/AScalar.java": [
                457,
                462
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                379
            ],
            "src/main/java/mikera/vectorz/util/DoubleArrays.java": [
                536
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                475,
                483
            ],
            "src/test/java/mikera/matrixx/algo/TestLinear.java": [
                32
            ],
            "src/test/java/mikera/vectorz/TestQuaternions.java": [
                11
            ]
        }
    },
    {
        "commit": "9584bbd7",
        "prev_commit": "53763c4d",
        "changed_files": [
            "src/main/java/mikera/matrixx/AMatrix.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/AMatrix.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 13,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 24,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t    int n=rowCount();\n+        List<AVector> cols=getColumns();\n+\t    for( int i = 0; i < n; i++ ) {\n+            AVector a = cols.get(i);\n+            for( int j = i+1; j < n; j++ ) {\n+                double val = a.dotProduct(cols.get(j));\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": "\t    int n=rowCount();\n        List<AVector> cols=getColumns();\n\t    for( int i = 0; i < n; i++ ) {\n            AVector a = cols.get(i);\n            for( int j = i+1; j < n; j++ ) {\n                double val = a.dotProduct(cols.get(j));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": [
                345,
                347,
                348,
                349,
                351,
                352
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": "import mikera.matrixx.impl.DenseColumnMatrix;\n        AMatrix Q = DenseColumnMatrix.wrap(this.rowCount(), this.columnCount(), this.getTransposeView().toDoubleArray());\n        for( int i = 0; i < Q.columnCount(); i++ ) {\n            AVector a = Q.getColumn(i);\n            for( int j = i+1; j < Q.columnCount(); j++ ) {\n                double val = a.innerProduct(Q.getColumn(j)).get();\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": [
                26,
                347,
                348,
                349,
                351,
                352
            ]
        }
    },
    {
        "commit": "53763c4d",
        "prev_commit": "305aacd2",
        "changed_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java",
            "src/test/java/mikera/arrayz/TestArrays.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java",
            "src/test/java/mikera/arrayz/TestArrays.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 13,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 24,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\tsuper.set(a);\n+\t\t    case 0: setApplyOp(op,a.get()); return;\n+\t\t\tcase 1: setApplyOp(op,a.asVector()); return;\n+\t\tif (svs.length==0) {\n+\t\t\tfor (int i=0; i<length; i++) {\n+\t\t\t\tdestData[destOffset+i*stride]=0.0;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tint[] ixs=sv.nonSparseIndex().data;\n+\t\t\tint ii=0;\n+\t\t\twhile (ixs[ii]<offset) ii++;\n+\t\t\tint ind=ixs[ii];\n+\t\t\tfor (int i=0; i<length; i++) {\n+\t\t\t\tint di=destOffset+i*stride;\n+\t\t\t\tif (ind==(offset+i)) {\n+\t\t\t\t\tdestData[di]=svs.unsafeGet(ii);\n+\t\t\t\t\tii++;\n+\t\t\t\t\tind=(ii<ixs.length)?ixs[ii]:0; // set to 0 if no more indexes to access\n+\t\t\t\t} else {\n+\t\t\t\t\tdestData[di]=0.0;\n+\t\t\t\t}\n+\t\t\n+\t\tfor (Op op : TestOps.ALL_OPS) {\n+\t\t\tif (op.isStochastic()) continue;\n+\t\t\tINDArray r=a.exactClone().ensureMutable();\n+\t\t\tr.applyOp(op);\n+\t\t\tif (r.hasUncountable()) continue;\n+\t\t\t\n+\t\t\tassertEquals(r,a.applyOpCopy(op));\n+\t\t\t\n+\t\t\tINDArray tmp=r.copy();\n+\t\t\tr.fill(Double.NaN);\n+\t\t\tr.setApplyOp(op, a);\n+\t\t\tassertEquals(tmp,r);\n+\t\t}\n+\t\t\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": "\t\tsuper.set(a);\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\t    case 0: setApplyOp(op,a.get()); return;\n\t\t\tcase 1: setApplyOp(op,a.asVector()); return;\n",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "\t\tif (svs.length==0) {\n\t\t\tfor (int i=0; i<length; i++) {\n\t\t\t\tdestData[destOffset+i*stride]=0.0;\n\t\t\t}\n\t\t} else {\n\t\t\tint[] ixs=sv.nonSparseIndex().data;\n\t\t\tint ii=0;\n\t\t\twhile (ixs[ii]<offset) ii++;\n\t\t\tint ind=ixs[ii];\n\t\t\tfor (int i=0; i<length; i++) {\n\t\t\t\tint di=destOffset+i*stride;\n\t\t\t\tif (ind==(offset+i)) {\n\t\t\t\t\tdestData[di]=svs.unsafeGet(ii);\n\t\t\t\t\tii++;\n\t\t\t\t\tind=(ii<ixs.length)?ixs[ii]:0; // set to 0 if no more indexes to access\n\t\t\t\t} else {\n\t\t\t\t\tdestData[di]=0.0;\n\t\t\t\t}\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\tfor (Op op : TestOps.ALL_OPS) {\n\t\t\tif (op.isStochastic()) continue;\n\t\t\tINDArray r=a.exactClone().ensureMutable();\n\t\t\tr.applyOp(op);\n\t\t\tif (r.hasUncountable()) continue;\n\t\t\tassertEquals(r,a.applyOpCopy(op));\n\t\t\tINDArray tmp=r.copy();\n\t\t\tr.fill(Double.NaN);\n\t\t\tr.setApplyOp(op, a);\n\t\t\tassertEquals(tmp,r);\n\t\t}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": [
                576
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                2681,
                2682
            ],
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": [
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                413,
                414,
                415,
                416,
                417,
                419,
                421,
                422,
                423,
                424,
                425
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/arrayz/INDArray.java": "\t@Deprecated\n",
            "src/main/java/mikera/matrixx/AMatrix.java": "\t\tthrow new UnsupportedOperationException(\"Can't set matrix to array: \"+a.getClass() +\" with shape: \"+Arrays.toString(a.getShape()));\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\t    case 0: setApplyOp(op,a.get());\n\t\t\tcase 1: setApplyOp(op,a.asVector());\n",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "\t\tint[] ixs=sv.nonSparseIndex().data;\n\t\tint ii=0;\n\t\twhile (ixs[ii]<offset) ii++;\n\t\tint ind=ixs[ii];\n\t\tfor (int i=0; i<length; i++) {\n\t\t\tint di=destOffset+i*stride;\n\t\t\tif (ind==(offset+i)) {\n\t\t\t\tdestData[di]=svs.unsafeGet(ii);\n\t\t\t\tii++;\n\t\t\t\tind=(ii<ixs.length)?ixs[ii]:0; // set to 0 if no more indexes to access\n\t\t\t} else {\n\t\t\t\tdestData[di]=0.0;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/INDArray.java": [
                556
            ],
            "src/main/java/mikera/matrixx/AMatrix.java": [
                576
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                2681,
                2682
            ],
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": [
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103
            ]
        }
    },
    {
        "commit": "2398244f",
        "prev_commit": "6afc6863",
        "changed_files": [
            "src/main/java/mikera/arrayz/Array.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java",
            "src/main/java/mikera/matrixx/Matrixx.java",
            "src/test/java/mikera/arrayz/TestArrays.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/Array.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java",
            "src/main/java/mikera/matrixx/Matrixx.java",
            "src/test/java/mikera/arrayz/TestArrays.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 12,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\treturn new Array(shape.length, shape.clone(), DoubleArrays.createStorageArray(shape));\n+\t\t\tif (a.sliceCount()!=sc) return false;\n+\t\t\tif (sc==0) return true;\n+\t\tif (nslices==0) return Array.newArray(shape);\n+\t\treturn this.join(a,0);\t\t\n+\t\tint n=dimensionality();\n+\tpublic static INDArray join(INDArray a, INDArray b, int dim) {\n+\t\tif (a.getShape(dim)==0) return b;\n+\t\tif (b.getShape(dim)==0) return a;\n+\t@Override\n+\tpublic INDArray slice(int dimension, int index) {\n+\t\tif (this.dimension==dimension) {\n+\t\t\treturn (index<split)?left.slice(dimension,index):right.slice(dimension,index-split);\t\t\t\n+\t\t} else if (dimension==0) {\n+\t\t\treturn slice(index);\n+\t\t} else {\n+\t\t\tint nd= (dimension<this.dimension)?dimension:dimension-1;\n+\t\t\treturn left.slice(dimension,index).join(right.slice(dimension,index),nd);\t\t\t\n+\t\t}\n+\t}\n+\t\n+\t\n+\tpublic static AMatrix toMatrix(INDArray a) {\n+\t\tint dims=a.dimensionality();\n+\t\tif (dims==0) return Matrix.wrap(1, 1, new double[]{a.get()});\n+\t\t\n+\t\tif (dims==1) {\n+\t\t\tif (a instanceof AVector) return ColumnMatrix.wrap(((AVector)a).clone());\n+\t\t\treturn ColumnMatrix.wrap(a.toVector());\n+\t\t}\n+\t\tif (dims==2) return Matrix.create(a);\n+\t\tthrow new UnsupportedOperationException(\"Can't convert to matrix: \"\n+\t\t\t\t+ a.getClass() + \" with shape \" +a.getShape());\n+\t}\n+\t\tif (o instanceof INDArray) {\n+\t\t\treturn toMatrix((INDArray)o);\n+\t\tint dims=a.dimensionality();\n+\t\tif (dims==0) return;\n+\t\tfor (int i=0; i<dims; i++) {\n+\t\t\t\n+\t\t\tINDArray r1=a.rotateView(i, 1);\n+\t\t\tINDArray r2=r1.rotateView(i, size-1);\n+\t\t\tassertEquals(a,r2);\n+\t\ttestEmptyArray(a);\n+\tprivate void testEmptyArray(INDArray a) {\n+\t\tif (a.elementCount()>0) return;\n+\t\t\n+\t\ttry {\n+\t\t\ta.elementMax();\n+\t\t\tfail(\"Should not be able to get max value of an empty array!\");\n+\t\t} catch (Throwable t) {\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\ta.elementMin();\n+\t\t\tfail(\"Should not be able to get min value of an empty array!\");\n+\t\t} catch (Throwable t) {\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void g_EmptyArray() {\n+\t\tINDArray empty = Array.newArray(0,3);\n+\t\ttestArray(empty);\n+\t}\n",
        "diff_per_file": {
            "src/main/java/mikera/arrayz/Array.java": "\t\treturn new Array(shape.length, shape.clone(), DoubleArrays.createStorageArray(shape));\n",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t\t\tif (a.sliceCount()!=sc) return false;\n\t\t\tif (sc==0) return true;\n\t\tif (nslices==0) return Array.newArray(shape);\n\t\treturn this.join(a,0);\t\t\n\t\tint n=dimensionality();\n",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": "\tpublic static INDArray join(INDArray a, INDArray b, int dim) {\n\t\tif (a.getShape(dim)==0) return b;\n\t\tif (b.getShape(dim)==0) return a;\n\t@Override\n\tpublic INDArray slice(int dimension, int index) {\n\t\tif (this.dimension==dimension) {\n\t\t\treturn (index<split)?left.slice(dimension,index):right.slice(dimension,index-split);\t\t\t\n\t\t} else if (dimension==0) {\n\t\t\treturn slice(index);\n\t\t} else {\n\t\t\tint nd= (dimension<this.dimension)?dimension:dimension-1;\n\t\t\treturn left.slice(dimension,index).join(right.slice(dimension,index),nd);\t\t\t\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/Matrixx.java": "\tpublic static AMatrix toMatrix(INDArray a) {\n\t\tint dims=a.dimensionality();\n\t\tif (dims==0) return Matrix.wrap(1, 1, new double[]{a.get()});\n\t\tif (dims==1) {\n\t\t\tif (a instanceof AVector) return ColumnMatrix.wrap(((AVector)a).clone());\n\t\t\treturn ColumnMatrix.wrap(a.toVector());\n\t\t}\n\t\tif (dims==2) return Matrix.create(a);\n\t\tthrow new UnsupportedOperationException(\"Can't convert to matrix: \"\n\t\t\t\t+ a.getClass() + \" with shape \" +a.getShape());\n\t}\n\t\tif (o instanceof INDArray) {\n\t\t\treturn toMatrix((INDArray)o);\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\tint dims=a.dimensionality();\n\t\tif (dims==0) return;\n\t\tfor (int i=0; i<dims; i++) {\n\t\t\tINDArray r1=a.rotateView(i, 1);\n\t\t\tINDArray r2=r1.rotateView(i, size-1);\n\t\t\tassertEquals(a,r2);\n\t\ttestEmptyArray(a);\n\tprivate void testEmptyArray(INDArray a) {\n\t\tif (a.elementCount()>0) return;\n\t\ttry {\n\t\t\ta.elementMax();\n\t\t\tfail(\"Should not be able to get max value of an empty array!\");\n\t\t} catch (Throwable t) {\n\t\t}\n\t\ttry {\n\t\t\ta.elementMin();\n\t\t\tfail(\"Should not be able to get min value of an empty array!\");\n\t\t} catch (Throwable t) {\n\t\t}\n\t}\n\t@Test\n\tpublic void g_EmptyArray() {\n\t\tINDArray empty = Array.newArray(0,3);\n\t\ttestArray(empty);\n\t}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/Array.java": [
                107
            ],
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                841,
                868,
                1368,
                1386,
                1397
            ],
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": [
                31,
                40,
                41,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91
            ],
            "src/main/java/mikera/matrixx/Matrixx.java": [
                70,
                71,
                72,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                93,
                94
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                104,
                105,
                107,
                111,
                112,
                113,
                939,
                965,
                966,
                968,
                969,
                970,
                971,
                973,
                975,
                976,
                977,
                978,
                980,
                981,
                1008,
                1009,
                1010,
                1011,
                1012
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/arrayz/Array.java": "\t\treturn new Array(shape.length, shape, DoubleArrays.createStorageArray(shape));\n",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t\treturn JoinedArray.join(this,a,0);\t\t\n\t\tint n=dimensionality();\n",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": "\tpublic static JoinedArray join(INDArray a, INDArray b, int dim) {\n\t@Override\n\tpublic INDArray slice(int dimension, int index) {\n\t\tif (this.dimension==dimension) {\n\t\t\treturn (index<split)?left.slice(dimension,index):right.slice(dimension,index-split);\t\t\t\n\t\t} else if (dimension==0) {\n\t\t\treturn slice(index);\n\t\t} else {\n\t\t\tint nd= (dimension<this.dimension)?dimension:dimension-1;\n\t\t\treturn left.slice(dimension,index).join(right.slice(dimension,index),nd);\t\t\t\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/Matrixx.java": "\t\tif (o instanceof AMatrix) {\n\t\t\treturn (AMatrix) o;\n\t\t} else if (o instanceof AVector) {\n\t\t\treturn ColumnMatrix.wrap((AVector) o);\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\tint n=a.dimensionality();\n\t\tif (n==0) return;\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tassertEquals(a,a.rotateView(i, 1).rotateView(i, size-1));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/Array.java": [
                107
            ],
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                1383,
                1390
            ],
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": [
                31,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103
            ],
            "src/main/java/mikera/matrixx/Matrixx.java": [
                78,
                79,
                80,
                81
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                104,
                105,
                107,
                110
            ]
        }
    },
    {
        "commit": "f34a3165",
        "prev_commit": "d16a9a14",
        "changed_files": [
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java",
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java",
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java"
        ],
        "changed_java_files_num": 3,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\t\n+\t\tint vNonSparse=v.nonSparseElementCount();\n+\t\tif (vNonSparse==0) return 0.0; // zero vector\n+\t\tif (vNonSparse==1) { // single non-saprse element\n+\t\t\tif (v instanceof ASingleElementVector) {\n+\t\t\t\tASingleElementVector av=(ASingleElementVector)v;\n+\t\t\t\tint ix=av.index(); // non-sparse index\n+\t\t\t\treturn av.value()*unsafeGet(ix);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\tpublic abstract double dotProduct(AVector v);\n+\t\treturn value*v.unsafeGet(index);\n",
        "diff_per_file": {
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java": "\t\tint vNonSparse=v.nonSparseElementCount();\n\t\tif (vNonSparse==0) return 0.0; // zero vector\n\t\tif (vNonSparse==1) { // single non-saprse element\n\t\t\tif (v instanceof ASingleElementVector) {\n\t\t\t\tASingleElementVector av=(ASingleElementVector)v;\n\t\t\t\tint ix=av.index(); // non-sparse index\n\t\t\t\treturn av.value()*unsafeGet(ix);\n\t\t\t}\n\t\t}\n",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "\tpublic abstract double dotProduct(AVector v);\n",
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java": "\t\treturn value*v.unsafeGet(index);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java": [
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142
            ],
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": [
                160
            ],
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java": [
                295
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java": "\t\tif (vdata.length==0) return 0.0;\n",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "\tpublic double dotProduct(AVector v) {\n\t\tcheckSameLength(v);\n\t\tdouble result=0.0;\n\t\tIndex ni=nonSparseIndex();\n\t\tfor (int i=0; i<ni.length(); i++) {\n\t\t\tint ii=ni.get(i);\n\t\t\tresult+=unsafeGet(ii)*v.unsafeGet(ii);\n\t\t}\t\t\n\t\treturn result;\n\t}\n",
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java": "\t\treturn value*v.get(index);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java": [
                135
            ],
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": [
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169
            ],
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java": [
                295
            ]
        }
    },
    {
        "commit": "d16a9a14",
        "prev_commit": "202294b8",
        "changed_files": [
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java",
            "src/main/java/mikera/vectorz/Vectorz.java",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java",
            "src/test/java/mikera/arrayz/TestBigSparse.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java",
            "src/main/java/mikera/vectorz/Vectorz.java",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java",
            "src/test/java/mikera/arrayz/TestBigSparse.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\tSparseRowMatrix r = Matrixx.createSparse(rows, a.columnCount());\n+\t\tfor (int i = 0; i < rows; ++i) {\n+\t\t\tAVector row = unsafeGetVector(i);\n+            if (row != null) {\n+\t\t\t    r.replaceRow(i,row.innerProduct(a));\n+            }\n+\t\t}\n+\t\treturn r;\n+\t\tAVector result= SparseIndexedVector.createLength(cc); // inistially use sparse result\n+\t\t\tresult.addMultiple(row, value);\n+\t\t\tif ((result instanceof SparseIndexedVector)&& \n+\t\t\t\t\t((SparseIndexedVector)result).nonSparseElementCount()>(cc/4)) {\n+\t\t\t\tresult=result.toVector();\n+\t\t\t}\n+\t\treturn result;\n+\t\tint nzc = 0;\n+\t\tAVector result = SparseIndexedVector.createLength(cc);\n+\t\tfor (int i = 0; i < rc; i++) {\n+\t\t\tdouble v=this.dotProduct(m.getColumn(i));\n+\t\t\tif (v==0.0) continue;\n+\t\t\tnzc++;\n+\t\t\tif ((result instanceof SparseIndexedVector)&&(i>20)&&(nzc>(i/4))) {\n+\t\t\t\tresult=result.toVector();\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult.unsafeSet(i, v);\n+\t\treturn result;\n+\t\tAVector result = SparseIndexedVector.createLength(cc);\n+\t\tint nzc = 0;\n+\t\t\tdouble v=this.dotProduct(m.getColumn(i));\n+\t\t\tif (v==0.0) continue;\n+\t\t\t\n+\t\t\tnzc++;\n+\t\t\tif ((i>20)&&(nzc>(i/4))) {\n+\t\t\t\tresult=result.toVector();\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult.unsafeSet(i, v);\n+\t\treturn result;\n+\t\tAMatrix mt=m.getTranspose();\n+\t\tassertTrue(mt.isSparse());\n+\t\tm.innerProduct(mt);\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java": "\t\tSparseRowMatrix r = Matrixx.createSparse(rows, a.columnCount());\n\t\tfor (int i = 0; i < rows; ++i) {\n\t\t\tAVector row = unsafeGetVector(i);\n            if (row != null) {\n\t\t\t    r.replaceRow(i,row.innerProduct(a));\n            }\n\t\t}\n\t\treturn r;\n",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": "\t\tAVector result= SparseIndexedVector.createLength(cc); // inistially use sparse result\n\t\t\tresult.addMultiple(row, value);\n\t\t\tif ((result instanceof SparseIndexedVector)&& \n\t\t\t\t\t((SparseIndexedVector)result).nonSparseElementCount()>(cc/4)) {\n\t\t\t\tresult=result.toVector();\n\t\t\t}\n\t\treturn result;\n\t\tint nzc = 0;\n\t\tAVector result = SparseIndexedVector.createLength(cc);\n\t\tfor (int i = 0; i < rc; i++) {\n\t\t\tdouble v=this.dotProduct(m.getColumn(i));\n\t\t\tif (v==0.0) continue;\n\t\t\tnzc++;\n\t\t\tif ((result instanceof SparseIndexedVector)&&(i>20)&&(nzc>(i/4))) {\n\t\t\t\tresult=result.toVector();\n\t\t\t}\n\t\t\tresult.unsafeSet(i, v);\n\t\treturn result;\n\t\tAVector result = SparseIndexedVector.createLength(cc);\n\t\tint nzc = 0;\n\t\t\tdouble v=this.dotProduct(m.getColumn(i));\n\t\t\tif (v==0.0) continue;\n\t\t\tnzc++;\n\t\t\tif ((i>20)&&(nzc>(i/4))) {\n\t\t\t\tresult=result.toVector();\n\t\t\t}\n\t\t\tresult.unsafeSet(i, v);\n\t\treturn result;\n",
            "src/test/java/mikera/arrayz/TestBigSparse.java": "\t\tAMatrix mt=m.getTranspose();\n\t\tassertTrue(mt.isSparse());\n\t\tm.innerProduct(mt);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java": [
                438,
                439,
                440,
                441,
                442,
                443,
                444,
                445
            ],
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": [
                289,
                299,
                300,
                301,
                302,
                303,
                305,
                311,
                313,
                314,
                315,
                316,
                318,
                319,
                321,
                322,
                324,
                326,
                340,
                341,
                343,
                344,
                346,
                347,
                349,
                350,
                352,
                354
            ],
            "src/test/java/mikera/arrayz/TestBigSparse.java": [
                98,
                99,
                100
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java": "\t\treturn innerProduct(SparseRowMatrix.create(a));\n",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": "\t\tASparseIndexedVector r = SparseIndexedVector.createLength(cc);\n\t\t\tr.addMultiple(row, value);\n\t\treturn r;\n\t\tASparseIndexedVector r = SparseIndexedVector.createLength(cc);\n\t\tfor (int i = 0; i < cc; i++) {\n\t\t\tr.unsafeSet(i, this.dotProduct((ASparseVector) m.getColumn(i)));\n\t\treturn r;\n\t\tAVector r = SparseIndexedVector.createLength(cc);\n\t\t\tr.unsafeSet(i, this.dotProduct(m.getColumn(i)));\n\t\treturn r;\n",
            "src/test/java/mikera/arrayz/TestBigSparse.java": "\t\tm.innerProduct(m.getTranspose());\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java": [
                438
            ],
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": [
                280,
                296,
                298,
                305,
                306,
                307,
                309,
                323,
                325,
                327
            ],
            "src/test/java/mikera/arrayz/TestBigSparse.java": [
                98
            ]
        }
    },
    {
        "commit": "1c250ab9",
        "prev_commit": "57e69918",
        "changed_files": [
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/matrixx/impl/MatrixBandView.java",
            "src/main/java/mikera/vectorz/impl/AMatrixViewVector.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/matrixx/impl/MatrixBandView.java",
            "src/main/java/mikera/vectorz/impl/AMatrixViewVector.java"
        ],
        "changed_java_files_num": 3,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 12,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t@Override\n+\tpublic double dotProduct(AVector v) {\n+\t\tif (v instanceof ADenseArrayVector) return dotProduct((ADenseArrayVector)v);\n+ \t\tif (v instanceof ASparseVector) return ((ASparseVector)v).dotProduct(this);\n+ \t\t\n+ \t\tint len=checkSameLength(v);\n+\t\tdouble total=0.0;\n+\t\tfor (int i=0; i<len; i++) {\n+\t\t\ttotal+=unsafeGet(i)*v.unsafeGet(i);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\t\n",
        "diff_per_file": {
            "src/main/java/mikera/vectorz/impl/AMatrixViewVector.java": "\t@Override\n\tpublic double dotProduct(AVector v) {\n\t\tif (v instanceof ADenseArrayVector) return dotProduct((ADenseArrayVector)v);\n \t\tif (v instanceof ASparseVector) return ((ASparseVector)v).dotProduct(this);\n \t\tint len=checkSameLength(v);\n\t\tdouble total=0.0;\n\t\tfor (int i=0; i<len; i++) {\n\t\t\ttotal+=unsafeGet(i)*v.unsafeGet(i);\n\t\t}\n\t\treturn total;\n\t}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/impl/AMatrixViewVector.java": [
                67,
                68,
                69,
                70,
                72,
                73,
                74,
                75,
                76,
                77,
                78
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "3583abd0",
        "prev_commit": "3630484d",
        "changed_files": [
            "src/main/java/mikera/arrayz/NDArray.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/NDArray.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 13,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\t} else if (dimensions==3) {\n+\t\t\treturn Matrixx.wrapStrided(data, getShape(1), getShape(2),offset+majorSlice*getStride(0), getStride(1),getStride(2));\n+\t\t\top.applyTo(data, offset, st, len);\n",
        "diff_per_file": {
            "src/main/java/mikera/arrayz/NDArray.java": "import mikera.matrixx.Matrixx;\n\t\t} else if (dimensions==3) {\n\t\t\treturn Matrixx.wrapStrided(data, getShape(1), getShape(2),offset+majorSlice*getStride(0), getStride(1),getStride(2));\n\t\t\top.applyTo(data, offset, st, len);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/NDArray.java": [
                13,
                172,
                173,
                244
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/arrayz/NDArray.java": "\t\t\tif (st==1) {\n\t\t\t\top.applyTo(data, offset, len);\n\t\t\t} else {\n\t\t\t\tfor (int i=0; i<len; i++) {\n\t\t\t\t\tdata[offset+i*st]=op.apply(data[offset+i*st]);\n\t\t\t\t}\n\t\t\t}\n\tpublic boolean equals(NDArray a) {\n\t\tif (a==this) return true;\n\t\tif (dimensions!=a.dimensions) return false;\n\t\tif (dimensions==0) return get()==a.get();\n\t\treturn equalsBySlices(a);\n\t}\n\t\tif (a instanceof NDArray) {\n\t\t\treturn equals((NDArray)a);\n\t\t}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/NDArray.java": [
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                271,
                272,
                273,
                274,
                275,
                276,
                280,
                281,
                282
            ]
        }
    },
    {
        "commit": "f1ca9f8d",
        "prev_commit": "6997d252",
        "changed_files": [
            "src/main/java/mikera/matrixx/impl/AVectorMatrix.java",
            "src/test/java/mikera/matrixx/TestMatrices.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/impl/AVectorMatrix.java",
            "src/test/java/mikera/matrixx/TestMatrices.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 12,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestPseudoInverses": 1,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\tif ((rows==0)||(cols==0)) return ZeroMatrix.create(rows, cols);\n+\t\tint rc=m.rowCount();\n+\t\tint cc=m.columnCount();\n+\t\t\n+\t\tAVector v=Vectorz.newVector(cc);\n+\t\tAVector t=Vectorz.newVector(rc);\n+\t\t\n+\t\tAMatrix zm=m.subMatrix(0, rc, 0, 0).innerProduct(m.subMatrix(0, 0, 0, cc));\n+\t\tassertEquals(ZeroMatrix.create(rc, cc),zm);\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/impl/AVectorMatrix.java": "\t\tif ((rows==0)||(cols==0)) return ZeroMatrix.create(rows, cols);\n",
            "src/test/java/mikera/matrixx/TestMatrices.java": "\t\tint rc=m.rowCount();\n\t\tint cc=m.columnCount();\n\t\tAVector v=Vectorz.newVector(cc);\n\t\tAVector t=Vectorz.newVector(rc);\n\t\tAMatrix zm=m.subMatrix(0, rc, 0, 0).innerProduct(m.subMatrix(0, 0, 0, cc));\n\t\tassertEquals(ZeroMatrix.create(rc, cc),zm);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/AVectorMatrix.java": [
                234
            ],
            "src/test/java/mikera/matrixx/TestMatrices.java": [
                445,
                446,
                448,
                449,
                458,
                459
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/test/java/mikera/matrixx/TestMatrices.java": "\t\tAVector v=Vectorz.newVector(m.columnCount());\n\t\tAVector t=Vectorz.newVector(m.rowCount());\n"
        },
        "deleted_line_number_list_per_file": {
            "src/test/java/mikera/matrixx/TestMatrices.java": [
                445,
                446
            ]
        }
    },
    {
        "commit": "96e1eea1",
        "prev_commit": "f1ca9f8d",
        "changed_files": [
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_java_files_num": 3,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 12,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestPseudoInverses": 2,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\tprivate int numRows;\n+\tprivate int numCols;\n+\tprivate int numRowsT;\n+\tprivate int numColsT;\n+\tprivate IBidiagonalResult bidiagResult;\n+\tprivate SvdImplicitQrAlgorithm qralg = new SvdImplicitQrAlgorithm();\n+\tdouble diag[];\n+\tdouble off[];\n+\tprivate Matrix Ut;\n+\tprivate Matrix Vt;\n+\tprivate double singularValues[];\n+\tprivate int numSingular;\n+\tprivate boolean compact;\n+\tprivate boolean transposed;\n+\tprivate Matrix A_mod = Matrix.create(1, 1);\n+\tpublic static SVDResult decompose(AMatrix A, boolean compact) {\n+\t\tSvdImplicitQr svd = new SvdImplicitQr(compact);\n+\t\treturn svd._decompose(A);\n+\t}\n+\tpublic SvdImplicitQr(boolean compact) {\n+\t\tthis.compact = compact;\n+\t}\n+\tpublic AVector getSingularValues() {\n+\t\treturn Vector.wrap(singularValues);\n+\t}\n+\tpublic int numberOfSingularValues() {\n+\t\treturn numSingular;\n+\t}\n+\tpublic boolean isCompact() {\n+\t\treturn compact;\n+\t}\n+\tpublic AMatrix getU() {\n+\t\treturn Ut.getTranspose();\n+\t}\n+\tpublic AMatrix getV() {\n+\t\treturn Vt.getTranspose();\n+\t}\n+\tpublic AMatrix getS() {\n+\t\tint m = compact ? numSingular : numRows;\n+\t\tint n = compact ? numSingular : numCols;\n+\t\tMatrix S = Matrix.create(m, n);\n+\t\tfor (int i = 0; i < numSingular; i++) {\n+\t\t\tS.unsafeSet(i, i, singularValues[i]);\n+\t\t}\n+\t\treturn S;\n+\t}\n+\tpublic SVDResult _decompose(AMatrix _orig) {\n+\t\tMatrix orig = _orig.copy().toMatrix();\n+\t\tsetup(orig);\n+\t\tif (bidiagonalization(orig)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (computeUSV())\n+\t\t\treturn null;\n+\t\tmakeSingularPositive();\n+\t\tundoTranspose();\n+\t\treturn new SVDResult(getU(), getS(), getV(), getSingularValues());\n+\t}\n+\tprivate boolean bidiagonalization(Matrix orig) {\n+\t\tif (transposed) {\n+\t\t\tA_mod = orig.getTransposeCopy().toMatrix();\n+\t\t} else {\n+\t\t\tA_mod = orig.copy().toMatrix();\n+\t\t}\n+\t\tbidiagResult = Bidiagonal.decompose(A_mod, compact);\n+\t\treturn bidiagResult == null;\n+\t}\n+\tprivate void undoTranspose() {\n+\t\tif (transposed) {\n+\t\t\tMatrix temp = Vt;\n+\t\t\tVt = Ut;\n+\t\t\tUt = temp;\n+\t\t}\n+\t}\n+\tprivate boolean computeUSV() {\n+\t\tdiag = bidiagResult.getB().getBand(0).toDoubleArray();\n+\t\toff = bidiagResult.getB().getBand(1).toDoubleArray();\n+\t\tqralg.setMatrix(numRowsT, numColsT, diag, off);\n+\t\tUt = bidiagResult.getU().getTranspose().toMatrix();\n+\t\tVt = bidiagResult.getV().getTranspose().toMatrix();\n+\t\tqralg.setFastValues(false);\n+\t\tqralg.setUt(Ut);\n+\t\tqralg.setVt(Vt);\n+\t\tboolean ret = !qralg.process();\n+\t\treturn ret;\n+\t}\n+\tprivate void setup(Matrix orig) {\n+\t\ttransposed = orig.columnCount() > orig.rowCount();\n+\t\tif (transposed) {\n+\t\t\tnumRowsT = orig.columnCount();\n+\t\t\tnumColsT = orig.rowCount();\n+\t\t} else {\n+\t\t\tnumRowsT = orig.rowCount();\n+\t\t\tnumColsT = orig.columnCount();\n+\t\t}\n+\t\tnumRows = orig.rowCount();\n+\t\tnumCols = orig.columnCount();\n+\t\tdiag = new double[numColsT];\n+\t\toff = new double[numColsT - 1];\n+\t}\n+\tprivate void makeSingularPositive() {\n+\t\tnumSingular = qralg.getNumberOfSingularValues();\n+\t\tsingularValues = qralg.getSingularValues();\n+\t\tfor (int i = 0; i < numSingular; i++) {\n+\t\t\tdouble val = qralg.getSingularValue(i);\n+\t\t\tif (val < 0) {\n+\t\t\t\tsingularValues[i] = 0.0d - val;\n+\t\t\t\tUt.multiplyRow(i, -1.0);\n+\t\t\t} else {\n+\t\t\t\tsingularValues[i] = val;\n+\t\t\t}\n+\t\t}\n+\t}\n+\tpublic int numRows() {\n+\t\treturn numRows;\n+\t}\n+\tpublic int numCols() {\n+\t\treturn numCols;\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBAsicPseudoInverse() {\n+\t\tAMatrix m=Matrix.create(new double[][] {{4,7},{2,6}});\n+\t\tAMatrix mi=PseudoInverse.calculate(m);\n+\t\tassertTrue(Matrix.create(new double[][] {{0.6,-0.7},{-0.2,0.4}}).epsilonEquals(mi));\n+\t}\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\tprivate int numRows;\n\tprivate int numCols;\n\tprivate int numRowsT;\n\tprivate int numColsT;\n\tprivate IBidiagonalResult bidiagResult;\n\tprivate SvdImplicitQrAlgorithm qralg = new SvdImplicitQrAlgorithm();\n\tdouble diag[];\n\tdouble off[];\n\tprivate Matrix Ut;\n\tprivate Matrix Vt;\n\tprivate double singularValues[];\n\tprivate int numSingular;\n\tprivate boolean compact;\n\tprivate boolean transposed;\n\tprivate Matrix A_mod = Matrix.create(1, 1);\n\tpublic static SVDResult decompose(AMatrix A, boolean compact) {\n\t\tSvdImplicitQr svd = new SvdImplicitQr(compact);\n\t\treturn svd._decompose(A);\n\t}\n\tpublic SvdImplicitQr(boolean compact) {\n\t\tthis.compact = compact;\n\t}\n\tpublic AVector getSingularValues() {\n\t\treturn Vector.wrap(singularValues);\n\t}\n\tpublic int numberOfSingularValues() {\n\t\treturn numSingular;\n\t}\n\tpublic boolean isCompact() {\n\t\treturn compact;\n\t}\n\tpublic AMatrix getU() {\n\t\treturn Ut.getTranspose();\n\t}\n\tpublic AMatrix getV() {\n\t\treturn Vt.getTranspose();\n\t}\n\tpublic AMatrix getS() {\n\t\tint m = compact ? numSingular : numRows;\n\t\tint n = compact ? numSingular : numCols;\n\t\tMatrix S = Matrix.create(m, n);\n\t\tfor (int i = 0; i < numSingular; i++) {\n\t\t\tS.unsafeSet(i, i, singularValues[i]);\n\t\t}\n\t\treturn S;\n\t}\n\tpublic SVDResult _decompose(AMatrix _orig) {\n\t\tMatrix orig = _orig.copy().toMatrix();\n\t\tsetup(orig);\n\t\tif (bidiagonalization(orig)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (computeUSV())\n\t\t\treturn null;\n\t\tmakeSingularPositive();\n\t\tundoTranspose();\n\t\treturn new SVDResult(getU(), getS(), getV(), getSingularValues());\n\t}\n\tprivate boolean bidiagonalization(Matrix orig) {\n\t\tif (transposed) {\n\t\t\tA_mod = orig.getTransposeCopy().toMatrix();\n\t\t} else {\n\t\t\tA_mod = orig.copy().toMatrix();\n\t\t}\n\t\tbidiagResult = Bidiagonal.decompose(A_mod, compact);\n\t\treturn bidiagResult == null;\n\t}\n\tprivate void undoTranspose() {\n\t\tif (transposed) {\n\t\t\tMatrix temp = Vt;\n\t\t\tVt = Ut;\n\t\t\tUt = temp;\n\t\t}\n\t}\n\tprivate boolean computeUSV() {\n\t\tdiag = bidiagResult.getB().getBand(0).toDoubleArray();\n\t\toff = bidiagResult.getB().getBand(1).toDoubleArray();\n\t\tqralg.setMatrix(numRowsT, numColsT, diag, off);\n\t\tUt = bidiagResult.getU().getTranspose().toMatrix();\n\t\tVt = bidiagResult.getV().getTranspose().toMatrix();\n\t\tqralg.setFastValues(false);\n\t\tqralg.setUt(Ut);\n\t\tqralg.setVt(Vt);\n\t\tboolean ret = !qralg.process();\n\t\treturn ret;\n\t}\n\tprivate void setup(Matrix orig) {\n\t\ttransposed = orig.columnCount() > orig.rowCount();\n\t\tif (transposed) {\n\t\t\tnumRowsT = orig.columnCount();\n\t\t\tnumColsT = orig.rowCount();\n\t\t} else {\n\t\t\tnumRowsT = orig.rowCount();\n\t\t\tnumColsT = orig.columnCount();\n\t\t}\n\t\tnumRows = orig.rowCount();\n\t\tnumCols = orig.columnCount();\n\t\tdiag = new double[numColsT];\n\t\toff = new double[numColsT - 1];\n\t}\n\tprivate void makeSingularPositive() {\n\t\tnumSingular = qralg.getNumberOfSingularValues();\n\t\tsingularValues = qralg.getSingularValues();\n\t\tfor (int i = 0; i < numSingular; i++) {\n\t\t\tdouble val = qralg.getSingularValue(i);\n\t\t\tif (val < 0) {\n\t\t\t\tsingularValues[i] = 0.0d - val;\n\t\t\t\tUt.multiplyRow(i, -1.0);\n\t\t\t} else {\n\t\t\t\tsingularValues[i] = val;\n\t\t\t}\n\t\t}\n\t}\n\tpublic int numRows() {\n\t\treturn numRows;\n\t}\n\tpublic int numCols() {\n\t\treturn numCols;\n\t}\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "import static org.junit.Assert.*;\nimport mikera.matrixx.Matrix;\nimport mikera.matrixx.impl.ZeroMatrix;\n\t@Test\n\tpublic void testBAsicPseudoInverse() {\n\t\tAMatrix m=Matrix.create(new double[][] {{4,7},{2,6}});\n\t\tAMatrix mi=PseudoInverse.calculate(m);\n\t\tassertTrue(Matrix.create(new double[][] {{0.6,-0.7},{-0.2,0.4}}).epsilonEquals(mi));\n\t}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                48,
                49,
                52,
                53,
                61,
                62,
                64,
                65,
                67,
                68,
                70,
                71,
                74,
                86,
                89,
                91,
                92,
                93,
                94,
                114,
                115,
                119,
                121,
                122,
                123,
                125,
                126,
                127,
                129,
                130,
                131,
                133,
                137,
                138,
                140,
                144,
                145,
                147,
                148,
                149,
                151,
                153,
                154,
                155,
                157,
                158,
                160,
                162,
                163,
                165,
                166,
                167,
                169,
                170,
                173,
                176,
                178,
                179,
                181,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                206,
                207,
                208,
                209,
                214,
                216,
                218,
                220,
                224,
                230,
                236,
                237,
                239,
                240,
                243,
                246,
                247,
                248,
                251,
                252,
                253,
                255,
                256,
                258,
                259,
                275,
                282,
                283,
                284,
                286,
                287,
                289,
                290,
                292,
                293,
                294,
                295,
                296,
                297,
                299,
                300,
                301,
                303,
                304,
                305
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                3,
                8,
                10,
                20,
                21,
                22,
                23,
                24,
                25
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "    private int numRows;\n    private int numCols;\n    private int numRowsT;\n    private int numColsT;\n    private IBidiagonalResult bidiagResult;\n    private SvdImplicitQrAlgorithm qralg = new SvdImplicitQrAlgorithm();\n    double diag[];\n    double off[];\n    private Matrix Ut;\n    private Matrix Vt;\n    private double singularValues[];\n    private int numSingular;\n    private boolean compact;\n    private boolean transposed;\n    private Matrix A_mod = Matrix.create(1,1);\n    public static SVDResult decompose(AMatrix A, boolean compact) {\n    \tSvdImplicitQr svd = new SvdImplicitQr(compact);\n    \treturn svd._decompose(A);\n    }\n    public SvdImplicitQr(boolean compact) {\n        this.compact = compact;\n    }\n    public AVector getSingularValues() {\n        return Vector.wrap(singularValues);\n    }\n    public int numberOfSingularValues() {\n        return numSingular;\n    }\n    public boolean isCompact() {\n        return compact;\n    }\n    public AMatrix getU() {\n    \treturn Ut.getTranspose();\n    }\n    public AMatrix getV() {\n        \treturn Vt.getTranspose();\n    }\n    public AMatrix getS() {\n        int m = compact ? numSingular : numRows;\n        int n = compact ? numSingular : numCols;\n        Matrix S = Matrix.create(m,n);\n        for( int i = 0; i < numSingular; i++ ) {\n            S.unsafeSet(i,i, singularValues[i]);\n        }\n        return S;\n    }\n    public SVDResult _decompose(AMatrix _orig) {\n    \tMatrix orig = _orig.copy().toMatrix();\n        setup(orig);\n        if (bidiagonalization(orig)) {\n            return null;\n        }\n        if( computeUSV() )\n            return null;\n        makeSingularPositive();\n        undoTranspose();\n        return new SVDResult(getU(), getS(), getV(), getSingularValues());\n    }\n    private boolean bidiagonalization(Matrix orig) {\n        if( transposed ) {\n            A_mod = orig.getTransposeCopy().toMatrix();\n        } else {\n            A_mod = orig.copy().toMatrix();\n        }\n        bidiagResult = Bidiagonal.decompose(A_mod, compact);\n        return bidiagResult == null;\n    }\n    private void undoTranspose() {\n        if( transposed ) {\n            Matrix temp = Vt;\n            Vt = Ut;\n            Ut = temp;\n        }\n    }\n    private boolean computeUSV() {\n        diag = bidiagResult.getB().getBand(0).toDoubleArray();\n        off = bidiagResult.getB().getBand(1).toDoubleArray();\n        qralg.setMatrix(numRowsT,numColsT,diag,off);\n            Ut = bidiagResult.getU().getTranspose().toMatrix();\n            Vt = bidiagResult.getV().getTranspose().toMatrix();\n        qralg.setFastValues(false);\n            qralg.setUt(Ut);\n            qralg.setVt(Vt);\n        boolean ret = !qralg.process();\n        return ret;\n    }\n    private void setup(Matrix orig) {\n        transposed = orig.columnCount() > orig.rowCount();\n        if( transposed ) {\n            numRowsT = orig.columnCount();\n            numColsT = orig.rowCount();\n        } else {\n            numRowsT = orig.rowCount();\n            numColsT = orig.columnCount();\n        }\n        numRows = orig.rowCount();\n        numCols = orig.columnCount();\n        diag = new double[ numColsT ];\n        off = new double[ numColsT-1 ];\n    }\n    private void makeSingularPositive() {\n        numSingular = qralg.getNumberOfSingularValues();\n        singularValues = qralg.getSingularValues();\n        double[] UtData = Ut.asDoubleArray();\n        for( int i = 0; i < numSingular; i++ ) {\n            double val = qralg.getSingularValue(i);\n            if( val < 0 ) {\n                singularValues[i] = 0.0d - val;\n                    int start = i* Ut.columnCount();\n                    int stop = start+ Ut.columnCount();\n                    for( int j = start; j < stop; j++ ) {\n                        UtData[j] = 0.0d - UtData[j];\n                }\n            } else {\n                singularValues[i] = val;\n            }\n        }\n    }\n    public int numRows() {\n        return numRows;\n    }\n    public int numCols() {\n        return numCols;\n    }\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "import static org.junit.Assert.assertEquals;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                46,
                47,
                50,
                51,
                58,
                59,
                61,
                62,
                64,
                65,
                67,
                68,
                71,
                82,
                85,
                87,
                88,
                89,
                90,
                105,
                106,
                110,
                112,
                113,
                114,
                116,
                117,
                118,
                120,
                121,
                122,
                124,
                127,
                128,
                130,
                133,
                134,
                136,
                137,
                138,
                140,
                142,
                143,
                144,
                146,
                147,
                149,
                151,
                152,
                154,
                155,
                156,
                158,
                159,
                162,
                165,
                167,
                168,
                170,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                195,
                196,
                197,
                198,
                203,
                205,
                207,
                209,
                213,
                219,
                224,
                225,
                227,
                228,
                231,
                234,
                235,
                236,
                239,
                240,
                241,
                243,
                244,
                246,
                247,
                259,
                265,
                266,
                267,
                269,
                270,
                271,
                273,
                274,
                279,
                280,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                292,
                293,
                294,
                296,
                297,
                298
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                3
            ]
        }
    },
    {
        "commit": "72cd9dcd",
        "prev_commit": "9991bb8d",
        "changed_files": [
            "src/main/java/mikera/matrixx/Matrix.java",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/Matrix.java",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 12,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestPseudoInverses": 3,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\tcol.checkLength(rows);\n+\t\tcol.copyTo(0, data, j, rows, cols);\n+\t\tVector result=Vector.createLength(rows);\n+\t\t\tdouble aval=a.unsafeGet(i);\n+\t\t\tif (aval!=0.0) result.addMultiple(getColumn(i),aval);\n+\t\treturn result;\n+                m.setColumn(i, v);;\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/Matrix.java": "\t\tcol.checkLength(rows);\n\t\tcol.copyTo(0, data, j, rows, cols);\n",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": "\t\tVector result=Vector.createLength(rows);\n\t\t\tdouble aval=a.unsafeGet(i);\n\t\t\tif (aval!=0.0) result.addMultiple(getColumn(i),aval);\n\t\treturn result;\n                m.setColumn(i, v);;\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/Matrix.java": [
                616,
                617
            ],
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": [
                427,
                429,
                430,
                432,
                450
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/Matrix.java": "\t\tint rc = checkRow(j);\n\t\tcol.checkLength(rc);\n\t\tcol.copyTo(0, data, j, rc, cols);\n",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": "\t\tVector r=Vector.createLength(rows);\n\t\t\tr.addMultiple(getColumn(i),a.get(i));\n\t\treturn r;\n                m.getColumn(i).set(v);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/Matrix.java": [
                616,
                617,
                618
            ],
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": [
                427,
                429,
                431,
                449
            ]
        }
    },
    {
        "commit": "e78dc6e0",
        "prev_commit": "91e87b3c",
        "changed_files": [
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java",
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java",
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 12,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestPseudoInverses": 5,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\tISVDResult svd = SVD.decomposeNonZero(a);\n+\t\n+\tpublic static ISVDResult decomposeNonZero(AMatrix A) {\n+\t\tISVDResult svd=decomposeCompact(A);\n+\t\t\n+\t\tAVector svs=svd.getSingularValues();\n+\t\tint m=A.rowCount();\n+\t\tint n=A.columnCount();\n+\t\tint s=svs.length(); // length of singular values vector\n+\t\t\n+\t\tint svNumber=0;\n+\t\tfor (int i=0; i<s; i++) {\n+\t\t\tif (svs.unsafeGet(i)==0.0) break;\n+\t\t\tsvNumber++;\n+\t\t}\n+\t\t\n+\t\tif (svNumber<s) {\n+\t\t\tAVector newSvs=svs.subVector(0,svNumber); // truncated vector of singulat values\n+\t\t\tAMatrix cU=svd.getU().subMatrix(0, m, 0, svNumber);\n+\t\t\tAMatrix cS=DiagonalMatrix.create(newSvs);\n+\t\t\tAMatrix cV=svd.getV().subMatrix(0, n, 0, svNumber);\n+\t\t\treturn new SVDResult(cU,cS,cV,newSvs);\t\n+\t\t} else {\n+\t\t\treturn svd;\n+\t\t}\n+\t}\n+\t\treturn new SVDResult(getU(), getS(), getV(), svs);\n+\t@Test\n+\tpublic void testDiagonalPseudoInverse2() {\n+\t\tAMatrix m=DiagonalMatrix.create(2,0);\n+\t\tAMatrix mi=PseudoInverse.calculate(m);\n+\t\tassertEquals(DiagonalMatrix.create(0.5,0.0),mi);\n+\t}\n+\t@Test\n+\tpublic void testZeroPseudoInverse() {\n+\t\tAMatrix m=ZeroMatrix.create(3,2);\n+\t\t\n+\t\tAMatrix mi=PseudoInverse.calculate(m);\n+\t\tassertEquals(m.getTranspose(),mi);\n+\t\t\n+\t\tAMatrix mii=PseudoInverse.calculate(mi);\n+\t\tassertEquals(m,mii);\n+\t}\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java": "\t\tISVDResult svd = SVD.decomposeNonZero(a);\n",
            "src/main/java/mikera/matrixx/decompose/SVD.java": "import mikera.matrixx.decompose.impl.svd.SVDResult;\nimport mikera.matrixx.impl.DiagonalMatrix;\nimport mikera.vectorz.AVector;\n\tpublic static ISVDResult decomposeNonZero(AMatrix A) {\n\t\tISVDResult svd=decomposeCompact(A);\n\t\tAVector svs=svd.getSingularValues();\n\t\tint m=A.rowCount();\n\t\tint n=A.columnCount();\n\t\tint s=svs.length(); // length of singular values vector\n\t\tint svNumber=0;\n\t\tfor (int i=0; i<s; i++) {\n\t\t\tif (svs.unsafeGet(i)==0.0) break;\n\t\t\tsvNumber++;\n\t\t}\n\t\tif (svNumber<s) {\n\t\t\tAVector newSvs=svs.subVector(0,svNumber); // truncated vector of singulat values\n\t\t\tAMatrix cU=svd.getU().subMatrix(0, m, 0, svNumber);\n\t\t\tAMatrix cS=DiagonalMatrix.create(newSvs);\n\t\t\tAMatrix cV=svd.getV().subMatrix(0, n, 0, svNumber);\n\t\t\treturn new SVDResult(cU,cS,cV,newSvs);\t\n\t\t} else {\n\t\t\treturn svd;\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\t\treturn new SVDResult(getU(), getS(), getV(), svs);\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "import mikera.matrixx.impl.ZeroMatrix;\n\t@Test\n\tpublic void testDiagonalPseudoInverse2() {\n\t\tAMatrix m=DiagonalMatrix.create(2,0);\n\t\tAMatrix mi=PseudoInverse.calculate(m);\n\t\tassertEquals(DiagonalMatrix.create(0.5,0.0),mi);\n\t}\n\t@Test\n\tpublic void testZeroPseudoInverse() {\n\t\tAMatrix m=ZeroMatrix.create(3,2);\n\t\tAMatrix mi=PseudoInverse.calculate(m);\n\t\tassertEquals(m.getTranspose(),mi);\n\t\tAMatrix mii=PseudoInverse.calculate(mi);\n\t\tassertEquals(m,mii);\n\t}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java": [
                18
            ],
            "src/main/java/mikera/matrixx/decompose/SVD.java": [
                5,
                7,
                8,
                79,
                80,
                82,
                83,
                84,
                85,
                88,
                89,
                90,
                91,
                92,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                163
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                11,
                35,
                36,
                37,
                38,
                39,
                40,
                42,
                43,
                44,
                46,
                47,
                49,
                50,
                51
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java": "\t\tISVDResult svd = SVD.decompose(a,true);\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\t\tif (compact&&(numSingular<getS().rowCount())) {\n\t\t\tAMatrix cU=getU().subMatrix(0, numRows, 0, numSingular);\n\t\t\tAMatrix cS=DiagonalMatrix.create(svs);\n\t\t\tAMatrix cV=getV().subMatrix(0, numCols, 0, numSingular);\n\t\t\treturn new SVDResult(cU,cS,cV,svs);\t\n\t\t} else {\n\t\t\treturn new SVDResult(getU(), getS(), getV(), svs);\n\t\t}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java": [
                18
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170
            ]
        }
    },
    {
        "commit": "3630484d",
        "prev_commit": "d8196419",
        "changed_files": [
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/util/ErrorMessages.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/util/ErrorMessages.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 13,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\tif (indexes.length!=0) throw new IllegalArgumentException(ErrorMessages.invalidIndex(this, indexes));\n+\t\t\tthrow new IllegalArgumentException(ErrorMessages.invalidIndex(this, indexes));\n+\t\treturn \"Incompatible shapes: \"+describeArray(a)+\" vs. \"+describeArray(b);\n+\t\treturn \"Can't broadcast \"+describeArray(a)+\" to shape of \"+describeArray(b);\n+\t\treturn \"Element index \"+i+\" invalid for \"+describeArray(a);\n+\t\treturn \"Subrange {start=\"+start+\", length=\"+length+\"} not valid on \"+describeArray(v);\n+\t\treturn \"Matrix must be square: \"+describeArray(a);\n",
        "diff_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": "\t\tif (indexes.length!=0) throw new IllegalArgumentException(ErrorMessages.invalidIndex(this, indexes));\n\t\t\tthrow new IllegalArgumentException(ErrorMessages.invalidIndex(this, indexes));\n",
            "src/main/java/mikera/vectorz/util/ErrorMessages.java": "\t\treturn \"Incompatible shapes: \"+describeArray(a)+\" vs. \"+describeArray(b);\n\t\treturn \"Can't broadcast \"+describeArray(a)+\" to shape of \"+describeArray(b);\n\t\treturn \"Element index \"+i+\" invalid for \"+describeArray(a);\n\t\treturn \"Subrange {start=\"+start+\", length=\"+length+\"} not valid on \"+describeArray(v);\n\t\treturn \"Matrix must be square: \"+describeArray(a);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": [
                251,
                260
            ],
            "src/main/java/mikera/vectorz/util/ErrorMessages.java": [
                56,
                84,
                146,
                150,
                195
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": "\t\tassert(indexes.length==0);\n\t\t\tthrow new IllegalArgumentException(\"\"+indexes.length+\"D set not supported on AScalar\");\n",
            "src/main/java/mikera/vectorz/util/ErrorMessages.java": "\t\treturn \"Incompatible shapes: \"+shape(a)+\" vs. \"+shape(b);\n\t\treturn \"Can't broadcast \"+describeArray(a)+\" to shape: \"+shape(b);\n\t\treturn \"Element index \"+i+\" invalid for \"+a.getClass()+\" with shape \"+shape(a);\n\t\treturn \"Subrange {start=\"+start+\", length=\"+length+\"} not valid on vector with length \"+v.length();\n\t\treturn \"Matrix should be square but has shape: \"+shape(a);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": [
                251,
                260
            ],
            "src/main/java/mikera/vectorz/util/ErrorMessages.java": [
                56,
                84,
                146,
                150,
                195
            ]
        }
    },
    {
        "commit": "87f5a79e",
        "prev_commit": "e78dc6e0",
        "changed_files": [
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_java_files_num": 3,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 12,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestPseudoInverses": 5,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\tint svNumber=(int)svs.nonZeroCount();\n+\t\t\tint[] ixs=new int[svNumber];\n+\t\t\tint ix=0;\n+\t\t\tfor (int i=0; i<s; i++) {\n+\t\t\t\tif (svs.unsafeGet(i)==0.0) continue;\n+\t\t\t\tixs[ix++]=i;\n+\t\t\t}\n+\t\t\t\n+\t\t\tAVector newSvs=svs.selectClone(ixs); // truncated vector of singular values\n+\t\t\t\n+\t\t\tAMatrix U=svd.getU();\n+\t\t\tAMatrix V=svd.getV();\n+\t\t\tAMatrix cU=Matrix.create(m, svNumber);\n+\t\t\tAMatrix cV=Matrix.create(n, svNumber);\n+\t\t\tfor (int i=0; i<svNumber; i++) {\n+\t\t\t\tint si=ixs[i]; // index of non-zero singular value\n+\t\t\t\tcU.setColumn(i, U.getColumn(si));\n+\t\t\t\tcV.setColumn(i, V.getColumn(si));\n+\t\t\t}\n+\t\t\t\n+\t\tAMatrix m=DiagonalMatrix.create(0,2);\n+\t\tassertEquals(DiagonalMatrix.create(0.0,0.5),mi);\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/decompose/SVD.java": "import mikera.matrixx.Matrix;\n\t\tint svNumber=(int)svs.nonZeroCount();\n\t\t\tint[] ixs=new int[svNumber];\n\t\t\tint ix=0;\n\t\t\tfor (int i=0; i<s; i++) {\n\t\t\t\tif (svs.unsafeGet(i)==0.0) continue;\n\t\t\t\tixs[ix++]=i;\n\t\t\t}\n\t\t\tAVector newSvs=svs.selectClone(ixs); // truncated vector of singular values\n\t\t\tAMatrix U=svd.getU();\n\t\t\tAMatrix V=svd.getV();\n\t\t\tAMatrix cU=Matrix.create(m, svNumber);\n\t\t\tAMatrix cV=Matrix.create(n, svNumber);\n\t\t\tfor (int i=0; i<svNumber; i++) {\n\t\t\t\tint si=ixs[i]; // index of non-zero singular value\n\t\t\t\tcU.setColumn(i, U.getColumn(si));\n\t\t\t\tcV.setColumn(i, V.getColumn(si));\n\t\t\t}\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "\t\tAMatrix m=DiagonalMatrix.create(0,2);\n\t\tassertEquals(DiagonalMatrix.create(0.0,0.5),mi);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/decompose/SVD.java": [
                4,
                88,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                37,
                39
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/decompose/SVD.java": "import mikera.matrixx.decompose.ISVDResult;\n\t\tint svNumber=0;\n\t\tfor (int i=0; i<s; i++) {\n\t\t\tif (svs.unsafeGet(i)==0.0) break;\n\t\t\tsvNumber++;\n\t\t}\n\t\t\tAVector newSvs=svs.subVector(0,svNumber); // truncated vector of singulat values\n\t\t\tAMatrix cU=svd.getU().subMatrix(0, m, 0, svNumber);\n\t\t\tAMatrix cV=svd.getV().subMatrix(0, n, 0, svNumber);\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "import mikera.matrixx.impl.DiagonalMatrix;\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "\t\tAMatrix m=DiagonalMatrix.create(2,0);\n\t\tassertEquals(DiagonalMatrix.create(0.5,0.0),mi);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/decompose/SVD.java": [
                4,
                88,
                89,
                90,
                91,
                92,
                95,
                96,
                98
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                25
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                37,
                39
            ]
        }
    },
    {
        "commit": "b2244eac",
        "prev_commit": "42886241",
        "changed_files": [
            "src/main/java/mikera/arrayz/Arrayz.java",
            "src/main/java/mikera/vectorz/Vectorz.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/Arrayz.java",
            "src/main/java/mikera/vectorz/Vectorz.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 11,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 13,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static INDArray create(List<?> slices) {\n+\t\tint n=slices.size();\n+\t\tif (n==0) return Vector0.INSTANCE;\n+\t\tObject o1=slices.get(0);\n+\t\tif ((o1 instanceof AScalar)||(o1 instanceof Number)) {\n+\t\t\treturn Vectorz.create((List<Object>)slices);\n+\t\t} else if (o1 instanceof AVector) {\n+\t\t\treturn Matrixx.create((List<Object>)slices);\n+\t\t} else {\n+\t\t\tArrayList<INDArray> al=new ArrayList<INDArray>(n);\n+\t\t\tfor (Object o: slices) {\n+\t\t\t\tal.add(create(o));\n+\t\t\t}\n+\t\t\treturn SliceArray.create(al);\n+\t\t}\n+\t}\n+\t\n+\t\t\treturn Vectorz.wrap((double[])o);\n+\t\t} else {\n+\t\t\treturn create(o);\n+\t\t}\n+\t}\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static AVector create(Object o) {\n+\t\tif (o instanceof AVector) {\n+\t\t\treturn create((AVector)o);\n+\t\t} else if (o instanceof double[]) {\n+\t\t\treturn Vector.create((double)o);\n+\t} \n",
        "diff_per_file": {
            "src/main/java/mikera/arrayz/Arrayz.java": "\t@SuppressWarnings(\"unchecked\")\n\tpublic static INDArray create(List<?> slices) {\n\t\tint n=slices.size();\n\t\tif (n==0) return Vector0.INSTANCE;\n\t\tObject o1=slices.get(0);\n\t\tif ((o1 instanceof AScalar)||(o1 instanceof Number)) {\n\t\t\treturn Vectorz.create((List<Object>)slices);\n\t\t} else if (o1 instanceof AVector) {\n\t\t\treturn Matrixx.create((List<Object>)slices);\n\t\t} else {\n\t\t\tArrayList<INDArray> al=new ArrayList<INDArray>(n);\n\t\t\tfor (Object o: slices) {\n\t\t\t\tal.add(create(o));\n\t\t\t}\n\t\t\treturn SliceArray.create(al);\n\t\t}\n\t}\n",
            "src/main/java/mikera/vectorz/Vectorz.java": "\t\t\treturn Vectorz.wrap((double[])o);\n\t\t} else {\n\t\t\treturn create(o);\n\t\t}\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static AVector create(Object o) {\n\t\tif (o instanceof AVector) {\n\t\t\treturn create((AVector)o);\n\t\t} else if (o instanceof double[]) {\n\t\t\treturn Vector.create((double)o);\n\t} \n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/Arrayz.java": [
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109
            ],
            "src/main/java/mikera/vectorz/Vectorz.java": [
                595,
                600,
                601,
                602,
                603,
                610,
                611,
                612,
                613,
                614,
                615,
                622
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/vectorz/Vectorz.java": "\t@SuppressWarnings(\"unchecked\")\n\t\t\treturn Vectorz.create((double[])o);\n\t}\n\tpublic static AVector create(Object o) {\n\t\treturn toVector(o);\n\t}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/Vectorz.java": [
                591,
                596,
                607,
                609,
                610,
                611
            ]
        }
    },
    {
        "commit": "0b938530",
        "prev_commit": "87f5a79e",
        "changed_files": [
            "src/main/java/mikera/matrixx/algo/IPLSResult.java",
            "src/main/java/mikera/matrixx/algo/PLS.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPLS.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/algo/IPLSResult.java",
            "src/main/java/mikera/matrixx/algo/PLS.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPLS.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestPLS",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 12,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestPLS": 1,
            "TestPseudoInverses": 5,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\n+\tpublic AMatrix getX();\n+\t\n+\tpublic AMatrix getY();\n+\t\n+\tpublic AMatrix getT();\n+\t\n+\tpublic AMatrix getP();\n+\tpublic AMatrix getQ();\n+\tpublic AMatrix getW();\n+\tpublic AMatrix getB();\n+\t\n+\tprivate final AMatrix origX;\n+\t\n+\tprivate final Matrix X;\n+\tprivate final Matrix Y; \n+\tprivate final Matrix P; \n+\tprivate final Matrix Q; \n+\tprivate final Matrix T; \n+\tprivate final Matrix U;\n+\tprivate final Matrix W;\n+\tprivate final Vector b;\n+\tprivate final DiagonalMatrix B;\n+\tprivate final int l; \n+\tprivate final int n; \n+\tprivate final int m; \n+\tprivate final int p;\n+\t\n+\t\n+\t\n+\t@Override\n+\tpublic AMatrix getX() {\n+\t\treturn origX;\n+\t}\n+\t@Override\n+\tpublic AMatrix getY() {\n+\t\treturn Y;\n+\t}\n+\t@Override\n+\tpublic AMatrix getT() {\n+\t\treturn T;\n+\t}\n+\t@Override\n+\tpublic AMatrix getP() {\n+\t\treturn P;\n+\t}\n+\t\n+\t@Override\n+\tpublic AMatrix getQ() {\n+\t\treturn Q;\n+\t}\n+\t@Override\n+\tpublic AMatrix getW() {\n+\t\treturn W;\n+\t}\n+\t@Override\n+\tpublic AMatrix getB() {\n+\t\treturn B;\n+\t}\n+\tprivate PLS(AMatrix X, AMatrix Y, int nFactors) {\n+\t\tthis.origX=X;\n+\t\tthis.Y=Matrix.create(Y);\n+\t\tthis.X=Matrix.create(origX);\n+\t\tn=X.rowCount();\n+\t\tm=X.columnCount();\n+\t\tl=nFactors;\n+\t\tp=Y.columnCount();\n+\t\tif(Y.rowCount()!=n) throw new IllegalArgumentException(\"PLS regression requires equal number of rows in X annd Y matrices\");\n+\t\t\n+\t\tT=Matrix.create(n,l);\n+\t\tU=Matrix.create(n,l);\n+\t\tP=Matrix.create(m,l);\n+\t\tQ=Matrix.create(p,l);\n+\t\tW=Matrix.create(m,l);\n+\t\tb=Vector.createLength(l);\n+\t\tB=DiagonalMatrix.createDimensions(l);\n+\t};\n+\tpublic static IPLSResult calculate(AMatrix X, AMatrix Y, int nFactors) {\n+\t\t PLS pls= new PLS(X, Y, nFactors);\n+\t\t pls.calcResult();\n+\t\t return pls;\n+\t}\n+\t\n+\tprivate int selectMaxSSColumn(AMatrix A) {\n+\t\tint c=0;\n+\t\tdouble best=0.0;\n+\t\tfor (int i=0; i<m; i++) {\n+\t\t\tdouble ss=A.getColumn(i).elementSquaredSum();\n+\t\t\tif (ss>best) {\n+\t\t\t\tc=i;\n+\t\t\t\tbest=ss;\n+\t\t\t}\n+\t\t}\n+\t\treturn c;\n+\t}\n+\tprivate void calcResult() {\n+\t\tVector u=Vector.createLength(n);\n+\t\tVector w=Vector.createLength(m);\n+\t\tVector t=Vector.createLength(n);\n+\t\tVector t_old=Vector.createLength(n);\n+\t\tVector q=Vector.createLength(p);\n+\t\tVector pv=Vector.createLength(m);\n+\t\t\n+\t\tfor (int j=0; j<m; j++) {\n+\t\t\tAVector col=X.getColumnView(j);\n+\t\t\tdouble mean=col.elementSum()/n;\n+\t\t\tcol.add(-mean);\n+\t\t}\n+\t\tfor (int i=0; i<l; i++) {\n+\t\t\tu.set(X.getColumn(selectMaxSSColumn(X)));\n+\t\t\t\n+\t\t\tint maxIterations=10;\n+\t\t\tint iterations=0;\n+\t\t\twhile (iterations++<=maxIterations) {\n+\t\t\t\tw.setInnerProduct(u, X);\n+\t\t\t\tw.normalise();\n+\t\t\t\tt.setInnerProduct(X, w);\n+\t\t\t\tt.normalise();\n+\t\t\t\tq.setInnerProduct(t, Y);\n+\t\t\t\tif (q.normalise()==0) break; // exit if q length is zero\n+\t\t\t\tu.setInnerProduct(Y, q);\n+\t\t\t\t\n+\t\t\t\tdouble dist=t.distance(t_old);\n+\t\t\t\tif(dist<0.00000000001) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t} else {\n+\t\t\t\t\tt_old.set(t);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\tU.setColumn(i, u);\n+\t\t\tW.setColumn(i, w);\n+\t\t\tT.setColumn(i, t);\n+\t\t\tQ.setColumn(i, q);\n+\t\t\tb.set(i,t.dotProduct(u));\n+\t\t\t\n+\t\t\tpv.setInnerProduct(t, X);\n+\t\t\tdouble tss=t.elementSquaredSum();\n+\t\t\tif (tss!=0.0) pv.multiply(1.0/tss);\n+\t\t\tP.setColumn(i, pv);\n+\t\t\t\n+\t\t\tpv.negate();\n+\t\t\tX.addOuterProduct(t, pv);\n+\t\t}\n+\t\tB.getLeadingDiagonal().set(b);\n+\t}\n+\t\n+\t\tcomputeUSV();\n+\tprivate void computeUSV() {\n+\t\tqralg.process();\n+\t@Test\n+\tpublic void testPLS() {\n+\t\tAMatrix X=Matrix.create(new double[][]{{-1},\n+\t\t\t\t\t\t\t\t\t\t\t   {2}});\n+\t\tAMatrix Y=Matrix.create(new double[][]{{1,1},\n+\t\t\t\t\t\t\t\t\t\t\t   {7,10.000}});\n+\t\tIPLSResult pls=PLS.calculate(X,Y,2);\n+\t\tAMatrix ptinv=PseudoInverse.calculate(pls.getP().getTranspose());\n+\t\tAMatrix coeff=ptinv.innerProduct(pls.getB().innerProduct(pls.getQ().getTranspose()));\n+\t\tassertTrue(coeff.epsilonEquals(Matrix.create(new double[][]{{2,3}})));\n+\t}\n",
        "diff_per_file": {
            "src/main/java/mikera/matrixx/algo/IPLSResult.java": "package mikera.matrixx.algo;\nimport mikera.matrixx.AMatrix;\npublic interface IPLSResult {\n\tpublic AMatrix getX();\n\tpublic AMatrix getY();\n\tpublic AMatrix getT();\n\tpublic AMatrix getP();\n\tpublic AMatrix getQ();\n\tpublic AMatrix getW();\n\tpublic AMatrix getB();\n}\n",
            "src/main/java/mikera/matrixx/algo/PLS.java": "import mikera.matrixx.AMatrix;\nimport mikera.matrixx.Matrix;\nimport mikera.matrixx.impl.DiagonalMatrix;\nimport mikera.vectorz.AVector;\nimport mikera.vectorz.Vector;\npublic class PLS implements IPLSResult {\n\tprivate final AMatrix origX;\n\tprivate final Matrix X;\n\tprivate final Matrix Y; \n\tprivate final Matrix P; \n\tprivate final Matrix Q; \n\tprivate final Matrix T; \n\tprivate final Matrix U;\n\tprivate final Matrix W;\n\tprivate final Vector b;\n\tprivate final DiagonalMatrix B;\n\tprivate final int l; \n\tprivate final int n; \n\tprivate final int m; \n\tprivate final int p;\n\t@Override\n\tpublic AMatrix getX() {\n\t\treturn origX;\n\t}\n\t@Override\n\tpublic AMatrix getY() {\n\t\treturn Y;\n\t}\n\t@Override\n\tpublic AMatrix getT() {\n\t\treturn T;\n\t}\n\t@Override\n\tpublic AMatrix getP() {\n\t\treturn P;\n\t}\n\t@Override\n\tpublic AMatrix getQ() {\n\t\treturn Q;\n\t}\n\t@Override\n\tpublic AMatrix getW() {\n\t\treturn W;\n\t}\n\t@Override\n\tpublic AMatrix getB() {\n\t\treturn B;\n\t}\n\tprivate PLS(AMatrix X, AMatrix Y, int nFactors) {\n\t\tthis.origX=X;\n\t\tthis.Y=Matrix.create(Y);\n\t\tthis.X=Matrix.create(origX);\n\t\tn=X.rowCount();\n\t\tm=X.columnCount();\n\t\tl=nFactors;\n\t\tp=Y.columnCount();\n\t\tif(Y.rowCount()!=n) throw new IllegalArgumentException(\"PLS regression requires equal number of rows in X annd Y matrices\");\n\t\tT=Matrix.create(n,l);\n\t\tU=Matrix.create(n,l);\n\t\tP=Matrix.create(m,l);\n\t\tQ=Matrix.create(p,l);\n\t\tW=Matrix.create(m,l);\n\t\tb=Vector.createLength(l);\n\t\tB=DiagonalMatrix.createDimensions(l);\n\t};\n\tpublic static IPLSResult calculate(AMatrix X, AMatrix Y, int nFactors) {\n\t\t PLS pls= new PLS(X, Y, nFactors);\n\t\t pls.calcResult();\n\t\t return pls;\n\t}\n\tprivate int selectMaxSSColumn(AMatrix A) {\n\t\tint c=0;\n\t\tdouble best=0.0;\n\t\tfor (int i=0; i<m; i++) {\n\t\t\tdouble ss=A.getColumn(i).elementSquaredSum();\n\t\t\tif (ss>best) {\n\t\t\t\tc=i;\n\t\t\t\tbest=ss;\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}\n\tprivate void calcResult() {\n\t\tVector u=Vector.createLength(n);\n\t\tVector w=Vector.createLength(m);\n\t\tVector t=Vector.createLength(n);\n\t\tVector t_old=Vector.createLength(n);\n\t\tVector q=Vector.createLength(p);\n\t\tVector pv=Vector.createLength(m);\n\t\tfor (int j=0; j<m; j++) {\n\t\t\tAVector col=X.getColumnView(j);\n\t\t\tdouble mean=col.elementSum()/n;\n\t\t\tcol.add(-mean);\n\t\t}\n\t\tfor (int i=0; i<l; i++) {\n\t\t\tu.set(X.getColumn(selectMaxSSColumn(X)));\n\t\t\tint maxIterations=10;\n\t\t\tint iterations=0;\n\t\t\twhile (iterations++<=maxIterations) {\n\t\t\t\tw.setInnerProduct(u, X);\n\t\t\t\tw.normalise();\n\t\t\t\tt.setInnerProduct(X, w);\n\t\t\t\tt.normalise();\n\t\t\t\tq.setInnerProduct(t, Y);\n\t\t\t\tif (q.normalise()==0) break; // exit if q length is zero\n\t\t\t\tu.setInnerProduct(Y, q);\n\t\t\t\tdouble dist=t.distance(t_old);\n\t\t\t\tif(dist<0.00000000001) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tt_old.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tU.setColumn(i, u);\n\t\t\tW.setColumn(i, w);\n\t\t\tT.setColumn(i, t);\n\t\t\tQ.setColumn(i, q);\n\t\t\tb.set(i,t.dotProduct(u));\n\t\t\tpv.setInnerProduct(t, X);\n\t\t\tdouble tss=t.elementSquaredSum();\n\t\t\tif (tss!=0.0) pv.multiply(1.0/tss);\n\t\t\tP.setColumn(i, pv);\n\t\t\tpv.negate();\n\t\t\tX.addOuterProduct(t, pv);\n\t\t}\n\t\tB.getLeadingDiagonal().set(b);\n\t}\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\t\tcomputeUSV();\n\tprivate void computeUSV() {\n\t\tqralg.process();\n",
            "src/test/java/mikera/matrixx/algo/TestPLS.java": "package mikera.matrixx.algo;\nimport static org.junit.Assert.*;\nimport org.junit.Test;\nimport mikera.matrixx.AMatrix;\nimport mikera.matrixx.Matrix;\npublic class TestPLS {\n\t@Test\n\tpublic void testPLS() {\n\t\tAMatrix X=Matrix.create(new double[][]{{-1},\n\t\t\t\t\t\t\t\t\t\t\t   {2}});\n\t\tAMatrix Y=Matrix.create(new double[][]{{1,1},\n\t\t\t\t\t\t\t\t\t\t\t   {7,10.000}});\n\t\tIPLSResult pls=PLS.calculate(X,Y,2);\n\t\tAMatrix ptinv=PseudoInverse.calculate(pls.getP().getTranspose());\n\t\tAMatrix coeff=ptinv.innerProduct(pls.getB().innerProduct(pls.getQ().getTranspose()));\n\t\tassertTrue(coeff.epsilonEquals(Matrix.create(new double[][]{{2,3}})));\n\t}\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/algo/IPLSResult.java": [
                1,
                3,
                5,
                11,
                17,
                23,
                30,
                36,
                42,
                48,
                52
            ],
            "src/main/java/mikera/matrixx/algo/PLS.java": [
                3,
                4,
                5,
                6,
                7,
                14,
                15,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                27,
                28,
                29,
                30,
                34,
                35,
                36,
                37,
                39,
                40,
                41,
                42,
                44,
                45,
                46,
                47,
                49,
                50,
                51,
                52,
                54,
                55,
                56,
                57,
                59,
                60,
                61,
                62,
                64,
                65,
                66,
                67,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                89,
                90,
                91,
                92,
                93,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                117,
                118,
                119,
                120,
                121,
                123,
                125,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                146,
                147,
                148,
                149,
                150,
                153,
                154,
                155,
                156,
                159,
                160,
                161,
                162,
                163
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                151,
                187,
                211
            ],
            "src/test/java/mikera/matrixx/algo/TestPLS.java": [
                1,
                3,
                5,
                7,
                8,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                23
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/algo/PLS.java": "public class PLS {\n\tprivate PLS() {};\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\t\tif (computeUSV())\n\t\t\treturn null;\n\tprivate boolean computeUSV() {\n\t\tboolean ret = !qralg.process();\n\t\treturn ret;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/algo/PLS.java": [
                8,
                11
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                152,
                153,
                189,
                213,
                219
            ]
        }
    },
    {
        "commit": "8d66a481",
        "prev_commit": "72cd9dcd",
        "changed_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java",
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/matrixx/impl/ABandedMatrix.java",
            "src/main/java/mikera/matrixx/impl/ASparseRCMatrix.java",
            "src/main/java/mikera/matrixx/impl/BandedMatrix.java",
            "src/main/java/mikera/matrixx/impl/BroadcastVectorMatrix.java",
            "src/main/java/mikera/matrixx/impl/ColumnMatrix.java",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java"
        ],
        "changed_files_num": 14,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java",
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/matrixx/impl/ABandedMatrix.java",
            "src/main/java/mikera/matrixx/impl/ASparseRCMatrix.java",
            "src/main/java/mikera/matrixx/impl/BandedMatrix.java",
            "src/main/java/mikera/matrixx/impl/BroadcastVectorMatrix.java",
            "src/main/java/mikera/matrixx/impl/ColumnMatrix.java",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java"
        ],
        "changed_java_files_num": 14,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "tests_cases_num": {
            "TestArrays": 12,
            "TestBigSparse": 19,
            "TestMiscArrayOps": 14,
            "TestNDArray": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestBands": 6,
            "TestDecomposition": 4,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMisc": 3,
            "TestVectorMatrix": 1,
            "TestCholesky": 6,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestFFT": 2,
            "TestInverses": 1,
            "TestLinear": 6,
            "TestPseudoInverses": 3,
            "TestQR": 8,
            "TestRank": 6,
            "TestSymmEigen": 3,
            "TestBidiagonalRow": 3,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestHessenbergSimilarDecomposition": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestAltLU": 12,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestBanded": 3,
            "TestDiagonalMatrix": 5,
            "TestMiscMatrices": 2,
            "TestSparseColumnMatrix": 11,
            "TestSparseRowMatrix": 11,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestLUSolver": 6,
            "TestQRHouseColSolve": 7,
            "TestAffine": 2,
            "TestTransformz": 2,
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestGrowableVector": 2,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQuaternions": 2,
            "TestScalars": 4,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestTools": 3,
            "TestVector": 1,
            "TestVectorMath": 10,
            "TestVectors": 43,
            "TestVectorz": 6,
            "TestAxisVector": 2,
            "TestJoinedVectors": 15,
            "TestMiscVectors": 7,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestErrors": 1,
            "TestIntArrays": 6,
            "TestMatrixBuilder": 1,
            "TestTesting": 1,
            "TestVectorBuilder": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\tpublic void setSparse(double v);\n+\t\n+\t@Override\n+\tpublic void setSparse(double value) {\n+\t\tint sc=sliceCount();\n+\t\tfor (int i=0; i<sc; i++) {\n+\t\t\tINDArray s=slice(i);\n+\t\t\ts.setSparse(value);\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void setSparse(double v) {\n+\t\tleft.setSparse(v);\n+\t\tright.setSparse(v);\n+\t}\n+\t\n+\t@Override\n+\tpublic final void setSparse(INDArray a) {\n+\t\tint dims=a.dimensionality();\n+\t\tif (dims==0) {\n+\t\t\tsetSparse(a.get());\n+\t\t} else if (dims==1) {\n+\t\t\tsetSparse(a.asVector());\n+\t\t} else if (dims==2) {\n+\t\t\tsetSparse(Matrixx.toMatrix(a));\n+\t\t} else {\n+\t\t\tthrow new IllegalArgumentException(ErrorMessages.incompatibleBroadcast(a, this));\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void setSparse(double value) {\n+\t\tint minBand=-lowerBandwidthLimit();\n+\t\tint maxBand=upperBandwidthLimit();\n+\t\tfor (int i=minBand; i<=maxBand; i++) {\n+\t\t\tgetBand(i).setSparse(value);\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+ \tpublic void setSparse(double value) {\n+\t\tlong n=componentCount();\n+\t\tfor (int i=0; i<n; i++) {\n+\t\t\tAVector v = unsafeGetVector(i);\n+\t\t\tif (v==null) continue;\n+\t\t\tif (v.isFullyMutable()) {\n+\t\t\t\tv.setSparse(value);\n+\t\t\t} else {\n+\t\t\t\tv = v.sparseClone();\n+\t\t\t\tv.setSparse(value);\n+\t\t\t\tunsafeSetVec(i, v);\t\t\t\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t\t\n+\t@Override\n+\tpublic void setSparse(double v) {\n+\t\tthrow new UnsupportedOperationException(ErrorMessages.immutable(this));\n+\t}\n+\t@Override\n+\tpublic void setSparse(double value) {\n+\t\tvector.setSparse(value);\n+\t}\n+\t\n+\t@Override\n+\tpublic void setSparse(double value) {\n+\t\tlead.set(value);\n+\t}\n+\t\n+\t@Override\n+\tpublic void setColumn(int i, AVector col) {\n+\t\treplaceColumn(i,col.clone());\n+\t}\n+\t\n+\t@Override\n+ \tpublic void setSparse(double v) {\n+\t\tset(v);\n+\t}\n+\t\n+\t\tset(src);\n+\t}\n+\t\n+\t@Override\n+ \tpublic void setSparse(double v) {\n+\t\tset(v);\n+\t@Override\n+ \tpublic void setSparse(double v) {\n+\t\tArrays.fill(data, v);\n+\t}\n+\t\n",
        "diff_per_file": {
            "src/main/java/mikera/arrayz/INDArray.java": "\tpublic void setSparse(double v);\n",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t@Override\n\tpublic void setSparse(double value) {\n\t\tint sc=sliceCount();\n\t\tfor (int i=0; i<sc; i++) {\n\t\t\tINDArray s=slice(i);\n\t\t\ts.setSparse(value);\n\t\t}\n\t}\n",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": "\t@Override\n\tpublic void setSparse(double v) {\n\t\tleft.setSparse(v);\n\t\tright.setSparse(v);\n\t}\n",
            "src/main/java/mikera/matrixx/AMatrix.java": "\t@Override\n\tpublic final void setSparse(INDArray a) {\n\t\tint dims=a.dimensionality();\n\t\tif (dims==0) {\n\t\t\tsetSparse(a.get());\n\t\t} else if (dims==1) {\n\t\t\tsetSparse(a.asVector());\n\t\t} else if (dims==2) {\n\t\t\tsetSparse(Matrixx.toMatrix(a));\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(ErrorMessages.incompatibleBroadcast(a, this));\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/impl/ABandedMatrix.java": "\t@Override\n\tpublic void setSparse(double value) {\n\t\tint minBand=-lowerBandwidthLimit();\n\t\tint maxBand=upperBandwidthLimit();\n\t\tfor (int i=minBand; i<=maxBand; i++) {\n\t\t\tgetBand(i).setSparse(value);\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/impl/ASparseRCMatrix.java": "\t@Override\n \tpublic void setSparse(double value) {\n\t\tlong n=componentCount();\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tAVector v = unsafeGetVector(i);\n\t\t\tif (v==null) continue;\n\t\t\tif (v.isFullyMutable()) {\n\t\t\t\tv.setSparse(value);\n\t\t\t} else {\n\t\t\t\tv = v.sparseClone();\n\t\t\t\tv.setSparse(value);\n\t\t\t\tunsafeSetVec(i, v);\t\t\t\n\t\t\t}\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/impl/BroadcastVectorMatrix.java": "\t@Override\n\tpublic void setSparse(double v) {\n\t\tthrow new UnsupportedOperationException(ErrorMessages.immutable(this));\n\t}\n",
            "src/main/java/mikera/matrixx/impl/ColumnMatrix.java": "\t@Override\n\tpublic void setSparse(double value) {\n\t\tvector.setSparse(value);\n\t}\n",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": "\t@Override\n\tpublic void setSparse(double value) {\n\t\tlead.set(value);\n\t}\n",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": "\t@Override\n\tpublic void setColumn(int i, AVector col) {\n\t\treplaceColumn(i,col.clone());\n\t}\n",
            "src/main/java/mikera/vectorz/AScalar.java": "\t@Override\n \tpublic void setSparse(double v) {\n\t\tset(v);\n\t}\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\tset(src);\n\t}\n\t@Override\n \tpublic void setSparse(double v) {\n\t\tset(v);\n",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": "\t@Override\n \tpublic void setSparse(double v) {\n\t\tArrays.fill(data, v);\n\t}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/INDArray.java": [
                772
            ],
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                598,
                599,
                600,
                601,
                602,
                603,
                604,
                605
            ],
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": [
                170,
                171,
                172,
                173,
                174
            ],
            "src/main/java/mikera/matrixx/AMatrix.java": [
                1137,
                1138,
                1139,
                1140,
                1141,
                1142,
                1143,
                1144,
                1145,
                1146,
                1147,
                1148,
                1149
            ],
            "src/main/java/mikera/matrixx/impl/ABandedMatrix.java": [
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166
            ],
            "src/main/java/mikera/matrixx/impl/ASparseRCMatrix.java": [
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297
            ],
            "src/main/java/mikera/matrixx/impl/BroadcastVectorMatrix.java": [
                101,
                102,
                103,
                104
            ],
            "src/main/java/mikera/matrixx/impl/ColumnMatrix.java": [
                93,
                94,
                95,
                96
            ],
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": [
                82,
                83,
                84,
                85
            ],
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": [
                175,
                176,
                177,
                178
            ],
            "src/main/java/mikera/vectorz/AScalar.java": [
                38,
                39,
                40,
                41
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                2358,
                2359,
                2361,
                2362,
                2363
            ],
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": [
                420,
                421,
                422,
                423
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/mikera/vectorz/AVector.java": "import mikera.vectorz.impl.ISparseVector;\n\t\tif (this instanceof ISparseVector) {\n\t\t\tset(src);\n\t\t} else {\n\t\t\tset(src);\n\t\t}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/AVector.java": [
                27,
                2359,
                2361,
                2362,
                2363,
                2364
            ]
        }
    }
]