[
    {
        "commit": "98d829eb",
        "prev_commit": "f6c513ac",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            <action issue=\"NET-643\" type=\"fix\" dev=\"sebb\" due-to=\"Vasily\">\n+            NPE when closing telnet stream\n+            </action>\n+        if (_output_ == null) {\n+            throw new IOException(\"Stream closed\");\n+        }\n+        if (_output_ == null) {\n+            return;\n+        }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java": "        if (_output_ == null) {\n            throw new IOException(\"Stream closed\");\n        }\n        if (_output_ == null) {\n            return;\n        }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java": [
                103,
                104,
                105,
                110,
                111,
                112
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "9ed40806",
        "prev_commit": "125ad9bb",
        "changed_files": [
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java",
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java",
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java",
            "src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java",
            "src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java",
            "src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java"
        ],
        "changed_files_num": 7,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java",
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java",
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java",
            "src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java",
            "src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java",
            "src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java"
        ],
        "changed_java_files_num": 7,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+                    \"Couldn't initiate transfer. Check that file names are valid.\");\n+            System.err.println(\"\\tPrefix file name with '+' to append to the file. Prefix with '-' to allow overwrite.\");\n+        String sender, recipient, subject, fileName, server, cc;\n+            fileName = stdin.readLine();\n+                fileReader = new FileReader(fileName);\n+        String from, subject, newsgroup, fileName, server, organization;\n+            fileName = stdin.readLine();\n+                fileReader = new FileReader(fileName);\n+    private final String _fileName;\n+        _fileName = fileName;\n+        _fileName = buffer.toString();\n+            throw new TFTPPacketException(\"Bad file name and mode format.\");\n+        fileLength = _fileName.length();\n+        System.arraycopy(_fileName.getBytes(), 0, data, 2, fileLength);\n+        fileLength = _fileName.length();\n+        System.arraycopy(_fileName.getBytes(), 0, data, 2, fileLength);\n+        return _fileName;\n+                String fileName = (String) element;\n+                found = fileName.endsWith(string);\n+    private void download(String path, FTPCmd command, File fileName) throws Exception {\n+        OutputStream outputStream = new FileOutputStream(fileName);\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java": "                    \"Couldn't initiate transfer. Check that file names are valid.\");\n",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java": "            System.err.println(\"\\tPrefix file name with '+' to append to the file. Prefix with '-' to allow overwrite.\");\n",
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java": "        String sender, recipient, subject, fileName, server, cc;\n            fileName = stdin.readLine();\n                fileReader = new FileReader(fileName);\n",
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java": "        String from, subject, newsgroup, fileName, server, organization;\n            fileName = stdin.readLine();\n                fileReader = new FileReader(fileName);\n",
            "src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java": "    private final String _fileName;\n        _fileName = fileName;\n        _fileName = buffer.toString();\n            throw new TFTPPacketException(\"Bad file name and mode format.\");\n        fileLength = _fileName.length();\n        System.arraycopy(_fileName.getBytes(), 0, data, 2, fileLength);\n        fileLength = _fileName.length();\n        System.arraycopy(_fileName.getBytes(), 0, data, 2, fileLength);\n        return _fileName;\n",
            "src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java": "                String fileName = (String) element;\n                found = fileName.endsWith(string);\n",
            "src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java": "    private void download(String path, FTPCmd command, File fileName) throws Exception {\n        OutputStream outputStream = new FileOutputStream(fileName);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java": [
                196
            ],
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java": [
                149
            ],
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java": [
                47,
                103,
                107
            ],
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java": [
                46,
                125,
                129
            ],
            "src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java": [
                73,
                92,
                129,
                132,
                184,
                189,
                219,
                225,
                250
            ],
            "src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java": [
                134,
                136
            ],
            "src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java": [
                73,
                80
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java": "                    \"Couldn't initiate transfer.  Check that filenames are valid.\");\n",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java": "            System.err.println(\"\\tPrefix filename with '+' to append to the file. Prefix with '-' to allow overwrite.\");\n",
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java": "        String sender, recipient, subject, filename, server, cc;\n            filename = stdin.readLine();\n                fileReader = new FileReader(filename);\n",
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java": "        String from, subject, newsgroup, filename, server, organization;\n            filename = stdin.readLine();\n                fileReader = new FileReader(filename);\n",
            "src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java": "    private final String _filename;\n        _filename = fileName;\n        _filename = buffer.toString();\n            throw new TFTPPacketException(\"Bad filename and mode format.\");\n        fileLength = _filename.length();\n        System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);\n        fileLength = _filename.length();\n        System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);\n        return _filename;\n",
            "src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java": "                String filename = (String) element;\n                found = filename.endsWith(string);\n",
            "src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java": "    private void download(String path, FTPCmd command, File filename) throws Exception {\n        OutputStream outputStream = new FileOutputStream(filename);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java": [
                196
            ],
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java": [
                149
            ],
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java": [
                47,
                103,
                107
            ],
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java": [
                46,
                125,
                129
            ],
            "src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java": [
                73,
                92,
                129,
                132,
                184,
                189,
                219,
                225,
                250
            ],
            "src/test/java/org/apache/commons/net/ftp/ListingFunctionalTest.java": [
                134,
                136
            ],
            "src/test/java/org/apache/commons/net/ftp/parser/DownloadListings.java": [
                73,
                80
            ]
        }
    },
    {
        "commit": "e08fbb9e",
        "prev_commit": "24dd750b",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
            "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
            "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 12,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 8,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            <action issue=\"NET-639\" type=\"fix\" dev=\"sebb\" due-to=\" Alexander Eller\">\n+            MVSFTPEntryParser.preParse - MVS, z/OS - allow for merged Ext/Used fields\n+            </action>\n+            \"(?:\\\\S+\\\\s+)?\" + // used - ignored\n+            \"FPFS25 3390   2004/06/23  1    1  FB     128  6144  PS    INCOMING.WTM204.D061704\",\n+            \"PEX26F 3390   2017/07/03  115807  FB   29600 29600  PS    INCOMING.FIN.D170630.T160630\",\n+        };\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java": "            \"(?:\\\\S+\\\\s+)?\" + // used - ignored\n",
            "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java": "            \"FPFS25 3390   2004/06/23  1    1  FB     128  6144  PS    INCOMING.WTM204.D061704\",\n            \"PEX26F 3390   2017/07/03  115807  FB   29600 29600  PS    INCOMING.FIN.D170630.T160630\",\n        };\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java": [
                70
            ],
            "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java": [
                45,
                46,
                47
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java": "            \"\\\\S+\\\\s+\" + // used - ignored\n",
            "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java": "            \"FPFS25 3390   2004/06/23  1    1  FB     128  6144  PS    INCOMING.WTM204.D061704\", };\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java": [
                69
            ],
            "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java": [
                45
            ]
        }
    },
    {
        "commit": "39f8fa7a",
        "prev_commit": "17f69894",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/net/ftp/FTP.java",
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/ftp/FTP.java",
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            <action issue=\"NET-646\" type=\"add\" dev=\"sebb\">\n+            ALLO FTP Command for files >2GB\n+            </action>\n+    public int allo(long bytes) throws IOException\n+    {\n+        return sendCommand(FTPCmd.ALLO, Long.toString(bytes));\n+    }\n+    public int allo(long bytes, int recordSize) throws IOException\n+    {\n+        return sendCommand(FTPCmd.ALLO, Long.toString(bytes) + \" R \" +\n+                           Integer.toString(recordSize));\n+    }\n+    public boolean allocate(long bytes) throws IOException\n+    {\n+        return FTPReply.isPositiveCompletion(allo(bytes));\n+    }\n+    public boolean allocate(long bytes, int recordSize) throws IOException\n+    {\n+        return FTPReply.isPositiveCompletion(allo(bytes, recordSize));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTP.java": "    public int allo(long bytes) throws IOException\n    {\n        return sendCommand(FTPCmd.ALLO, Long.toString(bytes));\n    }\n    public int allo(long bytes, int recordSize) throws IOException\n    {\n        return sendCommand(FTPCmd.ALLO, Long.toString(bytes) + \" R \" +\n                           Integer.toString(recordSize));\n    }\n",
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": "    public boolean allocate(long bytes) throws IOException\n    {\n        return FTPReply.isPositiveCompletion(allo(bytes));\n    }\n    public boolean allocate(long bytes, int recordSize) throws IOException\n    {\n        return FTPReply.isPositiveCompletion(allo(bytes, recordSize));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTP.java": [
                1310,
                1311,
                1312,
                1313,
                1364,
                1365,
                1366,
                1367,
                1368
            ],
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": [
                2295,
                2296,
                2297,
                2298,
                2481,
                2482,
                2483,
                2484
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "f5e5d181",
        "prev_commit": "79ffd5d2",
        "changed_files": [
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
            "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
            "src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
            "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
            "src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java"
        ],
        "changed_java_files_num": 3,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 12,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private static final int DEFAULT_MAX_SUBNEGOTIATION_LENGTH = 512;\n+    final int _maxSubnegotiationLength;\n+        this(\"VT100\", DEFAULT_MAX_SUBNEGOTIATION_LENGTH);\n+        this(termtype, DEFAULT_MAX_SUBNEGOTIATION_LENGTH);\n+    }\n+    public TelnetClient(int maxSubnegotiationLength)\n+    {\n+        this(\"VT100\", maxSubnegotiationLength);\n+    }\n+    public TelnetClient(String termtype, int maxSubnegotiationLength)\n+    {\n+        super(termtype);\n+        _maxSubnegotiationLength = maxSubnegotiationLength;\n+    private final int __suboption[];\n+        __suboption = new int[client._maxSubnegotiationLength];\n+    private TestConnection SMALL_BUFFER;\n+    private final int NUM_CONNECTIONS = 5;\n+    protected int[] lastSubnegotiation;\n+    protected int lastSubnegotiationLength;\n+        SimpleOptionHandler subnegotiationSizeHandler = new SimpleOptionHandler(99, false, false, true, false)\n+        {\n+            @Override\n+            public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength)\n+            {\n+                lastSubnegotiation = suboptionData;\n+                lastSubnegotiationLength = suboptionLength;\n+                return null;\n+            }\n+        };\n+                        client.addOptionHandler(subnegotiationSizeHandler);\n+                    case 4:\n+                        client = new TelnetClient(8);\n+                        client.addOptionHandler(subnegotiationSizeHandler);\n+                        client.connect(\"127.0.0.1\", port);\n+                        SMALL_BUFFER = new TestConnection(server, client, port);\n+                        break;\n+        SMALL_BUFFER.close();\n+    public void testMaxSubnegotiationLength() throws Exception\n+    {\n+        byte send[] =\n+            {\n+                (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) 99,\n+                (byte) 1, (byte) 2, (byte) 3,\n+                (byte) 4, (byte) 5, (byte) 6,\n+                (byte) 7, (byte) 8, (byte) 9,\n+                (byte) 10, (byte) 11, (byte) 12,\n+                (byte) 13, (byte) 14, (byte) 15,\n+                (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE,\n+            };\n+        OutputStream os1 = SMALL_BUFFER.server.getOutputStream();\n+        os1.write(send);\n+        os1.flush();\n+        Thread.sleep(500);\n+        assertEquals(8, lastSubnegotiationLength);\n+        assertEquals(8, lastSubnegotiation.length);\n+        assertEquals(99, lastSubnegotiation[0]);\n+        assertEquals(1, lastSubnegotiation[1]);\n+        assertEquals(2, lastSubnegotiation[2]);\n+        assertEquals(3, lastSubnegotiation[3]);\n+        assertEquals(4, lastSubnegotiation[4]);\n+        assertEquals(5, lastSubnegotiation[5]);\n+        assertEquals(6, lastSubnegotiation[6]);\n+        assertEquals(7, lastSubnegotiation[7]);\n+        OutputStream os2 = STANDARD.server.getOutputStream();\n+        os2.write(send);\n+        os2.flush();\n+        Thread.sleep(500);\n+        assertEquals(16, lastSubnegotiationLength);\n+        assertEquals(512, lastSubnegotiation.length);\n+        assertEquals(99, lastSubnegotiation[0]);\n+        assertEquals(1, lastSubnegotiation[1]);\n+        assertEquals(2, lastSubnegotiation[2]);\n+        assertEquals(3, lastSubnegotiation[3]);\n+        assertEquals(4, lastSubnegotiation[4]);\n+        assertEquals(5, lastSubnegotiation[5]);\n+        assertEquals(6, lastSubnegotiation[6]);\n+        assertEquals(7, lastSubnegotiation[7]);\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java": "    private static final int DEFAULT_MAX_SUBNEGOTIATION_LENGTH = 512;\n    final int _maxSubnegotiationLength;\n        this(\"VT100\", DEFAULT_MAX_SUBNEGOTIATION_LENGTH);\n        this(termtype, DEFAULT_MAX_SUBNEGOTIATION_LENGTH);\n    }\n    public TelnetClient(int maxSubnegotiationLength)\n    {\n        this(\"VT100\", maxSubnegotiationLength);\n    }\n    public TelnetClient(String termtype, int maxSubnegotiationLength)\n    {\n        super(termtype);\n        _maxSubnegotiationLength = maxSubnegotiationLength;\n",
            "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java": "    private final int __suboption[];\n        __suboption = new int[client._maxSubnegotiationLength];\n",
            "src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java": "    private TestConnection SMALL_BUFFER;\n    private final int NUM_CONNECTIONS = 5;\n    protected int[] lastSubnegotiation;\n    protected int lastSubnegotiationLength;\n        SimpleOptionHandler subnegotiationSizeHandler = new SimpleOptionHandler(99, false, false, true, false)\n        {\n            @Override\n            public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength)\n            {\n                lastSubnegotiation = suboptionData;\n                lastSubnegotiationLength = suboptionLength;\n                return null;\n            }\n        };\n                        client.addOptionHandler(subnegotiationSizeHandler);\n                    case 4:\n                        client = new TelnetClient(8);\n                        client.addOptionHandler(subnegotiationSizeHandler);\n                        client.connect(\"127.0.0.1\", port);\n                        SMALL_BUFFER = new TestConnection(server, client, port);\n                        break;\n        SMALL_BUFFER.close();\n    public void testMaxSubnegotiationLength() throws Exception\n    {\n        byte send[] =\n            {\n                (byte) TelnetCommand.IAC, (byte) TelnetCommand.SB, (byte) 99,\n                (byte) 1, (byte) 2, (byte) 3,\n                (byte) 4, (byte) 5, (byte) 6,\n                (byte) 7, (byte) 8, (byte) 9,\n                (byte) 10, (byte) 11, (byte) 12,\n                (byte) 13, (byte) 14, (byte) 15,\n                (byte) TelnetCommand.IAC, (byte) TelnetCommand.SE,\n            };\n        OutputStream os1 = SMALL_BUFFER.server.getOutputStream();\n        os1.write(send);\n        os1.flush();\n        Thread.sleep(500);\n        assertEquals(8, lastSubnegotiationLength);\n        assertEquals(8, lastSubnegotiation.length);\n        assertEquals(99, lastSubnegotiation[0]);\n        assertEquals(1, lastSubnegotiation[1]);\n        assertEquals(2, lastSubnegotiation[2]);\n        assertEquals(3, lastSubnegotiation[3]);\n        assertEquals(4, lastSubnegotiation[4]);\n        assertEquals(5, lastSubnegotiation[5]);\n        assertEquals(6, lastSubnegotiation[6]);\n        assertEquals(7, lastSubnegotiation[7]);\n        OutputStream os2 = STANDARD.server.getOutputStream();\n        os2.write(send);\n        os2.flush();\n        Thread.sleep(500);\n        assertEquals(16, lastSubnegotiationLength);\n        assertEquals(512, lastSubnegotiation.length);\n        assertEquals(99, lastSubnegotiation[0]);\n        assertEquals(1, lastSubnegotiation[1]);\n        assertEquals(2, lastSubnegotiation[2]);\n        assertEquals(3, lastSubnegotiation[3]);\n        assertEquals(4, lastSubnegotiation[4]);\n        assertEquals(5, lastSubnegotiation[5]);\n        assertEquals(6, lastSubnegotiation[6]);\n        assertEquals(7, lastSubnegotiation[7]);\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java": [
                46,
                48,
                59,
                69,
                70,
                78,
                79,
                80,
                81,
                91,
                92,
                94,
                98
            ],
            "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java": [
                48,
                67
            ],
            "src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java": [
                62,
                64,
                72,
                73,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                105,
                135,
                136,
                137,
                138,
                139,
                140,
                163,
                873,
                874,
                875,
                876,
                877,
                878,
                879,
                880,
                881,
                882,
                883,
                884,
                886,
                887,
                888,
                889,
                892,
                893,
                894,
                895,
                896,
                897,
                898,
                899,
                900,
                901,
                903,
                904,
                905,
                906,
                909,
                910,
                911,
                912,
                913,
                914,
                915,
                916,
                917,
                918,
                919
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java": "        super (\"VT100\");\n        __input = null;\n        __output = null;\n        super (termtype);\n",
            "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java": "    private final int __suboption[] = new int[512];\n",
            "src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java": "    private final int NUM_CONNECTIONS = 4;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/telnet/TelnetClient.java": [
                57,
                59,
                60,
                71
            ],
            "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java": [
                48
            ],
            "src/test/java/org/apache/commons/net/telnet/TelnetClientTest.java": [
                63
            ]
        }
    },
    {
        "commit": "d28e5f09",
        "prev_commit": "5c5e141a",
        "changed_files": [
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            InetAddress socketHost = socket.getInetAddress();\n+                    \"Host attempting data connection \" + socketHost.getHostAddress() +\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": "            InetAddress socketHost = socket.getInetAddress();\n                    \"Host attempting data connection \" + socketHost.getHostAddress() +\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": [
                941,
                946
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": "                    \"Host attempting data connection \" + socket.getInetAddress().getHostAddress() +\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": [
                943
            ]
        }
    },
    {
        "commit": "fb7aae4c",
        "prev_commit": "51bf45a8",
        "changed_files": [
            "src/main/java/org/apache/commons/net/imap/IMAP.java",
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/imap/IMAP.java",
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    static String quoteMailboxName(String input) {\n+        return doCommand (IMAPCommand.SELECT, quoteMailboxName(mailboxName));\n+        return doCommand (IMAPCommand.EXAMINE, quoteMailboxName(mailboxName));\n+        return doCommand (IMAPCommand.CREATE, quoteMailboxName(mailboxName));\n+        return doCommand (IMAPCommand.DELETE, quoteMailboxName(mailboxName));\n+        return doCommand (IMAPCommand.RENAME, quoteMailboxName(oldMailboxName) + \" \" + quoteMailboxName(newMailboxName));\n+        return doCommand (IMAPCommand.SUBSCRIBE, quoteMailboxName(mailboxName));\n+        return doCommand (IMAPCommand.UNSUBSCRIBE, quoteMailboxName(mailboxName));\n+        return doCommand (IMAPCommand.LIST, quoteMailboxName(refName) + \" \" + quoteMailboxName(mailboxName));\n+        return doCommand (IMAPCommand.LSUB, quoteMailboxName(refName) + \" \" + quoteMailboxName(mailboxName));\n+        sb.append(quoteMailboxName(mailboxName));\n+        StringBuilder args = new StringBuilder(quoteMailboxName(mailboxName));\n+        return doCommand (IMAPCommand.COPY, sequenceSet + \" \" + quoteMailboxName(mailboxName));\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/imap/IMAP.java": "    static String quoteMailboxName(String input) {\n",
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java": "        return doCommand (IMAPCommand.SELECT, quoteMailboxName(mailboxName));\n        return doCommand (IMAPCommand.EXAMINE, quoteMailboxName(mailboxName));\n        return doCommand (IMAPCommand.CREATE, quoteMailboxName(mailboxName));\n        return doCommand (IMAPCommand.DELETE, quoteMailboxName(mailboxName));\n        return doCommand (IMAPCommand.RENAME, quoteMailboxName(oldMailboxName) + \" \" + quoteMailboxName(newMailboxName));\n        return doCommand (IMAPCommand.SUBSCRIBE, quoteMailboxName(mailboxName));\n        return doCommand (IMAPCommand.UNSUBSCRIBE, quoteMailboxName(mailboxName));\n        return doCommand (IMAPCommand.LIST, quoteMailboxName(refName) + \" \" + quoteMailboxName(mailboxName));\n        return doCommand (IMAPCommand.LSUB, quoteMailboxName(refName) + \" \" + quoteMailboxName(mailboxName));\n        sb.append(quoteMailboxName(mailboxName));\n        StringBuilder args = new StringBuilder(quoteMailboxName(mailboxName));\n        return doCommand (IMAPCommand.COPY, sequenceSet + \" \" + quoteMailboxName(mailboxName));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/imap/IMAP.java": [
                483
            ],
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java": [
                115,
                126,
                137,
                148,
                160,
                171,
                182,
                199,
                212,
                229,
                256,
                420
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/imap/IMAP.java": "    static String quoteString(String input) {\n",
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java": "        return doCommand (IMAPCommand.SELECT, mailboxName);\n        return doCommand (IMAPCommand.EXAMINE, mailboxName);\n        return doCommand (IMAPCommand.CREATE, mailboxName);\n        return doCommand (IMAPCommand.DELETE, mailboxName);\n        return doCommand (IMAPCommand.RENAME, oldMailboxName + \" \" + newMailboxName);\n        return doCommand (IMAPCommand.SUBSCRIBE, mailboxName);\n        return doCommand (IMAPCommand.UNSUBSCRIBE, mailboxName);\n        return doCommand (IMAPCommand.LIST, quoteString(refName) + \" \" + quoteString(mailboxName));\n        return doCommand (IMAPCommand.LSUB, quoteString(refName) + \" \" + quoteString(mailboxName));\n        sb.append(mailboxName);\n        StringBuilder args = new StringBuilder(mailboxName);\n        return doCommand (IMAPCommand.COPY, sequenceSet + \" \" + mailboxName);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/imap/IMAP.java": [
                483
            ],
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java": [
                115,
                126,
                137,
                148,
                160,
                171,
                182,
                199,
                212,
                229,
                256,
                420
            ]
        }
    },
    {
        "commit": "de2bea76",
        "prev_commit": "dfd5f19d",
        "changed_files": [
            "src/main/java/org/apache/commons/net/ftp/FTP.java",
            "src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/ftp/FTP.java",
            "src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "MainTest": 1,
            "SocketClientTest": 1,
            "SubnetUtilsTest": 12,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 8,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        num = h.indexOf('%');\n+            if (attrib.indexOf('R') != -1) {\n+            if (attrib.indexOf('W') != -1) {\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTP.java": "        num = h.indexOf('%');\n",
            "src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java": "            if (attrib.indexOf('R') != -1) {\n            if (attrib.indexOf('W') != -1) {\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTP.java": [
                1007
            ],
            "src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java": [
                150,
                154
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTP.java": "        num = h.indexOf(\"%\");\n",
            "src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java": "            if (attrib.indexOf(\"R\") != -1) {\n            if (attrib.indexOf(\"W\") != -1) {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTP.java": [
                1007
            ],
            "src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java": [
                150,
                154
            ]
        }
    },
    {
        "commit": "4a01d553",
        "prev_commit": "f82eed7d",
        "changed_files": [
            "src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java",
            "src/test/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java",
            "src/test/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        + \"(\\\\d+)(?:/\\\\d+)?\\\\s*\"                                                 //2  size/allocated\n+        \"ALLOCMISS.COM;1            1         15-AUG-1996 14:10:38  [POSTWARE,LP]    (RWE,RWE,RWE,RE)\"\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java": "        + \"(\\\\d+)(?:/\\\\d+)?\\\\s*\"                                                 //2  size/allocated\n",
            "src/test/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java": "        \"ALLOCMISS.COM;1            1         15-AUG-1996 14:10:38  [POSTWARE,LP]    (RWE,RWE,RWE,RE)\"\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java": [
                56
            ],
            "src/test/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java": [
                67
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java": "        + \"(\\\\d+)/\\\\d+\\\\s*\"                                                 //2  size/allocated\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java": [
                56
            ]
        }
    },
    {
        "commit": "a4c2318b",
        "prev_commit": "617c3c78",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/examples/ftp/FTPClientExample.java",
            "src/main/java/org/apache/commons/net/ftp/FTP.java",
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
            "src/main/java/org/apache/commons/net/ftp/FTPCmd.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/examples/ftp/FTPClientExample.java",
            "src/main/java/org/apache/commons/net/ftp/FTP.java",
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
            "src/main/java/org/apache/commons/net/ftp/FTPCmd.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "MainTest": 1,
            "SocketClientTest": 1,
            "SubnetUtilsTest": 12,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 8,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            <action issue=\"NET-634\" type=\"add\" dev=\"sebb\" due-to=\"Mauro Molinari\">\n+            Add SIZE command support\n+            </action>\n+        \"\\t-i - issue SIZE command for a file\\n\" +\n+        boolean size = false;\n+            else if (args[base].equals(\"-i\")) {\n+                size = true;\n+                minParams = 3;\n+            }\n+            else if (listFiles || mlsd || mdtm || mlst || listNames || size)\n+                if (size) {\n+                    System.out.println(\"Size=\"+ftp.getSize(remote));\n+                }\n+    public int size(String parameters) throws IOException\n+    {\n+        return sendCommand(FTPCmd.SIZE, parameters);\n+    }\n+    public String getSize(String pathname) throws IOException\n+    {\n+        if (FTPReply.isPositiveCompletion(size(pathname))) {\n+            return getReplyStrings()[0].substring(4); // skip the return code (e.g. 213) and the space\n+        }\n+        return null;\n+    }\n+    SIZE,\n",
        "diff_per_file": {
            "src/main/java/examples/ftp/FTPClientExample.java": "        \"\\t-i - issue SIZE command for a file\\n\" +\n        boolean size = false;\n            else if (args[base].equals(\"-i\")) {\n                size = true;\n                minParams = 3;\n            }\n            else if (listFiles || mlsd || mdtm || mlst || listNames || size)\n                if (size) {\n                    System.out.println(\"Size=\"+ftp.getSize(remote));\n                }\n",
            "src/main/java/org/apache/commons/net/ftp/FTP.java": "    public int size(String parameters) throws IOException\n    {\n        return sendCommand(FTPCmd.SIZE, parameters);\n    }\n",
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": "    public String getSize(String pathname) throws IOException\n    {\n        if (FTPReply.isPositiveCompletion(size(pathname))) {\n            return getReplyStrings()[0].substring(4); // skip the return code (e.g. 213) and the space\n        }\n        return null;\n    }\n",
            "src/main/java/org/apache/commons/net/ftp/FTPCmd.java": "    SIZE,\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/examples/ftp/FTPClientExample.java": [
                66,
                95,
                154,
                155,
                156,
                157,
                413,
                441,
                442,
                443
            ],
            "src/main/java/org/apache/commons/net/ftp/FTP.java": [
                1711,
                1712,
                1713,
                1714
            ],
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": [
                3541,
                3542,
                3543,
                3544,
                3545,
                3546,
                3547
            ],
            "src/main/java/org/apache/commons/net/ftp/FTPCmd.java": [
                58
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/examples/ftp/FTPClientExample.java": "            else if (listFiles || mlsd || mdtm || mlst || listNames)\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/examples/ftp/FTPClientExample.java": [
                407
            ]
        }
    },
    {
        "commit": "78eb940a",
        "prev_commit": "41e514cd",
        "changed_files": [
            ".gitignore",
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        __passiveHost = \"0,0,0,0\".equals(m.group(1)) ? _socket_.getInetAddress().getHostAddress() :\n+                m.group(1).replace(',', '.'); // Fix up to look like IP address\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": "        __passiveHost = \"0,0,0,0\".equals(m.group(1)) ? _socket_.getInetAddress().getHostAddress() :\n                m.group(1).replace(',', '.'); // Fix up to look like IP address\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": [
                577,
                578
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": "        __passiveHost = m.group(1).replace(',', '.'); // Fix up to look like IP address\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": [
                577
            ]
        }
    },
    {
        "commit": "c72538bb",
        "prev_commit": "b86bd426",
        "changed_files": [
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            if(reply.charAt(0) != ' ') { reply = \" \" + reply; }\n+            if (reply.length() < 3) {\n+            String entry = reply.replaceAll(\"^\\\\s+\", \"\"); // skip leading space for parser\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": "            if(reply.charAt(0) != ' ') { reply = \" \" + reply; }\n            if (reply.length() < 3) {\n            String entry = reply.replaceAll(\"^\\\\s+\", \"\"); // skip leading space for parser\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": [
                2551,
                2556,
                2560
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": "            if (reply.length() < 3 || reply.charAt(0) != ' ') {\n            String entry = reply.substring(1); // skip leading space for parser\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPClient.java": [
                2554,
                2557
            ]
        }
    },
    {
        "commit": "2d935482",
        "prev_commit": "f38341ca",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
            "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
            "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            <action issue=\"NET-641\" type=\"fix\" dev=\"sebb\" due-to=\"pin_ptr\">\n+            SubnetUtils.SubnetInfo.isInRange(\"0.0.0.0\") returns true for CIDR/31, 32\n+            </action>\n+            if (address == 0) { // cannot ever be in range; rejecting now avoids problems with CIDR/31,32\n+                return false;\n+            }\n+    public void testNET641() {\n+        assertFalse(new SubnetUtils(\"192.168.1.0/00\").getInfo().isInRange(\"0.0.0.0\"));\n+        assertFalse(new SubnetUtils(\"192.168.1.0/30\").getInfo().isInRange(\"0.0.0.0\"));\n+        assertFalse(new SubnetUtils(\"192.168.1.0/31\").getInfo().isInRange(\"0.0.0.0\"));\n+        assertFalse(new SubnetUtils(\"192.168.1.0/32\").getInfo().isInRange(\"0.0.0.0\"));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/util/SubnetUtils.java": "            if (address == 0) { // cannot ever be in range; rejecting now avoids problems with CIDR/31,32\n                return false;\n            }\n",
            "src/test/java/org/apache/commons/net/SubnetUtilsTest.java": "    public void testNET641() {\n        assertFalse(new SubnetUtils(\"192.168.1.0/00\").getInfo().isInRange(\"0.0.0.0\"));\n        assertFalse(new SubnetUtils(\"192.168.1.0/30\").getInfo().isInRange(\"0.0.0.0\"));\n        assertFalse(new SubnetUtils(\"192.168.1.0/31\").getInfo().isInRange(\"0.0.0.0\"));\n        assertFalse(new SubnetUtils(\"192.168.1.0/32\").getInfo().isInRange(\"0.0.0.0\"));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/util/SubnetUtils.java": [
                168,
                169,
                170
            ],
            "src/test/java/org/apache/commons/net/SubnetUtilsTest.java": [
                372,
                373,
                374,
                375,
                376,
                377
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "7fabd004",
        "prev_commit": "efedd6dc",
        "changed_files": [
            "pom.xml",
            "src/assembly/bin.xml",
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/net/examples/Main.java",
            "src/main/java/org/apache/commons/net/examples/cidr/SubnetUtilsExample.java",
            "src/main/java/org/apache/commons/net/examples/ftp/FTPClientExample.java",
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java",
            "src/main/java/org/apache/commons/net/examples/ftp/TFTPExample.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPImportMbox.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPMail.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPUtils.java",
            "src/main/java/org/apache/commons/net/examples/mail/POP3ExportMbox.java",
            "src/main/java/org/apache/commons/net/examples/mail/POP3Mail.java",
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java",
            "src/main/java/org/apache/commons/net/examples/mail/Utils.java",
            "src/main/java/org/apache/commons/net/examples/nntp/ArticleReader.java",
            "src/main/java/org/apache/commons/net/examples/nntp/ExtendedNNTPOps.java",
            "src/main/java/org/apache/commons/net/examples/nntp/ListNewsgroups.java",
            "src/main/java/org/apache/commons/net/examples/nntp/MessageThreading.java",
            "src/main/java/org/apache/commons/net/examples/nntp/NNTPUtils.java",
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java",
            "src/main/java/org/apache/commons/net/examples/ntp/NTPClient.java",
            "src/main/java/org/apache/commons/net/examples/ntp/SimpleNTPServer.java",
            "src/main/java/org/apache/commons/net/examples/ntp/TimeClient.java",
            "src/main/java/org/apache/commons/net/examples/package-info.java",
            "src/main/java/org/apache/commons/net/examples/telnet/TelnetClientExample.java",
            "src/main/java/org/apache/commons/net/examples/telnet/WeatherTelnet.java",
            "src/main/java/org/apache/commons/net/examples/unix/chargen.java",
            "src/main/java/org/apache/commons/net/examples/unix/daytime.java",
            "src/main/java/org/apache/commons/net/examples/unix/echo.java",
            "src/main/java/org/apache/commons/net/examples/unix/finger.java",
            "src/main/java/org/apache/commons/net/examples/unix/fwhois.java",
            "src/main/java/org/apache/commons/net/examples/unix/rdate.java",
            "src/main/java/org/apache/commons/net/examples/unix/rexec.java",
            "src/main/java/org/apache/commons/net/examples/unix/rlogin.java",
            "src/main/java/org/apache/commons/net/examples/unix/rshell.java",
            "src/main/java/org/apache/commons/net/examples/util/IOUtil.java",
            "src/main/resources/examples/examples.properties",
            "src/main/resources/org/apache/commons/net/examples/examples.properties",
            "src/test/java/org/apache/commons/net/examples/MainTest.java",
            "src/test/java/org/apache/commons/net/ntp/TestNtpClient.java"
        ],
        "changed_files_num": 42,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/examples/Main.java",
            "src/main/java/org/apache/commons/net/examples/cidr/SubnetUtilsExample.java",
            "src/main/java/org/apache/commons/net/examples/ftp/FTPClientExample.java",
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java",
            "src/main/java/org/apache/commons/net/examples/ftp/TFTPExample.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPImportMbox.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPMail.java",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPUtils.java",
            "src/main/java/org/apache/commons/net/examples/mail/POP3ExportMbox.java",
            "src/main/java/org/apache/commons/net/examples/mail/POP3Mail.java",
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java",
            "src/main/java/org/apache/commons/net/examples/mail/Utils.java",
            "src/main/java/org/apache/commons/net/examples/nntp/ArticleReader.java",
            "src/main/java/org/apache/commons/net/examples/nntp/ExtendedNNTPOps.java",
            "src/main/java/org/apache/commons/net/examples/nntp/ListNewsgroups.java",
            "src/main/java/org/apache/commons/net/examples/nntp/MessageThreading.java",
            "src/main/java/org/apache/commons/net/examples/nntp/NNTPUtils.java",
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java",
            "src/main/java/org/apache/commons/net/examples/ntp/NTPClient.java",
            "src/main/java/org/apache/commons/net/examples/ntp/SimpleNTPServer.java",
            "src/main/java/org/apache/commons/net/examples/ntp/TimeClient.java",
            "src/main/java/org/apache/commons/net/examples/package-info.java",
            "src/main/java/org/apache/commons/net/examples/telnet/TelnetClientExample.java",
            "src/main/java/org/apache/commons/net/examples/telnet/WeatherTelnet.java",
            "src/main/java/org/apache/commons/net/examples/unix/chargen.java",
            "src/main/java/org/apache/commons/net/examples/unix/daytime.java",
            "src/main/java/org/apache/commons/net/examples/unix/echo.java",
            "src/main/java/org/apache/commons/net/examples/unix/finger.java",
            "src/main/java/org/apache/commons/net/examples/unix/fwhois.java",
            "src/main/java/org/apache/commons/net/examples/unix/rdate.java",
            "src/main/java/org/apache/commons/net/examples/unix/rexec.java",
            "src/main/java/org/apache/commons/net/examples/unix/rlogin.java",
            "src/main/java/org/apache/commons/net/examples/unix/rshell.java",
            "src/main/java/org/apache/commons/net/examples/util/IOUtil.java",
            "src/test/java/org/apache/commons/net/examples/MainTest.java",
            "src/test/java/org/apache/commons/net/ntp/TestNtpClient.java"
        ],
        "changed_java_files_num": 37,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 12,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 8,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+                        <exclude>**/examples/**</exclude>\n+                        <exclude>**/examples/**</exclude>\n+                                        <attribute name=\"Main-Class\" value=\"org/apache/commons/net/examples/Main\" />\n+                                    <fileset dir=\"target/classes\" includes=\"**/examples/**\" />\n+                    <excludePackageNames>*.examples.*</excludePackageNames>\n+                        <directory>src/main/java/org/apache/commons/net/examples</directory>\n+                    <exclude>**/examples/**</exclude>\n+          <mainClass>org.apache.commons.net.examples.Main</mainClass>\n+                      <exclude>**/examples/**</exclude>\n+                    <excludePackageNames>*.examples.*</excludePackageNames>\n+            <directory>src/main/java/org/apache/commons/net/examples</directory>\n+            <outputDirectory>org/apache/commons/net/examples</outputDirectory>\n+ Note that the examples packages were moved under org/apache/commons/net/examples.\n+ The examples are not part of the public API, so this does not affect compatibility.\n+            <action issue=\"NET-636\" type=\"fix\" dev=\"sebb\">\n+            examples should be in org.apache.commons.net subpackage\n+            </action>\n+            File examples = new File(sourceFile, \"org/apache/commons/net/examples\"); // must match top level examples package name\n+                || name.endsWith(\"examples/Main.class\")  // the initial class, don't want to add that\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/examples/Main.java": "package org.apache.commons.net.examples;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.security.CodeSource;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Properties;\npublic class Main {\n    public static void main(String[] args) throws Throwable  {\n        final Properties fp = new Properties();\n        final InputStream ras = Main.class.getResourceAsStream(\"examples.properties\");\n        if (ras != null) {\n            fp.load(ras);\n        } else {\n            System.err.println(\"[Cannot find examples.properties file, so aliases cannot be used]\");\n        }\n        if (args.length == 0) {\n            if (Thread.currentThread().getStackTrace().length > 2) { // called by Maven\n                System.out.println(\"Usage: mvn -q exec:java  -Dexec.arguments=<alias or\" +\n                                    \" exampleClass>,<exampleClass parameters> (comma-separated, no spaces)\");\n                System.out.println(\"Or   : mvn -q exec:java  -Dexec.args=\\\"<alias\" +\n                                    \" or exampleClass> <exampleClass parameters>\\\" (space separated)\");\n            } else {\n                if (fromJar()) {\n                    System.out.println(\n                        \"Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>\");\n                } else {\n                    System.out.println(\n                        \"Usage: java -cp target/classes examples/Main <alias or exampleClass> <exampleClass parameters>\");\n                }\n            }\n            @SuppressWarnings(\"unchecked\") // property names are Strings\n            List<String> l = (List<String>) Collections.list(fp.propertyNames());\n            if (l.isEmpty()) {\n                return;\n            }\n            Collections.sort(l);\n            System.out.println(\"\\nAliases and their classes:\");\n            for(String s : l) {\n                System.out.printf(\"%-25s %s%n\",s,fp.getProperty(s));\n            }\n            return;\n        }\n        String shortName = args[0];\n        String fullName = fp.getProperty(shortName);\n        if (fullName == null) {\n            fullName = shortName;\n        }\n        fullName = fullName.replace('/', '.');\n        try {\n            Class<?> clazz = Class.forName(fullName);\n            Method m = clazz.getDeclaredMethod(\"main\", new Class[]{args.getClass()});\n            String[] args2 = new String[args.length-1];\n            System.arraycopy(args, 1, args2, 0, args2.length);\n            try {\n                m.invoke(null, (Object)args2);\n            } catch (InvocationTargetException ite) {\n                Throwable cause = ite.getCause();\n                if (cause != null) {\n                    throw cause;\n                } else {\n                    throw ite;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            System.out.println(e);\n        }\n    }\n    private static boolean fromJar() {\n        final CodeSource codeSource = Main.class.getProtectionDomain().getCodeSource();\n        if ( codeSource != null) {\n            return codeSource.getLocation().getFile().endsWith(\".jar\");\n        }\n        return false; // No idea if this can happen\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/cidr/SubnetUtilsExample.java": "package org.apache.commons.net.examples.cidr;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport org.apache.commons.net.util.SubnetUtils;\nimport org.apache.commons.net.util.SubnetUtils.SubnetInfo;\npublic class SubnetUtilsExample {\n    public static void main(String[] args) {\n        String subnet = \"192.168.0.3/31\";\n        SubnetUtils utils = new SubnetUtils(subnet);\n        SubnetInfo info = utils.getInfo();\n        System.out.printf(\"Subnet Information for %s:%n\", subnet);\n        System.out.println(\"--------------------------------------\");\n        System.out.printf(\"IP Address:\\t\\t\\t%s\\t[%s]%n\", info.getAddress(),\n                Integer.toBinaryString(info.asInteger(info.getAddress())));\n        System.out.printf(\"Netmask:\\t\\t\\t%s\\t[%s]%n\", info.getNetmask(),\n                Integer.toBinaryString(info.asInteger(info.getNetmask())));\n        System.out.printf(\"CIDR Representation:\\t\\t%s%n%n\", info.getCidrSignature());\n        System.out.printf(\"Supplied IP Address:\\t\\t%s%n%n\", info.getAddress());\n        System.out.printf(\"Network Address:\\t\\t%s\\t[%s]%n\", info.getNetworkAddress(),\n                Integer.toBinaryString(info.asInteger(info.getNetworkAddress())));\n        System.out.printf(\"Broadcast Address:\\t\\t%s\\t[%s]%n\", info.getBroadcastAddress(),\n                Integer.toBinaryString(info.asInteger(info.getBroadcastAddress())));\n        System.out.printf(\"Low Address:\\t\\t\\t%s\\t[%s]%n\", info.getLowAddress(),\n                Integer.toBinaryString(info.asInteger(info.getLowAddress())));\n        System.out.printf(\"High Address:\\t\\t\\t%s\\t[%s]%n\", info.getHighAddress(),\n                Integer.toBinaryString(info.asInteger(info.getHighAddress())));\n        System.out.printf(\"Total usable addresses: \\t%d%n\", Long.valueOf(info.getAddressCountLong()));\n        System.out.printf(\"Address List: %s%n%n\", Arrays.toString(info.getAllAddresses()));\n        final String prompt =\"Enter an IP address (e.g. 192.168.0.10):\";\n        System.out.println(prompt);\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextLine()) {\n            String address = scanner.nextLine();\n            System.out.println(\"The IP address [\" + address + \"] is \"\n                    + (info.isInRange(address) ? \"\" : \"not \")\n                    + \"within the subnet [\" + subnet + \"]\");\n            System.out.println(prompt);\n        }\n        scanner.close();\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/ftp/FTPClientExample.java": "package org.apache.commons.net.examples.ftp;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.Arrays;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.ftp.FTP;\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPHTTPClient;\nimport org.apache.commons.net.ftp.FTPClientConfig;\nimport org.apache.commons.net.ftp.FTPConnectionClosedException;\nimport org.apache.commons.net.ftp.FTPFile;\nimport org.apache.commons.net.ftp.FTPReply;\nimport org.apache.commons.net.ftp.FTPSClient;\nimport org.apache.commons.net.io.CopyStreamEvent;\nimport org.apache.commons.net.io.CopyStreamListener;\nimport org.apache.commons.net.util.TrustManagerUtils;\npublic final class FTPClientExample\n{\n    public static final String USAGE =\n        \"Expected Parameters: [options] <hostname> <username> <password> [<remote file> [<local file>]]\\n\" +\n        \"\\nDefault behavior is to download a file and use ASCII transfer mode.\\n\" +\n        \"\\t-a - use local active mode (default is local passive)\\n\" +\n        \"\\t-A - anonymous login (omit username and password parameters)\\n\" +\n        \"\\t-b - use binary transfer mode\\n\" +\n        \"\\t-c cmd - issue arbitrary command (remote is used as a parameter if provided) \\n\" +\n        \"\\t-d - list directory details using MLSD (remote is used as the pathname if provided)\\n\" +\n        \"\\t-e - use EPSV with IPv4 (default false)\\n\" +\n        \"\\t-E - encoding to use for control channel\\n\" +\n        \"\\t-f - issue FEAT command (remote and local files are ignored)\\n\" +\n        \"\\t-h - list hidden files (applies to -l and -n only)\\n\" +\n        \"\\t-i - issue SIZE command for a file\\n\" +\n        \"\\t-k secs - use keep-alive timer (setControlKeepAliveTimeout)\\n\" +\n        \"\\t-l - list files using LIST (remote is used as the pathname if provided)\\n\" +\n        \"\\t     Files are listed twice: first in raw mode, then as the formatted parsed data.\\n\" +\n        \"\\t     N.B. if the wrong server-type is used, output may be lost. Use -U or -S as necessary.\\n\" +\n        \"\\t-L - use lenient future dates (server dates may be up to 1 day into future)\\n\" +\n        \"\\t-m - list file details using MDTM (remote is used as the pathname if provided)\\n\" +\n        \"\\t-n - list file names using NLST (remote is used as the pathname if provided)\\n\" +\n        \"\\t-p true|false|protocol[,true|false] - use FTPSClient with the specified protocol and/or isImplicit setting\\n\" +\n        \"\\t-s - store file on server (upload)\\n\" +\n        \"\\t-S - systemType set server system type (e.g. UNIX VMS WINDOWS)\\n\" +\n        \"\\t-t - list file details using MLST (remote is used as the pathname if provided)\\n\" +\n        \"\\t-U - save unparseable responses\\n\" +\n        \"\\t-w msec - wait time for keep-alive reply (setControlKeepAliveReplyTimeout)\\n\" +\n        \"\\t-T  all|valid|none - use one of the built-in TrustManager implementations (none = JVM default)\\n\" +\n        \"\\t-y format - set default date format string\\n\" +\n        \"\\t-Y format - set recent date format string\\n\" +\n        \"\\t-Z timezone - set the server timezone for parsing LIST responses\\n\" +\n        \"\\t-z timezone - set the timezone for displaying MDTM, LIST, MLSD, MLST responses\\n\" +\n        \"\\t-PrH server[:port] - HTTP Proxy host and optional port[80] \\n\" +\n        \"\\t-PrU user - HTTP Proxy server username\\n\" +\n        \"\\t-PrP password - HTTP Proxy server password\\n\" +\n        \"\\t-# - add hash display during transfers\\n\";\n    public static void main(String[] args) throws UnknownHostException\n    {\n        boolean storeFile = false, binaryTransfer = false, error = false, listFiles = false, listNames = false, hidden = false;\n        boolean localActive = false, useEpsvWithIPv4 = false, feat = false, printHash = false;\n        boolean mlst = false, mlsd = false, mdtm = false, saveUnparseable = false;\n        boolean size = false;\n        boolean lenient = false;\n        long keepAliveTimeout = -1;\n        int controlKeepAliveReplyTimeout = -1;\n        int minParams = 5; // listings require 3 params\n        String protocol = null; // SSL protocol\n        String doCommand = null;\n        String trustmgr = null;\n        String proxyHost = null;\n        int proxyPort = 80;\n        String proxyUser = null;\n        String proxyPassword = null;\n        String username = null;\n        String password = null;\n        String encoding = null;\n        String serverTimeZoneId = null;\n        String displayTimeZoneId = null;\n        String serverType = null;\n        String defaultDateFormat = null;\n        String recentDateFormat = null;\n        int base = 0;\n        for (base = 0; base < args.length; base++)\n        {\n            if (args[base].equals(\"-s\")) {\n                storeFile = true;\n            }\n            else if (args[base].equals(\"-a\")) {\n                localActive = true;\n            }\n            else if (args[base].equals(\"-A\")) {\n                username = \"anonymous\";\n                password = System.getProperty(\"user.name\")+\"@\"+InetAddress.getLocalHost().getHostName();\n            }\n            else if (args[base].equals(\"-b\")) {\n                binaryTransfer = true;\n            }\n            else if (args[base].equals(\"-c\")) {\n                doCommand = args[++base];\n                minParams = 3;\n            }\n            else if (args[base].equals(\"-d\")) {\n                mlsd = true;\n                minParams = 3;\n            }\n            else if (args[base].equals(\"-e\")) {\n                useEpsvWithIPv4 = true;\n            }\n            else if (args[base].equals(\"-E\")) {\n                encoding = args[++base];\n            }\n            else if (args[base].equals(\"-f\")) {\n                feat = true;\n                minParams = 3;\n            }\n            else if (args[base].equals(\"-h\")) {\n                hidden = true;\n            }\n            else if (args[base].equals(\"-i\")) {\n                size = true;\n                minParams = 3;\n            }\n            else if (args[base].equals(\"-k\")) {\n                keepAliveTimeout = Long.parseLong(args[++base]);\n            }\n            else if (args[base].equals(\"-l\")) {\n                listFiles = true;\n                minParams = 3;\n            }\n            else if (args[base].equals(\"-m\")) {\n                mdtm = true;\n                minParams = 3;\n            }\n            else if (args[base].equals(\"-L\")) {\n                lenient = true;\n            }\n            else if (args[base].equals(\"-n\")) {\n                listNames = true;\n                minParams = 3;\n            }\n            else if (args[base].equals(\"-p\")) {\n                protocol = args[++base];\n            }\n            else if (args[base].equals(\"-S\")) {\n                serverType = args[++base];\n            }\n            else if (args[base].equals(\"-t\")) {\n                mlst = true;\n                minParams = 3;\n            }\n            else if (args[base].equals(\"-U\")) {\n                saveUnparseable = true;\n            }\n            else if (args[base].equals(\"-w\")) {\n                controlKeepAliveReplyTimeout = Integer.parseInt(args[++base]);\n            }\n            else if (args[base].equals(\"-T\")) {\n                trustmgr = args[++base];\n            }\n            else if (args[base].equals(\"-y\")) {\n                defaultDateFormat = args[++base];\n            }\n            else if (args[base].equals(\"-Y\")) {\n                recentDateFormat = args[++base];\n            }\n            else if (args[base].equals(\"-Z\")) {\n                serverTimeZoneId = args[++base];\n            }\n            else if (args[base].equals(\"-z\")) {\n                displayTimeZoneId = args[++base];\n            }\n            else if (args[base].equals(\"-PrH\")) {\n                proxyHost = args[++base];\n                String parts[] = proxyHost.split(\":\");\n                if (parts.length == 2){\n                    proxyHost=parts[0];\n                    proxyPort=Integer.parseInt(parts[1]);\n                }\n            }\n            else if (args[base].equals(\"-PrU\")) {\n                proxyUser = args[++base];\n            }\n            else if (args[base].equals(\"-PrP\")) {\n                proxyPassword = args[++base];\n            }\n            else if (args[base].equals(\"-#\")) {\n                printHash = true;\n            }\n            else {\n                break;\n            }\n        }\n        int remain = args.length - base;\n        if (username != null) {\n            minParams -= 2;\n        }\n        if (remain < minParams) // server, user, pass, remote, local [protocol]\n        {\n            if (args.length > 0) {\n                System.err.println(\"Actual Parameters: \" + Arrays.toString(args));\n            }\n            System.err.println(USAGE);\n            System.exit(1);\n        }\n        String server = args[base++];\n        int port = 0;\n        String parts[] = server.split(\":\");\n        if (parts.length == 2){\n            server=parts[0];\n            port=Integer.parseInt(parts[1]);\n        }\n        if (username == null) {\n            username = args[base++];\n            password = args[base++];\n        }\n        String remote = null;\n        if (args.length - base > 0) {\n            remote = args[base++];\n        }\n        String local = null;\n        if (args.length - base > 0) {\n            local = args[base++];\n        }\n        final FTPClient ftp;\n        if (protocol == null ) {\n            if(proxyHost !=null) {\n                System.out.println(\"Using HTTP proxy server: \" + proxyHost);\n                ftp = new FTPHTTPClient(proxyHost, proxyPort, proxyUser, proxyPassword);\n            }\n            else {\n                ftp = new FTPClient();\n            }\n        } else {\n            FTPSClient ftps;\n            if (protocol.equals(\"true\")) {\n                ftps = new FTPSClient(true);\n            } else if (protocol.equals(\"false\")) {\n                ftps = new FTPSClient(false);\n            } else {\n                String prot[] = protocol.split(\",\");\n                if (prot.length == 1) { // Just protocol\n                    ftps = new FTPSClient(protocol);\n                } else { // protocol,true|false\n                    ftps = new FTPSClient(prot[0], Boolean.parseBoolean(prot[1]));\n                }\n            }\n            ftp = ftps;\n            if (\"all\".equals(trustmgr)) {\n                ftps.setTrustManager(TrustManagerUtils.getAcceptAllTrustManager());\n            } else if (\"valid\".equals(trustmgr)) {\n                ftps.setTrustManager(TrustManagerUtils.getValidateServerCertificateTrustManager());\n            } else if (\"none\".equals(trustmgr)) {\n                ftps.setTrustManager(null);\n            }\n        }\n        if (printHash) {\n            ftp.setCopyStreamListener(createListener());\n        }\n        if (keepAliveTimeout >= 0) {\n            ftp.setControlKeepAliveTimeout(keepAliveTimeout);\n        }\n        if (controlKeepAliveReplyTimeout >= 0) {\n            ftp.setControlKeepAliveReplyTimeout(controlKeepAliveReplyTimeout);\n        }\n        if (encoding != null) {\n            ftp.setControlEncoding(encoding);\n        }\n        ftp.setListHiddenFiles(hidden);\n        ftp.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));\n        final FTPClientConfig config;\n        if (serverType != null) {\n            config = new FTPClientConfig(serverType);\n        } else {\n            config = new FTPClientConfig();\n        }\n        config.setUnparseableEntries(saveUnparseable);\n        if (defaultDateFormat != null) {\n            config.setDefaultDateFormatStr(defaultDateFormat);\n        }\n        if (recentDateFormat != null) {\n            config.setRecentDateFormatStr(recentDateFormat);\n        }\n        ftp.configure(config);\n        try\n        {\n            int reply;\n            if (port > 0) {\n                ftp.connect(server, port);\n            } else {\n                ftp.connect(server);\n            }\n            System.out.println(\"Connected to \" + server + \" on \" + (port>0 ? port : ftp.getDefaultPort()));\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply))\n            {\n                ftp.disconnect();\n                System.err.println(\"FTP server refused connection.\");\n                System.exit(1);\n            }\n        }\n        catch (IOException e)\n        {\n            if (ftp.isConnected())\n            {\n                try\n                {\n                    ftp.disconnect();\n                }\n                catch (IOException f)\n                {\n                }\n            }\n            System.err.println(\"Could not connect to server.\");\n            e.printStackTrace();\n            System.exit(1);\n        }\n__main:\n        try\n        {\n            if (!ftp.login(username, password))\n            {\n                ftp.logout();\n                error = true;\n                break __main;\n            }\n            System.out.println(\"Remote system is \" + ftp.getSystemType());\n            if (binaryTransfer) {\n                ftp.setFileType(FTP.BINARY_FILE_TYPE);\n            } else {\n                ftp.setFileType(FTP.ASCII_FILE_TYPE);\n            }\n            if (localActive) {\n                ftp.enterLocalActiveMode();\n            } else {\n                ftp.enterLocalPassiveMode();\n            }\n            ftp.setUseEPSVwithIPv4(useEpsvWithIPv4);\n            if (storeFile)\n            {\n                InputStream input;\n                input = new FileInputStream(local);\n                ftp.storeFile(remote, input);\n                input.close();\n                if (keepAliveTimeout > 0) {\n                    showCslStats(ftp);\n                }\n            }\n            else if (listFiles || mlsd || mdtm || mlst || listNames || size)\n            {\n                if (mlsd) {\n                    for (FTPFile f : ftp.mlistDir(remote)) {\n                        System.out.println(f.getRawListing());\n                        System.out.println(f.toFormattedString(displayTimeZoneId));\n                    }\n                }\n                if (mdtm) {\n                    FTPFile f = ftp.mdtmFile(remote);\n                    if (f != null) {\n                        System.out.println(f.getRawListing());\n                        System.out.println(f.toFormattedString(displayTimeZoneId));\n                    } else {\n                        System.out.println(\"File not found\");\n                    }\n                }\n                if (mlst) {\n                    FTPFile f = ftp.mlistFile(remote);\n                    if (f != null){\n                        System.out.println(f.toFormattedString(displayTimeZoneId));\n                    }\n                }\n                if (listNames) {\n                    for (String s : ftp.listNames(remote)) {\n                        System.out.println(s);\n                    }\n                }\n                if (size) {\n                    System.out.println(\"Size=\"+ftp.getSize(remote));\n                }\n                if (listFiles) {\n                    if (lenient || serverTimeZoneId != null) {\n                        config.setLenientFutureDates(lenient);\n                        if (serverTimeZoneId != null) {\n                            config.setServerTimeZoneId(serverTimeZoneId);\n                        }\n                        ftp.configure(config );\n                    }\n                    for (FTPFile f : ftp.listFiles(remote)) {\n                        System.out.println(f.getRawListing());\n                        System.out.println(f.toFormattedString(displayTimeZoneId));\n                    }\n                }\n            }\n            else if (feat)\n            {\n                if (remote != null) { // See if the command is present\n                    if (ftp.hasFeature(remote)) {\n                        System.out.println(\"Has feature: \"+remote);\n                    } else {\n                        if (FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                            System.out.println(\"FEAT \"+remote+\" was not detected\");\n                        } else {\n                            System.out.println(\"Command failed: \"+ftp.getReplyString());\n                        }\n                    }\n                    String []features = ftp.featureValues(remote);\n                    if (features != null) {\n                        for(String f : features) {\n                            System.out.println(\"FEAT \"+remote+\"=\"+f+\".\");\n                        }\n                    } else {\n                        if (FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                            System.out.println(\"FEAT \"+remote+\" is not present\");\n                        } else {\n                            System.out.println(\"Command failed: \"+ftp.getReplyString());\n                        }\n                    }\n                } else {\n                    if (ftp.features()) {\n                    } else {\n                        System.out.println(\"Failed: \"+ftp.getReplyString());\n                    }\n                }\n            }\n            else if (doCommand != null)\n            {\n                if (ftp.doCommand(doCommand, remote)) {\n                } else {\n                    System.out.println(\"Failed: \"+ftp.getReplyString());\n                }\n            }\n            else\n            {\n                OutputStream output;\n                output = new FileOutputStream(local);\n                ftp.retrieveFile(remote, output);\n                output.close();\n                if (keepAliveTimeout > 0) {\n                    showCslStats(ftp);\n                }\n            }\n            ftp.noop(); // check that control connection is working OK\n            ftp.logout();\n        }\n        catch (FTPConnectionClosedException e)\n        {\n            error = true;\n            System.err.println(\"Server closed connection.\");\n            e.printStackTrace();\n        }\n        catch (IOException e)\n        {\n            error = true;\n            e.printStackTrace();\n        }\n        finally\n        {\n            if (ftp.isConnected())\n            {\n                try\n                {\n                    ftp.disconnect();\n                }\n                catch (IOException f)\n                {\n                }\n            }\n        }\n        System.exit(error ? 1 : 0);\n    } // end main\n    private static void showCslStats(FTPClient ftp) {\n        @SuppressWarnings(\"deprecation\") // debug code\n        int []stats = ftp.getCslDebug();\n        System.out.println(\"CslDebug=\"+Arrays.toString(stats));\n    }\n    private static CopyStreamListener createListener(){\n        return new CopyStreamListener(){\n            private long megsTotal = 0;\n            @Override\n            public void bytesTransferred(CopyStreamEvent event) {\n                bytesTransferred(event.getTotalBytesTransferred(), event.getBytesTransferred(), event.getStreamSize());\n            }\n            @Override\n            public void bytesTransferred(long totalBytesTransferred,\n                    int bytesTransferred, long streamSize) {\n                long megs = totalBytesTransferred / 1000000;\n                for (long l = megsTotal; l < megs; l++) {\n                    System.err.print(\"#\");\n                }\n                megsTotal = megs;\n            }\n        };\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java": "package org.apache.commons.net.examples.ftp;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.net.InetAddress;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.ProtocolCommandListener;\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPReply;\npublic final class ServerToServerFTP\n{\n    public static void main(String[] args)\n    {\n        String server1, username1, password1, file1;\n        String server2, username2, password2, file2;\n        String [] parts;\n        int port1=0, port2=0;\n        FTPClient ftp1, ftp2;\n        ProtocolCommandListener listener;\n        if (args.length < 8)\n        {\n            System.err.println(\n                \"Usage: ftp <host1> <user1> <pass1> <file1> <host2> <user2> <pass2> <file2>\"\n            );\n            System.exit(1);\n        }\n        server1 = args[0];\n        parts = server1.split(\":\");\n        if (parts.length == 2) {\n            server1=parts[0];\n            port1 = Integer.parseInt(parts[1]);\n        }\n        username1 = args[1];\n        password1 = args[2];\n        file1 = args[3];\n        server2 = args[4];\n        parts = server2.split(\":\");\n        if (parts.length == 2) {\n            server2=parts[0];\n            port2 = Integer.parseInt(parts[1]);\n        }\n        username2 = args[5];\n        password2 = args[6];\n        file2 = args[7];\n        listener = new PrintCommandListener(new PrintWriter(System.out), true);\n        ftp1 = new FTPClient();\n        ftp1.addProtocolCommandListener(listener);\n        ftp2 = new FTPClient();\n        ftp2.addProtocolCommandListener(listener);\n        try\n        {\n            int reply;\n            if (port1 > 0) {\n                ftp1.connect(server1, port1);\n            } else {\n                ftp1.connect(server1);\n            }\n            System.out.println(\"Connected to \" + server1 + \".\");\n            reply = ftp1.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply))\n            {\n                ftp1.disconnect();\n                System.err.println(\"FTP server1 refused connection.\");\n                System.exit(1);\n            }\n        }\n        catch (IOException e)\n        {\n            if (ftp1.isConnected())\n            {\n                try\n                {\n                    ftp1.disconnect();\n                }\n                catch (IOException f)\n                {\n                }\n            }\n            System.err.println(\"Could not connect to server1.\");\n            e.printStackTrace();\n            System.exit(1);\n        }\n        try\n        {\n            int reply;\n            if (port2 > 0) {\n                ftp2.connect(server2, port2);\n            } else {\n                ftp2.connect(server2);\n            }\n            System.out.println(\"Connected to \" + server2 + \".\");\n            reply = ftp2.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply))\n            {\n                ftp2.disconnect();\n                System.err.println(\"FTP server2 refused connection.\");\n                System.exit(1);\n            }\n        }\n        catch (IOException e)\n        {\n            if (ftp2.isConnected())\n            {\n                try\n                {\n                    ftp2.disconnect();\n                }\n                catch (IOException f)\n                {\n                }\n            }\n            System.err.println(\"Could not connect to server2.\");\n            e.printStackTrace();\n            System.exit(1);\n        }\n__main:\n        try\n        {\n            if (!ftp1.login(username1, password1))\n            {\n                System.err.println(\"Could not login to \" + server1);\n                break __main;\n            }\n            if (!ftp2.login(username2, password2))\n            {\n                System.err.println(\"Could not login to \" + server2);\n                break __main;\n            }\n            ftp2.enterRemotePassiveMode();\n            ftp1.enterRemoteActiveMode(InetAddress.getByName(ftp2.getPassiveHost()),\n                                       ftp2.getPassivePort());\n            if (ftp1.remoteRetrieve(file1) && ftp2.remoteStoreUnique(file2))\n            {\n                ftp1.completePendingCommand();\n                ftp2.completePendingCommand();\n            }\n            else\n            {\n                System.err.println(\n                    \"Couldn't initiate transfer.  Check that filenames are valid.\");\n                break __main;\n            }\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        finally\n        {\n            try\n            {\n                if (ftp1.isConnected())\n                {\n                    ftp1.logout();\n                    ftp1.disconnect();\n                }\n            }\n            catch (IOException e)\n            {\n            }\n            try\n            {\n                if (ftp2.isConnected())\n                {\n                    ftp2.logout();\n                    ftp2.disconnect();\n                }\n            }\n            catch (IOException e)\n            {\n            }\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/ftp/TFTPExample.java": "package org.apache.commons.net.examples.ftp;\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport org.apache.commons.net.tftp.TFTP;\nimport org.apache.commons.net.tftp.TFTPClient;\nimport org.apache.commons.net.tftp.TFTPPacket;\npublic final class TFTPExample\n{\n    static final String USAGE =\n        \"Usage: tftp [options] hostname localfile remotefile\\n\\n\" +\n        \"hostname   - The name of the remote host [:port]\\n\" +\n        \"localfile  - The name of the local file to send or the name to use for\\n\" +\n        \"\\tthe received file\\n\" +\n        \"remotefile - The name of the remote file to receive or the name for\\n\" +\n        \"\\tthe remote server to use to name the local file being sent.\\n\\n\" +\n        \"options: (The default is to assume -r -b)\\n\" +\n        \"\\t-t timeout in seconds (default 60s)\\n\" +\n        \"\\t-s Send a local file\\n\" +\n        \"\\t-r Receive a remote file\\n\" +\n        \"\\t-a Use ASCII transfer mode\\n\" +\n        \"\\t-b Use binary transfer mode\\n\" +\n        \"\\t-v Verbose (trace packets)\\n\"\n        ;\n    public static void main(String[] args)\n    {\n        boolean receiveFile = true, closed;\n        int transferMode = TFTP.BINARY_MODE, argc;\n        String arg, hostname, localFilename, remoteFilename;\n        final TFTPClient tftp;\n        int timeout = 60000;\n        boolean verbose = false;\n        for (argc = 0; argc < args.length; argc++)\n        {\n            arg = args[argc];\n            if (arg.startsWith(\"-\"))\n            {\n                if (arg.equals(\"-r\")) {\n                    receiveFile = true;\n                } else if (arg.equals(\"-s\")) {\n                    receiveFile = false;\n                } else if (arg.equals(\"-a\")) {\n                    transferMode = TFTP.ASCII_MODE;\n                } else if (arg.equals(\"-b\")) {\n                    transferMode = TFTP.BINARY_MODE;\n                } else if (arg.equals(\"-t\")) {\n                    timeout = 1000*Integer.parseInt(args[++argc]);\n                } else if (arg.equals(\"-v\")) {\n                    verbose = true;\n                } else {\n                    System.err.println(\"\u0007Error: unrecognized option.\");\n                    System.err.print(USAGE);\n                    System.exit(1);\n                }\n            } else {\n                break;\n            }\n        }\n        if (args.length - argc != 3)\n        {\n            System.err.println(\"\u0007Error: invalid number of arguments.\");\n            System.err.print(USAGE);\n            System.exit(1);\n        }\n        hostname = args[argc];\n        localFilename = args[argc + 1];\n        remoteFilename = args[argc + 2];\n        if (verbose) {\n            tftp = new TFTPClient() {\n                @Override\n                protected void trace(String direction, TFTPPacket packet) {\n                    System.out.println(direction + \" \" + packet);\n                }\n            };\n        } else {\n            tftp = new TFTPClient();\n        }\n        tftp.setDefaultTimeout(timeout);\n        closed = false;\n        if (receiveFile)\n        {\n            closed = receive(transferMode, hostname, localFilename, remoteFilename, tftp);\n        } else {\n            closed = send(transferMode, hostname, localFilename, remoteFilename, tftp);\n        }\n        System.out.println(\"Recd: \"+tftp.getTotalBytesReceived()+\" Sent: \"+tftp.getTotalBytesSent());\n        if (!closed) {\n            System.out.println(\"Failed\");\n            System.exit(1);\n        }\n        System.out.println(\"OK\");\n    }\n    private static boolean send(int transferMode, String hostname, String localFilename, String remoteFilename,\n            TFTPClient tftp) {\n        boolean closed;\n        FileInputStream input = null;\n        try\n        {\n            input = new FileInputStream(localFilename);\n        }\n        catch (IOException e)\n        {\n            tftp.close();\n            throw new RuntimeException(\"Error: could not open local file for reading.\", e);\n        }\n        open(tftp);\n        try\n        {\n            String [] parts = hostname.split(\":\");\n            if (parts.length == 2) {\n                tftp.sendFile(remoteFilename, transferMode, input, parts[0], Integer.parseInt(parts[1]));\n            } else {\n                tftp.sendFile(remoteFilename, transferMode, input, hostname);\n            }\n        }\n        catch (UnknownHostException e)\n        {\n            System.err.println(\"Error: could not resolve hostname.\");\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Error: I/O exception occurred while sending file.\");\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        finally\n        {\n            closed = close(tftp, input);\n        }\n        return closed;\n    }\n    private static boolean receive(int transferMode, String hostname, String localFilename, String remoteFilename,\n            TFTPClient tftp) {\n        boolean closed;\n        FileOutputStream output = null;\n        File file;\n        file = new File(localFilename);\n        if (file.exists())\n        {\n            System.err.println(\"Error: \" + localFilename + \" already exists.\");\n            return false;\n        }\n        try\n        {\n            output = new FileOutputStream(file);\n        }\n        catch (IOException e)\n        {\n            tftp.close();\n            throw new RuntimeException(\"Error: could not open local file for writing.\", e);\n        }\n        open(tftp);\n        try\n        {\n            String [] parts = hostname.split(\":\");\n            if (parts.length == 2) {\n                tftp.receiveFile(remoteFilename, transferMode, output, parts[0], Integer.parseInt(parts[1]));\n            } else {\n                tftp.receiveFile(remoteFilename, transferMode, output, hostname);\n            }\n        }\n        catch (UnknownHostException e)\n        {\n            System.err.println(\"Error: could not resolve hostname.\");\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        catch (IOException e)\n        {\n            System.err.println(\n                \"Error: I/O exception occurred while receiving file.\");\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        finally\n        {\n            closed = close(tftp, output);\n        }\n        return closed;\n    }\n    private static boolean close(TFTPClient tftp, Closeable output) {\n        boolean closed;\n        tftp.close();\n        try\n        {\n            if (output != null) {\n                output.close();\n            }\n            closed = true;\n        }\n        catch (IOException e)\n        {\n            closed = false;\n            System.err.println(\"Error: error closing file.\");\n            System.err.println(e.getMessage());\n        }\n        return closed;\n    }\n    private static void open(TFTPClient tftp) {\n        try\n        {\n            tftp.open();\n        }\n        catch (SocketException e)\n        {\n            throw new RuntimeException(\"Error: could not open local UDP socket.\", e);\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java": "package org.apache.commons.net.examples.mail;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.TimeZone;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.ProtocolCommandEvent;\nimport org.apache.commons.net.imap.IMAP.IMAPChunkListener;\nimport org.apache.commons.net.imap.IMAP;\nimport org.apache.commons.net.imap.IMAPClient;\nimport org.apache.commons.net.imap.IMAPReply;\npublic final class IMAPExportMbox\n{\n    private static final String CRLF = \"\\r\\n\";\n    private static final String LF = \"\\n\";\n    private static final String EOL_DEFAULT = System.getProperty(\"line.separator\");\n    private static final Pattern PATFROM = Pattern.compile(\">*From \"); // unescaped From_\n    private static final Pattern PATID = // INTERNALDATE\n            Pattern.compile(\".*INTERNALDATE \\\"(\\\\d\\\\d-\\\\w{3}-\\\\d{4} \\\\d\\\\d:\\\\d\\\\d:\\\\d\\\\d [+-]\\\\d+)\\\"\");\n    private static final int PATID_DATE_GROUP = 1;\n    private static final Pattern PATSEQ = Pattern.compile(\"\\\\* (\\\\d+) \"); // Sequence number\n    private static final int PATSEQ_SEQUENCE_GROUP = 1;\n    private static final Pattern PATEXISTS = Pattern.compile(\"\\\\* (\\\\d+) EXISTS\"); // Response from SELECT\n    private static final Pattern PATTEMPFAIL = Pattern.compile(\"[A-Z]{4} NO \\\\[TEMPFAIL\\\\] FETCH .*\");\n    private static final int CONNECT_TIMEOUT = 10; // Seconds\n    private static final int READ_TIMEOUT = 10;\n    public static void main(String[] args) throws IOException, URISyntaxException\n    {\n        int connect_timeout = CONNECT_TIMEOUT;\n        int read_timeout = READ_TIMEOUT;\n        int argIdx = 0;\n        String eol = EOL_DEFAULT;\n        boolean printHash = false;\n        boolean printMarker = false;\n        int retryWaitSecs = 0;\n        for(argIdx = 0; argIdx < args.length; argIdx++) {\n            if (args[argIdx].equals(\"-c\")) {\n                connect_timeout = Integer.parseInt(args[++argIdx]);\n            } else if (args[argIdx].equals(\"-r\")) {\n                read_timeout = Integer.parseInt(args[++argIdx]);\n            } else if (args[argIdx].equals(\"-R\")) {\n                retryWaitSecs = Integer.parseInt(args[++argIdx]);\n            } else if (args[argIdx].equals(\"-LF\")) {\n                eol = LF;\n            } else if (args[argIdx].equals(\"-CRLF\")) {\n                eol = CRLF;\n            } else if (args[argIdx].equals(\"-.\")) {\n                printHash = true;\n            } else if (args[argIdx].equals(\"-X\")) {\n                printMarker = true;\n            } else {\n                break;\n            }\n        }\n        final int argCount = args.length - argIdx;\n        if (argCount < 2)\n        {\n            System.err.println(\"Usage: IMAPExportMbox [-LF|-CRLF] [-c n] [-r n] [-R n] [-.] [-X]\" +\n                               \" imap[s]://user:password@host[:port]/folder/path [+|-]<mboxfile> [sequence-set] [itemnames]\");\n            System.err.println(\"\\t-LF | -CRLF set end-of-line to LF or CRLF (default is the line.separator system property)\");\n            System.err.println(\"\\t-c connect timeout in seconds (default 10)\");\n            System.err.println(\"\\t-r read timeout in seconds (default 10)\");\n            System.err.println(\"\\t-R temporary failure retry wait in seconds (default 0; i.e. disabled)\");\n            System.err.println(\"\\t-. print a . for each complete message received\");\n            System.err.println(\"\\t-X print the X-IMAP line for each complete message received\");\n            System.err.println(\"\\tthe mboxfile is where the messages are stored; use '-' to write to standard output.\");\n            System.err.println(\"\\tPrefix filename with '+' to append to the file. Prefix with '-' to allow overwrite.\");\n            System.err.println(\"\\ta sequence-set is a list of numbers/number ranges e.g. 1,2,3-10,20:* - default 1:*\");\n            System.err.println(\"\\titemnames are the message data item name(s) e.g. BODY.PEEK[HEADER.FIELDS (SUBJECT)]\" +\n                               \" or a macro e.g. ALL - default (INTERNALDATE BODY.PEEK[])\");\n            System.exit(1);\n        }\n        final String uriString = args[argIdx++];\n        URI uri;\n        try {\n            uri      = URI.create(uriString);\n        } catch(IllegalArgumentException e) { // cannot parse the path as is; let's pull it apart and try again\n            Matcher m = Pattern.compile(\"(imaps?://[^/]+)(/.*)\").matcher(uriString);\n            if (m.matches()) {\n                uri = URI.create(m.group(1)); // Just the scheme and auth parts\n                uri = new URI(uri.getScheme(), uri.getAuthority(), m.group(2), null, null);\n            } else {\n                throw e;\n            }\n        }\n        final String file  = args[argIdx++];\n        String sequenceSet = argCount > 2 ? args[argIdx++] : \"1:*\";\n        final String itemNames;\n        if (argCount > 3) {\n            if (argCount > 4) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"(\");\n                for(int i=4; i <= argCount; i++) {\n                    if (i>4) {\n                        sb.append(\" \");\n                    }\n                    sb.append(args[argIdx++]);\n                }\n                sb.append(\")\");\n                itemNames = sb.toString();\n            } else {\n                itemNames = args[argIdx++];\n            }\n        } else {\n            itemNames = \"(INTERNALDATE BODY.PEEK[])\";\n        }\n        final boolean checkSequence = sequenceSet.matches(\"\\\\d+:(\\\\d+|\\\\*)\"); // are we expecting a sequence?\n        final MboxListener chunkListener;\n        if (file.equals(\"-\")) {\n            chunkListener = null;\n        } else if (file.startsWith(\"+\")) {\n            final File mbox = new File(file.substring(1));\n            System.out.println(\"Appending to file \" + mbox);\n            chunkListener = new MboxListener(\n                new BufferedWriter(new FileWriter(mbox, true)), eol, printHash, printMarker, checkSequence);\n        } else if (file.startsWith(\"-\")) {\n            final File mbox = new File(file.substring(1));\n            System.out.println(\"Writing to file \" + mbox);\n            chunkListener = new MboxListener(\n                new BufferedWriter(new FileWriter(mbox, false)), eol, printHash, printMarker, checkSequence);\n        } else {\n            final File mbox = new File(file);\n            if (mbox.exists() && mbox.length() > 0) {\n                throw new IOException(\"mailbox file: \" + mbox + \" already exists and is non-empty!\");\n            }\n            System.out.println(\"Creating file \" + mbox);\n            chunkListener = new MboxListener(new BufferedWriter(new FileWriter(mbox)), eol, printHash, printMarker, checkSequence);\n        }\n        String path = uri.getPath();\n        if (path == null || path.length() < 1) {\n            throw new IllegalArgumentException(\"Invalid folderPath: '\" + path + \"'\");\n        }\n        String folder = path.substring(1); // skip the leading /\n        final PrintCommandListener listener = new PrintCommandListener(System.out, true) {\n            @Override\n            public void protocolReplyReceived(ProtocolCommandEvent event) {\n                if (event.getReplyCode() != IMAPReply.PARTIAL){ // This is dealt with by the chunk listener\n                    super.protocolReplyReceived(event);\n                }\n            }\n        };\n        final IMAPClient imap = IMAPUtils.imapLogin(uri, connect_timeout * 1000, listener);\n        String maxIndexInFolder = null;\n        try {\n            imap.setSoTimeout(read_timeout * 1000);\n            if (!imap.select(folder)){\n                throw new IOException(\"Could not select folder: \" + folder);\n            }\n            for(String line : imap.getReplyStrings()) {\n                maxIndexInFolder = matches(line, PATEXISTS, 1);\n                if (maxIndexInFolder != null) {\n                    break;\n                }\n            }\n            if (chunkListener != null) {\n                imap.setChunkListener(chunkListener);\n            } // else the command listener displays the full output without processing\n            while(true) {\n                boolean ok = imap.fetch(sequenceSet, itemNames);\n                if (!ok && retryWaitSecs > 0 && chunkListener != null && checkSequence) {\n                    final String replyString = imap.getReplyString(); //includes EOL\n                    if (startsWith(replyString, PATTEMPFAIL)) {\n                        System.err.println(\"Temporary error detected, will retry in \" + retryWaitSecs + \"seconds\");\n                        sequenceSet = (chunkListener.lastSeq+1)+\":*\";\n                        try {\n                            Thread.sleep(retryWaitSecs * 1000);\n                        } catch (InterruptedException e) {\n                        }\n                    } else {\n                        throw new IOException(\"FETCH \" + sequenceSet + \" \" + itemNames+ \" failed with \" + replyString);\n                    }\n                } else {\n                    break;\n                }\n            }\n        } catch (IOException ioe) {\n            String count = chunkListener == null ? \"?\" : Integer.toString(chunkListener.total);\n            System.err.println(\n                    \"FETCH \" + sequenceSet + \" \" + itemNames + \" failed after processing \" + count + \" complete messages \");\n            if (chunkListener != null) {\n                System.err.println(\"Last complete response seen: \"+chunkListener.lastFetched);\n            }\n            throw ioe;\n        } finally {\n            if (printHash) {\n                System.err.println();\n            }\n            if (chunkListener != null) {\n                chunkListener.close();\n                final Iterator<String> missingIds = chunkListener.missingIds.iterator();\n                if (missingIds.hasNext()) {\n                    StringBuilder sb = new StringBuilder();\n                    for(;;) {\n                        sb.append(missingIds.next());\n                        if (!missingIds.hasNext()) {\n                            break;\n                        }\n                        sb.append(\",\");\n                    }\n                    System.err.println(\"*** Missing ids: \" + sb.toString());\n                }\n            }\n            imap.logout();\n            imap.disconnect();\n        }\n        if (chunkListener != null) {\n            System.out.println(\"Processed \" + chunkListener.total + \" messages.\");\n        }\n        if (maxIndexInFolder != null) {\n            System.out.println(\"Folder contained \" + maxIndexInFolder + \" messages.\");\n        }\n    }\n    private static boolean startsWith(String input, Pattern pat) {\n        Matcher m = pat.matcher(input);\n        return m.lookingAt();\n    }\n    private static String matches(String input, Pattern pat, int index) {\n        Matcher m = pat.matcher(input);\n        if (m.lookingAt()) {\n            return m.group(index);\n        }\n        return null;\n    }\n    private static class MboxListener implements IMAPChunkListener {\n        private final BufferedWriter bw;\n        volatile int total = 0;\n        volatile String lastFetched;\n        volatile List<String> missingIds = new ArrayList<String>();\n        volatile long lastSeq = -1;\n        private final String eol;\n        private final SimpleDateFormat DATE_FORMAT // for mbox From_ lines\n            = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss YYYY\");\n        private final SimpleDateFormat IDPARSE // for parsing INTERNALDATE\n        = new SimpleDateFormat(\"dd-MMM-yyyy HH:mm:ss Z\");\n        private final boolean printHash;\n        private final boolean printMarker;\n        private final boolean checkSequence;\n        MboxListener(BufferedWriter bw, String eol, boolean printHash, boolean printMarker, boolean checkSequence)\n                throws IOException {\n          this.eol = eol;\n          this.printHash = printHash;\n          this.printMarker = printMarker;\n          DATE_FORMAT.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n          this.bw = bw;\n          this.checkSequence = checkSequence;\n        }\n        @Override\n        public boolean chunkReceived(IMAP imap) {\n            final String[] replyStrings = imap.getReplyStrings();\n            Date received = new Date();\n            final String firstLine = replyStrings[0];\n            Matcher m = PATID.matcher(firstLine);\n            if (m.lookingAt()) { // found a match\n                String date = m.group(PATID_DATE_GROUP);\n                try {\n                    received=IDPARSE.parse(date);\n                } catch (ParseException e) {\n                    System.err.println(e);\n                }\n            } else {\n                System.err.println(\"No timestamp found in: \" + firstLine + \"  - using current time\");\n            }\n            String replyTo = \"MAILER-DAEMON\"; // default\n            for(int i=1; i< replyStrings.length - 1; i++) {\n                final String line = replyStrings[i];\n                if (line.startsWith(\"Return-Path: \")) {\n                   String[] parts = line.split(\" \", 2);\n                    replyTo = parts[1];\n                    if (replyTo.startsWith(\"<\")) {\n                        replyTo = replyTo.substring(1,replyTo.length()-1); // drop <> wrapper\n                    } else {\n                        System.err.println(\"Unexpected Return-path:\" + line+ \" in \" + firstLine);\n                    }\n                    break;\n                }\n            }\n            try {\n                bw.append(\"From \");\n                bw.append(replyTo);\n                bw.append(' ');\n                bw.append(DATE_FORMAT.format(received));\n                bw.append(eol);\n                bw.append(\"X-IMAP-Response: \").append(firstLine).append(eol);\n                if (printMarker) {\n                    System.err.println(\"[\" + total + \"] \" + firstLine);\n                }\n                for(int i=1; i< replyStrings.length - 1; i++) {\n                    final String line = replyStrings[i];\n                        if (startsWith(line, PATFROM)) {\n                            bw.append('>'); // Escape a From_ line\n                        }\n                        bw.append(line);\n                        bw.append(eol);\n                }\n                String lastLine = replyStrings[replyStrings.length-1];\n                final int lastLength = lastLine.length();\n                if (lastLength > 1) { // there's some content, we need to save it\n                    bw.append(lastLine, 0, lastLength-1);\n                    bw.append(eol);\n                }\n                bw.append(eol); // blank line between entries\n            } catch (IOException e) {\n                e.printStackTrace();\n                throw new RuntimeException(e); // chunkReceived cannot throw a checked Exception\n            }\n            lastFetched = firstLine;\n            total++;\n            if (checkSequence) {\n                m = PATSEQ.matcher(firstLine);\n                if (m.lookingAt()) { // found a match\n                    final long msgSeq = Long.parseLong(m.group(PATSEQ_SEQUENCE_GROUP)); // Cannot fail to parse\n                    if (lastSeq != -1) {\n                        long missing = msgSeq - lastSeq - 1;\n                        if (missing != 0) {\n                            for(long j = lastSeq + 1; j < msgSeq; j++) {\n                                missingIds.add(String.valueOf(j));\n                            }\n                            System.err.println(\n                                \"*** Sequence error: current=\" + msgSeq + \" previous=\" + lastSeq + \" Missing=\" + missing);\n                        }\n                    }\n                    lastSeq = msgSeq;\n                }\n            }\n            if (printHash) {\n                System.err.print(\".\");\n            }\n            return true;\n        }\n        public void close() throws IOException {\n            if (bw != null) {\n                bw.close();\n            }\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPImportMbox.java": "package org.apache.commons.net.examples.mail;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.apache.commons.net.imap.IMAPClient;\npublic final class IMAPImportMbox\n{\n    private static final String CRLF = \"\\r\\n\";\n    private static final Pattern PATFROM = Pattern.compile(\">+From \"); // escaped From\n    public static void main(String[] args) throws IOException\n    {\n        if (args.length < 2)\n        {\n            System.err.println(\"Usage: IMAPImportMbox imap[s]://user:password@host[:port]/folder/path <mboxfile> [selectors]\");\n            System.err.println(\"\\tWhere: a selector is a list of numbers/number ranges - 1,2,3-10\" +\n                               \" - or a list of strings to match in the initial From line\");\n            System.exit(1);\n        }\n        final URI uri      = URI.create(args[0]);\n        final String file  = args[1];\n        final File mbox = new File(file);\n        if (!mbox.isFile() || !mbox.canRead()) {\n            throw new IOException(\"Cannot read mailbox file: \" + mbox);\n        }\n        String path = uri.getPath();\n        if (path == null || path.length() < 1) {\n            throw new IllegalArgumentException(\"Invalid folderPath: '\" + path + \"'\");\n        }\n        String folder = path.substring(1); // skip the leading /\n        List<String> contains = new ArrayList<String>(); // list of strings to find\n        BitSet msgNums = new BitSet(); // list of message numbers\n        for(int i = 2; i < args.length; i++) {\n            String arg = args[i];\n            if (arg.matches(\"\\\\d+(-\\\\d+)?(,\\\\d+(-\\\\d+)?)*\")) { // number,m-n\n                for(String entry : arg.split(\",\")) {\n                    String []parts = entry.split(\"-\");\n                    if (parts.length == 2) { // m-n\n                        int low = Integer.parseInt(parts[0]);\n                        int high = Integer.parseInt(parts[1]);\n                        for(int j=low; j <= high; j++) {\n                            msgNums.set(j);\n                        }\n                    } else {\n                        msgNums.set(Integer.parseInt(entry));\n                    }\n                }\n            } else {\n                contains.add(arg); // not a number/number range\n            }\n        }\n        final IMAPClient imap = IMAPUtils.imapLogin(uri, 10000, null);\n        int total = 0;\n        int loaded = 0;\n        try {\n            imap.setSoTimeout(6000);\n            final BufferedReader br = new BufferedReader(new FileReader(file)); // TODO charset?\n            String line;\n            StringBuilder sb = new StringBuilder();\n            boolean wanted = false; // Skip any leading rubbish\n            while((line=br.readLine())!=null) {\n                if (line.startsWith(\"From \")) { // start of message; i.e. end of previous (if any)\n                    if (process(sb, imap, folder, total)) { // process previous message (if any)\n                        loaded++;\n                    }\n                    sb.setLength(0);\n                    total ++;\n                    wanted = wanted(total, line, msgNums, contains);\n                } else if (startsWith(line, PATFROM)) { // Unescape \">+From \" in body text\n                    line = line.substring(1);\n                }\n                if (wanted) {\n                    sb.append(line);\n                    sb.append(CRLF);\n                }\n            }\n            br.close();\n            if (wanted && process(sb, imap, folder, total)) { // last message (if any)\n                loaded++;\n            }\n        } catch (IOException e) {\n            System.out.println(imap.getReplyString());\n            e.printStackTrace();\n            System.exit(10);\n            return;\n        } finally {\n            imap.logout();\n            imap.disconnect();\n        }\n        System.out.println(\"Processed \" + total + \" messages, loaded \" + loaded);\n    }\n    private static boolean startsWith(String input, Pattern pat) {\n        Matcher m = pat.matcher(input);\n        return m.lookingAt();\n    }\n    private static boolean process(final StringBuilder sb, final IMAPClient imap, final String folder\n            ,final int msgNum) throws IOException {\n        final int length = sb.length();\n        boolean haveMessage = length > 2;\n        if (haveMessage) {\n            System.out.println(\"MsgNum: \" + msgNum +\" Length \" + length);\n            sb.setLength(length-2); // drop trailing CRLF\n            String msg = sb.toString();\n            if (!imap.append(folder, null, null, msg)) {\n                throw new IOException(\"Failed to import message: \" + msgNum + \" \" + imap.getReplyString());\n            }\n        }\n        return haveMessage;\n    }\n    private static boolean wanted(int msgNum, String line, BitSet msgNums, List<String> contains) {\n        return (msgNums.isEmpty() && contains.isEmpty()) // no selectors\n             || msgNums.get(msgNum) // matches message number\n             || listContains(contains, line); // contains string\n    }\n    private static boolean listContains(List<String> contains, String string) {\n        for(String entry : contains) {\n            if (string.contains(entry)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPMail.java": "package org.apache.commons.net.examples.mail;\nimport java.io.IOException;\nimport java.net.URI;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.imap.IMAPClient;\npublic final class IMAPMail\n{\n    public static void main(String[] args) throws IOException {\n        if (args.length != 1)\n        {\n            System.err.println(\n                \"Usage: IMAPMail imap[s]://username:password@server/\");\n            System.err.println(\"Connects to server; lists capabilities and shows Inbox status\");\n            System.exit(1);\n        }\n        URI uri = URI.create(args[0]);\n        final IMAPClient imap = IMAPUtils.imapLogin(uri, 10000, null);\n        imap.addProtocolCommandListener(new PrintCommandListener(System.out, true));\n        try {\n            imap.setSoTimeout(6000);\n            imap.capability();\n            imap.select(\"inbox\");\n            imap.examine(\"inbox\");\n            imap.status(\"inbox\", new String[]{\"MESSAGES\"});\n        } catch (IOException e) {\n            System.out.println(imap.getReplyString());\n            e.printStackTrace();\n            System.exit(10);\n            return;\n        } finally {\n            imap.logout();\n            imap.disconnect();\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/mail/IMAPUtils.java": "package org.apache.commons.net.examples.mail;\nimport java.io.IOException;\nimport java.net.URI;\nimport org.apache.commons.net.ProtocolCommandListener;\nimport org.apache.commons.net.imap.IMAPClient;\nimport org.apache.commons.net.imap.IMAPSClient;\nclass IMAPUtils {\n    static IMAPClient imapLogin(URI uri, int defaultTimeout, ProtocolCommandListener listener) throws IOException {\n        final String userInfo = uri.getUserInfo();\n        if (userInfo == null) {\n            throw new IllegalArgumentException(\"Missing userInfo details\");\n        }\n        String []userpass = userInfo.split(\":\");\n        if (userpass.length != 2) {\n            throw new IllegalArgumentException(\"Invalid userInfo details: '\" + userInfo + \"'\");\n        }\n        String username = userpass[0];\n        String password = userpass[1];\n        password = Utils.getPassword(username, password);\n        final IMAPClient imap;\n        final String scheme = uri.getScheme();\n        if (\"imaps\".equalsIgnoreCase(scheme)) {\n            System.out.println(\"Using secure protocol\");\n            imap = new IMAPSClient(true); // implicit\n        } else if (\"imap\".equalsIgnoreCase(scheme)) {\n            imap = new IMAPClient();\n        } else {\n            throw new IllegalArgumentException(\"Invalid protocol: \" + scheme);\n        }\n        final int port = uri.getPort();\n        if (port != -1) {\n            imap.setDefaultPort(port);\n        }\n        imap.setDefaultTimeout(defaultTimeout);\n        if (listener != null) {\n            imap.addProtocolCommandListener(listener);\n        }\n        final String server = uri.getHost();\n        System.out.println(\"Connecting to server \" + server + \" on \" + imap.getDefaultPort());\n        try {\n            imap.connect(server);\n            System.out.println(\"Successfully connected\");\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not connect to server.\", e);\n        }\n        if (!imap.login(username, password)) {\n            imap.disconnect();\n            throw new RuntimeException(\"Could not login to server. Check login details.\");\n        }\n        return imap;\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/mail/POP3ExportMbox.java": "package org.apache.commons.net.examples.mail;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.nio.charset.Charset;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.apache.commons.net.pop3.POP3Client;\nimport org.apache.commons.net.pop3.POP3MessageInfo;\nimport org.apache.commons.net.pop3.POP3SClient;\npublic final class POP3ExportMbox\n{\n    private static final Pattern PATFROM = Pattern.compile(\">*From \"); // unescaped From_\n    public static void main(String[] args)\n    {\n        int argIdx;\n        String file = null;\n        for(argIdx = 0; argIdx < args.length; argIdx++) {\n            if (args[argIdx].equals(\"-F\")) {\n                file = args[++argIdx];\n            } else {\n                break;\n            }\n        }\n        final int argCount = args.length - argIdx;\n        if (argCount < 3)\n        {\n            System.err.println(\n                \"Usage: POP3Mail [-F file] <server[:port]> <username> <password|-|*|VARNAME> [TLS [true=implicit]]\");\n            System.exit(1);\n        }\n        String arg0[] = args[argIdx++].split(\":\");\n        String server=arg0[0];\n        String username = args[argIdx++];\n        String password = args[argIdx++];\n        try {\n            password = Utils.getPassword(username, password);\n        } catch (IOException e1) {\n            System.err.println(\"Could not retrieve password: \" + e1.getMessage());\n            return;\n        }\n        String proto = argCount > 3 ? args[argIdx++] : null;\n        boolean implicit = argCount > 4 ? Boolean.parseBoolean(args[argIdx++]) : false;\n        POP3Client pop3;\n        if (proto != null) {\n            System.out.println(\"Using secure protocol: \"+proto);\n            pop3 = new POP3SClient(proto, implicit);\n        } else {\n            pop3 = new POP3Client();\n        }\n        int port;\n        if (arg0.length == 2) {\n            port = Integer.parseInt(arg0[1]);\n        } else {\n            port = pop3.getDefaultPort();\n        }\n        System.out.println(\"Connecting to server \"+server+\" on \"+port);\n        pop3.setDefaultTimeout(60000);\n        try\n        {\n            pop3.connect(server);\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Could not connect to server.\");\n            e.printStackTrace();\n            return;\n        }\n        try\n        {\n            if (!pop3.login(username, password))\n            {\n                System.err.println(\"Could not login to server.  Check password.\");\n                pop3.disconnect();\n                return;\n            }\n            POP3MessageInfo status = pop3.status();\n            if (status == null) {\n                System.err.println(\"Could not retrieve status.\");\n                pop3.logout();\n                pop3.disconnect();\n                return;\n            }\n            System.out.println(\"Status: \" + status);\n            int count = status.number;\n            if (file != null) {\n                System.out.println(\"Getting messages: \" + count);\n                File mbox = new File(file);\n                System.out.println(\"Writing: \" + mbox);\n                OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(mbox),Charset.forName(\"iso-8859-1\"));\n                for (int i = 1; i <= count; i++) {\n                    writeMbox(pop3, fw, i);\n                }\n                fw.close();\n            }\n            pop3.logout();\n            pop3.disconnect();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            return;\n        }\n    }\n    private static void writeMbox(POP3Client pop3, OutputStreamWriter fw, int i) throws IOException {\n        final SimpleDateFormat DATE_FORMAT // for mbox From_ lines\n        = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss YYYY\");\n        String replyTo = \"MAILER-DAEMON\"; // default\n        Date received = new Date();\n        BufferedReader r = (BufferedReader) pop3.retrieveMessage(i);\n        fw.append(\"From \");\n        fw.append(replyTo);\n        fw.append(' ');\n        fw.append(DATE_FORMAT.format(received));\n        fw.append(\"\\n\");\n        String line;\n        while ((line = r.readLine()) != null)\n        {\n            if (startsWith(line, PATFROM)) {\n                fw.write(\">\");\n            }\n            fw.write(line);\n            fw.write(\"\\n\");\n        }\n        fw.write(\"\\n\");\n        r.close();\n    }\n    private static boolean startsWith(String input, Pattern pat) {\n        Matcher m = pat.matcher(input);\n        return m.lookingAt();\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/mail/POP3Mail.java": "package org.apache.commons.net.examples.mail;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Locale;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.pop3.POP3Client;\nimport org.apache.commons.net.pop3.POP3MessageInfo;\nimport org.apache.commons.net.pop3.POP3SClient;\npublic final class POP3Mail\n{\n    public static final void printMessageInfo(BufferedReader reader, int id) throws IOException  {\n        String from = \"\";\n        String subject = \"\";\n        String line;\n        while ((line = reader.readLine()) != null)\n        {\n            String lower = line.toLowerCase(Locale.ENGLISH);\n            if (lower.startsWith(\"from: \")) {\n                from = line.substring(6).trim();\n            }  else if (lower.startsWith(\"subject: \")) {\n                subject = line.substring(9).trim();\n            }\n        }\n        System.out.println(Integer.toString(id) + \" From: \" + from + \"  Subject: \" + subject);\n    }\n    public static void main(String[] args)\n    {\n        if (args.length < 3)\n        {\n            System.err.println(\n                \"Usage: POP3Mail <server[:port]> <username> <password|-|*|VARNAME> [TLS [true=implicit]]\");\n            System.exit(1);\n        }\n        String arg0[] = args[0].split(\":\");\n        String server=arg0[0];\n        String username = args[1];\n        String password = args[2];\n        try {\n            password = Utils.getPassword(username, password);\n        } catch (IOException e1) {\n            System.err.println(\"Could not retrieve password: \" + e1.getMessage());\n            return;\n        }\n        String proto = args.length > 3 ? args[3] : null;\n        boolean implicit = args.length > 4 ? Boolean.parseBoolean(args[4]) : false;\n        POP3Client pop3;\n        if (proto != null) {\n            System.out.println(\"Using secure protocol: \"+proto);\n            pop3 = new POP3SClient(proto, implicit);\n        } else {\n            pop3 = new POP3Client();\n        }\n        int port;\n        if (arg0.length == 2) {\n            port = Integer.parseInt(arg0[1]);\n        } else {\n            port = pop3.getDefaultPort();\n        }\n        System.out.println(\"Connecting to server \"+server+\" on \"+port);\n        pop3.setDefaultTimeout(60000);\n        pop3.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));\n        try\n        {\n            pop3.connect(server);\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Could not connect to server.\");\n            e.printStackTrace();\n            return;\n        }\n        try\n        {\n            if (!pop3.login(username, password))\n            {\n                System.err.println(\"Could not login to server.  Check password.\");\n                pop3.disconnect();\n                return;\n            }\n            POP3MessageInfo status = pop3.status();\n            if (status == null) {\n                System.err.println(\"Could not retrieve status.\");\n                pop3.logout();\n                pop3.disconnect();\n                return;\n            }\n            System.out.println(\"Status: \" + status);\n            POP3MessageInfo[] messages = pop3.listMessages();\n            if (messages == null)\n            {\n                System.err.println(\"Could not retrieve message list.\");\n                pop3.logout();\n                pop3.disconnect();\n                return;\n            }\n            else if (messages.length == 0)\n            {\n                System.out.println(\"No messages\");\n                pop3.logout();\n                pop3.disconnect();\n                return;\n            }\n            System.out.println(\"Message count: \" + messages.length);\n            for (POP3MessageInfo msginfo : messages) {\n                BufferedReader reader = (BufferedReader) pop3.retrieveMessageTop(msginfo.number, 0);\n                if (reader == null) {\n                    System.err.println(\"Could not retrieve message header.\");\n                    pop3.logout();\n                    pop3.disconnect();\n                    return;\n                }\n                printMessageInfo(reader, msginfo.number);\n            }\n            pop3.logout();\n            pop3.disconnect();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            return;\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java": "package org.apache.commons.net.examples.mail;\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.io.Util;\nimport org.apache.commons.net.smtp.SMTPClient;\nimport org.apache.commons.net.smtp.SMTPReply;\nimport org.apache.commons.net.smtp.SimpleSMTPHeader;\npublic final class SMTPMail\n{\n    public static void main(String[] args)\n    {\n        String sender, recipient, subject, filename, server, cc;\n        List<String> ccList = new ArrayList<String>();\n        BufferedReader stdin;\n        FileReader fileReader = null;\n        Writer writer;\n        SimpleSMTPHeader header;\n        SMTPClient client;\n        if (args.length < 1)\n        {\n            System.err.println(\"Usage: mail smtpserver\");\n            System.exit(1);\n        }\n        server = args[0];\n        stdin = new BufferedReader(new InputStreamReader(System.in));\n        try\n        {\n            System.out.print(\"From: \");\n            System.out.flush();\n            sender = stdin.readLine();\n            System.out.print(\"To: \");\n            System.out.flush();\n            recipient = stdin.readLine();\n            System.out.print(\"Subject: \");\n            System.out.flush();\n            subject = stdin.readLine();\n            header = new SimpleSMTPHeader(sender, recipient, subject);\n            while (true)\n            {\n                System.out.print(\"CC <enter one address per line, hit enter to end>: \");\n                System.out.flush();\n                cc = stdin.readLine();\n                if (cc== null || cc.length() == 0) {\n                    break;\n                }\n                header.addCC(cc.trim());\n                ccList.add(cc.trim());\n            }\n            System.out.print(\"Filename: \");\n            System.out.flush();\n            filename = stdin.readLine();\n            try\n            {\n                fileReader = new FileReader(filename);\n            }\n            catch (FileNotFoundException e)\n            {\n                System.err.println(\"File not found. \" + e.getMessage());\n            }\n            client = new SMTPClient();\n            client.addProtocolCommandListener(new PrintCommandListener(\n                                                  new PrintWriter(System.out), true));\n            client.connect(server);\n            if (!SMTPReply.isPositiveCompletion(client.getReplyCode()))\n            {\n                client.disconnect();\n                System.err.println(\"SMTP server refused connection.\");\n                System.exit(1);\n            }\n            client.login();\n            client.setSender(sender);\n            client.addRecipient(recipient);\n            for (String recpt : ccList) {\n                client.addRecipient(recpt);\n            }\n            writer = client.sendMessageData();\n            if (writer != null)\n            {\n                writer.write(header.toString());\n                Util.copyReader(fileReader, writer);\n                writer.close();\n                client.completePendingCommand();\n            }\n            if (fileReader != null ) {\n                fileReader.close();\n            }\n            client.logout();\n            client.disconnect();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/mail/Utils.java": "package org.apache.commons.net.examples.mail;\nimport java.io.BufferedReader;\nimport java.io.Console;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Locale;\nclass Utils {\n    private Utils() {\n    }\n    static String getPassword(String username, String password) throws IOException {\n        if (\"-\".equals(password)) { // stdin\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            password = in.readLine();\n        } else if (\"*\".equals(password)) { // console\n            Console con = System.console(); // Java 1.6\n            if (con != null) {\n                char[] pwd = con.readPassword(\"Password for \" + username + \": \");\n                password = new String(pwd);\n            } else {\n                throw new IOException(\"Cannot access Console\");\n            }\n        } else if (password.equals(password.toUpperCase(Locale.ROOT))) { // environment variable name\n            final String tmp = System.getenv(password);\n            if (tmp != null) { // don't overwrite if variable does not exist (just in case password is all uppers)\n                password=tmp;\n            }\n        }\n        return password;\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/nntp/ArticleReader.java": "package org.apache.commons.net.examples.nntp;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.net.SocketException;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.nntp.NNTPClient;\nimport org.apache.commons.net.nntp.NewsgroupInfo;\npublic class ArticleReader {\n    public static void main(String[] args) throws SocketException, IOException {\n        if (args.length != 2 && args.length != 3 && args.length != 5) {\n            System.out.println(\"Usage: MessageThreading <hostname> <groupname> [<article specifier> [<user> <password>]]\");\n            return;\n        }\n        String hostname = args[0];\n        String newsgroup = args[1];\n        String articleSpec = args.length >= 3 ? args[2] : null;\n        NNTPClient client = new NNTPClient();\n        client.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));\n        client.connect(hostname);\n        if (args.length == 5) { // Optional auth\n            String user = args[3];\n            String password = args[4];\n            if(!client.authenticate(user, password)) {\n                System.out.println(\"Authentication failed for user \" + user + \"!\");\n                System.exit(1);\n            }\n        }\n        NewsgroupInfo group = new NewsgroupInfo();\n        client.selectNewsgroup(newsgroup, group);\n        BufferedReader brHdr;\n        String line;\n        if (articleSpec != null) {\n            brHdr = (BufferedReader) client.retrieveArticleHeader(articleSpec);\n        } else {\n            long articleNum = group.getLastArticleLong();\n            brHdr = client.retrieveArticleHeader(articleNum);\n        }\n        if (brHdr != null) {\n            while((line=brHdr.readLine()) != null) {\n                System.out.println(line);\n            }\n            brHdr.close();\n        }\n        BufferedReader brBody;\n        if (articleSpec != null) {\n            brBody = (BufferedReader) client.retrieveArticleBody(articleSpec);\n        } else {\n            long articleNum = group.getLastArticleLong();\n            brBody = client.retrieveArticleBody(articleNum);\n        }\n        if (brBody != null) {\n            while((line=brBody.readLine()) != null) {\n                System.out.println(line);\n            }\n            brBody.close();\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/nntp/ExtendedNNTPOps.java": "package org.apache.commons.net.examples.nntp;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.nntp.Article;\nimport org.apache.commons.net.nntp.NNTPClient;\nimport org.apache.commons.net.nntp.NewsgroupInfo;\npublic class ExtendedNNTPOps {\n    NNTPClient client;\n    public ExtendedNNTPOps() {\n        client = new NNTPClient();\n        client.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));\n    }\n    private void demo(String host, String user, String password) {\n        try {\n            client.connect(host);\n            if (user != null && password != null) {\n                boolean success = client.authenticate(user, password);\n                if (success) {\n                    System.out.println(\"Authentication succeeded\");\n                } else {\n                    System.out.println(\"Authentication failed, error =\" + client.getReplyString());\n                }\n            }\n            NewsgroupInfo testGroup = new NewsgroupInfo();\n            client.selectNewsgroup(\"alt.test\", testGroup);\n            long lowArticleNumber = testGroup.getFirstArticleLong();\n            long  highArticleNumber = lowArticleNumber + 100;\n            Iterable<Article> articles = client.iterateArticleInfo(lowArticleNumber, highArticleNumber);\n            for (Article article : articles) {\n                if (article.isDummy()) { // Subject will contain raw response\n                    System.out.println(\"Could not parse: \"+article.getSubject());\n                } else {\n                    System.out.println(article.getSubject());\n                }\n            }\n            NewsgroupInfo[] fanGroups = client.listNewsgroups(\"alt.fan.*\");\n            for (NewsgroupInfo fanGroup : fanGroups)\n            {\n                System.out.println(fanGroup.getNewsgroup());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        ExtendedNNTPOps ops;\n        int argc = args.length;\n        if (argc < 1) {\n            System.err.println(\"usage: ExtendedNNTPOps nntpserver [username password]\");\n            System.exit(1);\n        }\n        ops = new ExtendedNNTPOps();\n        ops.demo(args[0], argc >=3 ? args[1] : null, argc >=3 ? args[2] : null);\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/nntp/ListNewsgroups.java": "package org.apache.commons.net.examples.nntp;\nimport java.io.IOException;\nimport org.apache.commons.net.nntp.NNTPClient;\nimport org.apache.commons.net.nntp.NewsgroupInfo;\npublic final class ListNewsgroups\n{\n    public static void main(String[] args)\n    {\n        if (args.length < 1)\n        {\n            System.err.println(\"Usage: newsgroups newsserver [pattern]\");\n            return;\n        }\n        NNTPClient client = new NNTPClient();\n        String pattern = args.length >= 2 ? args[1] : \"\";\n        try\n        {\n            client.connect(args[0]);\n            int j = 0;\n            try {\n                for(String s : client.iterateNewsgroupListing(pattern)) {\n                    j++;\n                    System.out.println(s);\n                }\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n            System.out.println(j);\n            j = 0;\n            for(NewsgroupInfo n : client.iterateNewsgroups(pattern)) {\n                j++;\n                System.out.println(n.getNewsgroup());\n            }\n            System.out.println(j);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n        finally\n        {\n            try\n            {\n                if (client.isConnected()) {\n                    client.disconnect();\n                }\n            }\n            catch (IOException e)\n            {\n                System.err.println(\"Error disconnecting from server.\");\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/nntp/MessageThreading.java": "package org.apache.commons.net.examples.nntp;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.net.SocketException;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.nntp.Article;\nimport org.apache.commons.net.nntp.NNTPClient;\nimport org.apache.commons.net.nntp.NewsgroupInfo;\nimport org.apache.commons.net.nntp.Threader;\npublic class MessageThreading {\n    public MessageThreading() {\n    }\n    public static void main(String[] args) throws SocketException, IOException {\n        if (args.length != 2 && args.length != 4) {\n            System.out.println(\"Usage: MessageThreading <hostname> <groupname> [<user> <password>]\");\n            return;\n        }\n        String hostname = args[0];\n        String newsgroup = args[1];\n        NNTPClient client = new NNTPClient();\n        client.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));\n        client.connect(hostname);\n        if (args.length == 4) { // Optional auth\n            String user = args[2];\n            String password = args[3];\n            if(!client.authenticate(user, password)) {\n                System.out.println(\"Authentication failed for user \" + user + \"!\");\n                System.exit(1);\n            }\n        }\n        String fmt[] = client.listOverviewFmt();\n        if (fmt != null) {\n            System.out.println(\"LIST OVERVIEW.FMT:\");\n            for(String s : fmt) {\n                System.out.println(s);\n            }\n        } else {\n            System.out.println(\"Failed to get OVERVIEW.FMT\");\n        }\n        NewsgroupInfo group = new NewsgroupInfo();\n        client.selectNewsgroup(newsgroup, group);\n        long lowArticleNumber = group.getFirstArticleLong();\n        long highArticleNumber = lowArticleNumber + 5000;\n        System.out.println(\"Retrieving articles between [\" + lowArticleNumber + \"] and [\" + highArticleNumber + \"]\");\n        Iterable<Article> articles = client.iterateArticleInfo(lowArticleNumber, highArticleNumber);\n        System.out.println(\"Building message thread tree...\");\n        Threader threader = new Threader();\n        Article root = (Article)threader.thread(articles);\n        Article.printThread(root, 0);\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/nntp/NNTPUtils.java": "package org.apache.commons.net.examples.nntp;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.commons.net.nntp.Article;\nimport org.apache.commons.net.nntp.NNTPClient;\npublic class NNTPUtils {\n    public  static List<Article> getArticleInfo(NNTPClient client, long lowArticleNumber, long highArticleNumber)\n    throws IOException {\n        List<Article> articles = new ArrayList<Article>();\n        Iterable<Article> arts = client.iterateArticleInfo(lowArticleNumber, highArticleNumber);\n        for(Article article : arts){\n            articles.add(article);\n        }\n        return articles;\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java": "package org.apache.commons.net.examples.nntp;\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.io.Writer;\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.io.Util;\nimport org.apache.commons.net.nntp.NNTPClient;\nimport org.apache.commons.net.nntp.NNTPReply;\nimport org.apache.commons.net.nntp.SimpleNNTPHeader;\npublic final class PostMessage\n{\n    public static void main(String[] args)\n    {\n        String from, subject, newsgroup, filename, server, organization;\n        String references;\n        BufferedReader stdin;\n        FileReader fileReader = null;\n        SimpleNNTPHeader header;\n        NNTPClient client;\n        if (args.length < 1)\n        {\n            System.err.println(\"Usage: post newsserver\");\n            System.exit(1);\n        }\n        server = args[0];\n        stdin = new BufferedReader(new InputStreamReader(System.in));\n        try\n        {\n            System.out.print(\"From: \");\n            System.out.flush();\n            from = stdin.readLine();\n            System.out.print(\"Subject: \");\n            System.out.flush();\n            subject = stdin.readLine();\n            header = new SimpleNNTPHeader(from, subject);\n            System.out.print(\"Newsgroup: \");\n            System.out.flush();\n            newsgroup = stdin.readLine();\n            header.addNewsgroup(newsgroup);\n            while (true)\n            {\n                System.out.print(\"Additional Newsgroup <Hit enter to end>: \");\n                System.out.flush();\n                newsgroup = stdin.readLine();\n                if (newsgroup == null) {\n                    break;\n                }\n                newsgroup = newsgroup.trim();\n                if (newsgroup.length() == 0) {\n                    break;\n                }\n                header.addNewsgroup(newsgroup);\n            }\n            System.out.print(\"Organization: \");\n            System.out.flush();\n            organization = stdin.readLine();\n            System.out.print(\"References: \");\n            System.out.flush();\n            references = stdin.readLine();\n            if (organization != null && organization.length() > 0) {\n                header.addHeaderField(\"Organization\", organization);\n            }\n            if (references != null && references.length() > 0) {\n                header.addHeaderField(\"References\", references);\n            }\n            header.addHeaderField(\"X-Newsreader\", \"NetComponents\");\n            System.out.print(\"Filename: \");\n            System.out.flush();\n            filename = stdin.readLine();\n            try\n            {\n                fileReader = new FileReader(filename);\n            }\n            catch (FileNotFoundException e)\n            {\n                System.err.println(\"File not found. \" + e.getMessage());\n                System.exit(1);\n            }\n            client = new NNTPClient();\n            client.addProtocolCommandListener(new PrintCommandListener(\n                                                  new PrintWriter(System.out), true));\n            client.connect(server);\n            if (!NNTPReply.isPositiveCompletion(client.getReplyCode()))\n            {\n                client.disconnect();\n                System.err.println(\"NNTP server refused connection.\");\n                System.exit(1);\n            }\n            if (client.isAllowedToPost())\n            {\n                Writer writer = client.postArticle();\n                if (writer != null)\n                {\n                    writer.write(header.toString());\n                    Util.copyReader(fileReader, writer);\n                    writer.close();\n                    client.completePendingCommand();\n                }\n            }\n            if (fileReader != null) {\n                fileReader.close();\n            }\n            client.logout();\n            client.disconnect();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/ntp/NTPClient.java": "package org.apache.commons.net.examples.ntp;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.text.NumberFormat;\nimport org.apache.commons.net.ntp.NTPUDPClient;\nimport org.apache.commons.net.ntp.NtpUtils;\nimport org.apache.commons.net.ntp.NtpV3Packet;\nimport org.apache.commons.net.ntp.TimeInfo;\nimport org.apache.commons.net.ntp.TimeStamp;\npublic final class NTPClient\n{\n    private static final NumberFormat numberFormat = new java.text.DecimalFormat(\"0.00\");\n    public static void processResponse(TimeInfo info)\n    {\n        NtpV3Packet message = info.getMessage();\n        int stratum = message.getStratum();\n        String refType;\n        if (stratum <= 0) {\n            refType = \"(Unspecified or Unavailable)\";\n        } else if (stratum == 1) {\n            refType = \"(Primary Reference; e.g., GPS)\"; // GPS, radio clock, etc.\n        } else {\n            refType = \"(Secondary Reference; e.g. via NTP or SNTP)\";\n        }\n        System.out.println(\" Stratum: \" + stratum + \" \" + refType);\n        int version = message.getVersion();\n        int li = message.getLeapIndicator();\n        System.out.println(\" leap=\" + li + \", version=\"\n                + version + \", precision=\" + message.getPrecision());\n        System.out.println(\" mode: \" + message.getModeName() + \" (\" + message.getMode() + \")\");\n        int poll = message.getPoll();\n        System.out.println(\" poll: \" + (poll <= 0 ? 1 : (int) Math.pow(2, poll))\n                + \" seconds\" + \" (2 ** \" + poll + \")\");\n        double disp = message.getRootDispersionInMillisDouble();\n        System.out.println(\" rootdelay=\" + numberFormat.format(message.getRootDelayInMillisDouble())\n                + \", rootdispersion(ms): \" + numberFormat.format(disp));\n        int refId = message.getReferenceId();\n        String refAddr = NtpUtils.getHostAddress(refId);\n        String refName = null;\n        if (refId != 0) {\n            if (refAddr.equals(\"127.127.1.0\")) {\n                refName = \"LOCAL\"; // This is the ref address for the Local Clock\n            } else if (stratum >= 2) {\n                if (!refAddr.startsWith(\"127.127\")) {\n                    try {\n                        InetAddress addr = InetAddress.getByName(refAddr);\n                        String name = addr.getHostName();\n                        if (name != null && !name.equals(refAddr)) {\n                            refName = name;\n                        }\n                    } catch (UnknownHostException e) {\n                        refName = NtpUtils.getReferenceClock(message);\n                    }\n                }\n            } else if (version >= 3 && (stratum == 0 || stratum == 1)) {\n                refName = NtpUtils.getReferenceClock(message);\n            }\n        }\n        if (refName != null && refName.length() > 1) {\n            refAddr += \" (\" + refName + \")\";\n        }\n        System.out.println(\" Reference Identifier:\\t\" + refAddr);\n        TimeStamp refNtpTime = message.getReferenceTimeStamp();\n        System.out.println(\" Reference Timestamp:\\t\" + refNtpTime + \"  \" + refNtpTime.toDateString());\n        TimeStamp origNtpTime = message.getOriginateTimeStamp();\n        System.out.println(\" Originate Timestamp:\\t\" + origNtpTime + \"  \" + origNtpTime.toDateString());\n        long destTime = info.getReturnTime();\n        TimeStamp rcvNtpTime = message.getReceiveTimeStamp();\n        System.out.println(\" Receive Timestamp:\\t\" + rcvNtpTime + \"  \" + rcvNtpTime.toDateString());\n        TimeStamp xmitNtpTime = message.getTransmitTimeStamp();\n        System.out.println(\" Transmit Timestamp:\\t\" + xmitNtpTime + \"  \" + xmitNtpTime.toDateString());\n        TimeStamp destNtpTime = TimeStamp.getNtpTime(destTime);\n        System.out.println(\" Destination Timestamp:\\t\" + destNtpTime + \"  \" + destNtpTime.toDateString());\n        info.computeDetails(); // compute offset/delay if not already done\n        Long offsetValue = info.getOffset();\n        Long delayValue = info.getDelay();\n        String delay = (delayValue == null) ? \"N/A\" : delayValue.toString();\n        String offset = (offsetValue == null) ? \"N/A\" : offsetValue.toString();\n        System.out.println(\" Roundtrip delay(ms)=\" + delay\n                + \", clock offset(ms)=\" + offset); // offset in ms\n    }\n    public static void main(String[] args)\n    {\n        if (args.length == 0) {\n            System.err.println(\"Usage: NTPClient <hostname-or-address-list>\");\n            System.exit(1);\n        }\n        NTPUDPClient client = new NTPUDPClient();\n        client.setDefaultTimeout(10000);\n        try {\n            client.open();\n            for (String arg : args)\n            {\n                System.out.println();\n                try {\n                    InetAddress hostAddr = InetAddress.getByName(arg);\n                    System.out.println(\"> \" + hostAddr.getHostName() + \"/\" + hostAddr.getHostAddress());\n                    TimeInfo info = client.getTime(hostAddr);\n                    processResponse(info);\n                } catch (IOException ioe) {\n                    ioe.printStackTrace();\n                }\n            }\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n        client.close();\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/ntp/SimpleNTPServer.java": "package org.apache.commons.net.examples.ntp;\nimport org.apache.commons.net.ntp.NtpUtils;\nimport org.apache.commons.net.ntp.NtpV3Impl;\nimport org.apache.commons.net.ntp.NtpV3Packet;\nimport org.apache.commons.net.ntp.TimeStamp;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\npublic class SimpleNTPServer implements Runnable {\n    private int port;\n    private volatile boolean running;\n    private boolean started;\n    private DatagramSocket socket;\n    public SimpleNTPServer()\n    {\n        this(NtpV3Packet.NTP_PORT);\n    }\n    public SimpleNTPServer(int port)\n    {\n        if (port < 0) {\n            throw new IllegalArgumentException();\n        }\n        this.port = port;\n    }\n    public int getPort()\n    {\n        return port;\n    }\n    public boolean isRunning()\n    {\n        return running;\n    }\n    public boolean isStarted()\n    {\n        return started;\n    }\n    public void connect() throws IOException\n    {\n        if (socket == null)\n        {\n            socket = new DatagramSocket(port);\n            if (port == 0) {\n                port = socket.getLocalPort();\n            }\n            System.out.println(\"Running NTP service on port \" + port + \"/UDP\");\n        }\n    }\n    public void start() throws IOException\n    {\n        if (socket == null)\n        {\n            connect();\n        }\n        if (!started)\n        {\n            started = true;\n            new Thread(this).start();\n        }\n    }\n    @Override\n    public void run()\n    {\n        running = true;\n        byte buffer[] = new byte[48];\n        final DatagramPacket request = new DatagramPacket(buffer, buffer.length);\n        do {\n            try {\n                socket.receive(request);\n                final long rcvTime = System.currentTimeMillis();\n                handlePacket(request, rcvTime);\n            } catch (IOException e) {\n                if (running)\n                {\n                    e.printStackTrace();\n                }\n            }\n        } while (running);\n    }\n    protected void handlePacket(DatagramPacket request, long rcvTime) throws IOException\n    {\n        NtpV3Packet message = new NtpV3Impl();\n        message.setDatagramPacket(request);\n        System.out.printf(\"NTP packet from %s mode=%s%n\", request.getAddress().getHostAddress(),\n                NtpUtils.getModeName(message.getMode()));\n        if (message.getMode() == NtpV3Packet.MODE_CLIENT) {\n            NtpV3Packet response = new NtpV3Impl();\n            response.setStratum(1);\n            response.setMode(NtpV3Packet.MODE_SERVER);\n            response.setVersion(NtpV3Packet.VERSION_3);\n            response.setPrecision(-20);\n            response.setPoll(0);\n            response.setRootDelay(62);\n            response.setRootDispersion((int) (16.51 * 65.536));\n            response.setOriginateTimeStamp(message.getTransmitTimeStamp());\n            response.setReceiveTimeStamp(TimeStamp.getNtpTime(rcvTime));\n            response.setReferenceTime(response.getReceiveTimeStamp());\n            response.setReferenceId(0x4C434C00); // LCL (Undisciplined Local Clock)\n            response.setTransmitTime(TimeStamp.getNtpTime(System.currentTimeMillis()));\n            DatagramPacket dp = response.getDatagramPacket();\n            dp.setPort(request.getPort());\n            dp.setAddress(request.getAddress());\n            socket.send(dp);\n        }\n    }\n    public void stop()\n    {\n        running = false;\n        if (socket != null)\n        {\n            socket.close();  // force closing of the socket\n            socket = null;\n        }\n        started = false;\n    }\n    public static void main(String[] args)\n    {\n        int port = NtpV3Packet.NTP_PORT;\n        if (args.length != 0)\n        {\n            try {\n                port = Integer.parseInt(args[0]);\n            } catch (NumberFormatException nfe) {\n                nfe.printStackTrace();\n            }\n        }\n        SimpleNTPServer timeServer = new SimpleNTPServer(port);\n        try {\n            timeServer.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/ntp/TimeClient.java": "package org.apache.commons.net.examples.ntp;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport org.apache.commons.net.time.TimeTCPClient;\nimport org.apache.commons.net.time.TimeUDPClient;\npublic final class TimeClient\n{\n    public static final void timeTCP(String host) throws IOException\n    {\n        TimeTCPClient client = new TimeTCPClient();\n    try {\n          client.setDefaultTimeout(60000);\n      client.connect(host);\n          System.out.println(client.getDate());\n    } finally {\n          client.disconnect();\n    }\n    }\n    public static final void timeUDP(String host) throws IOException\n    {\n        TimeUDPClient client = new TimeUDPClient();\n        client.setDefaultTimeout(60000);\n        client.open();\n        System.out.println(client.getDate(InetAddress.getByName(host)));\n        client.close();\n    }\n    public static void main(String[] args)\n    {\n        if (args.length == 1)\n        {\n            try\n            {\n                timeTCP(args[0]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else if (args.length == 2 && args[0].equals(\"-udp\"))\n        {\n            try\n            {\n                timeUDP(args[1]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else\n        {\n            System.err.println(\"Usage: TimeClient [-udp] <hostname>\");\n            System.exit(1);\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/package-info.java": "package org.apache.commons.net.examples;",
            "src/main/java/org/apache/commons/net/examples/telnet/TelnetClientExample.java": "package org.apache.commons.net.examples.telnet;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.FileOutputStream;\nimport java.util.StringTokenizer;\nimport org.apache.commons.net.telnet.TelnetClient;\nimport org.apache.commons.net.telnet.TelnetNotificationHandler;\nimport org.apache.commons.net.telnet.SimpleOptionHandler;\nimport org.apache.commons.net.telnet.EchoOptionHandler;\nimport org.apache.commons.net.telnet.TerminalTypeOptionHandler;\nimport org.apache.commons.net.telnet.SuppressGAOptionHandler;\nimport org.apache.commons.net.telnet.InvalidTelnetOptionException;\npublic class TelnetClientExample implements Runnable, TelnetNotificationHandler\n{\n    static TelnetClient tc = null;\n    public static void main(String[] args) throws Exception\n    {\n        FileOutputStream fout = null;\n        if(args.length < 1)\n        {\n            System.err.println(\"Usage: TelnetClientExample <remote-ip> [<remote-port>]\");\n            System.exit(1);\n        }\n        String remoteip = args[0];\n        int remoteport;\n        if (args.length > 1)\n        {\n            remoteport = Integer.parseInt(args[1]);\n        }\n        else\n        {\n            remoteport = 23;\n        }\n        try\n        {\n            fout = new FileOutputStream (\"spy.log\", true);\n        }\n        catch (IOException e)\n        {\n            System.err.println(\n                \"Exception while opening the spy file: \"\n                + e.getMessage());\n        }\n        tc = new TelnetClient();\n        TerminalTypeOptionHandler ttopt = new TerminalTypeOptionHandler(\"VT100\", false, false, true, false);\n        EchoOptionHandler echoopt = new EchoOptionHandler(true, false, true, false);\n        SuppressGAOptionHandler gaopt = new SuppressGAOptionHandler(true, true, true, true);\n        try\n        {\n            tc.addOptionHandler(ttopt);\n            tc.addOptionHandler(echoopt);\n            tc.addOptionHandler(gaopt);\n        }\n        catch (InvalidTelnetOptionException e)\n        {\n            System.err.println(\"Error registering option handlers: \" + e.getMessage());\n        }\n        while (true)\n        {\n            boolean end_loop = false;\n            try\n            {\n                tc.connect(remoteip, remoteport);\n                Thread reader = new Thread (new TelnetClientExample());\n                tc.registerNotifHandler(new TelnetClientExample());\n                System.out.println(\"TelnetClientExample\");\n                System.out.println(\"Type AYT to send an AYT telnet command\");\n                System.out.println(\"Type OPT to print a report of status of options (0-24)\");\n                System.out.println(\"Type REGISTER to register a new SimpleOptionHandler\");\n                System.out.println(\"Type UNREGISTER to unregister an OptionHandler\");\n                System.out.println(\"Type SPY to register the spy (connect to port 3333 to spy)\");\n                System.out.println(\"Type UNSPY to stop spying the connection\");\n                System.out.println(\"Type ^[A-Z] to send the control character; use ^^ to send ^\");\n                reader.start();\n                OutputStream outstr = tc.getOutputStream();\n                byte[] buff = new byte[1024];\n                int ret_read = 0;\n                do\n                {\n                    try\n                    {\n                        ret_read = System.in.read(buff);\n                        if(ret_read > 0)\n                        {\n                            final String line = new String(buff, 0, ret_read); // deliberate use of default charset\n                            if(line.startsWith(\"AYT\"))\n                            {\n                                try\n                                {\n                                    System.out.println(\"Sending AYT\");\n                                    System.out.println(\"AYT response:\" + tc.sendAYT(5000));\n                                }\n                                catch (IOException e)\n                                {\n                                    System.err.println(\"Exception waiting AYT response: \" + e.getMessage());\n                                }\n                            }\n                            else if(line.startsWith(\"OPT\"))\n                            {\n                                 System.out.println(\"Status of options:\");\n                                 for(int ii=0; ii<25; ii++) {\n                                     System.out.println(\"Local Option \" + ii + \":\" + tc.getLocalOptionState(ii) +\n                                                        \" Remote Option \" + ii + \":\" + tc.getRemoteOptionState(ii));\n                                 }\n                            }\n                            else if(line.startsWith(\"REGISTER\"))\n                            {\n                                StringTokenizer st = new StringTokenizer(new String(buff));\n                                try\n                                {\n                                    st.nextToken();\n                                    int opcode = Integer.parseInt(st.nextToken());\n                                    boolean initlocal = Boolean.parseBoolean(st.nextToken());\n                                    boolean initremote = Boolean.parseBoolean(st.nextToken());\n                                    boolean acceptlocal = Boolean.parseBoolean(st.nextToken());\n                                    boolean acceptremote = Boolean.parseBoolean(st.nextToken());\n                                    SimpleOptionHandler opthand = new SimpleOptionHandler(opcode, initlocal, initremote,\n                                                                    acceptlocal, acceptremote);\n                                    tc.addOptionHandler(opthand);\n                                }\n                                catch (Exception e)\n                                {\n                                    if(e instanceof InvalidTelnetOptionException)\n                                    {\n                                        System.err.println(\"Error registering option: \" + e.getMessage());\n                                    }\n                                    else\n                                    {\n                                        System.err.println(\"Invalid REGISTER command.\");\n                                        System.err.println(\"Use REGISTER optcode initlocal initremote acceptlocal acceptremote\");\n                                        System.err.println(\"(optcode is an integer.)\");\n                                        System.err.println(\"(initlocal, initremote, acceptlocal, acceptremote are boolean)\");\n                                    }\n                                }\n                            }\n                            else if(line.startsWith(\"UNREGISTER\"))\n                            {\n                                StringTokenizer st = new StringTokenizer(new String(buff));\n                                try\n                                {\n                                    st.nextToken();\n                                    int opcode = (new Integer(st.nextToken())).intValue();\n                                    tc.deleteOptionHandler(opcode);\n                                }\n                                catch (Exception e)\n                                {\n                                    if(e instanceof InvalidTelnetOptionException)\n                                    {\n                                        System.err.println(\"Error unregistering option: \" + e.getMessage());\n                                    }\n                                    else\n                                    {\n                                        System.err.println(\"Invalid UNREGISTER command.\");\n                                        System.err.println(\"Use UNREGISTER optcode\");\n                                        System.err.println(\"(optcode is an integer)\");\n                                    }\n                                }\n                            }\n                            else if(line.startsWith(\"SPY\"))\n                            {\n                                tc.registerSpyStream(fout);\n                            }\n                            else if(line.startsWith(\"UNSPY\"))\n                            {\n                                tc.stopSpyStream();\n                            }\n                            else if(line.matches(\"^\\\\^[A-Z^]\\\\r?\\\\n?$\"))\n                            {\n                                byte toSend = buff[1];\n                                if (toSend == '^') {\n                                    outstr.write(toSend);\n                                } else {\n                                    outstr.write(toSend - 'A' + 1);\n                                }\n                                outstr.flush();\n                            }\n                            else\n                            {\n                                try\n                                {\n                                        outstr.write(buff, 0 , ret_read);\n                                        outstr.flush();\n                                }\n                                catch (IOException e)\n                                {\n                                        end_loop = true;\n                                }\n                            }\n                        }\n                    }\n                    catch (IOException e)\n                    {\n                        System.err.println(\"Exception while reading keyboard:\" + e.getMessage());\n                        end_loop = true;\n                    }\n                }\n                while((ret_read > 0) && (end_loop == false));\n                try\n                {\n                    tc.disconnect();\n                }\n                catch (IOException e)\n                {\n                          System.err.println(\"Exception while connecting:\" + e.getMessage());\n                }\n            }\n            catch (IOException e)\n            {\n                    System.err.println(\"Exception while connecting:\" + e.getMessage());\n                    System.exit(1);\n            }\n        }\n    }\n    @Override\n    public void receivedNegotiation(int negotiation_code, int option_code)\n    {\n        String command = null;\n        switch (negotiation_code) {\n            case TelnetNotificationHandler.RECEIVED_DO:\n                command = \"DO\";\n                break;\n            case TelnetNotificationHandler.RECEIVED_DONT:\n                command = \"DONT\";\n                break;\n            case TelnetNotificationHandler.RECEIVED_WILL:\n                command = \"WILL\";\n                break;\n            case TelnetNotificationHandler.RECEIVED_WONT:\n                command = \"WONT\";\n                break;\n            case TelnetNotificationHandler.RECEIVED_COMMAND:\n                command = \"COMMAND\";\n                break;\n            default:\n                command = Integer.toString(negotiation_code); // Should not happen\n                break;\n        }\n        System.out.println(\"Received \" + command + \" for option code \" + option_code);\n   }\n    @Override\n    public void run()\n    {\n        InputStream instr = tc.getInputStream();\n        try\n        {\n            byte[] buff = new byte[1024];\n            int ret_read = 0;\n            do\n            {\n                ret_read = instr.read(buff);\n                if(ret_read > 0)\n                {\n                    System.out.print(new String(buff, 0, ret_read));\n                }\n            }\n            while (ret_read >= 0);\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Exception while reading socket:\" + e.getMessage());\n        }\n        try\n        {\n            tc.disconnect();\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Exception while closing telnet:\" + e.getMessage());\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/telnet/WeatherTelnet.java": "package org.apache.commons.net.examples.telnet;\nimport java.io.IOException;\nimport org.apache.commons.net.telnet.TelnetClient;\nimport org.apache.commons.net.examples.util.IOUtil;\npublic final class WeatherTelnet\n{\n    public static final void main(String[] args)\n    {\n        TelnetClient telnet;\n        telnet = new TelnetClient();\n        try\n        {\n            telnet.connect(\"rainmaker.wunderground.com\", 3000);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(),\n                         System.in, System.out);\n        try\n        {\n            telnet.disconnect();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/unix/chargen.java": "package org.apache.commons.net.examples.unix;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.InterruptedIOException;\nimport java.net.InetAddress;\nimport java.net.SocketException;\nimport org.apache.commons.net.chargen.CharGenTCPClient;\nimport org.apache.commons.net.chargen.CharGenUDPClient;\npublic final class chargen\n{\n    public static final void chargenTCP(String host) throws IOException\n    {\n        int lines = 100;\n        String line;\n        CharGenTCPClient client = new CharGenTCPClient();\n        BufferedReader chargenInput;\n        client.setDefaultTimeout(60000);\n        client.connect(host);\n        chargenInput =\n            new BufferedReader(new InputStreamReader(client.getInputStream()));\n        while (lines-- > 0)\n        {\n            if ((line = chargenInput.readLine()) == null) {\n                break;\n            }\n            System.out.println(line);\n        }\n        chargenInput.close();\n        client.disconnect();\n    }\n    public static final void chargenUDP(String host) throws IOException\n    {\n        int packets = 50;\n        byte[] data;\n        InetAddress address;\n        CharGenUDPClient client;\n        address = InetAddress.getByName(host);\n        client = new CharGenUDPClient();\n        client.open();\n        client.setSoTimeout(5000);\n        while (packets-- > 0)\n        {\n            client.send(address);\n            try\n            {\n                data = client.receive();\n            }\n            catch (SocketException e)\n            {\n                System.err.println(\"SocketException: Timed out and dropped packet\");\n                continue;\n            }\n            catch (InterruptedIOException e)\n            {\n                System.err.println(\n                    \"InterruptedIOException: Timed out and dropped packet\");\n                continue;\n            }\n            System.out.write(data);\n            System.out.flush();\n        }\n        client.close();\n    }\n    public static void main(String[] args)\n    {\n        if (args.length == 1)\n        {\n            try\n            {\n                chargenTCP(args[0]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else if (args.length == 2 && args[0].equals(\"-udp\"))\n        {\n            try\n            {\n                chargenUDP(args[1]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else\n        {\n            System.err.println(\"Usage: chargen [-udp] <hostname>\");\n            System.exit(1);\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/unix/daytime.java": "package org.apache.commons.net.examples.unix;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport org.apache.commons.net.daytime.DaytimeTCPClient;\nimport org.apache.commons.net.daytime.DaytimeUDPClient;\npublic final class daytime\n{\n    public static final void daytimeTCP(String host) throws IOException\n    {\n        DaytimeTCPClient client = new DaytimeTCPClient();\n        client.setDefaultTimeout(60000);\n        client.connect(host);\n        System.out.println(client.getTime().trim());\n        client.disconnect();\n    }\n    public static final void daytimeUDP(String host) throws IOException\n    {\n        DaytimeUDPClient client = new DaytimeUDPClient();\n        client.setDefaultTimeout(60000);\n        client.open();\n        System.out.println(client.getTime(\n                                          InetAddress.getByName(host)).trim());\n        client.close();\n    }\n    public static void main(String[] args)\n    {\n        if (args.length == 1)\n        {\n            try\n            {\n                daytimeTCP(args[0]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else if (args.length == 2 && args[0].equals(\"-udp\"))\n        {\n            try\n            {\n                daytimeUDP(args[1]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else\n        {\n            System.err.println(\"Usage: daytime [-udp] <hostname>\");\n            System.exit(1);\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/unix/echo.java": "package org.apache.commons.net.examples.unix;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.InterruptedIOException;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.InetAddress;\nimport java.net.SocketException;\nimport org.apache.commons.net.echo.EchoTCPClient;\nimport org.apache.commons.net.echo.EchoUDPClient;\npublic final class echo\n{\n    public static final void echoTCP(String host) throws IOException\n    {\n        EchoTCPClient client = new EchoTCPClient();\n        BufferedReader input, echoInput;\n        PrintWriter echoOutput;\n        String line;\n        client.setDefaultTimeout(60000);\n        client.connect(host);\n        System.out.println(\"Connected to \" + host + \".\");\n        input = new BufferedReader(new InputStreamReader(System.in));\n        echoOutput =\n            new PrintWriter(new OutputStreamWriter(client.getOutputStream()), true);\n        echoInput =\n            new BufferedReader(new InputStreamReader(client.getInputStream()));\n        while ((line = input.readLine()) != null)\n        {\n            echoOutput.println(line);\n            System.out.println(echoInput.readLine());\n        }\n        echoOutput.close();\n        echoInput.close();\n        echoInput.close();\n        client.disconnect();\n    }\n    public static final void echoUDP(String host) throws IOException\n    {\n        int length, count;\n        byte[] data;\n        String line;\n        BufferedReader input;\n        InetAddress address;\n        EchoUDPClient client;\n        input = new BufferedReader(new InputStreamReader(System.in));\n        address = InetAddress.getByName(host);\n        client = new EchoUDPClient();\n        client.open();\n        client.setSoTimeout(5000);\n        System.out.println(\"Ready to echo to \" + host + \".\");\n        while ((line = input.readLine()) != null)\n        {\n            data = line.getBytes();\n            client.send(data, address);\n            count = 0;\n            do\n            {\n                try\n                {\n                    length = client.receive(data);\n                }\n                catch (SocketException e)\n                {\n                    System.err.println(\n                        \"SocketException: Timed out and dropped packet\");\n                    break;\n                }\n                catch (InterruptedIOException e)\n                {\n                    System.err.println(\n                        \"InterruptedIOException: Timed out and dropped packet\");\n                    break;\n                }\n                System.out.print(new String(data, 0, length));\n                count += length;\n            }\n            while (count < data.length);\n            System.out.println();\n        }\n        client.close();\n    }\n    public static void main(String[] args)\n    {\n        if (args.length == 1)\n        {\n            try\n            {\n                echoTCP(args[0]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else if (args.length == 2 && args[0].equals(\"-udp\"))\n        {\n            try\n            {\n                echoUDP(args[1]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else\n        {\n            System.err.println(\"Usage: echo [-udp] <hostname>\");\n            System.exit(1);\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/unix/finger.java": "package org.apache.commons.net.examples.unix;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport org.apache.commons.net.finger.FingerClient;\npublic final class finger\n{\n    public static void main(String[] args)\n    {\n        boolean longOutput = false;\n        int arg = 0, index;\n        String handle, host;\n        FingerClient finger;\n        InetAddress address = null;\n        while (arg < args.length && args[arg].startsWith(\"-\"))\n        {\n            if (args[arg].equals(\"-l\")) {\n                longOutput = true;\n            } else {\n                System.err.println(\"usage: finger [-l] [[[handle][@<server>]] ...]\");\n                System.exit(1);\n            }\n            ++arg;\n        }\n        finger = new FingerClient();\n        finger.setDefaultTimeout(60000);\n        if (arg >= args.length)\n        {\n            try\n            {\n                address = InetAddress.getLocalHost();\n            }\n            catch (UnknownHostException e)\n            {\n                System.err.println(\"Error unknown host: \" + e.getMessage());\n                System.exit(1);\n            }\n            try\n            {\n                finger.connect(address);\n                System.out.print(finger.query(longOutput));\n                finger.disconnect();\n            }\n            catch (IOException e)\n            {\n                System.err.println(\"Error I/O exception: \" + e.getMessage());\n                System.exit(1);\n            }\n            return ;\n        }\n        while (arg < args.length)\n        {\n            index = args[arg].lastIndexOf('@');\n            if (index == -1)\n            {\n                handle = args[arg];\n                try\n                {\n                    address = InetAddress.getLocalHost();\n                }\n                catch (UnknownHostException e)\n                {\n                    System.err.println(\"Error unknown host: \" + e.getMessage());\n                    System.exit(1);\n                }\n            }\n            else\n            {\n                handle = args[arg].substring(0, index);\n                host = args[arg].substring(index + 1);\n                try\n                {\n                    address = InetAddress.getByName(host);\n                    System.out.println(\"[\" + address.getHostName() + \"]\");\n                }\n                catch (UnknownHostException e)\n                {\n                    System.err.println(\"Error unknown host: \" + e.getMessage());\n                    System.exit(1);\n                }\n            }\n            try\n            {\n                finger.connect(address);\n                System.out.print(finger.query(longOutput, handle));\n                finger.disconnect();\n            }\n            catch (IOException e)\n            {\n                System.err.println(\"Error I/O exception: \" + e.getMessage());\n                System.exit(1);\n            }\n            ++arg;\n            if (arg != args.length) {\n                System.out.print(\"\\n\");\n            }\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/unix/fwhois.java": "package org.apache.commons.net.examples.unix;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport org.apache.commons.net.whois.WhoisClient;\npublic final class fwhois\n{\n    public static void main(String[] args)\n    {\n        int index;\n        String handle, host;\n        InetAddress address = null;\n        WhoisClient whois;\n        if (args.length != 1)\n        {\n            System.err.println(\"usage: fwhois handle[@<server>]\");\n            System.exit(1);\n        }\n        index = args[0].lastIndexOf('@');\n        whois = new WhoisClient();\n        whois.setDefaultTimeout(60000);\n        if (index == -1)\n        {\n            handle = args[0];\n            host = WhoisClient.DEFAULT_HOST;\n        }\n        else\n        {\n            handle = args[0].substring(0, index);\n            host = args[0].substring(index + 1);\n        }\n        try\n        {\n            address = InetAddress.getByName(host);\n            System.out.println(\"[\" + address.getHostName() + \"]\");\n        }\n        catch (UnknownHostException e)\n        {\n            System.err.println(\"Error unknown host: \" + e.getMessage());\n            System.exit(1);\n        }\n        try\n        {\n            whois.connect(address);\n            System.out.print(whois.query(handle));\n            whois.disconnect();\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Error I/O exception: \" + e.getMessage());\n            System.exit(1);\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/unix/rdate.java": "package org.apache.commons.net.examples.unix;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport org.apache.commons.net.time.TimeTCPClient;\nimport org.apache.commons.net.time.TimeUDPClient;\npublic final class rdate\n{\n    public static final void timeTCP(String host) throws IOException\n    {\n        TimeTCPClient client = new TimeTCPClient();\n        client.setDefaultTimeout(60000);\n        client.connect(host);\n        System.out.println(client.getDate().toString());\n        client.disconnect();\n    }\n    public static final void timeUDP(String host) throws IOException\n    {\n        TimeUDPClient client = new TimeUDPClient();\n        client.setDefaultTimeout(60000);\n        client.open();\n        System.out.println(client.getDate(InetAddress.getByName(host)).toString());\n        client.close();\n    }\n    public static void main(String[] args)\n    {\n        if (args.length == 1)\n        {\n            try\n            {\n                timeTCP(args[0]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else if (args.length == 2 && args[0].equals(\"-udp\"))\n        {\n            try\n            {\n                timeUDP(args[1]);\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n        else\n        {\n            System.err.println(\"Usage: rdate [-udp] <hostname>\");\n            System.exit(1);\n        }\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/unix/rexec.java": "package org.apache.commons.net.examples.unix;\nimport java.io.IOException;\nimport org.apache.commons.net.bsd.RExecClient;\nimport org.apache.commons.net.examples.util.IOUtil;\npublic final class rexec\n{\n    public static void main(String[] args)\n    {\n        String server, username, password, command;\n        RExecClient client;\n        if (args.length != 4)\n        {\n            System.err.println(\n                \"Usage: rexec <hostname> <username> <password> <command>\");\n            System.exit(1);\n            return ; // so compiler can do proper flow control analysis\n        }\n        client = new RExecClient();\n        server = args[0];\n        username = args[1];\n        password = args[2];\n        command = args[3];\n        try\n        {\n            client.connect(server);\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Could not connect to server.\");\n            e.printStackTrace();\n            System.exit(1);\n        }\n        try\n        {\n            client.rexec(username, password, command);\n        }\n        catch (IOException e)\n        {\n            try\n            {\n                client.disconnect();\n            }\n            catch (IOException f)\n            {/* ignored */}\n            e.printStackTrace();\n            System.err.println(\"Could not execute command.\");\n            System.exit(1);\n        }\n        IOUtil.readWrite(client.getInputStream(), client.getOutputStream(),\n                         System.in, System.out);\n        try\n        {\n            client.disconnect();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/unix/rlogin.java": "package org.apache.commons.net.examples.unix;\nimport java.io.IOException;\nimport org.apache.commons.net.bsd.RLoginClient;\nimport org.apache.commons.net.examples.util.IOUtil;\npublic final class rlogin\n{\n    public static void main(String[] args)\n    {\n        String server, localuser, remoteuser, terminal;\n        RLoginClient client;\n        if (args.length != 4)\n        {\n            System.err.println(\n                \"Usage: rlogin <hostname> <localuser> <remoteuser> <terminal>\");\n            System.exit(1);\n            return ; // so compiler can do proper flow control analysis\n        }\n        client = new RLoginClient();\n        server = args[0];\n        localuser = args[1];\n        remoteuser = args[2];\n        terminal = args[3];\n        try\n        {\n            client.connect(server);\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Could not connect to server.\");\n            e.printStackTrace();\n            System.exit(1);\n        }\n        try\n        {\n            client.rlogin(localuser, remoteuser, terminal);\n        }\n        catch (IOException e)\n        {\n            try\n            {\n                client.disconnect();\n            }\n            catch (IOException f)\n            {/* ignored */}\n            e.printStackTrace();\n            System.err.println(\"rlogin authentication failed.\");\n            System.exit(1);\n        }\n        IOUtil.readWrite(client.getInputStream(), client.getOutputStream(),\n                         System.in, System.out);\n        try\n        {\n            client.disconnect();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/unix/rshell.java": "package org.apache.commons.net.examples.unix;\nimport java.io.IOException;\nimport org.apache.commons.net.bsd.RCommandClient;\nimport org.apache.commons.net.examples.util.IOUtil;\npublic final class rshell\n{\n    public static void main(String[] args)\n    {\n        String server, localuser, remoteuser, command;\n        RCommandClient client;\n        if (args.length != 4)\n        {\n            System.err.println(\n                \"Usage: rshell <hostname> <localuser> <remoteuser> <command>\");\n            System.exit(1);\n            return ; // so compiler can do proper flow control analysis\n        }\n        client = new RCommandClient();\n        server = args[0];\n        localuser = args[1];\n        remoteuser = args[2];\n        command = args[3];\n        try\n        {\n            client.connect(server);\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Could not connect to server.\");\n            e.printStackTrace();\n            System.exit(1);\n        }\n        try\n        {\n            client.rcommand(localuser, remoteuser, command);\n        }\n        catch (IOException e)\n        {\n            try\n            {\n                client.disconnect();\n            }\n            catch (IOException f)\n            {/* ignored */}\n            e.printStackTrace();\n            System.err.println(\"Could not execute command.\");\n            System.exit(1);\n        }\n        IOUtil.readWrite(client.getInputStream(), client.getOutputStream(),\n                         System.in, System.out);\n        try\n        {\n            client.disconnect();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n}\n",
            "src/main/java/org/apache/commons/net/examples/util/IOUtil.java": "package org.apache.commons.net.examples.util;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport org.apache.commons.net.io.Util;\npublic final class IOUtil\n{\n    public static final void readWrite(final InputStream remoteInput,\n                                       final OutputStream remoteOutput,\n                                       final InputStream localInput,\n                                       final OutputStream localOutput)\n    {\n        Thread reader, writer;\n        reader = new Thread()\n                 {\n                     @Override\n                     public void run()\n                     {\n                         int ch;\n                         try\n                         {\n                             while (!interrupted() && (ch = localInput.read()) != -1)\n                             {\n                                 remoteOutput.write(ch);\n                                 remoteOutput.flush();\n                             }\n                         }\n                         catch (IOException e)\n                         {\n                         }\n                     }\n                 }\n                 ;\n        writer = new Thread()\n                 {\n                     @Override\n                     public void run()\n                     {\n                         try\n                         {\n                             Util.copyStream(remoteInput, localOutput);\n                         }\n                         catch (IOException e)\n                         {\n                             e.printStackTrace();\n                             System.exit(1);\n                         }\n                     }\n                 };\n        writer.setPriority(Thread.currentThread().getPriority() + 1);\n        writer.start();\n        reader.setDaemon(true);\n        reader.start();\n        try\n        {\n            writer.join();\n            reader.interrupt();\n        }\n        catch (InterruptedException e)\n        {\n        }\n    }\n}\n",
            "src/test/java/org/apache/commons/net/examples/MainTest.java": "package org.apache.commons.net.examples;\nimport static org.junit.Assert.fail;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URLDecoder;\nimport java.security.CodeSource;\nimport java.util.Enumeration;\nimport java.util.Properties;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\nimport org.junit.Test;\npublic class MainTest {\n    @Test\n    public void checkExamplesPropertiesIsComplete() throws Exception {\n        Properties cp = scanClasses();\n        Properties fp = new Properties();\n        fp.load(this.getClass().getResourceAsStream(\"examples.properties\"));\n        @SuppressWarnings(\"unchecked\") // OK\n        final Enumeration<String> propertyNames = (Enumeration<String>) cp.propertyNames();\n        while(propertyNames.hasMoreElements()){\n            String c = propertyNames.nextElement();\n            String fv = fp.getProperty(c);\n            final String cv = cp.getProperty(c);\n            if (fv == null) {\n                System.out.printf(\"%-25s %s - missing from examples.properties%n\",c,cv);\n            } else if (!fv.equals(cv)) {\n                System.out.printf(\"%-25s %s - expected value %s %n\",c,fv,cv);\n            }\n        }\n    }\n    private Properties scanClasses() throws IOException {\n        CodeSource codeSource = Main.class.getProtectionDomain().getCodeSource();\n        final String sourceFile = URLDecoder.decode(codeSource.getLocation().getFile(),\"UTF-8\");\n        Properties p = new Properties();\n        if (sourceFile.endsWith(\".jar\")) {\n            JarFile jf = new JarFile(sourceFile);\n            Enumeration<JarEntry> e = jf.entries();\n            while (e.hasMoreElements()) {\n              JarEntry je = e.nextElement();\n              String name = je.getName();\n              processFileName(name, p);\n            }\n            jf.close();\n        } else {\n            File examples = new File(sourceFile, \"org/apache/commons/net/examples\"); // must match top level examples package name\n            if (examples.exists()) {\n                scanForClasses(sourceFile.length(), examples, p);\n            } else {\n                fail(\"Could not find examples classes: \" + examples.getCanonicalPath());\n            }\n        }\n        return p;\n    }\n    private static void scanForClasses(int rootLength, File current, Properties p) {\n        for(File file : current.listFiles()) {\n            if (file.isDirectory()) {\n                scanForClasses(rootLength, file, p);\n            } else {\n                processFileName(file.getPath().substring(rootLength), p);\n            }\n        }\n    }\n    private static void processFileName(String name, Properties p) {\n        if (!name.endsWith(\".class\")\n                || name.contains(\"$\") // subclasses\n                || name.endsWith(\"examples/Main.class\")  // the initial class, don't want to add that\n                || !hasMainMethod(name)\n                ) {\n            return;\n        }\n        name = name.replace(\".class\", \"\");\n        final int lastSep = name.lastIndexOf('/');\n        final String alias = name.substring(lastSep+1);\n        if (p.containsKey(alias)) {\n            System.out.printf(\"Duplicate alias: %-25s %s %s %n\",alias,name,p.getProperty(alias));\n        } else {\n            p.setProperty(alias, name);\n        }\n    }\n    private static boolean hasMainMethod(String name) {\n        name = name.replace(\".class\", \"\");\n        name = name.replace(\"/\", \".\");\n        try {\n            Class<?> clazz = Class.forName(name, false, MainTest.class.getClassLoader());\n            clazz.getMethod(\"main\", new Class[]{String[].class});\n            return true;\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"Cannot find \" + name);\n            return false;\n        } catch (NoSuchMethodException e) {\n            return false;\n        } catch (SecurityException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n}\n",
            "src/test/java/org/apache/commons/net/ntp/TestNtpClient.java": "import org.apache.commons.net.examples.ntp.SimpleNTPServer;\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/examples/Main.java": [
                19,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                32,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113
            ],
            "src/main/java/org/apache/commons/net/examples/cidr/SubnetUtilsExample.java": [
                17,
                19,
                20,
                22,
                23,
                29,
                31,
                32,
                33,
                34,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                44,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                55,
                56,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                71
            ],
            "src/main/java/org/apache/commons/net/examples/ftp/FTPClientExample.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                51,
                52,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                229,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                254,
                255,
                256,
                257,
                259,
                260,
                261,
                262,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                312,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                325,
                326,
                327,
                329,
                330,
                331,
                332,
                333,
                334,
                335,
                336,
                337,
                341,
                343,
                344,
                345,
                346,
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                355,
                356,
                357,
                358,
                359,
                361,
                362,
                363,
                364,
                365,
                366,
                368,
                369,
                370,
                371,
                372,
                373,
                374,
                375,
                376,
                378,
                380,
                381,
                382,
                385,
                386,
                390,
                391,
                392,
                393,
                394,
                396,
                398,
                399,
                400,
                402,
                404,
                406,
                408,
                409,
                410,
                411,
                413,
                414,
                415,
                416,
                417,
                418,
                419,
                420,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                428,
                429,
                430,
                431,
                432,
                433,
                434,
                435,
                436,
                437,
                438,
                439,
                440,
                441,
                442,
                443,
                445,
                446,
                447,
                448,
                449,
                450,
                451,
                452,
                454,
                455,
                456,
                457,
                458,
                459,
                460,
                461,
                463,
                464,
                465,
                466,
                467,
                468,
                469,
                470,
                471,
                472,
                475,
                476,
                477,
                478,
                479,
                480,
                481,
                482,
                483,
                484,
                485,
                486,
                487,
                488,
                490,
                491,
                492,
                493,
                494,
                495,
                496,
                497,
                502,
                503,
                504,
                505,
                506,
                507,
                508,
                510,
                512,
                514,
                516,
                517,
                518,
                519,
                521,
                523,
                524,
                525,
                526,
                527,
                528,
                529,
                530,
                531,
                532,
                533,
                534,
                535,
                536,
                537,
                538,
                539,
                540,
                541,
                542,
                543,
                544,
                545,
                547,
                548,
                549,
                551,
                552,
                554,
                555,
                556,
                557,
                559,
                561,
                562,
                563,
                565,
                566,
                567,
                568,
                570,
                571,
                572,
                573,
                574,
                575,
                576,
                577,
                578,
                579,
                580,
                581
            ],
            "src/main/java/org/apache/commons/net/examples/ftp/ServerToServerFTP.java": [
                18,
                20,
                21,
                22,
                24,
                25,
                26,
                27,
                39,
                40,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                79,
                80,
                81,
                82,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                94,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                114,
                115,
                116,
                117,
                118,
                119,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                131,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                151,
                152,
                153,
                154,
                155,
                156,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                167,
                168,
                169,
                170,
                171,
                174,
                176,
                177,
                186,
                187,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                219,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                232,
                233,
                234,
                235
            ],
            "src/main/java/org/apache/commons/net/examples/ftp/TFTPExample.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                104,
                105,
                106,
                107,
                108,
                109,
                112,
                113,
                114,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                129,
                132,
                135,
                136,
                137,
                138,
                140,
                141,
                143,
                145,
                146,
                147,
                148,
                150,
                151,
                153,
                154,
                155,
                156,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                169,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                196,
                197,
                199,
                200,
                202,
                203,
                204,
                205,
                206,
                208,
                211,
                212,
                213,
                214,
                215,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                228,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                256,
                257,
                259,
                260,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                292
            ],
            "src/main/java/org/apache/commons/net/examples/mail/IMAPExportMbox.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                36,
                37,
                38,
                39,
                40,
                41,
                80,
                81,
                83,
                84,
                85,
                87,
                89,
                90,
                91,
                93,
                94,
                97,
                100,
                102,
                103,
                105,
                106,
                107,
                108,
                110,
                111,
                112,
                113,
                114,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                136,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                215,
                216,
                217,
                218,
                219,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                232,
                234,
                236,
                238,
                240,
                241,
                242,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                256,
                257,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                287,
                288,
                289,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                317,
                318,
                319,
                320,
                322,
                323,
                324,
                325,
                326,
                327,
                328,
                330,
                332,
                333,
                334,
                335,
                336,
                337,
                338,
                339,
                342,
                343,
                344,
                345,
                346,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                355,
                356,
                358,
                359,
                360,
                361,
                362,
                363,
                364,
                365,
                366,
                367,
                368,
                369,
                370,
                371,
                372,
                373,
                374,
                375,
                376,
                377,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                385,
                386,
                387,
                388,
                390,
                391,
                392,
                393,
                394,
                396,
                397,
                398,
                399,
                401,
                402,
                403,
                404,
                405,
                406,
                407,
                408,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                418,
                419,
                420,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                428,
                429,
                430,
                431,
                432,
                433,
                434,
                435,
                436,
                437,
                438,
                439,
                440,
                441,
                442,
                443,
                444,
                446,
                447,
                448,
                449,
                450,
                451,
                452
            ],
            "src/main/java/org/apache/commons/net/examples/mail/IMAPImportMbox.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                31,
                48,
                49,
                51,
                52,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                64,
                65,
                67,
                68,
                69,
                70,
                72,
                73,
                74,
                75,
                76,
                78,
                79,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                104,
                106,
                107,
                108,
                109,
                111,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                149,
                150,
                151,
                152,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                178,
                179,
                180,
                181,
                182,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                199
            ],
            "src/main/java/org/apache/commons/net/examples/mail/IMAPMail.java": [
                18,
                20,
                21,
                23,
                24,
                38,
                39,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                50,
                53,
                56,
                58,
                59,
                61,
                63,
                65,
                67,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79
            ],
            "src/main/java/org/apache/commons/net/examples/mail/IMAPUtils.java": [
                18,
                20,
                21,
                23,
                24,
                25,
                31,
                43,
                44,
                45,
                46,
                47,
                49,
                50,
                51,
                52,
                54,
                55,
                57,
                59,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                75,
                77,
                78,
                79,
                81,
                82,
                84,
                85,
                86,
                87,
                88,
                89,
                91,
                92,
                93,
                94,
                96,
                97,
                98
            ],
            "src/main/java/org/apache/commons/net/examples/mail/POP3ExportMbox.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                31,
                32,
                33,
                47,
                48,
                50,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                72,
                73,
                74,
                75,
                77,
                78,
                79,
                80,
                81,
                82,
                84,
                85,
                87,
                89,
                90,
                91,
                92,
                93,
                94,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                105,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                135,
                136,
                137,
                138,
                139,
                140,
                142,
                143,
                144,
                145,
                146,
                147,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                183,
                184,
                185,
                186,
                187
            ],
            "src/main/java/org/apache/commons/net/examples/mail/POP3Mail.java": [
                18,
                20,
                21,
                22,
                23,
                25,
                26,
                27,
                28,
                38,
                39,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                55,
                56,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                67,
                68,
                69,
                70,
                72,
                73,
                74,
                75,
                76,
                77,
                79,
                80,
                82,
                84,
                85,
                86,
                87,
                88,
                89,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                100,
                103,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                133,
                135,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                152,
                154,
                155,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175
            ],
            "src/main/java/org/apache/commons/net/examples/mail/SMTPMail.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                30,
                31,
                32,
                33,
                34,
                42,
                43,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                55,
                56,
                57,
                58,
                59,
                61,
                63,
                65,
                66,
                67,
                68,
                70,
                72,
                73,
                75,
                77,
                78,
                80,
                82,
                85,
                86,
                87,
                88,
                90,
                92,
                93,
                94,
                96,
                97,
                98,
                100,
                101,
                103,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                114,
                115,
                116,
                118,
                120,
                121,
                122,
                123,
                124,
                125,
                127,
                129,
                130,
                134,
                135,
                136,
                138,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                148,
                149,
                150,
                152,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162
            ],
            "src/main/java/org/apache/commons/net/examples/mail/Utils.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                29,
                31,
                33,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                70
            ],
            "src/main/java/org/apache/commons/net/examples/nntp/ArticleReader.java": [
                18,
                20,
                21,
                22,
                23,
                25,
                26,
                27,
                32,
                34,
                36,
                37,
                38,
                39,
                41,
                42,
                44,
                46,
                47,
                48,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                59,
                60,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                91
            ],
            "src/main/java/org/apache/commons/net/examples/nntp/ExtendedNNTPOps.java": [
                18,
                20,
                21,
                23,
                24,
                25,
                26,
                32,
                35,
                37,
                38,
                39,
                40,
                43,
                44,
                45,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                58,
                59,
                60,
                61,
                62,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                73,
                74,
                75,
                76,
                77,
                79,
                80,
                81,
                82,
                84,
                85,
                87,
                88,
                89,
                90,
                91,
                93,
                94,
                95,
                97
            ],
            "src/main/java/org/apache/commons/net/examples/nntp/ListNewsgroups.java": [
                18,
                20,
                21,
                22,
                32,
                33,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                43,
                44,
                46,
                47,
                48,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                88,
                90
            ],
            "src/main/java/org/apache/commons/net/examples/nntp/MessageThreading.java": [
                19,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                33,
                34,
                35,
                37,
                39,
                40,
                41,
                42,
                44,
                45,
                47,
                48,
                49,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                72,
                73,
                75,
                76,
                78,
                79,
                80,
                82,
                83,
                85
            ],
            "src/main/java/org/apache/commons/net/examples/nntp/NNTPUtils.java": [
                17,
                19,
                20,
                21,
                22,
                23,
                28,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48
            ],
            "src/main/java/org/apache/commons/net/examples/nntp/PostMessage.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                28,
                29,
                30,
                31,
                32,
                41,
                42,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                53,
                54,
                55,
                56,
                57,
                59,
                61,
                63,
                64,
                65,
                66,
                68,
                70,
                71,
                73,
                75,
                77,
                78,
                80,
                81,
                83,
                84,
                85,
                86,
                88,
                89,
                90,
                91,
                93,
                95,
                96,
                97,
                99,
                100,
                102,
                103,
                105,
                107,
                108,
                110,
                112,
                113,
                114,
                116,
                117,
                118,
                120,
                122,
                123,
                125,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                137,
                138,
                139,
                141,
                143,
                144,
                145,
                146,
                147,
                148,
                150,
                151,
                152,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                163,
                164,
                165,
                167,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177
            ],
            "src/main/java/org/apache/commons/net/examples/ntp/NTPClient.java": [
                1,
                20,
                21,
                22,
                23,
                24,
                26,
                27,
                28,
                29,
                30,
                47,
                48,
                50,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                69,
                70,
                71,
                72,
                73,
                75,
                76,
                78,
                79,
                80,
                81,
                82,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                105,
                106,
                107,
                108,
                109,
                111,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                123,
                124,
                126,
                128,
                129,
                132,
                133,
                136,
                137,
                139,
                140,
                141,
                142,
                143,
                145,
                146,
                147,
                149,
                150,
                151,
                152,
                153,
                154,
                156,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                177,
                178,
                180
            ],
            "src/main/java/org/apache/commons/net/examples/ntp/SimpleNTPServer.java": [
                17,
                19,
                20,
                21,
                22,
                24,
                25,
                26,
                39,
                41,
                43,
                44,
                46,
                51,
                52,
                53,
                54,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                71,
                72,
                73,
                74,
                81,
                82,
                83,
                84,
                91,
                92,
                93,
                94,
                101,
                102,
                103,
                104,
                105,
                107,
                108,
                109,
                110,
                111,
                112,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                152,
                153,
                154,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                183,
                185,
                186,
                187,
                190,
                192,
                193,
                194,
                195,
                196,
                198,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                233
            ],
            "src/main/java/org/apache/commons/net/examples/ntp/TimeClient.java": [
                1,
                21,
                22,
                24,
                25,
                38,
                39,
                41,
                42,
                43,
                44,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                54,
                55,
                56,
                59,
                60,
                61,
                62,
                63,
                65,
                66,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                100
            ],
            "src/main/java/org/apache/commons/net/examples/package-info.java": [
                23
            ],
            "src/main/java/org/apache/commons/net/examples/telnet/TelnetClientExample.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                48,
                49,
                50,
                57,
                58,
                59,
                61,
                62,
                63,
                64,
                65,
                67,
                69,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                91,
                93,
                94,
                95,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                108,
                109,
                110,
                111,
                112,
                113,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                127,
                128,
                130,
                131,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                255,
                256,
                257,
                258,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                313,
                314,
                315,
                316,
                318,
                319,
                320,
                321,
                323,
                324,
                325,
                326,
                327,
                328,
                329,
                330,
                331,
                332,
                333,
                334,
                335,
                336,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347
            ],
            "src/main/java/org/apache/commons/net/examples/telnet/WeatherTelnet.java": [
                18,
                20,
                21,
                23,
                38,
                39,
                41,
                42,
                43,
                45,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                57,
                58,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                70,
                71,
                73
            ],
            "src/main/java/org/apache/commons/net/examples/unix/chargen.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                27,
                28,
                42,
                43,
                45,
                46,
                47,
                48,
                49,
                50,
                53,
                54,
                55,
                56,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                69,
                70,
                71,
                73,
                74,
                75,
                76,
                77,
                78,
                80,
                81,
                83,
                86,
                88,
                89,
                90,
                92,
                93,
                94,
                95,
                100,
                101,
                103,
                104,
                105,
                106,
                107,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                117,
                118,
                121,
                122,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                154,
                156
            ],
            "src/main/java/org/apache/commons/net/examples/unix/daytime.java": [
                18,
                20,
                21,
                23,
                24,
                36,
                37,
                39,
                40,
                41,
                44,
                45,
                46,
                47,
                48,
                50,
                51,
                52,
                55,
                56,
                57,
                58,
                59,
                60,
                63,
                64,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                96,
                98
            ],
            "src/main/java/org/apache/commons/net/examples/unix/echo.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                29,
                30,
                42,
                43,
                45,
                46,
                47,
                48,
                49,
                50,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                82,
                83,
                84,
                86,
                88,
                89,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                108,
                109,
                111,
                112,
                113,
                114,
                115,
                116,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                127,
                128,
                130,
                131,
                134,
                135,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                167,
                169
            ],
            "src/main/java/org/apache/commons/net/examples/unix/finger.java": [
                18,
                20,
                21,
                22,
                24,
                35,
                36,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                59,
                61,
                63,
                64,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                89,
                90,
                93,
                94,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                140,
                141,
                142,
                143,
                144,
                145,
                146
            ],
            "src/main/java/org/apache/commons/net/examples/unix/fwhois.java": [
                18,
                20,
                21,
                22,
                24,
                30,
                31,
                33,
                34,
                35,
                36,
                37,
                38,
                40,
                41,
                42,
                43,
                44,
                46,
                48,
                50,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                87
            ],
            "src/main/java/org/apache/commons/net/examples/unix/rdate.java": [
                18,
                20,
                21,
                23,
                24,
                37,
                38,
                40,
                41,
                42,
                45,
                46,
                47,
                48,
                49,
                51,
                52,
                53,
                56,
                57,
                58,
                59,
                60,
                63,
                64,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                96,
                98
            ],
            "src/main/java/org/apache/commons/net/examples/unix/rexec.java": [
                18,
                20,
                21,
                23,
                39,
                40,
                42,
                43,
                44,
                45,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                55,
                57,
                58,
                59,
                60,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                91,
                92,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                104,
                105,
                107
            ],
            "src/main/java/org/apache/commons/net/examples/unix/rlogin.java": [
                18,
                20,
                21,
                23,
                50,
                51,
                53,
                54,
                55,
                56,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                66,
                68,
                69,
                70,
                71,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                102,
                103,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                115,
                116,
                118
            ],
            "src/main/java/org/apache/commons/net/examples/unix/rshell.java": [
                18,
                20,
                21,
                23,
                43,
                44,
                46,
                47,
                48,
                49,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                59,
                61,
                62,
                63,
                64,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                95,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                108,
                109,
                111
            ],
            "src/main/java/org/apache/commons/net/examples/util/IOUtil.java": [
                18,
                20,
                21,
                22,
                23,
                36,
                37,
                39,
                40,
                41,
                42,
                43,
                44,
                46,
                47,
                48,
                49,
                50,
                51,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                64,
                65,
                66,
                67,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                88,
                90,
                91,
                92,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                102,
                103,
                105
            ],
            "src/test/java/org/apache/commons/net/examples/MainTest.java": [
                18,
                20,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                31,
                33,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                54,
                55,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124
            ],
            "src/test/java/org/apache/commons/net/ntp/TestNtpClient.java": [
                24
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/test/java/org/apache/commons/net/ntp/TestNtpClient.java": "import examples.ntp.SimpleNTPServer;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/test/java/org/apache/commons/net/ntp/TestNtpClient.java": [
                24
            ]
        }
    },
    {
        "commit": "ec0399ba",
        "prev_commit": "41a40586",
        "changed_files": [
            "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
            "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
            "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        public String getNextAddress() {\n+            return format(toArray(address + 1));\n+        }\n+        public String getPreviousAddress() {\n+            return format(toArray(address - 1));\n+        }\n+    public SubnetUtils getNext() {\n+        return new SubnetUtils(getInfo().getNextAddress(), getInfo().getNetmask());\n+    }\n+    public SubnetUtils getPrevious() {\n+        return new SubnetUtils(getInfo().getPreviousAddress(), getInfo().getNetmask());\n+    }\n+        final String nextAddresses[] = new String[] { \"192.168.0.2\", \"192.168.0.2\", \"192.168.0.2\",\n+                \"192.168.0.2\" };\n+        final String previousAddresses[] = new String[] { \"192.168.0.0\", \"192.168.0.0\", \"192.168.0.0\",\n+                \"192.168.0.0\" };\n+            assertEquals(nextAddresses[i], info.getNextAddress());\n+            assertEquals(previousAddresses[i], info.getPreviousAddress());\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/util/SubnetUtils.java": "        public String getNextAddress() {\n            return format(toArray(address + 1));\n        }\n        public String getPreviousAddress() {\n            return format(toArray(address - 1));\n        }\n    public SubnetUtils getNext() {\n        return new SubnetUtils(getInfo().getNextAddress(), getInfo().getNetmask());\n    }\n    public SubnetUtils getPrevious() {\n        return new SubnetUtils(getInfo().getPreviousAddress(), getInfo().getNetmask());\n    }\n",
            "src/test/java/org/apache/commons/net/SubnetUtilsTest.java": "        final String nextAddresses[] = new String[] { \"192.168.0.2\", \"192.168.0.2\", \"192.168.0.2\",\n                \"192.168.0.2\" };\n        final String previousAddresses[] = new String[] { \"192.168.0.0\", \"192.168.0.0\", \"192.168.0.0\",\n                \"192.168.0.0\" };\n            assertEquals(nextAddresses[i], info.getNextAddress());\n            assertEquals(previousAddresses[i], info.getPreviousAddress());\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/util/SubnetUtils.java": [
                193,
                194,
                195,
                197,
                198,
                199,
                371,
                372,
                373,
                375,
                376,
                377
            ],
            "src/test/java/org/apache/commons/net/SubnetUtilsTest.java": [
                243,
                244,
                245,
                246,
                259,
                260
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "41e514cd",
        "prev_commit": "c72538bb",
        "changed_files": [
            "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        SSLSocket socket = (SSLSocket)createSSLSocket(_socket_);\n+            if (hostnameVerifier != null && !hostnameVerifier.verify(socket.getInetAddress().getHostAddress(), socket.getSession())) {\n+        socket = createSSLSocket(socket);\n+    private Socket createSSLSocket(Socket socket) throws IOException {\n+        if (socket != null) {\n+            SSLSocketFactory f = context.getSocketFactory();\n+            return f.createSocket(socket, socket.getInetAddress().getHostAddress(), socket.getPort(), false);\n+        } else {\n+            return null;\n+        }\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPSClient.java": "        SSLSocket socket = (SSLSocket)createSSLSocket(_socket_);\n            if (hostnameVerifier != null && !hostnameVerifier.verify(socket.getInetAddress().getHostAddress(), socket.getSession())) {\n        socket = createSSLSocket(socket);\n    private Socket createSSLSocket(Socket socket) throws IOException {\n        if (socket != null) {\n            SSLSocketFactory f = context.getSocketFactory();\n            return f.createSocket(socket, socket.getInetAddress().getHostAddress(), socket.getPort(), false);\n        } else {\n            return null;\n        }\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPSClient.java": [
                263,
                293,
                622,
                908,
                909,
                910,
                911,
                912,
                913,
                914,
                915
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPSClient.java": "        SSLSocketFactory ssf = context.getSocketFactory();\n        String host = (_hostname_ != null) ? _hostname_ : getRemoteAddress().getHostAddress();\n        int port = _socket_.getPort();\n        SSLSocket socket =\n            (SSLSocket) ssf.createSocket(_socket_, host, port, false);\n            if (hostnameVerifier != null && !hostnameVerifier.verify(host, socket.getSession())) {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/ftp/FTPSClient.java": [
                264,
                265,
                266,
                267,
                268,
                298
            ]
        }
    },
    {
        "commit": "a4ae7b23",
        "prev_commit": "c4dd9fda",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/net/imap/IMAP.java",
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/net/imap/IMAP.java",
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestConnectTimeout",
            "SimpleOptionHandlerTest",
            "TerminalTypeOptionHandlerTest",
            "SuppressGAOptionHandlerTest",
            "EnterpriseUnixFTPEntryParserTest",
            "IMAPTest",
            "TimeStampTest",
            "FTPConfigEntryParserTest",
            "MVSFTPEntryParserTest",
            "NetwareFTPEntryParserTest",
            "MacOsPeterFTPEntryParserTest",
            "VMSFTPEntryParserTest",
            "MLSxEntryParserTest",
            "UnixFTPEntryParserTest",
            "EchoOptionHandlerTest",
            "DefaultFTPFileEntryParserFactoryTest",
            "WindowSizeOptionHandlerTest",
            "OS400FTPEntryParserAdditionalTest",
            "TimeTCPClientTest",
            "TestNtpPacket",
            "SubnetUtilsTest",
            "FTPClientTest",
            "ToNetASCIIInputStreamTest",
            "FTPCommandTest",
            "TelnetClientTest",
            "NTFTPEntryParserTest",
            "SocketClientTest",
            "InvalidTelnetOptionExceptionTest",
            "DotTerminatedMessageReaderTest",
            "Base64Test",
            "SimpleSMTPHeaderTestCase",
            "FTPClientConfigTest",
            "TestThreader",
            "MainTest",
            "TestTimeInfo",
            "OS2FTPEntryParserTest",
            "TelnetOptionTest",
            "UtilTest",
            "TestNtpClient",
            "FTPTimestampParserImplTest",
            "OS400FTPEntryParserTest",
            "TFTPTest",
            "TFTPServerPathTest"
        ],
        "tests_cases_num": {
            "SocketClientTest": 1,
            "SubnetUtilsTest": 13,
            "MainTest": 1,
            "FTPClientConfigTest": 6,
            "FTPClientTest": 11,
            "FTPCommandTest": 1,
            "TestConnectTimeout": 1,
            "DefaultFTPFileEntryParserFactoryTest": 2,
            "EnterpriseUnixFTPEntryParserTest": 6,
            "FTPConfigEntryParserTest": 2,
            "FTPTimestampParserImplTest": 18,
            "MLSxEntryParserTest": 6,
            "MVSFTPEntryParserTest": 10,
            "MacOsPeterFTPEntryParserTest": 6,
            "NTFTPEntryParserTest": 14,
            "NetwareFTPEntryParserTest": 6,
            "OS2FTPEntryParserTest": 6,
            "OS400FTPEntryParserAdditionalTest": 8,
            "OS400FTPEntryParserTest": 9,
            "UnixFTPEntryParserTest": 21,
            "VMSFTPEntryParserTest": 8,
            "IMAPTest": 1,
            "DotTerminatedMessageReaderTest": 12,
            "ToNetASCIIInputStreamTest": 2,
            "TestThreader": 6,
            "TestNtpClient": 1,
            "TestNtpPacket": 7,
            "TestTimeInfo": 6,
            "TimeStampTest": 4,
            "SimpleSMTPHeaderTestCase": 6,
            "EchoOptionHandlerTest": 5,
            "InvalidTelnetOptionExceptionTest": 1,
            "SimpleOptionHandlerTest": 5,
            "SuppressGAOptionHandlerTest": 5,
            "TelnetClientTest": 9,
            "TelnetOptionTest": 2,
            "TerminalTypeOptionHandlerTest": 5,
            "WindowSizeOptionHandlerTest": 6,
            "TFTPServerPathTest": 3,
            "TFTPTest": 6,
            "TimeTCPClientTest": 2,
            "Base64Test": 28,
            "UtilTest": 9
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            <action issue=\"NET-615\" type=\"add\" dev=\"sebb\">\n+            IMAPClient could simplify using empty arguments\n+            </action>\n+            <action issue=\"NET-614\" type=\"add\" dev=\"sebb\">\n+            IMAP fails to quote/encode mailbox names\n+            </action>\n+    static String quoteString(String input) {\n+        if (input == null) { // Don't throw NPE here\n+            return null;\n+        }\n+        if (input.isEmpty()) {\n+            return \"\\\"\\\"\"; // return the string \"\"\n+        }\n+        if (input.length() > 1 && input.startsWith(\"\\\"\") && input.endsWith(\"\\\"\")) {\n+            return input; // Assume already quoted\n+        }\n+        if (input.contains(\" \")) {\n+            return \"\\\"\" + input.replaceAll(\"([\\\\\\\\\\\"])\", \"\\\\\\\\$1\") + \"\\\"\";\n+        }\n+        return input;\n+    }\n+        return doCommand (IMAPCommand.LIST, quoteString(refName) + \" \" + quoteString(mailboxName));\n+        return doCommand (IMAPCommand.LSUB, quoteString(refName) + \" \" + quoteString(mailboxName));\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/net/imap/IMAP.java": "    static String quoteString(String input) {\n        if (input == null) { // Don't throw NPE here\n            return null;\n        }\n        if (input.isEmpty()) {\n            return \"\\\"\\\"\"; // return the string \"\"\n        }\n        if (input.length() > 1 && input.startsWith(\"\\\"\") && input.endsWith(\"\\\"\")) {\n            return input; // Assume already quoted\n        }\n        if (input.contains(\" \")) {\n            return \"\\\"\" + input.replaceAll(\"([\\\\\\\\\\\"])\", \"\\\\\\\\$1\") + \"\\\"\";\n        }\n        return input;\n    }\n",
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java": "        return doCommand (IMAPCommand.LIST, quoteString(refName) + \" \" + quoteString(mailboxName));\n        return doCommand (IMAPCommand.LSUB, quoteString(refName) + \" \" + quoteString(mailboxName));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/imap/IMAP.java": [
                483,
                484,
                485,
                486,
                487,
                488,
                489,
                491,
                492,
                493,
                494,
                496,
                497,
                498,
                500
            ],
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java": [
                199,
                212
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java": "        return doCommand (IMAPCommand.LIST, refName + \" \" + mailboxName);\n        return doCommand (IMAPCommand.LSUB, refName + \" \" + mailboxName);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/net/imap/IMAPClient.java": [
                194,
                206
            ]
        }
    }
]