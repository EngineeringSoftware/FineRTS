[
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java"
        ],
        "changed_java_files_num": 2,
        "commit": "893f8754",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "assertEquals outputUTF8 execute result result streams true readOutput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" err System handler handler baos baos getBytes new new new new bais bais \"Tere Minu Uus vihik\" str str str String String Exception throws testPumpFromInputToOutput void @ InputStreamPumperTest class class public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps redirectOutputAsInfo redirectOutputAsInfo redirectOutputAsInfo new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get future future start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals exitValue exitValue exitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public ExecuteStreamHandler stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "    return listener(destroyer == null ? null : new DestroyerListenerAdapter(destroyer));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                612
            ]
        },
        "diff_code": "+  public ProcessExecutor addDestroyer(ProcessDestroyer destroyer) {\n+    return addListener(new DestroyerListenerAdapter(destroyer));\n+  }\n+    removeListeners(DestroyerListenerAdapter.class);\n+    if (destroyer != null)\n+      addListener(new DestroyerListenerAdapter(destroyer));\n+    return this;\n+  public ProcessExecutor removeListeners(Class<? extends ProcessListener> listenerType) {\n+    listeners.removeAll(listenerType);\n+    return this;\n+  }\n+  public void removeAll(Class<? extends ProcessListener> type) {\n+    for (Iterator<ProcessListener> it = children.iterator(); it.hasNext();) {\n+      if (type.isInstance(it.next()))\n+        it.remove();\n+    }\n+  }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                611,
                612,
                613,
                625,
                626,
                627,
                628,
                684,
                685,
                686,
                687
            ],
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java": [
                20,
                67,
                68,
                69,
                70,
                71,
                72
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "  public ProcessExecutor addDestroyer(ProcessDestroyer destroyer) {\n    return addListener(new DestroyerListenerAdapter(destroyer));\n  }\n    removeListeners(DestroyerListenerAdapter.class);\n    if (destroyer != null)\n      addListener(new DestroyerListenerAdapter(destroyer));\n    return this;\n  public ProcessExecutor removeListeners(Class<? extends ProcessListener> listenerType) {\n    listeners.removeAll(listenerType);\n    return this;\n  }\n",
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java": "import java.util.Iterator;\n  public void removeAll(Class<? extends ProcessListener> type) {\n    for (Iterator<ProcessListener> it = children.iterator(); it.hasNext();) {\n      if (type.isInstance(it.next()))\n        it.remove();\n    }\n  }\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "38e92a5f",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "listeners readOutput streams timeoutUnit timeout Long allowedExitValues new new builder ProcessBuilder ProcessBuilder true DEFAULT_REDIRECT_ERROR_STREAM boolean boolean NORMAL_EXIT_VALUE null DEFAULT_EXIT_VALUES Integer Integer Integer getLogger log final final final final final final static static static static private private private private private private private private private ProcessExecutor ProcessExecutor class class public public public Slf4jInfoOutputStream Slf4jDebugOutputStream PumpStreamHandler ExecuteStreamHandler ExecuteStreamHandler CallerLoggerUtil stream stream stream stream stream ShutdownHookProcessDestroyer ProcessListener ProcessDestroyer DestroyerListenerAdapter CompositeProcessListener CompositeProcessListener CompositeProcessListener listener listener listener listener listener LoggerFactory LoggerFactory Logger Logger slf4j slf4j slf4j slf4j TeeOutputStream NullOutputStream output output commons commons apache apache TimeoutException TimeUnit TimeUnit ThreadFactory Future Executors ExecutorService ExecutionException concurrent concurrent concurrent concurrent concurrent concurrent concurrent Set Set Map List HashSet Arrays util util util util util util util util util util util util OutputStream IOException File ByteArrayOutputStream io io io io io io java java java java java java java java java java java java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import exec exec exec exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org org org org org org org org package ",
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java": "new children final private Cloneable implements ProcessListener ProcessListener ProcessListener extends CompositeProcessListener CompositeProcessListener class public public ProcessExecutor CopyOnWriteArrayList CopyOnWriteArrayList concurrent List List Iterator util util util java java java import import import import listener exec exec zeroturnaround zeroturnaround org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java",
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java",
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java"
        ],
        "changed_java_files_num": 4,
        "commit": "bbd296bc",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps redirectOutputAsInfo redirectOutputAsInfo redirectOutputAsInfo new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get future future start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public ExecuteStreamHandler stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": "    super(\"Unexpected exit value: \" + result.exitValue() + \", allowed exit values: \" + allowedExitValues);\n  public ProcessResult result() {\n    return result.exitValue();\n",
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": "  public int exitValue() {\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "    if (allowedExitValues != null && !allowedExitValues.contains(result.exitValue())) {\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java": "    int exit = new ProcessExecutor().command(\"java\", \"-version\").execute().exitValue();\n    int exit = new ProcessExecutor().commandSplit(\"java -version\").execute().exitValue();\n    int exit = new ProcessExecutor().command(\"java\", \"-version\").start().future().get().exitValue();\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": [
                42,
                49,
                57
            ],
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": [
                46
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                111
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java": [
                46,
                52,
                58
            ]
        },
        "diff_code": "+    super(\"Unexpected exit value: \" + result.getExitValue() + \", allowed exit values: \" + allowedExitValues);\n+  public ProcessResult getResult() {\n+  public int getExitValue() {\n+    return result.getExitValue();\n+  }\n+  public ProcessResult result() {\n+    return getResult();\n+  }\n+    return getExitValue();\n+  public int getExitValue() {\n+  public int exitValue() {\n+    return getExitValue();\n+  }\n+    if (allowedExitValues != null && !allowedExitValues.contains(result.getExitValue())) {\n+    int exit = new ProcessExecutor().command(\"java\", \"-version\").execute().getExitValue();\n+    int exit = new ProcessExecutor().commandSplit(\"java -version\").execute().getExitValue();\n+    int exit = new ProcessExecutor().command(\"java\", \"-version\").start().future().get().getExitValue();\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": [
                42,
                49,
                56,
                57,
                58,
                64,
                65,
                66,
                73
            ],
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": [
                46,
                54,
                55,
                56
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                111
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java": [
                46,
                52,
                58
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": "    super(\"Unexpected exit value: \" + result.getExitValue() + \", allowed exit values: \" + allowedExitValues);\n  public ProcessResult getResult() {\n  public int getExitValue() {\n    return result.getExitValue();\n  }\n  public ProcessResult result() {\n    return getResult();\n  }\n    return getExitValue();\n",
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": "  public int getExitValue() {\n  public int exitValue() {\n    return getExitValue();\n  }\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "    if (allowedExitValues != null && !allowedExitValues.contains(result.getExitValue())) {\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java": "    int exit = new ProcessExecutor().command(\"java\", \"-version\").execute().getExitValue();\n    int exit = new ProcessExecutor().commandSplit(\"java -version\").execute().getExitValue();\n    int exit = new ProcessExecutor().command(\"java\", \"-version\").start().future().get().getExitValue();\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "672e4d74",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": "exitValue int int return return return return getResult getResult this \", allowed exit values: \" getExitValue getExitValue getExitValue getExitValue \"Unexpected exit value: \" super allowedExitValues allowedExitValues Integer result result result result result result result result ProcessResult ProcessResult ProcessResult ProcessResult serialVersionUID long final final static private private RuntimeException extends InvalidExitValueException InvalidExitValueException class public public public public public public Collection Collection util java import exec zeroturnaround org package ",
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": "charset charset getUTF8 outputUTF8 getString getString outputString outputString String String String String getBytes byte \"Process output was not read. To enable output reading please call ProcessExecutor.readOutput(true) before starting the process.\" IllegalStateException new throw null if getOutput getOutput getOutput getOutput getOutput return return return return return return return getExitValue getExitValue this this exitCode exitCode output output output output output output output ProcessOutput ProcessOutput ProcessOutput exitValue exitValue exitValue exitValue int int int int final final private private ProcessResult ProcessResult class public public public public public public public public public exec zeroturnaround org package ",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "checkExit result result result toByteArray new new output output ProcessOutput ProcessOutput closeStreams stop null null null destroy \"Stopping {}...\" if if finally finally \"{} stopped with exit code {}\" debug debug true waitFor false finished finished finished boolean exit exit exit exit int try try InterruptedException throws call return return getProcess this this this this this this this public public public out out out out out out streams streams streams streams streams streams allowedExitValues allowedExitValues allowedExitValues allowedExitValues Integer Integer process process process process process process process process Process Process Process getLogger log log log final final final final final final static private private private private private private ProcessResult ProcessResult ProcessResult ProcessResult implements WaitForProcess WaitForProcess WaitForProcess class class ExecuteStreamHandler ExecuteStreamHandler ExecuteStreamHandler stream ProcessListener ProcessListener ProcessListener listener listener listener listener listener LoggerFactory LoggerFactory Logger Logger slf4j slf4j Callable Callable concurrent Set Set Set util util IOException IOException ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io io java java java java import import import import import import import import exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get future future start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public ExecuteStreamHandler stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java"
        ],
        "changed_java_files_num": 2,
        "commit": "609da425",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps redirectOutputAsInfo redirectOutputAsInfo redirectOutputAsInfo new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get future future start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public ExecuteStreamHandler stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package "
        },
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {},
        "diff_code": "+  public boolean hasOutput() {\n+    return output != null;\n+  }\n+  private static final int MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE = 5000;\n+      if (result.hasOutput()) {\n+        String out = result.getOutput().getString();\n+        if (out.length() <= MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE)\n+          message += \", output was:\\n\" + out.trim();\n+      }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": [
                61,
                62,
                63
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                43,
                118,
                119,
                120,
                121,
                122
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": "  public boolean hasOutput() {\n    return output != null;\n  }\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "  private static final int MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE = 5000;\n      if (result.hasOutput()) {\n        String out = result.getOutput().getString();\n        if (out.length() <= MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE)\n          message += \", output was:\\n\" + out.trim();\n      }\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "4ed161c6",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": "charset charset getUTF8 outputUTF8 getString getString outputString outputString String String String String getBytes byte \"Process output was not read. To enable output reading please call ProcessExecutor.readOutput(true) before starting the process.\" IllegalStateException new throw if getOutput getOutput getOutput getOutput getOutput null null hasOutput boolean return return return return return return return return getExitValue getExitValue this this exitCode exitCode output output output output output output output output ProcessOutput ProcessOutput ProcessOutput exitValue exitValue exitValue exitValue int int int int final final private private ProcessResult ProcessResult class public public public public public public public public public public exec zeroturnaround org package ",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "checkExit result result result toByteArray new new output output ProcessOutput ProcessOutput closeStreams stop null null null destroy \"Stopping {}...\" if if finally finally \"{} stopped with exit code {}\" debug debug true waitFor false finished finished finished boolean exit exit exit exit try try InterruptedException throws call return return getProcess this this this this this this this public public public out out out out out out streams streams streams streams streams streams allowedExitValues allowedExitValues allowedExitValues allowedExitValues Integer Integer process process process process process process process process Process Process Process MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE int int getLogger log log log final final final final final final final static static private private private private private private private ProcessResult ProcessResult ProcessResult ProcessResult implements WaitForProcess WaitForProcess WaitForProcess class class ExecuteStreamHandler ExecuteStreamHandler ExecuteStreamHandler stream ProcessListener ProcessListener ProcessListener listener listener listener listener listener LoggerFactory LoggerFactory Logger Logger slf4j slf4j Callable Callable concurrent Set Set Set util util IOException IOException ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io io java java java java import import import import import import import import exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java"
        ],
        "changed_java_files_num": 1,
        "commit": "352bfced",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorArgsWithExtraSpaceTest": "\" \" getName ArgumentsAsList \"java -cp target/test-classes \" commandSplit new return args args private \"[arg1, arg2, arg3]\" assertEquals outputUTF8 execute true readOutput \"arg1 arg2  arg3\" argumentsAsList argumentsAsList output output String String Exception throws testReadOutputAndError void @ ProcessExecutorArgsWithExtraSpaceTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "ofCaller testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps asInfo asInfo asInfo of of redirectOutput redirectOutput redirectOutput new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public Slf4jStream slf4j ExecuteStreamHandler stream stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "        if (streams != null)\n          streams.stop();\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                110,
                111
            ]
        },
        "diff_code": "+        if (streams != null) {\n+          streams.stop();\n+        }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                111,
                112,
                113
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "        if (streams != null) {\n          streams.stop();\n        }\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorArgsWithExtraSpaceTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "149293db",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "checkExit result result result toByteArray new new output output ProcessOutput ProcessOutput null null null closeStreams \"Stopping {}...\" if if finally finally \"{} stopped with exit code {}\" message message true waitFor false finished finished finished boolean exit exit exit exit try try InterruptedException throws call return return getProcess this this this this this this this this this public public public messageLogger messageLogger messageLogger messageLogger messageLogger messageLogger MessageLogger MessageLogger out out out out out out streams streams streams streams streams streams stopper stopper stopper stopper stopper attributes attributes attributes attributes ProcessAttributes ProcessAttributes process process process process process process process process Process Process Process MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE int int getLogger log log log final final final final final final final final final static static private private private private private private private private private ProcessResult ProcessResult ProcessResult ProcessResult implements WaitForProcess WaitForProcess WaitForProcess class class ExecuteStreamHandler ExecuteStreamHandler ExecuteStreamHandler stream ProcessStopper ProcessStopper ProcessStopper stop stop stop ProcessListener ProcessListener ProcessListener listener listener listener listener listener LoggerFactory LoggerFactory Logger Logger slf4j slf4j Callable Callable concurrent Set util util IOException IOException ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io io java java java java import import import import import import import import import exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorArgsWithExtraSpaceTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java",
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jWarnOutputStream.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java",
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jWarnOutputStream.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java"
        ],
        "changed_java_files_num": 3,
        "commit": "88c09a08",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "ofCaller testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps asInfo asInfo asInfo of of redirectOutput redirectOutput redirectOutput new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get future future start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public ExecuteStreamHandler stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jWarnOutputStream.java": "import org.zeroturnaround.exec.stream.LogOutputStream;\npublic class Slf4jWarnOutputStream extends LogOutputStream {\n  private final Logger log;\n    this.log = logger;\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java": "    executor.redirectOutputAsInfo(fullName);\n    executor.redirectOutputAsInfo(shortName);\n    executor.redirectOutputAsInfo();\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jWarnOutputStream.java": [
                21,
                28,
                30,
                33
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java": [
                35,
                47,
                58
            ]
        },
        "diff_code": "+  private final Logger log;\n+  private Slf4jStream(Logger log) {\n+    this.log = log;\n+  }\n+  public static Slf4jStream of(Logger log) {\n+    return new Slf4jStream(log);\n+  }\n+  public static Slf4jStream of(String name) {\n+    return of(LoggerFactory.getLogger(CallerLoggerUtil.getName(name, 1)));\n+  }\n+  public static Slf4jStream ofCaller() {\n+    return of(LoggerFactory.getLogger(CallerLoggerUtil.getName(null, 1)));\n+  }\n+  public Slf4jOutputStream asTrace() {\n+    return new Slf4jTraceOutputStream(log);\n+  }\n+  public Slf4jOutputStream asDebug() {\n+    return new Slf4jDebugOutputStream(log);\n+  }\n+  public Slf4jOutputStream asInfo() {\n+    return new Slf4jInfoOutputStream(log);\n+  }\n+  public Slf4jOutputStream asWarn() {\n+    return new Slf4jWarnOutputStream(log);\n+  }\n+  public Slf4jOutputStream asError() {\n+    return new Slf4jErrorOutputStream(log);\n+  }\n+    super(logger);\n+    executor.redirectOutput(Slf4jStream.of(fullName).asInfo());\n+    executor.redirectOutput(Slf4jStream.of(shortName).asInfo());\n+    executor.redirectOutput(Slf4jStream.ofCaller().asInfo());\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java": [
                1,
                3,
                4,
                5,
                12,
                14,
                16,
                17,
                18,
                24,
                25,
                26,
                33,
                34,
                35,
                40,
                41,
                42,
                47,
                48,
                49,
                54,
                55,
                56,
                61,
                62,
                63,
                68,
                69,
                70,
                75,
                76,
                77,
                79
            ],
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jWarnOutputStream.java": [
                27,
                30
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java": [
                27,
                36,
                48,
                59
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java": "package org.zeroturnaround.exec.stream.slf4j;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.zeroturnaround.exec.stream.CallerLoggerUtil;\npublic class Slf4jStream {\n  private final Logger log;\n  private Slf4jStream(Logger log) {\n    this.log = log;\n  }\n  public static Slf4jStream of(Logger log) {\n    return new Slf4jStream(log);\n  }\n  public static Slf4jStream of(String name) {\n    return of(LoggerFactory.getLogger(CallerLoggerUtil.getName(name, 1)));\n  }\n  public static Slf4jStream ofCaller() {\n    return of(LoggerFactory.getLogger(CallerLoggerUtil.getName(null, 1)));\n  }\n  public Slf4jOutputStream asTrace() {\n    return new Slf4jTraceOutputStream(log);\n  }\n  public Slf4jOutputStream asDebug() {\n    return new Slf4jDebugOutputStream(log);\n  }\n  public Slf4jOutputStream asInfo() {\n    return new Slf4jInfoOutputStream(log);\n  }\n  public Slf4jOutputStream asWarn() {\n    return new Slf4jWarnOutputStream(log);\n  }\n  public Slf4jOutputStream asError() {\n    return new Slf4jErrorOutputStream(log);\n  }\n}\n",
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jWarnOutputStream.java": "public class Slf4jWarnOutputStream extends Slf4jOutputStream {\n    super(logger);\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java": "import org.zeroturnaround.exec.stream.slf4j.Slf4jStream;\n    executor.redirectOutput(Slf4jStream.of(fullName).asInfo());\n    executor.redirectOutput(Slf4jStream.of(shortName).asInfo());\n    executor.redirectOutput(Slf4jStream.ofCaller().asInfo());\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "d35c36f5",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java": "Slf4jErrorOutputStream asError Slf4jWarnOutputStream asWarn Slf4jInfoOutputStream asInfo Slf4jDebugOutputStream asDebug Slf4jTraceOutputStream asTrace Slf4jOutputStream Slf4jOutputStream Slf4jOutputStream Slf4jOutputStream Slf4jOutputStream null ofCaller getName getName getLogger getLogger name name String new new new new new new return return return return return return return return of of of of static static static this log log log log log log log log log log log final private private Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream class public public public public public public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil LoggerFactory LoggerFactory LoggerFactory Logger Logger Logger Logger import import import slf4j slf4j slf4j stream stream exec exec zeroturnaround zeroturnaround org org org org package ",
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jWarnOutputStream.java": "warn log line line String processLine void protected Override @ super logger logger Slf4jOutputStream extends Slf4jWarnOutputStream Slf4jWarnOutputStream class public public Logger Logger import slf4j slf4j stream exec zeroturnaround org org package ",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java": "ofCaller testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps asInfo asInfo asInfo of of redirectOutput redirectOutput redirectOutput new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessOutput.java",
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessOutput.java",
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java"
        ],
        "changed_java_files_num": 3,
        "commit": "672e4d74",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps redirectOutputAsInfo redirectOutputAsInfo redirectOutputAsInfo new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get future future start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals exitValue exitValue exitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public ExecuteStreamHandler stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": "import java.io.UnsupportedEncodingException;\n  private final byte[] output;\n  public ProcessResult(int exitCode, byte[] output) {\n  public byte[] output() {\n    return new String(output());\n    return outputString(\"UTF-8\");\n    try {\n      return new String(output(), charset);\n    }\n    catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(e.getMessage());\n    }\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "      byte[] output = out == null ? null : out.toByteArray();\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": [
                20,
                38,
                40,
                58,
                71,
                81,
                92,
                93,
                94,
                95,
                96,
                97
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                96
            ]
        },
        "diff_code": "+  private final byte[] data;\n+  public ProcessOutput(byte[] data) {\n+    this.data = data;\n+  }\n+  public byte[] getBytes() {\n+    return data;\n+  }\n+  public String getString() {\n+    return new String(getBytes());\n+  }\n+  public String getUTF8() {\n+    return getString(\"UTF-8\");\n+  }\n+  public String getString(String charset) {\n+    try {\n+      return new String(getBytes(), charset);\n+    }\n+    catch (UnsupportedEncodingException e) {\n+      throw new IllegalStateException(e.getMessage());\n+    }\n+  }\n+  private final ProcessOutput output;\n+  public ProcessResult(int exitCode, ProcessOutput output) {\n+  public ProcessOutput getOutput() {\n+  public byte[] output() {\n+    return getOutput().getBytes();\n+  }\n+    return getOutput().getString();\n+    return getOutput().getUTF8();\n+    return getOutput().getString(charset);\n+      ProcessOutput output = out == null ? null : new ProcessOutput(out.toByteArray());\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessOutput.java": [
                18,
                20,
                28,
                33,
                35,
                36,
                37,
                42,
                43,
                44,
                49,
                50,
                51,
                56,
                57,
                58,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                74
            ],
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": [
                36,
                38,
                56,
                68,
                69,
                70,
                79,
                89,
                100
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                96
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessOutput.java": "package org.zeroturnaround.exec;\nimport java.io.UnsupportedEncodingException;\npublic class ProcessOutput {\n  private final byte[] data;\n  public ProcessOutput(byte[] data) {\n    this.data = data;\n  }\n  public byte[] getBytes() {\n    return data;\n  }\n  public String getString() {\n    return new String(getBytes());\n  }\n  public String getUTF8() {\n    return getString(\"UTF-8\");\n  }\n  public String getString(String charset) {\n    try {\n      return new String(getBytes(), charset);\n    }\n    catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(e.getMessage());\n    }\n  }\n}\n",
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": "  private final ProcessOutput output;\n  public ProcessResult(int exitCode, ProcessOutput output) {\n  public ProcessOutput getOutput() {\n  public byte[] output() {\n    return getOutput().getBytes();\n  }\n    return getOutput().getString();\n    return getOutput().getUTF8();\n    return getOutput().getString(charset);\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "      ProcessOutput output = out == null ? null : new ProcessOutput(out.toByteArray());\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "085022fe",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/ProcessOutput.java": "getMessage IllegalStateException throw e e catch try charset charset \"UTF-8\" getUTF8 new new new getString getString getString String String String String String String return return return return getBytes getBytes getBytes this data data data data data byte byte byte final private ProcessOutput ProcessOutput class public public public public public public UnsupportedEncodingException UnsupportedEncodingException io java import exec zeroturnaround org package ",
            "src/main/java/org/zeroturnaround/exec/ProcessResult.java": "charset charset getUTF8 outputUTF8 getString getString outputString outputString String String String String getBytes byte \"Process output was not read. To enable output reading please call ProcessExecutor.readOutput(true) before starting the process.\" IllegalStateException new throw null if getOutput getOutput getOutput getOutput getOutput return return return return return return this this exitCode exitCode output output output output output output output ProcessOutput ProcessOutput ProcessOutput exitValue exitValue exitValue exitValue int int int final final private private ProcessResult ProcessResult class public public public public public public public public exec zeroturnaround org package ",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "checkExit result result result toByteArray new new output output ProcessOutput ProcessOutput closeStreams stop null null null destroy \"Stopping {}...\" if if finally finally \"{} stopped with exit code {}\" debug debug true waitFor false finished finished finished boolean exit exit exit exit int try try InterruptedException throws call return return getProcess this this this this this this this public public public out out out out out out streams streams streams streams streams streams allowedExitValues allowedExitValues allowedExitValues allowedExitValues Integer Integer process process process process process process process process Process Process Process getLogger log log log final final final final final final static private private private private private private ProcessResult ProcessResult ProcessResult ProcessResult implements WaitForProcess WaitForProcess WaitForProcess class class ExecuteStreamHandler ExecuteStreamHandler ExecuteStreamHandler stream ProcessListener ProcessListener ProcessListener listener listener listener listener listener LoggerFactory LoggerFactory Logger Logger slf4j slf4j Callable Callable concurrent Set Set Set util util IOException IOException ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io io java java java java import import import import import import import import exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2
        }
    },
    {
        "changed_files": [
            ".gitignore",
            "Changelog.txt",
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorTimeoutTest.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorTimeoutTest.java"
        ],
        "changed_java_files_num": 3,
        "commit": "d6766d58",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorArgsWithExtraSpaceTest": "\" \" getName ArgumentsAsList \"java -cp target/test-classes \" commandSplit new return args args private \"[arg1, arg2, arg3]\" assertEquals outputUTF8 execute true readOutput \"arg1 arg2  arg3\" argumentsAsList argumentsAsList output output String String Exception throws testReadOutputAndError void @ ProcessExecutorArgsWithExtraSpaceTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "ofCaller testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps asInfo asInfo asInfo of of redirectOutput redirectOutput redirectOutput new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public Slf4jStream slf4j ExecuteStreamHandler stream stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorTimeoutTest": "try Exception throws testExecuteTimeout void @ ProcessExecutorTimeoutTest class public public WriterLoop shutdown ProcessExecutor Test Test Assert junit junit CoreMatchers hamcrest TimeoutException TimeUnit concurrent concurrent List ArrayList util util util util java java java java import import import import import import import import import test test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "        result = service.submit(task).get(timeout, timeoutUnit);\n        throw e;\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "      ProcessOutput output = out == null ? null : new ProcessOutput(out.toByteArray());\n      sb.append(\", executed command \").append(attributes.getCommand());\n      if (attributes.getDirectory() != null) {\n        sb.append(\" in directory \").append(attributes.getDirectory());\n      }\n      if (!attributes.getEnvironment().isEmpty()) {\n        sb.append(\" with environment \").append(attributes.getEnvironment());\n      }\n      if (result.hasOutput()) {\n        String out = result.getOutput().getString();\n        if (out.length() <= MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE) {\n          sb.append(\", output was:\\n\").append(out.trim());\n        }\n      }\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                937,
                951
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                115,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147
            ]
        },
        "diff_code": "+      long _timeout = timeout;\n+      TimeUnit unit = timeoutUnit;\n+        result = service.submit(task).get(_timeout, unit);\n+        throw newTimeoutException(_timeout, unit, task);\n+  private TimeoutException newTimeoutException(long timeout, TimeUnit unit, WaitForProcess task) {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"Timeout: \").append(timeout).append(\" \").append(unit.toString().toLowerCase());\n+    task.addExceptionMessageSuffix(sb);\n+    return new TimeoutException(sb.toString());\n+  }\n+      ProcessOutput output = getCurrentOutput();\n+  private ProcessOutput getCurrentOutput() {\n+    return out == null ? null : new ProcessOutput(out.toByteArray());\n+  }\n+      addExceptionMessageSuffix(sb, result.hasOutput() ? result.getOutput() : null);\n+  public void addExceptionMessageSuffix(StringBuilder sb) {\n+    addExceptionMessageSuffix(sb, getCurrentOutput());\n+  }\n+  private void addExceptionMessageSuffix(StringBuilder sb, ProcessOutput output) {\n+    sb.append(\", executed command \").append(attributes.getCommand());\n+    if (attributes.getDirectory() != null) {\n+      sb.append(\" in directory \").append(attributes.getDirectory());\n+    }\n+    if (!attributes.getEnvironment().isEmpty()) {\n+      sb.append(\" with environment \").append(attributes.getEnvironment());\n+    }\n+    if (output != null) {\n+      String out = output.getString();\n+      if (out.length() <= MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE) {\n+        sb.append(\", output was:\\n\").append(out.trim());\n+      }\n+    }\n+  }\n+  @Test\n+  public void testExecuteTimeout() throws Exception {\n+    try {\n+      List<String> args = getWriterLoopCommand();\n+      new ProcessExecutor().command(args).timeout(1, TimeUnit.SECONDS).execute();\n+      Assert.fail(\"TimeoutException expected.\");\n+    }\n+    catch (TimeoutException e) {\n+      Assert.assertThat(e.getMessage(), CoreMatchers.containsString(\"1 seconds\"));\n+      Assert.assertThat(e.getMessage(), CoreMatchers.containsString(WriterLoop.class.getName()));\n+    }\n+  }\n+  @Test\n+  public void testStartTimeout() throws Exception {\n+    try {\n+      List<String> args = getWriterLoopCommand();\n+      new ProcessExecutor().command(args).start().getFuture().get(1, TimeUnit.SECONDS);\n+      Assert.fail(\"TimeoutException expected.\");\n+    }\n+    catch (TimeoutException e) {\n+      Assert.assertNull(e.getMessage());\n+    }\n+  }\n+  private List<String> getWriterLoopCommand() {\n+    List<String> args = new ArrayList<String>() {\n+      {\n+        add(\"java\");\n+        add(\"-cp\");\n+        add(\"target/test-classes\");\n+        add(WriterLoop.class.getName());\n+      }\n+    };\n+    return args;\n+  }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                937,
                938,
                940,
                954,
                964,
                965,
                966,
                967,
                968,
                969
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                115,
                126,
                127,
                128,
                139,
                154,
                155,
                156,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorTimeoutTest.java": [
                18,
                20,
                21,
                22,
                23,
                25,
                26,
                27,
                28,
                29,
                32,
                34,
                35,
                36,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                48,
                49,
                50,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                73
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "      long _timeout = timeout;\n      TimeUnit unit = timeoutUnit;\n        result = service.submit(task).get(_timeout, unit);\n        throw newTimeoutException(_timeout, unit, task);\n  private TimeoutException newTimeoutException(long timeout, TimeUnit unit, WaitForProcess task) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"Timeout: \").append(timeout).append(\" \").append(unit.toString().toLowerCase());\n    task.addExceptionMessageSuffix(sb);\n    return new TimeoutException(sb.toString());\n  }\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "      ProcessOutput output = getCurrentOutput();\n  private ProcessOutput getCurrentOutput() {\n    return out == null ? null : new ProcessOutput(out.toByteArray());\n  }\n      addExceptionMessageSuffix(sb, result.hasOutput() ? result.getOutput() : null);\n  public void addExceptionMessageSuffix(StringBuilder sb) {\n    addExceptionMessageSuffix(sb, getCurrentOutput());\n  }\n  private void addExceptionMessageSuffix(StringBuilder sb, ProcessOutput output) {\n    sb.append(\", executed command \").append(attributes.getCommand());\n    if (attributes.getDirectory() != null) {\n      sb.append(\" in directory \").append(attributes.getDirectory());\n    }\n    if (!attributes.getEnvironment().isEmpty()) {\n      sb.append(\" with environment \").append(attributes.getEnvironment());\n    }\n    if (output != null) {\n      String out = output.getString();\n      if (out.length() <= MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE) {\n        sb.append(\", output was:\\n\").append(out.trim());\n      }\n    }\n  }\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorTimeoutTest.java": "package org.zeroturnaround.exec.test;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.zeroturnaround.exec.ProcessExecutor;\nimport org.zeroturnaround.exec.test.shutdown.WriterLoop;\npublic class ProcessExecutorTimeoutTest {\n  @Test\n  public void testExecuteTimeout() throws Exception {\n    try {\n      List<String> args = getWriterLoopCommand();\n      new ProcessExecutor().command(args).timeout(1, TimeUnit.SECONDS).execute();\n      Assert.fail(\"TimeoutException expected.\");\n    }\n    catch (TimeoutException e) {\n      Assert.assertThat(e.getMessage(), CoreMatchers.containsString(\"1 seconds\"));\n      Assert.assertThat(e.getMessage(), CoreMatchers.containsString(WriterLoop.class.getName()));\n    }\n  }\n  @Test\n  public void testStartTimeout() throws Exception {\n    try {\n      List<String> args = getWriterLoopCommand();\n      new ProcessExecutor().command(args).start().getFuture().get(1, TimeUnit.SECONDS);\n      Assert.fail(\"TimeoutException expected.\");\n    }\n    catch (TimeoutException e) {\n      Assert.assertNull(e.getMessage());\n    }\n  }\n  private List<String> getWriterLoopCommand() {\n    List<String> args = new ArrayList<String>() {\n      {\n        add(\"java\");\n        add(\"-cp\");\n        add(\"target/test-classes\");\n        add(WriterLoop.class.getName());\n      }\n    };\n    return args;\n  }\n}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorTimeoutTest",
            "ProcessExecutorArgsWithExtraSpaceTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "d964c0a9",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "DEBUG MessageLoggers messageLogger MessageLogger listeners readOutput streams stopper timeoutUnit timeout Long allowedExitValues environment String String String String new new new builder ProcessBuilder ProcessBuilder true DEFAULT_REDIRECT_ERROR_STREAM boolean boolean NORMAL_EXIT_VALUE null DEFAULT_EXIT_VALUES Integer Integer Integer getLogger log final final final final final final final static static static static private private private private private private private private private private private private ProcessExecutor ProcessExecutor class class public public public Slf4jStream Slf4jInfoOutputStream Slf4jDebugOutputStream PumpStreamHandler ExecuteStreamHandler ExecuteStreamHandler CallerLoggerUtil stream stream stream stream stream stream ProcessStopper ProcessStopper NopProcessStopper DestroyProcessStopper stop stop stop ShutdownHookProcessDestroyer ProcessListener ProcessDestroyer DestroyerListenerAdapter CompositeProcessListener CompositeProcessListener CompositeProcessListener listener listener listener listener listener LoggerFactory LoggerFactory Logger Logger slf4j slf4j slf4j slf4j slf4j TeeOutputStream NullOutputStream output output commons commons apache apache TimeoutException TimeUnit TimeUnit ThreadFactory Future Executors ExecutorService ExecutionException concurrent concurrent concurrent concurrent concurrent concurrent concurrent Set Set Entry Map Map Map List LinkedHashMap LinkedHashMap HashSet Arrays ArrayList util util util util util util util util util util util util util util util OutputStream InputStream IOException File ByteArrayOutputStream io io io io io io io java java java java java java java java java java java java java java java java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org org org org org org org org org org org org package ",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "checkExit new result result result getCurrentOutput output output ProcessOutput closeStreams null \"Stopping {}...\" if if finally finally \"{} stopped with exit code {}\" message message true waitFor false finished finished finished boolean exit exit exit exit try try InterruptedException throws call return return getProcess this this this this this this this this this public public public messageLogger messageLogger messageLogger messageLogger messageLogger messageLogger MessageLogger MessageLogger out out out out streams streams streams streams streams streams stopper stopper stopper stopper stopper attributes attributes attributes attributes ProcessAttributes ProcessAttributes process process process process process process process process Process Process Process MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE int int getLogger log log log final final final final final final final final final static static private private private private private private private private private ProcessResult ProcessResult ProcessResult ProcessResult implements WaitForProcess WaitForProcess WaitForProcess class class ExecuteStreamHandler ExecuteStreamHandler ExecuteStreamHandler stream ProcessStopper ProcessStopper ProcessStopper stop stop stop ProcessListener ProcessListener ProcessListener listener listener listener listener listener LoggerFactory LoggerFactory Logger Logger slf4j slf4j Callable Callable concurrent Set util util IOException IOException ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io io java java java java import import import import import import import import import exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorTimeoutTest.java": "try Exception throws testExecuteTimeout void @ ProcessExecutorTimeoutTest class public public WriterLoop shutdown ProcessExecutor Test Test Assert junit junit CoreMatchers hamcrest TimeoutException TimeUnit concurrent concurrent List ArrayList util util util util java java java java import import import import import import import import import test test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorArgsWithExtraSpaceTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2,
            "ProcessExecutorTimeoutTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java"
        ],
        "changed_java_files_num": 2,
        "commit": "a47b4c42",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorArgsWithExtraSpaceTest": "\" \" getName ArgumentsAsList \"java -cp target/test-classes \" commandSplit new return args args private \"[arg1, arg2, arg3]\" assertEquals outputUTF8 execute true readOutput \"arg1 arg2  arg3\" argumentsAsList argumentsAsList output output String String Exception throws testReadOutputAndError void @ ProcessExecutorArgsWithExtraSpaceTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "getLogger assertEquals instanceof \"Slf4jInfoOutputStream expected\" assertTrue getOut out out out pumps pumps pumps asInfo redirectOutput new executor executor executor private ofCaller testMyClassName testClassNameWithShortName \".\" \".\" getName getName getName getName getClass getClass getClass getClass \"MyLogger\" \"MyLogger\" shortName shortName shortName shortName shortName shortName testShortName of of of testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName String String String String String String String Exception Exception Exception Exception throws throws throws throws testFullName void void void void void @ @ @ @ ProcessExecutorLoggerTest class public public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler stream stream stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Assert Assert Assert junit junit OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public Slf4jStream slf4j ExecuteStreamHandler stream stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorTimeoutTest": "try Exception throws testExecuteTimeout void @ ProcessExecutorTimeoutTest class public public ProcessExecutor Test Test Assert junit junit CoreMatchers hamcrest TimeoutException TimeUnit concurrent concurrent List ArrayList util util util util java java java java import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package "
        },
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {},
        "diff_code": "+  public static Slf4jStream of(Class<?> klass, String name) {\n+    if (name == null) {\n+      return of(klass);\n+    } else {\n+      return of(LoggerFactory.getLogger(klass.getName() + \".\" + name));\n+    }\n+  }\n+  @Test\n+  public void testClassNameWithShortName() throws Exception {\n+    String shortName = \"MyLogger\";\n+    String fullName = getClass().getName() + \".\" + shortName;\n+    testSlf4jLoggerName(fullName, Slf4jStream.of(getClass(), shortName));\n+  }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java": [
                62,
                63,
                64,
                65,
                66,
                67,
                68
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java": [
                45,
                46,
                47,
                48,
                49,
                50
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java": "  public static Slf4jStream of(Class<?> klass, String name) {\n    if (name == null) {\n      return of(klass);\n    } else {\n      return of(LoggerFactory.getLogger(klass.getName() + \".\" + name));\n    }\n  }\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java": "  @Test\n  public void testClassNameWithShortName() throws Exception {\n    String shortName = \"MyLogger\";\n    String fullName = getClass().getName() + \".\" + shortName;\n    testSlf4jLoggerName(fullName, Slf4jStream.of(getClass(), shortName));\n  }\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorTimeoutTest",
            "ProcessExecutorArgsWithExtraSpaceTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "40835492",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/stream/slf4j/Slf4jStream.java": "Slf4jErrorOutputStream asError Slf4jWarnOutputStream asWarn Slf4jInfoOutputStream asInfo Slf4jDebugOutputStream asDebug Slf4jTraceOutputStream asTrace Slf4jOutputStream Slf4jOutputStream Slf4jOutputStream Slf4jOutputStream Slf4jOutputStream ofCaller \".\" getName getName getName else null null if name name name name name String String getLogger getLogger getLogger getLogger klass klass klass klass klass Class Class new new new new new new return return return return return return return return return return return of of of of of of of of of static static static static static this log log log log log log log log log log log final private private Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream class public public public public public public public public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil LoggerFactory LoggerFactory LoggerFactory LoggerFactory LoggerFactory Logger Logger Logger Logger import import import slf4j slf4j slf4j stream stream exec exec zeroturnaround zeroturnaround org org org org package ",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java": "getLogger assertEquals instanceof \"Slf4jInfoOutputStream expected\" assertTrue getOut out out out pumps pumps pumps asInfo redirectOutput new executor executor executor private ofCaller testMyClassName testClassNameWithShortName \".\" \".\" getName getName getName getName getClass getClass getClass getClass \"MyLogger\" \"MyLogger\" shortName shortName shortName shortName shortName shortName testShortName of of of testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName String String String String String String String Exception Exception Exception Exception throws throws throws throws testFullName void void void void void @ @ @ @ ProcessExecutorLoggerTest class public public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler stream stream stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Assert Assert Assert junit junit OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorArgsWithExtraSpaceTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 4,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2,
            "ProcessExecutorTimeoutTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java"
        ],
        "changed_java_files_num": 1,
        "commit": "f567d41a",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorArgsWithExtraSpaceTest": "\" \" getName ArgumentsAsList \"java -cp target/test-classes \" commandSplit new return args args private \"[arg1, arg2, arg3]\" assertEquals outputUTF8 execute true readOutput \"arg1 arg2  arg3\" argumentsAsList argumentsAsList output output String String Exception throws testReadOutputAndError void @ ProcessExecutorArgsWithExtraSpaceTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "ofCaller testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps asInfo asInfo asInfo of of redirectOutput redirectOutput redirectOutput new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public Slf4jStream slf4j ExecuteStreamHandler stream stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorTimeoutTest": "try Exception throws testExecuteTimeout void @ ProcessExecutorTimeoutTest class public public ProcessExecutor Test Test Assert junit junit CoreMatchers hamcrest TimeoutException TimeUnit concurrent concurrent List ArrayList util util util util java java java java import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": "      }        } \n    if (inputThread != null) {\n      log.trace(\"Joining input thread {}...\", inputThread);\n      try {\n        inputThread.join();\n        inputThread = null;\n      } catch (InterruptedException e) {\n      }\n    }\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": [
                156,
                210,
                211,
                212,
                213,
                214,
                215,
                217,
                218
            ]
        },
        "diff_code": "+      }        }\n+    if (inputThread != null) {\n+      log.trace(\"Joining input thread {}...\", inputThread);\n+      try {\n+        inputThread.join();\n+        inputThread = null;\n+      } catch (InterruptedException e) {\n+      }\n+    }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": [
                156,
                190,
                191,
                192,
                193,
                194,
                195,
                197,
                198
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": "      }        }\n    if (inputThread != null) {\n      log.trace(\"Joining input thread {}...\", inputThread);\n      try {\n        inputThread.join();\n        inputThread = null;\n      } catch (InterruptedException e) {\n      }\n    }\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorTimeoutTest",
            "ProcessExecutorArgsWithExtraSpaceTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "7a7a4b55",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": "InterruptedException join \"Joining input thread {}...\" trace stopProcessing stop start start start start \"Got exception while closing output stream\" info e e e catch catch close try try true createPump else else createSystemInPump in os os os os setProcessInputStream createProcessErrorPump setProcessErrorStream createProcessOutputPump if if if if if if if if if is is is is setProcessOutputStream void void void void void null null null null null null null null null null outAndErr outAndErr outAndErr System System System this this this this this this inputStreamPumper inputStreamPumper inputStreamPumper InputStreamPumper input input input input input input input input err err err err err err err err err out out out out out out out out out inputThread inputThread inputThread inputThread inputThread inputThread inputThread inputThread inputThread errorThread errorThread errorThread outputThread outputThread outputThread Thread Thread Thread getLogger log log log final final final final final final final final final final final final final static private private private private private private private private ExecuteStreamHandler implements PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler class class public public public public public public public public public public LoggerFactory LoggerFactory Logger Logger slf4j slf4j OutputStream OutputStream OutputStream OutputStream OutputStream OutputStream OutputStream OutputStream OutputStream InputStream InputStream InputStream InputStream InputStream IOException IOException io io io java java java import import import import import stream exec zeroturnaround org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorArgsWithExtraSpaceTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2,
            "ProcessExecutorTimeoutTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java"
        ],
        "changed_java_files_num": 2,
        "commit": "2f84940f",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorArgsWithExtraSpaceTest": "\" \" getName ArgumentsAsList \"java -cp target/test-classes \" commandSplit new return args args private \"[arg1, arg2, arg3]\" assertEquals outputUTF8 execute true readOutput \"arg1 arg2  arg3\" argumentsAsList argumentsAsList output output String String Exception throws testReadOutputAndError void @ ProcessExecutorArgsWithExtraSpaceTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "getLogger assertEquals instanceof \"Slf4jInfoOutputStream expected\" assertTrue getOut out out out pumps pumps pumps asInfo redirectOutput new executor executor executor private ofCaller testMyClassName testClassNameWithShortName \".\" \".\" getName getName getName getName getClass getClass getClass getClass \"MyLogger\" \"MyLogger\" shortName shortName shortName shortName shortName shortName testShortName of of of testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName String String String String String String String Exception Exception Exception Exception throws throws throws throws testFullName void void void void void @ @ @ @ ProcessExecutorLoggerTest class public public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler stream stream stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Assert Assert Assert junit junit OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture asList iterable iterable String String String String Iterable testJavaVersionIterable \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit exit exit int int int int testJavaVersion \"unknown command\" command command command command command command command testNoSuchFile execute execute execute execute execute execute execute execute new new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public public Slf4jStream slf4j ExecuteStreamHandler stream stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List Arrays Arrays ArrayList util util util IOException IOException File io io java java java java java import import import import import import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorTimeoutTest": "try Exception throws testExecuteTimeout void @ ProcessExecutorTimeoutTest class public public ProcessExecutor Test Test Assert junit junit CoreMatchers hamcrest TimeoutException TimeUnit concurrent concurrent List ArrayList util util util util java java java java import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package "
        },
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {},
        "diff_code": "+  public ProcessExecutor(Iterable<String> command) {\n+    command(command);\n+  }\n+  public ProcessExecutor command(Iterable<String> command) {\n+    List<String> list = new ArrayList<String>();\n+    Iterator<String> it = command.iterator();\n+    while (it.hasNext()) {\n+      list.add(it.next());\n+    }\n+    return command(list);\n+  }\n+  @Test\n+  public void testJavaVersionIterable() throws Exception {\n+    Iterable<String> iterable = Arrays.asList(\"java\", \"-version\");\n+    int exit = new ProcessExecutor().command(iterable).execute().getExitValue();\n+    Assert.assertEquals(0, exit);\n+  }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                28,
                192,
                193,
                194,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java": [
                23,
                59,
                60,
                61,
                62,
                63,
                64
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "import java.util.Iterator;\n  public ProcessExecutor(Iterable<String> command) {\n    command(command);\n  }\n  public ProcessExecutor command(Iterable<String> command) {\n    List<String> list = new ArrayList<String>();\n    Iterator<String> it = command.iterator();\n    while (it.hasNext()) {\n      list.add(it.next());\n    }\n    return command(list);\n  }\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java": "import java.util.Arrays;\n  @Test\n  public void testJavaVersionIterable() throws Exception {\n    Iterable<String> iterable = Arrays.asList(\"java\", \"-version\");\n    int exit = new ProcessExecutor().command(iterable).execute().getExitValue();\n    Assert.assertEquals(0, exit);\n  }\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorTimeoutTest",
            "ProcessExecutorArgsWithExtraSpaceTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "bf0286d4",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "DEBUG MessageLoggers messageLogger MessageLogger listeners readOutput closeTimeoutUnit closeTimeout streams stopper timeoutUnit timeout Long Long allowedExitValues environment String String String String new new new builder ProcessBuilder ProcessBuilder true DEFAULT_REDIRECT_ERROR_STREAM boolean boolean NORMAL_EXIT_VALUE null DEFAULT_EXIT_VALUES Integer Integer Integer getLogger log final final final final final final final static static static static private private private private private private private private private private private private private private ProcessExecutor ProcessExecutor class class public public public Slf4jStream Slf4jInfoOutputStream Slf4jDebugOutputStream PumpStreamHandler ExecuteStreamHandler ExecuteStreamHandler CallerLoggerUtil stream stream stream stream stream stream ProcessStopper ProcessStopper NopProcessStopper DestroyProcessStopper stop stop stop ShutdownHookProcessDestroyer ProcessListener ProcessDestroyer DestroyerListenerAdapter CompositeProcessListener CompositeProcessListener CompositeProcessListener listener listener listener listener listener TimeoutProcessCloser StandardProcessCloser ProcessCloser close close close LoggerFactory LoggerFactory Logger Logger slf4j slf4j slf4j slf4j slf4j TeeOutputStream NullOutputStream output output commons commons apache apache TimeoutException TimeUnit TimeUnit TimeUnit ThreadFactory Future Executors ExecutorService ExecutionException concurrent concurrent concurrent concurrent concurrent concurrent concurrent Set Set Entry Map Map Map List LinkedHashMap LinkedHashMap Iterator HashSet Arrays ArrayList util util util util util util util util util util util util util util util util OutputStream InputStream IOException File ByteArrayOutputStream io io io io io io io java java java java java java java java java java java java java java java java java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org org org org org org org org org org org org org org org package ",
            "src/test/java/org/zeroturnaround/exec/test/ProcessExecutorMainTest.java": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture asList iterable iterable String String String String Iterable testJavaVersionIterable \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit exit exit int int int int testJavaVersion \"unknown command\" command command command command command command command testNoSuchFile execute execute execute execute execute execute execute execute new new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public public Slf4jStream slf4j ExecuteStreamHandler stream stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List Arrays Arrays ArrayList util util util IOException IOException File io io java java java java java import import import import import import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorArgsWithExtraSpaceTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 4,
            "ProcessExecutorMainTest": 18,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2,
            "ProcessExecutorTimeoutTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/ProcessInitException.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessInitExceptionTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/ProcessInitException.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessInitExceptionTest.java"
        ],
        "changed_java_files_num": 3,
        "commit": "b4d4794a",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorArgsWithExtraSpaceTest": "\" \" getName ArgumentsAsList \"java -cp target/test-classes \" commandSplit new return args args private \"[arg1, arg2, arg3]\" assertEquals outputUTF8 execute true readOutput \"arg1 arg2  arg3\" argumentsAsList argumentsAsList output output String String Exception throws testReadOutputAndError void @ ProcessExecutorArgsWithExtraSpaceTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "getLogger assertEquals instanceof \"Slf4jInfoOutputStream expected\" assertTrue getOut out out out pumps pumps pumps asInfo redirectOutput new executor executor executor private ofCaller testMyClassName testClassNameWithShortName \".\" \".\" getName getName getName getName getClass getClass getClass getClass \"MyLogger\" \"MyLogger\" shortName shortName shortName shortName shortName shortName testShortName of of of testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName String String String String String String String Exception Exception Exception Exception throws throws throws throws testFullName void void void void void @ @ @ @ ProcessExecutorLoggerTest class public public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler stream stream stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Assert Assert Assert junit junit OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture asList iterable iterable String String String String Iterable testJavaVersionIterable \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit exit exit int int int int testJavaVersion \"unknown command\" command command command command command command command testNoSuchFile execute execute execute execute execute execute execute execute new new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public public Slf4jStream slf4j ExecuteStreamHandler stream stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List Arrays Arrays ArrayList util util util IOException IOException File io io java java java java java import import import import import import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorTimeoutTest": "try Exception throws testExecuteTimeout void @ ProcessExecutorTimeoutTest class public public ProcessExecutor Test Test Assert junit junit CoreMatchers hamcrest TimeoutException TimeUnit concurrent concurrent List ArrayList util util util util java java java java import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessInitExceptionTest": "getErrorCode getMessage \"Could not run test. Error=12, Cannot allocate memory\" assertEquals assertEquals assertNotNull \"java.io.IOException: Cannot run program \\\"ls\\\": java.io.IOException: error=12, Cannot allocate memory\" \"Could not run test.\" e e e e testSimple \"\" testEmpty new new new null null newInstance newInstance newInstance assertNull assertNull Exception Exception Exception throws throws throws testNull void void void @ @ @ ProcessInitExceptionTest class public public public public ProcessInitException ProcessInitException ProcessInitException ProcessInitException ProcessInitException Test Test Test Test Assert Assert Assert Assert Assert Assert junit junit IOException IOException IOException IOException io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessListenerSuccessTest": "afterStop afterFinish afterStart this this this this this this this this this this this this this this this this this this assertNull assertNull assertNull assertNull assertNull assertNull beforeStart Override Override Override Override Process Process Process Process extends static process process process process process process process process process process process process process process process process process process executor executor executor executor executor executor executor executor executor executor executor executor executor executor assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertEquals assertEquals assertEquals assertEquals assertEquals getExitValue exit exit int execute addListener \"-version\" \"java\" result result result result result result result result result result result result result result new new ProcessListenerImpl ProcessListenerImpl ProcessListenerImpl Exception throws testJavaVersion void void void void void @ @ @ @ @ ProcessListenerSuccessTest class class public public public public public public ProcessListener ProcessListener listener listener listener listener listener listener listener ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessListenerThrowTest": "\"Test\" throw \"java version\" contains getString getOutput if super result result result result process process Process afterFinish afterFinish Override extends static private MINUTES timeout testJavaVersionWithTimeout execute execute ProcessListenerThrowImpl ProcessListenerThrowImpl ProcessListenerThrowImpl addListener addListener true true readOutput readOutput \"-version\" \"-version\" \"java\" \"java\" new new new new new Exception Exception throws throws testJavaVersion void void void expected expected @ @ @ ProcessListenerThrowTest class class class class public public public public ProcessListenerImpl ProcessListenerImpl ProcessListenerSuccessTest ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor InvalidOutputException InvalidOutputException InvalidOutputException InvalidOutputException Test Test Test junit TimeUnit TimeUnit concurrent util java import import import import import import test test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessOutputTest": "\"foo\\n\" testNewLineAtTheEnd \"foo\\n\\nbar\" testTwoNewLines \"foo\\r\\nbar\" testCarriageReturnAndNewLine \"foo\\rbar\" testCarriageReturn \"foo\\nbar\" \"bar\" \"bar\" \"bar\" \"bar\" testNewLine \"foo\" \"foo\" \"foo\" \"foo\" \"foo\" \"foo\" \"foo\" asList asList asList asList asList asList assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals testSimple null getLinesFrom getLinesFrom getLinesFrom getLinesFrom getLinesFrom getLinesFrom getLinesFrom ProcessOutput ProcessOutput ProcessOutput ProcessOutput ProcessOutput ProcessOutput ProcessOutput testNull void void void void void void void NullPointerException expected @ @ @ @ @ @ @ ProcessOutputTest class class public public public public public public public public Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit Arrays Arrays Arrays Arrays Arrays Arrays Arrays util java import import import exec zeroturnaround org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "        throw new IOException(getExecutingErrorMessage(), e);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                936
            ]
        },
        "diff_code": "+        String message = getExecutingErrorMessage();\n+        ProcessInitException p = ProcessInitException.newInstance(message, e);\n+        if (p != null) {\n+          throw p;\n+        }\n+        throw new IOException(message, e);\n+  private static final String BEFORE_CODE = \": error=\";\n+  private static final String AFTER_CODE = \", \";\n+  private static final String NEW_INFIX = \" Error=\";\n+  private final int errorCode;\n+  public ProcessInitException(String message, Throwable cause, int errorCode) {\n+    super(message, cause);\n+    this.errorCode = errorCode;\n+  }\n+  public int getErrorCode() {\n+    return errorCode;\n+  }\n+  public static ProcessInitException newInstance(String prefix, IOException e) {\n+    String m = e.getMessage();\n+    if (m == null) {\n+      return null;\n+    }\n+    int i = m.lastIndexOf(BEFORE_CODE);\n+    if (i == -1) {\n+      return null;\n+    }\n+    int j = m.indexOf(AFTER_CODE, i);\n+    if (i == -1) {\n+      return null;\n+    }\n+    int code;\n+    try {\n+      code = Integer.parseInt(m.substring(i + BEFORE_CODE.length(), j));\n+    }\n+    catch (NumberFormatException n) {\n+      return null;\n+    }\n+    return new ProcessInitException(prefix + NEW_INFIX + m.substring(i + BEFORE_CODE.length()), e, code);\n+  }\n+  @Test\n+  public void testNull() throws Exception {\n+    Assert.assertNull(ProcessInitException.newInstance(null, new IOException()));\n+  }\n+  @Test\n+  public void testEmpty() throws Exception {\n+    Assert.assertNull(ProcessInitException.newInstance(null, new IOException(\"\")));\n+  }\n+  @Test\n+  public void testSimple() throws Exception {\n+    ProcessInitException e = ProcessInitException.newInstance(\n+        \"Could not run test.\", new IOException(\"java.io.IOException: Cannot run program \\\"ls\\\": java.io.IOException: error=12, Cannot allocate memory\"));\n+    Assert.assertNotNull(e);\n+    Assert.assertEquals(\"Could not run test. Error=12, Cannot allocate memory\", e.getMessage());\n+    Assert.assertEquals(12, e.getErrorCode());\n+  }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                936,
                937,
                938,
                939,
                940,
                941
            ],
            "src/main/java/org/zeroturnaround/exec/ProcessInitException.java": [
                18,
                20,
                33,
                35,
                36,
                37,
                39,
                41,
                42,
                43,
                44,
                49,
                50,
                51,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                84
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessInitExceptionTest.java": [
                18,
                20,
                22,
                23,
                24,
                26,
                28,
                29,
                30,
                31,
                33,
                34,
                35,
                36,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                47
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "        String message = getExecutingErrorMessage();\n        ProcessInitException p = ProcessInitException.newInstance(message, e);\n        if (p != null) {\n          throw p;\n        }\n        throw new IOException(message, e);\n",
            "src/main/java/org/zeroturnaround/exec/ProcessInitException.java": "package org.zeroturnaround.exec;\nimport java.io.IOException;\npublic class ProcessInitException extends IOException {\n  private static final String BEFORE_CODE = \": error=\";\n  private static final String AFTER_CODE = \", \";\n  private static final String NEW_INFIX = \" Error=\";\n  private final int errorCode;\n  public ProcessInitException(String message, Throwable cause, int errorCode) {\n    super(message, cause);\n    this.errorCode = errorCode;\n  }\n  public int getErrorCode() {\n    return errorCode;\n  }\n  public static ProcessInitException newInstance(String prefix, IOException e) {\n    String m = e.getMessage();\n    if (m == null) {\n      return null;\n    }\n    int i = m.lastIndexOf(BEFORE_CODE);\n    if (i == -1) {\n      return null;\n    }\n    int j = m.indexOf(AFTER_CODE, i);\n    if (i == -1) {\n      return null;\n    }\n    int code;\n    try {\n      code = Integer.parseInt(m.substring(i + BEFORE_CODE.length(), j));\n    }\n    catch (NumberFormatException n) {\n      return null;\n    }\n    return new ProcessInitException(prefix + NEW_INFIX + m.substring(i + BEFORE_CODE.length()), e, code);\n  }\n}\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessInitExceptionTest.java": "package org.zeroturnaround.exec.test;\nimport java.io.IOException;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.zeroturnaround.exec.ProcessInitException;\npublic class ProcessInitExceptionTest {\n  @Test\n  public void testNull() throws Exception {\n    Assert.assertNull(ProcessInitException.newInstance(null, new IOException()));\n  }\n  @Test\n  public void testEmpty() throws Exception {\n    Assert.assertNull(ProcessInitException.newInstance(null, new IOException(\"\")));\n  }\n  @Test\n  public void testSimple() throws Exception {\n    ProcessInitException e = ProcessInitException.newInstance(\n        \"Could not run test.\", new IOException(\"java.io.IOException: Cannot run program \\\"ls\\\": java.io.IOException: error=12, Cannot allocate memory\"));\n    Assert.assertNotNull(e);\n    Assert.assertEquals(\"Could not run test. Error=12, Cannot allocate memory\", e.getMessage());\n    Assert.assertEquals(12, e.getErrorCode());\n  }\n}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorTimeoutTest",
            "ProcessListenerThrowTest",
            "ProcessExecutorArgsWithExtraSpaceTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessListenerSuccessTest",
            "ProcessInitExceptionTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessOutputTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "305172ea",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "DEBUG MessageLoggers messageLogger MessageLogger listeners readOutput closeTimeoutUnit closeTimeout streams stopper timeoutUnit timeout Long Long allowedExitValues environment String String String String new new new builder ProcessBuilder ProcessBuilder true DEFAULT_REDIRECT_ERROR_STREAM boolean boolean NORMAL_EXIT_VALUE null DEFAULT_EXIT_VALUES Integer Integer Integer getLogger log final final final final final final final static static static static private private private private private private private private private private private private private private ProcessExecutor ProcessExecutor class class public public public Slf4jStream Slf4jInfoOutputStream Slf4jDebugOutputStream PumpStreamHandler ExecuteStreamHandler ExecuteStreamHandler CallerLoggerUtil stream stream stream stream stream stream ProcessStopper ProcessStopper NopProcessStopper DestroyProcessStopper stop stop stop ShutdownHookProcessDestroyer ProcessListener ProcessDestroyer DestroyerListenerAdapter CompositeProcessListener CompositeProcessListener CompositeProcessListener listener listener listener listener listener TimeoutProcessCloser StandardProcessCloser ProcessCloser close close close LoggerFactory LoggerFactory Logger Logger slf4j slf4j slf4j slf4j slf4j TeeOutputStream NullOutputStream output output commons commons apache apache TimeoutException TimeUnit TimeUnit TimeUnit ThreadFactory Future Executors ExecutorService ExecutionException concurrent concurrent concurrent concurrent concurrent concurrent concurrent Set Set Entry Map Map Map List LinkedHashMap LinkedHashMap Iterator HashSet Arrays ArrayList util util util util util util util util util util util util util util util util OutputStream InputStream IOException File ByteArrayOutputStream io io io io io io io java java java java java java java java java java java java java java java java java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org org org org org org org org org org org org org org org package ",
            "src/main/java/org/zeroturnaround/exec/ProcessInitException.java": "new n NumberFormatException catch length length substring substring parseInt Integer try code code code indexOf j j lastIndexOf i i i i i i null null null null null if if if getMessage m m m m m m e e e prefix prefix newInstance return return return return return return getErrorCode this super cause cause Throwable message message errorCode errorCode errorCode errorCode errorCode int int int int int int \" Error=\" NEW_INFIX NEW_INFIX \", \" AFTER_CODE AFTER_CODE \": error=\" BEFORE_CODE BEFORE_CODE BEFORE_CODE BEFORE_CODE String String String String String String final final final final static static static static private private private private extends ProcessInitException ProcessInitException ProcessInitException ProcessInitException class public public public public IOException IOException IOException io java import exec zeroturnaround org package ",
            "src/test/java/org/zeroturnaround/exec/test/ProcessInitExceptionTest.java": "getErrorCode getMessage \"Could not run test. Error=12, Cannot allocate memory\" assertEquals assertEquals assertNotNull \"java.io.IOException: Cannot run program \\\"ls\\\": java.io.IOException: error=12, Cannot allocate memory\" \"Could not run test.\" e e e e testSimple \"\" testEmpty new new new null null newInstance newInstance newInstance assertNull assertNull Exception Exception Exception throws throws throws testNull void void void @ @ @ ProcessInitExceptionTest class public public public public ProcessInitException ProcessInitException ProcessInitException ProcessInitException ProcessInitException Test Test Test Test Assert Assert Assert Assert Assert Assert junit junit IOException IOException IOException IOException io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorArgsWithExtraSpaceTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 4,
            "ProcessExecutorMainTest": 18,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2,
            "ProcessExecutorTimeoutTest": 2,
            "ProcessInitExceptionTest": 3,
            "ProcessListenerSuccessTest": 1,
            "ProcessListenerThrowTest": 2,
            "ProcessOutputTest": 7
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessAttributes.java",
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessAttributes.java",
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java"
        ],
        "changed_java_files_num": 3,
        "commit": "b2c77ff8",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorArgsWithExtraSpaceTest": "\" \" getName ArgumentsAsList \"java -cp target/test-classes \" commandSplit new return args args private \"[arg1, arg2, arg3]\" assertEquals outputUTF8 execute true readOutput \"arg1 arg2  arg3\" argumentsAsList argumentsAsList output output String String Exception throws testReadOutputAndError void @ ProcessExecutorArgsWithExtraSpaceTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "ofCaller testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps asInfo asInfo asInfo of of redirectOutput redirectOutput redirectOutput new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public ExecuteStreamHandler stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "      return startInternal(process, redirectOutputAlsoTo(pumps, out), out);\n      return startInternal(process, streams, null);\n    result += \"...\";\n  private WaitForProcess startInternal(Process process, ExecuteStreamHandler streams, ByteArrayOutputStream out) throws IOException {\n    Set<Integer> exitValues = allowedExitValues == null ? null : new HashSet<Integer>(allowedExitValues);\n    WaitForProcess result = new WaitForProcess(process, exitValues, streams, out, listeners.clone(), messageLogger);\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "  private final Set<Integer> allowedExitValues;\n  public WaitForProcess(Process process, Set<Integer> allowedExitValues, ExecuteStreamHandler streams, ByteArrayOutputStream out, ProcessListener listener, MessageLogger messageLogger) {\n    this.allowedExitValues = allowedExitValues;\n      String message = \"Unexpected exit value: \" + result.getExitValue() + \", allowed exit values: \" + allowedExitValues;\n        if (out.length() <= MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE)\n          message += \", output was:\\n\" + out.trim();\n      throw new InvalidExitValueException(message, result);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                841,
                844,
                856,
                860,
                874,
                875
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                50,
                72,
                74,
                123,
                126,
                127,
                129
            ]
        },
        "diff_code": "+  private final List<String> command;\n+  private final File directory;\n+  private final Map<String,String> environment;\n+  private final Set<Integer> allowedExitValues;\n+  public ProcessAttributes(List<String> command, File directory, Map<String, String> environment, Set<Integer> allowedExitValues) {\n+    this.command = command;\n+    this.directory = directory;\n+    this.environment = environment;\n+    this.allowedExitValues = allowedExitValues;\n+  }\n+  public List<String> getCommand() {\n+    return command;\n+  }\n+  public File getDirectory() {\n+    return directory;\n+  }\n+  public Map<String, String> getEnvironment() {\n+    return environment;\n+  }\n+  public Set<Integer> getAllowedExitValues() {\n+    return allowedExitValues;\n+  }\n+    ProcessAttributes attributes = new ProcessAttributes(\n+        new ArrayList<String>(builder.command()),\n+        builder.directory(),\n+        new LinkedHashMap<String, String>(environment),\n+        allowedExitValues == null ? null : new HashSet<Integer>(allowedExitValues));\n+      return startInternal(process, attributes, redirectOutputAlsoTo(pumps, out), out);\n+      return startInternal(process, attributes, streams, null);\n+    result += \".\";\n+  private WaitForProcess startInternal(Process process, ProcessAttributes attributes, ExecuteStreamHandler streams, ByteArrayOutputStream out) throws IOException {\n+    WaitForProcess result = new WaitForProcess(process, attributes, streams, out, listeners.clone(), messageLogger);\n+  private final ProcessAttributes attributes;\n+  public WaitForProcess(Process process, ProcessAttributes attributes, ExecuteStreamHandler streams, ByteArrayOutputStream out, ProcessListener listener, MessageLogger messageLogger) {\n+    this.attributes = attributes;\n+    Set<Integer> allowedExitValues = attributes.getAllowedExitValues();\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"Unexpected exit value: \").append(result.getExitValue());\n+      sb.append(\", allowed exit values: \").append(allowedExitValues);\n+      sb.append(\", executed command \").append(attributes.getCommand());\n+      if (attributes.getDirectory() != null) {\n+        sb.append(\" in directory \").append(attributes.getDirectory());\n+      }\n+      if (!attributes.getEnvironment().isEmpty()) {\n+        sb.append(\" with environment \").append(attributes.getEnvironment());\n+      }\n+        if (out.length() <= MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE) {\n+          sb.append(\", output was:\\n\").append(out.trim());\n+        }\n+      throw new InvalidExitValueException(sb.toString(), result);\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessAttributes.java": [
                1,
                3,
                4,
                5,
                6,
                11,
                16,
                21,
                26,
                31,
                33,
                34,
                35,
                36,
                37,
                38,
                40,
                41,
                42,
                44,
                45,
                46,
                48,
                49,
                50,
                52,
                53,
                54,
                56
            ],
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                25,
                839,
                840,
                841,
                842,
                843,
                848,
                851,
                863,
                867,
                882
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                50,
                72,
                74,
                122,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                136,
                137,
                138,
                140
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessAttributes.java": "package org.zeroturnaround.exec;\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nclass ProcessAttributes {\n  private final List<String> command;\n  private final File directory;\n  private final Map<String,String> environment;\n  private final Set<Integer> allowedExitValues;\n  public ProcessAttributes(List<String> command, File directory, Map<String, String> environment, Set<Integer> allowedExitValues) {\n    this.command = command;\n    this.directory = directory;\n    this.environment = environment;\n    this.allowedExitValues = allowedExitValues;\n  }\n  public List<String> getCommand() {\n    return command;\n  }\n  public File getDirectory() {\n    return directory;\n  }\n  public Map<String, String> getEnvironment() {\n    return environment;\n  }\n  public Set<Integer> getAllowedExitValues() {\n    return allowedExitValues;\n  }\n}\n",
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "import java.util.ArrayList;\n    ProcessAttributes attributes = new ProcessAttributes(\n        new ArrayList<String>(builder.command()),\n        builder.directory(),\n        new LinkedHashMap<String, String>(environment),\n        allowedExitValues == null ? null : new HashSet<Integer>(allowedExitValues));\n      return startInternal(process, attributes, redirectOutputAlsoTo(pumps, out), out);\n      return startInternal(process, attributes, streams, null);\n    result += \".\";\n  private WaitForProcess startInternal(Process process, ProcessAttributes attributes, ExecuteStreamHandler streams, ByteArrayOutputStream out) throws IOException {\n    WaitForProcess result = new WaitForProcess(process, attributes, streams, out, listeners.clone(), messageLogger);\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "  private final ProcessAttributes attributes;\n  public WaitForProcess(Process process, ProcessAttributes attributes, ExecuteStreamHandler streams, ByteArrayOutputStream out, ProcessListener listener, MessageLogger messageLogger) {\n    this.attributes = attributes;\n    Set<Integer> allowedExitValues = attributes.getAllowedExitValues();\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Unexpected exit value: \").append(result.getExitValue());\n      sb.append(\", allowed exit values: \").append(allowedExitValues);\n      sb.append(\", executed command \").append(attributes.getCommand());\n      if (attributes.getDirectory() != null) {\n        sb.append(\" in directory \").append(attributes.getDirectory());\n      }\n      if (!attributes.getEnvironment().isEmpty()) {\n        sb.append(\" with environment \").append(attributes.getEnvironment());\n      }\n        if (out.length() <= MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE) {\n          sb.append(\", output was:\\n\").append(out.trim());\n        }\n      throw new InvalidExitValueException(sb.toString(), result);\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorArgsWithExtraSpaceTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "c5821611",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/ProcessAttributes.java": "getAllowedExitValues getEnvironment getDirectory return return return return getCommand this this this this public public public public public allowedExitValues allowedExitValues allowedExitValues allowedExitValues allowedExitValues Integer Integer Integer environment environment environment environment environment directory directory directory directory directory command command command command command String String String String String String String String String final final final final private private private private ProcessAttributes ProcessAttributes class Set Set Set Set Map Map Map Map List List List List util util util File File File File io java java java java import import import import exec zeroturnaround org package ",
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "DEBUG MessageLoggers messageLogger MessageLogger listeners readOutput streams timeoutUnit timeout Long allowedExitValues environment String String String String new new new builder ProcessBuilder ProcessBuilder true DEFAULT_REDIRECT_ERROR_STREAM boolean boolean NORMAL_EXIT_VALUE null DEFAULT_EXIT_VALUES Integer Integer Integer getLogger log final final final final final final final static static static static private private private private private private private private private private private ProcessExecutor ProcessExecutor class class public public public Slf4jStream Slf4jInfoOutputStream Slf4jDebugOutputStream PumpStreamHandler ExecuteStreamHandler ExecuteStreamHandler CallerLoggerUtil stream stream stream stream stream stream ShutdownHookProcessDestroyer ProcessListener ProcessDestroyer DestroyerListenerAdapter CompositeProcessListener CompositeProcessListener CompositeProcessListener listener listener listener listener listener LoggerFactory LoggerFactory Logger Logger slf4j slf4j slf4j slf4j slf4j TeeOutputStream NullOutputStream output output commons commons apache apache TimeoutException TimeUnit TimeUnit ThreadFactory Future Executors ExecutorService ExecutionException concurrent concurrent concurrent concurrent concurrent concurrent concurrent Set Set Entry Map Map Map List LinkedHashMap LinkedHashMap HashSet Arrays ArrayList util util util util util util util util util util util util util util util OutputStream InputStream IOException File ByteArrayOutputStream io io io io io io io java java java java java java java java java java java java java java java java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import exec exec exec exec exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org org org org org org org org org package ",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "checkExit result result result toByteArray new new output output ProcessOutput ProcessOutput closeStreams stop null null null destroy \"Stopping {}...\" if if finally finally \"{} stopped with exit code {}\" message message true waitFor false finished finished finished boolean exit exit exit exit try try InterruptedException throws call return return getProcess this this this this this this this this public public public messageLogger messageLogger messageLogger messageLogger messageLogger messageLogger MessageLogger MessageLogger out out out out out out streams streams streams streams streams streams attributes attributes attributes attributes ProcessAttributes ProcessAttributes process process process process process process process process Process Process Process MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE int int getLogger log log log final final final final final final final final static static private private private private private private private private ProcessResult ProcessResult ProcessResult ProcessResult implements WaitForProcess WaitForProcess WaitForProcess class class ExecuteStreamHandler ExecuteStreamHandler ExecuteStreamHandler stream ProcessListener ProcessListener ProcessListener listener listener listener listener listener LoggerFactory LoggerFactory Logger Logger slf4j slf4j Callable Callable concurrent Set util util IOException IOException ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io io java java java java import import import import import import import import exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorArgsWithExtraSpaceTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java",
            "src/main/java/org/zeroturnaround/exec/InvalidOutputException.java",
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/ProcessFinishException.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java",
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java",
            "src/main/java/org/zeroturnaround/exec/listener/ProcessListener.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerSuccessTest.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerThrowTest.java"
        ],
        "changed_files_num": 9,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java",
            "src/main/java/org/zeroturnaround/exec/InvalidOutputException.java",
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/ProcessFinishException.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java",
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java",
            "src/main/java/org/zeroturnaround/exec/listener/ProcessListener.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerSuccessTest.java",
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerThrowTest.java"
        ],
        "changed_java_files_num": 9,
        "commit": "90dce8c9",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorArgsWithExtraSpaceTest": "\" \" getName ArgumentsAsList \"java -cp target/test-classes \" commandSplit new return args args private \"[arg1, arg2, arg3]\" assertEquals outputUTF8 execute true readOutput \"arg1 arg2  arg3\" argumentsAsList argumentsAsList output output String String Exception throws testReadOutputAndError void @ ProcessExecutorArgsWithExtraSpaceTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "getLogger assertEquals instanceof \"Slf4jInfoOutputStream expected\" assertTrue getOut out out out pumps pumps pumps asInfo redirectOutput new executor executor executor private ofCaller testMyClassName testClassNameWithShortName \".\" \".\" getName getName getName getName getClass getClass getClass getClass \"MyLogger\" \"MyLogger\" shortName shortName shortName shortName shortName shortName testShortName of of of testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName testSlf4jLoggerName \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName fullName String String String String String String String Exception Exception Exception Exception throws throws throws throws testFullName void void void void void @ @ @ @ ProcessExecutorLoggerTest class public public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler stream stream stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Assert Assert Assert junit junit OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture asList iterable iterable String String String String Iterable testJavaVersionIterable \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit exit exit int int int int testJavaVersion \"unknown command\" command command command command command command command testNoSuchFile execute execute execute execute execute execute execute execute new new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public public Slf4jStream slf4j ExecuteStreamHandler stream stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List Arrays Arrays ArrayList util util util IOException IOException File io io java java java java java import import import import import import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorTimeoutTest": "try Exception throws testExecuteTimeout void @ ProcessExecutorTimeoutTest class public public ProcessExecutor Test Test Assert junit junit CoreMatchers hamcrest TimeoutException TimeUnit concurrent concurrent List ArrayList util util util util java java java java import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessListenerSuccessTest": "afterStop afterFinish afterStart this this this this this this this this this this this this this this this this this this assertNull assertNull assertNull assertNull assertNull assertNull beforeStart Override Override Override Override Process Process Process Process extends static process process process process process process process process process process process process process process process process process process executor executor executor executor executor executor executor executor executor executor executor executor executor executor assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertEquals assertEquals assertEquals assertEquals assertEquals getExitValue exit exit int execute addListener \"-version\" \"java\" result result result result result result result result result result result result result result new new ProcessListenerImpl ProcessListenerImpl ProcessListenerImpl Exception throws testJavaVersion void void void void void @ @ @ @ @ ProcessListenerSuccessTest class class public public public public public public ProcessListener ProcessListener listener listener listener listener listener listener listener ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessListenerThrowTest": "\"Test\" throw \"java version\" contains getString getOutput if super result result result result process process Process afterFinish afterFinish Override extends static private MINUTES timeout testJavaVersionWithTimeout execute execute ProcessListenerThrowImpl ProcessListenerThrowImpl ProcessListenerThrowImpl addListener addListener true true readOutput readOutput \"-version\" \"-version\" \"java\" \"java\" new new new new new Exception Exception throws throws testJavaVersion void void void expected expected @ @ @ ProcessListenerThrowTest class class class class public public public public ProcessListenerImpl ProcessListenerImpl ProcessListenerSuccessTest ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor InvalidOutputException InvalidOutputException InvalidOutputException InvalidOutputException Test Test Test junit TimeUnit TimeUnit concurrent util java import import import import import import test test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": "public class InvalidExitValueException extends RuntimeException {\n  private final ProcessResult result;\n    super(message);\n    this.result = result;\n  }\n  public ProcessResult getResult() {\n    return result;\n  }\n  public int getExitValue() {\n    return result.getExitValue();\n  }\n  public ProcessResult result() {\n    return getResult();\n  }\n  public int exitValue() {\n    return getExitValue();\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": [
                27,
                34,
                40,
                41,
                42,
                47,
                48,
                49,
                54,
                55,
                56,
                62,
                63,
                64,
                70,
                71
            ]
        },
        "diff_code": "+    super(message, result);\n+  private static final long serialVersionUID = 1L;\n+  public InvalidOutputException(String message, ProcessResult result) {\n+    super(message, result);\n+  }\n+        if (c instanceof InvalidOutputException) {\n+          InvalidOutputException i = (InvalidOutputException) c;\n+          throw new InvalidOutputException(i.getMessage(), i.getResult());\n+        }\n+        if (c.getClass().equals(ProcessFinishException.class)) {\n+          ProcessFinishException p = (ProcessFinishException) c;\n+          throw new ProcessFinishException(p.getMessage(), p.getResult());\n+        }\n+  private static final long serialVersionUID = 1L;\n+  private final ProcessResult result;\n+  public ProcessFinishException(String message, ProcessResult result) {\n+    super(message);\n+    this.result = result;\n+  }\n+  public ProcessResult getResult() {\n+    return result;\n+  }\n+  public int getExitValue() {\n+    return result.getExitValue();\n+  }\n+  public ProcessResult result() {\n+    return getResult();\n+  }\n+  public int exitValue() {\n+    return getExitValue();\n+  }\n+      listener.afterFinish(process, result);\n+  @Override\n+  public void afterFinish(Process process, ProcessResult result) {\n+    for (ProcessListener child : children) {\n+      child.afterFinish(process, result);\n+    }\n+  }\n+  public void afterFinish(Process process, ProcessResult result) {\n+  }\n+  @Test\n+  public void testJavaVersion() throws Exception {\n+    ProcessListenerImpl listener = new ProcessListenerImpl();\n+    ProcessResult result = new ProcessExecutor(\"java\", \"-version\").addListener(listener).execute();\n+    int exit = result.getExitValue();\n+    Assert.assertEquals(0, exit);\n+    Assert.assertNotNull(listener.executor);\n+    Assert.assertNotNull(listener.process);\n+    Assert.assertNotNull(listener.result);\n+    Assert.assertEquals(result,  listener.result);\n+  }\n+  static class ProcessListenerImpl extends ProcessListener {\n+    ProcessExecutor executor;\n+    Process process;\n+    ProcessResult result;\n+    @Override\n+    public void beforeStart(ProcessExecutor executor) {\n+      Assert.assertNotNull(executor);\n+      Assert.assertNull(this.executor);\n+      Assert.assertNull(this.process);\n+      Assert.assertNull(this.result);\n+      this.executor = executor;\n+    }\n+    @Override\n+    public void afterStart(Process process, ProcessExecutor executor) {\n+      Assert.assertNotNull(process);\n+      Assert.assertNotNull(executor);\n+      Assert.assertNotNull(this.executor);\n+      Assert.assertNull(this.process);\n+      Assert.assertNull(this.result);\n+      Assert.assertEquals(this.executor, executor);\n+      this.process = process;\n+    }\n+    @Override\n+    public void afterFinish(Process process, ProcessResult result) {\n+      Assert.assertNotNull(process);\n+      Assert.assertNotNull(result);\n+      Assert.assertNotNull(this.executor);\n+      Assert.assertNotNull(this.process);\n+      Assert.assertNull(this.result);\n+      Assert.assertEquals(this.process, process);\n+      this.result = result;\n+    }\n+    @Override\n+    public void afterStop(Process process) {\n+      Assert.assertNotNull(process);\n+      Assert.assertNotNull(this.executor);\n+      Assert.assertNotNull(this.process);\n+      Assert.assertNotNull(this.result);\n+      Assert.assertEquals(this.process, process);\n+    }\n+  }\n+  @Test(expected=InvalidOutputException.class)\n+  public void testJavaVersion() throws Exception {\n+    new ProcessExecutor(\"java\", \"-version\").readOutput(true).addListener(new ProcessListenerThrowImpl()).execute();\n+  }\n+  @Test(expected=InvalidOutputException.class)\n+  public void testJavaVersionWithTimeout() throws Exception {\n+    new ProcessExecutor(\"java\", \"-version\").readOutput(true).addListener(new ProcessListenerThrowImpl()).timeout(1, TimeUnit.MINUTES).execute();\n+  }\n+  private static class ProcessListenerThrowImpl extends ProcessListenerImpl {\n+    @Override\n+    public void afterFinish(Process process, ProcessResult result) {\n+      super.afterFinish(process, result);\n+      if (result.getOutput().getString().contains(\"java version\")) {\n+        throw new InvalidOutputException(\"Test\", result);\n+      }\n+    }\n+  }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": [
                27,
                35
            ],
            "src/main/java/org/zeroturnaround/exec/InvalidOutputException.java": [
                18,
                20,
                29,
                31,
                36,
                37,
                38,
                40
            ],
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                1030,
                1031,
                1032,
                1033,
                1034,
                1035,
                1036,
                1037
            ],
            "src/main/java/org/zeroturnaround/exec/ProcessFinishException.java": [
                18,
                26,
                28,
                33,
                38,
                39,
                40,
                41,
                46,
                47,
                48,
                53,
                54,
                55,
                61,
                62,
                63,
                69,
                70,
                71,
                73
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                123
            ],
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java": [
                25,
                100,
                101,
                102,
                103,
                104,
                105
            ],
            "src/main/java/org/zeroturnaround/exec/listener/ProcessListener.java": [
                21,
                63,
                65
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerSuccessTest.java": [
                1,
                3,
                4,
                5,
                6,
                7,
                9,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                23,
                25,
                27,
                29,
                31,
                32,
                33,
                35,
                36,
                37,
                39,
                40,
                42,
                43,
                44,
                45,
                47,
                48,
                49,
                51,
                52,
                53,
                55,
                56,
                57,
                58,
                60,
                61,
                62,
                64,
                65,
                66,
                68,
                69,
                70,
                72,
                73,
                74,
                76,
                77,
                79,
                81
            ],
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerThrowTest.java": [
                1,
                3,
                5,
                6,
                7,
                8,
                9,
                11,
                13,
                14,
                15,
                16,
                18,
                19,
                20,
                21,
                23,
                25,
                26,
                27,
                29,
                30,
                31,
                32,
                33,
                35
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": "public class InvalidExitValueException extends ProcessFinishException {\n    super(message, result);\n",
            "src/main/java/org/zeroturnaround/exec/InvalidOutputException.java": "package org.zeroturnaround.exec;\nimport org.zeroturnaround.exec.listener.ProcessListener;\npublic class InvalidOutputException extends ProcessFinishException {\n  private static final long serialVersionUID = 1L;\n  public InvalidOutputException(String message, ProcessResult result) {\n    super(message, result);\n  }\n}\n",
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "        if (c instanceof InvalidOutputException) {\n          InvalidOutputException i = (InvalidOutputException) c;\n          throw new InvalidOutputException(i.getMessage(), i.getResult());\n        }\n        if (c.getClass().equals(ProcessFinishException.class)) {\n          ProcessFinishException p = (ProcessFinishException) c;\n          throw new ProcessFinishException(p.getMessage(), p.getResult());\n        }\n",
            "src/main/java/org/zeroturnaround/exec/ProcessFinishException.java": "package org.zeroturnaround.exec;\npublic class ProcessFinishException extends RuntimeException {\n  private static final long serialVersionUID = 1L;\n  private final ProcessResult result;\n  public ProcessFinishException(String message, ProcessResult result) {\n    super(message);\n    this.result = result;\n  }\n  public ProcessResult getResult() {\n    return result;\n  }\n  public int getExitValue() {\n    return result.getExitValue();\n  }\n  public ProcessResult result() {\n    return getResult();\n  }\n  public int exitValue() {\n    return getExitValue();\n  }\n}\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "      listener.afterFinish(process, result);\n",
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java": "import org.zeroturnaround.exec.ProcessResult;\n  @Override\n  public void afterFinish(Process process, ProcessResult result) {\n    for (ProcessListener child : children) {\n      child.afterFinish(process, result);\n    }\n  }\n",
            "src/main/java/org/zeroturnaround/exec/listener/ProcessListener.java": "import org.zeroturnaround.exec.ProcessResult;\n  public void afterFinish(Process process, ProcessResult result) {\n  }\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerSuccessTest.java": "package org.zeroturnaround.exec.test;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.zeroturnaround.exec.ProcessExecutor;\nimport org.zeroturnaround.exec.ProcessResult;\nimport org.zeroturnaround.exec.listener.ProcessListener;\npublic class ProcessListenerSuccessTest {\n  @Test\n  public void testJavaVersion() throws Exception {\n    ProcessListenerImpl listener = new ProcessListenerImpl();\n    ProcessResult result = new ProcessExecutor(\"java\", \"-version\").addListener(listener).execute();\n    int exit = result.getExitValue();\n    Assert.assertEquals(0, exit);\n    Assert.assertNotNull(listener.executor);\n    Assert.assertNotNull(listener.process);\n    Assert.assertNotNull(listener.result);\n    Assert.assertEquals(result,  listener.result);\n  }\n  static class ProcessListenerImpl extends ProcessListener {\n    ProcessExecutor executor;\n    Process process;\n    ProcessResult result;\n    @Override\n    public void beforeStart(ProcessExecutor executor) {\n      Assert.assertNotNull(executor);\n      Assert.assertNull(this.executor);\n      Assert.assertNull(this.process);\n      Assert.assertNull(this.result);\n      this.executor = executor;\n    }\n    @Override\n    public void afterStart(Process process, ProcessExecutor executor) {\n      Assert.assertNotNull(process);\n      Assert.assertNotNull(executor);\n      Assert.assertNotNull(this.executor);\n      Assert.assertNull(this.process);\n      Assert.assertNull(this.result);\n      Assert.assertEquals(this.executor, executor);\n      this.process = process;\n    }\n    @Override\n    public void afterFinish(Process process, ProcessResult result) {\n      Assert.assertNotNull(process);\n      Assert.assertNotNull(result);\n      Assert.assertNotNull(this.executor);\n      Assert.assertNotNull(this.process);\n      Assert.assertNull(this.result);\n      Assert.assertEquals(this.process, process);\n      this.result = result;\n    }\n    @Override\n    public void afterStop(Process process) {\n      Assert.assertNotNull(process);\n      Assert.assertNotNull(this.executor);\n      Assert.assertNotNull(this.process);\n      Assert.assertNotNull(this.result);\n      Assert.assertEquals(this.process, process);\n    }\n  }\n}\n",
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerThrowTest.java": "package org.zeroturnaround.exec.test;\nimport java.util.concurrent.TimeUnit;\nimport org.junit.Test;\nimport org.zeroturnaround.exec.InvalidOutputException;\nimport org.zeroturnaround.exec.ProcessExecutor;\nimport org.zeroturnaround.exec.ProcessResult;\nimport org.zeroturnaround.exec.test.ProcessListenerSuccessTest.ProcessListenerImpl;\npublic class ProcessListenerThrowTest {\n  @Test(expected=InvalidOutputException.class)\n  public void testJavaVersion() throws Exception {\n    new ProcessExecutor(\"java\", \"-version\").readOutput(true).addListener(new ProcessListenerThrowImpl()).execute();\n  }\n  @Test(expected=InvalidOutputException.class)\n  public void testJavaVersionWithTimeout() throws Exception {\n    new ProcessExecutor(\"java\", \"-version\").readOutput(true).addListener(new ProcessListenerThrowImpl()).timeout(1, TimeUnit.MINUTES).execute();\n  }\n  private static class ProcessListenerThrowImpl extends ProcessListenerImpl {\n    @Override\n    public void afterFinish(Process process, ProcessResult result) {\n      super.afterFinish(process, result);\n      if (result.getOutput().getString().contains(\"java version\")) {\n        throw new InvalidOutputException(\"Test\", result);\n      }\n    }\n  }\n}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorTimeoutTest",
            "ProcessExecutorArgsWithExtraSpaceTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessListenerSuccessTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessListenerThrowTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "2f84940f",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/InvalidExitValueException.java": "super result result ProcessResult message message String serialVersionUID long final static private ProcessFinishException extends InvalidExitValueException InvalidExitValueException class public public exec zeroturnaround org package ",
            "src/main/java/org/zeroturnaround/exec/InvalidOutputException.java": "super result result ProcessResult message message String serialVersionUID long final static private ProcessFinishException extends InvalidOutputException InvalidOutputException class public public ProcessListener listener import exec exec zeroturnaround zeroturnaround org org package ",
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "DEBUG MessageLoggers messageLogger MessageLogger listeners readOutput closeTimeoutUnit closeTimeout streams stopper timeoutUnit timeout Long Long allowedExitValues environment String String String String new new new builder ProcessBuilder ProcessBuilder true DEFAULT_REDIRECT_ERROR_STREAM boolean boolean NORMAL_EXIT_VALUE null DEFAULT_EXIT_VALUES Integer Integer Integer getLogger log final final final final final final final static static static static private private private private private private private private private private private private private private ProcessExecutor ProcessExecutor class class public public public Slf4jStream Slf4jInfoOutputStream Slf4jDebugOutputStream PumpStreamHandler ExecuteStreamHandler ExecuteStreamHandler CallerLoggerUtil stream stream stream stream stream stream ProcessStopper ProcessStopper NopProcessStopper DestroyProcessStopper stop stop stop ShutdownHookProcessDestroyer ProcessListener ProcessDestroyer DestroyerListenerAdapter CompositeProcessListener CompositeProcessListener CompositeProcessListener listener listener listener listener listener TimeoutProcessCloser StandardProcessCloser ProcessCloser close close close LoggerFactory LoggerFactory Logger Logger slf4j slf4j slf4j slf4j slf4j TeeOutputStream NullOutputStream output output commons commons apache apache TimeoutException TimeUnit TimeUnit TimeUnit ThreadFactory Future Executors ExecutorService ExecutionException concurrent concurrent concurrent concurrent concurrent concurrent concurrent Set Set Entry Map Map Map List LinkedHashMap LinkedHashMap Iterator HashSet Arrays ArrayList util util util util util util util util util util util util util util util util OutputStream InputStream IOException File ByteArrayOutputStream io io io io io io io java java java java java java java java java java java java java java java java java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org org org org org org org org org org org org org org org package ",
            "src/main/java/org/zeroturnaround/exec/ProcessFinishException.java": "exitValue getExitValue getExitValue getExitValue int int return return return return getResult getResult this super message message String result result result result result result result ProcessResult ProcessResult ProcessResult ProcessResult serialVersionUID long final final static private private RuntimeException extends ProcessFinishException ProcessFinishException class public public public public public public exec zeroturnaround org package ",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "afterFinish checkExit new result result result result getCurrentOutput output output ProcessOutput \"Stopping {}...\" if finally finally \"{} stopped with exit code {}\" message message true waitFor false finished finished finished boolean exit exit exit exit currentThread try try InterruptedException throws call return return getProcess this this this this this this this this this public public public workerThread workerThread Thread Thread volatile messageLogger messageLogger messageLogger messageLogger messageLogger messageLogger MessageLogger MessageLogger out out out out closer closer closer closer closer stopper stopper stopper stopper stopper attributes attributes attributes attributes ProcessAttributes ProcessAttributes process process process process process process process process process Process Process Process MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE int int getLogger log log log final final final final final final final final final static static private private private private private private private private private private ProcessResult ProcessResult ProcessResult ProcessResult implements WaitForProcess WaitForProcess WaitForProcess class class ProcessStopper ProcessStopper ProcessStopper stop stop ProcessListener ProcessListener ProcessListener listener listener listener listener listener listener ProcessCloser ProcessCloser ProcessCloser close close LoggerFactory LoggerFactory Logger Logger slf4j slf4j TimeoutException Callable Callable concurrent concurrent Set util util util IOException IOException ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io io java java java java java import import import import import import import import import import exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "src/main/java/org/zeroturnaround/exec/listener/CompositeProcessListener.java": "new children final private Cloneable implements ProcessListener ProcessListener ProcessListener extends CompositeProcessListener CompositeProcessListener class public public ProcessResult ProcessExecutor CopyOnWriteArrayList CopyOnWriteArrayList concurrent List List Iterator util util util java java java import import import import import listener exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org package ",
            "src/main/java/org/zeroturnaround/exec/listener/ProcessListener.java": "executor beforeStart void ProcessListener class abstract public public ProcessResult ProcessExecutor ProcessExecutor import import listener exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org package ",
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerSuccessTest.java": "afterStop afterFinish afterStart this this this this this this this this this this this this this this this this this this assertNull assertNull assertNull assertNull assertNull assertNull beforeStart Override Override Override Override Process Process Process Process extends static process process process process process process process process process process process process process process process process process process executor executor executor executor executor executor executor executor executor executor executor executor executor executor assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertEquals assertEquals assertEquals assertEquals assertEquals getExitValue exit exit int execute addListener \"-version\" \"java\" result result result result result result result result result result result result result result new new ProcessListenerImpl ProcessListenerImpl ProcessListenerImpl Exception throws testJavaVersion void void void void void @ @ @ @ @ ProcessListenerSuccessTest class class public public public public public public ProcessListener ProcessListener listener listener listener listener listener listener listener ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit import import import import import test exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "src/test/java/org/zeroturnaround/exec/test/ProcessListenerThrowTest.java": "\"Test\" throw \"java version\" contains getString getOutput if super result result result result process process Process afterFinish afterFinish Override extends static private MINUTES timeout testJavaVersionWithTimeout execute execute ProcessListenerThrowImpl ProcessListenerThrowImpl ProcessListenerThrowImpl addListener addListener true true readOutput readOutput \"-version\" \"-version\" \"java\" \"java\" new new new new new Exception Exception throws throws testJavaVersion void void void expected expected @ @ @ ProcessListenerThrowTest class class class class public public public public ProcessListenerImpl ProcessListenerImpl ProcessListenerSuccessTest ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor InvalidOutputException InvalidOutputException InvalidOutputException InvalidOutputException Test Test Test junit TimeUnit TimeUnit concurrent util java import import import import import import test test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorArgsWithExtraSpaceTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 4,
            "ProcessExecutorMainTest": 18,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2,
            "ProcessExecutorTimeoutTest": 2,
            "ProcessListenerSuccessTest": 1,
            "ProcessListenerThrowTest": 2
        }
    },
    {
        "changed_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java",
            "src/main/java/org/zeroturnaround/exec/close/ProcessCloser.java",
            "src/main/java/org/zeroturnaround/exec/close/StandardProcessCloser.java",
            "src/main/java/org/zeroturnaround/exec/close/TimeoutProcessCloser.java",
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java"
        ],
        "changed_files_num": 6,
        "changed_java_files": [
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java",
            "src/main/java/org/zeroturnaround/exec/close/ProcessCloser.java",
            "src/main/java/org/zeroturnaround/exec/close/StandardProcessCloser.java",
            "src/main/java/org/zeroturnaround/exec/close/TimeoutProcessCloser.java",
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java"
        ],
        "changed_java_files_num": 6,
        "commit": "8ff8fa3f",
        "data_objects": {
            "CallerLoggerUtilTest": "null testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName assertEquals assertEquals assertEquals \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ CallerLoggerUtilTest class public public public public CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil CallerLoggerUtil stream Test Test Test Test Assert Assert Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "InputStreamPumperTest": "redirectInput testPumpFromInputToOutputWithInput assertEquals assertEquals outputUTF8 outputUTF8 execute execute result result result result streams true true readOutput readOutput getName getName PrintInputToOutput PrintInputToOutput \"target/test-classes\" \"target/test-classes\" \"-cp\" \"-cp\" \"java\" \"java\" err System handler handler baos baos baos getBytes getBytes new new new new new new new bais bais bais bais \"Tere Minu Uus vihik\" \"Tere Minu Uus vihik\" str str str str str str String String String String Exception Exception throws throws testPumpFromInputToOutput void void @ @ InputStreamPumperTest class class class public public public PumpStreamHandler PumpStreamHandler PumpStreamHandler stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import import test exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorArgsWithExtraSpaceTest": "\" \" getName ArgumentsAsList \"java -cp target/test-classes \" commandSplit new return args args private \"[arg1, arg2, arg3]\" assertEquals outputUTF8 execute true readOutput \"arg1 arg2  arg3\" argumentsAsList argumentsAsList output output String String Exception throws testReadOutputAndError void @ ProcessExecutorArgsWithExtraSpaceTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorBigOutputTest": "private \"-\" redirectError err err err testRedirectErrorOnly toByteArray toByteArray redirectOutput new new new new out out out testRedirectOutputOnly \"+\" \"+\" testReadOutputOnly \"+-\" repeat repeat repeat repeat assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 true true readOutput readOutput output output output output String String String String testReadOutputAndError false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testDevNullSeparate execute execute execute execute execute execute bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput bigOutput Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws testDevNull void void void void void void @ @ @ @ @ @ ProcessExecutorBigOutputTest class public public public public public public public ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Assert Assert Assert Assert Assert junit junit TimeUnit concurrent util ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java java import import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorCommandLineTest": "true readOutput return getName PrintArguments \"target/test-classes\" \"-cp\" \"java\" addAll addAll command command command command assertEquals assertEquals readLines readLines actual actual actual actual output output execute execute printArguments printArguments printArguments bytes bytes bytes bytes byte byte InterruptedException InterruptedException private private private \"\\\\/.*\" \"/o\\\\\" testSlashes \"g h\" \"f e\" \"b c d\" \"a\" \"Windows\" startsWith \"os.name\" getProperty System if asList asList asList asList asList expected expected expected expected expected expected expected \"\\\"g\\\" h\" \"\\\"g\\\" h\" \"f \\\"e\\\"\" \"f \\\"e\\\"\" \"b \\\"c\\\" d\" \"b \\\"c\\\" d\" \"\\\"a\\\"\" \"\\\"a\\\"\" new new new new new args args args args args args args args args String String String String String String String String String String String String testQuotes \"bar bar\" \"foo foo\" testSpaces \"bar\" testTwoArgs \"foo\" \"foo\" testArguments testArguments testArguments testArguments testArguments testArguments testArguments Exception Exception Exception Exception Exception throws throws throws throws throws throws throws testOneArg void void void void void void void @ @ @ @ @ ProcessExecutorCommandLineTest class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Assert Assert Assert junit junit IOUtils IOUtils IOUtils commons apache TimeoutException TimeoutException TimeoutException concurrent List List List List List List List Arrays Arrays Arrays Arrays Arrays Arrays ArrayList ArrayList util util util util IOException IOException IOException ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io io java java java java java java import import import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package ",
            "ProcessExecutorExitValueTest": "return valueOf getName ExitLikeABoss \"target/test-classes\" \"-cp\" add add add add add result result result result result result result exitValue exitValue int String String String String static private testCustomExitValueInvalid testCustomExitValueValid exitLikeABoss exitLikeABoss exitLikeABoss exitLikeABoss testNonZeroExitValueByDefault SECONDS timeout testJavaVersionExitValueCheckTimeout execute execute execute execute execute exitValues exitValues exitValues exitValues \"-version\" \"-version\" \"java\" \"java\" \"java\" command command new new new new new new Exception Exception Exception Exception Exception throws throws throws throws throws testJavaVersionExitValueCheck void void void void void expected expected expected @ @ @ @ ProcessExecutorExitValueTest class class class class class public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor InvalidExitValueException InvalidExitValueException InvalidExitValueException InvalidExitValueException Test Test Test Test Test junit TimeUnit TimeUnit concurrent List List List ArrayList ArrayList util util util java java java import import import import import import test exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorHelloWorldTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private testRedirectOutputAndErrorSeparateAndReadOutput testRedirectOutputAndErrorSeparate testRedirectErrorOnlyAndReadOutput testRedirectErrorOnly testRedirectOutputOnlyAndReadOutput testRedirectOutputOnly testRedirectOutputAndErrorAndReadOutput \"world!\" \"world!\" \"world!\" \"world!\" \"world!\" redirectError redirectError redirectError redirectError redirectError err err err err err err err err err err err err err err err testRedirectOutputAndErrorMerged toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray toByteArray redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput redirectOutput new new new new new new new new new new new new new new new new new new new new new new new new new out out out out out out out out out out out out out out out out out out out out out testRedirectOutputAndError \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" \"Hello \" false false false false false false false redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream redirectErrorStream testReadOutputOnly \"Hello world!\" \"Hello world!\" \"Hello world!\" \"Hello world!\" assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 outputUTF8 execute execute execute execute execute execute execute execute execute execute execute true true true true true true readOutput readOutput readOutput readOutput readOutput readOutput helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld helloWorld output output output output output output output output output output output output String String String String String String String String String String String String String String String String String String Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws throws throws testReadOutputAndError void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ ProcessExecutorHelloWorldTest class class public public public public public public public public public public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorInputStreamTest": "toString assertEquals execute redirectOutput redirectInput getName PrintInputToOutput \"target/test-classes\" \"-cp\" \"java\" baos baos baos getBytes new new new bais bais \"Tere Minu Uus vihik\" str str str String Exception throws testWithInputAndRedirectOutput void @ ProcessExecutorInputStreamTest class class public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayInputStream ByteArrayInputStream ByteArrayInputStream io io java java import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorLoggerTest": "ofCaller testMyClassName \".\" getClass getClass \"MyLogger\" shortName shortName shortName testShortName getName getName getName getName getName getLogger getLogger getLogger assertEquals assertEquals assertEquals instanceof instanceof instanceof \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" \"Slf4jInfoOutputStream expected\" assertTrue assertTrue assertTrue getOut getOut getOut out out out out out out out out out pumps pumps pumps pumps pumps pumps pumps pumps pumps asInfo asInfo asInfo of of redirectOutput redirectOutput redirectOutput new new new executor executor executor executor executor executor executor executor executor \"my.full.Logger\" fullName fullName fullName fullName fullName fullName fullName String String String String Exception Exception Exception throws throws throws testFullName void void void @ @ @ ProcessExecutorLoggerTest class public public public public Slf4jStream Slf4jStream Slf4jStream Slf4jStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream Slf4jInfoOutputStream slf4j slf4j PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler stream stream stream ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Assert Assert Assert Assert Assert Assert Assert junit junit OutputStream OutputStream OutputStream OutputStream io java import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org package ",
            "ProcessExecutorMainTest": "testJavaVersionLogInfo testJavaVersionOutputFuture executor executor executor testJavaVersionOutputTwice isEmpty isEmpty isEmpty assertFalse assertFalse assertFalse outputUTF8 outputUTF8 outputUTF8 outputUTF8 str str str str str str str String String String true true true readOutput readOutput readOutput result result result result result result testJavaVersionOutput get get getFuture getFuture start start testJavaVersionFuture \"java -version\" commandSplit testJavaVersionCommandSplit assertEquals assertEquals assertEquals assertEquals getExitValue getExitValue getExitValue \"-version\" \"-version\" \"-version\" \"-version\" \"-version\" \"java\" \"java\" \"java\" \"java\" \"java\" exit exit exit exit exit exit int int int testJavaVersion \"unknown command\" command command command command command command testNoSuchFile execute execute execute execute execute execute execute new new new new new new new new Exception Exception Exception Exception Exception Exception Exception Exception Exception throws throws throws throws throws throws throws throws throws testNoCommand void void void void void void void void void IllegalStateException expected expected @ @ @ @ @ @ @ @ @ ProcessExecutorMainTest class class class public public public public public public public public public public Slf4jStream slf4j ExecuteStreamHandler stream stream ProcessResult ProcessResult ProcessResult ProcessResult ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Test Test Test Test Test Test Test Assert Assert Assert Assert Assert Assert Assert Assert junit junit StringUtils StringUtils StringUtils StringUtils lang commons apache List ArrayList util util IOException IOException File io io java java java java import import import import import import import import import import import test exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org package ",
            "ProcessExecutorShutdownHookTest": "execute redirectOutputAsInfo getName JAVA_CLASS_PATH \"-cp\" \"java\" new forceDelete exists if getFile WriterLoop file file file fileIsAlwaysCreated boolean starter starter Class false WriterLoopStarterAfterExit testDestroyOnExitInShutdownHook true WriterLoopStarterBeforeExit Exception Exception Exception throws throws throws testDestroyOnExit testDestroyOnExit testDestroyOnExit testDestroyOnExit void void void @ @ SLEEP_FOR_RECHECKING_FILE long final static private private ProcessExecutorShutdownHookTest class class class public public public ProcessExecutor ProcessExecutor Test Test Test Assert junit junit SystemUtils SystemUtils lang FileUtils FileUtils commons commons apache apache File File io io java import import import import import import shutdown test exec exec zeroturnaround zeroturnaround org org org org org org package ",
            "ProcessExecutorStreamCloseTest": "getName HelloWorld \"target/test-classes\" \"-cp\" \"java\" return private \"world!\" redirectError testRedirectErrorNotClosed isClosed isClosed assertFalse assertFalse toByteArray toByteArray String String \"Hello \" assertEquals assertEquals execute execute false redirectErrorStream redirectOutput helloWorld helloWorld helloWorld close close close close close close RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream RememberCloseOutputStream new new new new new new new out out out out out out Exception Exception throws throws testRedirectOutputNotClosed void void @ @ ProcessExecutorStreamCloseTest class class public public public ProcessExecutor ProcessExecutor ProcessExecutor Test Test Test Assert Assert Assert Assert Assert junit junit ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io java import import import import test exec exec zeroturnaround zeroturnaround org org org org package ",
            "ProcessExecutorTimeoutTest": "try Exception throws testExecuteTimeout void @ ProcessExecutorTimeoutTest class public public ProcessExecutor Test Test Assert junit junit CoreMatchers hamcrest TimeoutException TimeUnit concurrent concurrent List ArrayList util util util util java java java java import import import import import import import import test exec exec zeroturnaround zeroturnaround org org org org org package "
        },
        "deleted_diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "    WaitForProcess result = new WaitForProcess(process, attributes, stopper, streams, out, listeners.clone(), messageLogger);\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "import org.zeroturnaround.exec.stream.ExecuteStreamHandler;\n  private final ExecuteStreamHandler streams;\n  public WaitForProcess(Process process, ProcessAttributes attributes, ProcessStopper stopper, ExecuteStreamHandler streams, ByteArrayOutputStream out, ProcessListener listener, MessageLogger messageLogger) {\n    this.streams = streams;\n        if (streams != null) {\n          streams.stop();\n        }\n        closeStreams(process);\n  private void closeStreams(final Process process) throws IOException {\n    IOException caught = null;\n    try {\n      process.getOutputStream().close();\n    }\n    catch (IOException e) {\n      log.error(\"Failed to close process output stream:\", e);\n      caught = e;\n    }\n    try {\n      process.getInputStream().close();\n    }\n    catch (IOException e) {\n      log.error(\"Failed to close process input stream:\", e);\n      caught = e;\n    }\n    try {\n      process.getErrorStream().close();\n    }\n    catch (IOException e) {\n      log.error(\"Failed to close process error stream:\", e);\n      caught = e;\n    }\n    if (caught != null) {\n      throw caught;\n    }\n  }\n",
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": "    if (err != null && err != out) {\n      log.trace(\"Flushing error stream {}...\", err);\n      try {\n        err.flush();\n      } catch (IOException e) {\n        log.error(\"Got exception while flushing the error stream\", e);\n      }\n    }\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                929
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                30,
                63,
                85,
                89,
                118,
                119,
                120,
                121,
                200,
                201,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                227,
                228,
                229,
                230
            ],
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": [
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227
            ]
        },
        "diff_code": "+  private Long closeTimeout;\n+  private TimeUnit closeTimeoutUnit;\n+  public ProcessExecutor closeTimeout(long timeout, TimeUnit unit) {\n+    this.closeTimeout = timeout;\n+    this.closeTimeoutUnit = unit;\n+    return this;\n+  }\n+    ProcessCloser closer = newProcessCloser(streams);\n+    WaitForProcess result = new WaitForProcess(process, attributes, stopper, closer, out, listeners.clone(), messageLogger);\n+  private ProcessCloser newProcessCloser(ExecuteStreamHandler streams) {\n+    if (closeTimeout == null) {\n+      return new StandardProcessCloser(streams);\n+    }\n+    return new TimeoutProcessCloser(streams, closeTimeout, closeTimeoutUnit);\n+  }\n+  private final ProcessCloser closer;\n+  public WaitForProcess(Process process, ProcessAttributes attributes, ProcessStopper stopper, ProcessCloser closer, ByteArrayOutputStream out, ProcessListener listener, MessageLogger messageLogger) {\n+    this.closer = closer;\n+        closer.close(process);\n+  void close(Process process) throws IOException, InterruptedException;\n+  private static final Logger log = LoggerFactory.getLogger(StandardProcessCloser.class);\n+  protected final ExecuteStreamHandler streams;\n+  public StandardProcessCloser(ExecuteStreamHandler streams) {\n+    this.streams = streams;\n+  }\n+  public void close(Process process) throws IOException, InterruptedException {\n+    if (streams != null) {\n+      streams.stop();\n+    }\n+    closeStreams(process);\n+  }\n+  private void closeStreams(final Process process) throws IOException {\n+    IOException caught = null;\n+    try {\n+      process.getOutputStream().close();\n+    }\n+    catch (IOException e) {\n+      log.error(\"Failed to close process output stream:\", e);\n+      caught = e;\n+    }\n+    try {\n+      process.getInputStream().close();\n+    }\n+    catch (IOException e) {\n+      log.error(\"Failed to close process input stream:\", e);\n+      caught = e;\n+    }\n+    try {\n+      process.getErrorStream().close();\n+    }\n+    catch (IOException e) {\n+      log.error(\"Failed to close process error stream:\", e);\n+      caught = e;\n+    }\n+    if (caught != null) {\n+      throw caught;\n+    }\n+  }\n+  private static final Logger log = LoggerFactory.getLogger(TimeoutProcessCloser.class);\n+  private final long timeout;\n+  private final TimeUnit unit;\n+  public TimeoutProcessCloser(ExecuteStreamHandler streams, long timeout, TimeUnit unit) {\n+    super(streams);\n+    this.timeout = timeout;\n+    this.unit = unit;\n+  }\n+  public void close(final Process process) throws IOException, InterruptedException {\n+    ExecutorService service = Executors.newSingleThreadScheduledExecutor();\n+    Future<Void> future = service.submit(new Callable<Void>() {\n+      public Void call() throws Exception {\n+        doClose(process);\n+        return null;\n+      }\n+    });\n+    service.shutdown();\n+    try {\n+      future.get(timeout, unit);\n+    }\n+    catch (ExecutionException e) {\n+      throw new IllegalStateException(\"Could not close streams of \" + process, e.getCause());\n+    }\n+    catch (TimeoutException e) {\n+      log.warn(\"Could not close streams of {} in {} {}\", process, timeout, unit);\n+    }\n+    finally {\n+      if (streams instanceof PumpStreamHandler) {\n+        ((PumpStreamHandler) streams).flush();\n+      }\n+    }\n+  }\n+  protected void doClose(final Process process) throws IOException, InterruptedException {\n+    super.close(process);\n+  }\n+    flush();\n+  }\n+  public void flush() {\n+    if (err != null && err != out) {\n+      log.trace(\"Flushing error stream {}...\", err);\n+      try {\n+        err.flush();\n+      } catch (IOException e) {\n+        log.error(\"Got exception while flushing the error stream\", e);\n+      }\n+    }\n",
        "diff_line_number_list_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": [
                45,
                46,
                47,
                136,
                137,
                394,
                395,
                396,
                397,
                398,
                958,
                960,
                966,
                967,
                968,
                969,
                970,
                971
            ],
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": [
                28,
                63,
                85,
                89,
                118
            ],
            "src/main/java/org/zeroturnaround/exec/close/ProcessCloser.java": [
                18,
                20,
                25,
                32,
                34
            ],
            "src/main/java/org/zeroturnaround/exec/close/StandardProcessCloser.java": [
                18,
                20,
                22,
                23,
                24,
                29,
                31,
                33,
                35,
                36,
                37,
                39,
                40,
                41,
                42,
                43,
                44,
                49,
                50,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                76,
                77,
                78,
                79,
                80
            ],
            "src/main/java/org/zeroturnaround/exec/close/TimeoutProcessCloser.java": [
                18,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                29,
                30,
                31,
                32,
                40,
                42,
                44,
                46,
                55,
                56,
                57,
                58,
                59,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                70,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                83,
                84,
                85,
                86,
                87,
                89,
                90,
                91,
                93
            ],
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": [
                220,
                221,
                223,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240
            ]
        },
        "diff_per_file": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "import org.zeroturnaround.exec.close.ProcessCloser;\nimport org.zeroturnaround.exec.close.StandardProcessCloser;\nimport org.zeroturnaround.exec.close.TimeoutProcessCloser;\n  private Long closeTimeout;\n  private TimeUnit closeTimeoutUnit;\n  public ProcessExecutor closeTimeout(long timeout, TimeUnit unit) {\n    this.closeTimeout = timeout;\n    this.closeTimeoutUnit = unit;\n    return this;\n  }\n    ProcessCloser closer = newProcessCloser(streams);\n    WaitForProcess result = new WaitForProcess(process, attributes, stopper, closer, out, listeners.clone(), messageLogger);\n  private ProcessCloser newProcessCloser(ExecuteStreamHandler streams) {\n    if (closeTimeout == null) {\n      return new StandardProcessCloser(streams);\n    }\n    return new TimeoutProcessCloser(streams, closeTimeout, closeTimeoutUnit);\n  }\n",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "import org.zeroturnaround.exec.close.ProcessCloser;\n  private final ProcessCloser closer;\n  public WaitForProcess(Process process, ProcessAttributes attributes, ProcessStopper stopper, ProcessCloser closer, ByteArrayOutputStream out, ProcessListener listener, MessageLogger messageLogger) {\n    this.closer = closer;\n        closer.close(process);\n",
            "src/main/java/org/zeroturnaround/exec/close/ProcessCloser.java": "package org.zeroturnaround.exec.close;\nimport java.io.IOException;\npublic interface ProcessCloser {\n  void close(Process process) throws IOException, InterruptedException;\n}\n",
            "src/main/java/org/zeroturnaround/exec/close/StandardProcessCloser.java": "package org.zeroturnaround.exec.close;\nimport java.io.IOException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.zeroturnaround.exec.stream.ExecuteStreamHandler;\npublic class StandardProcessCloser implements ProcessCloser {\n  private static final Logger log = LoggerFactory.getLogger(StandardProcessCloser.class);\n  protected final ExecuteStreamHandler streams;\n  public StandardProcessCloser(ExecuteStreamHandler streams) {\n    this.streams = streams;\n  }\n  public void close(Process process) throws IOException, InterruptedException {\n    if (streams != null) {\n      streams.stop();\n    }\n    closeStreams(process);\n  }\n  private void closeStreams(final Process process) throws IOException {\n    IOException caught = null;\n    try {\n      process.getOutputStream().close();\n    }\n    catch (IOException e) {\n      log.error(\"Failed to close process output stream:\", e);\n      caught = e;\n    }\n    try {\n      process.getInputStream().close();\n    }\n    catch (IOException e) {\n      log.error(\"Failed to close process input stream:\", e);\n      caught = e;\n    }\n    try {\n      process.getErrorStream().close();\n    }\n    catch (IOException e) {\n      log.error(\"Failed to close process error stream:\", e);\n      caught = e;\n    }\n    if (caught != null) {\n      throw caught;\n    }\n  }\n}\n",
            "src/main/java/org/zeroturnaround/exec/close/TimeoutProcessCloser.java": "package org.zeroturnaround.exec.close;\nimport java.io.IOException;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.zeroturnaround.exec.stream.ExecuteStreamHandler;\nimport org.zeroturnaround.exec.stream.PumpStreamHandler;\npublic class TimeoutProcessCloser extends StandardProcessCloser {\n  private static final Logger log = LoggerFactory.getLogger(TimeoutProcessCloser.class);\n  private final long timeout;\n  private final TimeUnit unit;\n  public TimeoutProcessCloser(ExecuteStreamHandler streams, long timeout, TimeUnit unit) {\n    super(streams);\n    this.timeout = timeout;\n    this.unit = unit;\n  }\n  public void close(final Process process) throws IOException, InterruptedException {\n    ExecutorService service = Executors.newSingleThreadScheduledExecutor();\n    Future<Void> future = service.submit(new Callable<Void>() {\n      public Void call() throws Exception {\n        doClose(process);\n        return null;\n      }\n    });\n    service.shutdown();\n    try {\n      future.get(timeout, unit);\n    }\n    catch (ExecutionException e) {\n      throw new IllegalStateException(\"Could not close streams of \" + process, e.getCause());\n    }\n    catch (TimeoutException e) {\n      log.warn(\"Could not close streams of {} in {} {}\", process, timeout, unit);\n    }\n    finally {\n      if (streams instanceof PumpStreamHandler) {\n        ((PumpStreamHandler) streams).flush();\n      }\n    }\n  }\n  protected void doClose(final Process process) throws IOException, InterruptedException {\n    super.close(process);\n  }\n}\n",
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": "    flush();\n  }\n  public void flush() {\n    if (err != null && err != out) {\n      log.trace(\"Flushing error stream {}...\", err);\n      try {\n        err.flush();\n      } catch (IOException e) {\n        log.error(\"Got exception while flushing the error stream\", e);\n      }\n    }\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "ProcessExecutorInputStreamTest",
            "ProcessExecutorTimeoutTest",
            "ProcessExecutorArgsWithExtraSpaceTest",
            "ProcessExecutorStreamCloseTest",
            "InputStreamPumperTest",
            "ProcessExecutorCommandLineTest",
            "ProcessExecutorShutdownHookTest",
            "ProcessExecutorExitValueTest",
            "ProcessExecutorLoggerTest",
            "ProcessExecutorHelloWorldTest",
            "CallerLoggerUtilTest",
            "ProcessExecutorBigOutputTest",
            "ProcessExecutorMainTest"
        ],
        "prev_commit": "f567d41a",
        "queries": {
            "src/main/java/org/zeroturnaround/exec/ProcessExecutor.java": "DEBUG MessageLoggers messageLogger MessageLogger listeners readOutput closeTimeoutUnit closeTimeout streams stopper timeoutUnit timeout Long Long allowedExitValues environment String String String String new new new builder ProcessBuilder ProcessBuilder true DEFAULT_REDIRECT_ERROR_STREAM boolean boolean NORMAL_EXIT_VALUE null DEFAULT_EXIT_VALUES Integer Integer Integer getLogger log final final final final final final final static static static static private private private private private private private private private private private private private private ProcessExecutor ProcessExecutor class class public public public Slf4jStream Slf4jInfoOutputStream Slf4jDebugOutputStream PumpStreamHandler ExecuteStreamHandler ExecuteStreamHandler CallerLoggerUtil stream stream stream stream stream stream ProcessStopper ProcessStopper NopProcessStopper DestroyProcessStopper stop stop stop ShutdownHookProcessDestroyer ProcessListener ProcessDestroyer DestroyerListenerAdapter CompositeProcessListener CompositeProcessListener CompositeProcessListener listener listener listener listener listener TimeoutProcessCloser StandardProcessCloser ProcessCloser close close close LoggerFactory LoggerFactory Logger Logger slf4j slf4j slf4j slf4j slf4j TeeOutputStream NullOutputStream output output commons commons apache apache TimeoutException TimeUnit TimeUnit TimeUnit ThreadFactory Future Executors ExecutorService ExecutionException concurrent concurrent concurrent concurrent concurrent concurrent concurrent Set Set Entry Map Map Map List LinkedHashMap LinkedHashMap HashSet Arrays ArrayList util util util util util util util util util util util util util util util OutputStream InputStream IOException File ByteArrayOutputStream io io io io io io io java java java java java java java java java java java java java java java java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org org org org org org org org org org org org org org org org org package ",
            "src/main/java/org/zeroturnaround/exec/WaitForProcess.java": "checkExit new result result result getCurrentOutput output output ProcessOutput \"Stopping {}...\" if finally finally \"{} stopped with exit code {}\" message message true waitFor false finished finished finished boolean exit exit exit exit currentThread try try InterruptedException throws call return return getProcess this this this this this this this this this public public public workerThread workerThread Thread Thread volatile messageLogger messageLogger messageLogger messageLogger messageLogger messageLogger MessageLogger MessageLogger out out out out closer closer closer closer closer stopper stopper stopper stopper stopper attributes attributes attributes attributes ProcessAttributes ProcessAttributes process process process process process process process process Process Process Process MAX_OUTPUT_SIZE_IN_ERROR_MESSAGE int int getLogger log log log final final final final final final final final final static static private private private private private private private private private private ProcessResult ProcessResult ProcessResult ProcessResult implements WaitForProcess WaitForProcess WaitForProcess class class ProcessStopper ProcessStopper ProcessStopper stop stop ProcessListener ProcessListener ProcessListener listener listener listener listener listener ProcessCloser ProcessCloser ProcessCloser close close LoggerFactory LoggerFactory Logger Logger slf4j slf4j TimeoutException Callable Callable concurrent concurrent Set util util util IOException IOException ByteArrayOutputStream ByteArrayOutputStream ByteArrayOutputStream io io java java java java java import import import import import import import import import import exec exec exec exec zeroturnaround zeroturnaround zeroturnaround zeroturnaround org org org org org org package ",
            "src/main/java/org/zeroturnaround/exec/close/ProcessCloser.java": "InterruptedException throws process Process void ProcessCloser interface public IOException IOException io java import close close exec zeroturnaround org package ",
            "src/main/java/org/zeroturnaround/exec/close/StandardProcessCloser.java": "throw \"Failed to close process error stream:\" getErrorStream \"Failed to close process input stream:\" getInputStream \"Failed to close process output stream:\" error error error e e e e e e e e e catch catch catch getOutputStream try try try caught caught caught caught caught caught closeStreams closeStreams stop null null null if if InterruptedException throws throws process process process process process process Process Process void void this streams streams streams streams streams streams protected getLogger log log log log final final final static private private ProcessCloser implements StandardProcessCloser StandardProcessCloser StandardProcessCloser class class public public public ExecuteStreamHandler ExecuteStreamHandler ExecuteStreamHandler stream LoggerFactory LoggerFactory Logger Logger slf4j slf4j IOException IOException IOException IOException IOException IOException IOException io java import import import import close close close close close exec exec zeroturnaround zeroturnaround org org org org package ",
            "src/main/java/org/zeroturnaround/exec/close/TimeoutProcessCloser.java": "null return doClose Exception call new submit future Void Void Void newSingleThreadScheduledExecutor service service InterruptedException throws throws process process Process void this this super streams streams unit unit unit unit timeout timeout timeout timeout long long getLogger log final final final final static private private private StandardProcessCloser extends TimeoutProcessCloser TimeoutProcessCloser TimeoutProcessCloser class class public public public public PumpStreamHandler ExecuteStreamHandler ExecuteStreamHandler stream stream LoggerFactory LoggerFactory Logger Logger slf4j slf4j TimeoutException TimeUnit TimeUnit TimeUnit Future Future Executors Executors ExecutorService ExecutorService ExecutionException Callable Callable concurrent concurrent concurrent concurrent concurrent concurrent concurrent util util util util util util util IOException IOException io java java java java java java java java import import import import import import import import import import import import close close exec exec exec zeroturnaround zeroturnaround zeroturnaround org org org org org package ",
            "src/main/java/org/zeroturnaround/exec/stream/PumpStreamHandler.java": "InterruptedException join \"Joining input thread {}...\" trace stopProcessing stop start start start start \"Got exception while closing output stream\" info e e e catch catch close try try true createPump else else createSystemInPump in os os os os setProcessInputStream createProcessErrorPump setProcessErrorStream createProcessOutputPump if if if if if if if if if is is is is setProcessOutputStream void void void void void null null null null null null null null null null outAndErr outAndErr outAndErr System System System this this this this this this inputStreamPumper inputStreamPumper inputStreamPumper InputStreamPumper input input input input input input input input err err err err err err err err err out out out out out out out out out inputThread inputThread inputThread inputThread inputThread inputThread inputThread inputThread inputThread errorThread errorThread errorThread outputThread outputThread outputThread Thread Thread Thread getLogger log log log final final final final final final final final final final final final final static private private private private private private private private ExecuteStreamHandler implements PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler PumpStreamHandler class class public public public public public public public public public public LoggerFactory LoggerFactory Logger Logger slf4j slf4j OutputStream OutputStream OutputStream OutputStream OutputStream OutputStream OutputStream OutputStream OutputStream InputStream InputStream InputStream InputStream InputStream IOException IOException io io io java java java import import import import import stream exec zeroturnaround org org org package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "CallerLoggerUtilTest": 3,
            "InputStreamPumperTest": 2,
            "ProcessExecutorArgsWithExtraSpaceTest": 1,
            "ProcessExecutorBigOutputTest": 6,
            "ProcessExecutorCommandLineTest": 5,
            "ProcessExecutorExitValueTest": 4,
            "ProcessExecutorHelloWorldTest": 11,
            "ProcessExecutorInputStreamTest": 1,
            "ProcessExecutorLoggerTest": 3,
            "ProcessExecutorMainTest": 17,
            "ProcessExecutorShutdownHookTest": 2,
            "ProcessExecutorStreamCloseTest": 2,
            "ProcessExecutorTimeoutTest": 2
        }
    }
]