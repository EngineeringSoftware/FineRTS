[
    {
        "commit": "1384457a",
        "prev_commit": "a67075b7",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ContextedExceptionTest",
            "NoFieldNamesToStringStyleTest",
            "StrBuilderTest",
            "StopWatchTest",
            "ArrayUtilsTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "StringEscapeUtilsTest",
            "DefaultToStringStyleTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "StringUtilsIsTest",
            "DurationFormatUtilsTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "SimpleToStringStyleTest",
            "StringUtilsEqualsIndexOfTest",
            "CharSetUtilsTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "NumberUtilsTest",
            "StringUtilsTrimEmptyTest",
            "ValidateTest",
            "LocaleUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "RecursiveToStringStyleTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "DefaultExceptionContextTest",
            "StringUtilsSubstringTest",
            "StrSubstitutorTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1033\" type=\"add\" dev=\"ggregory\">Add StringUtils.countMatches(CharSequence, char)</action>\n+    public static int countMatches(final CharSequence str, final char ch) {\n+        if (isEmpty(str)) {\n+            return 0;\n+        }\n+        int count = 0;\n+        for (int i = 0; i < str.length(); i++) {\n+            if (ch == str.charAt(i)) {\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+    @Test\n+    public void testCountMatches_char() {\n+        assertEquals(0, StringUtils.countMatches(null, 'D'));\n+        assertEquals(5, StringUtils.countMatches(\"one long someone sentence of one\", ' '));\n+        assertEquals(6, StringUtils.countMatches(\"one long someone sentence of one\", 'o'));\n+        assertEquals(4, StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "    public static int countMatches(final CharSequence str, final char ch) {\n        if (isEmpty(str)) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (ch == str.charAt(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
            "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java": "    @Test\n    public void testCountMatches_char() {\n        assertEquals(0, StringUtils.countMatches(null, 'D'));\n        assertEquals(5, StringUtils.countMatches(\"one long someone sentence of one\", ' '));\n        assertEquals(6, StringUtils.countMatches(\"one long someone sentence of one\", 'o'));\n        assertEquals(4, StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                5844,
                5845,
                5846,
                5847,
                5848,
                5850,
                5851,
                5852,
                5853,
                5854,
                5855,
                5856
            ],
            "src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java": [
                325,
                326,
                327,
                328,
                329,
                330,
                331
            ]
        },
        "starts_total_time": 1.2559771537780762,
        "ekstazi_total_time": 11.064783811569214,
        "ekstazi_select_time": 1.317131519317627,
        "starts_select_time": 1.2653872966766357,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "2e9a359f",
        "prev_commit": "c9e3793a",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 85,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 56,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 15,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConversionTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+                    return src[srcPos] ? 'f' : 'e';\n+                return src[srcPos] ? 'd' : 'c';\n+                return src[srcPos] ? 'b' : 'a';\n+            return src[srcPos] ? '9' : '8';\n+                return src[srcPos] ? '7' : '6';\n+            return src[srcPos] ? '5' : '4';\n+            return src[srcPos] ? '3' : '2';\n+        return src[srcPos] ? '1' : '0';\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "                    return src[srcPos] ? 'f' : 'e';\n                return src[srcPos] ? 'd' : 'c';\n                return src[srcPos] ? 'b' : 'a';\n            return src[srcPos] ? '9' : '8';\n                return src[srcPos] ? '7' : '6';\n            return src[srcPos] ? '5' : '4';\n            return src[srcPos] ? '3' : '2';\n        return src[srcPos] ? '1' : '0';\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                327,
                329,
                332,
                334,
                338,
                340,
                343,
                345
            ]
        },
        "starts_total_time": 1.2440242767333984,
        "ekstazi_total_time": 5.323220491409302,
        "ekstazi_select_time": 1.284571647644043,
        "starts_select_time": 1.2723605632781982,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "                    if (src[srcPos]) {\n                        return 'f';\n                    }\n                    return 'e';\n                if (src[srcPos]) {\n                    return 'd';\n                }\n                return 'c';\n                if (src[srcPos]) {\n                    return 'b';\n                }\n                return 'a';\n            if (src[srcPos]) {\n                return '9';\n            }\n            return '8';\n                if (src[srcPos]) {\n                    return '7';\n                }\n                return '6';\n            if (src[srcPos]) {\n                return '5';\n            }\n            return '4';\n            if (src[srcPos]) {\n                return '3';\n            }\n            return '2';\n        }\n        if (src[srcPos]) {\n            return '1';\n        return '0';\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                327,
                328,
                329,
                330,
                332,
                333,
                334,
                335,
                338,
                339,
                340,
                341,
                343,
                344,
                345,
                346,
                350,
                351,
                352,
                353,
                355,
                356,
                357,
                358,
                361,
                362,
                363,
                364,
                365,
                366,
                367,
                369
            ]
        }
    },
    {
        "commit": "7022c194",
        "prev_commit": "4fcfad95",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 56,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 15,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConstructorUtilsTest",
            "MethodUtilsTest",
            "NumberUtilsTest",
            "BooleanUtilsTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1016\" type=\"add\" dev=\"britter\" due-to=\"Juan Pablo Santos Rodr\u00edguez\">NumberUtils#isParsable method(s)</action>\n+    \n+    public static boolean isParsable(final String str) {\n+        if( StringUtils.endsWith( str, \".\" ) ) {\n+            return false;\n+        }\n+        return isDigits( StringUtils.replaceOnce( str, \".\", StringUtils.EMPTY ) );\n+    }\n+    \n+    @Test\n+    public void testIsParsable() {\n+        assertFalse( NumberUtils.isParsable(null) );\n+        assertFalse( NumberUtils.isParsable(\"\") );\n+        assertFalse( NumberUtils.isParsable(\"0xC1AB\") );\n+        assertFalse( NumberUtils.isParsable(\"65CBA2\") );\n+        assertFalse( NumberUtils.isParsable(\"pendro\") );\n+        assertFalse( NumberUtils.isParsable(\"64,2\") );\n+        assertFalse( NumberUtils.isParsable(\"64.2.2\") );\n+        assertFalse( NumberUtils.isParsable(\"64.\") );\n+        assertFalse( NumberUtils.isParsable(\"64L\") );\n+        assertTrue( NumberUtils.isParsable(\"64.2\") );\n+        assertTrue( NumberUtils.isParsable(\"64\") );\n+        assertTrue(NumberUtils.isParsable(\"018\"));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "    public static boolean isParsable(final String str) {\n        if( StringUtils.endsWith( str, \".\" ) ) {\n            return false;\n        }\n        return isDigits( StringUtils.replaceOnce( str, \".\", StringUtils.EMPTY ) );\n    }\n",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": "    @Test\n    public void testIsParsable() {\n        assertFalse( NumberUtils.isParsable(null) );\n        assertFalse( NumberUtils.isParsable(\"\") );\n        assertFalse( NumberUtils.isParsable(\"0xC1AB\") );\n        assertFalse( NumberUtils.isParsable(\"65CBA2\") );\n        assertFalse( NumberUtils.isParsable(\"pendro\") );\n        assertFalse( NumberUtils.isParsable(\"64,2\") );\n        assertFalse( NumberUtils.isParsable(\"64.2.2\") );\n        assertFalse( NumberUtils.isParsable(\"64.\") );\n        assertFalse( NumberUtils.isParsable(\"64L\") );\n        assertTrue( NumberUtils.isParsable(\"64.2\") );\n        assertTrue( NumberUtils.isParsable(\"64\") );\n        assertTrue(NumberUtils.isParsable(\"018\"));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                1486,
                1487,
                1488,
                1489,
                1490,
                1491
            ],
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": [
                1258,
                1259,
                1260,
                1261,
                1262,
                1263,
                1264,
                1265,
                1266,
                1267,
                1268,
                1269,
                1270,
                1271,
                1272
            ]
        },
        "starts_total_time": 1.3276197910308838,
        "ekstazi_total_time": 5.526414394378662,
        "ekstazi_select_time": 1.290149211883545,
        "starts_select_time": 1.228247880935669,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "6240a05c",
        "prev_commit": "673dbc57",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 56,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 15,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConstructorUtilsTest",
            "MethodUtilsTest",
            "NumberUtilsTest",
            "BooleanUtilsTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        if( StringUtils.startsWith( str, \"-\" ) ) {\n+            return isDigits( StringUtils.replaceOnce( StringUtils.substring( str, 1 ), \".\", StringUtils.EMPTY ) );\n+        } else {\n+            return isDigits( StringUtils.replaceOnce( str, \".\", StringUtils.EMPTY ) );\n+        }\n+        assertTrue( NumberUtils.isParsable(\"018\") );\n+        assertTrue( NumberUtils.isParsable(\".18\") );\n+        assertTrue( NumberUtils.isParsable(\"-65\") );\n+        assertTrue( NumberUtils.isParsable(\"-018\") );\n+        assertTrue( NumberUtils.isParsable(\"-018.2\") );\n+        assertTrue( NumberUtils.isParsable(\"-.236\") );\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "        if( StringUtils.startsWith( str, \"-\" ) ) {\n            return isDigits( StringUtils.replaceOnce( StringUtils.substring( str, 1 ), \".\", StringUtils.EMPTY ) );\n        } else {\n            return isDigits( StringUtils.replaceOnce( str, \".\", StringUtils.EMPTY ) );\n        }\n",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": "        assertTrue( NumberUtils.isParsable(\"018\") );\n        assertTrue( NumberUtils.isParsable(\".18\") );\n        assertTrue( NumberUtils.isParsable(\"-65\") );\n        assertTrue( NumberUtils.isParsable(\"-018\") );\n        assertTrue( NumberUtils.isParsable(\"-018.2\") );\n        assertTrue( NumberUtils.isParsable(\"-.236\") );\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                1491,
                1492,
                1493,
                1494,
                1495
            ],
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": [
                1271,
                1272,
                1273,
                1274,
                1275,
                1276
            ]
        },
        "starts_total_time": 1.287344217300415,
        "ekstazi_total_time": 5.3211445808410645,
        "ekstazi_select_time": 1.291383981704712,
        "starts_select_time": 1.2596399784088135,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "        return isDigits( StringUtils.replaceOnce( str, \".\", StringUtils.EMPTY ) );\n",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": "        assertTrue(NumberUtils.isParsable(\"018\"));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                1491
            ],
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": [
                1271
            ]
        }
    },
    {
        "commit": "3fa5334a",
        "prev_commit": "de67dec0",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/JavaVersion.java",
            "src/test/java/org/apache/commons/lang3/JavaVersionTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/JavaVersion.java",
            "src/test/java/org/apache/commons/lang3/JavaVersionTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ClassUtilsTest",
            "TypeUtilsTest",
            "DiffResultTest",
            "JavaVersionTest",
            "SystemUtilsTest",
            "DiffBuilderTest",
            "DiffTest",
            "MethodUtilsTest",
            "ExtendedMessageFormatTest",
            "DateUtilsTest",
            "TypeLiteralTest",
            "CharEncodingTest",
            "LocaleUtilsTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    JAVA_1_8(1.8f, \"1.8\"),\n+    JAVA_1_9(1.9f, \"1.9\"),\n+    JAVA_RECENT(maxVersion(), Float.toString(maxVersion()));\n+        } else if (\"1.9\".equals(nom)) {\n+            return JAVA_1_9;\n+        }\n+        if (nom == null) {\n+        final float v = toFloatVersion(nom);\n+        if ((v - 1.) < 1.) { // then we need to check decimals > .9\n+            final int firstComma = Math.max(nom.indexOf('.'), nom.indexOf(','));\n+            final int end = Math.max(nom.length(), nom.indexOf(',', firstComma));\n+            if (Float.parseFloat(nom.substring(firstComma + 1, end)) > .9f) {\n+                return JAVA_RECENT;\n+            }\n+        }\n+        return null;\n+    private static float maxVersion() {\n+        final float v = toFloatVersion(System.getProperty(\"java.version\", \"2.0\"));\n+        if (v > 0) {\n+            return v;\n+        }\n+        return 2f;\n+    }\n+    private static float toFloatVersion(final String name) {\n+        final String[] toParse = name.split(\"\\\\.\");\n+        if (toParse.length >= 2) {\n+            try {\n+                return Float.parseFloat(toParse[0] + '.' + toParse[1]);\n+            } catch (final NumberFormatException nfe) {\n+            }\n+        }\n+        return -1;\n+    }\n+        assertEquals(\"1.9 failed\", JAVA_1_9, get(\"1.9\"));\n+        assertEquals(\"1.10 failed\", JAVA_RECENT, get(\"1.10\"));\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/JavaVersion.java": "    JAVA_1_8(1.8f, \"1.8\"),\n    JAVA_1_9(1.9f, \"1.9\"),\n    JAVA_RECENT(maxVersion(), Float.toString(maxVersion()));\n        } else if (\"1.9\".equals(nom)) {\n            return JAVA_1_9;\n        }\n        if (nom == null) {\n        final float v = toFloatVersion(nom);\n        if ((v - 1.) < 1.) { // then we need to check decimals > .9\n            final int firstComma = Math.max(nom.indexOf('.'), nom.indexOf(','));\n            final int end = Math.max(nom.length(), nom.indexOf(',', firstComma));\n            if (Float.parseFloat(nom.substring(firstComma + 1, end)) > .9f) {\n                return JAVA_RECENT;\n            }\n        }\n        return null;\n    private static float maxVersion() {\n        final float v = toFloatVersion(System.getProperty(\"java.version\", \"2.0\"));\n        if (v > 0) {\n            return v;\n        }\n        return 2f;\n    }\n    private static float toFloatVersion(final String name) {\n        final String[] toParse = name.split(\"\\\\.\");\n        if (toParse.length >= 2) {\n            try {\n                return Float.parseFloat(toParse[0] + '.' + toParse[1]);\n            } catch (final NumberFormatException nfe) {\n            }\n        }\n        return -1;\n    }\n",
            "src/test/java/org/apache/commons/lang3/JavaVersionTest.java": "import static org.apache.commons.lang3.JavaVersion.JAVA_RECENT;\nimport static org.apache.commons.lang3.JavaVersion.JAVA_1_9;\n        assertEquals(\"1.9 failed\", JAVA_1_9, get(\"1.9\"));\n        assertEquals(\"1.10 failed\", JAVA_RECENT, get(\"1.10\"));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/JavaVersion.java": [
                72,
                77,
                82,
                160,
                161,
                162,
                163,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                199,
                200,
                201,
                202,
                203,
                204,
                206,
                207,
                208,
                209
            ],
            "src/test/java/org/apache/commons/lang3/JavaVersionTest.java": [
                23,
                34,
                56,
                57
            ]
        },
        "starts_total_time": 1.2640604972839355,
        "ekstazi_total_time": 5.827464818954468,
        "ekstazi_select_time": 1.3388919830322266,
        "starts_select_time": 1.2494003772735596,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/JavaVersion.java": "    JAVA_1_8(1.8f, \"1.8\");\n        } else {\n",
            "src/test/java/org/apache/commons/lang3/JavaVersionTest.java": "        assertNull(\"1.9 unexpectedly worked\", get(\"1.9\"));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/JavaVersion.java": [
                72,
                150
            ],
            "src/test/java/org/apache/commons/lang3/JavaVersionTest.java": [
                53
            ]
        }
    },
    {
        "commit": "96c30e24",
        "prev_commit": "ba8c6f6d",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
            "src/main/java/org/apache/commons/lang3/CharSequenceUtils.java",
            "src/main/java/org/apache/commons/lang3/ClassPathUtils.java",
            "src/main/java/org/apache/commons/lang3/ClassUtils.java",
            "src/main/java/org/apache/commons/lang3/EnumUtils.java",
            "src/main/java/org/apache/commons/lang3/LocaleUtils.java",
            "src/main/java/org/apache/commons/lang3/ObjectUtils.java",
            "src/main/java/org/apache/commons/lang3/RandomUtils.java",
            "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "src/main/java/org/apache/commons/lang3/Validate.java",
            "src/main/java/org/apache/commons/lang3/builder/Diff.java",
            "src/main/java/org/apache/commons/lang3/builder/DiffResult.java",
            "src/main/java/org/apache/commons/lang3/builder/RecursiveToStringStyle.java",
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java",
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java",
            "src/main/java/org/apache/commons/lang3/reflect/TypeLiteral.java",
            "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
            "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java",
            "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java",
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnpairedSurrogateRemover.java",
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java",
            "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java",
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
            "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
            "src/test/java/org/apache/commons/lang3/ClassPathUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/NotImplementedExceptionTest.java",
            "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/RandomUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffResultTest.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffTest.java",
            "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
            "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
            "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
        ],
        "changed_files_num": 46,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
            "src/main/java/org/apache/commons/lang3/CharSequenceUtils.java",
            "src/main/java/org/apache/commons/lang3/ClassPathUtils.java",
            "src/main/java/org/apache/commons/lang3/ClassUtils.java",
            "src/main/java/org/apache/commons/lang3/EnumUtils.java",
            "src/main/java/org/apache/commons/lang3/LocaleUtils.java",
            "src/main/java/org/apache/commons/lang3/ObjectUtils.java",
            "src/main/java/org/apache/commons/lang3/RandomUtils.java",
            "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "src/main/java/org/apache/commons/lang3/Validate.java",
            "src/main/java/org/apache/commons/lang3/builder/Diff.java",
            "src/main/java/org/apache/commons/lang3/builder/DiffResult.java",
            "src/main/java/org/apache/commons/lang3/builder/RecursiveToStringStyle.java",
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java",
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java",
            "src/main/java/org/apache/commons/lang3/reflect/TypeLiteral.java",
            "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
            "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java",
            "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java",
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnpairedSurrogateRemover.java",
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java",
            "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java",
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
            "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
            "src/test/java/org/apache/commons/lang3/ClassPathUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/NotImplementedExceptionTest.java",
            "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/RandomUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffResultTest.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffTest.java",
            "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java",
            "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",
            "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
        ],
        "changed_java_files_num": 46,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 85,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 56,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 15,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "StringEscapeUtilsTest",
            "ClassPathUtilsTest",
            "DiffResultTest",
            "FastDateFormatTest",
            "NotImplementedExceptionTest",
            "NumberUtilsTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    public static void reverse(final boolean[] array, final int startIndexInclusive, final int endIndexExclusive) {\n+    public static void reverse(final byte[] array, final int startIndexInclusive, final int endIndexExclusive) {\n+    public static void reverse(final char[] array, final int startIndexInclusive, final int endIndexExclusive) {\n+    public static void reverse(final double[] array, final int startIndexInclusive, final int endIndexExclusive) {\n+    public static void reverse(final float[] array, final int startIndexInclusive, final int endIndexExclusive) {\n+    public static void reverse(final int[] array, final int startIndexInclusive, final int endIndexExclusive) {\n+    public static void reverse(final long[] array, final int startIndexInclusive, final int endIndexExclusive) {\n+    public static void reverse(final Object[] array, final int startIndexInclusive, final int endIndexExclusive) {\n+    public static void reverse(final short[] array, final int startIndexInclusive, final int endIndexExclusive) {\n+            final char c1 = cs.charAt(index1++);\n+            final char c2 = substring.charAt(index2++);\n+        final StringBuilder sb = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Map.Entry<String, String> e : m.entrySet()) {\n+    public static Iterable<Class<?>> hierarchy(final Class<?> type, final Interfaces interfacesBehavior) {\n+                    private void walkInterfaces(final Set<Class<?>> addTo, final Class<?> c) {\n+                        for (final Class<?> iface : c.getInterfaces()) {\n+        final long[] lvalues = ArrayUtils.clone(Validate.notNull(values));\n+        final String[] split = str.split(\"_\", -1);\n+        final int occurrences = split.length -1;\n+                final int tmpHash = ObjectUtils.hashCode(object);\n+    public static byte[] nextBytes(final int count) {\n+        final byte[] result = new byte[count];\n+    public static int nextInt(final int startInclusive, final int endExclusive) {\n+    public static long nextLong(final long startInclusive, final long endExclusive) {\n+    public static double nextDouble(final double startInclusive, final double endInclusive) {\n+    public static float nextFloat(final float startInclusive, final float endInclusive) {\n+    public static boolean isAnyEmpty(final CharSequence... css) {\n+      for (final CharSequence cs : css){\n+    public static boolean isNoneEmpty(final CharSequence... css) {\n+    public static boolean isAnyBlank(final CharSequence... css) {\n+      for (final CharSequence cs : css){\n+    public static boolean isNoneBlank(final CharSequence... css) {\n+            final\n+        final char firstChar = str.charAt(0);\n+        final char firstChar = str.charAt(0);\n+            final char queryChar = queryLowerCase.charAt(queryIndex);\n+                final char termChar = termLowerCase.charAt(termIndex);\n+    private static int transpositions(final CharSequence first, final CharSequence second) {\n+    private static int commonPrefixLength(final CharSequence first, final CharSequence second) {\n+    public static String toEncodedString(final byte[] bytes, final Charset charset) {\n+    public static String wrap(final String str, final char wrapWith) {\n+    public static String wrap(final String str, final String wrapWith) {\n+    public static void inclusiveBetween(final long start, final long end, final long value) {\n+    public static void inclusiveBetween(final long start, final long end, final long value, final String message) {\n+    public static void inclusiveBetween(final double start, final double end, final double value) {\n+    public static void inclusiveBetween(final double start, final double end, final double value, final String message) {\n+    public static void exclusiveBetween(final long start, final long end, final long value) {\n+    public static void exclusiveBetween(final long start, final long end, final long value, final String message) {\n+    public static void exclusiveBetween(final double start, final double end, final double value) {\n+    public static void exclusiveBetween(final double start, final double end, final double value, final String message) {\n+    protected Diff(final String fieldName) {\n+    public final T setValue(final T value) {\n+    public String toString(final ToStringStyle style) {\n+        final ToStringBuilder lhsBuilder = new ToStringBuilder(lhs, style);\n+        final ToStringBuilder rhsBuilder = new ToStringBuilder(rhs, style);\n+        for (final Diff<?> diff : diffs) {\n+    public void appendDetail(final StringBuffer buffer, final String fieldName, final Object value) {\n+    protected void appendDetail(final StringBuffer buffer, final String fieldName, final Collection<?> coll) {\n+    public static Field[] getAllFields(final Class<?> cls) {\n+    public static List<Field> getAllFieldsList(final Class<?> cls) {\n+            for (final Field field : declaredFields) {\n+    public static void removeFinalModifier(final Field field) {\n+    public static void removeFinalModifier(final Field field, final boolean forceAccess) {\n+                final Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+        } catch (final NoSuchFieldException ignored) {\n+        } catch (final IllegalAccessException ignored) {\n+                final Method method = getAccessibleMethodFromInterfaceNest(interfaces[i],\n+    public static Set<Method> getOverrideHierarchy(final Method method, final Interfaces interfacesBehavior) {\n+    public final boolean equals(final Object obj) {\n+        public WildcardTypeBuilder withUpperBounds(final Type... bounds) {\n+        public WildcardTypeBuilder withLowerBounds(final Type... bounds) {\n+        private GenericArrayTypeImpl(final Type componentType) {\n+        public boolean equals(final Object obj) {\n+        private ParameterizedTypeImpl(final Class<?> raw, final Type useOwner, final Type[] typeArguments) {\n+        public boolean equals(final Object obj) {\n+        private WildcardTypeImpl(final Type[] upperBounds, final Type[] lowerBounds) {\n+        public boolean equals(final Object obj) {\n+    public static boolean containsTypeVariables(final Type type) {\n+            for (final Type arg : ((ParameterizedType) type).getActualTypeArguments()) {\n+            final WildcardType wild = (WildcardType) type;\n+    private static Type[] extractTypeArgumentsFrom(final Map<TypeVariable<?>, Type> mappings, final TypeVariable<?>[] variables) {\n+        for (final TypeVariable<?> var : variables) {\n+    public static boolean equals(final Type t1, final Type t2) {\n+    private static boolean equals(final ParameterizedType p, final Type t) {\n+    private static boolean equals(final GenericArrayType a, final Type t) {\n+    private static boolean equals(final WildcardType w, final Type t) {\n+    private static boolean equals(final Type[] t1, final Type[] t2) {\n+    public static String toString(final Type type) {\n+    public static String toLongString(final TypeVariable<?> var) {\n+    private static String classToString(final Class<?> c) {\n+    private static String typeVariableToString(final TypeVariable<?> v) {\n+    private static String parameterizedTypeToString(final ParameterizedType p) {\n+    private static String wildcardTypeToString(final WildcardType w) {\n+    private static String genericArrayTypeToString(final GenericArrayType g) {\n+    private static StringBuilder appendAllTo(final StringBuilder buf, final String sep, final Type... types) {\n+    public String replace(final CharSequence source) {\n+    public String replace(final CharSequence source, final int offset, final int length) {\n+        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n+    public boolean replaceIn(final StringBuilder source) {\n+    public boolean replaceIn(final StringBuilder source, final int offset, final int length) {\n+        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n+        final int remaining = input.length() - index - 1; // how many characters left, ignoring the first \\\n+        final StringBuilder builder = new StringBuilder();\n+            final int next = index + 1;\n+            final int next2 = index + 2;\n+            final int next3 = index + 3;\n+    private boolean isOctalDigit(final char ch) {\n+    private boolean isZeroToThree(final char ch) {\n+    public boolean translate(final int codepoint, final Writer out) throws IOException {\n+        final int offset = (unit == TimeUnit.DAYS) ? 0 : 1;\n+            final long milliseconds, final boolean padWithZeros) {\n+                        final int width = padWithZeros ? Math.max(3, count) : 3;\n+            for (final Token token : tokens) {\n+    private void init(final Calendar definingCalendar) {\n+        final int trial= century + twoDigitYear;\n+            final Map<String, Integer> keyValues = getDisplayNames(field, definingCalendar, locale);\n+            for(final Map.Entry<String, Integer> entry : keyValues.entrySet()) {\n+            for (final String[] zone : zones) {\n+    F getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, final Locale locale) {\n+    F getDateInstance(final int dateStyle, final TimeZone timeZone, final Locale locale) {\n+    F getTimeInstance(final int timeStyle, final TimeZone timeZone, final Locale locale) {\n+        final String expected = \"org.apache.commons.lang3.Test.properties\";\n+        final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, \"Test.properties\");\n+        final String expected = \"org.apache.commons.lang3.Test.properties\";\n+        final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), \"Test.properties\");\n+        final String expected = \"org/apache/commons/lang3/Test.properties\";\n+        final String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, \"Test.properties\");\n+        final String expected = \"org/apache/commons/lang3/Test.properties\";\n+        final String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), \"Test.properties\");\n+        for (final String str : Arrays.asList(\"udm\", \"tet\")) {\n+            final Locale locale = LocaleUtils.toLocale(str);\n+        final Locale[] locales = Locale.getAvailableLocales();\n+        for (final Locale l : locales) {\n+            final Locale locale = new Locale(l.getLanguage(), l.getCountry(), l.getVariant());\n+                    } catch (final IllegalArgumentException iae) {\n+                final Locale loc = LocaleUtils.toLocale(str);\n+        final Throwable nested = new RuntimeException();\n+        final String message = \"Not Implemented\";\n+        final String code = \"CODE\";\n+    private void assertCorrect(final String assertMessage, final NotImplementedException nie, final String message, final Throwable nested, final String code) {\n+        } catch(final IOException ex) {\n+        } catch (final IOException ex) {\n+        } catch (final IOException ex) {\n+        final byte[] result = RandomUtils.nextBytes(20);\n+        final int result = RandomUtils.nextInt(33, 42);\n+        final double result = RandomUtils.nextDouble(33d, 42d);\n+        final double result = RandomUtils.nextFloat(33f, 42f);\n+        final long result = RandomUtils.nextLong(33L, 42L);\n+        final int result = RandomUtils.nextInt(0, Integer.MAX_VALUE);\n+        final long result = RandomUtils.nextLong(0, Long.MAX_VALUE);\n+        final float result = RandomUtils.nextFloat(0, Float.MAX_VALUE);\n+        final double result = RandomUtils.nextDouble(0, Double.MAX_VALUE);\n+        final HashMap<Object, Object> newMap = SerializationUtils.roundtrip(iMap);\n+        for (final String[] element : HTML_ESCAPES) {\n+        for (final String[] element : HTML_ESCAPES) {\n+        final String bellsTest = \"\\ud83d\\udc80\\ud83d\\udd14\";\n+        final String value = StringEscapeUtils.escapeJava(bellsTest);\n+        final String valueTest = StringEscapeUtils.unescapeJava(value);\n+        final String expected = \"\\\\\\\"foo\\\\\\\" isn't \\\\\\\"bar\\\\\\\". specials: \\\\b\\\\r\\\\n\\\\f\\\\t\\\\\\\\\\\\/\";\n+        final String input =\"\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\/\";\n+        final String hs = String.valueOf(((char) 160));\n+        public DiffResult diff(final TypeTestClass obj) {\n+        public boolean equals(final Object obj) {\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final Diff<?> diff = list.getDiffs().get(0);\n+        final TypeTestClass class1 = new TypeTestClass();\n+        final TypeTestClass class2 = new TypeTestClass();\n+        final DiffResult list = class1.diff(class2);\n+        final DiffResult list = new DiffBuilder(\"String1\", \"String2\", SHORT_STYLE)\n+        final TypeTestClass testClass = new TypeTestClass();        \n+        final DiffResult list = new DiffBuilder(testClass, testClass, SHORT_STYLE)\n+        final TypeTestClass testClass1 = new TypeTestClass();\n+        final TypeTestClass testClass2 = new TypeTestClass();\n+        final DiffResult list = new DiffBuilder(testClass1, testClass2, SHORT_STYLE)\n+        final TypeTestClass class1 = new TypeTestClass();\n+        private final boolean booleanField;\n+        public SimpleClass(final boolean booleanField) {\n+        public DiffResult diff(final SimpleClass obj) {\n+        final SimpleClass lhs = new SimpleClass(true);\n+        final SimpleClass rhs = new SimpleClass(false);\n+        final List<Diff<?>> diffs = lhs.diff(rhs).getDiffs();\n+        final DiffResult list = new DiffResult(lhs, rhs, diffs, SHORT_STYLE);\n+        final SimpleClass lhs = new SimpleClass(true);\n+        final SimpleClass rhs = new SimpleClass(false);\n+        final List<Diff<?>> diffs = lhs.diff(rhs).getDiffs();\n+        final Iterator<Diff<?>> expectedIterator = diffs.iterator();\n+        final DiffResult list = new DiffResult(lhs, rhs, diffs, SHORT_STYLE);\n+        final Iterator<Diff<?>> iterator = list.iterator();\n+        final DiffResult list = new DiffBuilder(new EmptyClass(), new EmptyClass(),\n+        final DiffResult list = SIMPLE_FALSE.diff(SIMPLE_TRUE);\n+        final String lhsString = new ToStringBuilder(SIMPLE_FALSE,\n+        final String rhsString = new ToStringBuilder(SIMPLE_TRUE,\n+        final String expectedOutput = String.format(\"%s differs from %s\", lhsString,\n+        final DiffResult diffResult = new DiffResult(SIMPLE_TRUE, SIMPLE_FALSE, SIMPLE_TRUE\n+        final DiffResult diffResult = new DiffBuilder(SIMPLE_TRUE, SIMPLE_TRUE,\n+        protected BooleanDiff(final String fieldName) {\n+        final Object[] o1 = new Object[] { one };\n+        final Object[] o2 = new Object[] { two };\n+        final Object[] o3 = new Object[] { one };\n+        final double[] d1 = { 0, 1 };\n+        final double[] d2 = { 2, 3 };\n+        final double[] d3 = { 0, 1 };\n+        final String shouldBeFloat = \"1.23\";\n+        final String shouldBeDouble = \"3.40282354e+38\";\n+        final String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n+        final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\n+        final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\n+        final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\n+        final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\");\n+        for (final Method m : MethodUtils.getOverrideHierarchy(method, Interfaces.INCLUDE)) {\n+        for (final Method m : MethodUtils.getOverrideHierarchy(method, Interfaces.EXCLUDE)) {\n+        MethodDescriptor(final Class<?> declaringClass, final String name, final Type... parameterTypes) {\n+    public void consume(final T t) {\n+    public void consume(final String t) {\n+        final char groupingSeparator = DecimalFormatSymbols.getInstance().getGroupingSeparator();\n+        final String expected = \"Hi Alice 5\" + groupingSeparator + \"000\";\n+            final StrBuilder sb = new StrBuilder();\n+            final int len = sb.readFrom(new StringReader(s));\n+        final StrBuilder sb = new StrBuilder(\"Test\");\n+            final StrBuilder sb = new StrBuilder();\n+            final int len = sb.readFrom(CharBuffer.wrap(s));\n+        final StrBuilder sb = new StrBuilder(\"Test\");\n+            final StrBuilder sb = new StrBuilder();\n+            final int len = sb.readFrom(new MockReadable(s));\n+        final StrBuilder sb = new StrBuilder(\"Test\");\n+        final Calendar c = Calendar.getInstance();\n+        final String pattern = \"yyyy-MM-dd'T'\";\n+    private Calendar getEraStart(int year, final TimeZone zone, final Locale locale) {\n+        final Calendar cal = Calendar.getInstance(zone, locale);\n+    private void validateSdfFormatFdpParseEquality(final String format, final Locale locale, final TimeZone tz, final DateParser fdp, final Date in, final int year, final Date cs) throws ParseException {\n+                        final Calendar cal= getEraStart(year, tz, locale);\n+                        final Date centuryStart= cal.getTime();\n+                        final Date in= cal.getTime();\n+        final Calendar expected = Calendar.getInstance(NEW_YORK, Locale.US);\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": "    public static void reverse(final boolean[] array, final int startIndexInclusive, final int endIndexExclusive) {\n    public static void reverse(final byte[] array, final int startIndexInclusive, final int endIndexExclusive) {\n    public static void reverse(final char[] array, final int startIndexInclusive, final int endIndexExclusive) {\n    public static void reverse(final double[] array, final int startIndexInclusive, final int endIndexExclusive) {\n    public static void reverse(final float[] array, final int startIndexInclusive, final int endIndexExclusive) {\n    public static void reverse(final int[] array, final int startIndexInclusive, final int endIndexExclusive) {\n    public static void reverse(final long[] array, final int startIndexInclusive, final int endIndexExclusive) {\n    public static void reverse(final Object[] array, final int startIndexInclusive, final int endIndexExclusive) {\n    public static void reverse(final short[] array, final int startIndexInclusive, final int endIndexExclusive) {\n",
            "src/main/java/org/apache/commons/lang3/CharSequenceUtils.java": "            final char c1 = cs.charAt(index1++);\n            final char c2 = substring.charAt(index2++);\n",
            "src/main/java/org/apache/commons/lang3/ClassPathUtils.java": "        final StringBuilder sb = new StringBuilder();\n        final StringBuilder sb = new StringBuilder();\n",
            "src/main/java/org/apache/commons/lang3/ClassUtils.java": "        for (final Map.Entry<String, String> e : m.entrySet()) {\n    public static Iterable<Class<?>> hierarchy(final Class<?> type, final Interfaces interfacesBehavior) {\n                    private void walkInterfaces(final Set<Class<?>> addTo, final Class<?> c) {\n                        for (final Class<?> iface : c.getInterfaces()) {\n",
            "src/main/java/org/apache/commons/lang3/EnumUtils.java": "        final long[] lvalues = ArrayUtils.clone(Validate.notNull(values));\n",
            "src/main/java/org/apache/commons/lang3/LocaleUtils.java": "        final String[] split = str.split(\"_\", -1);\n        final int occurrences = split.length -1;\n",
            "src/main/java/org/apache/commons/lang3/ObjectUtils.java": "                final int tmpHash = ObjectUtils.hashCode(object);\n",
            "src/main/java/org/apache/commons/lang3/RandomUtils.java": "    public static byte[] nextBytes(final int count) {\n        final byte[] result = new byte[count];\n    public static int nextInt(final int startInclusive, final int endExclusive) {\n    public static long nextLong(final long startInclusive, final long endExclusive) {\n    public static double nextDouble(final double startInclusive, final double endInclusive) {\n    public static float nextFloat(final float startInclusive, final float endInclusive) {\n",
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "    public static boolean isAnyEmpty(final CharSequence... css) {\n      for (final CharSequence cs : css){\n    public static boolean isNoneEmpty(final CharSequence... css) {\n    public static boolean isAnyBlank(final CharSequence... css) {\n      for (final CharSequence cs : css){\n    public static boolean isNoneBlank(final CharSequence... css) {\n            final\n        final char firstChar = str.charAt(0);\n        final char firstChar = str.charAt(0);\n            final char queryChar = queryLowerCase.charAt(queryIndex);\n                final char termChar = termLowerCase.charAt(termIndex);\n    private static int transpositions(final CharSequence first, final CharSequence second) {\n    private static int commonPrefixLength(final CharSequence first, final CharSequence second) {\n    public static String toEncodedString(final byte[] bytes, final Charset charset) {\n    public static String wrap(final String str, final char wrapWith) {\n    public static String wrap(final String str, final String wrapWith) {\n",
            "src/main/java/org/apache/commons/lang3/Validate.java": "    public static void inclusiveBetween(final long start, final long end, final long value) {\n    public static void inclusiveBetween(final long start, final long end, final long value, final String message) {\n    public static void inclusiveBetween(final double start, final double end, final double value) {\n    public static void inclusiveBetween(final double start, final double end, final double value, final String message) {\n    public static void exclusiveBetween(final long start, final long end, final long value) {\n    public static void exclusiveBetween(final long start, final long end, final long value, final String message) {\n    public static void exclusiveBetween(final double start, final double end, final double value) {\n    public static void exclusiveBetween(final double start, final double end, final double value, final String message) {\n",
            "src/main/java/org/apache/commons/lang3/builder/Diff.java": "    protected Diff(final String fieldName) {\n    public final T setValue(final T value) {\n",
            "src/main/java/org/apache/commons/lang3/builder/DiffResult.java": "    public String toString(final ToStringStyle style) {\n        final ToStringBuilder lhsBuilder = new ToStringBuilder(lhs, style);\n        final ToStringBuilder rhsBuilder = new ToStringBuilder(rhs, style);\n        for (final Diff<?> diff : diffs) {\n",
            "src/main/java/org/apache/commons/lang3/builder/RecursiveToStringStyle.java": "    public void appendDetail(final StringBuffer buffer, final String fieldName, final Object value) {\n    protected void appendDetail(final StringBuffer buffer, final String fieldName, final Collection<?> coll) {\n",
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java": "    public static Field[] getAllFields(final Class<?> cls) {\n    public static List<Field> getAllFieldsList(final Class<?> cls) {\n            for (final Field field : declaredFields) {\n    public static void removeFinalModifier(final Field field) {\n    public static void removeFinalModifier(final Field field, final boolean forceAccess) {\n                final Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n        } catch (final NoSuchFieldException ignored) {\n        } catch (final IllegalAccessException ignored) {\n",
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java": "                final Method method = getAccessibleMethodFromInterfaceNest(interfaces[i],\n    public static Set<Method> getOverrideHierarchy(final Method method, final Interfaces interfacesBehavior) {\n",
            "src/main/java/org/apache/commons/lang3/reflect/TypeLiteral.java": "    public final boolean equals(final Object obj) {\n",
            "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java": "        public WildcardTypeBuilder withUpperBounds(final Type... bounds) {\n        public WildcardTypeBuilder withLowerBounds(final Type... bounds) {\n        private GenericArrayTypeImpl(final Type componentType) {\n        public boolean equals(final Object obj) {\n        private ParameterizedTypeImpl(final Class<?> raw, final Type useOwner, final Type[] typeArguments) {\n        public boolean equals(final Object obj) {\n        private WildcardTypeImpl(final Type[] upperBounds, final Type[] lowerBounds) {\n        public boolean equals(final Object obj) {\n    public static boolean containsTypeVariables(final Type type) {\n            for (final Type arg : ((ParameterizedType) type).getActualTypeArguments()) {\n            final WildcardType wild = (WildcardType) type;\n    private static Type[] extractTypeArgumentsFrom(final Map<TypeVariable<?>, Type> mappings, final TypeVariable<?>[] variables) {\n        for (final TypeVariable<?> var : variables) {\n    public static boolean equals(final Type t1, final Type t2) {\n    private static boolean equals(final ParameterizedType p, final Type t) {\n    private static boolean equals(final GenericArrayType a, final Type t) {\n    private static boolean equals(final WildcardType w, final Type t) {\n    private static boolean equals(final Type[] t1, final Type[] t2) {\n    public static String toString(final Type type) {\n    public static String toLongString(final TypeVariable<?> var) {\n    private static String classToString(final Class<?> c) {\n    private static String typeVariableToString(final TypeVariable<?> v) {\n    private static String parameterizedTypeToString(final ParameterizedType p) {\n    private static String wildcardTypeToString(final WildcardType w) {\n    private static String genericArrayTypeToString(final GenericArrayType g) {\n    private static StringBuilder appendAllTo(final StringBuilder buf, final String sep, final Type... types) {\n",
            "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java": "    public String replace(final CharSequence source) {\n    public String replace(final CharSequence source, final int offset, final int length) {\n        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n    public boolean replaceIn(final StringBuilder source) {\n    public boolean replaceIn(final StringBuilder source, final int offset, final int length) {\n        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n",
            "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java": "        final int remaining = input.length() - index - 1; // how many characters left, ignoring the first \\\n        final StringBuilder builder = new StringBuilder();\n            final int next = index + 1;\n            final int next2 = index + 2;\n            final int next3 = index + 3;\n    private boolean isOctalDigit(final char ch) {\n    private boolean isZeroToThree(final char ch) {\n",
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnpairedSurrogateRemover.java": "    public boolean translate(final int codepoint, final Writer out) throws IOException {\n",
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java": "        final int offset = (unit == TimeUnit.DAYS) ? 0 : 1;\n",
            "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java": "            final long milliseconds, final boolean padWithZeros) {\n                        final int width = padWithZeros ? Math.max(3, count) : 3;\n            for (final Token token : tokens) {\n",
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": "    private void init(final Calendar definingCalendar) {\n        final int trial= century + twoDigitYear;\n            final Map<String, Integer> keyValues = getDisplayNames(field, definingCalendar, locale);\n            for(final Map.Entry<String, Integer> entry : keyValues.entrySet()) {\n            for (final String[] zone : zones) {\n",
            "src/main/java/org/apache/commons/lang3/time/FormatCache.java": "    F getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, final Locale locale) {\n    F getDateInstance(final int dateStyle, final TimeZone timeZone, final Locale locale) {\n    F getTimeInstance(final int timeStyle, final TimeZone timeZone, final Locale locale) {\n",
            "src/test/java/org/apache/commons/lang3/ClassPathUtilsTest.java": "        final String expected = \"org.apache.commons.lang3.Test.properties\";\n        final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, \"Test.properties\");\n        final String expected = \"org.apache.commons.lang3.Test.properties\";\n        final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), \"Test.properties\");\n        final String expected = \"org/apache/commons/lang3/Test.properties\";\n        final String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, \"Test.properties\");\n        final String expected = \"org/apache/commons/lang3/Test.properties\";\n        final String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), \"Test.properties\");\n",
            "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java": "        for (final String str : Arrays.asList(\"udm\", \"tet\")) {\n            final Locale locale = LocaleUtils.toLocale(str);\n        final Locale[] locales = Locale.getAvailableLocales();\n        for (final Locale l : locales) {\n            final Locale locale = new Locale(l.getLanguage(), l.getCountry(), l.getVariant());\n                    } catch (final IllegalArgumentException iae) {\n                final Locale loc = LocaleUtils.toLocale(str);\n",
            "src/test/java/org/apache/commons/lang3/NotImplementedExceptionTest.java": "        final Throwable nested = new RuntimeException();\n        final String message = \"Not Implemented\";\n        final String code = \"CODE\";\n    private void assertCorrect(final String assertMessage, final NotImplementedException nie, final String message, final Throwable nested, final String code) {\n",
            "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java": "        } catch(final IOException ex) {\n        } catch (final IOException ex) {\n        } catch (final IOException ex) {\n",
            "src/test/java/org/apache/commons/lang3/RandomUtilsTest.java": "        final byte[] result = RandomUtils.nextBytes(20);\n        final int result = RandomUtils.nextInt(33, 42);\n        final double result = RandomUtils.nextDouble(33d, 42d);\n        final double result = RandomUtils.nextFloat(33f, 42f);\n        final long result = RandomUtils.nextLong(33L, 42L);\n        final int result = RandomUtils.nextInt(0, Integer.MAX_VALUE);\n        final long result = RandomUtils.nextLong(0, Long.MAX_VALUE);\n        final float result = RandomUtils.nextFloat(0, Float.MAX_VALUE);\n        final double result = RandomUtils.nextDouble(0, Double.MAX_VALUE);\n",
            "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java": "        final HashMap<Object, Object> newMap = SerializationUtils.roundtrip(iMap);\n",
            "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java": "        for (final String[] element : HTML_ESCAPES) {\n        for (final String[] element : HTML_ESCAPES) {\n        final String bellsTest = \"\\ud83d\\udc80\\ud83d\\udd14\";\n        final String value = StringEscapeUtils.escapeJava(bellsTest);\n        final String valueTest = StringEscapeUtils.unescapeJava(value);\n        final String expected = \"\\\\\\\"foo\\\\\\\" isn't \\\\\\\"bar\\\\\\\". specials: \\\\b\\\\r\\\\n\\\\f\\\\t\\\\\\\\\\\\/\";\n        final String input =\"\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\/\";\n",
            "src/test/java/org/apache/commons/lang3/StringUtilsTest.java": "        final String hs = String.valueOf(((char) 160));\n",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": "        public DiffResult diff(final TypeTestClass obj) {\n        public boolean equals(final Object obj) {\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final Diff<?> diff = list.getDiffs().get(0);\n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        final DiffResult list = class1.diff(class2);\n        final DiffResult list = new DiffBuilder(\"String1\", \"String2\", SHORT_STYLE)\n        final TypeTestClass testClass = new TypeTestClass();        \n        final DiffResult list = new DiffBuilder(testClass, testClass, SHORT_STYLE)\n        final TypeTestClass testClass1 = new TypeTestClass();\n        final TypeTestClass testClass2 = new TypeTestClass();\n        final DiffResult list = new DiffBuilder(testClass1, testClass2, SHORT_STYLE)\n        final TypeTestClass class1 = new TypeTestClass();\n",
            "src/test/java/org/apache/commons/lang3/builder/DiffResultTest.java": "        private final boolean booleanField;\n        public SimpleClass(final boolean booleanField) {\n        public DiffResult diff(final SimpleClass obj) {\n        final SimpleClass lhs = new SimpleClass(true);\n        final SimpleClass rhs = new SimpleClass(false);\n        final List<Diff<?>> diffs = lhs.diff(rhs).getDiffs();\n        final DiffResult list = new DiffResult(lhs, rhs, diffs, SHORT_STYLE);\n        final SimpleClass lhs = new SimpleClass(true);\n        final SimpleClass rhs = new SimpleClass(false);\n        final List<Diff<?>> diffs = lhs.diff(rhs).getDiffs();\n        final Iterator<Diff<?>> expectedIterator = diffs.iterator();\n        final DiffResult list = new DiffResult(lhs, rhs, diffs, SHORT_STYLE);\n        final Iterator<Diff<?>> iterator = list.iterator();\n        final DiffResult list = new DiffBuilder(new EmptyClass(), new EmptyClass(),\n        final DiffResult list = SIMPLE_FALSE.diff(SIMPLE_TRUE);\n        final String lhsString = new ToStringBuilder(SIMPLE_FALSE,\n        final String rhsString = new ToStringBuilder(SIMPLE_TRUE,\n        final String expectedOutput = String.format(\"%s differs from %s\", lhsString,\n        final DiffResult diffResult = new DiffResult(SIMPLE_TRUE, SIMPLE_FALSE, SIMPLE_TRUE\n        final DiffResult diffResult = new DiffBuilder(SIMPLE_TRUE, SIMPLE_TRUE,\n",
            "src/test/java/org/apache/commons/lang3/builder/DiffTest.java": "        protected BooleanDiff(final String fieldName) {\n",
            "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java": "        final Object[] o1 = new Object[] { one };\n        final Object[] o2 = new Object[] { two };\n        final Object[] o3 = new Object[] { one };\n        final double[] d1 = { 0, 1 };\n        final double[] d2 = { 2, 3 };\n        final double[] d3 = { 0, 1 };\n",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": "        final String shouldBeFloat = \"1.23\";\n        final String shouldBeDouble = \"3.40282354e+38\";\n        final String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n",
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java": "        final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\n        final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\n        final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\n        final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\");\n",
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java": "        for (final Method m : MethodUtils.getOverrideHierarchy(method, Interfaces.INCLUDE)) {\n        for (final Method m : MethodUtils.getOverrideHierarchy(method, Interfaces.EXCLUDE)) {\n        MethodDescriptor(final Class<?> declaringClass, final String name, final Type... parameterTypes) {\n",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java": "    public void consume(final T t) {\n",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java": "    public void consume(final String t) {\n",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java": "        final char groupingSeparator = DecimalFormatSymbols.getInstance().getGroupingSeparator();\n        final String expected = \"Hi Alice 5\" + groupingSeparator + \"000\";\n",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java": "            final StrBuilder sb = new StrBuilder();\n            final int len = sb.readFrom(new StringReader(s));\n        final StrBuilder sb = new StrBuilder(\"Test\");\n            final StrBuilder sb = new StrBuilder();\n            final int len = sb.readFrom(CharBuffer.wrap(s));\n        final StrBuilder sb = new StrBuilder(\"Test\");\n            final StrBuilder sb = new StrBuilder();\n            final int len = sb.readFrom(new MockReadable(s));\n        final StrBuilder sb = new StrBuilder(\"Test\");\n",
            "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java": "        final Calendar c = Calendar.getInstance();\n",
            "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java": "        final String pattern = \"yyyy-MM-dd'T'\";\n",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java": "    private Calendar getEraStart(int year, final TimeZone zone, final Locale locale) {\n        final Calendar cal = Calendar.getInstance(zone, locale);\n    private void validateSdfFormatFdpParseEquality(final String format, final Locale locale, final TimeZone tz, final DateParser fdp, final Date in, final int year, final Date cs) throws ParseException {\n                        final Calendar cal= getEraStart(year, tz, locale);\n                        final Date centuryStart= cal.getTime();\n                        final Date in= cal.getTime();\n        final Calendar expected = Calendar.getInstance(NEW_YORK, Locale.US);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": [
                1573,
                1608,
                1643,
                1678,
                1713,
                1748,
                1783,
                1818,
                1853
            ],
            "src/main/java/org/apache/commons/lang3/CharSequenceUtils.java": [
                196,
                197
            ],
            "src/main/java/org/apache/commons/lang3/ClassPathUtils.java": [
                83,
                132
            ],
            "src/main/java/org/apache/commons/lang3/ClassUtils.java": [
                130,
                1161,
                1222,
                1223
            ],
            "src/main/java/org/apache/commons/lang3/EnumUtils.java": [
                269
            ],
            "src/main/java/org/apache/commons/lang3/LocaleUtils.java": [
                126,
                127
            ],
            "src/main/java/org/apache/commons/lang3/ObjectUtils.java": [
                242
            ],
            "src/main/java/org/apache/commons/lang3/RandomUtils.java": [
                62,
                65,
                84,
                110,
                137,
                163
            ],
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                258,
                262,
                287,
                358,
                362,
                388,
                4044,
                5693,
                5731,
                7130,
                7134,
                7195,
                7212,
                7718,
                7743,
                7781
            ],
            "src/main/java/org/apache/commons/lang3/Validate.java": [
                943,
                966,
                987,
                1010,
                1081,
                1104,
                1125,
                1148
            ],
            "src/main/java/org/apache/commons/lang3/builder/Diff.java": [
                59,
                115
            ],
            "src/main/java/org/apache/commons/lang3/builder/DiffResult.java": [
                180,
                185,
                186,
                188
            ],
            "src/main/java/org/apache/commons/lang3/builder/RecursiveToStringStyle.java": [
                71,
                82
            ],
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java": [
                196,
                211,
                217,
                661,
                678,
                684,
                697,
                699
            ],
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java": [
                442,
                512
            ],
            "src/main/java/org/apache/commons/lang3/reflect/TypeLiteral.java": [
                99
            ],
            "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java": [
                68,
                78,
                103,
                127,
                157,
                199,
                234,
                267,
                1427,
                1435,
                1443,
                1531,
                1534,
                1571,
                1594,
                1611,
                1623,
                1639,
                1658,
                1685,
                1742,
                1764,
                1780,
                1807,
                1825,
                1837
            ],
            "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java": [
                513,
                534,
                538,
                652,
                673,
                677
            ],
            "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java": [
                40,
                41,
                43,
                44,
                45,
                68,
                77
            ],
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnpairedSurrogateRemover.java": [
                33
            ],
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java": [
                1674
            ],
            "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java": [
                427,
                457,
                584
            ],
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": [
                148,
                401,
                609,
                612,
                754
            ],
            "src/main/java/org/apache/commons/lang3/time/FormatCache.java": [
                142,
                159,
                176
            ],
            "src/test/java/org/apache/commons/lang3/ClassPathUtilsTest.java": [
                56,
                57,
                74,
                75,
                92,
                93,
                110,
                111
            ],
            "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java": [
                381,
                382,
                557,
                559,
                561,
                575,
                580
            ],
            "src/test/java/org/apache/commons/lang3/NotImplementedExceptionTest.java": [
                32,
                33,
                34,
                50
            ],
            "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java": [
                267,
                275,
                282
            ],
            "src/test/java/org/apache/commons/lang3/RandomUtilsTest.java": [
                96,
                113,
                138,
                147,
                164,
                174,
                183,
                192,
                201
            ],
            "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java": [
                276
            ],
            "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java": [
                222,
                239,
                587,
                588,
                589,
                613,
                614
            ],
            "src/test/java/org/apache/commons/lang3/StringUtilsTest.java": [
                58
            ],
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": [
                57,
                86,
                94,
                95,
                97,
                99,
                107,
                108,
                110,
                112,
                122,
                123,
                125,
                127,
                134,
                135,
                137,
                139,
                148,
                149,
                151,
                153,
                161,
                162,
                164,
                166,
                176,
                177,
                179,
                181,
                189,
                190,
                192,
                194,
                203,
                204,
                206,
                208,
                216,
                217,
                219,
                221,
                231,
                232,
                234,
                236,
                244,
                245,
                247,
                249,
                258,
                259,
                261,
                263,
                271,
                272,
                274,
                276,
                285,
                286,
                288,
                290,
                298,
                299,
                301,
                303,
                312,
                313,
                315,
                317,
                324,
                325,
                328,
                335,
                336,
                338,
                340,
                347,
                348,
                351,
                358,
                387,
                388,
                396,
                397,
                398,
                407
            ],
            "src/test/java/org/apache/commons/lang3/builder/DiffResultTest.java": [
                39,
                41,
                50,
                62,
                63,
                65,
                67,
                75,
                76,
                78,
                79,
                81,
                82,
                92,
                102,
                105,
                109,
                113,
                138,
                145
            ],
            "src/test/java/org/apache/commons/lang3/builder/DiffTest.java": [
                37
            ],
            "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java": [
                1136,
                1137,
                1138,
                1144,
                1145,
                1146
            ],
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": [
                124,
                125,
                126
            ],
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java": [
                1258,
                1269,
                1280,
                1291
            ],
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java": [
                395,
                415,
                469
            ],
            "src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java": [
                26
            ],
            "src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java": [
                25
            ],
            "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java": [
                1052,
                1053
            ],
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java": [
                104,
                105,
                116,
                125,
                126,
                137,
                146,
                147,
                158
            ],
            "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java": [
                536
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java": [
                258
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java": [
                191,
                192,
                212,
                235,
                236,
                240,
                547
            ]
        },
        "starts_total_time": 1.2907426357269287,
        "ekstazi_total_time": 5.9701831340789795,
        "ekstazi_select_time": 1.3109583854675293,
        "starts_select_time": 1.2682528495788574,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": "    public static void reverse(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n    public static void reverse(final byte[] array, int startIndexInclusive, int endIndexExclusive) {\n    public static void reverse(final char[] array, int startIndexInclusive, int endIndexExclusive) {\n    public static void reverse(final double[] array, int startIndexInclusive, int endIndexExclusive) {\n    public static void reverse(final float[] array, int startIndexInclusive, int endIndexExclusive) {\n    public static void reverse(final int[] array, int startIndexInclusive, int endIndexExclusive) {\n    public static void reverse(final long[] array, int startIndexInclusive, int endIndexExclusive) {\n    public static void reverse(final Object[] array, int startIndexInclusive, int endIndexExclusive) {\n    public static void reverse(final short[] array, int startIndexInclusive, int endIndexExclusive) {\n",
            "src/main/java/org/apache/commons/lang3/CharSequenceUtils.java": "            char c1 = cs.charAt(index1++);\n            char c2 = substring.charAt(index2++);\n",
            "src/main/java/org/apache/commons/lang3/ClassPathUtils.java": "        StringBuilder sb = new StringBuilder();\n        StringBuilder sb = new StringBuilder();\n",
            "src/main/java/org/apache/commons/lang3/ClassUtils.java": "        for (Map.Entry<String, String> e : m.entrySet()) {\n    public static Iterable<Class<?>> hierarchy(final Class<?> type, Interfaces interfacesBehavior) {\n                    private void walkInterfaces(Set<Class<?>> addTo, Class<?> c) {\n                        for (Class<?> iface : c.getInterfaces()) {\n",
            "src/main/java/org/apache/commons/lang3/EnumUtils.java": "        long[] lvalues = ArrayUtils.clone(Validate.notNull(values));\n",
            "src/main/java/org/apache/commons/lang3/LocaleUtils.java": "        String[] split = str.split(\"_\", -1);\n        int occurrences = split.length -1;\n",
            "src/main/java/org/apache/commons/lang3/ObjectUtils.java": "                int tmpHash = ObjectUtils.hashCode(object);\n",
            "src/main/java/org/apache/commons/lang3/RandomUtils.java": "    public static byte[] nextBytes(int count) {\n        byte[] result = new byte[count];\n    public static int nextInt(int startInclusive, int endExclusive) {\n    public static long nextLong(long startInclusive, long endExclusive) {\n    public static double nextDouble(double startInclusive, double endInclusive) {\n    public static float nextFloat(float startInclusive, float endInclusive) {\n",
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "    public static boolean isAnyEmpty(CharSequence... css) {\n      for (CharSequence cs : css){\n    public static boolean isNoneEmpty(CharSequence... css) {\n    public static boolean isAnyBlank(CharSequence... css) {\n      for (CharSequence cs : css){\n    public static boolean isNoneBlank(CharSequence... css) {\n        char firstChar = str.charAt(0);\n        char firstChar = str.charAt(0);\n            char queryChar = queryLowerCase.charAt(queryIndex);\n                char termChar = termLowerCase.charAt(termIndex);\n    private static int transpositions(CharSequence first, CharSequence second) {\n    private static int commonPrefixLength(CharSequence first, CharSequence second) {\n    public static String toEncodedString(byte[] bytes, Charset charset) {\n    public static String wrap(String str, char wrapWith) {\n    public static String wrap(String str, String wrapWith) {\n",
            "src/main/java/org/apache/commons/lang3/Validate.java": "    public static void inclusiveBetween(long start, long end, long value) {\n    public static void inclusiveBetween(long start, long end, long value, String message) {\n    public static void inclusiveBetween(double start, double end, double value) {\n    public static void inclusiveBetween(double start, double end, double value, String message) {\n    public static void exclusiveBetween(long start, long end, long value) {\n    public static void exclusiveBetween(long start, long end, long value, String message) {\n    public static void exclusiveBetween(double start, double end, double value) {\n    public static void exclusiveBetween(double start, double end, double value, String message) {\n",
            "src/main/java/org/apache/commons/lang3/builder/Diff.java": "    protected Diff(String fieldName) {\n    public final T setValue(T value) {\n",
            "src/main/java/org/apache/commons/lang3/builder/DiffResult.java": "    public String toString(ToStringStyle style) {\n        ToStringBuilder lhsBuilder = new ToStringBuilder(lhs, style);\n        ToStringBuilder rhsBuilder = new ToStringBuilder(rhs, style);\n        for (Diff<?> diff : diffs) {\n",
            "src/main/java/org/apache/commons/lang3/builder/RecursiveToStringStyle.java": "    public void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n    protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\n",
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java": "    public static Field[] getAllFields(Class<?> cls) {\n    public static List<Field> getAllFieldsList(Class<?> cls) {\n            for (Field field : declaredFields) {\n    public static void removeFinalModifier(Field field) {\n    public static void removeFinalModifier(Field field, boolean forceAccess) {\n                Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n        } catch (NoSuchFieldException ignored) {\n        } catch (IllegalAccessException ignored) {\n",
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java": "                Method method = getAccessibleMethodFromInterfaceNest(interfaces[i],\n    public static Set<Method> getOverrideHierarchy(final Method method, Interfaces interfacesBehavior) {\n",
            "src/main/java/org/apache/commons/lang3/reflect/TypeLiteral.java": "    public final boolean equals(Object obj) {\n",
            "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java": "        public WildcardTypeBuilder withUpperBounds(Type... bounds) {\n        public WildcardTypeBuilder withLowerBounds(Type... bounds) {\n        private GenericArrayTypeImpl(Type componentType) {\n        public boolean equals(Object obj) {\n        private ParameterizedTypeImpl(Class<?> raw, Type useOwner, Type[] typeArguments) {\n        public boolean equals(Object obj) {\n        private WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {\n        public boolean equals(Object obj) {\n    public static boolean containsTypeVariables(Type type) {\n            for (Type arg : ((ParameterizedType) type).getActualTypeArguments()) {\n            WildcardType wild = (WildcardType) type;\n    private static Type[] extractTypeArgumentsFrom(Map<TypeVariable<?>, Type> mappings, TypeVariable<?>[] variables) {\n        for (TypeVariable<?> var : variables) {\n    public static boolean equals(Type t1, Type t2) {\n    private static boolean equals(ParameterizedType p, Type t) {\n    private static boolean equals(GenericArrayType a, Type t) {\n    private static boolean equals(WildcardType w, Type t) {\n    private static boolean equals(Type[] t1, Type[] t2) {\n    public static String toString(Type type) {\n    public static String toLongString(TypeVariable<?> var) {\n    private static String classToString(Class<?> c) {\n    private static String typeVariableToString(TypeVariable<?> v) {\n    private static String parameterizedTypeToString(ParameterizedType p) {\n    private static String wildcardTypeToString(WildcardType w) {\n    private static String genericArrayTypeToString(GenericArrayType g) {\n    private static StringBuilder appendAllTo(StringBuilder buf, String sep, Type... types) {\n",
            "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java": "    public String replace(CharSequence source) {\n    public String replace(CharSequence source, int offset, int length) {\n        StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n    public boolean replaceIn(StringBuilder source) {\n    public boolean replaceIn(StringBuilder source, int offset, int length) {\n        StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n",
            "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java": "        int remaining = input.length() - index - 1; // how many characters left, ignoring the first \\\n        StringBuilder builder = new StringBuilder();\n            int next = index + 1;\n            int next2 = index + 2;\n            int next3 = index + 3;\n    private boolean isOctalDigit(char ch) {\n    private boolean isZeroToThree(char ch) {\n",
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnpairedSurrogateRemover.java": "    public boolean translate(int codepoint, Writer out) throws IOException {\n",
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java": "        int offset = (unit == TimeUnit.DAYS) ? 0 : 1;\n",
            "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java": "            long milliseconds, final boolean padWithZeros) {\n                        int width = padWithZeros ? Math.max(3, count) : 3;\n            for (Token token : tokens) {\n",
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": "    private void init(Calendar definingCalendar) {\n        int trial= century + twoDigitYear;\n            Map<String, Integer> keyValues = getDisplayNames(field, definingCalendar, locale);\n            for(Map.Entry<String, Integer> entry : keyValues.entrySet()) {\n            for (String[] zone : zones) {\n",
            "src/main/java/org/apache/commons/lang3/time/FormatCache.java": "    F getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, Locale locale) {\n    F getDateInstance(final int dateStyle, final TimeZone timeZone, Locale locale) {\n    F getTimeInstance(final int timeStyle, final TimeZone timeZone, Locale locale) {\n",
            "src/test/java/org/apache/commons/lang3/ClassPathUtilsTest.java": "        String expected = \"org.apache.commons.lang3.Test.properties\";\n        String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, \"Test.properties\");\n        String expected = \"org.apache.commons.lang3.Test.properties\";\n        String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), \"Test.properties\");\n        String expected = \"org/apache/commons/lang3/Test.properties\";\n        String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, \"Test.properties\");\n        String expected = \"org/apache/commons/lang3/Test.properties\";\n        String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), \"Test.properties\");\n",
            "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java": "        for (String str : Arrays.asList(\"udm\", \"tet\")) {\n            Locale locale = LocaleUtils.toLocale(str);\n        Locale[] locales = Locale.getAvailableLocales();\n        for (Locale l : locales) {\n            Locale locale = new Locale(l.getLanguage(), l.getCountry(), l.getVariant());\n                    } catch (IllegalArgumentException iae) {\n                Locale loc = LocaleUtils.toLocale(str);\n",
            "src/test/java/org/apache/commons/lang3/NotImplementedExceptionTest.java": "        Throwable nested = new RuntimeException();\n        String message = \"Not Implemented\";\n        String code = \"CODE\";\n    private void assertCorrect(String assertMessage, NotImplementedException nie, String message, Throwable nested, String code) {\n",
            "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java": "        } catch(IOException ex) {\n        } catch (IOException ex) {\n        } catch (IOException ex) {\n",
            "src/test/java/org/apache/commons/lang3/RandomUtilsTest.java": "        byte[] result = RandomUtils.nextBytes(20);\n        int result = RandomUtils.nextInt(33, 42);\n        double result = RandomUtils.nextDouble(33d, 42d);\n        double result = RandomUtils.nextFloat(33f, 42f);\n        long result = RandomUtils.nextLong(33L, 42L);\n        int result = RandomUtils.nextInt(0, Integer.MAX_VALUE);\n        long result = RandomUtils.nextLong(0, Long.MAX_VALUE);\n        float result = RandomUtils.nextFloat(0, Float.MAX_VALUE);\n        double result = RandomUtils.nextDouble(0, Double.MAX_VALUE);\n",
            "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java": "        HashMap<Object, Object> newMap = SerializationUtils.roundtrip(iMap);\n",
            "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java": "        for (String[] element : HTML_ESCAPES) {\n        for (String[] element : HTML_ESCAPES) {\n        String bellsTest = \"\\ud83d\\udc80\\ud83d\\udd14\";\n        String value = StringEscapeUtils.escapeJava(bellsTest);\n        String valueTest = StringEscapeUtils.unescapeJava(value);\n        String expected = \"\\\\\\\"foo\\\\\\\" isn't \\\\\\\"bar\\\\\\\". specials: \\\\b\\\\r\\\\n\\\\f\\\\t\\\\\\\\\\\\/\";\n        String input =\"\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\/\";\n",
            "src/test/java/org/apache/commons/lang3/StringUtilsTest.java": "        String hs = String.valueOf(((char) 160));\n",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": "        public DiffResult diff(TypeTestClass obj) {\n        public boolean equals(Object obj) {\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        Diff<?> diff = list.getDiffs().get(0);\n        TypeTestClass class1 = new TypeTestClass();\n        TypeTestClass class2 = new TypeTestClass();\n        DiffResult list = class1.diff(class2);\n        DiffResult list = new DiffBuilder(\"String1\", \"String2\", SHORT_STYLE)\n        TypeTestClass testClass = new TypeTestClass();        \n        DiffResult list = new DiffBuilder(testClass, testClass, SHORT_STYLE)\n        TypeTestClass testClass1 = new TypeTestClass();\n        TypeTestClass testClass2 = new TypeTestClass();\n        DiffResult list = new DiffBuilder(testClass1, testClass2, SHORT_STYLE)\n        TypeTestClass class1 = new TypeTestClass();\n",
            "src/test/java/org/apache/commons/lang3/builder/DiffResultTest.java": "        private boolean booleanField;\n        public SimpleClass(boolean booleanField) {\n        public DiffResult diff(SimpleClass obj) {\n        SimpleClass lhs = new SimpleClass(true);\n        SimpleClass rhs = new SimpleClass(false);\n        List<Diff<?>> diffs = lhs.diff(rhs).getDiffs();\n        DiffResult list = new DiffResult(lhs, rhs, diffs, SHORT_STYLE);\n        SimpleClass lhs = new SimpleClass(true);\n        SimpleClass rhs = new SimpleClass(false);\n        List<Diff<?>> diffs = lhs.diff(rhs).getDiffs();\n        Iterator<Diff<?>> expectedIterator = diffs.iterator();\n        DiffResult list = new DiffResult(lhs, rhs, diffs, SHORT_STYLE);\n        Iterator<Diff<?>> iterator = list.iterator();\n        DiffResult list = new DiffBuilder(new EmptyClass(), new EmptyClass(),\n        DiffResult list = SIMPLE_FALSE.diff(SIMPLE_TRUE);\n        String lhsString = new ToStringBuilder(SIMPLE_FALSE,\n        String rhsString = new ToStringBuilder(SIMPLE_TRUE,\n        String expectedOutput = String.format(\"%s differs from %s\", lhsString,\n        DiffResult diffResult = new DiffResult(SIMPLE_TRUE, SIMPLE_FALSE, SIMPLE_TRUE\n        DiffResult diffResult = new DiffBuilder(SIMPLE_TRUE, SIMPLE_TRUE,\n",
            "src/test/java/org/apache/commons/lang3/builder/DiffTest.java": "        protected BooleanDiff(String fieldName) {\n",
            "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java": "        Object[] o1 = new Object[] { one };\n        Object[] o2 = new Object[] { two };\n        Object[] o3 = new Object[] { one };\n        double[] d1 = { 0, 1 };\n        double[] d2 = { 2, 3 };\n        double[] d3 = { 0, 1 };\n",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": "        String shouldBeFloat = \"1.23\";\n        String shouldBeDouble = \"3.40282354e+38\";\n        String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n",
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java": "        Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\n        Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\n        Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\n        Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\");\n",
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java": "        for (Method m : MethodUtils.getOverrideHierarchy(method, Interfaces.INCLUDE)) {\n        for (Method m : MethodUtils.getOverrideHierarchy(method, Interfaces.EXCLUDE)) {\n        MethodDescriptor(Class<?> declaringClass, String name, Type... parameterTypes) {\n",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java": "    public void consume(T t) {\n",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java": "    public void consume(String t) {\n",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java": "        char groupingSeparator = DecimalFormatSymbols.getInstance().getGroupingSeparator();\n        String expected = \"Hi Alice 5\" + groupingSeparator + \"000\";\n",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java": "            StrBuilder sb = new StrBuilder();\n            int len = sb.readFrom(new StringReader(s));\n        StrBuilder sb = new StrBuilder(\"Test\");\n            StrBuilder sb = new StrBuilder();\n            int len = sb.readFrom(CharBuffer.wrap(s));\n        StrBuilder sb = new StrBuilder(\"Test\");\n            StrBuilder sb = new StrBuilder();\n            int len = sb.readFrom(new MockReadable(s));\n        StrBuilder sb = new StrBuilder(\"Test\");\n",
            "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java": "        Calendar c = Calendar.getInstance();\n",
            "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java": "        String pattern = \"yyyy-MM-dd'T'\";\n",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java": "    private Calendar getEraStart(int year, TimeZone zone, Locale locale) {\n        Calendar cal = Calendar.getInstance(zone, locale);\n    private void validateSdfFormatFdpParseEquality(String format, Locale locale, TimeZone tz, DateParser fdp, Date in, int year, Date cs) throws ParseException {\n                        Calendar cal= getEraStart(year, tz, locale);\n                        Date centuryStart= cal.getTime();\n                        Date in= cal.getTime();\n        Calendar expected = Calendar.getInstance(NEW_YORK, Locale.US);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": [
                1573,
                1608,
                1643,
                1678,
                1713,
                1748,
                1783,
                1818,
                1853
            ],
            "src/main/java/org/apache/commons/lang3/CharSequenceUtils.java": [
                196,
                197
            ],
            "src/main/java/org/apache/commons/lang3/ClassPathUtils.java": [
                83,
                132
            ],
            "src/main/java/org/apache/commons/lang3/ClassUtils.java": [
                130,
                1161,
                1222,
                1223
            ],
            "src/main/java/org/apache/commons/lang3/EnumUtils.java": [
                269
            ],
            "src/main/java/org/apache/commons/lang3/LocaleUtils.java": [
                126,
                127
            ],
            "src/main/java/org/apache/commons/lang3/ObjectUtils.java": [
                242
            ],
            "src/main/java/org/apache/commons/lang3/RandomUtils.java": [
                62,
                65,
                84,
                110,
                137,
                163
            ],
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                258,
                262,
                287,
                358,
                362,
                388,
                5692,
                5730,
                7129,
                7133,
                7194,
                7211,
                7717,
                7742,
                7780
            ],
            "src/main/java/org/apache/commons/lang3/Validate.java": [
                943,
                966,
                987,
                1010,
                1081,
                1104,
                1125,
                1148
            ],
            "src/main/java/org/apache/commons/lang3/builder/Diff.java": [
                59,
                115
            ],
            "src/main/java/org/apache/commons/lang3/builder/DiffResult.java": [
                180,
                185,
                186,
                188
            ],
            "src/main/java/org/apache/commons/lang3/builder/RecursiveToStringStyle.java": [
                71,
                82
            ],
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java": [
                196,
                211,
                217,
                661,
                678,
                684,
                697,
                699
            ],
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java": [
                442,
                512
            ],
            "src/main/java/org/apache/commons/lang3/reflect/TypeLiteral.java": [
                99
            ],
            "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java": [
                68,
                78,
                103,
                127,
                157,
                199,
                234,
                267,
                1427,
                1435,
                1443,
                1531,
                1534,
                1571,
                1594,
                1611,
                1623,
                1639,
                1658,
                1685,
                1742,
                1764,
                1780,
                1807,
                1825,
                1837
            ],
            "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java": [
                513,
                534,
                538,
                652,
                673,
                677
            ],
            "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java": [
                40,
                41,
                43,
                44,
                45,
                68,
                77
            ],
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnpairedSurrogateRemover.java": [
                33
            ],
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java": [
                1674
            ],
            "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java": [
                427,
                457,
                584
            ],
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": [
                148,
                401,
                609,
                612,
                754
            ],
            "src/main/java/org/apache/commons/lang3/time/FormatCache.java": [
                142,
                159,
                176
            ],
            "src/test/java/org/apache/commons/lang3/ClassPathUtilsTest.java": [
                56,
                57,
                74,
                75,
                92,
                93,
                110,
                111
            ],
            "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java": [
                381,
                382,
                557,
                559,
                561,
                575,
                580
            ],
            "src/test/java/org/apache/commons/lang3/NotImplementedExceptionTest.java": [
                32,
                33,
                34,
                50
            ],
            "src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java": [
                267,
                275,
                282
            ],
            "src/test/java/org/apache/commons/lang3/RandomUtilsTest.java": [
                96,
                113,
                138,
                147,
                164,
                174,
                183,
                192,
                201
            ],
            "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java": [
                276
            ],
            "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java": [
                222,
                239,
                587,
                588,
                589,
                613,
                614
            ],
            "src/test/java/org/apache/commons/lang3/StringUtilsTest.java": [
                58
            ],
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": [
                57,
                86,
                94,
                95,
                97,
                99,
                107,
                108,
                110,
                112,
                122,
                123,
                125,
                127,
                134,
                135,
                137,
                139,
                148,
                149,
                151,
                153,
                161,
                162,
                164,
                166,
                176,
                177,
                179,
                181,
                189,
                190,
                192,
                194,
                203,
                204,
                206,
                208,
                216,
                217,
                219,
                221,
                231,
                232,
                234,
                236,
                244,
                245,
                247,
                249,
                258,
                259,
                261,
                263,
                271,
                272,
                274,
                276,
                285,
                286,
                288,
                290,
                298,
                299,
                301,
                303,
                312,
                313,
                315,
                317,
                324,
                325,
                328,
                335,
                336,
                338,
                340,
                347,
                348,
                351,
                358,
                387,
                388,
                396,
                397,
                398,
                407
            ],
            "src/test/java/org/apache/commons/lang3/builder/DiffResultTest.java": [
                39,
                41,
                50,
                62,
                63,
                65,
                67,
                75,
                76,
                78,
                79,
                81,
                82,
                92,
                102,
                105,
                109,
                113,
                138,
                145
            ],
            "src/test/java/org/apache/commons/lang3/builder/DiffTest.java": [
                37
            ],
            "src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java": [
                1136,
                1137,
                1138,
                1144,
                1145,
                1146
            ],
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": [
                124,
                125,
                126
            ],
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java": [
                1258,
                1269,
                1280,
                1291
            ],
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java": [
                395,
                415,
                469
            ],
            "src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java": [
                26
            ],
            "src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java": [
                25
            ],
            "src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java": [
                1052,
                1053
            ],
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java": [
                104,
                105,
                116,
                125,
                126,
                137,
                146,
                147,
                158
            ],
            "src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java": [
                536
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java": [
                258
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java": [
                191,
                192,
                212,
                235,
                236,
                240,
                547
            ]
        }
    },
    {
        "commit": "c987d163",
        "prev_commit": "f7e5f2c8",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 85,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 56,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 15,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConversionTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+                    return src[srcPos] ? 'f' : '7';\n+                return src[srcPos] ? 'b' : '3';\n+            if (src[srcPos + 1]) {\n+                return src[srcPos] ? 'd' : '5';\n+            return src[srcPos] ? '9' : '1';\n+        }\n+        if (src[srcPos + 2]) {\n+            if (src[srcPos + 1]) {\n+                return src[srcPos] ? 'e' : '6';\n+            }\n+            return src[srcPos] ? 'a' : '2';\n+        }\n+        if (src[srcPos + 1]) {\n+            return src[srcPos] ? 'c' : '4';\n+        return src[srcPos] ? '8' : '0';\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "                    return src[srcPos] ? 'f' : '7';\n                return src[srcPos] ? 'b' : '3';\n            if (src[srcPos + 1]) {\n                return src[srcPos] ? 'd' : '5';\n            return src[srcPos] ? '9' : '1';\n        }\n        if (src[srcPos + 2]) {\n            if (src[srcPos + 1]) {\n                return src[srcPos] ? 'e' : '6';\n            }\n            return src[srcPos] ? 'a' : '2';\n        }\n        if (src[srcPos + 1]) {\n            return src[srcPos] ? 'c' : '4';\n        return src[srcPos] ? '8' : '0';\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                403,
                405,
                407,
                408,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                418,
                419,
                421
            ]
        },
        "starts_total_time": 1.2942090034484863,
        "ekstazi_total_time": 5.343437910079956,
        "ekstazi_select_time": 1.2535500526428223,
        "starts_select_time": 1.251694679260254,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "                    if (src[srcPos]) {\n                        return 'f';\n                    } else {\n                        return '7';\n                    }\n                } else {\n                    if (src[srcPos]) {\n                        return 'b';\n                    } else {\n                        return '3';\n                    }\n                }\n            } else {\n                if (src[srcPos + 1]) {\n                    if (src[srcPos]) {\n                        return 'd';\n                    } else {\n                        return '5';\n                    }\n                } else {\n                    if (src[srcPos]) {\n                        return '9';\n                    } else {\n                        return '1';\n                    }\n        } else {\n            if (src[srcPos + 2]) {\n                if (src[srcPos + 1]) {\n                    if (src[srcPos]) {\n                        return 'e';\n                    } else {\n                        return '6';\n                    }\n                } else {\n                    if (src[srcPos]) {\n                        return 'a';\n                    } else {\n                        return '2';\n                    }\n                }\n            } else {\n                if (src[srcPos + 1]) {\n                    if (src[srcPos]) {\n                        return 'c';\n                    } else {\n                        return '4';\n                    }\n                } else {\n                    if (src[srcPos]) {\n                        return '8';\n                    } else {\n                        return '0';\n                    }\n                }\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                403,
                404,
                405,
                406,
                407,
                408,
                409,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                418,
                419,
                420,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                430,
                431,
                432,
                433,
                434,
                435,
                436,
                437,
                438,
                439,
                440,
                441,
                442,
                443,
                444,
                445,
                446,
                447,
                448,
                449,
                450,
                451,
                452,
                453,
                454,
                455,
                456,
                457,
                458
            ]
        }
    },
    {
        "commit": "1e6c8c14",
        "prev_commit": "161ef971",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConstructorUtilsTest",
            "MethodUtilsTest",
            "NumberUtilsTest",
            "BooleanUtilsTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            return isDigits( StringUtils.replaceOnce( str.substring(1), \".\", StringUtils.EMPTY ) );\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "            return isDigits( StringUtils.replaceOnce( str.substring(1), \".\", StringUtils.EMPTY ) );\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                1492
            ]
        },
        "starts_total_time": 1.2618823051452637,
        "ekstazi_total_time": 5.219452619552612,
        "ekstazi_select_time": 1.277928113937378,
        "starts_select_time": 1.2632701396942139,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "            return isDigits( StringUtils.replaceOnce( StringUtils.substring( str, 1 ), \".\", StringUtils.EMPTY ) );\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                1492
            ]
        }
    },
    {
        "commit": "bc91bedd",
        "prev_commit": "bdb1a684",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ArrayUtilsTest",
            "HashCodeBuilderTest",
            "HashCodeBuilderAndEqualsBuilderTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private static final int DEFAULT_INITIAL_VALUE = 17;\n+    \n+    private static final int DEFAULT_MULTIPLIER_VALUE = 37;\n+    \n+        return reflectionHashCode(DEFAULT_INITIAL_VALUE, DEFAULT_MULTIPLIER_VALUE, object, \n+                testTransients, null);\n+        return reflectionHashCode(DEFAULT_INITIAL_VALUE, DEFAULT_MULTIPLIER_VALUE, object, false, \n+                null, excludeFields);\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java": "    private static final int DEFAULT_INITIAL_VALUE = 17;\n    private static final int DEFAULT_MULTIPLIER_VALUE = 37;\n        return reflectionHashCode(DEFAULT_INITIAL_VALUE, DEFAULT_MULTIPLIER_VALUE, object, \n                testTransients, null);\n        return reflectionHashCode(DEFAULT_INITIAL_VALUE, DEFAULT_MULTIPLIER_VALUE, object, false, \n                null, excludeFields);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java": [
                105,
                110,
                396,
                397,
                473,
                474
            ]
        },
        "starts_total_time": 1.215132713317871,
        "ekstazi_total_time": 5.417199373245239,
        "ekstazi_select_time": 1.3439528942108154,
        "starts_select_time": 1.2429070472717285,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java": "        return reflectionHashCode(17, 37, object, testTransients, null);\n        return reflectionHashCode(17, 37, object, false, null, excludeFields);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java": [
                382,
                456
            ]
        }
    },
    {
        "commit": "ef26a667",
        "prev_commit": "09cee6a4",
        "changed_files": [
            "pom.xml",
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
            "src/main/java/org/apache/commons/lang3/BooleanUtils.java",
            "src/main/java/org/apache/commons/lang3/CharUtils.java",
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_files_num": 10,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
            "src/main/java/org/apache/commons/lang3/BooleanUtils.java",
            "src/main/java/org/apache/commons/lang3/CharUtils.java",
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/CharUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_java_files_num": 8,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "InheritanceUtilsTest",
            "StrBuilderTest",
            "ArrayUtilsTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "ReflectionToStringBuilderExcludeTest",
            "StringEscapeUtilsTest",
            "StrTokenizerTest",
            "BooleanUtilsTest",
            "DiffBuilderTest",
            "HashCodeBuilderTest",
            "StringUtilsIsTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "ClassUtilsTest",
            "FieldUtilsTest",
            "CompareToBuilderTest",
            "ArrayUtilsAddTest",
            "EnumUtilsTest",
            "StringUtilsEqualsIndexOfTest",
            "HashSetvBitSetTest",
            "NumberUtilsTest",
            "ValidateTest",
            "StringUtilsStartsEndsWithTest",
            "CharUtilsTest",
            "CharSetTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "TypeUtilsTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ObjectUtilsTest",
            "EventUtilsTest",
            "MethodUtilsTest",
            "StringUtilsSubstringTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <contributor>\n+      <name>James Sawle</name>\n+    </contributor>\n+    <action issue=\"LANG-536\" type=\"add\" dev=\"djones\" due-to=\"James Sawle\">Add isSorted() to ArrayUtils</action>\n+        final Map<Byte, MutableInt> occurrences = new HashMap<Byte, MutableInt>(values.length);\n+    public static <T extends Comparable<? super T>> boolean isSorted(final T[] array) {\n+        return isSorted(array, new Comparator<T>() {\n+            @Override\n+            public int compare(T o1, T o2) {\n+                return o1.compareTo(o2);\n+            }\n+        });\n+    }\n+   \n+    public static <T> boolean isSorted(final T[] array, final Comparator<T> comparator) {\n+        if (comparator == null) {\n+            throw new IllegalArgumentException(\"Comparator should not be null.\");\n+        }\n+        \n+        if(array == null || array.length < 2) {\n+            return true;\n+        }\n+        T previous = array[0];\n+        final int n = array.length;\n+        for(int i = 1; i < n; i++) {\n+            final T current = array[i];\n+            if (comparator.compare(previous, current) > 0) {\n+                return false;\n+            }\n+            previous = current;\n+        }\n+        return true;\n+    }\n+    public static boolean isSorted(int[] array) {\n+        if(array == null || array.length < 2) {\n+            return true;\n+        }\n+        int previous = array[0];\n+        final int n = array.length;\n+        for(int i = 1; i < n; i++) {\n+            final int current = array[i];\n+            if(NumberUtils.compare(previous, current) > 0) {\n+                return false;\n+            }\n+            previous = current;\n+        }\n+        return true;\n+    }\n+    public static boolean isSorted(long[] array) {\n+        if(array == null || array.length < 2) {\n+            return true;\n+        }\n+        long previous = array[0];\n+        final int n = array.length;\n+        for(int i = 1; i < n; i++) {\n+            final long current = array[i];\n+            if(NumberUtils.compare(previous, current) > 0) {\n+                return false;\n+            }\n+            previous = current;\n+        }\n+        return true;\n+    }\n+    public static boolean isSorted(short[] array) {\n+        if(array == null || array.length < 2) {\n+            return true;\n+        }\n+        short previous = array[0];\n+        final int n = array.length;\n+        for(int i = 1; i < n; i++) {\n+            final short current = array[i];\n+            if(NumberUtils.compare(previous, current) > 0) {\n+                return false;\n+            }\n+            previous = current;\n+        }\n+        return true;\n+    }\n+    public static boolean isSorted(final double[] array) {\n+        if(array == null || array.length < 2) {\n+            return true;\n+        }\n+        double previous = array[0];\n+        final int n = array.length;\n+        for(int i = 1; i < n; i++) {\n+            final double current = array[i];\n+            if(Double.compare(previous, current) > 0) {\n+                return false;\n+            }\n+            previous = current;\n+        }\n+        return true;\n+    }\n+    public static boolean isSorted(final float[] array) {\n+        if(array == null || array.length < 2) {\n+            return true;\n+        }\n+        float previous = array[0];\n+        final int n = array.length;\n+        for(int i = 1; i < n; i++) {\n+            final float current = array[i];\n+            if(Float.compare(previous, current) > 0) {\n+                return false;\n+            }\n+            previous = current;\n+        }\n+        return true;\n+    }\n+    public static boolean isSorted(byte[] array) {\n+        if(array == null || array.length < 2) {\n+            return true;\n+        }\n+        byte previous = array[0];\n+        final int n = array.length;\n+        for(int i = 1; i < n; i++) {\n+            final byte current = array[i];\n+            if(NumberUtils.compare(previous, current) > 0) {\n+                return false;\n+            }\n+            previous = current;\n+        }\n+        return true;\n+    }\n+    public static boolean isSorted(char[] array) {\n+        if(array == null || array.length < 2) {\n+            return true;\n+        }\n+        char previous = array[0];\n+        final int n = array.length;\n+        for(int i = 1; i < n; i++) {\n+            final char current = array[i];\n+            if(CharUtils.compare(previous, current) > 0) {\n+                return false;\n+            }\n+            previous = current;\n+        }\n+        return true;\n+    }\n+    public static boolean isSorted(boolean[] array) {\n+        if(array == null || array.length < 2) {\n+            return true;\n+        }\n+        boolean previous = array[0];\n+        final int n = array.length;\n+        for(int i = 1; i < n; i++) {\n+            final boolean current = array[i];\n+            if(BooleanUtils.compare(previous, current) > 0) {\n+                return false;\n+            }\n+            previous = current;\n+        }\n+        return true;\n+    }\n+    public static int compare(boolean x, boolean y) {\n+        if (x == y) {\n+            return 0;\n+        }\n+        if (x) {\n+            return 1;\n+        } else {\n+            return -1;\n+        }\n+    }\n+    public static int compare(char x, char y) {\n+        return x-y;\n+    }\n+    public static int compare(int x, int y) {\n+        if (x == y) {\n+            return 0;\n+        }\n+        if (x < y) {\n+            return -1;\n+        } else {\n+            return 1;\n+        }\n+    }\n+    public static int compare(long x, long y) {\n+        if (x == y) {\n+            return 0;\n+        }\n+        if (x < y) {\n+            return -1;\n+        } else {\n+            return 1;\n+        }\n+    }\n+    public static int compare(short x, short y) {\n+        if (x == y) {\n+            return 0;\n+        }\n+        if (x < y) {\n+            return -1;\n+        } else {\n+            return 1;\n+        }\n+    }\n+    public static int compare(byte x, byte y) {\n+        return x-y;\n+    }\n+    @Test\n+    public void testIsSorted() {\n+        Integer[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new Integer[]{1};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new Integer[]{1,2,3};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new Integer[]{1,3,2};\n+        assertFalse(ArrayUtils.isSorted(array));\n+    }\n+    @Test\n+    public void testIsSortedComparator() {\n+        Comparator<Integer> c = new Comparator<Integer>() {\n+                public int compare(Integer o1, Integer o2) {\n+                        return o2.compareTo(o1);\n+                    }\n+            };\n+        Integer[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array, c));\n+        array = new Integer[]{1};\n+        assertTrue(ArrayUtils.isSorted(array, c));\n+        array = new Integer[]{3,2,1};\n+        assertTrue(ArrayUtils.isSorted(array, c));\n+        array = new Integer[]{1,3,2};\n+        assertFalse(ArrayUtils.isSorted(array, c));\n+    }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testIsSortedNullComparator() throws Exception {\n+        ArrayUtils.isSorted(null, null);\n+    }\n+    @Test\n+    public void testIsSortedInt() {\n+        int[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new int[]{1};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new int[]{1,2,3};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new int[]{1,3,2};\n+        assertFalse(ArrayUtils.isSorted(array));\n+    }\n+    @Test\n+    public void testIsSortedFloat() {\n+        float[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new float[]{0f};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new float[]{-1f, 0f, 0.1f, 0.2f};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new float[]{-1f, 0.2f, 0.1f, 0f};\n+        assertFalse(ArrayUtils.isSorted(array));\n+    }\n+    @Test\n+    public void testIsSortedLong() {\n+        long[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new long[]{0L};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new long[]{-1L, 0L, 1L};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new long[]{-1L, 1L, 0L};\n+        assertFalse(ArrayUtils.isSorted(array));\n+    }\n+    @Test\n+    public void testIsSortedDouble() {\n+        double[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new double[]{0.0};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new double[]{-1.0, 0.0, 0.1, 0.2};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new double[]{-1.0, 0.2, 0.1, 0.0};\n+        assertFalse(ArrayUtils.isSorted(array));\n+    }\n+    @Test\n+    public void testIsSortedChar() {\n+        char[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new char[]{'a'};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new char[]{'a', 'b', 'c'};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new char[]{'a', 'c', 'b'};\n+        assertFalse(ArrayUtils.isSorted(array));\n+    }\n+    @Test\n+    public void testIsSortedByte() {\n+        byte[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new byte[]{0x10};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new byte[]{0x10, 0x20, 0x30};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new byte[]{0x10, 0x30, 0x20};\n+        assertFalse(ArrayUtils.isSorted(array));\n+    }\n+    @Test\n+    public void testIsSortedShort() {\n+        short[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new short[]{0};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new short[]{-1, 0, 1};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new short[]{-1, 1, 0};\n+        assertFalse(ArrayUtils.isSorted(array));\n+    }\n+    @Test\n+    public void testIsSortedBool() {\n+        boolean[] array = null;\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new boolean[]{true};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new boolean[]{false, true};\n+        assertTrue(ArrayUtils.isSorted(array));\n+        array = new boolean[]{true, false};\n+        assertFalse(ArrayUtils.isSorted(array));\n+    }\n+    @Test\n+    public void testCompare(){\n+        assertTrue(BooleanUtils.compare(true, false) > 0);\n+        assertTrue(BooleanUtils.compare(true, true) == 0);\n+        assertTrue(BooleanUtils.compare(false, false) == 0);\n+        assertTrue(BooleanUtils.compare(false, true) < 0);\n+    }\n+    @Test\n+    public void testCompare() {\n+        assertTrue(CharUtils.compare('a', 'b') < 0);\n+        assertTrue(CharUtils.compare('c', 'c') == 0);\n+        assertTrue(CharUtils.compare('c', 'a') > 0);\n+    }\n+    @Test\n+    public void compareInt() {\n+        assertTrue(NumberUtils.compare(-3, 0) < 0);\n+        assertTrue(NumberUtils.compare(113, 113)==0);\n+        assertTrue(NumberUtils.compare(213, 32) > 0);\n+    }\n+    @Test\n+    public void compareLong() {\n+        assertTrue(NumberUtils.compare(-3L, 0L) < 0);\n+        assertTrue(NumberUtils.compare(113L, 113L)==0);\n+        assertTrue(NumberUtils.compare(213L, 32L) > 0);\n+    }\n+    @Test\n+    public void compareShort() {\n+        assertTrue(NumberUtils.compare((short)-3, (short)0) < 0);\n+        assertTrue(NumberUtils.compare((short)113, (short)113)==0);\n+        assertTrue(NumberUtils.compare((short)213, (short)32) > 0);\n+    }\n+    @Test\n+    public void compareByte() {\n+        assertTrue(NumberUtils.compare((byte)-3, (byte)0) < 0);\n+        assertTrue(NumberUtils.compare((byte)113, (byte)113)==0);\n+        assertTrue(NumberUtils.compare((byte)123, (byte)32) > 0);\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": "import java.util.Comparator;\nimport org.apache.commons.lang3.math.NumberUtils;\n        final Map<Byte, MutableInt> occurrences = new HashMap<Byte, MutableInt>(values.length);\n    public static <T extends Comparable<? super T>> boolean isSorted(final T[] array) {\n        return isSorted(array, new Comparator<T>() {\n            @Override\n            public int compare(T o1, T o2) {\n                return o1.compareTo(o2);\n            }\n        });\n    }\n    public static <T> boolean isSorted(final T[] array, final Comparator<T> comparator) {\n        if (comparator == null) {\n            throw new IllegalArgumentException(\"Comparator should not be null.\");\n        }\n        if(array == null || array.length < 2) {\n            return true;\n        }\n        T previous = array[0];\n        final int n = array.length;\n        for(int i = 1; i < n; i++) {\n            final T current = array[i];\n            if (comparator.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n    public static boolean isSorted(int[] array) {\n        if(array == null || array.length < 2) {\n            return true;\n        }\n        int previous = array[0];\n        final int n = array.length;\n        for(int i = 1; i < n; i++) {\n            final int current = array[i];\n            if(NumberUtils.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n    public static boolean isSorted(long[] array) {\n        if(array == null || array.length < 2) {\n            return true;\n        }\n        long previous = array[0];\n        final int n = array.length;\n        for(int i = 1; i < n; i++) {\n            final long current = array[i];\n            if(NumberUtils.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n    public static boolean isSorted(short[] array) {\n        if(array == null || array.length < 2) {\n            return true;\n        }\n        short previous = array[0];\n        final int n = array.length;\n        for(int i = 1; i < n; i++) {\n            final short current = array[i];\n            if(NumberUtils.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n    public static boolean isSorted(final double[] array) {\n        if(array == null || array.length < 2) {\n            return true;\n        }\n        double previous = array[0];\n        final int n = array.length;\n        for(int i = 1; i < n; i++) {\n            final double current = array[i];\n            if(Double.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n    public static boolean isSorted(final float[] array) {\n        if(array == null || array.length < 2) {\n            return true;\n        }\n        float previous = array[0];\n        final int n = array.length;\n        for(int i = 1; i < n; i++) {\n            final float current = array[i];\n            if(Float.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n    public static boolean isSorted(byte[] array) {\n        if(array == null || array.length < 2) {\n            return true;\n        }\n        byte previous = array[0];\n        final int n = array.length;\n        for(int i = 1; i < n; i++) {\n            final byte current = array[i];\n            if(NumberUtils.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n    public static boolean isSorted(char[] array) {\n        if(array == null || array.length < 2) {\n            return true;\n        }\n        char previous = array[0];\n        final int n = array.length;\n        for(int i = 1; i < n; i++) {\n            final char current = array[i];\n            if(CharUtils.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n    public static boolean isSorted(boolean[] array) {\n        if(array == null || array.length < 2) {\n            return true;\n        }\n        boolean previous = array[0];\n        final int n = array.length;\n        for(int i = 1; i < n; i++) {\n            final boolean current = array[i];\n            if(BooleanUtils.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n",
            "src/main/java/org/apache/commons/lang3/BooleanUtils.java": "    public static int compare(boolean x, boolean y) {\n        if (x == y) {\n            return 0;\n        }\n        if (x) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n",
            "src/main/java/org/apache/commons/lang3/CharUtils.java": "    public static int compare(char x, char y) {\n        return x-y;\n    }\n",
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "    public static int compare(int x, int y) {\n        if (x == y) {\n            return 0;\n        }\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n    public static int compare(long x, long y) {\n        if (x == y) {\n            return 0;\n        }\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n    public static int compare(short x, short y) {\n        if (x == y) {\n            return 0;\n        }\n        if (x < y) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n    public static int compare(byte x, byte y) {\n        return x-y;\n    }\n",
            "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java": "import static org.junit.Assert.*;\nimport java.util.Comparator;\n    @Test\n    public void testIsSorted() {\n        Integer[] array = null;\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new Integer[]{1};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new Integer[]{1,2,3};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new Integer[]{1,3,2};\n        assertFalse(ArrayUtils.isSorted(array));\n    }\n    @Test\n    public void testIsSortedComparator() {\n        Comparator<Integer> c = new Comparator<Integer>() {\n                public int compare(Integer o1, Integer o2) {\n                        return o2.compareTo(o1);\n                    }\n            };\n        Integer[] array = null;\n        assertTrue(ArrayUtils.isSorted(array, c));\n        array = new Integer[]{1};\n        assertTrue(ArrayUtils.isSorted(array, c));\n        array = new Integer[]{3,2,1};\n        assertTrue(ArrayUtils.isSorted(array, c));\n        array = new Integer[]{1,3,2};\n        assertFalse(ArrayUtils.isSorted(array, c));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testIsSortedNullComparator() throws Exception {\n        ArrayUtils.isSorted(null, null);\n    }\n    @Test\n    public void testIsSortedInt() {\n        int[] array = null;\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new int[]{1};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new int[]{1,2,3};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new int[]{1,3,2};\n        assertFalse(ArrayUtils.isSorted(array));\n    }\n    @Test\n    public void testIsSortedFloat() {\n        float[] array = null;\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new float[]{0f};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new float[]{-1f, 0f, 0.1f, 0.2f};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new float[]{-1f, 0.2f, 0.1f, 0f};\n        assertFalse(ArrayUtils.isSorted(array));\n    }\n    @Test\n    public void testIsSortedLong() {\n        long[] array = null;\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new long[]{0L};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new long[]{-1L, 0L, 1L};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new long[]{-1L, 1L, 0L};\n        assertFalse(ArrayUtils.isSorted(array));\n    }\n    @Test\n    public void testIsSortedDouble() {\n        double[] array = null;\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new double[]{0.0};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new double[]{-1.0, 0.0, 0.1, 0.2};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new double[]{-1.0, 0.2, 0.1, 0.0};\n        assertFalse(ArrayUtils.isSorted(array));\n    }\n    @Test\n    public void testIsSortedChar() {\n        char[] array = null;\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new char[]{'a'};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new char[]{'a', 'b', 'c'};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new char[]{'a', 'c', 'b'};\n        assertFalse(ArrayUtils.isSorted(array));\n    }\n    @Test\n    public void testIsSortedByte() {\n        byte[] array = null;\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new byte[]{0x10};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new byte[]{0x10, 0x20, 0x30};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new byte[]{0x10, 0x30, 0x20};\n        assertFalse(ArrayUtils.isSorted(array));\n    }\n    @Test\n    public void testIsSortedShort() {\n        short[] array = null;\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new short[]{0};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new short[]{-1, 0, 1};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new short[]{-1, 1, 0};\n        assertFalse(ArrayUtils.isSorted(array));\n    }\n    @Test\n    public void testIsSortedBool() {\n        boolean[] array = null;\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new boolean[]{true};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new boolean[]{false, true};\n        assertTrue(ArrayUtils.isSorted(array));\n        array = new boolean[]{true, false};\n        assertFalse(ArrayUtils.isSorted(array));\n    }\n",
            "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java": "    @Test\n    public void testCompare(){\n        assertTrue(BooleanUtils.compare(true, false) > 0);\n        assertTrue(BooleanUtils.compare(true, true) == 0);\n        assertTrue(BooleanUtils.compare(false, false) == 0);\n        assertTrue(BooleanUtils.compare(false, true) < 0);\n    }\n",
            "src/test/java/org/apache/commons/lang3/CharUtilsTest.java": "    @Test\n    public void testCompare() {\n        assertTrue(CharUtils.compare('a', 'b') < 0);\n        assertTrue(CharUtils.compare('c', 'c') == 0);\n        assertTrue(CharUtils.compare('c', 'a') > 0);\n    }\n",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": "    @Test\n    public void compareInt() {\n        assertTrue(NumberUtils.compare(-3, 0) < 0);\n        assertTrue(NumberUtils.compare(113, 113)==0);\n        assertTrue(NumberUtils.compare(213, 32) > 0);\n    }\n    @Test\n    public void compareLong() {\n        assertTrue(NumberUtils.compare(-3L, 0L) < 0);\n        assertTrue(NumberUtils.compare(113L, 113L)==0);\n        assertTrue(NumberUtils.compare(213L, 32L) > 0);\n    }\n    @Test\n    public void compareShort() {\n        assertTrue(NumberUtils.compare((short)-3, (short)0) < 0);\n        assertTrue(NumberUtils.compare((short)113, (short)113)==0);\n        assertTrue(NumberUtils.compare((short)213, (short)32) > 0);\n    }\n    @Test\n    public void compareByte() {\n        assertTrue(NumberUtils.compare((byte)-3, (byte)0) < 0);\n        assertTrue(NumberUtils.compare((byte)113, (byte)113)==0);\n        assertTrue(NumberUtils.compare((byte)123, (byte)32) > 0);\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": [
                22,
                30,
                5361,
                6102,
                6103,
                6104,
                6105,
                6106,
                6107,
                6108,
                6109,
                6121,
                6122,
                6123,
                6124,
                6126,
                6127,
                6128,
                6130,
                6131,
                6132,
                6133,
                6134,
                6135,
                6136,
                6138,
                6139,
                6140,
                6141,
                6150,
                6151,
                6152,
                6153,
                6155,
                6156,
                6157,
                6158,
                6159,
                6160,
                6161,
                6163,
                6164,
                6165,
                6166,
                6175,
                6176,
                6177,
                6178,
                6180,
                6181,
                6182,
                6183,
                6184,
                6185,
                6186,
                6188,
                6189,
                6190,
                6191,
                6200,
                6201,
                6202,
                6203,
                6205,
                6206,
                6207,
                6208,
                6209,
                6210,
                6211,
                6213,
                6214,
                6215,
                6216,
                6225,
                6226,
                6227,
                6228,
                6230,
                6231,
                6232,
                6233,
                6234,
                6235,
                6236,
                6238,
                6239,
                6240,
                6241,
                6250,
                6251,
                6252,
                6253,
                6255,
                6256,
                6257,
                6258,
                6259,
                6260,
                6261,
                6263,
                6264,
                6265,
                6266,
                6275,
                6276,
                6277,
                6278,
                6280,
                6281,
                6282,
                6283,
                6284,
                6285,
                6286,
                6288,
                6289,
                6290,
                6291,
                6300,
                6301,
                6302,
                6303,
                6305,
                6306,
                6307,
                6308,
                6309,
                6310,
                6311,
                6313,
                6314,
                6315,
                6316,
                6326,
                6327,
                6328,
                6329,
                6331,
                6332,
                6333,
                6334,
                6335,
                6336,
                6337,
                6339,
                6340,
                6341,
                6342
            ],
            "src/main/java/org/apache/commons/lang3/BooleanUtils.java": [
                1098,
                1099,
                1100,
                1101,
                1102,
                1103,
                1104,
                1105,
                1106,
                1107
            ],
            "src/main/java/org/apache/commons/lang3/CharUtils.java": [
                549,
                550,
                551
            ],
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                1508,
                1509,
                1510,
                1511,
                1512,
                1513,
                1514,
                1515,
                1516,
                1517,
                1529,
                1530,
                1531,
                1532,
                1533,
                1534,
                1535,
                1536,
                1537,
                1538,
                1550,
                1551,
                1552,
                1553,
                1554,
                1555,
                1556,
                1557,
                1558,
                1559,
                1571,
                1572,
                1573
            ],
            "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java": [
                19,
                24,
                3468,
                3469,
                3470,
                3471,
                3473,
                3474,
                3476,
                3477,
                3479,
                3480,
                3481,
                3483,
                3484,
                3485,
                3486,
                3487,
                3488,
                3489,
                3491,
                3492,
                3494,
                3495,
                3497,
                3498,
                3500,
                3501,
                3502,
                3504,
                3505,
                3506,
                3507,
                3509,
                3510,
                3511,
                3512,
                3514,
                3515,
                3517,
                3518,
                3520,
                3521,
                3522,
                3524,
                3525,
                3526,
                3527,
                3529,
                3530,
                3532,
                3533,
                3535,
                3536,
                3537,
                3539,
                3540,
                3541,
                3542,
                3544,
                3545,
                3547,
                3548,
                3550,
                3551,
                3552,
                3554,
                3555,
                3556,
                3557,
                3559,
                3560,
                3562,
                3563,
                3565,
                3566,
                3567,
                3569,
                3570,
                3571,
                3572,
                3574,
                3575,
                3577,
                3578,
                3580,
                3581,
                3582,
                3584,
                3585,
                3586,
                3587,
                3589,
                3590,
                3592,
                3593,
                3595,
                3596,
                3597,
                3599,
                3600,
                3601,
                3602,
                3604,
                3605,
                3607,
                3608,
                3610,
                3611,
                3612,
                3614,
                3615,
                3616,
                3617,
                3619,
                3620,
                3622,
                3623,
                3625,
                3626,
                3627
            ],
            "src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java": [
                1010,
                1011,
                1012,
                1013,
                1014,
                1015,
                1016
            ],
            "src/test/java/org/apache/commons/lang3/CharUtilsTest.java": [
                358,
                359,
                360,
                361,
                362,
                363
            ],
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": [
                1362,
                1363,
                1364,
                1365,
                1366,
                1367,
                1369,
                1370,
                1371,
                1372,
                1373,
                1374,
                1376,
                1377,
                1378,
                1379,
                1380,
                1381,
                1383,
                1384,
                1385,
                1386,
                1387,
                1388
            ]
        },
        "starts_total_time": 1.366300344467163,
        "ekstazi_total_time": 6.231909513473511,
        "ekstazi_select_time": 1.338289737701416,
        "starts_select_time": 1.280235767364502,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": "        final HashMap<Byte, MutableInt> occurrences = new HashMap<Byte, MutableInt>(values.length);\n",
            "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java": "import static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": [
                5359
            ],
            "src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java": [
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27
            ]
        }
    },
    {
        "commit": "248fd216",
        "prev_commit": "71966110",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 85,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 56,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 15,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConversionTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            return FFFF.clone();\n+            return TFFF.clone();\n+            return FTFF.clone();\n+            return TTFF.clone();\n+            return FFTF.clone();\n+            return TFTF.clone();\n+            return FTTF.clone();\n+            return TTTF.clone();\n+            return FFFT.clone();\n+            return TFFT.clone();\n+            return FTFT.clone();\n+            return TTFT.clone();\n+            return FFTT.clone();\n+            return TFTT.clone();\n+            return FTTT.clone();\n+            return TTTT.clone();\n+            return FFFF.clone();\n+            return FFFT.clone();\n+            return FFTF.clone();\n+            return FFTT.clone();\n+            return FTFF.clone();\n+            return FTFT.clone();\n+            return FTTF.clone();\n+            return FTTT.clone();\n+            return TFFF.clone();\n+            return TFFT.clone();\n+            return TFTF.clone();\n+            return TFTT.clone();\n+            return TTFF.clone();\n+            return TTFT.clone();\n+            return TTTF.clone();\n+            return TTTT.clone();\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "            return FFFF.clone();\n            return TFFF.clone();\n            return FTFF.clone();\n            return TTFF.clone();\n            return FFTF.clone();\n            return TFTF.clone();\n            return FTTF.clone();\n            return TTTF.clone();\n            return FFFT.clone();\n            return TFFT.clone();\n            return FTFT.clone();\n            return TTFT.clone();\n            return FFTT.clone();\n            return TFTT.clone();\n            return FTTT.clone();\n            return TTTT.clone();\n            return FFFF.clone();\n            return FFFT.clone();\n            return FFTF.clone();\n            return FFTT.clone();\n            return FTFF.clone();\n            return FTFT.clone();\n            return FTTF.clone();\n            return FTTT.clone();\n            return TFFF.clone();\n            return TFFT.clone();\n            return TFTF.clone();\n            return TFTT.clone();\n            return TTFF.clone();\n            return TTFT.clone();\n            return TTTF.clone();\n            return TTTT.clone();\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                179,
                181,
                183,
                185,
                187,
                189,
                191,
                193,
                195,
                197,
                200,
                203,
                206,
                209,
                212,
                215,
                237,
                239,
                241,
                243,
                245,
                247,
                249,
                251,
                253,
                255,
                258,
                261,
                264,
                267,
                270,
                273
            ]
        },
        "starts_total_time": 1.2025809288024902,
        "ekstazi_total_time": 5.242628335952759,
        "ekstazi_select_time": 1.3424665927886963,
        "starts_select_time": 1.2380995750427246,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "            return FFFF;\n            return TFFF;\n            return FTFF;\n            return TTFF;\n            return FFTF;\n            return TFTF;\n            return FTTF;\n            return TTTF;\n            return FFFT;\n            return TFFT;\n            return FTFT;\n            return TTFT;\n            return FFTT;\n            return TFTT;\n            return FTTT;\n            return TTTT;\n            return FFFF;\n            return FFFT;\n            return FFTF;\n            return FFTT;\n            return FTFF;\n            return FTFT;\n            return FTTF;\n            return FTTT;\n            return TFFF;\n            return TFFT;\n            return TFTF;\n            return TFTT;\n            return TTFF;\n            return TTFT;\n            return TTTF;\n            return TTTT;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                179,
                181,
                183,
                185,
                187,
                189,
                191,
                193,
                195,
                197,
                200,
                203,
                206,
                209,
                212,
                215,
                237,
                239,
                241,
                243,
                245,
                247,
                249,
                251,
                253,
                255,
                258,
                261,
                264,
                267,
                270,
                273
            ]
        }
    },
    {
        "commit": "e5a3039f",
        "prev_commit": "05763470",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ContextedExceptionTest",
            "NoFieldNamesToStringStyleTest",
            "StrBuilderTest",
            "StopWatchTest",
            "ArrayUtilsTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "StringEscapeUtilsTest",
            "DefaultToStringStyleTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "StringUtilsIsTest",
            "DurationFormatUtilsTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "SimpleToStringStyleTest",
            "StringUtilsEqualsIndexOfTest",
            "CharSetUtilsTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "NumberUtilsTest",
            "StringUtilsTrimEmptyTest",
            "ValidateTest",
            "LocaleUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "RecursiveToStringStyleTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "DefaultExceptionContextTest",
            "StringUtilsSubstringTest",
            "StrSubstitutorTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1077\" type=\"fix\" dev=\"kinow\" due-to=\"haiyang li\">StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 2) != 3 in StringUtils</action>\n+                index = CharSequenceUtils.lastIndexOf(str, searchStr, index - searchStr.length());\n+                index = CharSequenceUtils.indexOf(str, searchStr, index + searchStr.length());\n+        assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 2));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 3));\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "                index = CharSequenceUtils.lastIndexOf(str, searchStr, index - searchStr.length());\n                index = CharSequenceUtils.indexOf(str, searchStr, index + searchStr.length());\n",
            "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java": "        assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 2));\n        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 3));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                1026,
                1028
            ],
            "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java": [
                1010,
                1011
            ]
        },
        "starts_total_time": 1.3766546249389648,
        "ekstazi_total_time": 11.22791862487793,
        "ekstazi_select_time": 1.2979745864868164,
        "starts_select_time": 1.2559254169464111,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "                index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);\n                index = CharSequenceUtils.indexOf(str, searchStr, index + 1);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                1026,
                1028
            ]
        }
    },
    {
        "commit": "bc8e2380",
        "prev_commit": "092d6da5",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/StringUtils.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/StringUtils.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ContextedExceptionTest",
            "NoFieldNamesToStringStyleTest",
            "StrBuilderTest",
            "StopWatchTest",
            "ArrayUtilsTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "StringEscapeUtilsTest",
            "DefaultToStringStyleTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "StringUtilsIsTest",
            "DurationFormatUtilsTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "SimpleToStringStyleTest",
            "StringUtilsEqualsIndexOfTest",
            "CharSetUtilsTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "NumberUtilsTest",
            "StringUtilsTrimEmptyTest",
            "ValidateTest",
            "LocaleUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "RecursiveToStringStyleTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "DefaultExceptionContextTest",
            "StringUtilsSubstringTest",
            "StrSubstitutorTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1020\" type=\"update\" dev=\"britter\" due-to=\"Libor Ondrusek\">Improve performance of normalize space</action>\n+        if (isEmpty(str)) {\n+            return str;\n+        }\n+        final int size = str.length();\n+        final char[] newChars = new char[size];\n+        int count = 0;\n+        int whitespacesCount = 0;\n+        boolean startWhitespaces = true;\n+        for (int i = 0; i < size; i++) {\n+            char actualChar = str.charAt(i);\n+            boolean isWhitespace = Character.isWhitespace(actualChar);\n+            if (!isWhitespace) {\n+                startWhitespaces = false;\n+                newChars[count++] = (actualChar == 160 ? 32 : actualChar);\n+                whitespacesCount = 0;\n+            } else {\n+                if (whitespacesCount == 0 && !startWhitespaces) {\n+                    newChars[count++] = SPACE.charAt(0);\n+                }\n+                whitespacesCount++;\n+            }\n+        }\n+        if (startWhitespaces) {\n+            return EMPTY;\n+        return new String(newChars, 0, count - (whitespacesCount > 0 ? 1 : 0));\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "        if (isEmpty(str)) {\n            return str;\n        }\n        final int size = str.length();\n        final char[] newChars = new char[size];\n        int count = 0;\n        int whitespacesCount = 0;\n        boolean startWhitespaces = true;\n        for (int i = 0; i < size; i++) {\n            char actualChar = str.charAt(i);\n            boolean isWhitespace = Character.isWhitespace(actualChar);\n            if (!isWhitespace) {\n                startWhitespaces = false;\n                newChars[count++] = (actualChar == 160 ? 32 : actualChar);\n                whitespacesCount = 0;\n            } else {\n                if (whitespacesCount == 0 && !startWhitespaces) {\n                    newChars[count++] = SPACE.charAt(0);\n                }\n                whitespacesCount++;\n            }\n        }\n        if (startWhitespaces) {\n            return EMPTY;\n        return new String(newChars, 0, count - (whitespacesCount > 0 ? 1 : 0));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                7472,
                7473,
                7474,
                7475,
                7476,
                7477,
                7478,
                7479,
                7480,
                7481,
                7482,
                7483,
                7484,
                7485,
                7486,
                7487,
                7488,
                7489,
                7490,
                7491,
                7492,
                7493,
                7494,
                7495,
                7497
            ]
        },
        "starts_total_time": 1.2836196422576904,
        "ekstazi_total_time": 11.059041023254395,
        "ekstazi_select_time": 1.2980260848999023,
        "starts_select_time": 1.230760097503662,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "    private static final Pattern WHITESPACE_PATTERN = Pattern.compile(\"(?: |\\\\u00A0|\\\\s|[\\\\s&&[^ ]])\\\\s*\");\n        if (str == null) {\n            return null;\n        return WHITESPACE_PATTERN.matcher(trim(str)).replaceAll(SPACE);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                183,
                7480,
                7481,
                7483
            ]
        }
    },
    {
        "commit": "a169e866",
        "prev_commit": "9e26c7b6",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/StringUtils.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/StringUtils.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ContextedExceptionTest",
            "NoFieldNamesToStringStyleTest",
            "StrBuilderTest",
            "StopWatchTest",
            "ArrayUtilsTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "StringEscapeUtilsTest",
            "DefaultToStringStyleTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "StringUtilsIsTest",
            "DurationFormatUtilsTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "SimpleToStringStyleTest",
            "StringUtilsEqualsIndexOfTest",
            "CharSetUtilsTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "NumberUtilsTest",
            "StringUtilsTrimEmptyTest",
            "ValidateTest",
            "LocaleUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "RecursiveToStringStyleTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "DefaultExceptionContextTest",
            "StringUtilsSubstringTest",
            "StrSubstitutorTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        for (CharSequence searchCharSequence : searchCharSequences) {\n+            if (contains(cs, searchCharSequence)) {\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "        for (CharSequence searchCharSequence : searchCharSequences) {\n            if (contains(cs, searchCharSequence)) {\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                1690,
                1691
            ]
        },
        "starts_total_time": 1.27077317237854,
        "ekstazi_total_time": 11.196269273757935,
        "ekstazi_select_time": 1.2929844856262207,
        "starts_select_time": 1.3149933815002441,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "        for (int i = 0; i < searchCharSequences.length; i++) {\n            if (contains(cs, searchCharSequences[i])) {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                1690,
                1691
            ]
        }
    },
    {
        "commit": "0162032a",
        "prev_commit": "21201210",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConstructorUtilsTest",
            "BooleanUtilsTest",
            "ArrayUtilsTest",
            "MethodUtilsTest",
            "NumberUtilsTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1072\" type=\"fix\" dev=\"sebb\" due-to=\"haiyang li\">Duplicated \"0x\" check in createBigInteger in NumberUtils</action>\n+        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0X\", pos)) { // hex\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"255\"), NumberUtils.createBigInteger(\"0Xff\"));\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0X\", pos)) { // hex\n",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": "        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"255\"), NumberUtils.createBigInteger(\"0Xff\"));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                737
            ],
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": [
                430
            ]
        },
        "starts_total_time": 1.2490637302398682,
        "ekstazi_total_time": 5.566812992095947,
        "ekstazi_select_time": 1.314600944519043,
        "starts_select_time": 1.2703557014465332,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                737
            ]
        }
    },
    {
        "commit": "ffc38b1f",
        "prev_commit": "3181b407",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "DiffBuilderTest",
            "DiffResultTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1081\" type=\"fix\" dev=\"britter\" due-to=\"Jonathan Baker\">DiffBuilder.append(String, Object left, Object right) does not do a left.equals(right) check</action>\n+        if (lhs != null ? lhs.equals(rhs) : rhs.equals(lhs)) {\n+            return this;\n+        }\n+    public void testObjectsSameAndEqual() throws Exception {\n+        final Integer sameObject = 1;\n+        final TypeTestClass left = new TypeTestClass();\n+        left.objectField = sameObject;\n+        final TypeTestClass right = new TypeTestClass();\n+        right.objectField = sameObject;\n+        assertTrue(left.objectField == right.objectField);\n+        assertTrue(left.objectField.equals(right.objectField));\n+        final DiffResult list = left.diff(right);\n+    @Test\n+    public void testObjectsNotSameButEqual() throws Exception {\n+        final TypeTestClass left = new TypeTestClass();\n+        left.objectField = new Integer(1);\n+        final TypeTestClass right = new TypeTestClass();\n+        right.objectField = new Integer(1);\n+        assertFalse(left.objectField == right.objectField);\n+        assertTrue(left.objectField.equals(right.objectField));\n+        final DiffResult list = left.diff(right);\n+        assertEquals(0, list.getNumberOfDiffs());\n+    }\n+    @Test\n+    public void testObjectsNotSameNorEqual() throws Exception {\n+        final TypeTestClass left = new TypeTestClass();\n+        left.objectField = 4;\n+        final TypeTestClass right = new TypeTestClass();\n+        right.objectField = 100;\n+        assertFalse(left.objectField == right.objectField);\n+        assertFalse(left.objectField.equals(right.objectField));\n+        final DiffResult list = left.diff(right);\n+        assertEquals(1, list.getNumberOfDiffs());\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java": "        if (lhs != null ? lhs.equals(rhs) : rhs.equals(lhs)) {\n            return this;\n        }\n",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": "import static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n    public void testObjectsSameAndEqual() throws Exception {\n        final Integer sameObject = 1;\n        final TypeTestClass left = new TypeTestClass();\n        left.objectField = sameObject;\n        final TypeTestClass right = new TypeTestClass();\n        right.objectField = sameObject;\n        assertTrue(left.objectField == right.objectField);\n        assertTrue(left.objectField.equals(right.objectField));\n        final DiffResult list = left.diff(right);\n    @Test\n    public void testObjectsNotSameButEqual() throws Exception {\n        final TypeTestClass left = new TypeTestClass();\n        left.objectField = new Integer(1);\n        final TypeTestClass right = new TypeTestClass();\n        right.objectField = new Integer(1);\n        assertFalse(left.objectField == right.objectField);\n        assertTrue(left.objectField.equals(right.objectField));\n        final DiffResult list = left.diff(right);\n        assertEquals(0, list.getNumberOfDiffs());\n    }\n    @Test\n    public void testObjectsNotSameNorEqual() throws Exception {\n        final TypeTestClass left = new TypeTestClass();\n        left.objectField = 4;\n        final TypeTestClass right = new TypeTestClass();\n        right.objectField = 100;\n        assertFalse(left.objectField == right.objectField);\n        assertFalse(left.objectField.equals(right.objectField));\n        final DiffResult list = left.diff(right);\n        assertEquals(1, list.getNumberOfDiffs());\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java": [
                885,
                886,
                887
            ],
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": [
                22,
                24,
                331,
                332,
                333,
                334,
                335,
                336,
                337,
                338,
                340,
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                356,
                357,
                358,
                363,
                364,
                365,
                366,
                367,
                368,
                369,
                370,
                372,
                373,
                374
            ]
        },
        "starts_total_time": 1.2593131065368652,
        "ekstazi_total_time": 5.570841312408447,
        "ekstazi_select_time": 1.3139195442199707,
        "starts_select_time": 1.2439639568328857,
        "deleted_diff_per_file": {
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": "    public void testObjectsEqual() throws Exception {        \n        final TypeTestClass class1 = new TypeTestClass();\n        final TypeTestClass class2 = new TypeTestClass();\n        class1.objectField = \"Some string\";\n        class2.objectField = \"Some string\";\n        final DiffResult list = class1.diff(class2);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": [
                326,
                327,
                328,
                329,
                330,
                331
            ]
        }
    },
    {
        "commit": "09cee6a4",
        "prev_commit": "b199af8d",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "StrBuilderTest",
            "ArrayUtilsTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "ReflectionToStringBuilderExcludeTest",
            "StringEscapeUtilsTest",
            "StrTokenizerTest",
            "BooleanUtilsTest",
            "DiffBuilderTest",
            "HashCodeBuilderTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "ClassUtilsTest",
            "FieldUtilsTest",
            "CompareToBuilderTest",
            "ArrayUtilsAddTest",
            "EnumUtilsTest",
            "StringUtilsEqualsIndexOfTest",
            "HashSetvBitSetTest",
            "ValidateTest",
            "EqualsBuilderTest",
            "StringUtilsStartsEndsWithTest",
            "CharSetTest",
            "ArrayUtilsRemoveMultipleTest",
            "TypeUtilsTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ObjectUtilsTest",
            "EventUtilsTest",
            "MethodUtilsTest",
            "StringUtilsSubstringTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n+        if (isEmpty(array)) {\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": "        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n        if (isEmpty(array)) {\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": [
                473,
                493,
                513,
                533,
                553,
                573,
                593,
                613,
                633,
                653,
                673,
                693,
                713,
                733,
                753,
                773,
                793,
                813,
                833
            ]
        },
        "starts_total_time": 1.2617404460906982,
        "ekstazi_total_time": 6.176292657852173,
        "ekstazi_select_time": 1.2932641506195068,
        "starts_select_time": 1.2543926239013672,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": "        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n        if (array == null || array.length == 0) {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/ArrayUtils.java": [
                473,
                493,
                513,
                533,
                553,
                573,
                593,
                613,
                633,
                653,
                673,
                693,
                713,
                733,
                753,
                773,
                793,
                813,
                833
            ]
        }
    },
    {
        "commit": "9e26c7b6",
        "prev_commit": "23d55b0b",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ContextedExceptionTest",
            "NoFieldNamesToStringStyleTest",
            "StrBuilderTest",
            "StopWatchTest",
            "ArrayUtilsTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "StringEscapeUtilsTest",
            "DefaultToStringStyleTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "StringUtilsIsTest",
            "DurationFormatUtilsTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "SimpleToStringStyleTest",
            "MultilineRecursiveToStringStyleTest",
            "StringUtilsEqualsIndexOfTest",
            "CharSetUtilsTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "NumberUtilsTest",
            "StringUtilsTrimEmptyTest",
            "ValidateTest",
            "LocaleUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "RecursiveToStringStyleTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "DefaultExceptionContextTest",
            "StringUtilsSubstringTest",
            "StrSubstitutorTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-883\" type=\"add\" dev=\"britter\" due-to=\"Daniel Stewart\">Add StringUtils.containsAny(CharSequence, CharSequence...) method</action>\n+    public static boolean containsAny(CharSequence cs, CharSequence... searchCharSequences) {\n+        if (isEmpty(cs) || ArrayUtils.isEmpty(searchCharSequences)) {\n+            return false;\n+        }\n+        for (int i = 0; i < searchCharSequences.length; i++) {\n+            if (contains(cs, searchCharSequences[i])) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    @Test\n+    public void testContainsAny_StringStringArray() {\n+        assertFalse(StringUtils.containsAny(null, (String[]) null));\n+        assertFalse(StringUtils.containsAny(null, new String[0]));\n+        assertFalse(StringUtils.containsAny(null, new String[] { \"hello\" }));\n+        assertFalse(StringUtils.containsAny(\"\", (String[]) null));\n+        assertFalse(StringUtils.containsAny(\"\", new String[0]));\n+        assertFalse(StringUtils.containsAny(\"\", new String[] { \"hello\" }));\n+        assertFalse(StringUtils.containsAny(\"hello, goodbye\", (String[]) null));\n+        assertFalse(StringUtils.containsAny(\"hello, goodbye\", new String[0]));\n+        assertTrue(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"hello\", \"goodbye\" }));\n+        assertTrue(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"hello\", \"Goodbye\" }));\n+        assertFalse(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"Hello\", \"Goodbye\" }));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": "    public static boolean containsAny(CharSequence cs, CharSequence... searchCharSequences) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchCharSequences)) {\n            return false;\n        }\n        for (int i = 0; i < searchCharSequences.length; i++) {\n            if (contains(cs, searchCharSequences[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
            "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java": "    @Test\n    public void testContainsAny_StringStringArray() {\n        assertFalse(StringUtils.containsAny(null, (String[]) null));\n        assertFalse(StringUtils.containsAny(null, new String[0]));\n        assertFalse(StringUtils.containsAny(null, new String[] { \"hello\" }));\n        assertFalse(StringUtils.containsAny(\"\", (String[]) null));\n        assertFalse(StringUtils.containsAny(\"\", new String[0]));\n        assertFalse(StringUtils.containsAny(\"\", new String[] { \"hello\" }));\n        assertFalse(StringUtils.containsAny(\"hello, goodbye\", (String[]) null));\n        assertFalse(StringUtils.containsAny(\"hello, goodbye\", new String[0]));\n        assertTrue(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"hello\", \"goodbye\" }));\n        assertTrue(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"hello\", \"Goodbye\" }));\n        assertFalse(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"Hello\", \"Goodbye\" }));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/StringUtils.java": [
                1686,
                1687,
                1688,
                1689,
                1690,
                1691,
                1692,
                1693,
                1694,
                1695,
                1696
            ],
            "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java": [
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230
            ]
        },
        "starts_total_time": 1.2839584350585938,
        "ekstazi_total_time": 11.361593246459961,
        "ekstazi_select_time": 1.3061974048614502,
        "starts_select_time": 1.2309043407440186,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "c9e3793a",
        "prev_commit": "e769c189",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 85,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 56,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 15,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConversionTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    \n+    private static final boolean[] TTTT = new boolean[] { true, true, true, true };\n+    private static final boolean[] FTTT = new boolean[] { false, true, true, true };\n+    private static final boolean[] TFTT = new boolean[] { true, false, true, true };\n+    private static final boolean[] FFTT = new boolean[] { false, false, true, true };\n+    private static final boolean[] TTFT = new boolean[] { true, true, false, true };\n+    private static final boolean[] FTFT = new boolean[] { false, true, false, true };\n+    private static final boolean[] TFFT = new boolean[] { true, false, false, true };\n+    private static final boolean[] FFFT = new boolean[] { false, false, false, true };\n+    private static final boolean[] TTTF = new boolean[] { true, true, true, false };\n+    private static final boolean[] FTTF = new boolean[] { false, true, true, false };\n+    private static final boolean[] TFTF = new boolean[] { true, false, true, false };\n+    private static final boolean[] FFTF = new boolean[] { false, false, true, false };\n+    private static final boolean[] TTFF = new boolean[] { true, true, false, false };\n+    private static final boolean[] FTFF = new boolean[] { false, true, false, false };\n+    private static final boolean[] TFFF = new boolean[] { true, false, false, false };\n+    private static final boolean[] FFFF = new boolean[] { false, false, false, false };\n+            return FFFF;\n+            return TFFF;\n+            return FTFF;\n+            return TTFF;\n+            return FFTF;\n+            return TFTF;\n+            return FTTF;\n+            return TTTF;\n+            return FFFT;\n+            return TFFT;\n+            return FTFT;\n+            return TTFT;\n+            return FFTT;\n+            return TFTT;\n+            return FTTT;\n+            return TTTT;\n+            return FFFF;\n+            return FFFT;\n+            return FFTF;\n+            return FFTT;\n+            return FTFF;\n+            return FTFT;\n+            return FTTF;\n+            return FTTT;\n+            return TFFF;\n+            return TFFT;\n+            return TFTF;\n+            return TFTT;\n+            return TTFF;\n+            return TTFT;\n+            return TTTF;\n+            return TTTT;\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "    private static final boolean[] TTTT = new boolean[] { true, true, true, true };\n    private static final boolean[] FTTT = new boolean[] { false, true, true, true };\n    private static final boolean[] TFTT = new boolean[] { true, false, true, true };\n    private static final boolean[] FFTT = new boolean[] { false, false, true, true };\n    private static final boolean[] TTFT = new boolean[] { true, true, false, true };\n    private static final boolean[] FTFT = new boolean[] { false, true, false, true };\n    private static final boolean[] TFFT = new boolean[] { true, false, false, true };\n    private static final boolean[] FFFT = new boolean[] { false, false, false, true };\n    private static final boolean[] TTTF = new boolean[] { true, true, true, false };\n    private static final boolean[] FTTF = new boolean[] { false, true, true, false };\n    private static final boolean[] TFTF = new boolean[] { true, false, true, false };\n    private static final boolean[] FFTF = new boolean[] { false, false, true, false };\n    private static final boolean[] TTFF = new boolean[] { true, true, false, false };\n    private static final boolean[] FTFF = new boolean[] { false, true, false, false };\n    private static final boolean[] TFFF = new boolean[] { true, false, false, false };\n    private static final boolean[] FFFF = new boolean[] { false, false, false, false };\n            return FFFF;\n            return TFFF;\n            return FTFF;\n            return TTFF;\n            return FFTF;\n            return TFTF;\n            return FTTF;\n            return TTTF;\n            return FFFT;\n            return TFFT;\n            return FTFT;\n            return TTFT;\n            return FFTT;\n            return TFTT;\n            return FTTT;\n            return TTTT;\n            return FFFF;\n            return FFFT;\n            return FFTF;\n            return FFTT;\n            return FTFF;\n            return FTFT;\n            return FTTF;\n            return FTTT;\n            return TFFF;\n            return TFFT;\n            return TFTF;\n            return TFTT;\n            return TTFF;\n            return TTFT;\n            return TTTF;\n            return TTTT;\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                183,
                185,
                187,
                189,
                191,
                193,
                195,
                197,
                199,
                201,
                204,
                207,
                210,
                213,
                216,
                219,
                243,
                245,
                247,
                249,
                251,
                253,
                255,
                257,
                259,
                261,
                264,
                267,
                270,
                273,
                276,
                279
            ]
        },
        "starts_total_time": 1.2520534992218018,
        "ekstazi_total_time": 5.243638753890991,
        "ekstazi_select_time": 1.2617454528808594,
        "starts_select_time": 1.3370916843414307,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "            return new boolean[]{false, false, false, false};\n            return new boolean[]{true, false, false, false};\n            return new boolean[]{false, true, false, false};\n            return new boolean[]{true, true, false, false};\n            return new boolean[]{false, false, true, false};\n            return new boolean[]{true, false, true, false};\n            return new boolean[]{false, true, true, false};\n            return new boolean[]{true, true, true, false};\n            return new boolean[]{false, false, false, true};\n            return new boolean[]{true, false, false, true};\n            return new boolean[]{false, true, false, true};\n            return new boolean[]{true, true, false, true};\n            return new boolean[]{false, false, true, true};\n            return new boolean[]{true, false, true, true};\n            return new boolean[]{false, true, true, true};\n            return new boolean[]{true, true, true, true};\n            return new boolean[]{false, false, false, false};\n            return new boolean[]{false, false, false, true};\n            return new boolean[]{false, false, true, false};\n            return new boolean[]{false, false, true, true};\n            return new boolean[]{false, true, false, false};\n            return new boolean[]{false, true, false, true};\n            return new boolean[]{false, true, true, false};\n            return new boolean[]{false, true, true, true};\n            return new boolean[]{true, false, false, false};\n            return new boolean[]{true, false, false, true};\n            return new boolean[]{true, false, true, false};\n            return new boolean[]{true, false, true, true};\n            return new boolean[]{true, true, false, false};\n            return new boolean[]{true, true, false, true};\n            return new boolean[]{true, true, true, false};\n            return new boolean[]{true, true, true, true};\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                165,
                167,
                169,
                171,
                173,
                175,
                177,
                179,
                181,
                183,
                186,
                189,
                192,
                195,
                198,
                201,
                225,
                227,
                229,
                231,
                233,
                235,
                237,
                239,
                241,
                243,
                246,
                249,
                252,
                255,
                258,
                261
            ]
        }
    },
    {
        "commit": "61836183",
        "prev_commit": "4975b890",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java"
        ],
        "changed_files_num": 6,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "AtomicSafeInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        while ((result = reference.get()) == null) {\n+                reference.set(initialize());\n+        final ConcurrentInitializer<Object> initializer = createInitializer();\n+        final Object managedObject = initializer.get();\n+        for (final GetThread t : threads) {\n+            assertEquals(\"Wrong object\", managedObject, t.object);\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java": "        while ((result = reference.get()) == null) {\n                reference.set(initialize());\n",
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java": "        final ConcurrentInitializer<Object> initializer = createInitializer();\n        final Object managedObject = initializer.get();\n        for (final GetThread t : threads) {\n            assertEquals(\"Wrong object\", managedObject, t.object);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java": [
                76,
                78
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java": [
                75,
                109,
                110,
                111
            ]
        },
        "starts_total_time": 1.2695565223693848,
        "ekstazi_total_time": 5.719872951507568,
        "ekstazi_select_time": 1.4105644226074219,
        "starts_select_time": 1.314270257949829,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java": "import java.util.concurrent.CountDownLatch;\n    private final AtomicReference<ConcurrentException> referenceExc = new AtomicReference<ConcurrentException>();\n    private final CountDownLatch latch = new CountDownLatch(1);\n        if ((result = reference.get()) == null) {\n                try {\n                    reference.set(result = initialize());\n                } catch ( ConcurrentException exc ) {\n                    referenceExc.set(exc);\n                    throw exc;\n                } finally {\n                    latch.countDown();\n                }\n            } else {\n                try {\n                    latch.await();\n                    if ( referenceExc.get() != null ) {\n                        throw new ConcurrentException(referenceExc.get().getMessage(), referenceExc.get().getCause());\n                    }\n                    result = reference.get();\n                } catch (InterruptedException intExc) {\n                    throw new ConcurrentException(\"interrupted waiting for initialization to complete\", intExc);\n                }\n",
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java": "import static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\n        this.testGetConcurrentOptionallyWithException(false, null, null);\n    }\n    public void testGetConcurrentWithException(String expectedMessage,\n                                               Exception expectedCause)\n            throws ConcurrentException, InterruptedException {\n        this.testGetConcurrentOptionallyWithException(true, expectedMessage, expectedCause);\n    }\n    protected void testGetConcurrentOptionallyWithException(boolean expectExceptions, String expectedMessage,\n                                                            Exception expectedCause)\n            throws ConcurrentException, InterruptedException {\n        final ConcurrentInitializer<Object> initializer = expectExceptions ?\n                createExceptionThrowingInitializer() :\n                createInitializer();\n        if ( expectExceptions ) {\n            for (GetThread t : threads) {\n                assertTrue(t.object instanceof Exception);\n                Exception exc = (Exception) t.object;\n                assertEquals(expectedMessage, exc.getMessage());\n                assertSame(expectedCause, exc.getCause());\n            }\n        } else {\n            final Object managedObject = initializer.get();\n            for (final GetThread t : threads) {\n                assertEquals(\"Wrong object\", managedObject, t.object);\n            }\n    protected abstract ConcurrentInitializer<Object> createExceptionThrowingInitializer();\n",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java": "import org.junit.Test;\n    private Exception testCauseException;\n    private String testExceptionMessage;\n    public AtomicInitializerTest() {\n        testExceptionMessage = \"x-test-exception-message-x\";\n        testCauseException = new Exception(testExceptionMessage);\n    }\n    @Test\n    public void testGetConcurrentWithException ()\n            throws ConcurrentException, InterruptedException {\n        super.testGetConcurrentWithException(testExceptionMessage, testCauseException);\n    }\n    @Override\n    protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {\n        return new ExceptionThrowingAtomicSafeInitializerTestImpl();\n    }\n    private class ExceptionThrowingAtomicSafeInitializerTestImpl extends AtomicSafeInitializer<Object> {\n        @Override\n        protected Object initialize() throws ConcurrentException {\n            throw new ConcurrentException(testExceptionMessage, testCauseException);\n        }\n    }\n",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java": "import static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport java.util.concurrent.CountDownLatch;\n    private ExceptionThrowingAtomicSafeInitializerTestImpl exceptionThrowingInitializer;\n    private Exception testCauseException;\n    private String testExceptionMessage;\n        exceptionThrowingInitializer = new ExceptionThrowingAtomicSafeInitializerTestImpl();\n        testExceptionMessage = \"x-test-exception-message-x\";\n        testCauseException = new Exception(testExceptionMessage);\n    @Override\n    protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {\n        return exceptionThrowingInitializer;\n    }\n    @Test\n    public void testExceptionOnInitialize() throws ConcurrentException,\n            InterruptedException {\n        testGetConcurrentWithException(testExceptionMessage, testCauseException);\n    }\n    @Test(timeout = 3000)\n    public void testInterruptedWaitingOnInitialize() throws Exception {\n        this.execTestWithWaitingOnInitialize(true);\n    }\n    @Test(timeout = 3000)\n    public void testOneThreadWaitingForAnotherToInitialize () throws Exception {\n        execTestWithWaitingOnInitialize(false);\n    }\n    protected void execTestWithWaitingOnInitialize(boolean interruptInd) throws Exception {\n        final CountDownLatch startLatch = new CountDownLatch(1);\n        final CountDownLatch finishLatch = new CountDownLatch(1);\n        final WaitingInitializerTestImpl initializer = new WaitingInitializerTestImpl(startLatch, finishLatch);\n        InitializerTestThread execThread1 = new InitializerTestThread(initializer);\n        InitializerTestThread execThread2 = new InitializerTestThread(initializer);\n        execThread1.start();\n        startLatch.await();\n        execThread2.start();\n        if ( interruptInd ) {\n            execThread2.interrupt();\n            execThread2.join();\n        }\n        finishLatch.countDown();\n        execThread1.join();\n        if ( ! interruptInd ) {\n            execThread2.join();\n        }\n        assertFalse(execThread1.isCaughtException());\n        assertSame(initializer.getAnswer(), execThread1.getResult());\n        if ( interruptInd ) {\n            assertTrue(execThread2.isCaughtException());\n            Exception exc = (Exception) execThread2.getResult();\n            assertTrue(exc.getCause() instanceof InterruptedException);\n            assertEquals(\"interrupted waiting for initialization to complete\", exc.getMessage());\n        } else {\n            assertFalse(execThread2.isCaughtException());\n            assertSame(initializer.getAnswer(), execThread2.getResult());\n        }\n    }\n    private class ExceptionThrowingAtomicSafeInitializerTestImpl extends AtomicSafeInitializer<Object> {\n        @Override\n        protected Object initialize() throws ConcurrentException {\n            throw new ConcurrentException(testExceptionMessage, testCauseException);\n        }\n    }\n    private class WaitingInitializerTestImpl extends AtomicSafeInitializer<Object> {\n        private final CountDownLatch startedLatch;\n        private final CountDownLatch finishLatch;\n        private final Object answer = new Object();\n        public WaitingInitializerTestImpl(CountDownLatch startedLatch, CountDownLatch finishLatch) {\n            this.startedLatch = startedLatch;\n            this.finishLatch = finishLatch;\n        }\n        @Override\n        protected Object initialize() throws ConcurrentException {\n            this.startedLatch.countDown();\n            try {\n                this.finishLatch.await();\n            } catch (InterruptedException intExc) {\n                throw new ConcurrentException(intExc);\n            }\n            return  answer;\n        }\n        public Object getAnswer () {\n            return answer;\n        }\n    }\n    private class InitializerTestThread extends Thread {\n        private AtomicSafeInitializer<Object>   initializer;\n        private Object result;\n        private boolean caughtException;\n        public InitializerTestThread(AtomicSafeInitializer<Object> initializer) {\n            super(\"AtomicSafeInitializer test thread\");\n            this.initializer = initializer;\n        }\n        @Override\n        public void run() {\n            try {\n                this.result = initializer.get();\n            } catch ( ConcurrentException concurrentExc ) {\n                this.caughtException = true;\n                this.result = concurrentExc;\n            }\n        }\n        public Object getResult () {\n            return  this.result;\n        }\n        public boolean  isCaughtException () {\n            return  this.caughtException;\n        }\n    }\n",
            "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java": "import org.junit.Test;\n    private ExceptionThrowingLazyInitializerTestImpl exceptionThrowingInitializer;\n    private Exception testCauseException;\n    private String testExceptionMessage;\n        exceptionThrowingInitializer = new ExceptionThrowingLazyInitializerTestImpl();\n        testExceptionMessage = \"x-test-exception-message-x\";\n        testCauseException = new Exception(testExceptionMessage);\n    @Override\n    protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {\n        return exceptionThrowingInitializer;\n    }\n    @Test\n    public void testGetConcurrentWithException ()\n            throws ConcurrentException, InterruptedException {\n        super.testGetConcurrentWithException(testExceptionMessage, testCauseException);\n    }\n    private class ExceptionThrowingLazyInitializerTestImpl extends LazyInitializer<Object> {\n        @Override\n        protected Object initialize() throws ConcurrentException {\n            throw new ConcurrentException(testExceptionMessage, testCauseException);\n        }\n    }\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java": [
                19,
                67,
                70,
                84,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java": [
                21,
                22,
                78,
                79,
                88,
                89,
                90,
                92,
                93,
                104,
                105,
                106,
                108,
                109,
                110,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                174
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java": [
                19,
                27,
                28,
                30,
                31,
                32,
                33,
                35,
                36,
                37,
                39,
                40,
                57,
                58,
                59,
                60,
                66,
                67,
                68,
                69,
                70,
                71
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java": [
                20,
                21,
                22,
                24,
                40,
                41,
                42,
                47,
                48,
                49,
                68,
                69,
                70,
                71,
                87,
                88,
                89,
                91,
                92,
                100,
                101,
                102,
                103,
                108,
                109,
                110,
                111,
                120,
                121,
                122,
                123,
                125,
                126,
                130,
                131,
                135,
                137,
                140,
                141,
                142,
                145,
                148,
                151,
                152,
                153,
                159,
                160,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                194,
                195,
                196,
                197,
                198,
                199,
                206,
                207,
                208,
                209,
                211,
                212,
                213,
                214,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                225,
                226,
                228,
                229,
                230,
                231,
                236,
                237,
                238,
                239,
                241,
                242,
                243,
                244,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                261,
                262,
                263,
                271,
                272,
                273,
                274
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java": [
                20,
                30,
                31,
                32,
                37,
                38,
                39,
                53,
                54,
                55,
                56,
                58,
                59,
                60,
                62,
                63,
                83,
                84,
                85,
                86,
                87,
                88
            ]
        }
    },
    {
        "commit": "45a64670",
        "prev_commit": "61836183",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 91,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConstructorUtilsTest",
            "BooleanUtilsTest",
            "ArrayUtilsTest",
            "MethodUtilsTest",
            "NumberUtilsTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1087\" type=\"fix\" dev=\"britter\" due-to=\"Renat Zhilkibaev\">NumberUtils#createNumber() returns positive BigDecimal when negative Float is expected</action>\n+            mant = getMantissa(str, decPos);\n+                mant = getMantissa(str, expPos);\n+                mant = getMantissa(str);\n+    private static String getMantissa(final String str) {\n+        return getMantissa(str, str.length());\n+    }\n+    private static String getMantissa(final String str, final int stopPos) {\n+        final char firstChar = str.charAt(0);\n+        final boolean hasSign = (firstChar == '-' || firstChar == '+');\n+        return hasSign ? str.substring(1, stopPos) : str.substring(0, stopPos);\n+    }\n+    \n+    @Test\n+    public void testLang1087(){\n+        assertEquals(Float.class, NumberUtils.createNumber(\"0.0\").getClass());\n+        assertEquals(Float.valueOf(\"0.0\"), NumberUtils.createNumber(\"0.0\"));\n+        assertEquals(Float.class, NumberUtils.createNumber(\"+0.0\").getClass());\n+        assertEquals(Float.valueOf(\"+0.0\"), NumberUtils.createNumber(\"+0.0\"));\n+        assertEquals(Float.class, NumberUtils.createNumber(\"-0.0\").getClass());\n+        assertEquals(Float.valueOf(\"-0.0\"), NumberUtils.createNumber(\"-0.0\"));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "            mant = getMantissa(str, decPos);\n                mant = getMantissa(str, expPos);\n                mant = getMantissa(str);\n    private static String getMantissa(final String str) {\n        return getMantissa(str, str.length());\n    }\n    private static String getMantissa(final String str, final int stopPos) {\n        final char firstChar = str.charAt(0);\n        final boolean hasSign = (firstChar == '-' || firstChar == '+');\n        return hasSign ? str.substring(1, stopPos) : str.substring(0, stopPos);\n    }\n",
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": "    @Test\n    public void testLang1087(){\n        assertEquals(Float.class, NumberUtils.createNumber(\"0.0\").getClass());\n        assertEquals(Float.valueOf(\"0.0\"), NumberUtils.createNumber(\"0.0\"));\n        assertEquals(Float.class, NumberUtils.createNumber(\"+0.0\").getClass());\n        assertEquals(Float.valueOf(\"+0.0\"), NumberUtils.createNumber(\"+0.0\"));\n        assertEquals(Float.class, NumberUtils.createNumber(\"-0.0\").getClass());\n        assertEquals(Float.valueOf(\"-0.0\"), NumberUtils.createNumber(\"-0.0\"));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                506,
                513,
                515,
                634,
                635,
                636,
                647,
                648,
                649,
                651,
                652
            ],
            "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java": [
                249,
                250,
                252,
                253,
                255,
                256,
                258,
                259,
                260
            ]
        },
        "starts_total_time": 1.230950117111206,
        "ekstazi_total_time": 5.900300979614258,
        "ekstazi_select_time": 1.3053078651428223,
        "starts_select_time": 1.305692195892334,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": "            mant = str.substring(0, decPos);\n                mant = str.substring(0, expPos);\n                mant = str;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/math/NumberUtils.java": [
                506,
                513,
                515
            ]
        }
    },
    {
        "commit": "e769c189",
        "prev_commit": "082eb39c",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/Conversion.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 85,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 56,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 15,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConversionTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+                    return src.length > srcPos + 3 && src[srcPos + 3] ? 'f' : 'e';\n+                return src.length > srcPos + 3 && src[srcPos + 3] ? 'd' : 'c';\n+            if (src.length > srcPos + 2 && src[srcPos + 2]) {\n+                return src.length > srcPos + 3 && src[srcPos + 3] ? 'b' : 'a';\n+            return src.length > srcPos + 3 && src[srcPos + 3] ? '9' : '8';\n+        }\n+        if (src.length > srcPos + 1 && src[srcPos + 1]) {\n+            if (src.length > srcPos + 2 && src[srcPos + 2]) {\n+                return src.length > srcPos + 3 && src[srcPos + 3] ? '7' : '6';\n+            }\n+            return src.length > srcPos + 3 && src[srcPos + 3] ? '5' : '4';\n+        }\n+        if (src.length > srcPos + 2 && src[srcPos + 2]) {\n+            return src.length > srcPos + 3 && src[srcPos + 3] ? '3' : '2';\n+        return src.length > srcPos + 3 && src[srcPos + 3] ? '1' : '0';\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "                    return src.length > srcPos + 3 && src[srcPos + 3] ? 'f' : 'e';\n                return src.length > srcPos + 3 && src[srcPos + 3] ? 'd' : 'c';\n            if (src.length > srcPos + 2 && src[srcPos + 2]) {\n                return src.length > srcPos + 3 && src[srcPos + 3] ? 'b' : 'a';\n            return src.length > srcPos + 3 && src[srcPos + 3] ? '9' : '8';\n        }\n        if (src.length > srcPos + 1 && src[srcPos + 1]) {\n            if (src.length > srcPos + 2 && src[srcPos + 2]) {\n                return src.length > srcPos + 3 && src[srcPos + 3] ? '7' : '6';\n            }\n            return src.length > srcPos + 3 && src[srcPos + 3] ? '5' : '4';\n        }\n        if (src.length > srcPos + 2 && src[srcPos + 2]) {\n            return src.length > srcPos + 3 && src[srcPos + 3] ? '3' : '2';\n        return src.length > srcPos + 3 && src[srcPos + 3] ? '1' : '0';\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                469,
                471,
                473,
                474,
                476,
                477,
                478,
                479,
                480,
                481,
                482,
                483,
                484,
                485,
                487
            ]
        },
        "starts_total_time": 1.2358424663543701,
        "ekstazi_total_time": 5.1587231159210205,
        "ekstazi_select_time": 1.320927619934082,
        "starts_select_time": 1.3266956806182861,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": "                    if (src.length > srcPos + 3 && src[srcPos + 3]) {\n                        return 'f';\n                    } else {\n                        return 'e';\n                    }\n                } else {\n                    if (src.length > srcPos + 3 && src[srcPos + 3]) {\n                        return 'd';\n                    } else {\n                        return 'c';\n                    }\n                }\n            } else {\n                if (src.length > srcPos + 2 && src[srcPos + 2]) {\n                    if (src.length > srcPos + 3 && src[srcPos + 3]) {\n                        return 'b';\n                    } else {\n                        return 'a';\n                    }\n                } else {\n                    if (src.length > srcPos + 3 && src[srcPos + 3]) {\n                        return '9';\n                    } else {\n                        return '8';\n                    }\n        } else {\n            if (src.length > srcPos + 1 && src[srcPos + 1]) {\n                if (src.length > srcPos + 2 && src[srcPos + 2]) {\n                    if (src.length > srcPos + 3 && src[srcPos + 3]) {\n                        return '7';\n                    } else {\n                        return '6';\n                    }\n                } else {\n                    if (src.length > srcPos + 3 && src[srcPos + 3]) {\n                        return '5';\n                    } else {\n                        return '4';\n                    }\n                }\n            } else {\n                if (src.length > srcPos + 2 && src[srcPos + 2]) {\n                    if (src.length > srcPos + 3 && src[srcPos + 3]) {\n                        return '3';\n                    } else {\n                        return '2';\n                    }\n                } else {\n                    if (src.length > srcPos + 3 && src[srcPos + 3]) {\n                        return '1';\n                    } else {\n                        return '0';\n                    }\n                }\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/Conversion.java": [
                469,
                470,
                471,
                472,
                473,
                474,
                475,
                476,
                477,
                478,
                479,
                480,
                481,
                482,
                483,
                484,
                485,
                486,
                487,
                488,
                489,
                490,
                491,
                492,
                493,
                496,
                497,
                498,
                499,
                500,
                501,
                502,
                503,
                504,
                505,
                506,
                507,
                508,
                509,
                510,
                511,
                512,
                513,
                514,
                515,
                516,
                517,
                518,
                519,
                520,
                521,
                522,
                523,
                524
            ]
        }
    },
    {
        "commit": "bdb5d972",
        "prev_commit": "ffdc4272",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java"
        ],
        "changed_files_num": 6,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java",
            "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 4,
            "AtomicSafeInitializerTest": 7,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 4,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "AtomicSafeInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1086\" type=\"update\" dev=\"britter\">Remove busy wait from AtomicSafeInitializer.get()</action>\n+    private final AtomicReference<ConcurrentException> referenceExc = new AtomicReference<ConcurrentException>();\n+    private final CountDownLatch latch = new CountDownLatch(1);\n+        if ((result = reference.get()) == null) {\n+                try {\n+                    reference.set(result = initialize());\n+                } catch ( ConcurrentException exc ) {\n+                    referenceExc.set(exc);\n+                    throw exc;\n+                } finally {\n+                    latch.countDown();\n+                }\n+            } else {\n+                try {\n+                    latch.await();\n+                    if ( referenceExc.get() != null ) {\n+                        throw new ConcurrentException(referenceExc.get().getMessage(), referenceExc.get().getCause());\n+                    }\n+                    result = reference.get();\n+                } catch (InterruptedException intExc) {\n+                    throw new ConcurrentException(\"interrupted waiting for initialization to complete\", intExc);\n+                }\n+        this.testGetConcurrentOptionallyWithException(false, null, null);\n+    }\n+    public void testGetConcurrentWithException(String expectedMessage,\n+                                               Exception expectedCause)\n+            throws ConcurrentException, InterruptedException {\n+        this.testGetConcurrentOptionallyWithException(true, expectedMessage, expectedCause);\n+    }\n+    protected void testGetConcurrentOptionallyWithException(boolean expectExceptions, String expectedMessage,\n+                                                            Exception expectedCause)\n+            throws ConcurrentException, InterruptedException {\n+        final ConcurrentInitializer<Object> initializer = expectExceptions ?\n+                createExceptionThrowingInitializer() :\n+                createInitializer();\n+        if ( expectExceptions ) {\n+            for (GetThread t : threads) {\n+                assertTrue(t.object instanceof Exception);\n+                Exception exc = (Exception) t.object;\n+                assertEquals(expectedMessage, exc.getMessage());\n+                assertSame(expectedCause, exc.getCause());\n+            }\n+        } else {\n+            final Object managedObject = initializer.get();\n+            for (final GetThread t : threads) {\n+                assertEquals(\"Wrong object\", managedObject, t.object);\n+            }\n+    protected abstract ConcurrentInitializer<Object> createExceptionThrowingInitializer();\n+    private Exception testCauseException;\n+    private String testExceptionMessage;\n+    public AtomicInitializerTest() {\n+        testExceptionMessage = \"x-test-exception-message-x\";\n+        testCauseException = new Exception(testExceptionMessage);\n+    }\n+    @Test\n+    public void testGetConcurrentWithException ()\n+            throws ConcurrentException, InterruptedException {\n+        super.testGetConcurrentWithException(testExceptionMessage, testCauseException);\n+    }\n+    @Override\n+    protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {\n+        return new ExceptionThrowingAtomicSafeInitializerTestImpl();\n+    }\n+    private class ExceptionThrowingAtomicSafeInitializerTestImpl extends AtomicSafeInitializer<Object> {\n+        @Override\n+        protected Object initialize() throws ConcurrentException {\n+            throw new ConcurrentException(testExceptionMessage, testCauseException);\n+        }\n+    }\n+    private ExceptionThrowingAtomicSafeInitializerTestImpl exceptionThrowingInitializer;\n+    private Exception testCauseException;\n+    private String testExceptionMessage;\n+        exceptionThrowingInitializer = new ExceptionThrowingAtomicSafeInitializerTestImpl();\n+        testExceptionMessage = \"x-test-exception-message-x\";\n+        testCauseException = new Exception(testExceptionMessage);\n+    @Override\n+    protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {\n+        return exceptionThrowingInitializer;\n+    }\n+    @Test\n+    public void testExceptionOnInitialize() throws ConcurrentException,\n+            InterruptedException {\n+        testGetConcurrentWithException(testExceptionMessage, testCauseException);\n+    }\n+    @Test(timeout = 3000)\n+    public void testInterruptedWaitingOnInitialize() throws Exception {\n+        this.execTestWithWaitingOnInitialize(true);\n+    }\n+    @Test(timeout = 3000)\n+    public void testOneThreadWaitingForAnotherToInitialize () throws Exception {\n+        execTestWithWaitingOnInitialize(false);\n+    }\n+    protected void execTestWithWaitingOnInitialize(boolean interruptInd) throws Exception {\n+        final CountDownLatch startLatch = new CountDownLatch(1);\n+        final CountDownLatch finishLatch = new CountDownLatch(1);\n+        final WaitingInitializerTestImpl initializer = new WaitingInitializerTestImpl(startLatch, finishLatch);\n+        InitializerTestThread execThread1 = new InitializerTestThread(initializer);\n+        InitializerTestThread execThread2 = new InitializerTestThread(initializer);\n+        execThread1.start();\n+        startLatch.await();\n+        execThread2.start();\n+        if ( interruptInd ) {\n+            execThread2.interrupt();\n+            execThread2.join();\n+        }\n+        finishLatch.countDown();\n+        execThread1.join();\n+        if ( ! interruptInd ) {\n+            execThread2.join();\n+        }\n+        assertFalse(execThread1.isCaughtException());\n+        assertSame(initializer.getAnswer(), execThread1.getResult());\n+        if ( interruptInd ) {\n+            assertTrue(execThread2.isCaughtException());\n+            Exception exc = (Exception) execThread2.getResult();\n+            assertTrue(exc.getCause() instanceof InterruptedException);\n+            assertEquals(\"interrupted waiting for initialization to complete\", exc.getMessage());\n+        } else {\n+            assertFalse(execThread2.isCaughtException());\n+            assertSame(initializer.getAnswer(), execThread2.getResult());\n+        }\n+    }\n+    private class ExceptionThrowingAtomicSafeInitializerTestImpl extends AtomicSafeInitializer<Object> {\n+        @Override\n+        protected Object initialize() throws ConcurrentException {\n+            throw new ConcurrentException(testExceptionMessage, testCauseException);\n+        }\n+    }\n+    private class WaitingInitializerTestImpl extends AtomicSafeInitializer<Object> {\n+        private final CountDownLatch startedLatch;\n+        private final CountDownLatch finishLatch;\n+        private final Object answer = new Object();\n+        public WaitingInitializerTestImpl(CountDownLatch startedLatch, CountDownLatch finishLatch) {\n+            this.startedLatch = startedLatch;\n+            this.finishLatch = finishLatch;\n+        }\n+        @Override\n+        protected Object initialize() throws ConcurrentException {\n+            this.startedLatch.countDown();\n+            try {\n+                this.finishLatch.await();\n+            } catch (InterruptedException intExc) {\n+                throw new ConcurrentException(intExc);\n+            }\n+            return  answer;\n+        }\n+        public Object getAnswer () {\n+            return answer;\n+        }\n+    }\n+    private class InitializerTestThread extends Thread {\n+        private AtomicSafeInitializer<Object>   initializer;\n+        private Object result;\n+        private boolean caughtException;\n+        public InitializerTestThread(AtomicSafeInitializer<Object> initializer) {\n+            super(\"AtomicSafeInitializer test thread\");\n+            this.initializer = initializer;\n+        }\n+        @Override\n+        public void run() {\n+            try {\n+                this.result = initializer.get();\n+            } catch ( ConcurrentException concurrentExc ) {\n+                this.caughtException = true;\n+                this.result = concurrentExc;\n+            }\n+        }\n+        public Object getResult () {\n+            return  this.result;\n+        }\n+        public boolean  isCaughtException () {\n+            return  this.caughtException;\n+        }\n+    }\n+    private ExceptionThrowingLazyInitializerTestImpl exceptionThrowingInitializer;\n+    private Exception testCauseException;\n+    private String testExceptionMessage;\n+        exceptionThrowingInitializer = new ExceptionThrowingLazyInitializerTestImpl();\n+        testExceptionMessage = \"x-test-exception-message-x\";\n+        testCauseException = new Exception(testExceptionMessage);\n+    @Override\n+    protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {\n+        return exceptionThrowingInitializer;\n+    }\n+    @Test\n+    public void testGetConcurrentWithException ()\n+            throws ConcurrentException, InterruptedException {\n+        super.testGetConcurrentWithException(testExceptionMessage, testCauseException);\n+    }\n+    private class ExceptionThrowingLazyInitializerTestImpl extends LazyInitializer<Object> {\n+        @Override\n+        protected Object initialize() throws ConcurrentException {\n+            throw new ConcurrentException(testExceptionMessage, testCauseException);\n+        }\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java": "import java.util.concurrent.CountDownLatch;\n    private final AtomicReference<ConcurrentException> referenceExc = new AtomicReference<ConcurrentException>();\n    private final CountDownLatch latch = new CountDownLatch(1);\n        if ((result = reference.get()) == null) {\n                try {\n                    reference.set(result = initialize());\n                } catch ( ConcurrentException exc ) {\n                    referenceExc.set(exc);\n                    throw exc;\n                } finally {\n                    latch.countDown();\n                }\n            } else {\n                try {\n                    latch.await();\n                    if ( referenceExc.get() != null ) {\n                        throw new ConcurrentException(referenceExc.get().getMessage(), referenceExc.get().getCause());\n                    }\n                    result = reference.get();\n                } catch (InterruptedException intExc) {\n                    throw new ConcurrentException(\"interrupted waiting for initialization to complete\", intExc);\n                }\n",
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java": "import static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\n        this.testGetConcurrentOptionallyWithException(false, null, null);\n    }\n    public void testGetConcurrentWithException(String expectedMessage,\n                                               Exception expectedCause)\n            throws ConcurrentException, InterruptedException {\n        this.testGetConcurrentOptionallyWithException(true, expectedMessage, expectedCause);\n    }\n    protected void testGetConcurrentOptionallyWithException(boolean expectExceptions, String expectedMessage,\n                                                            Exception expectedCause)\n            throws ConcurrentException, InterruptedException {\n        final ConcurrentInitializer<Object> initializer = expectExceptions ?\n                createExceptionThrowingInitializer() :\n                createInitializer();\n        if ( expectExceptions ) {\n            for (GetThread t : threads) {\n                assertTrue(t.object instanceof Exception);\n                Exception exc = (Exception) t.object;\n                assertEquals(expectedMessage, exc.getMessage());\n                assertSame(expectedCause, exc.getCause());\n            }\n        } else {\n            final Object managedObject = initializer.get();\n            for (final GetThread t : threads) {\n                assertEquals(\"Wrong object\", managedObject, t.object);\n            }\n    protected abstract ConcurrentInitializer<Object> createExceptionThrowingInitializer();\n",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java": "import org.junit.Test;\n    private Exception testCauseException;\n    private String testExceptionMessage;\n    public AtomicInitializerTest() {\n        testExceptionMessage = \"x-test-exception-message-x\";\n        testCauseException = new Exception(testExceptionMessage);\n    }\n    @Test\n    public void testGetConcurrentWithException ()\n            throws ConcurrentException, InterruptedException {\n        super.testGetConcurrentWithException(testExceptionMessage, testCauseException);\n    }\n    @Override\n    protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {\n        return new ExceptionThrowingAtomicSafeInitializerTestImpl();\n    }\n    private class ExceptionThrowingAtomicSafeInitializerTestImpl extends AtomicSafeInitializer<Object> {\n        @Override\n        protected Object initialize() throws ConcurrentException {\n            throw new ConcurrentException(testExceptionMessage, testCauseException);\n        }\n    }\n",
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java": "import static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport java.util.concurrent.CountDownLatch;\n    private ExceptionThrowingAtomicSafeInitializerTestImpl exceptionThrowingInitializer;\n    private Exception testCauseException;\n    private String testExceptionMessage;\n        exceptionThrowingInitializer = new ExceptionThrowingAtomicSafeInitializerTestImpl();\n        testExceptionMessage = \"x-test-exception-message-x\";\n        testCauseException = new Exception(testExceptionMessage);\n    @Override\n    protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {\n        return exceptionThrowingInitializer;\n    }\n    @Test\n    public void testExceptionOnInitialize() throws ConcurrentException,\n            InterruptedException {\n        testGetConcurrentWithException(testExceptionMessage, testCauseException);\n    }\n    @Test(timeout = 3000)\n    public void testInterruptedWaitingOnInitialize() throws Exception {\n        this.execTestWithWaitingOnInitialize(true);\n    }\n    @Test(timeout = 3000)\n    public void testOneThreadWaitingForAnotherToInitialize () throws Exception {\n        execTestWithWaitingOnInitialize(false);\n    }\n    protected void execTestWithWaitingOnInitialize(boolean interruptInd) throws Exception {\n        final CountDownLatch startLatch = new CountDownLatch(1);\n        final CountDownLatch finishLatch = new CountDownLatch(1);\n        final WaitingInitializerTestImpl initializer = new WaitingInitializerTestImpl(startLatch, finishLatch);\n        InitializerTestThread execThread1 = new InitializerTestThread(initializer);\n        InitializerTestThread execThread2 = new InitializerTestThread(initializer);\n        execThread1.start();\n        startLatch.await();\n        execThread2.start();\n        if ( interruptInd ) {\n            execThread2.interrupt();\n            execThread2.join();\n        }\n        finishLatch.countDown();\n        execThread1.join();\n        if ( ! interruptInd ) {\n            execThread2.join();\n        }\n        assertFalse(execThread1.isCaughtException());\n        assertSame(initializer.getAnswer(), execThread1.getResult());\n        if ( interruptInd ) {\n            assertTrue(execThread2.isCaughtException());\n            Exception exc = (Exception) execThread2.getResult();\n            assertTrue(exc.getCause() instanceof InterruptedException);\n            assertEquals(\"interrupted waiting for initialization to complete\", exc.getMessage());\n        } else {\n            assertFalse(execThread2.isCaughtException());\n            assertSame(initializer.getAnswer(), execThread2.getResult());\n        }\n    }\n    private class ExceptionThrowingAtomicSafeInitializerTestImpl extends AtomicSafeInitializer<Object> {\n        @Override\n        protected Object initialize() throws ConcurrentException {\n            throw new ConcurrentException(testExceptionMessage, testCauseException);\n        }\n    }\n    private class WaitingInitializerTestImpl extends AtomicSafeInitializer<Object> {\n        private final CountDownLatch startedLatch;\n        private final CountDownLatch finishLatch;\n        private final Object answer = new Object();\n        public WaitingInitializerTestImpl(CountDownLatch startedLatch, CountDownLatch finishLatch) {\n            this.startedLatch = startedLatch;\n            this.finishLatch = finishLatch;\n        }\n        @Override\n        protected Object initialize() throws ConcurrentException {\n            this.startedLatch.countDown();\n            try {\n                this.finishLatch.await();\n            } catch (InterruptedException intExc) {\n                throw new ConcurrentException(intExc);\n            }\n            return  answer;\n        }\n        public Object getAnswer () {\n            return answer;\n        }\n    }\n    private class InitializerTestThread extends Thread {\n        private AtomicSafeInitializer<Object>   initializer;\n        private Object result;\n        private boolean caughtException;\n        public InitializerTestThread(AtomicSafeInitializer<Object> initializer) {\n            super(\"AtomicSafeInitializer test thread\");\n            this.initializer = initializer;\n        }\n        @Override\n        public void run() {\n            try {\n                this.result = initializer.get();\n            } catch ( ConcurrentException concurrentExc ) {\n                this.caughtException = true;\n                this.result = concurrentExc;\n            }\n        }\n        public Object getResult () {\n            return  this.result;\n        }\n        public boolean  isCaughtException () {\n            return  this.caughtException;\n        }\n    }\n",
            "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java": "import org.junit.Test;\n    private ExceptionThrowingLazyInitializerTestImpl exceptionThrowingInitializer;\n    private Exception testCauseException;\n    private String testExceptionMessage;\n        exceptionThrowingInitializer = new ExceptionThrowingLazyInitializerTestImpl();\n        testExceptionMessage = \"x-test-exception-message-x\";\n        testCauseException = new Exception(testExceptionMessage);\n    @Override\n    protected ConcurrentInitializer<Object> createExceptionThrowingInitializer() {\n        return exceptionThrowingInitializer;\n    }\n    @Test\n    public void testGetConcurrentWithException ()\n            throws ConcurrentException, InterruptedException {\n        super.testGetConcurrentWithException(testExceptionMessage, testCauseException);\n    }\n    private class ExceptionThrowingLazyInitializerTestImpl extends LazyInitializer<Object> {\n        @Override\n        protected Object initialize() throws ConcurrentException {\n            throw new ConcurrentException(testExceptionMessage, testCauseException);\n        }\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java": [
                19,
                67,
                70,
                84,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java": [
                21,
                22,
                78,
                79,
                88,
                89,
                90,
                92,
                93,
                104,
                105,
                106,
                108,
                109,
                110,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                174
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java": [
                19,
                27,
                28,
                30,
                31,
                32,
                33,
                35,
                36,
                37,
                39,
                40,
                57,
                58,
                59,
                60,
                66,
                67,
                68,
                69,
                70,
                71
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java": [
                20,
                21,
                22,
                24,
                40,
                41,
                42,
                47,
                48,
                49,
                68,
                69,
                70,
                71,
                87,
                88,
                89,
                91,
                92,
                100,
                101,
                102,
                103,
                108,
                109,
                110,
                111,
                120,
                121,
                122,
                123,
                125,
                126,
                130,
                131,
                135,
                137,
                140,
                141,
                142,
                145,
                148,
                151,
                152,
                153,
                159,
                160,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                194,
                195,
                196,
                197,
                198,
                199,
                206,
                207,
                208,
                209,
                211,
                212,
                213,
                214,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                225,
                226,
                228,
                229,
                230,
                231,
                236,
                237,
                238,
                239,
                241,
                242,
                243,
                244,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                261,
                262,
                263,
                271,
                272,
                273,
                274
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java": [
                20,
                30,
                31,
                32,
                37,
                38,
                39,
                53,
                54,
                55,
                56,
                58,
                59,
                60,
                62,
                63,
                83,
                84,
                85,
                86,
                87,
                88
            ]
        },
        "starts_total_time": 1.3235194683074951,
        "ekstazi_total_time": 5.87629508972168,
        "ekstazi_select_time": 1.2527556419372559,
        "starts_select_time": 1.2041330337524414,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java": "        while ((result = reference.get()) == null) {\n                reference.set(initialize());\n",
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java": "        final ConcurrentInitializer<Object> initializer = createInitializer();\n        final Object managedObject = initializer.get();\n        for (final GetThread t : threads) {\n            assertEquals(\"Wrong object\", managedObject, t.object);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java": [
                76,
                78
            ],
            "src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java": [
                75,
                109,
                110,
                111
            ]
        }
    },
    {
        "commit": "2367948a",
        "prev_commit": "45a64670",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "FastDateParserSDFTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 91,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserSDFTest": 30,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "FastDateFormat_ParserTest",
            "FastDatePrinterTest",
            "FastDateParserSDFTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1061\" type=\"fix\" dev=\"sebb\" due-to=\"dmeneses\">FastDateParser error - timezones not handled correctly</action>\n+            sb.append(\"(GMT[+-]\\\\d{1,2}:\\\\d{2}\").append('|');\n+            sb.append(\"[+-]\\\\d{4}\").append('|');\n+    @Parameters(name= \"{index}: {0} {1} {2}\")\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object [][]{\n+                {\"z yyyy\", \"GMT 2010\",       Locale.UK, true}, // no offset specified, but seems to be allowed\n+                {\"z yyyy\", \"GMT-123 2010\",   Locale.UK, false},\n+                {\"z yyyy\", \"GMT-1234 2010\",  Locale.UK, false},\n+                {\"z yyyy\", \"GMT-12:34 2010\", Locale.UK, true},\n+                {\"z yyyy\", \"GMT-1:23 2010\",  Locale.UK, true},\n+                {\"z yyyy\", \"-1234 2010\",     Locale.UK, true},\n+                {\"z yyyy\", \"-12:34 2010\",    Locale.UK, false},\n+                {\"z yyyy\", \"-123 2010\",      Locale.UK, false},\n+                { \"MM/dd/yyyy\", \"01/11/12\",  Locale.UK, true},\n+                { \"MM/dd/yy\", \"01/11/12\",    Locale.UK, true},\n+                });\n+    }\n+    private final String format;\n+    private final String input;\n+    private final Locale locale;\n+    private final boolean valid;\n+    public FastDateParserSDFTest(String format, String input, Locale locale, boolean valid) {\n+        this.format = format;\n+        this.input = input;\n+        this.locale = locale;\n+        this.valid = valid;\n+    }\n+    @Test\n+    public void testOriginal() throws Exception {\n+        final SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n+        final TimeZone timeZone = TimeZone.getDefault();\n+        final DateParser fdf = new FastDateParser(format, timeZone, locale);\n+        checkParse(locale, sdf, fdf, input);\n+    }\n+    @Test\n+    public void testUpperCase() throws Exception {\n+        final SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n+        final TimeZone timeZone = TimeZone.getDefault();\n+        final DateParser fdf = new FastDateParser(format, timeZone , locale);\n+        checkParse(locale, sdf, fdf, input.toUpperCase(locale));\n+    }\n+    @Test\n+    @Ignore // not currently supported\n+    public void testLowerCase() throws Exception {\n+        final SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n+        final TimeZone timeZone = TimeZone.getDefault();\n+        final DateParser fdf = new FastDateParser(format, timeZone , locale);\n+        checkParse(locale, sdf, fdf, input.toLowerCase(locale));\n+    }\n+    private void checkParse(final Locale locale, final SimpleDateFormat sdf, final DateParser fdf, final String formattedDate) throws ParseException {\n+        Date expectedTime=null;\n+        Class<?> sdfE = null;\n+        try {\n+            expectedTime = sdf.parse(formattedDate);\n+            if (!valid) {\n+                throw new RuntimeException(\"Test data error: expected SDF parse to fail, but got \" + expectedTime);\n+            }\n+        } catch (ParseException e) {\n+            if (valid) {\n+                throw new RuntimeException(\"Test data error: expected SDF parse to succeed, but got \" + e);\n+            }\n+            sdfE = e.getClass();\n+        }\n+        Date actualTime = null;\n+        Class<?> fdfE = null;\n+        try {\n+            actualTime = fdf.parse(formattedDate);\n+            if (!valid) {\n+                fail(\"Expected FDP parse to fail, but got \" + actualTime);\n+            }\n+        } catch (ParseException e) {\n+            if (valid) {\n+                fail(\"Expected FDP parse to succeed, but got \" + e);\n+            }\n+            fdfE = e.getClass();\n+        }\n+        if (valid) {\n+            assertEquals(locale.toString()+\" \"+formattedDate +\"\\n\",expectedTime, actualTime);            \n+        } else {\n+            assertEquals(locale.toString()+\" \"+formattedDate + \" expected same Exception \", sdfE, fdfE);            \n+        }\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": "            sb.append(\"(GMT[+-]\\\\d{1,2}:\\\\d{2}\").append('|');\n            sb.append(\"[+-]\\\\d{4}\").append('|');\n",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java": "package org.apache.commons.lang3.time;\nimport static org.junit.Assert.*;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n@RunWith(Parameterized.class)\npublic class FastDateParserSDFTest {\n    @Parameters(name= \"{index}: {0} {1} {2}\")\n    public static Collection<Object[]> data() {\n        return Arrays.asList(new Object [][]{\n                {\"z yyyy\", \"GMT 2010\",       Locale.UK, true}, // no offset specified, but seems to be allowed\n                {\"z yyyy\", \"GMT-123 2010\",   Locale.UK, false},\n                {\"z yyyy\", \"GMT-1234 2010\",  Locale.UK, false},\n                {\"z yyyy\", \"GMT-12:34 2010\", Locale.UK, true},\n                {\"z yyyy\", \"GMT-1:23 2010\",  Locale.UK, true},\n                {\"z yyyy\", \"-1234 2010\",     Locale.UK, true},\n                {\"z yyyy\", \"-12:34 2010\",    Locale.UK, false},\n                {\"z yyyy\", \"-123 2010\",      Locale.UK, false},\n                { \"MM/dd/yyyy\", \"01/11/12\",  Locale.UK, true},\n                { \"MM/dd/yy\", \"01/11/12\",    Locale.UK, true},\n                });\n    }\n    private final String format;\n    private final String input;\n    private final Locale locale;\n    private final boolean valid;\n    public FastDateParserSDFTest(String format, String input, Locale locale, boolean valid) {\n        this.format = format;\n        this.input = input;\n        this.locale = locale;\n        this.valid = valid;\n    }\n    @Test\n    public void testOriginal() throws Exception {\n        final SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n        final TimeZone timeZone = TimeZone.getDefault();\n        final DateParser fdf = new FastDateParser(format, timeZone, locale);\n        checkParse(locale, sdf, fdf, input);\n    }\n    @Test\n    public void testUpperCase() throws Exception {\n        final SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n        final TimeZone timeZone = TimeZone.getDefault();\n        final DateParser fdf = new FastDateParser(format, timeZone , locale);\n        checkParse(locale, sdf, fdf, input.toUpperCase(locale));\n    }\n    @Test\n    @Ignore // not currently supported\n    public void testLowerCase() throws Exception {\n        final SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n        final TimeZone timeZone = TimeZone.getDefault();\n        final DateParser fdf = new FastDateParser(format, timeZone , locale);\n        checkParse(locale, sdf, fdf, input.toLowerCase(locale));\n    }\n    private void checkParse(final Locale locale, final SimpleDateFormat sdf, final DateParser fdf, final String formattedDate) throws ParseException {\n        Date expectedTime=null;\n        Class<?> sdfE = null;\n        try {\n            expectedTime = sdf.parse(formattedDate);\n            if (!valid) {\n                throw new RuntimeException(\"Test data error: expected SDF parse to fail, but got \" + expectedTime);\n            }\n        } catch (ParseException e) {\n            if (valid) {\n                throw new RuntimeException(\"Test data error: expected SDF parse to succeed, but got \" + e);\n            }\n            sdfE = e.getClass();\n        }\n        Date actualTime = null;\n        Class<?> fdfE = null;\n        try {\n            actualTime = fdf.parse(formattedDate);\n            if (!valid) {\n                fail(\"Expected FDP parse to fail, but got \" + actualTime);\n            }\n        } catch (ParseException e) {\n            if (valid) {\n                fail(\"Expected FDP parse to succeed, but got \" + e);\n            }\n            fdfE = e.getClass();\n        }\n        if (valid) {\n            assertEquals(locale.toString()+\" \"+formattedDate +\"\\n\",expectedTime, actualTime);            \n        } else {\n            assertEquals(locale.toString()+\" \"+formattedDate + \" expected same Exception \", sdfE, fdfE);            \n        }\n    }\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": [
                783,
                784
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java": [
                1,
                3,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                13,
                14,
                15,
                16,
                17,
                22,
                23,
                25,
                26,
                27,
                29,
                30,
                31,
                32,
                33,
                35,
                36,
                37,
                39,
                40,
                41,
                42,
                44,
                45,
                46,
                47,
                49,
                50,
                51,
                52,
                53,
                54,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                81,
                82,
                83,
                84,
                85,
                86,
                88,
                89,
                90,
                91,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                103,
                104,
                105,
                106,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118
            ]
        },
        "starts_total_time": 1.2297866344451904,
        "ekstazi_total_time": 6.976198196411133,
        "ekstazi_select_time": 1.5496859550476074,
        "starts_select_time": 1.297306776046753,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": "            sb.append(\"(GMT[+\\\\-]\\\\d{0,1}\\\\d{2}|[+\\\\-]\\\\d{2}:?\\\\d{2}|\");\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": [
                783
            ]
        }
    },
    {
        "commit": "52e854e3",
        "prev_commit": "bc91bedd",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "DateUtilsFragmentTest",
            "DateUtilsRoundingTest",
            "DateUtilsTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private static enum ModifyType {\n+        TRUNCATE,\n+        \n+        ROUND,\n+        \n+        CEILING\n+    }\n+        modify(gval, field, ModifyType.ROUND);\n+        modify(rounded, field, ModifyType.ROUND);\n+        modify(gval, field, ModifyType.TRUNCATE);\n+        modify(truncated, field, ModifyType.TRUNCATE);\n+        modify(gval, field, ModifyType.CEILING);\n+        modify(ceiled, field, ModifyType.CEILING);\n+    private static void modify(final Calendar val, final int field, final ModifyType modType) {\n+        if (ModifyType.TRUNCATE == modType || millisecs < 500) {\n+        if (!done && (ModifyType.TRUNCATE == modType || seconds < 30)) {\n+        if (!done && (ModifyType.TRUNCATE == modType || minutes < 30)) {\n+                    if (modType == ModifyType.CEILING || (modType == ModifyType.ROUND && roundUp)) {\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java": "    private static enum ModifyType {\n        TRUNCATE,\n        ROUND,\n        CEILING\n    }\n        modify(gval, field, ModifyType.ROUND);\n        modify(rounded, field, ModifyType.ROUND);\n        modify(gval, field, ModifyType.TRUNCATE);\n        modify(truncated, field, ModifyType.TRUNCATE);\n        modify(gval, field, ModifyType.CEILING);\n        modify(ceiled, field, ModifyType.CEILING);\n    private static void modify(final Calendar val, final int field, final ModifyType modType) {\n        if (ModifyType.TRUNCATE == modType || millisecs < 500) {\n        if (!done && (ModifyType.TRUNCATE == modType || seconds < 30)) {\n        if (!done && (ModifyType.TRUNCATE == modType || minutes < 30)) {\n                    if (modType == ModifyType.CEILING || (modType == ModifyType.ROUND && roundUp)) {\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java": [
                122,
                126,
                131,
                136,
                137,
                716,
                752,
                819,
                843,
                899,
                924,
                967,
                988,
                997,
                1006,
                1022
            ]
        },
        "starts_total_time": 1.2580671310424805,
        "ekstazi_total_time": 5.469999074935913,
        "ekstazi_select_time": 1.2966463565826416,
        "starts_select_time": 1.2379343509674072,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java": "    private static final int MODIFY_TRUNCATE = 0;\n    private static final int MODIFY_ROUND = 1;\n    private static final int MODIFY_CEILING = 2;\n        modify(gval, field, MODIFY_ROUND);\n        modify(rounded, field, MODIFY_ROUND);\n        modify(gval, field, MODIFY_TRUNCATE);\n        modify(truncated, field, MODIFY_TRUNCATE);\n        modify(gval, field, MODIFY_CEILING);\n        modify(ceiled, field, MODIFY_CEILING);\n    private static void modify(final Calendar val, final int field, final int modType) {\n        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n                    if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/DateUtils.java": [
                123,
                128,
                133,
                712,
                748,
                815,
                839,
                895,
                920,
                963,
                984,
                993,
                1002,
                1018
            ]
        }
    },
    {
        "commit": "22b6781a",
        "prev_commit": "2aae22de",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
            "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
            "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "FastDateFormatTest",
            "FastDateParserTest",
            "FastDateFormat_ParserTest",
            "DateUtilsTest",
            "DateFormatUtilsTest",
            "FastDatePrinterTest",
            "FastDateFormat_PrinterTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1000\" type=\"fix\" dev=\"djones\">ParseException when trying to parse UTC dates with Z as zone designator using DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT</action>\n+            if (formatField.equals(\"ZZ\")) {\n+                return ISO_8601_STRATEGY;\n+            }\n+    \n+    private static class ISO8601TimeZoneStrategy extends Strategy {\n+        private static final String PATTERN = \"(Z|(?:[+-]\\\\d{2}(?::?\\\\d{2})?))\";\n+        \n+        @Override\n+        boolean addRegex(FastDateParser parser, StringBuilder regex) {\n+            regex.append(PATTERN);\n+            return true;\n+        }\n+        \n+        @Override\n+        void setCalendar(FastDateParser parser, Calendar cal, String value) {\n+            if (value.equals(\"Z\")) {\n+                cal.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+            } else {\n+                cal.setTimeZone(TimeZone.getTimeZone(\"GMT\" + value));\n+            }\n+        }\n+    }\n+    private static final Strategy ISO_8601_STRATEGY = new ISO8601TimeZoneStrategy();\n+                } else if (tokenLen == 2) {\n+                    rule = TimeZoneNumberRule.INSTANCE_ISO_8601;\n+        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true, false);\n+        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false, false);\n+        static final TimeZoneNumberRule INSTANCE_ISO_8601 = new TimeZoneNumberRule(true, true);\n+        final boolean mISO8601;\n+        TimeZoneNumberRule(final boolean colon, final boolean iso8601) {\n+            mISO8601 = iso8601;\n+            if (mISO8601 && calendar.getTimeZone().getID().equals(\"UTC\")) {\n+                buffer.append(\"Z\");\n+                return;\n+            }\n+            \n+    public void testDateTimeISO() throws Exception {\n+        \n+        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        utcCal.set(2002, 1, 23, 9, 11, 12);\n+        utcCal.set(Calendar.MILLISECOND, 0);\n+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);\n+        assertEquals(\"2002-02-23T09:11:12Z\", text);\n+        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);\n+        assertEquals(utcCal.getTime(), date);\n+    @Test\n+    public void testLANG1000() throws Exception {\n+        String date = \"2013-11-18T12:48:05Z\";\n+        DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(date);\n+    }\n+    \n+    @Test\n+    public void testTimeZoneAsZ() throws Exception {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        FastDateFormat noColonFormat = FastDateFormat.getInstance(\"Z\");\n+        assertEquals(\"+0000\", noColonFormat.format(c));\n+        \n+        FastDateFormat isoFormat = FastDateFormat.getInstance(\"ZZ\");\n+        assertEquals(\"Z\", isoFormat.format(c));\n+        \n+        FastDateFormat colonFormat = FastDateFormat.getInstance(\"ZZZ\");\n+        assertEquals(\"+00:00\", colonFormat.format(c));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": "            if (formatField.equals(\"ZZ\")) {\n                return ISO_8601_STRATEGY;\n            }\n    private static class ISO8601TimeZoneStrategy extends Strategy {\n        private static final String PATTERN = \"(Z|(?:[+-]\\\\d{2}(?::?\\\\d{2})?))\";\n        @Override\n        boolean addRegex(FastDateParser parser, StringBuilder regex) {\n            regex.append(PATTERN);\n            return true;\n        }\n        @Override\n        void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            if (value.equals(\"Z\")) {\n                cal.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n            } else {\n                cal.setTimeZone(TimeZone.getTimeZone(\"GMT\" + value));\n            }\n        }\n    }\n    private static final Strategy ISO_8601_STRATEGY = new ISO8601TimeZoneStrategy();\n",
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java": "                } else if (tokenLen == 2) {\n                    rule = TimeZoneNumberRule.INSTANCE_ISO_8601;\n        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true, false);\n        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false, false);\n        static final TimeZoneNumberRule INSTANCE_ISO_8601 = new TimeZoneNumberRule(true, true);\n        final boolean mISO8601;\n        TimeZoneNumberRule(final boolean colon, final boolean iso8601) {\n            mISO8601 = iso8601;\n            if (mISO8601 && calendar.getTimeZone().getID().equals(\"UTC\")) {\n                buffer.append(\"Z\");\n                return;\n            }\n",
            "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java": "import java.util.Date;\n    public void testDateTimeISO() throws Exception {\n        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        utcCal.set(2002, 1, 23, 9, 11, 12);\n        utcCal.set(Calendar.MILLISECOND, 0);\n        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);\n        assertEquals(\"2002-02-23T09:11:12Z\", text);\n        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);\n        assertEquals(utcCal.getTime(), date);\n    @Test\n    public void testLANG1000() throws Exception {\n        String date = \"2013-11-18T12:48:05Z\";\n        DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(date);\n    }\n",
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java": "import static org.junit.Assert.*;\n    @Test\n    public void testTimeZoneAsZ() throws Exception {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        FastDateFormat noColonFormat = FastDateFormat.getInstance(\"Z\");\n        assertEquals(\"+0000\", noColonFormat.format(c));\n        FastDateFormat isoFormat = FastDateFormat.getInstance(\"ZZ\");\n        assertEquals(\"Z\", isoFormat.format(c));\n        FastDateFormat colonFormat = FastDateFormat.getInstance(\"ZZZ\");\n        assertEquals(\"+00:00\", colonFormat.format(c));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": [
                516,
                517,
                518,
                822,
                824,
                829,
                830,
                831,
                832,
                833,
                838,
                839,
                840,
                841,
                842,
                843,
                844,
                845,
                846,
                877
            ],
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java": [
                277,
                278,
                1178,
                1179,
                1180,
                1183,
                1191,
                1193,
                1209,
                1210,
                1211,
                1212
            ],
            "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java": [
                26,
                109,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                263,
                264,
                265,
                266,
                267
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java": [
                19,
                287,
                288,
                289,
                290,
                291,
                293,
                294,
                296,
                297,
                298
            ]
        },
        "starts_total_time": 1.2284424304962158,
        "ekstazi_total_time": 8.085262537002563,
        "ekstazi_select_time": 1.2876741886138916,
        "starts_select_time": 1.341444492340088,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java": "        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);\n        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);\n        TimeZoneNumberRule(final boolean colon) {\n",
            "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java": "    public void testDateTimeISO(){\n",
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java": "import static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java": [
                1176,
                1177,
                1186
            ],
            "src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java": [
                106
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java": [
                19,
                20,
                21,
                22
            ]
        }
    },
    {
        "commit": "d38919fc",
        "prev_commit": "ce7f4ed0",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/ClassUtils.java",
            "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/ClassUtils.java",
            "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "FastDateParserSDFTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 56,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 91,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserSDFTest": 276,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "NoFieldNamesToStringStyleTest",
            "ExceptionUtilsTest",
            "TypeLiteralTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "DefaultToStringStyleTest",
            "DiffResultTest",
            "DiffBuilderTest",
            "DiffTest",
            "FieldUtilsTest",
            "ConstructorUtilsTest",
            "ClassUtilsTest",
            "SimpleToStringStyleTest",
            "MultilineRecursiveToStringStyleTest",
            "StandardToStringStyleTest",
            "TypeUtilsTest",
            "RecursiveToStringStyleTest",
            "ShortPrefixToStringStyleTest",
            "EventUtilsTest",
            "MethodUtilsTest",
            "AnnotationUtilsTest",
            "NoClassNameToStringStyleTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1093\" type=\"add\" dev=\"britter\" due-to=\"Fabian Lange\">Add ClassUtils.getAbbreviatedName()</action>\n+    public static String getAbbreviatedName(final Class<?> cls, int len) {\n+      if (cls == null) {\n+        return StringUtils.EMPTY;\n+      }\n+      return getAbbreviatedName(cls.getName(), len);\n+    }\n+    public static String getAbbreviatedName(String className, int len) {\n+      if (len <= 0) {\n+        throw new IllegalArgumentException(\"len must be > 0\");\n+      }\n+      if (className == null) {\n+        return StringUtils.EMPTY;\n+      }\n+      int availableSpace = len;\n+      int packageLevels = StringUtils.countMatches(className, '.');\n+      String[] output = new String[packageLevels + 1];\n+      int endIndex = className.length() - 1;\n+      for (int level = packageLevels; level >= 0; level--) {\n+        int startIndex = className.lastIndexOf('.', endIndex);\n+        String part = className.substring(startIndex + 1, endIndex + 1);\n+        availableSpace -= part.length();\n+        if (level > 0) {\n+          availableSpace--;\n+        }\n+        if (level == packageLevels) {\n+          output[level] = part;\n+        } else {\n+          if (availableSpace > 0) {\n+            output[level] = part;\n+          } else {\n+            output[level] = part.substring(0, 1);\n+          }\n+        }\n+        endIndex = startIndex - 1;\n+      }\n+      return StringUtils.join(output, '.');\n+    }\n+    @Test\n+    public void test_getAbbreviatedName_Class() {\n+        assertEquals(\"\", ClassUtils.getAbbreviatedName((Class<?>)null, 1));\n+        assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(String.class, 1));\n+        assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(String.class, 5));\n+        assertEquals(\"j.lang.String\", ClassUtils.getAbbreviatedName(String.class, 13));\n+        assertEquals(\"j.lang.String\", ClassUtils.getAbbreviatedName(String.class, 15));\n+        assertEquals(\"java.lang.String\", ClassUtils.getAbbreviatedName(String.class, 20));\n+    }\n+    @Test\n+    public void test_getAbbreviatedName_Class_Exceptions() {\n+        try {\n+            ClassUtils.getAbbreviatedName(String.class, 0);\n+            fail(\"ClassUtils.getAbbreviatedName() should fail with an \"\n+                + \"IllegalArgumentException for a len value of 0.\");\n+        } catch (final Exception e) {\n+            assertTrue(e instanceof IllegalArgumentException);\n+        }\n+        try {\n+            ClassUtils.getAbbreviatedName(String.class, -10);\n+            fail(\"ClassUtils.getAbbreviatedName() should fail with an \"\n+                + \"IllegalArgumentException for negative values of len.\");\n+        } catch (final Exception e) {\n+            assertTrue(e instanceof IllegalArgumentException);\n+        }\n+    }\n+    @Test\n+    public void test_getAbbreviatedName_String() {\n+        assertEquals(\"\", ClassUtils.getAbbreviatedName((String)null, 1));\n+        assertEquals(\"WithoutPackage\", ClassUtils.getAbbreviatedName(\"WithoutPackage\", 1));\n+        assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(\"java.lang.String\", 1));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/ClassUtils.java": "    public static String getAbbreviatedName(final Class<?> cls, int len) {\n      if (cls == null) {\n        return StringUtils.EMPTY;\n      }\n      return getAbbreviatedName(cls.getName(), len);\n    }\n    public static String getAbbreviatedName(String className, int len) {\n      if (len <= 0) {\n        throw new IllegalArgumentException(\"len must be > 0\");\n      }\n      if (className == null) {\n        return StringUtils.EMPTY;\n      }\n      int availableSpace = len;\n      int packageLevels = StringUtils.countMatches(className, '.');\n      String[] output = new String[packageLevels + 1];\n      int endIndex = className.length() - 1;\n      for (int level = packageLevels; level >= 0; level--) {\n        int startIndex = className.lastIndexOf('.', endIndex);\n        String part = className.substring(startIndex + 1, endIndex + 1);\n        availableSpace -= part.length();\n        if (level > 0) {\n          availableSpace--;\n        }\n        if (level == packageLevels) {\n          output[level] = part;\n        } else {\n          if (availableSpace > 0) {\n            output[level] = part;\n          } else {\n            output[level] = part.substring(0, 1);\n          }\n        }\n        endIndex = startIndex - 1;\n      }\n      return StringUtils.join(output, '.');\n    }\n",
            "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java": "    @Test\n    public void test_getAbbreviatedName_Class() {\n        assertEquals(\"\", ClassUtils.getAbbreviatedName((Class<?>)null, 1));\n        assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(String.class, 1));\n        assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(String.class, 5));\n        assertEquals(\"j.lang.String\", ClassUtils.getAbbreviatedName(String.class, 13));\n        assertEquals(\"j.lang.String\", ClassUtils.getAbbreviatedName(String.class, 15));\n        assertEquals(\"java.lang.String\", ClassUtils.getAbbreviatedName(String.class, 20));\n    }\n    @Test\n    public void test_getAbbreviatedName_Class_Exceptions() {\n        try {\n            ClassUtils.getAbbreviatedName(String.class, 0);\n            fail(\"ClassUtils.getAbbreviatedName() should fail with an \"\n                + \"IllegalArgumentException for a len value of 0.\");\n        } catch (final Exception e) {\n            assertTrue(e instanceof IllegalArgumentException);\n        }\n        try {\n            ClassUtils.getAbbreviatedName(String.class, -10);\n            fail(\"ClassUtils.getAbbreviatedName() should fail with an \"\n                + \"IllegalArgumentException for negative values of len.\");\n        } catch (final Exception e) {\n            assertTrue(e instanceof IllegalArgumentException);\n        }\n    }\n    @Test\n    public void test_getAbbreviatedName_String() {\n        assertEquals(\"\", ClassUtils.getAbbreviatedName((String)null, 1));\n        assertEquals(\"WithoutPackage\", ClassUtils.getAbbreviatedName(\"WithoutPackage\", 1));\n        assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(\"java.lang.String\", 1));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/ClassUtils.java": [
                329,
                330,
                331,
                332,
                333,
                334,
                361,
                362,
                363,
                364,
                365,
                366,
                367,
                369,
                370,
                371,
                372,
                373,
                374,
                375,
                376,
                377,
                379,
                380,
                381,
                383,
                384,
                385,
                386,
                387,
                389,
                390,
                391,
                392,
                393,
                395,
                396
            ],
            "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java": [
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                258,
                259,
                260,
                262,
                263,
                264,
                265,
                266,
                267
            ]
        },
        "starts_total_time": 1.320465087890625,
        "ekstazi_total_time": 5.892609357833862,
        "ekstazi_select_time": 1.2906157970428467,
        "starts_select_time": 1.2563207149505615,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "3328387a",
        "prev_commit": "1181552e",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/text/StrBuilder.java",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/text/StrBuilder.java",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "FastDatePrinterTimeZonesTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "FastDateParserSDFTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 57,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 91,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 90,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserSDFTest": 276,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "FastDatePrinterTimeZonesTest": 628,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "StrTokenizerTest",
            "StrBuilderTest",
            "ObjectUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "StrBuilderAppendInsertTest",
            "StrSubstitutorTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1098\" type=\"update\" dev=\"britter\" due-to=\"Mikhail Mazurskiy, Fabian Lange\">Avoid String allocation in StrBuilder.append(CharSequence)</action>\n+        }\n+        if (obj instanceof CharSequence) {\n+            return append((CharSequence) obj);\n+        }\n+        }\n+        if (seq instanceof StrBuilder) {\n+            return append((StrBuilder) seq);\n+        }\n+        if (seq instanceof StringBuilder) {\n+            return append((StringBuilder) seq);\n+        }\n+        if (seq instanceof StringBuffer) {\n+            return append((StringBuffer) seq);\n+        }\n+        if (seq instanceof CharBuffer) {\n+            return append((CharBuffer) seq);\n+        }\n+    public StrBuilder append(final CharBuffer buf) {\n+        if (buf == null) {\n+            return appendNull();\n+        }\n+        if (buf.hasArray()) {\n+            final int length = buf.remaining();\n+            final int len = length();\n+            ensureCapacity(len + length);\n+            System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, len, length);\n+            size += length;\n+        } else {\n+            append(buf.toString());\n+        }\n+        return this;\n+    }\n+    public StrBuilder append(final CharBuffer buf, final int startIndex, final int length) {\n+        if (buf == null) {\n+            return appendNull();\n+        }\n+        if (buf.hasArray()) {\n+            final int totalLength = buf.remaining();\n+            if (startIndex < 0 || startIndex > totalLength) {\n+                throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n+            }\n+            if (length < 0 || (startIndex + length) > totalLength) {\n+                throw new StringIndexOutOfBoundsException(\"length must be valid\");\n+            }\n+            final int len = length();\n+            ensureCapacity(len + length);\n+            System.arraycopy(buf.array(), buf.arrayOffset() + buf.position() + startIndex, buffer, len, length);\n+            size += length;\n+        } else {\n+            append(buf.toString(), startIndex, length);\n+        }\n+        return this;\n+    }\n+    @Test\n+    public void testAppendCharBuffer() {\n+        final StrBuilder sb1 = new StrBuilder();\n+        final CharBuffer buf = CharBuffer.allocate(10);\n+        buf.append(\"0123456789\");\n+        buf.flip();\n+        sb1.append(buf);\n+        assertEquals(\"0123456789\", sb1.toString());\n+        final StrBuilder sb2 = new StrBuilder();\n+        sb2.append(buf, 1, 8);\n+        assertEquals(\"12345678\", sb2.toString());\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/text/StrBuilder.java": "        }\n        if (obj instanceof CharSequence) {\n            return append((CharSequence) obj);\n        }\n        }\n        if (seq instanceof StrBuilder) {\n            return append((StrBuilder) seq);\n        }\n        if (seq instanceof StringBuilder) {\n            return append((StringBuilder) seq);\n        }\n        if (seq instanceof StringBuffer) {\n            return append((StringBuffer) seq);\n        }\n        if (seq instanceof CharBuffer) {\n            return append((CharBuffer) seq);\n        }\n    public StrBuilder append(final CharBuffer buf) {\n        if (buf == null) {\n            return appendNull();\n        }\n        if (buf.hasArray()) {\n            final int length = buf.remaining();\n            final int len = length();\n            ensureCapacity(len + length);\n            System.arraycopy(buf.array(), buf.arrayOffset() + buf.position(), buffer, len, length);\n            size += length;\n        } else {\n            append(buf.toString());\n        }\n        return this;\n    }\n    public StrBuilder append(final CharBuffer buf, final int startIndex, final int length) {\n        if (buf == null) {\n            return appendNull();\n        }\n        if (buf.hasArray()) {\n            final int totalLength = buf.remaining();\n            if (startIndex < 0 || startIndex > totalLength) {\n                throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n            }\n            if (length < 0 || (startIndex + length) > totalLength) {\n                throw new StringIndexOutOfBoundsException(\"length must be valid\");\n            }\n            final int len = length();\n            ensureCapacity(len + length);\n            System.arraycopy(buf.array(), buf.arrayOffset() + buf.position() + startIndex, buffer, len, length);\n            size += length;\n        } else {\n            append(buf.toString(), startIndex, length);\n        }\n        return this;\n    }\n",
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java": "    @Test\n    public void testAppendCharBuffer() {\n        final StrBuilder sb1 = new StrBuilder();\n        final CharBuffer buf = CharBuffer.allocate(10);\n        buf.append(\"0123456789\");\n        buf.flip();\n        sb1.append(buf);\n        assertEquals(\"0123456789\", sb1.toString());\n        final StrBuilder sb2 = new StrBuilder();\n        sb2.append(buf, 1, 8);\n        assertEquals(\"12345678\", sb2.toString());\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/text/StrBuilder.java": [
                508,
                509,
                510,
                511,
                527,
                528,
                529,
                530,
                531,
                532,
                533,
                534,
                535,
                536,
                537,
                538,
                539,
                632,
                633,
                634,
                635,
                636,
                637,
                638,
                639,
                640,
                641,
                642,
                643,
                644,
                645,
                646,
                658,
                659,
                660,
                661,
                662,
                663,
                664,
                665,
                666,
                667,
                668,
                669,
                670,
                671,
                672,
                673,
                674,
                675,
                676,
                677,
                678
            ],
            "src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java": [
                1942,
                1943,
                1944,
                1945,
                1946,
                1947,
                1948,
                1949,
                1951,
                1952,
                1953,
                1954
            ]
        },
        "starts_total_time": 1.3186497688293457,
        "ekstazi_total_time": 5.8153769969940186,
        "ekstazi_select_time": 1.3645617961883545,
        "starts_select_time": 1.2633416652679443,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/text/StrBuilder.java": "        } \n        } \n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/text/StrBuilder.java": [
                508,
                524
            ]
        }
    },
    {
        "commit": "8aa1b44a",
        "prev_commit": "1f75a8f7",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "FastDateParserSDFTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 57,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 91,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserSDFTest": 276,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "FastDateFormatTest",
            "FastDatePrinterTest",
            "FastDateFormat_PrinterTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1092\" type=\"add\" dev=\"britter\">Wrong formating of time zones with daylight saving time in FastDatePrinter</action>\n+            if (calendar.get(Calendar.DST_OFFSET) != 0) {\n+                TimeZone anotherZone = TimeZone.getTimeZone(zone);\n+                assertNotNull(\"Cannot find another timezone\", anotherZone);\n+                \n+                final String pattern = \"h:mma z\";\n+                final Calendar cal = Calendar.getInstance(anotherZone);\n+                \n+                final SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n+                sdf.setTimeZone(anotherZone);\n+                final String expectedValue = sdf.format(cal.getTime());\n+                final String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n+                assertEquals(expectedValue, actualValue);\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java": "            if (calendar.get(Calendar.DST_OFFSET) != 0) {\n",
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java": "                TimeZone anotherZone = TimeZone.getTimeZone(zone);\n                assertNotNull(\"Cannot find another timezone\", anotherZone);\n                final String pattern = \"h:mma z\";\n                final Calendar cal = Calendar.getInstance(anotherZone);\n                final SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n                sdf.setTimeZone(anotherZone);\n                final String expectedValue = sdf.format(cal.getTime());\n                final String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n                assertEquals(expectedValue, actualValue);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java": [
                1165
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java": [
                270,
                272,
                274,
                275,
                277,
                278,
                279,
                280,
                281
            ]
        },
        "starts_total_time": 1.260176420211792,
        "ekstazi_total_time": 6.42603063583374,
        "ekstazi_select_time": 1.389430284500122,
        "starts_select_time": 1.310973882675171,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java": "            if (zone.useDaylightTime()\n                    && calendar.get(Calendar.DST_OFFSET) != 0) {\n",
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java": "        TimeZone anotherZone = null;\n                anotherZone = TimeZone.getTimeZone(zone);\n        assertNotNull(\"Cannot find another timezone\", anotherZone);\n        final String pattern = \"h:mma z\";\n        final Calendar cal = Calendar.getInstance(anotherZone);\n        final SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n        sdf.setTimeZone(anotherZone);\n        final String expectedValue = sdf.format(cal.getTime());\n        final String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n        assertEquals(expectedValue, actualValue);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java": [
                1165,
                1166
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java": [
                268,
                271,
                275,
                277,
                278,
                280,
                281,
                282,
                283,
                284
            ]
        }
    },
    {
        "commit": "de67dec0",
        "prev_commit": "03aa1e70",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java",
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java",
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/Annotated.java"
        ],
        "changed_files_num": 6,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java",
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java",
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/Annotated.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "MutableByteTest",
            "EventListenerSupportTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 194,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 71,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 23,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 49,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 13,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 26,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "MultiLineToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 86,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 9,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ConstructorUtilsTest",
            "EventUtilsTest",
            "MethodUtilsTest",
            "FieldUtilsTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1021\" type=\"add\" dev=\"britter\" due-to=\"Alexander M\u00fcller\">Provide methods to retrieve all fields/methods annotated with a specific type</action>\n+    public static Field[] getFieldsWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {\n+        final List<Field> annotatedFieldsList = getFieldsListWithAnnotation(cls, annotationCls);\n+        return annotatedFieldsList.toArray(new Field[annotatedFieldsList.size()]);\n+    }\n+    public static List<Field> getFieldsListWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {\n+        Validate.isTrue(annotationCls != null, \"The annotation class must not be null\");\n+        final List<Field> allFields = getAllFieldsList(cls);\n+        final List<Field> annotatedFields = new ArrayList<Field>();\n+        for (final Field field : allFields) {\n+            if (field.getAnnotation(annotationCls) != null) {\n+                annotatedFields.add(field);\n+            }\n+        }\n+        return annotatedFields;\n+    }\n+    public static Method[] getMethodsWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {\n+        final List<Method> annotatedMethodsList = getMethodsListWithAnnotation(cls, annotationCls);\n+        return annotatedMethodsList.toArray(new Method[annotatedMethodsList.size()]);\n+    }\n+    public static List<Method> getMethodsListWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {\n+        Validate.isTrue(cls != null, \"The class must not be null\");\n+        Validate.isTrue(annotationCls != null, \"The annotation class must not be null\");\n+        final Method[] allMethods = cls.getMethods();\n+        final List<Method> annotatedMethods = new ArrayList<Method>();\n+        for (final Method method : allMethods) {\n+            if (method.getAnnotation(annotationCls) != null) {\n+                annotatedMethods.add(method);\n+            }\n+        }\n+        return annotatedMethods;\n+    }\n+    @Annotated\n+    @Annotated\n+    @Test\n+    public void testGetFieldsWithAnnotation() throws NoSuchFieldException {\n+        assertArrayEquals(new Field[0], FieldUtils.getFieldsWithAnnotation(Object.class, Annotated.class));\n+        final Field[] annotatedFields = new Field[]{\n+                FieldUtilsTest.class.getDeclaredField(\"publicChild\"),\n+                FieldUtilsTest.class.getDeclaredField(\"privatelyShadowedChild\")\n+        };\n+        assertArrayEquals(annotatedFields, FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, Annotated.class));\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetFieldsWithAnnotationIllegalArgumentException1() {\n+        FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, null);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetFieldsWithAnnotationIllegalArgumentException2() {\n+        FieldUtils.getFieldsWithAnnotation(null, Annotated.class);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetFieldsWithAnnotationIllegalArgumentException3() {\n+        FieldUtils.getFieldsWithAnnotation(null, null);\n+    }\n+    @Test\n+    public void testGetFieldsListWithAnnotation() throws NoSuchFieldException {\n+        assertEquals(0, FieldUtils.getFieldsListWithAnnotation(Object.class, Annotated.class).size());\n+        final List<Field> annotatedFields = Arrays.asList(\n+                FieldUtilsTest.class.getDeclaredField(\"publicChild\"),\n+                FieldUtilsTest.class.getDeclaredField(\"privatelyShadowedChild\")\n+        );\n+        final List<Field> fieldUtilsTestAnnotatedFields = FieldUtils.getFieldsListWithAnnotation(FieldUtilsTest.class, Annotated.class);\n+        assertEquals(annotatedFields.size(),fieldUtilsTestAnnotatedFields.size());\n+        assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(0)));\n+        assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(1)));\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetFieldsListWithAnnotationIllegalArgumentException1() {\n+        FieldUtils.getFieldsListWithAnnotation(FieldUtilsTest.class, null);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetFieldsListWithAnnotationIllegalArgumentException2() {\n+        FieldUtils.getFieldsListWithAnnotation(null, Annotated.class);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetFieldsListWithAnnotationIllegalArgumentException3() {\n+        FieldUtils.getFieldsListWithAnnotation(null, null);\n+    }\n+            FieldUtils.writeStaticField(field, \"new\", true);\n+            FieldUtils.writeStaticField(field, \"new\", true);\n+            FieldUtils.writeStaticField(field, \"new\", true);\n+            FieldUtils.writeStaticField(field, \"new\", true);\n+    @Test\n+    @Annotated\n+    public void testGetMethodsWithAnnotation() throws NoSuchMethodException {\n+        assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class));\n+        final Method[] annotatedMethods = new Method[]{\n+                MethodUtilsTest.class.getMethod(\"testGetMethodsWithAnnotation\"),\n+                MethodUtilsTest.class.getMethod(\"testGetMethodsListWithAnnotation\")\n+        };\n+        assertArrayEquals(annotatedMethods, MethodUtils.getMethodsWithAnnotation(MethodUtilsTest.class, Annotated.class));\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetMethodsWithAnnotationIllegalArgumentException1() {\n+        MethodUtils.getMethodsWithAnnotation(FieldUtilsTest.class, null);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetMethodsWithAnnotationIllegalArgumentException2() {\n+        MethodUtils.getMethodsWithAnnotation(null, Annotated.class);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetMethodsWithAnnotationIllegalArgumentException3() {\n+        MethodUtils.getMethodsWithAnnotation(null, null);\n+    }\n+    @Test\n+    @Annotated\n+    public void testGetMethodsListWithAnnotation() throws NoSuchMethodException {\n+        assertEquals(0, MethodUtils.getMethodsListWithAnnotation(Object.class, Annotated.class).size());\n+        final List<Method> annotatedMethods = Arrays.asList(\n+                MethodUtilsTest.class.getMethod(\"testGetMethodsWithAnnotation\"),\n+                MethodUtilsTest.class.getMethod(\"testGetMethodsListWithAnnotation\")\n+        );\n+        final List<Method> methodUtilsTestAnnotatedFields = MethodUtils.getMethodsListWithAnnotation(MethodUtilsTest.class, Annotated.class);\n+        assertEquals(annotatedMethods.size(), methodUtilsTestAnnotatedFields.size());\n+        assertTrue(methodUtilsTestAnnotatedFields.contains(annotatedMethods.get(0)));\n+        assertTrue(methodUtilsTestAnnotatedFields.contains(annotatedMethods.get(1)));\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetMethodsListWithAnnotationIllegalArgumentException1() {\n+        MethodUtils.getMethodsListWithAnnotation(FieldUtilsTest.class, null);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetMethodsListWithAnnotationIllegalArgumentException2() {\n+        MethodUtils.getMethodsListWithAnnotation(null, Annotated.class);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetMethodsListWithAnnotationIllegalArgumentException3() {\n+        MethodUtils.getMethodsListWithAnnotation(null, null);\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java": "import java.lang.annotation.Annotation;\n    public static Field[] getFieldsWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {\n        final List<Field> annotatedFieldsList = getFieldsListWithAnnotation(cls, annotationCls);\n        return annotatedFieldsList.toArray(new Field[annotatedFieldsList.size()]);\n    }\n    public static List<Field> getFieldsListWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {\n        Validate.isTrue(annotationCls != null, \"The annotation class must not be null\");\n        final List<Field> allFields = getAllFieldsList(cls);\n        final List<Field> annotatedFields = new ArrayList<Field>();\n        for (final Field field : allFields) {\n            if (field.getAnnotation(annotationCls) != null) {\n                annotatedFields.add(field);\n            }\n        }\n        return annotatedFields;\n    }\n",
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java": "import java.lang.annotation.Annotation;\nimport java.util.ArrayList;\nimport java.util.List;\n    public static Method[] getMethodsWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {\n        final List<Method> annotatedMethodsList = getMethodsListWithAnnotation(cls, annotationCls);\n        return annotatedMethodsList.toArray(new Method[annotatedMethodsList.size()]);\n    }\n    public static List<Method> getMethodsListWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls) {\n        Validate.isTrue(cls != null, \"The class must not be null\");\n        Validate.isTrue(annotationCls != null, \"The annotation class must not be null\");\n        final Method[] allMethods = cls.getMethods();\n        final List<Method> annotatedMethods = new ArrayList<Method>();\n        for (final Method method : allMethods) {\n            if (method.getAnnotation(annotationCls) != null) {\n                annotatedMethods.add(method);\n            }\n        }\n        return annotatedMethods;\n    }\n",
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java": "    @Annotated\n    @Annotated\n    @Test\n    public void testGetFieldsWithAnnotation() throws NoSuchFieldException {\n        assertArrayEquals(new Field[0], FieldUtils.getFieldsWithAnnotation(Object.class, Annotated.class));\n        final Field[] annotatedFields = new Field[]{\n                FieldUtilsTest.class.getDeclaredField(\"publicChild\"),\n                FieldUtilsTest.class.getDeclaredField(\"privatelyShadowedChild\")\n        };\n        assertArrayEquals(annotatedFields, FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, Annotated.class));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetFieldsWithAnnotationIllegalArgumentException1() {\n        FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetFieldsWithAnnotationIllegalArgumentException2() {\n        FieldUtils.getFieldsWithAnnotation(null, Annotated.class);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetFieldsWithAnnotationIllegalArgumentException3() {\n        FieldUtils.getFieldsWithAnnotation(null, null);\n    }\n    @Test\n    public void testGetFieldsListWithAnnotation() throws NoSuchFieldException {\n        assertEquals(0, FieldUtils.getFieldsListWithAnnotation(Object.class, Annotated.class).size());\n        final List<Field> annotatedFields = Arrays.asList(\n                FieldUtilsTest.class.getDeclaredField(\"publicChild\"),\n                FieldUtilsTest.class.getDeclaredField(\"privatelyShadowedChild\")\n        );\n        final List<Field> fieldUtilsTestAnnotatedFields = FieldUtils.getFieldsListWithAnnotation(FieldUtilsTest.class, Annotated.class);\n        assertEquals(annotatedFields.size(),fieldUtilsTestAnnotatedFields.size());\n        assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(0)));\n        assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(1)));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetFieldsListWithAnnotationIllegalArgumentException1() {\n        FieldUtils.getFieldsListWithAnnotation(FieldUtilsTest.class, null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetFieldsListWithAnnotationIllegalArgumentException2() {\n        FieldUtils.getFieldsListWithAnnotation(null, Annotated.class);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetFieldsListWithAnnotationIllegalArgumentException3() {\n        FieldUtils.getFieldsListWithAnnotation(null, null);\n    }\n            FieldUtils.writeStaticField(field, \"new\", true);\n            FieldUtils.writeStaticField(field, \"new\", true);\n            FieldUtils.writeStaticField(field, \"new\", true);\n            FieldUtils.writeStaticField(field, \"new\", true);\n",
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java": "import static org.junit.Assert.assertArrayEquals;\nimport java.util.List;\nimport org.apache.commons.lang3.reflect.testbed.Annotated;\n    @Test\n    @Annotated\n    public void testGetMethodsWithAnnotation() throws NoSuchMethodException {\n        assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class));\n        final Method[] annotatedMethods = new Method[]{\n                MethodUtilsTest.class.getMethod(\"testGetMethodsWithAnnotation\"),\n                MethodUtilsTest.class.getMethod(\"testGetMethodsListWithAnnotation\")\n        };\n        assertArrayEquals(annotatedMethods, MethodUtils.getMethodsWithAnnotation(MethodUtilsTest.class, Annotated.class));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetMethodsWithAnnotationIllegalArgumentException1() {\n        MethodUtils.getMethodsWithAnnotation(FieldUtilsTest.class, null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetMethodsWithAnnotationIllegalArgumentException2() {\n        MethodUtils.getMethodsWithAnnotation(null, Annotated.class);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetMethodsWithAnnotationIllegalArgumentException3() {\n        MethodUtils.getMethodsWithAnnotation(null, null);\n    }\n    @Test\n    @Annotated\n    public void testGetMethodsListWithAnnotation() throws NoSuchMethodException {\n        assertEquals(0, MethodUtils.getMethodsListWithAnnotation(Object.class, Annotated.class).size());\n        final List<Method> annotatedMethods = Arrays.asList(\n                MethodUtilsTest.class.getMethod(\"testGetMethodsWithAnnotation\"),\n                MethodUtilsTest.class.getMethod(\"testGetMethodsListWithAnnotation\")\n        );\n        final List<Method> methodUtilsTestAnnotatedFields = MethodUtils.getMethodsListWithAnnotation(MethodUtilsTest.class, Annotated.class);\n        assertEquals(annotatedMethods.size(), methodUtilsTestAnnotatedFields.size());\n        assertTrue(methodUtilsTestAnnotatedFields.contains(annotatedMethods.get(0)));\n        assertTrue(methodUtilsTestAnnotatedFields.contains(annotatedMethods.get(1)));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetMethodsListWithAnnotationIllegalArgumentException1() {\n        MethodUtils.getMethodsListWithAnnotation(FieldUtilsTest.class, null);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetMethodsListWithAnnotationIllegalArgumentException2() {\n        MethodUtils.getMethodsListWithAnnotation(null, Annotated.class);\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetMethodsListWithAnnotationIllegalArgumentException3() {\n        MethodUtils.getMethodsListWithAnnotation(null, null);\n    }\n",
            "src/test/java/org/apache/commons/lang3/reflect/testbed/Annotated.java": "package org.apache.commons.lang3.reflect.testbed;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD, ElementType.METHOD})\npublic @interface Annotated {\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java": [
                23,
                237,
                238,
                239,
                240,
                253,
                254,
                255,
                256,
                257,
                258,
                259,
                260,
                261,
                262,
                263
            ],
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java": [
                19,
                26,
                29,
                563,
                564,
                565,
                566,
                579,
                580,
                581,
                582,
                583,
                584,
                585,
                586,
                587,
                588,
                589,
                590
            ],
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java": [
                46,
                49,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                181,
                182,
                183,
                184,
                186,
                187,
                188,
                189,
                191,
                192,
                193,
                194,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                209,
                210,
                211,
                212,
                214,
                215,
                216,
                217,
                219,
                220,
                221,
                222,
                876,
                883,
                890,
                897
            ],
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java": [
                19,
                34,
                42,
                431,
                432,
                433,
                434,
                435,
                436,
                437,
                438,
                439,
                440,
                442,
                443,
                444,
                445,
                447,
                448,
                449,
                450,
                452,
                453,
                454,
                455,
                457,
                458,
                459,
                460,
                461,
                462,
                463,
                464,
                465,
                466,
                467,
                468,
                469,
                471,
                472,
                473,
                474,
                476,
                477,
                478,
                479,
                481,
                482,
                483,
                484
            ],
            "src/test/java/org/apache/commons/lang3/reflect/testbed/Annotated.java": [
                1,
                3,
                4,
                5,
                6,
                8,
                9,
                10,
                11
            ]
        },
        "starts_total_time": 1.2654471397399902,
        "ekstazi_total_time": 5.347986221313477,
        "ekstazi_select_time": 1.3294854164123535,
        "starts_select_time": 1.260796070098877,
        "deleted_diff_per_file": {
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java": "        FieldUtils.writeStaticField(field, \"new\", true);\n        FieldUtils.writeStaticField(field, \"new\", true);\n        FieldUtils.writeStaticField(field, \"new\", true);\n        FieldUtils.writeStaticField(field, \"new\", true);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java": [
                821,
                828,
                835,
                842
            ]
        }
    },
    {
        "commit": "63f1d6b8",
        "prev_commit": "cc991fea",
        "changed_files": [
            "src/main/java/org/apache/commons/lang3/text/StrLookup.java",
            "src/test/java/org/apache/commons/lang3/text/StrLookupTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/text/StrLookup.java",
            "src/test/java/org/apache/commons/lang3/text/StrLookupTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 28,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "StrLookupTest",
            "StrSubstitutorTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private static final StrLookup<String> NONE_LOOKUP = new MapStrLookup<String>(null);\n+    private static Properties copyProperties(Properties input) {\n+        if (input == null) {\n+            return null;\n+        }\n+        Properties output = new Properties();\n+        @SuppressWarnings(\"unchecked\") // Property names are Strings.\n+        Enumeration<String> propertyNames = (Enumeration<String>) input.propertyNames();\n+        while (propertyNames.hasMoreElements()) {\n+            String propertyName = propertyNames.nextElement();\n+            output.setProperty(propertyName, input.getProperty(propertyName));\n+        }\n+        return output;\n+    }\n+        Properties systemProperties = null;\n+        try {\n+            systemProperties = System.getProperties();\n+        } catch (final SecurityException ex) {\n+        }\n+        Properties properties = copyProperties(systemProperties);\n+        @SuppressWarnings(\"unchecked\") // System property keys and values are always Strings\n+        final Map<String, String> propertiesMap = (Map) properties;\n+        return new MapStrLookup<String>(propertiesMap);\n+    @Test\n+    public void testSystemPropertiesLookupNotSingleton() {\n+        final String osName = \"os.name\";\n+        final String originalOsName = System.getProperty(osName);\n+        StrLookup properties1 = StrLookup.systemPropertiesLookup();\n+        assertEquals(originalOsName, properties1.lookup(osName));\n+        final String differentOsName = \"HAL-9000\";\n+        System.setProperty(osName, differentOsName);\n+        StrLookup properties2 = StrLookup.systemPropertiesLookup();\n+        assertEquals(originalOsName, properties1.lookup(osName));\n+        assertEquals(differentOsName, properties2.lookup(osName));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/text/StrLookup.java": "import java.util.Enumeration;\nimport java.util.Properties;\n    private static final StrLookup<String> NONE_LOOKUP = new MapStrLookup<String>(null);\n    private static Properties copyProperties(Properties input) {\n        if (input == null) {\n            return null;\n        }\n        Properties output = new Properties();\n        @SuppressWarnings(\"unchecked\") // Property names are Strings.\n        Enumeration<String> propertyNames = (Enumeration<String>) input.propertyNames();\n        while (propertyNames.hasMoreElements()) {\n            String propertyName = propertyNames.nextElement();\n            output.setProperty(propertyName, input.getProperty(propertyName));\n        }\n        return output;\n    }\n        Properties systemProperties = null;\n        try {\n            systemProperties = System.getProperties();\n        } catch (final SecurityException ex) {\n        }\n        Properties properties = copyProperties(systemProperties);\n        @SuppressWarnings(\"unchecked\") // System property keys and values are always Strings\n        final Map<String, String> propertiesMap = (Map) properties;\n        return new MapStrLookup<String>(propertiesMap);\n",
            "src/test/java/org/apache/commons/lang3/text/StrLookupTest.java": "    @Test\n    public void testSystemPropertiesLookupNotSingleton() {\n        final String osName = \"os.name\";\n        final String originalOsName = System.getProperty(osName);\n        StrLookup properties1 = StrLookup.systemPropertiesLookup();\n        assertEquals(originalOsName, properties1.lookup(osName));\n        final String differentOsName = \"HAL-9000\";\n        System.setProperty(osName, differentOsName);\n        StrLookup properties2 = StrLookup.systemPropertiesLookup();\n        assertEquals(originalOsName, properties1.lookup(osName));\n        assertEquals(differentOsName, properties2.lookup(osName));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/text/StrLookup.java": [
                19,
                21,
                44,
                56,
                57,
                58,
                59,
                61,
                62,
                63,
                65,
                66,
                67,
                68,
                70,
                71,
                85,
                87,
                88,
                89,
                91,
                93,
                94,
                95,
                97
            ],
            "src/test/java/org/apache/commons/lang3/text/StrLookupTest.java": [
                56,
                57,
                58,
                59,
                61,
                62,
                64,
                65,
                66,
                68,
                69,
                70
            ]
        },
        "starts_total_time": 1.2579913139343262,
        "ekstazi_total_time": 5.670908212661743,
        "ekstazi_select_time": 1.3336443901062012,
        "starts_select_time": 1.2334959506988525,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/text/StrLookup.java": "    private static final StrLookup<String> NONE_LOOKUP;\n    private static final StrLookup<String> SYSTEM_PROPERTIES_LOOKUP;\n    static {\n        NONE_LOOKUP = new MapStrLookup<String>(null);\n        StrLookup<String> lookup = null;\n        try {\n            final Map<?, ?> propMap = System.getProperties();\n            @SuppressWarnings(\"unchecked\") // System property keys and values are always Strings\n            final Map<String, String> properties = (Map<String, String>) propMap;\n            lookup = new MapStrLookup<String>(properties);\n        } catch (final SecurityException ex) {\n            lookup = NONE_LOOKUP;\n        }\n        SYSTEM_PROPERTIES_LOOKUP = lookup;\n    }\n        return SYSTEM_PROPERTIES_LOOKUP;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/text/StrLookup.java": [
                42,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                83
            ]
        }
    },
    {
        "commit": "7bb99bcb",
        "prev_commit": "bf6ee5c5",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "FastDatePrinterTimeZonesTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "FastDateParserSDFTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 57,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 91,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 10,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 90,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserSDFTest": 276,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "FastDatePrinterTimeZonesTest": 628,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "TypeUtilsTest",
            "LookupTranslatorTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-935\" type=\"update\" dev=\"britter\" due-to=\"Fabian Lange, Thomas Neidhart\">Possible performance improvement on string escape functions</action>\n+    private final HashSet<Character> prefixSet;\n+        prefixSet = new HashSet<Character>();\n+                this.prefixSet.add(seq[0].charAt(0));\n+        if (!prefixSet.contains(input.charAt(index))) {\n+            return 0;\n+        }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java": "import java.util.HashSet;\n    private final HashSet<Character> prefixSet;\n        prefixSet = new HashSet<Character>();\n                this.prefixSet.add(seq[0].charAt(0));\n        if (!prefixSet.contains(input.charAt(index))) {\n            return 0;\n        }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java": [
                22,
                33,
                49,
                55,
                79,
                81,
                82
            ]
        },
        "starts_total_time": 1.2924606800079346,
        "ekstazi_total_time": 5.598750114440918,
        "ekstazi_select_time": 1.3528656959533691,
        "starts_select_time": 1.2208046913146973,
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {}
    },
    {
        "commit": "1f75a8f7",
        "prev_commit": "a234f033",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/CharUtils.java",
            "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
            "src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/CharUtils.java",
            "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
            "src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "FastDateParserSDFTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 57,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 91,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserSDFTest": 276,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "TypeUtilsTest",
            "StringEscapeUtilsTest",
            "LookupTranslatorTest",
            "UnicodeUnescaperTest",
            "NumericEntityEscaperTest",
            "UnicodeEscaperTest",
            "ArrayUtilsTest",
            "StringUtilsIsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "NumericEntityUnescaperTest",
            "StringUtilsTest",
            "CharUtilsTest",
            "OctalUnescaperTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-877\" type=\"add\" dev=\"britter\" due-to=\"Fabian Lange\">Performance improvements for StringEscapeUtils</action>\n+    private static final char[] HEX_DIGITS = new char[] {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};\n+        StringBuilder sb = new StringBuilder(6);\n+        sb.append(\"\\\\u\");\n+        sb.append(HEX_DIGITS[(ch >> 12) & 15]);\n+        sb.append(HEX_DIGITS[(ch >> 8) & 15]);\n+        sb.append(HEX_DIGITS[(ch >> 4) & 15]);\n+        sb.append(HEX_DIGITS[(ch) & 15]);\n+        return sb.toString();\n+    static final char[] HEX_DIGITS = new char[] {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n+                char c1 = input.charAt(pos);\n+                out.write(c1);\n+                pos++;\n+                if (Character.isHighSurrogate(c1) && pos < len) {\n+                    char c2 = input.charAt(pos);\n+                    if (Character.isLowSurrogate(c2)) {\n+                      out.write(c2);\n+                      pos++;\n+                    }\n+                }\n+          out.write(\"\\\\u\");\n+          out.write(HEX_DIGITS[(codepoint >> 12) & 15]);\n+          out.write(HEX_DIGITS[(codepoint >> 8) & 15]);\n+          out.write(HEX_DIGITS[(codepoint >> 4) & 15]);\n+          out.write(HEX_DIGITS[(codepoint) & 15]);\n+        assertEquals(\"\\\\u004c\", CharUtils.unicodeEscaped('L'));\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/CharUtils.java": "    private static final char[] HEX_DIGITS = new char[] {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};\n        StringBuilder sb = new StringBuilder(6);\n        sb.append(\"\\\\u\");\n        sb.append(HEX_DIGITS[(ch >> 12) & 15]);\n        sb.append(HEX_DIGITS[(ch >> 8) & 15]);\n        sb.append(HEX_DIGITS[(ch >> 4) & 15]);\n        sb.append(HEX_DIGITS[(ch) & 15]);\n        return sb.toString();\n",
            "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java": "    static final char[] HEX_DIGITS = new char[] {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n                char c1 = input.charAt(pos);\n                out.write(c1);\n                pos++;\n                if (Character.isHighSurrogate(c1) && pos < len) {\n                    char c2 = input.charAt(pos);\n                    if (Character.isLowSurrogate(c2)) {\n                      out.write(c2);\n                      pos++;\n                    }\n                }\n",
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java": "          out.write(\"\\\\u\");\n          out.write(HEX_DIGITS[(codepoint >> 12) & 15]);\n          out.write(HEX_DIGITS[(codepoint >> 8) & 15]);\n          out.write(HEX_DIGITS[(codepoint >> 4) & 15]);\n          out.write(HEX_DIGITS[(codepoint) & 15]);\n",
            "src/test/java/org/apache/commons/lang3/CharUtilsTest.java": "        assertEquals(\"\\\\u004c\", CharUtils.unicodeEscaped('L'));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/CharUtils.java": [
                34,
                355,
                356,
                357,
                358,
                359,
                360,
                361
            ],
            "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java": [
                34,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100
            ],
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java": [
                118,
                119,
                120,
                121,
                122
            ],
            "src/test/java/org/apache/commons/lang3/CharUtilsTest.java": [
                197
            ]
        },
        "starts_total_time": 1.2690165042877197,
        "ekstazi_total_time": 6.0073182582855225,
        "ekstazi_select_time": 1.5283894538879395,
        "starts_select_time": 1.276550054550171,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/CharUtils.java": "        if (ch < 0x10) {\n            return \"\\\\u000\" + Integer.toHexString(ch);\n        } else if (ch < 0x100) {\n            return \"\\\\u00\" + Integer.toHexString(ch);\n        } else if (ch < 0x1000) {\n            return \"\\\\u0\" + Integer.toHexString(ch);\n        }\n        return \"\\\\u\" + Integer.toHexString(ch);\n",
            "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java": "                final char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos+= c.length;\n",
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java": "        } else if (codepoint > 0xfff) {\n            out.write(\"\\\\u\" + hex(codepoint));\n        } else if (codepoint > 0xff) {\n            out.write(\"\\\\u0\" + hex(codepoint));\n        } else if (codepoint > 0xf) {\n            out.write(\"\\\\u00\" + hex(codepoint));\n            out.write(\"\\\\u000\" + hex(codepoint));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/CharUtils.java": [
                353,
                354,
                355,
                356,
                357,
                358,
                359,
                360
            ],
            "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java": [
                87,
                88,
                89
            ],
            "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java": [
                117,
                118,
                119,
                120,
                121,
                122,
                124
            ]
        }
    },
    {
        "commit": "38ed1a07",
        "prev_commit": "6eac3468",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 28,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 90,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 4,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 39,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "DiffBuilderTest",
            "DiffResultTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1082\" type=\"add\" dev=\"britter\" due-to=\"Jonathan Baker\">Add option to disable the \"objectsTriviallyEqual\" test in DiffBuilder</action>\n+            final ToStringStyle style, final boolean testTriviallyEqual) {\n+        this.objectsTriviallyEqual = testTriviallyEqual && (lhs == rhs || lhs.equals(rhs));\n+    }\n+    public DiffBuilder(final Object lhs, final Object rhs,\n+            final ToStringStyle style) {\n+            this(lhs, rhs, style, true);\n+    @Test\n+    public void testTriviallyEqualTestDisabled() {\n+        final Matcher<Integer> equalToOne = equalTo(1);\n+        DiffBuilder explicitTestAndNotEqual1 = new DiffBuilder(1, 2, null, false);\n+        explicitTestAndNotEqual1.append(\"letter\", \"X\", \"Y\");\n+        assertThat(explicitTestAndNotEqual1.build().getNumberOfDiffs(), equalToOne);\n+        DiffBuilder explicitTestAndNotEqual2 = new DiffBuilder(1, 1, null, false);\n+        explicitTestAndNotEqual2.append(\"letter\", \"X\", \"Y\");\n+        assertThat(explicitTestAndNotEqual2.build().getNumberOfDiffs(), equalToOne);\n+    }\n+    @Test\n+    public void testTriviallyEqualTestEnabled() {\n+        final Matcher<Integer> equalToZero = equalTo(0);\n+        final Matcher<Integer> equalToOne = equalTo(1);\n+        DiffBuilder implicitTestAndEqual = new DiffBuilder(1, 1, null);\n+        implicitTestAndEqual.append(\"letter\", \"X\", \"Y\");\n+        assertThat(implicitTestAndEqual.build().getNumberOfDiffs(), equalToZero);\n+        DiffBuilder implicitTestAndNotEqual = new DiffBuilder(1, 2, null);\n+        implicitTestAndNotEqual.append(\"letter\", \"X\", \"Y\");\n+        assertThat(implicitTestAndNotEqual.build().getNumberOfDiffs(), equalToOne);\n+        DiffBuilder explicitTestAndEqual = new DiffBuilder(1, 1, null, true);\n+        explicitTestAndEqual.append(\"letter\", \"X\", \"Y\");\n+        assertThat(explicitTestAndEqual.build().getNumberOfDiffs(), equalToZero);\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java": "            final ToStringStyle style, final boolean testTriviallyEqual) {\n        this.objectsTriviallyEqual = testTriviallyEqual && (lhs == rhs || lhs.equals(rhs));\n    }\n    public DiffBuilder(final Object lhs, final Object rhs,\n            final ToStringStyle style) {\n            this(lhs, rhs, style, true);\n",
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": "import static org.hamcrest.core.IsEqual.equalTo;\nimport static org.junit.Assert.assertThat;\nimport org.hamcrest.Matcher;\n    @Test\n    public void testTriviallyEqualTestDisabled() {\n        final Matcher<Integer> equalToOne = equalTo(1);\n        DiffBuilder explicitTestAndNotEqual1 = new DiffBuilder(1, 2, null, false);\n        explicitTestAndNotEqual1.append(\"letter\", \"X\", \"Y\");\n        assertThat(explicitTestAndNotEqual1.build().getNumberOfDiffs(), equalToOne);\n        DiffBuilder explicitTestAndNotEqual2 = new DiffBuilder(1, 1, null, false);\n        explicitTestAndNotEqual2.append(\"letter\", \"X\", \"Y\");\n        assertThat(explicitTestAndNotEqual2.build().getNumberOfDiffs(), equalToOne);\n    }\n    @Test\n    public void testTriviallyEqualTestEnabled() {\n        final Matcher<Integer> equalToZero = equalTo(0);\n        final Matcher<Integer> equalToOne = equalTo(1);\n        DiffBuilder implicitTestAndEqual = new DiffBuilder(1, 1, null);\n        implicitTestAndEqual.append(\"letter\", \"X\", \"Y\");\n        assertThat(implicitTestAndEqual.build().getNumberOfDiffs(), equalToZero);\n        DiffBuilder implicitTestAndNotEqual = new DiffBuilder(1, 2, null);\n        implicitTestAndNotEqual.append(\"letter\", \"X\", \"Y\");\n        assertThat(implicitTestAndNotEqual.build().getNumberOfDiffs(), equalToOne);\n        DiffBuilder explicitTestAndEqual = new DiffBuilder(1, 1, null, true);\n        explicitTestAndEqual.append(\"letter\", \"X\", \"Y\");\n        assertThat(explicitTestAndEqual.build().getNumberOfDiffs(), equalToZero);\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java": [
                103,
                118,
                119,
                147,
                148,
                150
            ],
            "src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java": [
                19,
                22,
                25,
                419,
                420,
                421,
                424,
                425,
                426,
                429,
                431,
                432,
                433,
                435,
                436,
                437,
                438,
                441,
                443,
                444,
                446,
                449,
                450,
                453,
                454,
                455,
                456
            ]
        },
        "starts_total_time": 1.2310373783111572,
        "ekstazi_total_time": 5.491678237915039,
        "ekstazi_select_time": 1.281308650970459,
        "starts_select_time": 1.2718262672424316,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java": "            final ToStringStyle style) {\n        this.objectsTriviallyEqual = (lhs == rhs || lhs.equals(rhs));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java": [
                97,
                111
            ]
        }
    },
    {
        "commit": "bf6ee5c5",
        "prev_commit": "cbeb45b2",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
            "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
            "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "FastDatePrinterTimeZonesTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "FastDateParserSDFTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 57,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 91,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 10,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 90,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 14,
            "FastDateParserSDFTest": 276,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 14,
            "FastDatePrinterTimeZonesTest": 628,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "ExtendedMessageFormatTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-948\" type=\"fix\" dev=\"britter\" due-to=\"Andrey Khobnya\">Exception while using ExtendedMessageFormat and escaping braces</action>\n+                appendQuotedString(pattern, pos, stripCustom);\n+                getQuotedString(pattern, pos);\n+                appendQuotedString(pattern, pos, sb);\n+            final StringBuilder appendTo) {\n+        assert pattern.toCharArray()[pos.getIndex()] == QUOTE : \n+            \"Quoted string must start with quote character\";\n+        if(appendTo != null) {\n+            appendTo.append(QUOTE);\n+        }\n+        next(pos);\n+    private void getQuotedString(final String pattern, final ParsePosition pos) {\n+        appendQuotedString(pattern, pos, null);\n+    @Test\n+    public void testEscapedBraces_LANG_948() {\n+        final String pattern = \"Message without placeholders '{}'\";\n+        final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n+        assertEquals(\"Message without placeholders {}\", emf.format(new Object[] {\"DUMMY\"}));\n+        final String pattern2 = \"Message with placeholder ''{0}''\";\n+        final ExtendedMessageFormat emf2 = new ExtendedMessageFormat(pattern2, registry);\n+        assertEquals(\"Message with placeholder 'DUMMY'\", emf2.format(new Object[] {\"DUMMY\"}));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java": "                appendQuotedString(pattern, pos, stripCustom);\n                getQuotedString(pattern, pos);\n                appendQuotedString(pattern, pos, sb);\n            final StringBuilder appendTo) {\n        assert pattern.toCharArray()[pos.getIndex()] == QUOTE : \n            \"Quoted string must start with quote character\";\n        if(appendTo != null) {\n            appendTo.append(QUOTE);\n        }\n        next(pos);\n    private void getQuotedString(final String pattern, final ParsePosition pos) {\n        appendQuotedString(pattern, pos, null);\n",
            "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java": "    @Test\n    public void testEscapedBraces_LANG_948() {\n        final String pattern = \"Message without placeholders '{}'\";\n        final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n        assertEquals(\"Message without placeholders {}\", emf.format(new Object[] {\"DUMMY\"}));\n        final String pattern2 = \"Message with placeholder ''{0}''\";\n        final ExtendedMessageFormat emf2 = new ExtendedMessageFormat(pattern2, registry);\n        assertEquals(\"Message with placeholder 'DUMMY'\", emf2.format(new Object[] {\"DUMMY\"}));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java": [
                160,
                387,
                416,
                477,
                478,
                479,
                482,
                483,
                484,
                485,
                510,
                511
            ],
            "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java": [
                95,
                96,
                98,
                99,
                100,
                103,
                104,
                105,
                106
            ]
        },
        "starts_total_time": 1.227607011795044,
        "ekstazi_total_time": 6.121713399887085,
        "ekstazi_select_time": 1.3567521572113037,
        "starts_select_time": 1.272110939025879,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java": "                appendQuotedString(pattern, pos, stripCustom, true);\n                getQuotedString(pattern, pos, false);\n                appendQuotedString(pattern, pos, sb, false);\n            final StringBuilder appendTo, final boolean escapingOn) {\n        if (escapingOn && c[start] == QUOTE) {\n            next(pos);\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                        QUOTE);\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n                continue;\n            }\n    private void getQuotedString(final String pattern, final ParsePosition pos,\n            final boolean escapingOn) {\n        appendQuotedString(pattern, pos, null, escapingOn);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java": [
                160,
                387,
                416,
                478,
                481,
                482,
                483,
                484,
                487,
                488,
                489,
                490,
                491,
                492,
                493,
                514,
                515,
                516
            ]
        }
    },
    {
        "commit": "7c8443f6",
        "prev_commit": "6ec90c45",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "CharSequenceUtilsTest",
            "StrBuilderTest",
            "UnicodeUnescaperTest",
            "FastDateFormatTest",
            "MutableShortTest",
            "FastDateParserTest",
            "ImmutableTripleTest",
            "ReflectionToStringBuilderConcurrencyTest",
            "MutableObjectTest",
            "StringEscapeUtilsTest",
            "BitFieldTest",
            "DefaultToStringStyleTest",
            "MultiBackgroundInitializerTest",
            "LazyInitializerTest",
            "AtomicInitializerTest",
            "StrBuilderAppendInsertTest",
            "IEEE754rUtilsTest",
            "SimpleToStringStyleTest",
            "EntityArraysTest",
            "NumericEntityEscaperTest",
            "JavaVersionTest",
            "NotImplementedExceptionTest",
            "StringUtilsTrimEmptyTest",
            "CharUtilsTest",
            "StrMatcherTest",
            "BackgroundInitializerTest",
            "MutableIntTest",
            "StrLookupTest",
            "ClassPathUtilsTest",
            "ContextedExceptionTest",
            "StopWatchTest",
            "FormattableUtilsTest",
            "FastDateFormat_ParserTest",
            "ReflectionToStringBuilderExcludeTest",
            "AtomicSafeInitializerTest",
            "LookupTranslatorTest",
            "BooleanUtilsTest",
            "UnicodeEscaperTest",
            "SerializationUtilsTest",
            "DateUtilsTest",
            "MutableDoubleTest",
            "ArrayUtilsRemoveTest",
            "ConstructorUtilsTest",
            "CompositeFormatTest",
            "ArrayUtilsAddTest",
            "ConcurrentUtilsTest",
            "FractionTest",
            "NumberUtilsTest",
            "StringUtilsStartsEndsWithTest",
            "EqualsBuilderTest",
            "ArrayUtilsRemoveMultipleTest",
            "ToStringStyleTest",
            "ObjectUtilsTest",
            "ConversionTest",
            "DefaultExceptionContextTest",
            "DateFormatUtilsTest",
            "TripleTest",
            "EventListenerSupportTest",
            "MutableByteTest",
            "StrSubstitutorTest",
            "InheritanceUtilsTest",
            "ExtendedMessageFormatTest",
            "ExceptionUtilsTest",
            "StringUtilsTest",
            "MultiLineToStringStyleTest",
            "ToStringBuilderTest",
            "BasicThreadFactoryTest",
            "StrTokenizerTest",
            "DiffResultTest",
            "SystemUtilsTest",
            "HashCodeBuilderTest",
            "CallableBackgroundInitializerTest",
            "StringUtilsIsTest",
            "ToStringStyleConcurrencyTest",
            "ReflectionToStringBuilderMutateInspectConcurrencyTest",
            "MutableTripleTest",
            "MultilineRecursiveToStringStyleTest",
            "EnumUtilsTest",
            "CharSetUtilsTest",
            "HashSetvBitSetTest",
            "ContextedRuntimeExceptionTest",
            "StandardToStringStyleTest",
            "DateUtilsFragmentTest",
            "LocaleUtilsTest",
            "PairTest",
            "TypeUtilsTest",
            "EventUtilsTest",
            "RangeTest",
            "ConstantInitializerTest",
            "AnnotationUtilsTest",
            "StringUtilsSubstringTest",
            "OctalUnescaperTest",
            "NoFieldNamesToStringStyleTest",
            "ArrayUtilsTest",
            "RandomStringUtilsTest",
            "RandomUtilsTest",
            "NumericEntityUnescaperTest",
            "TypeLiteralTest",
            "MutableBooleanTest",
            "JsonToStringStyleTest",
            "MutableFloatTest",
            "FastDateParserSDFTest",
            "DiffBuilderTest",
            "DiffTest",
            "DurationFormatUtilsTest",
            "ImmutablePairTest",
            "CharEncodingTest",
            "CharRangeTest",
            "FastDateFormat_PrinterTest",
            "FieldUtilsTest",
            "ClassUtilsTest",
            "CompareToBuilderTest",
            "StringUtilsEqualsIndexOfTest",
            "TimedSemaphoreTest",
            "DateUtilsRoundingTest",
            "ValidateTest",
            "MutableLongTest",
            "FastDatePrinterTest",
            "MutablePairTest",
            "RecursiveToStringStyleTest",
            "HashCodeBuilderAndEqualsBuilderTest",
            "ShortPrefixToStringStyleTest",
            "WordUtilsTest",
            "UnicodeUnpairedSurrogateRemoverTest",
            "MethodUtilsTest",
            "NoClassNameToStringStyleTest",
            "CharSetTest"
        ],
        "tests_cases_num": {
            "AnnotationUtilsTest": 10,
            "ArrayUtilsAddTest": 13,
            "ArrayUtilsRemoveMultipleTest": 55,
            "ArrayUtilsRemoveTest": 19,
            "ArrayUtilsTest": 205,
            "BitFieldTest": 15,
            "BooleanUtilsTest": 72,
            "CharEncodingTest": 6,
            "CharRangeTest": 16,
            "CharSequenceUtilsTest": 2,
            "CharSetTest": 14,
            "CharSetUtilsTest": 11,
            "CharUtilsTest": 24,
            "ClassPathUtilsTest": 13,
            "ClassUtilsTest": 53,
            "ConversionTest": 42,
            "EnumUtilsTest": 34,
            "HashSetvBitSetTest": 2,
            "JavaVersionTest": 3,
            "LocaleUtilsTest": 15,
            "NotImplementedExceptionTest": 1,
            "ObjectUtilsTest": 36,
            "RandomStringUtilsTest": 11,
            "RandomUtilsTest": 23,
            "RangeTest": 24,
            "SerializationUtilsTest": 26,
            "StringEscapeUtilsTest": 28,
            "StringUtilsEqualsIndexOfTest": 50,
            "StringUtilsIsTest": 8,
            "StringUtilsStartsEndsWithTest": 6,
            "StringUtilsSubstringTest": 14,
            "StringUtilsTest": 124,
            "StringUtilsTrimEmptyTest": 15,
            "SystemUtilsTest": 11,
            "ValidateTest": 63,
            "CompareToBuilderTest": 48,
            "DefaultToStringStyleTest": 8,
            "DiffBuilderTest": 30,
            "DiffResultTest": 9,
            "DiffTest": 4,
            "EqualsBuilderTest": 48,
            "HashCodeBuilderAndEqualsBuilderTest": 4,
            "HashCodeBuilderTest": 44,
            "JsonToStringStyleTest": 9,
            "MultiLineToStringStyleTest": 8,
            "MultilineRecursiveToStringStyleTest": 10,
            "NoClassNameToStringStyleTest": 8,
            "NoFieldNamesToStringStyleTest": 8,
            "RecursiveToStringStyleTest": 8,
            "ReflectionToStringBuilderConcurrencyTest": 3,
            "ReflectionToStringBuilderExcludeTest": 11,
            "ReflectionToStringBuilderMutateInspectConcurrencyTest": 1,
            "ShortPrefixToStringStyleTest": 8,
            "SimpleToStringStyleTest": 8,
            "StandardToStringStyleTest": 8,
            "ToStringBuilderTest": 74,
            "ToStringStyleConcurrencyTest": 3,
            "ToStringStyleTest": 12,
            "AtomicInitializerTest": 3,
            "AtomicSafeInitializerTest": 4,
            "BackgroundInitializerTest": 15,
            "BasicThreadFactoryTest": 15,
            "CallableBackgroundInitializerTest": 4,
            "ConcurrentUtilsTest": 40,
            "ConstantInitializerTest": 7,
            "LazyInitializerTest": 3,
            "MultiBackgroundInitializerTest": 17,
            "TimedSemaphoreTest": 15,
            "EventListenerSupportTest": 9,
            "EventUtilsTest": 8,
            "ContextedExceptionTest": 14,
            "ContextedRuntimeExceptionTest": 14,
            "DefaultExceptionContextTest": 8,
            "ExceptionUtilsTest": 28,
            "FractionTest": 25,
            "IEEE754rUtilsTest": 3,
            "NumberUtilsTest": 91,
            "MutableBooleanTest": 9,
            "MutableByteTest": 17,
            "MutableDoubleTest": 18,
            "MutableFloatTest": 18,
            "MutableIntTest": 17,
            "MutableLongTest": 17,
            "MutableObjectTest": 5,
            "MutableShortTest": 14,
            "ConstructorUtilsTest": 7,
            "FieldUtilsTest": 64,
            "InheritanceUtilsTest": 9,
            "MethodUtilsTest": 23,
            "TypeLiteralTest": 4,
            "TypeUtilsTest": 19,
            "CompositeFormatTest": 2,
            "ExtendedMessageFormatTest": 9,
            "FormattableUtilsTest": 5,
            "StrBuilderAppendInsertTest": 51,
            "StrBuilderTest": 89,
            "StrLookupTest": 5,
            "StrMatcherTest": 14,
            "StrSubstitutorTest": 40,
            "StrTokenizerTest": 55,
            "WordUtilsTest": 12,
            "EntityArraysTest": 3,
            "LookupTranslatorTest": 2,
            "NumericEntityEscaperTest": 4,
            "NumericEntityUnescaperTest": 3,
            "OctalUnescaperTest": 1,
            "UnicodeEscaperTest": 3,
            "UnicodeUnescaperTest": 3,
            "UnicodeUnpairedSurrogateRemoverTest": 2,
            "DateFormatUtilsTest": 10,
            "DateUtilsFragmentTest": 57,
            "DateUtilsRoundingTest": 22,
            "DateUtilsTest": 38,
            "DurationFormatUtilsTest": 25,
            "FastDateFormatTest": 14,
            "FastDateFormat_ParserTest": 30,
            "FastDateFormat_PrinterTest": 15,
            "FastDateParserSDFTest": 138,
            "FastDateParserTest": 30,
            "FastDatePrinterTest": 15,
            "StopWatchTest": 8,
            "ImmutablePairTest": 6,
            "ImmutableTripleTest": 6,
            "MutablePairTest": 8,
            "MutableTripleTest": 8,
            "PairTest": 9,
            "TripleTest": 10
        },
        "ekstazi_test_list": [
            "FastDateFormatTest",
            "FastDateParserSDFTest",
            "FastDateParserTest",
            "FastDateFormat_ParserTest",
            "DateFormatUtilsTest",
            "FastDatePrinterTest",
            "FastDateFormat_PrinterTest"
        ],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <action issue=\"LANG-1089\" type=\"fix\" dev=\"sebb\">FastDateParser does not handle excess hours as per SimpleDateFormat</action>\n+            return HOUR_OF_DAY_STRATEGY;\n+            return HOUR12_STRATEGY;\n+            return HOUR24_OF_DAY_STRATEGY;\n+    private static final Strategy HOUR24_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {\n+            return iValue == 24 ? 0 : iValue;\n+    private static final Strategy HOUR12_STRATEGY = new NumberStrategy(Calendar.HOUR) {\n+            return iValue == 12 ? 0 : iValue;\n+                { \"HH\", \"00\",    Locale.UK, true}, // Hour in day (0-23)\n+                { \"KK\", \"00\",    Locale.UK, true}, // Hour in am/pm (0-11)\n+                { \"hh\", \"00\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n+                { \"kk\", \"00\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n+                { \"HH\", \"01\",    Locale.UK, true}, // Hour in day (0-23)\n+                { \"KK\", \"01\",    Locale.UK, true}, // Hour in am/pm (0-11)\n+                { \"hh\", \"01\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n+                { \"kk\", \"01\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n+                { \"HH\", \"11\",    Locale.UK, true}, // Hour in day (0-23)\n+                { \"KK\", \"11\",    Locale.UK, true}, // Hour in am/pm (0-11)\n+                { \"hh\", \"11\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n+                { \"kk\", \"11\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n+                { \"HH\", \"12\",    Locale.UK, true}, // Hour in day (0-23)\n+                { \"KK\", \"12\",    Locale.UK, true}, // Hour in am/pm (0-11)\n+                { \"hh\", \"12\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n+                { \"kk\", \"12\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n+                { \"HH\", \"13\",    Locale.UK, true}, // Hour in day (0-23)\n+                { \"KK\", \"13\",    Locale.UK, true}, // Hour in am/pm (0-11)\n+                { \"hh\", \"13\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n+                { \"kk\", \"13\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n+                { \"HH\", \"23\",    Locale.UK, true}, // Hour in day (0-23)\n+                { \"KK\", \"23\",    Locale.UK, true}, // Hour in am/pm (0-11)\n+                { \"hh\", \"23\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n+                { \"kk\", \"23\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n+                { \"HH\", \"24\",    Locale.UK, true}, // Hour in day (0-23)\n+                { \"KK\", \"24\",    Locale.UK, true}, // Hour in am/pm (0-11)\n+                { \"hh\", \"24\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n+                { \"kk\", \"24\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n+                { \"HH\", \"25\",    Locale.UK, true}, // Hour in day (0-23)\n+                { \"KK\", \"25\",    Locale.UK, true}, // Hour in am/pm (0-11)\n+                { \"hh\", \"25\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n+                { \"kk\", \"25\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n+                { \"HH\", \"48\",    Locale.UK, true}, // Hour in day (0-23)\n+                { \"KK\", \"48\",    Locale.UK, true}, // Hour in am/pm (0-11)\n+                { \"hh\", \"48\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n+                { \"kk\", \"48\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": "            return HOUR_OF_DAY_STRATEGY;\n            return HOUR12_STRATEGY;\n            return HOUR24_OF_DAY_STRATEGY;\n    private static final Strategy HOUR24_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {\n            return iValue == 24 ? 0 : iValue;\n    private static final Strategy HOUR12_STRATEGY = new NumberStrategy(Calendar.HOUR) {\n            return iValue == 12 ? 0 : iValue;\n",
            "src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java": "                { \"HH\", \"00\",    Locale.UK, true}, // Hour in day (0-23)\n                { \"KK\", \"00\",    Locale.UK, true}, // Hour in am/pm (0-11)\n                { \"hh\", \"00\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n                { \"kk\", \"00\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n                { \"HH\", \"01\",    Locale.UK, true}, // Hour in day (0-23)\n                { \"KK\", \"01\",    Locale.UK, true}, // Hour in am/pm (0-11)\n                { \"hh\", \"01\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n                { \"kk\", \"01\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n                { \"HH\", \"11\",    Locale.UK, true}, // Hour in day (0-23)\n                { \"KK\", \"11\",    Locale.UK, true}, // Hour in am/pm (0-11)\n                { \"hh\", \"11\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n                { \"kk\", \"11\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n                { \"HH\", \"12\",    Locale.UK, true}, // Hour in day (0-23)\n                { \"KK\", \"12\",    Locale.UK, true}, // Hour in am/pm (0-11)\n                { \"hh\", \"12\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n                { \"kk\", \"12\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n                { \"HH\", \"13\",    Locale.UK, true}, // Hour in day (0-23)\n                { \"KK\", \"13\",    Locale.UK, true}, // Hour in am/pm (0-11)\n                { \"hh\", \"13\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n                { \"kk\", \"13\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n                { \"HH\", \"23\",    Locale.UK, true}, // Hour in day (0-23)\n                { \"KK\", \"23\",    Locale.UK, true}, // Hour in am/pm (0-11)\n                { \"hh\", \"23\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n                { \"kk\", \"23\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n                { \"HH\", \"24\",    Locale.UK, true}, // Hour in day (0-23)\n                { \"KK\", \"24\",    Locale.UK, true}, // Hour in am/pm (0-11)\n                { \"hh\", \"24\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n                { \"kk\", \"24\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n                { \"HH\", \"25\",    Locale.UK, true}, // Hour in day (0-23)\n                { \"KK\", \"25\",    Locale.UK, true}, // Hour in am/pm (0-11)\n                { \"hh\", \"25\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n                { \"kk\", \"25\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n                { \"HH\", \"48\",    Locale.UK, true}, // Hour in day (0-23)\n                { \"KK\", \"48\",    Locale.UK, true}, // Hour in am/pm (0-11)\n                { \"hh\", \"48\",    Locale.UK, true}, // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0\n                { \"kk\", \"48\",    Locale.UK, true}, // Hour in day (1-24), i.e. midnight is 24, not 0\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": [
                490,
                504,
                506,
                862,
                865,
                868,
                871
            ],
            "src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java": [
                43,
                44,
                45,
                46,
                48,
                49,
                50,
                51,
                53,
                54,
                55,
                56,
                58,
                59,
                60,
                61,
                63,
                64,
                65,
                66,
                68,
                69,
                70,
                71,
                73,
                74,
                75,
                76,
                78,
                79,
                80,
                81,
                83,
                84,
                85,
                86
            ]
        },
        "starts_total_time": 1.2540769577026367,
        "ekstazi_total_time": 8.21642804145813,
        "ekstazi_select_time": 1.5031566619873047,
        "starts_select_time": 1.2966206073760986,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": "            return MODULO_HOUR_OF_DAY_STRATEGY;\n            return MODULO_HOUR_STRATEGY;\n            return HOUR_OF_DAY_STRATEGY;\n    private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {\n            return iValue%24;\n    private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {\n            return iValue%12;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/lang3/time/FastDateParser.java": [
                490,
                504,
                506,
                862,
                865,
                868,
                871
            ]
        }
    }
]