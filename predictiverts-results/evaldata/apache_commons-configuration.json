[
    {
        "commit": "4c55341a",
        "prev_commit": "619aa9bf",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestXMLListHandling",
            "TestPeriodicReloadingTrigger",
            "TestConfigurationPropertySource",
            "TestPatternSubtreeConfiguration",
            "TestBaseNullConfiguration",
            "TestNonStringProperties",
            "TestNodeUpdateData",
            "TestFileBasedBuilderParameters",
            "TestReloadingCombinedConfigurationBuilderFileBased",
            "TestCombinedConfigurationBuilder",
            "TestCombinedConfigurationBuilderVFS",
            "TestInMemoryNodeModel",
            "TestServletRequestConfiguration",
            "TestJNDIConfiguration",
            "TestDefaultBeanFactory",
            "TestCombinedBeanDeclaration",
            "TestNodeSelector",
            "TestJndiBuilderParametersImpl",
            "TestEnvironmentLookup",
            "TestXPathContextFactory",
            "TestConfigurationUtils",
            "TestBasicConfigurationBuilder",
            "TestInMemoryNodeModelTrackedNodes",
            "TestQueryResult",
            "TestNodeAddData",
            "TestParameters",
            "TestMultiFileBuilderParametersImpl",
            "TestDataConfiguration",
            "TestFileBasedConfigurationBuilder",
            "TestFileHandlerReloadingDetector",
            "TestOverrideCombiner",
            "TestHierarchicalConfiguration",
            "TestConstantLookup",
            "TestCombinedLocationStrategy",
            "TestDisabledListDelimiterHandler",
            "TestManagedReloadingDetector",
            "TestHomeDirectoryLocationStrategy",
            "TestPropertiesConfigurationEvents",
            "TestEvent",
            "TestPropertiesBuilderParametersImpl",
            "TestHierarchicalXMLConfiguration",
            "TestXMLDocumentHelper",
            "TestCombinedConfiguration",
            "TestBasicBuilderParameters",
            "TestImmutableNode",
            "TestFileSystemLocationStrategy",
            "TestConfigurationMap",
            "TestDefaultExpressionEngineSymbols",
            "TestUnionCombiner",
            "TestConfigurationLogger",
            "TestMultiFileConfigurationBuilder",
            "TestReloadingMultiFileConfigurationBuilder",
            "TestXMLPropertyListConfigurationEvents",
            "TestEqualBehaviour",
            "TestReloadingBuilderSupportListener",
            "TestHierarchicalConfigurationEvents",
            "TestDummyLookup",
            "TestAbsoluteNameLocationStrategy",
            "TestConfigurationNodeIteratorChildren",
            "TestCompositeConfigurationNonStringProperties",
            "TestConfigurationConverter",
            "TestJNDIEnvironmentValues",
            "TestDefaultParametersManager",
            "TestNullJNDIEnvironmentValues",
            "TestXMLConfigurationEvents",
            "TestDefaultFileSystem",
            "TestServletContextConfiguration",
            "TestMapConfiguration",
            "TestNullCompositeConfiguration",
            "TestEventListenerParameters",
            "TestXMLBuilderParametersImpl",
            "TestAppletConfiguration",
            "TestTrackedNodeHandler",
            "TestConfigurationPropertiesFactoryBean",
            "TestDatabaseBuilderParametersImpl",
            "TestInMemoryNodeModelReferences",
            "TestDatabaseConfigurationEvents",
            "TestBeanHelper",
            "TestConfigurationNodePointerFactory",
            "TestConfigurationEventTypes",
            "TestBaseConfigurationBuilderProvider",
            "TestXMLPropertiesConfiguration",
            "TestConfigurationInterpolator",
            "TestTreeData",
            "TestThreesomeConfiguration",
            "TestYAMLConfiguration",
            "TestINIConfiguration",
            "TestMapConfigurationEvents",
            "TestBasicConfigurationBuilderEvents",
            "TestMultiWrapDynaBean",
            "TestHierarchicalBuilderParametersImpl",
            "TestSubsetConfiguration",
            "TestPropertyListConfiguration",
            "TestVFSFileHandlerReloadingDetector",
            "TestDefaultConfigurationKey",
            "TestInterpolatorSpecification",
            "TestDefaultListDelimiterHandler",
            "TestConfigurationLookup",
            "TestBaseHierarchicalConfigurationSynchronization",
            "TestDefaultExpressionEngine",
            "TestTrackedNodeModel",
            "TestSystemConfiguration",
            "TestFileExtensionConfigurationBuilderProvider",
            "TestExprLookup",
            "TestConfigurationSet",
            "TestCatalogResolver",
            "TestBaseConfiguration",
            "TestBuilderConfigurationWrapperFactory",
            "TestProvidedURLLocationStrategy",
            "TestConfigurationIteratorAttributes",
            "TestBasePathLocationStrategy",
            "TestConfigurationAttributePointer",
            "TestServletConfiguration",
            "TestConfigurationDynaBean",
            "TestReloadingController",
            "TestReadWriteSynchronizer",
            "TestClasspathLocationStrategy",
            "TestCombinedBuilderParametersImpl",
            "TestFileHandler",
            "TestDefaultReloadingDetectorFactory",
            "TestReloadingFileBasedConfigurationBuilder",
            "TestEventSource",
            "TestEnvironmentConfiguration",
            "TestNodeNameMatchers",
            "TestBaseConfigurationXMLReader",
            "TestConstructorArg",
            "TestDefaultConversionHandler",
            "TestXMLConfiguration_605",
            "TestXMLPropertyListConfiguration",
            "TestFileLocatorUtils",
            "TestPropertyListParser",
            "TestNodeTreeWalker",
            "TestPropertiesConfigurationLayout",
            "TestSubsetConfigurationEvents",
            "TestConfigurations",
            "TestSystemPropertiesLookup",
            "TestPropertyListConfigurationEvents",
            "TestAbstractConfigurationSynchronization",
            "TestEventListenerList",
            "TestConfigurationNodePointer",
            "TestMergeCombiner",
            "TestServletFilterConfiguration",
            "TestAutoSaveListener",
            "TestAbstractHierarchicalConfiguration",
            "TestEqualsProperty",
            "TestCombinedReloadingController",
            "TestDatabaseConfiguration",
            "TestHierarchicalConfigurationXMLReader",
            "TestXPathExpressionEngine",
            "TestPropertiesSequence",
            "TestXPathExpressionEngineInConfig",
            "TestConfigurationDynaBeanXMLConfig",
            "TestNodeHandlerDecorator",
            "TestJSONConfiguration",
            "TestConfigurationDeclaration",
            "TestXMLConfiguration",
            "TestPropertiesConfiguration",
            "TestFileLocator",
            "TestCompositeConfiguration",
            "TestPropertyConverter",
            "TestStrictConfigurationComparator",
            "TestSubnodeConfiguration",
            "TestXMLBeanDeclaration",
            "TestAbstractConfigurationBasicFeatures",
            "TestDynamicCombinedConfiguration",
            "TestCopyObjectDefaultHandler",
            "TestImmutableConfiguration",
            "TestReloadingCombinedConfigurationBuilder",
            "TestEventType"
        ],
        "tests_cases_num": {
            "TestAbstractConfigurationBasicFeatures": 64,
            "TestAbstractConfigurationSynchronization": 19,
            "TestAbstractHierarchicalConfiguration": 54,
            "TestBaseConfiguration": 60,
            "TestBaseConfigurationXMLReader": 4,
            "TestBaseHierarchicalConfigurationSynchronization": 14,
            "TestBaseNullConfiguration": 37,
            "TestCatalogResolver": 5,
            "TestCombinedConfiguration": 58,
            "TestCompositeConfiguration": 52,
            "TestCompositeConfigurationNonStringProperties": 23,
            "TestConfigurationConverter": 6,
            "TestConfigurationLookup": 5,
            "TestConfigurationMap": 1,
            "TestConfigurationSet": 2,
            "TestConfigurationUtils": 36,
            "TestDataConfiguration": 59,
            "TestDatabaseConfiguration": 36,
            "TestDynamicCombinedConfiguration": 12,
            "TestEnvironmentConfiguration": 5,
            "TestEqualBehaviour": 7,
            "TestEqualsProperty": 1,
            "TestHierarchicalConfiguration": 37,
            "TestHierarchicalConfigurationXMLReader": 1,
            "TestHierarchicalXMLConfiguration": 10,
            "TestINIConfiguration": 65,
            "TestImmutableConfiguration": 10,
            "TestJNDIConfiguration": 27,
            "TestJNDIEnvironmentValues": 12,
            "TestJSONConfiguration": 10,
            "TestMapConfiguration": 20,
            "TestNonStringProperties": 23,
            "TestNullCompositeConfiguration": 23,
            "TestNullJNDIEnvironmentValues": 12,
            "TestPatternSubtreeConfiguration": 3,
            "TestPropertiesConfiguration": 75,
            "TestPropertiesConfigurationLayout": 38,
            "TestPropertiesSequence": 3,
            "TestStrictConfigurationComparator": 2,
            "TestSubnodeConfiguration": 24,
            "TestSubsetConfiguration": 21,
            "TestSystemConfiguration": 5,
            "TestThreesomeConfiguration": 3,
            "TestXMLConfiguration": 94,
            "TestXMLConfiguration_605": 8,
            "TestXMLDocumentHelper": 11,
            "TestXMLListHandling": 5,
            "TestXMLPropertiesConfiguration": 4,
            "TestYAMLConfiguration": 9,
            "TestBeanHelper": 27,
            "TestCombinedBeanDeclaration": 12,
            "TestConfigurationDynaBean": 42,
            "TestConfigurationDynaBeanXMLConfig": 42,
            "TestConstructorArg": 6,
            "TestDefaultBeanFactory": 11,
            "TestXMLBeanDeclaration": 28,
            "TestAutoSaveListener": 7,
            "TestBasicBuilderParameters": 34,
            "TestBasicConfigurationBuilder": 27,
            "TestBasicConfigurationBuilderEvents": 11,
            "TestBuilderConfigurationWrapperFactory": 8,
            "TestCopyObjectDefaultHandler": 4,
            "TestDatabaseBuilderParametersImpl": 8,
            "TestDefaultParametersManager": 9,
            "TestDefaultReloadingDetectorFactory": 2,
            "TestEventListenerParameters": 4,
            "TestFileBasedBuilderParameters": 24,
            "TestFileBasedConfigurationBuilder": 24,
            "TestHierarchicalBuilderParametersImpl": 3,
            "TestJndiBuilderParametersImpl": 4,
            "TestPropertiesBuilderParametersImpl": 6,
            "TestReloadingBuilderSupportListener": 2,
            "TestReloadingFileBasedConfigurationBuilder": 9,
            "TestXMLBuilderParametersImpl": 8,
            "TestBaseConfigurationBuilderProvider": 9,
            "TestCombinedBuilderParametersImpl": 27,
            "TestCombinedConfigurationBuilder": 51,
            "TestCombinedConfigurationBuilderVFS": 52,
            "TestConfigurationDeclaration": 5,
            "TestFileExtensionConfigurationBuilderProvider": 10,
            "TestMultiFileBuilderParametersImpl": 7,
            "TestMultiFileConfigurationBuilder": 16,
            "TestMultiWrapDynaBean": 13,
            "TestReloadingCombinedConfigurationBuilder": 5,
            "TestReloadingCombinedConfigurationBuilderFileBased": 4,
            "TestReloadingMultiFileConfigurationBuilder": 6,
            "TestConfigurations": 32,
            "TestParameters": 19,
            "TestDefaultConversionHandler": 23,
            "TestDefaultListDelimiterHandler": 13,
            "TestDisabledListDelimiterHandler": 13,
            "TestPropertyConverter": 26,
            "TestConfigurationEventTypes": 19,
            "TestDatabaseConfigurationEvents": 8,
            "TestEvent": 3,
            "TestEventListenerList": 31,
            "TestEventSource": 19,
            "TestEventType": 1,
            "TestHierarchicalConfigurationEvents": 13,
            "TestMapConfigurationEvents": 8,
            "TestPropertiesConfigurationEvents": 8,
            "TestSubsetConfigurationEvents": 8,
            "TestXMLConfigurationEvents": 13,
            "TestConfigurationInterpolator": 41,
            "TestConstantLookup": 8,
            "TestDummyLookup": 1,
            "TestEnvironmentLookup": 2,
            "TestExprLookup": 6,
            "TestInterpolatorSpecification": 10,
            "TestSystemPropertiesLookup": 2,
            "TestAbsoluteNameLocationStrategy": 4,
            "TestBasePathLocationStrategy": 4,
            "TestClasspathLocationStrategy": 3,
            "TestCombinedLocationStrategy": 7,
            "TestConfigurationLogger": 16,
            "TestDefaultFileSystem": 3,
            "TestFileHandler": 85,
            "TestFileLocator": 8,
            "TestFileLocatorUtils": 36,
            "TestFileSystemLocationStrategy": 1,
            "TestHomeDirectoryLocationStrategy": 6,
            "TestProvidedURLLocationStrategy": 2,
            "TestPropertyListConfiguration": 23,
            "TestPropertyListConfigurationEvents": 10,
            "TestPropertyListParser": 4,
            "TestXMLPropertyListConfiguration": 24,
            "TestXMLPropertyListConfigurationEvents": 10,
            "TestCombinedReloadingController": 8,
            "TestFileHandlerReloadingDetector": 11,
            "TestManagedReloadingDetector": 3,
            "TestPeriodicReloadingTrigger": 9,
            "TestReloadingController": 8,
            "TestVFSFileHandlerReloadingDetector": 6,
            "TestConfigurationPropertiesFactoryBean": 10,
            "TestConfigurationPropertySource": 1,
            "TestReadWriteSynchronizer": 3,
            "TestDefaultConfigurationKey": 33,
            "TestDefaultExpressionEngine": 38,
            "TestDefaultExpressionEngineSymbols": 6,
            "TestImmutableNode": 35,
            "TestInMemoryNodeModel": 39,
            "TestInMemoryNodeModelReferences": 12,
            "TestInMemoryNodeModelTrackedNodes": 43,
            "TestMergeCombiner": 8,
            "TestNodeAddData": 4,
            "TestNodeHandlerDecorator": 25,
            "TestNodeNameMatchers": 6,
            "TestNodeSelector": 12,
            "TestNodeTreeWalker": 8,
            "TestNodeUpdateData": 7,
            "TestOverrideCombiner": 9,
            "TestQueryResult": 9,
            "TestTrackedNodeHandler": 2,
            "TestTrackedNodeModel": 13,
            "TestTreeData": 25,
            "TestUnionCombiner": 6,
            "TestConfigurationAttributePointer": 13,
            "TestConfigurationIteratorAttributes": 6,
            "TestConfigurationNodeIteratorChildren": 13,
            "TestConfigurationNodePointer": 7,
            "TestConfigurationNodePointerFactory": 8,
            "TestXPathContextFactory": 1,
            "TestXPathExpressionEngine": 34,
            "TestXPathExpressionEngineInConfig": 6,
            "TestAppletConfiguration": 12,
            "TestServletConfiguration": 12,
            "TestServletContextConfiguration": 12,
            "TestServletFilterConfiguration": 12,
            "TestServletRequestConfiguration": 13
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+      <action dev=\"ggregory\" type=\"fix\" issue=\"CONFIGURATION-727\">\n+        org.apache.commons.configuration2.DatabaseConfiguration never closes result sets.\n+      </action>\n+                try (final ResultSet rs =\n+                        openResultSet(String.format(SQL_GET_PROPERTY,\n+                                table, keyColumn), true, key))\n+                    while (rs.next())\n+                        final Object value = extractPropertyValue(rs);\n+                        for (final Object o : getListDelimiterHandler().parse(value))\n+                        {\n+                            results.add(o);\n+                        }\n+                try (final ResultSet rs = openResultSet(String.format(\n+                        SQL_IS_EMPTY, table), true))\n+                {\n+                    return rs.next() ? Integer.valueOf(rs.getInt(1)) : null;\n+                }\n+                try (final ResultSet rs = openResultSet(\n+                        String.format(SQL_GET_PROPERTY, table, keyColumn), true, key))\n+                {\n+                    return rs.next();\n+                }\n+                try (final ResultSet rs = openResultSet(String.format(\n+                        SQL_GET_KEYS, keyColumn, table), true))\n+                    while (rs.next())\n+                    {\n+                        keys.add(rs.getString(1));\n+                    }\n+                    return keys;\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": "                try (final ResultSet rs =\n                        openResultSet(String.format(SQL_GET_PROPERTY,\n                                table, keyColumn), true, key))\n                    while (rs.next())\n                        final Object value = extractPropertyValue(rs);\n                        for (final Object o : getListDelimiterHandler().parse(value))\n                        {\n                            results.add(o);\n                        }\n                try (final ResultSet rs = openResultSet(String.format(\n                        SQL_IS_EMPTY, table), true))\n                {\n                    return rs.next() ? Integer.valueOf(rs.getInt(1)) : null;\n                }\n                try (final ResultSet rs = openResultSet(\n                        String.format(SQL_GET_PROPERTY, table, keyColumn), true, key))\n                {\n                    return rs.next();\n                }\n                try (final ResultSet rs = openResultSet(String.format(\n                        SQL_GET_KEYS, keyColumn, table), true))\n                    while (rs.next())\n                    {\n                        keys.add(rs.getString(1));\n                    }\n                    return keys;\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": [
                333,
                334,
                335,
                337,
                339,
                341,
                342,
                343,
                344,
                453,
                454,
                455,
                456,
                457,
                485,
                486,
                487,
                488,
                489,
                568,
                569,
                571,
                572,
                573,
                574,
                575
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": "                final ResultSet rs =\n                        openResultSet(String.format(SQL_GET_PROPERTY,\n                                table, keyColumn), true, key);\n                while (rs.next())\n                    final Object value = extractPropertyValue(rs);\n                    for (final Object o : getListDelimiterHandler().parse(value))\n                        results.add(o);\n                final ResultSet rs = openResultSet(String.format(\n                        SQL_IS_EMPTY, table), true);\n                return rs.next() ? Integer.valueOf(rs.getInt(1)) : null;\n                final ResultSet rs = openResultSet(\n                        String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);\n                return rs.next();\n                final ResultSet rs = openResultSet(String.format(\n                        SQL_GET_KEYS, keyColumn, table), true);\n                while (rs.next())\n                    keys.add(rs.getString(1));\n                return keys;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": [
                332,
                333,
                334,
                337,
                339,
                341,
                343,
                453,
                454,
                456,
                484,
                485,
                487,
                566,
                567,
                569,
                571,
                573
            ]
        }
    },
    {
        "commit": "5fa1935c",
        "prev_commit": "801f4f4b",
        "changed_files": [
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestXMLListHandling",
            "TestPeriodicReloadingTrigger",
            "TestConfigurationPropertySource",
            "TestPatternSubtreeConfiguration",
            "TestBaseNullConfiguration",
            "TestNonStringProperties",
            "TestNodeUpdateData",
            "TestFileBasedBuilderParameters",
            "TestReloadingCombinedConfigurationBuilderFileBased",
            "TestCombinedConfigurationBuilder",
            "TestCombinedConfigurationBuilderVFS",
            "TestInMemoryNodeModel",
            "TestServletRequestConfiguration",
            "TestJNDIConfiguration",
            "TestDefaultBeanFactory",
            "TestCombinedBeanDeclaration",
            "TestNodeSelector",
            "TestJndiBuilderParametersImpl",
            "TestEnvironmentLookup",
            "TestXPathContextFactory",
            "TestConfigurationUtils",
            "TestBasicConfigurationBuilder",
            "TestInMemoryNodeModelTrackedNodes",
            "TestQueryResult",
            "TestNodeAddData",
            "TestParameters",
            "TestMultiFileBuilderParametersImpl",
            "TestDataConfiguration",
            "TestFileBasedConfigurationBuilder",
            "TestFileHandlerReloadingDetector",
            "TestOverrideCombiner",
            "TestHierarchicalConfiguration",
            "TestConstantLookup",
            "TestCombinedLocationStrategy",
            "TestDisabledListDelimiterHandler",
            "TestManagedReloadingDetector",
            "TestHomeDirectoryLocationStrategy",
            "TestPropertiesConfigurationEvents",
            "TestEvent",
            "TestPropertiesBuilderParametersImpl",
            "TestHierarchicalXMLConfiguration",
            "TestXMLDocumentHelper",
            "TestCombinedConfiguration",
            "TestBasicBuilderParameters",
            "TestImmutableNode",
            "TestFileSystemLocationStrategy",
            "TestConfigurationMap",
            "TestDefaultExpressionEngineSymbols",
            "TestUnionCombiner",
            "TestConfigurationLogger",
            "TestMultiFileConfigurationBuilder",
            "TestReloadingMultiFileConfigurationBuilder",
            "TestXMLPropertyListConfigurationEvents",
            "TestEqualBehaviour",
            "TestReloadingBuilderSupportListener",
            "TestHierarchicalConfigurationEvents",
            "TestDummyLookup",
            "TestAbsoluteNameLocationStrategy",
            "TestConfigurationNodeIteratorChildren",
            "TestCompositeConfigurationNonStringProperties",
            "TestConfigurationConverter",
            "TestJNDIEnvironmentValues",
            "TestDefaultParametersManager",
            "TestNullJNDIEnvironmentValues",
            "TestXMLConfigurationEvents",
            "TestDefaultFileSystem",
            "TestServletContextConfiguration",
            "TestMapConfiguration",
            "TestNullCompositeConfiguration",
            "TestEventListenerParameters",
            "TestXMLBuilderParametersImpl",
            "TestAppletConfiguration",
            "TestTrackedNodeHandler",
            "TestConfigurationPropertiesFactoryBean",
            "TestDatabaseBuilderParametersImpl",
            "TestInMemoryNodeModelReferences",
            "TestDatabaseConfigurationEvents",
            "TestBeanHelper",
            "TestConfigurationNodePointerFactory",
            "TestConfigurationEventTypes",
            "TestBaseConfigurationBuilderProvider",
            "TestXMLPropertiesConfiguration",
            "TestConfigurationInterpolator",
            "TestTreeData",
            "TestThreesomeConfiguration",
            "TestYAMLConfiguration",
            "TestINIConfiguration",
            "TestMapConfigurationEvents",
            "TestBasicConfigurationBuilderEvents",
            "TestMultiWrapDynaBean",
            "TestHierarchicalBuilderParametersImpl",
            "TestSubsetConfiguration",
            "TestPropertyListConfiguration",
            "TestVFSFileHandlerReloadingDetector",
            "TestDefaultConfigurationKey",
            "TestInterpolatorSpecification",
            "TestDefaultListDelimiterHandler",
            "TestConfigurationLookup",
            "TestBaseHierarchicalConfigurationSynchronization",
            "TestDefaultExpressionEngine",
            "TestTrackedNodeModel",
            "TestSystemConfiguration",
            "TestFileExtensionConfigurationBuilderProvider",
            "TestExprLookup",
            "TestConfigurationSet",
            "TestCatalogResolver",
            "TestBaseConfiguration",
            "TestBuilderConfigurationWrapperFactory",
            "TestProvidedURLLocationStrategy",
            "TestConfigurationIteratorAttributes",
            "TestBasePathLocationStrategy",
            "TestConfigurationAttributePointer",
            "TestServletConfiguration",
            "TestConfigurationDynaBean",
            "TestReloadingController",
            "TestReadWriteSynchronizer",
            "TestClasspathLocationStrategy",
            "TestCombinedBuilderParametersImpl",
            "TestFileHandler",
            "TestDefaultReloadingDetectorFactory",
            "TestReloadingFileBasedConfigurationBuilder",
            "TestEventSource",
            "TestEnvironmentConfiguration",
            "TestNodeNameMatchers",
            "TestBaseConfigurationXMLReader",
            "TestConstructorArg",
            "TestDefaultConversionHandler",
            "TestXMLConfiguration_605",
            "TestXMLPropertyListConfiguration",
            "TestFileLocatorUtils",
            "TestPropertyListParser",
            "TestNodeTreeWalker",
            "TestPropertiesConfigurationLayout",
            "TestSubsetConfigurationEvents",
            "TestConfigurations",
            "TestSystemPropertiesLookup",
            "TestPropertyListConfigurationEvents",
            "TestAbstractConfigurationSynchronization",
            "TestEventListenerList",
            "TestConfigurationNodePointer",
            "TestMergeCombiner",
            "TestServletFilterConfiguration",
            "TestAutoSaveListener",
            "TestAbstractHierarchicalConfiguration",
            "TestEqualsProperty",
            "TestCombinedReloadingController",
            "TestDatabaseConfiguration",
            "TestHierarchicalConfigurationXMLReader",
            "TestXPathExpressionEngine",
            "TestPropertiesSequence",
            "TestXPathExpressionEngineInConfig",
            "TestConfigurationDynaBeanXMLConfig",
            "TestNodeHandlerDecorator",
            "TestJSONConfiguration",
            "TestConfigurationDeclaration",
            "TestXMLConfiguration",
            "TestPropertiesConfiguration",
            "TestFileLocator",
            "TestCompositeConfiguration",
            "TestPropertyConverter",
            "TestStrictConfigurationComparator",
            "TestSubnodeConfiguration",
            "TestXMLBeanDeclaration",
            "TestAbstractConfigurationBasicFeatures",
            "TestDynamicCombinedConfiguration",
            "TestCopyObjectDefaultHandler",
            "TestImmutableConfiguration",
            "TestReloadingCombinedConfigurationBuilder",
            "TestEventType"
        ],
        "tests_cases_num": {
            "TestAbstractConfigurationBasicFeatures": 64,
            "TestAbstractConfigurationSynchronization": 19,
            "TestAbstractHierarchicalConfiguration": 53,
            "TestBaseConfiguration": 59,
            "TestBaseConfigurationXMLReader": 4,
            "TestBaseHierarchicalConfigurationSynchronization": 14,
            "TestBaseNullConfiguration": 37,
            "TestCatalogResolver": 5,
            "TestCombinedConfiguration": 58,
            "TestCompositeConfiguration": 52,
            "TestCompositeConfigurationNonStringProperties": 23,
            "TestConfigurationConverter": 6,
            "TestConfigurationLookup": 5,
            "TestConfigurationMap": 1,
            "TestConfigurationSet": 2,
            "TestConfigurationUtils": 36,
            "TestDataConfiguration": 59,
            "TestDatabaseConfiguration": 36,
            "TestDynamicCombinedConfiguration": 12,
            "TestEnvironmentConfiguration": 5,
            "TestEqualBehaviour": 7,
            "TestEqualsProperty": 1,
            "TestHierarchicalConfiguration": 37,
            "TestHierarchicalConfigurationXMLReader": 1,
            "TestHierarchicalXMLConfiguration": 10,
            "TestINIConfiguration": 65,
            "TestImmutableConfiguration": 10,
            "TestJNDIConfiguration": 27,
            "TestJNDIEnvironmentValues": 12,
            "TestJSONConfiguration": 10,
            "TestMapConfiguration": 20,
            "TestNonStringProperties": 23,
            "TestNullCompositeConfiguration": 23,
            "TestNullJNDIEnvironmentValues": 12,
            "TestPatternSubtreeConfiguration": 3,
            "TestPropertiesConfiguration": 72,
            "TestPropertiesConfigurationLayout": 38,
            "TestPropertiesSequence": 3,
            "TestStrictConfigurationComparator": 2,
            "TestSubnodeConfiguration": 24,
            "TestSubsetConfiguration": 21,
            "TestSystemConfiguration": 5,
            "TestThreesomeConfiguration": 3,
            "TestXMLConfiguration": 94,
            "TestXMLConfiguration_605": 8,
            "TestXMLDocumentHelper": 11,
            "TestXMLListHandling": 5,
            "TestXMLPropertiesConfiguration": 4,
            "TestYAMLConfiguration": 9,
            "TestBeanHelper": 27,
            "TestCombinedBeanDeclaration": 12,
            "TestConfigurationDynaBean": 42,
            "TestConfigurationDynaBeanXMLConfig": 42,
            "TestConstructorArg": 6,
            "TestDefaultBeanFactory": 11,
            "TestXMLBeanDeclaration": 28,
            "TestAutoSaveListener": 7,
            "TestBasicBuilderParameters": 34,
            "TestBasicConfigurationBuilder": 27,
            "TestBasicConfigurationBuilderEvents": 11,
            "TestBuilderConfigurationWrapperFactory": 8,
            "TestCopyObjectDefaultHandler": 4,
            "TestDatabaseBuilderParametersImpl": 8,
            "TestDefaultParametersManager": 9,
            "TestDefaultReloadingDetectorFactory": 2,
            "TestEventListenerParameters": 4,
            "TestFileBasedBuilderParameters": 24,
            "TestFileBasedConfigurationBuilder": 24,
            "TestHierarchicalBuilderParametersImpl": 3,
            "TestJndiBuilderParametersImpl": 4,
            "TestPropertiesBuilderParametersImpl": 6,
            "TestReloadingBuilderSupportListener": 2,
            "TestReloadingFileBasedConfigurationBuilder": 9,
            "TestXMLBuilderParametersImpl": 8,
            "TestBaseConfigurationBuilderProvider": 9,
            "TestCombinedBuilderParametersImpl": 27,
            "TestCombinedConfigurationBuilder": 51,
            "TestCombinedConfigurationBuilderVFS": 52,
            "TestConfigurationDeclaration": 5,
            "TestFileExtensionConfigurationBuilderProvider": 10,
            "TestMultiFileBuilderParametersImpl": 7,
            "TestMultiFileConfigurationBuilder": 16,
            "TestMultiWrapDynaBean": 13,
            "TestReloadingCombinedConfigurationBuilder": 5,
            "TestReloadingCombinedConfigurationBuilderFileBased": 4,
            "TestReloadingMultiFileConfigurationBuilder": 6,
            "TestConfigurations": 32,
            "TestParameters": 19,
            "TestDefaultConversionHandler": 23,
            "TestDefaultListDelimiterHandler": 13,
            "TestDisabledListDelimiterHandler": 13,
            "TestPropertyConverter": 26,
            "TestConfigurationEventTypes": 19,
            "TestDatabaseConfigurationEvents": 8,
            "TestEvent": 3,
            "TestEventListenerList": 31,
            "TestEventSource": 19,
            "TestEventType": 1,
            "TestHierarchicalConfigurationEvents": 13,
            "TestMapConfigurationEvents": 8,
            "TestPropertiesConfigurationEvents": 8,
            "TestSubsetConfigurationEvents": 8,
            "TestXMLConfigurationEvents": 13,
            "TestConfigurationInterpolator": 41,
            "TestConstantLookup": 8,
            "TestDummyLookup": 1,
            "TestEnvironmentLookup": 2,
            "TestExprLookup": 6,
            "TestInterpolatorSpecification": 10,
            "TestSystemPropertiesLookup": 2,
            "TestAbsoluteNameLocationStrategy": 4,
            "TestBasePathLocationStrategy": 4,
            "TestClasspathLocationStrategy": 3,
            "TestCombinedLocationStrategy": 7,
            "TestConfigurationLogger": 16,
            "TestDefaultFileSystem": 3,
            "TestFileHandler": 85,
            "TestFileLocator": 8,
            "TestFileLocatorUtils": 36,
            "TestFileSystemLocationStrategy": 1,
            "TestHomeDirectoryLocationStrategy": 6,
            "TestProvidedURLLocationStrategy": 2,
            "TestPropertyListConfiguration": 23,
            "TestPropertyListConfigurationEvents": 10,
            "TestPropertyListParser": 4,
            "TestXMLPropertyListConfiguration": 24,
            "TestXMLPropertyListConfigurationEvents": 10,
            "TestCombinedReloadingController": 8,
            "TestFileHandlerReloadingDetector": 11,
            "TestManagedReloadingDetector": 3,
            "TestPeriodicReloadingTrigger": 9,
            "TestReloadingController": 8,
            "TestVFSFileHandlerReloadingDetector": 6,
            "TestConfigurationPropertiesFactoryBean": 10,
            "TestConfigurationPropertySource": 1,
            "TestReadWriteSynchronizer": 3,
            "TestDefaultConfigurationKey": 33,
            "TestDefaultExpressionEngine": 38,
            "TestDefaultExpressionEngineSymbols": 6,
            "TestImmutableNode": 35,
            "TestInMemoryNodeModel": 39,
            "TestInMemoryNodeModelReferences": 12,
            "TestInMemoryNodeModelTrackedNodes": 43,
            "TestMergeCombiner": 8,
            "TestNodeAddData": 4,
            "TestNodeHandlerDecorator": 25,
            "TestNodeNameMatchers": 6,
            "TestNodeSelector": 12,
            "TestNodeTreeWalker": 8,
            "TestNodeUpdateData": 7,
            "TestOverrideCombiner": 9,
            "TestQueryResult": 9,
            "TestTrackedNodeHandler": 2,
            "TestTrackedNodeModel": 13,
            "TestTreeData": 25,
            "TestUnionCombiner": 6,
            "TestConfigurationAttributePointer": 13,
            "TestConfigurationIteratorAttributes": 6,
            "TestConfigurationNodeIteratorChildren": 13,
            "TestConfigurationNodePointer": 7,
            "TestConfigurationNodePointerFactory": 8,
            "TestXPathContextFactory": 1,
            "TestXPathExpressionEngine": 34,
            "TestXPathExpressionEngineInConfig": 6,
            "TestAppletConfiguration": 12,
            "TestServletConfiguration": 12,
            "TestServletContextConfiguration": 12,
            "TestServletFilterConfiguration": 12,
            "TestServletRequestConfiguration": 13
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private static final int VAR_START_LENGTH = VAR_START.length();\n+    private static final int VAR_END_LENGTH = VAR_END.length();\n+        return strValue.substring(VAR_START_LENGTH,\n+                strValue.length() - VAR_END_LENGTH);\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": "    private static final int VAR_START_LENGTH = VAR_START.length();\n    private static final int VAR_END_LENGTH = VAR_END.length();\n        return strValue.substring(VAR_START_LENGTH,\n                strValue.length() - VAR_END_LENGTH);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": [
                98,
                104,
                531,
                532
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": "        return strValue.substring(VAR_START.length(),\n                strValue.length() - VAR_END.length());\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": [
                525,
                526
            ]
        }
    },
    {
        "commit": "9200911b",
        "prev_commit": "97c6c963",
        "changed_files": [
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java",
            "src/test/resources/jup-test.properties"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "TestXMLListHandling",
            "TestPeriodicReloadingTrigger",
            "TestConfigurationPropertySource",
            "TestPatternSubtreeConfiguration",
            "TestBaseNullConfiguration",
            "TestNonStringProperties",
            "TestNodeUpdateData",
            "TestFileBasedBuilderParameters",
            "TestReloadingCombinedConfigurationBuilderFileBased",
            "TestCombinedConfigurationBuilder",
            "TestCombinedConfigurationBuilderVFS",
            "TestInMemoryNodeModel",
            "TestServletRequestConfiguration",
            "TestJNDIConfiguration",
            "TestDefaultBeanFactory",
            "TestCombinedBeanDeclaration",
            "TestNodeSelector",
            "TestJndiBuilderParametersImpl",
            "TestEnvironmentLookup",
            "TestXPathContextFactory",
            "TestConfigurationUtils",
            "TestBasicConfigurationBuilder",
            "TestInMemoryNodeModelTrackedNodes",
            "TestQueryResult",
            "TestNodeAddData",
            "TestParameters",
            "TestMultiFileBuilderParametersImpl",
            "TestDataConfiguration",
            "TestFileBasedConfigurationBuilder",
            "TestFileHandlerReloadingDetector",
            "TestOverrideCombiner",
            "TestHierarchicalConfiguration",
            "TestConstantLookup",
            "TestCombinedLocationStrategy",
            "TestDisabledListDelimiterHandler",
            "TestManagedReloadingDetector",
            "TestHomeDirectoryLocationStrategy",
            "TestPropertiesConfigurationEvents",
            "TestEvent",
            "TestPropertiesBuilderParametersImpl",
            "TestHierarchicalXMLConfiguration",
            "TestXMLDocumentHelper",
            "TestCombinedConfiguration",
            "TestBasicBuilderParameters",
            "TestImmutableNode",
            "TestFileSystemLocationStrategy",
            "TestConfigurationMap",
            "TestDefaultExpressionEngineSymbols",
            "TestUnionCombiner",
            "TestConfigurationLogger",
            "TestMultiFileConfigurationBuilder",
            "TestReloadingMultiFileConfigurationBuilder",
            "TestXMLPropertyListConfigurationEvents",
            "TestEqualBehaviour",
            "TestReloadingBuilderSupportListener",
            "TestHierarchicalConfigurationEvents",
            "TestDummyLookup",
            "TestAbsoluteNameLocationStrategy",
            "TestConfigurationNodeIteratorChildren",
            "TestCompositeConfigurationNonStringProperties",
            "TestConfigurationConverter",
            "TestJNDIEnvironmentValues",
            "TestDefaultParametersManager",
            "TestNullJNDIEnvironmentValues",
            "TestXMLConfigurationEvents",
            "TestDefaultFileSystem",
            "TestServletContextConfiguration",
            "TestMapConfiguration",
            "TestNullCompositeConfiguration",
            "TestEventListenerParameters",
            "TestXMLBuilderParametersImpl",
            "TestAppletConfiguration",
            "TestTrackedNodeHandler",
            "TestConfigurationPropertiesFactoryBean",
            "TestDatabaseBuilderParametersImpl",
            "TestInMemoryNodeModelReferences",
            "TestDatabaseConfigurationEvents",
            "TestBeanHelper",
            "TestConfigurationNodePointerFactory",
            "TestConfigurationEventTypes",
            "TestBaseConfigurationBuilderProvider",
            "TestXMLPropertiesConfiguration",
            "TestConfigurationInterpolator",
            "TestTreeData",
            "TestThreesomeConfiguration",
            "TestYAMLConfiguration",
            "TestINIConfiguration",
            "TestMapConfigurationEvents",
            "TestBasicConfigurationBuilderEvents",
            "TestMultiWrapDynaBean",
            "TestHierarchicalBuilderParametersImpl",
            "TestSubsetConfiguration",
            "TestPropertyListConfiguration",
            "TestVFSFileHandlerReloadingDetector",
            "TestDefaultConfigurationKey",
            "TestInterpolatorSpecification",
            "TestDefaultListDelimiterHandler",
            "TestConfigurationLookup",
            "TestBaseHierarchicalConfigurationSynchronization",
            "TestDefaultExpressionEngine",
            "TestTrackedNodeModel",
            "TestSystemConfiguration",
            "TestFileExtensionConfigurationBuilderProvider",
            "TestExprLookup",
            "TestConfigurationSet",
            "TestCatalogResolver",
            "TestBaseConfiguration",
            "TestBuilderConfigurationWrapperFactory",
            "TestProvidedURLLocationStrategy",
            "TestConfigurationIteratorAttributes",
            "TestBasePathLocationStrategy",
            "TestConfigurationAttributePointer",
            "TestServletConfiguration",
            "TestConfigurationDynaBean",
            "TestReloadingController",
            "TestReadWriteSynchronizer",
            "TestClasspathLocationStrategy",
            "TestCombinedBuilderParametersImpl",
            "TestFileHandler",
            "TestDefaultReloadingDetectorFactory",
            "TestReloadingFileBasedConfigurationBuilder",
            "TestEventSource",
            "TestEnvironmentConfiguration",
            "TestNodeNameMatchers",
            "TestBaseConfigurationXMLReader",
            "TestConstructorArg",
            "TestDefaultConversionHandler",
            "TestXMLConfiguration_605",
            "TestXMLPropertyListConfiguration",
            "TestFileLocatorUtils",
            "TestPropertyListParser",
            "TestNodeTreeWalker",
            "TestPropertiesConfigurationLayout",
            "TestSubsetConfigurationEvents",
            "TestConfigurations",
            "TestSystemPropertiesLookup",
            "TestPropertyListConfigurationEvents",
            "TestAbstractConfigurationSynchronization",
            "TestEventListenerList",
            "TestConfigurationNodePointer",
            "TestMergeCombiner",
            "TestServletFilterConfiguration",
            "TestAutoSaveListener",
            "TestAbstractHierarchicalConfiguration",
            "TestEqualsProperty",
            "TestCombinedReloadingController",
            "TestDatabaseConfiguration",
            "TestHierarchicalConfigurationXMLReader",
            "TestXPathExpressionEngine",
            "TestPropertiesSequence",
            "TestXPathExpressionEngineInConfig",
            "TestConfigurationDynaBeanXMLConfig",
            "TestNodeHandlerDecorator",
            "TestJSONConfiguration",
            "TestConfigurationDeclaration",
            "TestXMLConfiguration",
            "TestPropertiesConfiguration",
            "TestFileLocator",
            "TestCompositeConfiguration",
            "TestPropertyConverter",
            "TestStrictConfigurationComparator",
            "TestSubnodeConfiguration",
            "TestXMLBeanDeclaration",
            "TestAbstractConfigurationBasicFeatures",
            "TestDynamicCombinedConfiguration",
            "TestCopyObjectDefaultHandler",
            "TestImmutableConfiguration",
            "TestReloadingCombinedConfigurationBuilder",
            "TestEventType"
        ],
        "tests_cases_num": {
            "TestAbstractConfigurationBasicFeatures": 64,
            "TestAbstractConfigurationSynchronization": 19,
            "TestAbstractHierarchicalConfiguration": 54,
            "TestBaseConfiguration": 60,
            "TestBaseConfigurationXMLReader": 4,
            "TestBaseHierarchicalConfigurationSynchronization": 14,
            "TestBaseNullConfiguration": 37,
            "TestCatalogResolver": 5,
            "TestCombinedConfiguration": 58,
            "TestCompositeConfiguration": 52,
            "TestCompositeConfigurationNonStringProperties": 23,
            "TestConfigurationConverter": 6,
            "TestConfigurationLookup": 5,
            "TestConfigurationMap": 1,
            "TestConfigurationSet": 2,
            "TestConfigurationUtils": 36,
            "TestDataConfiguration": 59,
            "TestDatabaseConfiguration": 36,
            "TestDynamicCombinedConfiguration": 12,
            "TestEnvironmentConfiguration": 5,
            "TestEqualBehaviour": 7,
            "TestEqualsProperty": 1,
            "TestHierarchicalConfiguration": 37,
            "TestHierarchicalConfigurationXMLReader": 1,
            "TestHierarchicalXMLConfiguration": 10,
            "TestINIConfiguration": 65,
            "TestImmutableConfiguration": 10,
            "TestJNDIConfiguration": 27,
            "TestJNDIEnvironmentValues": 12,
            "TestJSONConfiguration": 10,
            "TestMapConfiguration": 20,
            "TestNonStringProperties": 23,
            "TestNullCompositeConfiguration": 23,
            "TestNullJNDIEnvironmentValues": 12,
            "TestPatternSubtreeConfiguration": 3,
            "TestPropertiesConfiguration": 75,
            "TestPropertiesConfigurationLayout": 38,
            "TestPropertiesSequence": 3,
            "TestStrictConfigurationComparator": 2,
            "TestSubnodeConfiguration": 24,
            "TestSubsetConfiguration": 21,
            "TestSystemConfiguration": 5,
            "TestThreesomeConfiguration": 3,
            "TestXMLConfiguration": 94,
            "TestXMLConfiguration_605": 8,
            "TestXMLDocumentHelper": 11,
            "TestXMLListHandling": 5,
            "TestXMLPropertiesConfiguration": 4,
            "TestYAMLConfiguration": 9,
            "TestBeanHelper": 27,
            "TestCombinedBeanDeclaration": 12,
            "TestConfigurationDynaBean": 42,
            "TestConfigurationDynaBeanXMLConfig": 42,
            "TestConstructorArg": 6,
            "TestDefaultBeanFactory": 11,
            "TestXMLBeanDeclaration": 28,
            "TestAutoSaveListener": 7,
            "TestBasicBuilderParameters": 34,
            "TestBasicConfigurationBuilder": 27,
            "TestBasicConfigurationBuilderEvents": 11,
            "TestBuilderConfigurationWrapperFactory": 8,
            "TestCopyObjectDefaultHandler": 4,
            "TestDatabaseBuilderParametersImpl": 8,
            "TestDefaultParametersManager": 9,
            "TestDefaultReloadingDetectorFactory": 2,
            "TestEventListenerParameters": 4,
            "TestFileBasedBuilderParameters": 24,
            "TestFileBasedConfigurationBuilder": 24,
            "TestHierarchicalBuilderParametersImpl": 3,
            "TestJndiBuilderParametersImpl": 4,
            "TestPropertiesBuilderParametersImpl": 6,
            "TestReloadingBuilderSupportListener": 2,
            "TestReloadingFileBasedConfigurationBuilder": 9,
            "TestXMLBuilderParametersImpl": 8,
            "TestBaseConfigurationBuilderProvider": 9,
            "TestCombinedBuilderParametersImpl": 27,
            "TestCombinedConfigurationBuilder": 51,
            "TestCombinedConfigurationBuilderVFS": 52,
            "TestConfigurationDeclaration": 5,
            "TestFileExtensionConfigurationBuilderProvider": 10,
            "TestMultiFileBuilderParametersImpl": 7,
            "TestMultiFileConfigurationBuilder": 16,
            "TestMultiWrapDynaBean": 13,
            "TestReloadingCombinedConfigurationBuilder": 5,
            "TestReloadingCombinedConfigurationBuilderFileBased": 4,
            "TestReloadingMultiFileConfigurationBuilder": 6,
            "TestConfigurations": 32,
            "TestParameters": 19,
            "TestDefaultConversionHandler": 23,
            "TestDefaultListDelimiterHandler": 13,
            "TestDisabledListDelimiterHandler": 13,
            "TestPropertyConverter": 26,
            "TestConfigurationEventTypes": 19,
            "TestDatabaseConfigurationEvents": 8,
            "TestEvent": 3,
            "TestEventListenerList": 31,
            "TestEventSource": 19,
            "TestEventType": 1,
            "TestHierarchicalConfigurationEvents": 13,
            "TestMapConfigurationEvents": 8,
            "TestPropertiesConfigurationEvents": 8,
            "TestSubsetConfigurationEvents": 8,
            "TestXMLConfigurationEvents": 13,
            "TestConfigurationInterpolator": 41,
            "TestConstantLookup": 8,
            "TestDummyLookup": 1,
            "TestEnvironmentLookup": 2,
            "TestExprLookup": 6,
            "TestInterpolatorSpecification": 10,
            "TestSystemPropertiesLookup": 2,
            "TestAbsoluteNameLocationStrategy": 4,
            "TestBasePathLocationStrategy": 4,
            "TestClasspathLocationStrategy": 3,
            "TestCombinedLocationStrategy": 7,
            "TestConfigurationLogger": 16,
            "TestDefaultFileSystem": 3,
            "TestFileHandler": 85,
            "TestFileLocator": 8,
            "TestFileLocatorUtils": 36,
            "TestFileSystemLocationStrategy": 1,
            "TestHomeDirectoryLocationStrategy": 6,
            "TestProvidedURLLocationStrategy": 2,
            "TestPropertyListConfiguration": 23,
            "TestPropertyListConfigurationEvents": 10,
            "TestPropertyListParser": 4,
            "TestXMLPropertyListConfiguration": 24,
            "TestXMLPropertyListConfigurationEvents": 10,
            "TestCombinedReloadingController": 8,
            "TestFileHandlerReloadingDetector": 11,
            "TestManagedReloadingDetector": 3,
            "TestPeriodicReloadingTrigger": 9,
            "TestReloadingController": 8,
            "TestVFSFileHandlerReloadingDetector": 6,
            "TestConfigurationPropertiesFactoryBean": 10,
            "TestConfigurationPropertySource": 1,
            "TestReadWriteSynchronizer": 3,
            "TestDefaultConfigurationKey": 33,
            "TestDefaultExpressionEngine": 38,
            "TestDefaultExpressionEngineSymbols": 6,
            "TestImmutableNode": 35,
            "TestInMemoryNodeModel": 39,
            "TestInMemoryNodeModelReferences": 12,
            "TestInMemoryNodeModelTrackedNodes": 43,
            "TestMergeCombiner": 8,
            "TestNodeAddData": 4,
            "TestNodeHandlerDecorator": 25,
            "TestNodeNameMatchers": 6,
            "TestNodeSelector": 12,
            "TestNodeTreeWalker": 8,
            "TestNodeUpdateData": 7,
            "TestOverrideCombiner": 9,
            "TestQueryResult": 9,
            "TestTrackedNodeHandler": 2,
            "TestTrackedNodeModel": 13,
            "TestTreeData": 25,
            "TestUnionCombiner": 6,
            "TestConfigurationAttributePointer": 13,
            "TestConfigurationIteratorAttributes": 6,
            "TestConfigurationNodeIteratorChildren": 13,
            "TestConfigurationNodePointer": 7,
            "TestConfigurationNodePointerFactory": 8,
            "TestXPathContextFactory": 1,
            "TestXPathExpressionEngine": 34,
            "TestXPathExpressionEngineInConfig": 6,
            "TestAppletConfiguration": 12,
            "TestServletConfiguration": 12,
            "TestServletContextConfiguration": 12,
            "TestServletFilterConfiguration": 12,
            "TestServletRequestConfiguration": 13
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            final String[] property = doParseProperty(line, true);\n+            propertyName = unescapePropertyName(name);\n+        }\n+        protected String unescapePropertyName(String name)\n+        {\n+            return StringEscapeUtils.unescapeJava(name);\n+            propertyValue = unescapePropertyValue(value);\n+        }\n+        protected String unescapePropertyValue(String value)\n+        {\n+            return unescapeJava(value);\n+        static boolean checkCombineLines(final String line)\n+        static String[] doParseProperty(final String line, final boolean trimValue)\n+                String value = matcher.group(IDX_VALUE);\n+                if (trimValue)\n+                {\n+                    value = value.trim();\n+                }\n+                result[1] = value;\n+        private static final ValueTransformer DEFAULT_TRANSFORMER =\n+        private final ValueTransformer valueTransformer;\n+        {\n+            this(writer, delHandler, DEFAULT_TRANSFORMER);\n+        }\n+        public PropertiesWriter(Writer writer, ListDelimiterHandler delHandler, ValueTransformer valueTransformer)\n+            this.valueTransformer = valueTransformer;\n+                                        .escapeList(values, valueTransformer));\n+                v = String.valueOf(getDelimiterHandler().escape(value, valueTransformer));\n+                if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c) ||\n+                        c == '\\\\')\n+    public static class JupIOFactory implements IOFactory\n+    {\n+        private final boolean escapeUnicode;\n+        public JupIOFactory()\n+        {\n+            this(true);\n+        }\n+        public JupIOFactory(boolean escapeUnicode)\n+        {\n+            this.escapeUnicode = escapeUnicode;\n+        }\n+        @Override\n+        public PropertiesReader createPropertiesReader(Reader in)\n+        {\n+            return new JupPropertiesReader(in);\n+        }\n+        @Override\n+        public PropertiesWriter createPropertiesWriter(Writer out, ListDelimiterHandler handler)\n+        {\n+            return new JupPropertiesWriter(out, handler, escapeUnicode);\n+        }\n+    }\n+    public static class JupPropertiesReader extends PropertiesReader\n+    {\n+        public JupPropertiesReader(Reader reader)\n+        {\n+            super(reader);\n+        }\n+        @Override\n+        public String readProperty() throws IOException\n+        {\n+            getCommentLines().clear();\n+            StringBuilder buffer = new StringBuilder();\n+            while (true)\n+            {\n+                String line = readLine();\n+                if (line == null)\n+                {\n+                    if (buffer.length() > 0)\n+                    {\n+                        break;\n+                    }\n+                    return null;\n+                }\n+                if (isCommentLine(line) && (buffer.length() == 0))\n+                {\n+                    getCommentLines().add(line);\n+                    continue;\n+                }\n+                if (buffer.length() > 0)\n+                {\n+                    int i;\n+                    for (i = 0; i < line.length(); i++)\n+                    {\n+                        if (!Character.isWhitespace(line.charAt(i)))\n+                        {\n+                            break;\n+                        }\n+                    }\n+                    line = line.substring(i);\n+                }\n+                if (checkCombineLines(line))\n+                {\n+                    line = line.substring(0, line.length() - 1);\n+                    buffer.append(line);\n+                }\n+                else\n+                {\n+                    buffer.append(line);\n+                    break;\n+                }\n+            }\n+            return buffer.toString();\n+        }\n+        @Override\n+        protected void parseProperty(String line)\n+        {\n+            String[] property = doParseProperty(line, false);\n+            initPropertyName(property[0]);\n+            initPropertyValue(property[1]);\n+            initPropertySeparator(property[2]);\n+        }\n+        @Override\n+        protected String unescapePropertyValue(String value)\n+        {\n+            return unescapeJava(value, true);\n+        }\n+    }\n+    public static class JupPropertiesWriter extends PropertiesWriter\n+    {\n+        private static final Map<CharSequence, CharSequence> JUP_CHARS_ESCAPE;\n+        static\n+        {\n+            Map<CharSequence, CharSequence> initialMap = new HashMap<>();\n+            initialMap.put(\"\\\\\", \"\\\\\\\\\");\n+            initialMap.put(\"\\n\", \"\\\\n\");\n+            initialMap.put(\"\\t\", \"\\\\t\");\n+            initialMap.put(\"\\f\", \"\\\\f\");\n+            initialMap.put(\"\\r\", \"\\\\r\");\n+            JUP_CHARS_ESCAPE = Collections.unmodifiableMap(initialMap);\n+        };\n+        public JupPropertiesWriter(Writer writer, ListDelimiterHandler delHandler, final boolean escapeUnicode)\n+        {\n+            super(writer, delHandler, new ValueTransformer()\n+            {\n+                @Override\n+                public Object transformValue(Object value)\n+                {\n+                    String valueString = String.valueOf(value);\n+                    CharSequenceTranslator translator;\n+                    if (escapeUnicode)\n+                    {\n+                        translator = new AggregateTranslator(new LookupTranslator(JUP_CHARS_ESCAPE),\n+                                UnicodeEscaper.outsideOf(0x20, 0x7e));\n+                    }\n+                    else\n+                    {\n+                        translator = new AggregateTranslator(new LookupTranslator(JUP_CHARS_ESCAPE));\n+                    }\n+                    valueString = translator.translate(valueString);\n+                    if (valueString.startsWith(\" \"))\n+                    {\n+                        valueString = \"\\\\\" + valueString;\n+                    }\n+                    return valueString;\n+                }\n+            });\n+        }\n+    }\n+    {\n+        return unescapeJava(str, false);\n+    }\n+    protected static String unescapeJava(String str, boolean jupCompatible)\n+                else if (!jupCompatible && ch == 'b')\n+                    if (!jupCompatible)\n+                    {\n+                        out.append('\\\\');\n+                    }\n+    @Test\n+    public void testJupRead() throws IOException, ConfigurationException\n+    {\n+        conf.clear();\n+        conf.setIOFactory(new PropertiesConfiguration.JupIOFactory());\n+        String testFilePath = ConfigurationAssert.getTestFile(\"jup-test.properties\").getAbsolutePath();\n+        load(conf, testFilePath);\n+        Properties jup = new Properties();\n+        try (InputStream in = Files.newInputStream(Paths.get(testFilePath)))\n+        {\n+            jup.load(in);\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        Set<Object> pcKeys = new HashSet<>(IteratorUtils.toList(conf.getKeys()));\n+        assertEquals(jup.keySet(), pcKeys);\n+        for (Object key : jup.keySet())\n+        {\n+            String keyString = key.toString();\n+            System.out.println(keyString);\n+            assertEquals(\"Wrong property value for '\" + keyString + \"'\", jup.getProperty(keyString),\n+                    conf.getProperty(keyString));\n+        }\n+    }\n+    @Test\n+    public void testJupWrite() throws IOException, ConfigurationException\n+    {\n+        conf.clear();\n+        conf.setIOFactory(new PropertiesConfiguration.JupIOFactory());\n+        String testFilePath = ConfigurationAssert.getTestFile(\"jup-test.properties\").getAbsolutePath();\n+        Properties origProps = new Properties();\n+        try (InputStream in = Files.newInputStream(Paths.get(testFilePath)))\n+        {\n+            origProps.load(in);\n+        }\n+        for (Object key : origProps.keySet())\n+        {\n+            String keyString = key.toString();\n+            conf.setProperty(keyString, origProps.getProperty(keyString));\n+        }\n+        saveTestConfig();\n+        assertTrue(\"The saved file doesn't exist\", testSavePropertiesFile.exists());\n+        Properties testProps = new Properties();\n+        try (InputStream in = Files.newInputStream(testSavePropertiesFile.toPath()))\n+        {\n+            testProps.load(in);\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        Set<Object> pcKeys = new HashSet<>(IteratorUtils.toList(conf.getKeys()));\n+        assertEquals(testProps.keySet(), pcKeys);\n+        for (Object key : testProps.keySet())\n+        {\n+            String keyString = key.toString();\n+            assertEquals(\"Wrong property value for '\" + keyString + \"'\", testProps.getProperty(keyString),\n+                    conf.getProperty(keyString));\n+        }\n+    }\n+    @Test\n+    public void testJupWriteUtf8WithoutUnicodeEscapes() throws IOException, ConfigurationException\n+    {\n+        conf.clear();\n+        conf.setIOFactory(new PropertiesConfiguration.JupIOFactory(false));\n+        String testFilePath = ConfigurationAssert.getTestFile(\"jup-test.properties\").getAbsolutePath();\n+        Properties origProps = new Properties();\n+        try (InputStream in = Files.newInputStream(Paths.get(testFilePath)))\n+        {\n+            origProps.load(in);\n+        }\n+        for (Object key : origProps.keySet())\n+        {\n+            String keyString = key.toString();\n+            conf.setProperty(keyString, origProps.getProperty(keyString));\n+        }\n+        final FileHandler handler = new FileHandler(conf);\n+        handler.setEncoding(StandardCharsets.UTF_8.name());\n+        handler.save(testSavePropertiesFile);\n+        assertTrue(\"The saved file doesn't exist\", testSavePropertiesFile.exists());\n+        Properties testProps = new Properties();\n+        try (BufferedReader in = Files.newBufferedReader(testSavePropertiesFile.toPath(), StandardCharsets.UTF_8))\n+        {\n+            testProps.load(in);\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        Set<Object> pcKeys = new HashSet<>(IteratorUtils.toList(conf.getKeys()));\n+        assertEquals(testProps.keySet(), pcKeys);\n+        for (Object key : testProps.keySet())\n+        {\n+            String keyString = key.toString();\n+            assertEquals(\"Wrong property value for '\" + keyString + \"'\", testProps.getProperty(keyString),\n+                    conf.getProperty(keyString));\n+        }\n+        for (String line : Files.readAllLines(testSavePropertiesFile.toPath()))\n+        {\n+            if (line.contains(\"\\\\u\"))\n+            {\n+                fail(\"Unicode escape found in line: \" + line);\n+            }\n+        }\n+    }\n+    ghi\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java": "            final String[] property = doParseProperty(line, true);\n            propertyName = unescapePropertyName(name);\n        }\n        protected String unescapePropertyName(String name)\n        {\n            return StringEscapeUtils.unescapeJava(name);\n            propertyValue = unescapePropertyValue(value);\n        }\n        protected String unescapePropertyValue(String value)\n        {\n            return unescapeJava(value);\n        static boolean checkCombineLines(final String line)\n        static String[] doParseProperty(final String line, final boolean trimValue)\n                String value = matcher.group(IDX_VALUE);\n                if (trimValue)\n                {\n                    value = value.trim();\n                }\n                result[1] = value;\n        private static final ValueTransformer DEFAULT_TRANSFORMER =\n        private final ValueTransformer valueTransformer;\n        {\n            this(writer, delHandler, DEFAULT_TRANSFORMER);\n        }\n        public PropertiesWriter(Writer writer, ListDelimiterHandler delHandler, ValueTransformer valueTransformer)\n            this.valueTransformer = valueTransformer;\n                                        .escapeList(values, valueTransformer));\n                v = String.valueOf(getDelimiterHandler().escape(value, valueTransformer));\n                if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c) ||\n                        c == '\\\\')\n    public static class JupIOFactory implements IOFactory\n    {\n        private final boolean escapeUnicode;\n        public JupIOFactory()\n        {\n            this(true);\n        }\n        public JupIOFactory(boolean escapeUnicode)\n        {\n            this.escapeUnicode = escapeUnicode;\n        }\n        @Override\n        public PropertiesReader createPropertiesReader(Reader in)\n        {\n            return new JupPropertiesReader(in);\n        }\n        @Override\n        public PropertiesWriter createPropertiesWriter(Writer out, ListDelimiterHandler handler)\n        {\n            return new JupPropertiesWriter(out, handler, escapeUnicode);\n        }\n    }\n    public static class JupPropertiesReader extends PropertiesReader\n    {\n        public JupPropertiesReader(Reader reader)\n        {\n            super(reader);\n        }\n        @Override\n        public String readProperty() throws IOException\n        {\n            getCommentLines().clear();\n            StringBuilder buffer = new StringBuilder();\n            while (true)\n            {\n                String line = readLine();\n                if (line == null)\n                {\n                    if (buffer.length() > 0)\n                    {\n                        break;\n                    }\n                    return null;\n                }\n                if (isCommentLine(line) && (buffer.length() == 0))\n                {\n                    getCommentLines().add(line);\n                    continue;\n                }\n                if (buffer.length() > 0)\n                {\n                    int i;\n                    for (i = 0; i < line.length(); i++)\n                    {\n                        if (!Character.isWhitespace(line.charAt(i)))\n                        {\n                            break;\n                        }\n                    }\n                    line = line.substring(i);\n                }\n                if (checkCombineLines(line))\n                {\n                    line = line.substring(0, line.length() - 1);\n                    buffer.append(line);\n                }\n                else\n                {\n                    buffer.append(line);\n                    break;\n                }\n            }\n            return buffer.toString();\n        }\n        @Override\n        protected void parseProperty(String line)\n        {\n            String[] property = doParseProperty(line, false);\n            initPropertyName(property[0]);\n            initPropertyValue(property[1]);\n            initPropertySeparator(property[2]);\n        }\n        @Override\n        protected String unescapePropertyValue(String value)\n        {\n            return unescapeJava(value, true);\n        }\n    }\n    public static class JupPropertiesWriter extends PropertiesWriter\n    {\n        private static final Map<CharSequence, CharSequence> JUP_CHARS_ESCAPE;\n        static\n        {\n            Map<CharSequence, CharSequence> initialMap = new HashMap<>();\n            initialMap.put(\"\\\\\", \"\\\\\\\\\");\n            initialMap.put(\"\\n\", \"\\\\n\");\n            initialMap.put(\"\\t\", \"\\\\t\");\n            initialMap.put(\"\\f\", \"\\\\f\");\n            initialMap.put(\"\\r\", \"\\\\r\");\n            JUP_CHARS_ESCAPE = Collections.unmodifiableMap(initialMap);\n        };\n        public JupPropertiesWriter(Writer writer, ListDelimiterHandler delHandler, final boolean escapeUnicode)\n        {\n            super(writer, delHandler, new ValueTransformer()\n            {\n                @Override\n                public Object transformValue(Object value)\n                {\n                    String valueString = String.valueOf(value);\n                    CharSequenceTranslator translator;\n                    if (escapeUnicode)\n                    {\n                        translator = new AggregateTranslator(new LookupTranslator(JUP_CHARS_ESCAPE),\n                                UnicodeEscaper.outsideOf(0x20, 0x7e));\n                    }\n                    else\n                    {\n                        translator = new AggregateTranslator(new LookupTranslator(JUP_CHARS_ESCAPE));\n                    }\n                    valueString = translator.translate(valueString);\n                    if (valueString.startsWith(\" \"))\n                    {\n                        valueString = \"\\\\\" + valueString;\n                    }\n                    return valueString;\n                }\n            });\n        }\n    }\n    {\n        return unescapeJava(str, false);\n    }\n    protected static String unescapeJava(String str, boolean jupCompatible)\n                else if (!jupCompatible && ch == 'b')\n                    if (!jupCompatible)\n                    {\n                        out.append('\\\\');\n                    }\n",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java": "import java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Properties;\nimport org.apache.commons.collections.IteratorUtils;\n    @Test\n    public void testJupRead() throws IOException, ConfigurationException\n    {\n        conf.clear();\n        conf.setIOFactory(new PropertiesConfiguration.JupIOFactory());\n        String testFilePath = ConfigurationAssert.getTestFile(\"jup-test.properties\").getAbsolutePath();\n        load(conf, testFilePath);\n        Properties jup = new Properties();\n        try (InputStream in = Files.newInputStream(Paths.get(testFilePath)))\n        {\n            jup.load(in);\n        }\n        @SuppressWarnings(\"unchecked\")\n        Set<Object> pcKeys = new HashSet<>(IteratorUtils.toList(conf.getKeys()));\n        assertEquals(jup.keySet(), pcKeys);\n        for (Object key : jup.keySet())\n        {\n            String keyString = key.toString();\n            System.out.println(keyString);\n            assertEquals(\"Wrong property value for '\" + keyString + \"'\", jup.getProperty(keyString),\n                    conf.getProperty(keyString));\n        }\n    }\n    @Test\n    public void testJupWrite() throws IOException, ConfigurationException\n    {\n        conf.clear();\n        conf.setIOFactory(new PropertiesConfiguration.JupIOFactory());\n        String testFilePath = ConfigurationAssert.getTestFile(\"jup-test.properties\").getAbsolutePath();\n        Properties origProps = new Properties();\n        try (InputStream in = Files.newInputStream(Paths.get(testFilePath)))\n        {\n            origProps.load(in);\n        }\n        for (Object key : origProps.keySet())\n        {\n            String keyString = key.toString();\n            conf.setProperty(keyString, origProps.getProperty(keyString));\n        }\n        saveTestConfig();\n        assertTrue(\"The saved file doesn't exist\", testSavePropertiesFile.exists());\n        Properties testProps = new Properties();\n        try (InputStream in = Files.newInputStream(testSavePropertiesFile.toPath()))\n        {\n            testProps.load(in);\n        }\n        @SuppressWarnings(\"unchecked\")\n        Set<Object> pcKeys = new HashSet<>(IteratorUtils.toList(conf.getKeys()));\n        assertEquals(testProps.keySet(), pcKeys);\n        for (Object key : testProps.keySet())\n        {\n            String keyString = key.toString();\n            assertEquals(\"Wrong property value for '\" + keyString + \"'\", testProps.getProperty(keyString),\n                    conf.getProperty(keyString));\n        }\n    }\n    @Test\n    public void testJupWriteUtf8WithoutUnicodeEscapes() throws IOException, ConfigurationException\n    {\n        conf.clear();\n        conf.setIOFactory(new PropertiesConfiguration.JupIOFactory(false));\n        String testFilePath = ConfigurationAssert.getTestFile(\"jup-test.properties\").getAbsolutePath();\n        Properties origProps = new Properties();\n        try (InputStream in = Files.newInputStream(Paths.get(testFilePath)))\n        {\n            origProps.load(in);\n        }\n        for (Object key : origProps.keySet())\n        {\n            String keyString = key.toString();\n            conf.setProperty(keyString, origProps.getProperty(keyString));\n        }\n        final FileHandler handler = new FileHandler(conf);\n        handler.setEncoding(StandardCharsets.UTF_8.name());\n        handler.save(testSavePropertiesFile);\n        assertTrue(\"The saved file doesn't exist\", testSavePropertiesFile.exists());\n        Properties testProps = new Properties();\n        try (BufferedReader in = Files.newBufferedReader(testSavePropertiesFile.toPath(), StandardCharsets.UTF_8))\n        {\n            testProps.load(in);\n        }\n        @SuppressWarnings(\"unchecked\")\n        Set<Object> pcKeys = new HashSet<>(IteratorUtils.toList(conf.getKeys()));\n        assertEquals(testProps.keySet(), pcKeys);\n        for (Object key : testProps.keySet())\n        {\n            String keyString = key.toString();\n            assertEquals(\"Wrong property value for '\" + keyString + \"'\", testProps.getProperty(keyString),\n                    conf.getProperty(keyString));\n        }\n        for (String line : Files.readAllLines(testSavePropertiesFile.toPath()))\n        {\n            if (line.contains(\"\\\\u\"))\n            {\n                fail(\"Unicode escape found in line: \" + line);\n            }\n        }\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java": [
                819,
                836,
                837,
                846,
                847,
                848,
                862,
                863,
                872,
                873,
                874,
                898,
                911,
                921,
                922,
                923,
                924,
                925,
                926,
                970,
                982,
                1004,
                1005,
                1006,
                1016,
                1020,
                1164,
                1180,
                1219,
                1220,
                1372,
                1373,
                1380,
                1385,
                1386,
                1387,
                1388,
                1399,
                1400,
                1401,
                1402,
                1404,
                1405,
                1406,
                1407,
                1408,
                1410,
                1411,
                1412,
                1413,
                1414,
                1416,
                1424,
                1425,
                1432,
                1433,
                1434,
                1435,
                1438,
                1439,
                1440,
                1441,
                1442,
                1444,
                1445,
                1446,
                1447,
                1448,
                1450,
                1451,
                1452,
                1453,
                1454,
                1455,
                1459,
                1460,
                1461,
                1462,
                1463,
                1467,
                1468,
                1470,
                1471,
                1472,
                1473,
                1474,
                1475,
                1476,
                1477,
                1479,
                1480,
                1482,
                1483,
                1484,
                1485,
                1486,
                1487,
                1488,
                1489,
                1490,
                1491,
                1492,
                1493,
                1494,
                1496,
                1497,
                1498,
                1499,
                1500,
                1501,
                1502,
                1503,
                1505,
                1506,
                1507,
                1508,
                1509,
                1511,
                1519,
                1520,
                1525,
                1526,
                1527,
                1528,
                1529,
                1530,
                1531,
                1532,
                1533,
                1534,
                1535,
                1546,
                1547,
                1548,
                1549,
                1550,
                1551,
                1552,
                1553,
                1555,
                1556,
                1557,
                1558,
                1559,
                1560,
                1561,
                1562,
                1563,
                1564,
                1566,
                1569,
                1570,
                1571,
                1572,
                1574,
                1575,
                1576,
                1577,
                1579,
                1592,
                1593,
                1594,
                1610,
                1671,
                1687,
                1688,
                1689,
                1690
            ],
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java": [
                25,
                26,
                27,
                33,
                36,
                1223,
                1224,
                1225,
                1226,
                1227,
                1229,
                1231,
                1233,
                1234,
                1235,
                1236,
                1237,
                1239,
                1240,
                1241,
                1243,
                1244,
                1245,
                1246,
                1247,
                1248,
                1249,
                1250,
                1256,
                1257,
                1258,
                1259,
                1260,
                1262,
                1265,
                1266,
                1267,
                1268,
                1269,
                1270,
                1271,
                1272,
                1273,
                1274,
                1277,
                1278,
                1281,
                1282,
                1283,
                1284,
                1285,
                1288,
                1289,
                1290,
                1292,
                1293,
                1294,
                1295,
                1296,
                1297,
                1298,
                1305,
                1306,
                1307,
                1308,
                1309,
                1311,
                1314,
                1315,
                1316,
                1317,
                1318,
                1319,
                1320,
                1321,
                1322,
                1323,
                1326,
                1327,
                1328,
                1329,
                1332,
                1333,
                1334,
                1335,
                1336,
                1339,
                1340,
                1341,
                1343,
                1344,
                1345,
                1346,
                1347,
                1348,
                1351,
                1352,
                1353,
                1354,
                1355,
                1356,
                1357,
                1358
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java": "            final String[] property = doParseProperty(line);\n            propertyName = StringEscapeUtils.unescapeJava(name);\n            propertyValue = unescapeJava(value);\n        private static boolean checkCombineLines(final String line)\n        private static String[] doParseProperty(final String line)\n                result[1] = matcher.group(IDX_VALUE).trim();\n        private static final ValueTransformer TRANSFORMER =\n                                        .escapeList(values, TRANSFORMER));\n                v = String.valueOf(getDelimiterHandler().escape(value, TRANSFORMER));\n                if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))\n                else if (ch == 'b')\n                    out.append('\\\\');\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java": [
                819,
                836,
                850,
                874,
                885,
                894,
                937,
                1114,
                1130,
                1169,
                1373,
                1388
            ]
        }
    },
    {
        "commit": "ad56c388",
        "prev_commit": "dc565c4f",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java",
            "src/main/java/org/apache/commons/configuration2/interpol/StringLookupAdapter.java",
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java"
        ],
        "changed_files_num": 6,
        "changed_java_files": [
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java",
            "src/main/java/org/apache/commons/configuration2/interpol/StringLookupAdapter.java",
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [],
        "passed_test_list": [
            "TestXMLListHandling",
            "TestPeriodicReloadingTrigger",
            "TestConfigurationPropertySource",
            "TestPatternSubtreeConfiguration",
            "TestBaseNullConfiguration",
            "TestNonStringProperties",
            "TestNodeUpdateData",
            "TestFileBasedBuilderParameters",
            "TestReloadingCombinedConfigurationBuilderFileBased",
            "TestCombinedConfigurationBuilder",
            "TestCombinedConfigurationBuilderVFS",
            "TestInMemoryNodeModel",
            "TestServletRequestConfiguration",
            "TestJNDIConfiguration",
            "TestDefaultBeanFactory",
            "TestCombinedBeanDeclaration",
            "TestNodeSelector",
            "TestJndiBuilderParametersImpl",
            "TestEnvironmentLookup",
            "TestXPathContextFactory",
            "TestConfigurationUtils",
            "TestBasicConfigurationBuilder",
            "TestInMemoryNodeModelTrackedNodes",
            "TestQueryResult",
            "TestNodeAddData",
            "TestParameters",
            "TestMultiFileBuilderParametersImpl",
            "TestDataConfiguration",
            "TestFileBasedConfigurationBuilder",
            "TestFileHandlerReloadingDetector",
            "TestOverrideCombiner",
            "TestHierarchicalConfiguration",
            "TestConstantLookup",
            "TestCombinedLocationStrategy",
            "TestDisabledListDelimiterHandler",
            "TestManagedReloadingDetector",
            "TestHomeDirectoryLocationStrategy",
            "TestPropertiesConfigurationEvents",
            "TestEvent",
            "TestPropertiesBuilderParametersImpl",
            "TestHierarchicalXMLConfiguration",
            "TestXMLDocumentHelper",
            "TestCombinedConfiguration",
            "TestBasicBuilderParameters",
            "TestImmutableNode",
            "TestFileSystemLocationStrategy",
            "TestConfigurationMap",
            "TestDefaultExpressionEngineSymbols",
            "TestUnionCombiner",
            "TestConfigurationLogger",
            "TestMultiFileConfigurationBuilder",
            "TestReloadingMultiFileConfigurationBuilder",
            "TestXMLPropertyListConfigurationEvents",
            "TestEqualBehaviour",
            "TestReloadingBuilderSupportListener",
            "TestHierarchicalConfigurationEvents",
            "TestDummyLookup",
            "TestAbsoluteNameLocationStrategy",
            "TestConfigurationNodeIteratorChildren",
            "TestCompositeConfigurationNonStringProperties",
            "TestConfigurationConverter",
            "TestJNDIEnvironmentValues",
            "TestDefaultParametersManager",
            "TestNullJNDIEnvironmentValues",
            "TestXMLConfigurationEvents",
            "TestDefaultFileSystem",
            "TestServletContextConfiguration",
            "TestMapConfiguration",
            "TestNullCompositeConfiguration",
            "TestEventListenerParameters",
            "TestXMLBuilderParametersImpl",
            "TestAppletConfiguration",
            "TestTrackedNodeHandler",
            "TestConfigurationPropertiesFactoryBean",
            "TestDatabaseBuilderParametersImpl",
            "TestInMemoryNodeModelReferences",
            "TestDatabaseConfigurationEvents",
            "TestBeanHelper",
            "TestConfigurationNodePointerFactory",
            "TestConfigurationEventTypes",
            "TestBaseConfigurationBuilderProvider",
            "TestXMLPropertiesConfiguration",
            "TestConfigurationInterpolator",
            "TestTreeData",
            "TestThreesomeConfiguration",
            "TestYAMLConfiguration",
            "TestINIConfiguration",
            "TestMapConfigurationEvents",
            "TestBasicConfigurationBuilderEvents",
            "TestMultiWrapDynaBean",
            "TestHierarchicalBuilderParametersImpl",
            "TestSubsetConfiguration",
            "TestPropertyListConfiguration",
            "TestVFSFileHandlerReloadingDetector",
            "TestDefaultConfigurationKey",
            "TestInterpolatorSpecification",
            "TestDefaultListDelimiterHandler",
            "TestConfigurationLookup",
            "TestBaseHierarchicalConfigurationSynchronization",
            "TestDefaultExpressionEngine",
            "TestTrackedNodeModel",
            "TestSystemConfiguration",
            "TestFileExtensionConfigurationBuilderProvider",
            "TestExprLookup",
            "TestConfigurationSet",
            "TestCatalogResolver",
            "TestBaseConfiguration",
            "TestBuilderConfigurationWrapperFactory",
            "TestProvidedURLLocationStrategy",
            "TestConfigurationIteratorAttributes",
            "TestBasePathLocationStrategy",
            "TestConfigurationAttributePointer",
            "TestServletConfiguration",
            "TestConfigurationDynaBean",
            "TestReloadingController",
            "TestReadWriteSynchronizer",
            "TestClasspathLocationStrategy",
            "TestCombinedBuilderParametersImpl",
            "TestFileHandler",
            "TestDefaultReloadingDetectorFactory",
            "TestReloadingFileBasedConfigurationBuilder",
            "TestEventSource",
            "TestEnvironmentConfiguration",
            "TestNodeNameMatchers",
            "TestBaseConfigurationXMLReader",
            "TestConstructorArg",
            "TestDefaultConversionHandler",
            "TestXMLConfiguration_605",
            "TestXMLPropertyListConfiguration",
            "TestFileLocatorUtils",
            "TestPropertyListParser",
            "TestNodeTreeWalker",
            "TestPropertiesConfigurationLayout",
            "TestSubsetConfigurationEvents",
            "TestConfigurations",
            "TestSystemPropertiesLookup",
            "TestPropertyListConfigurationEvents",
            "TestAbstractConfigurationSynchronization",
            "TestEventListenerList",
            "TestConfigurationNodePointer",
            "TestMergeCombiner",
            "TestServletFilterConfiguration",
            "TestAutoSaveListener",
            "TestAbstractHierarchicalConfiguration",
            "TestEqualsProperty",
            "TestCombinedReloadingController",
            "TestDatabaseConfiguration",
            "TestHierarchicalConfigurationXMLReader",
            "TestXPathExpressionEngine",
            "TestPropertiesSequence",
            "TestXPathExpressionEngineInConfig",
            "TestConfigurationDynaBeanXMLConfig",
            "TestNodeHandlerDecorator",
            "TestJSONConfiguration",
            "TestConfigurationDeclaration",
            "TestXMLConfiguration",
            "TestPropertiesConfiguration",
            "TestFileLocator",
            "TestCompositeConfiguration",
            "TestPropertyConverter",
            "TestStrictConfigurationComparator",
            "TestSubnodeConfiguration",
            "TestXMLBeanDeclaration",
            "TestAbstractConfigurationBasicFeatures",
            "TestDynamicCombinedConfiguration",
            "TestCopyObjectDefaultHandler",
            "TestImmutableConfiguration",
            "TestReloadingCombinedConfigurationBuilder",
            "TestEventType"
        ],
        "tests_cases_num": {
            "TestAbstractConfigurationBasicFeatures": 64,
            "TestAbstractConfigurationSynchronization": 19,
            "TestAbstractHierarchicalConfiguration": 54,
            "TestBaseConfiguration": 60,
            "TestBaseConfigurationXMLReader": 4,
            "TestBaseHierarchicalConfigurationSynchronization": 14,
            "TestBaseNullConfiguration": 37,
            "TestCatalogResolver": 5,
            "TestCombinedConfiguration": 58,
            "TestCompositeConfiguration": 52,
            "TestCompositeConfigurationNonStringProperties": 23,
            "TestConfigurationConverter": 6,
            "TestConfigurationLookup": 5,
            "TestConfigurationMap": 1,
            "TestConfigurationSet": 2,
            "TestConfigurationUtils": 36,
            "TestDataConfiguration": 59,
            "TestDatabaseConfiguration": 36,
            "TestDynamicCombinedConfiguration": 12,
            "TestEnvironmentConfiguration": 5,
            "TestEqualBehaviour": 7,
            "TestEqualsProperty": 1,
            "TestHierarchicalConfiguration": 37,
            "TestHierarchicalConfigurationXMLReader": 1,
            "TestHierarchicalXMLConfiguration": 10,
            "TestINIConfiguration": 65,
            "TestImmutableConfiguration": 10,
            "TestJNDIConfiguration": 27,
            "TestJNDIEnvironmentValues": 12,
            "TestJSONConfiguration": 10,
            "TestMapConfiguration": 20,
            "TestNonStringProperties": 23,
            "TestNullCompositeConfiguration": 23,
            "TestNullJNDIEnvironmentValues": 12,
            "TestPatternSubtreeConfiguration": 3,
            "TestPropertiesConfiguration": 72,
            "TestPropertiesConfigurationLayout": 38,
            "TestPropertiesSequence": 3,
            "TestStrictConfigurationComparator": 2,
            "TestSubnodeConfiguration": 24,
            "TestSubsetConfiguration": 21,
            "TestSystemConfiguration": 5,
            "TestThreesomeConfiguration": 3,
            "TestXMLConfiguration": 94,
            "TestXMLConfiguration_605": 8,
            "TestXMLDocumentHelper": 11,
            "TestXMLListHandling": 5,
            "TestXMLPropertiesConfiguration": 4,
            "TestYAMLConfiguration": 9,
            "TestBeanHelper": 27,
            "TestCombinedBeanDeclaration": 12,
            "TestConfigurationDynaBean": 42,
            "TestConfigurationDynaBeanXMLConfig": 42,
            "TestConstructorArg": 6,
            "TestDefaultBeanFactory": 11,
            "TestXMLBeanDeclaration": 28,
            "TestAutoSaveListener": 7,
            "TestBasicBuilderParameters": 34,
            "TestBasicConfigurationBuilder": 27,
            "TestBasicConfigurationBuilderEvents": 11,
            "TestBuilderConfigurationWrapperFactory": 8,
            "TestCopyObjectDefaultHandler": 4,
            "TestDatabaseBuilderParametersImpl": 8,
            "TestDefaultParametersManager": 9,
            "TestDefaultReloadingDetectorFactory": 2,
            "TestEventListenerParameters": 4,
            "TestFileBasedBuilderParameters": 24,
            "TestFileBasedConfigurationBuilder": 24,
            "TestHierarchicalBuilderParametersImpl": 3,
            "TestJndiBuilderParametersImpl": 4,
            "TestPropertiesBuilderParametersImpl": 6,
            "TestReloadingBuilderSupportListener": 2,
            "TestReloadingFileBasedConfigurationBuilder": 9,
            "TestXMLBuilderParametersImpl": 8,
            "TestBaseConfigurationBuilderProvider": 9,
            "TestCombinedBuilderParametersImpl": 27,
            "TestCombinedConfigurationBuilder": 51,
            "TestCombinedConfigurationBuilderVFS": 52,
            "TestConfigurationDeclaration": 5,
            "TestFileExtensionConfigurationBuilderProvider": 10,
            "TestMultiFileBuilderParametersImpl": 7,
            "TestMultiFileConfigurationBuilder": 16,
            "TestMultiWrapDynaBean": 13,
            "TestReloadingCombinedConfigurationBuilder": 5,
            "TestReloadingCombinedConfigurationBuilderFileBased": 4,
            "TestReloadingMultiFileConfigurationBuilder": 6,
            "TestConfigurations": 32,
            "TestParameters": 19,
            "TestDefaultConversionHandler": 23,
            "TestDefaultListDelimiterHandler": 13,
            "TestDisabledListDelimiterHandler": 13,
            "TestPropertyConverter": 26,
            "TestConfigurationEventTypes": 19,
            "TestDatabaseConfigurationEvents": 8,
            "TestEvent": 3,
            "TestEventListenerList": 31,
            "TestEventSource": 19,
            "TestEventType": 1,
            "TestHierarchicalConfigurationEvents": 13,
            "TestMapConfigurationEvents": 8,
            "TestPropertiesConfigurationEvents": 8,
            "TestSubsetConfigurationEvents": 8,
            "TestXMLConfigurationEvents": 13,
            "TestConfigurationInterpolator": 41,
            "TestConstantLookup": 8,
            "TestDummyLookup": 1,
            "TestEnvironmentLookup": 2,
            "TestExprLookup": 6,
            "TestInterpolatorSpecification": 10,
            "TestSystemPropertiesLookup": 2,
            "TestAbsoluteNameLocationStrategy": 4,
            "TestBasePathLocationStrategy": 4,
            "TestClasspathLocationStrategy": 3,
            "TestCombinedLocationStrategy": 7,
            "TestConfigurationLogger": 16,
            "TestDefaultFileSystem": 3,
            "TestFileHandler": 85,
            "TestFileLocator": 8,
            "TestFileLocatorUtils": 36,
            "TestFileSystemLocationStrategy": 1,
            "TestHomeDirectoryLocationStrategy": 6,
            "TestProvidedURLLocationStrategy": 2,
            "TestPropertyListConfiguration": 23,
            "TestPropertyListConfigurationEvents": 10,
            "TestPropertyListParser": 4,
            "TestXMLPropertyListConfiguration": 24,
            "TestXMLPropertyListConfigurationEvents": 10,
            "TestCombinedReloadingController": 8,
            "TestFileHandlerReloadingDetector": 11,
            "TestManagedReloadingDetector": 3,
            "TestPeriodicReloadingTrigger": 9,
            "TestReloadingController": 8,
            "TestVFSFileHandlerReloadingDetector": 6,
            "TestConfigurationPropertiesFactoryBean": 10,
            "TestConfigurationPropertySource": 1,
            "TestReadWriteSynchronizer": 3,
            "TestDefaultConfigurationKey": 33,
            "TestDefaultExpressionEngine": 38,
            "TestDefaultExpressionEngineSymbols": 6,
            "TestImmutableNode": 35,
            "TestInMemoryNodeModel": 39,
            "TestInMemoryNodeModelReferences": 12,
            "TestInMemoryNodeModelTrackedNodes": 43,
            "TestMergeCombiner": 8,
            "TestNodeAddData": 4,
            "TestNodeHandlerDecorator": 25,
            "TestNodeNameMatchers": 6,
            "TestNodeSelector": 12,
            "TestNodeTreeWalker": 8,
            "TestNodeUpdateData": 7,
            "TestOverrideCombiner": 9,
            "TestQueryResult": 9,
            "TestTrackedNodeHandler": 2,
            "TestTrackedNodeModel": 13,
            "TestTreeData": 25,
            "TestUnionCombiner": 6,
            "TestConfigurationAttributePointer": 13,
            "TestConfigurationIteratorAttributes": 6,
            "TestConfigurationNodeIteratorChildren": 13,
            "TestConfigurationNodePointer": 7,
            "TestConfigurationNodePointerFactory": 8,
            "TestXPathContextFactory": 1,
            "TestXPathExpressionEngine": 34,
            "TestXPathExpressionEngineInConfig": 6,
            "TestAppletConfiguration": 12,
            "TestServletConfiguration": 12,
            "TestServletContextConfiguration": 12,
            "TestServletFilterConfiguration": 12,
            "TestServletRequestConfiguration": 13
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+      <action dev=\"ggregory\" type=\"update\" issue=\"CONFIGURATION-724\">\n+        Add support for Commons Text 1.4 localhost string lookup as a default lookup.\n+      </action>\n+    LOCAL_HOST(\"localhost\", new StringLookupAdapter(StringLookupFactory.INSTANCE.localHostStringLookup())),\n+    \n+    public String getPrefix() {\n+    public Lookup getLookup() {\n+\r\n+\r\n+\r\n+\r\n+    private final StringLookup stringLookup;\r\n+\r\n+    StringLookupAdapter(StringLookup stringLookup) {\r\n+        super();\r\n+        this.stringLookup = Objects.requireNonNull(stringLookup, \"stringLookup\");\r\n+    }\r\n+\r\n+    @Override\r\n+    public Object lookup(String key) {\r\n+        return stringLookup.lookup(key);\r\n+    }\r\n+\r\n+    public static void testInterpolationLocalhost(Configuration config)\n+    {\n+        String[] localhostKeys =\n+        { \"name\", \"canonical-name\", \"address\" };\n+        String[] localhostValues = null;\n+        try {\n+            localhostValues = new String[] { \n+                    InetAddress.getLocalHost().getHostName(), \n+                    InetAddress.getLocalHost().getCanonicalHostName(), \n+                    InetAddress.getLocalHost().getHostAddress() };\n+        } catch (UnknownHostException e) {\n+            Assert.fail(e);\n+        }\n+        for (int i = 0; i < localhostKeys.length; i++)\n+        {\n+            config.addProperty(\"prop\" + i, \"${localhost:\" + localhostKeys[i] + \"}\");\n+        }\n+        for (int i = 0; i < localhostKeys.length; i++)\n+        {\n+            assertEquals(\"Wrong value for system property \"\n+                    + localhostKeys[i], localhostValues[i],\n+                    config.getString(\"prop\" + i));\n+        }\n+    }\n+    @Test\n+    public void testInterpolationLocalhost()\n+    {\n+        InterpolationTestHelper.testInterpolationLocalhost(config);\n+    }\n+    @Test\n+    public void testInterpolationLocalhost()\n+    {\n+        InterpolationTestHelper.testInterpolationLocalhost(config);\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java": "import org.apache.commons.text.lookup.StringLookupFactory;\n    LOCAL_HOST(\"localhost\", new StringLookupAdapter(StringLookupFactory.INSTANCE.localHostStringLookup())),\n    public String getPrefix() {\n    public Lookup getLookup() {\n",
            "src/main/java/org/apache/commons/configuration2/interpol/StringLookupAdapter.java": "package org.apache.commons.configuration2.interpol;\nimport java.util.Objects;\nimport org.apache.commons.text.lookup.StringLookup;\nclass StringLookupAdapter implements Lookup {\n    private final StringLookup stringLookup;\n    StringLookupAdapter(StringLookup stringLookup) {\n        super();\n        this.stringLookup = Objects.requireNonNull(stringLookup, \"stringLookup\");\n    }\n    @Override\n    public Object lookup(String key) {\n        return stringLookup.lookup(key);\n    }\n}\n",
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java": "import java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport junitx.framework.Assert;\n    public static void testInterpolationLocalhost(Configuration config)\n    {\n        String[] localhostKeys =\n        { \"name\", \"canonical-name\", \"address\" };\n        String[] localhostValues = null;\n        try {\n            localhostValues = new String[] { \n                    InetAddress.getLocalHost().getHostName(), \n                    InetAddress.getLocalHost().getCanonicalHostName(), \n                    InetAddress.getLocalHost().getHostAddress() };\n        } catch (UnknownHostException e) {\n            Assert.fail(e);\n        }\n        for (int i = 0; i < localhostKeys.length; i++)\n        {\n            config.addProperty(\"prop\" + i, \"${localhost:\" + localhostKeys[i] + \"}\");\n        }\n        for (int i = 0; i < localhostKeys.length; i++)\n        {\n            assertEquals(\"Wrong value for system property \"\n                    + localhostKeys[i], localhostValues[i],\n                    config.getString(\"prop\" + i));\n        }\n    }\n",
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java": "    @Test\n    public void testInterpolationLocalhost()\n    {\n        InterpolationTestHelper.testInterpolationLocalhost(config);\n    }\n",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java": "    @Test\n    public void testInterpolationLocalhost()\n    {\n        InterpolationTestHelper.testInterpolationLocalhost(config);\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java": [
                19,
                43,
                78,
                87
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/StringLookupAdapter.java": [
                17,
                19,
                21,
                28,
                30,
                32,
                33,
                34,
                35,
                37,
                38,
                39,
                40,
                42
            ],
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java": [
                23,
                24,
                32,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                210,
                211,
                212,
                213,
                214,
                215,
                216
            ],
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java": [
                761,
                762,
                763,
                764,
                765
            ],
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java": [
                563,
                564,
                565,
                566,
                567
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java": "    public String getPrefix()\n    {\n    public Lookup getLookup()\n    {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java": [
                73,
                74,
                83,
                84
            ]
        }
    },
    {
        "commit": "27ae87a5",
        "prev_commit": "4c55341a",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestXMLListHandling",
            "TestPeriodicReloadingTrigger",
            "TestConfigurationPropertySource",
            "TestPatternSubtreeConfiguration",
            "TestBaseNullConfiguration",
            "TestNonStringProperties",
            "TestNodeUpdateData",
            "TestFileBasedBuilderParameters",
            "TestReloadingCombinedConfigurationBuilderFileBased",
            "TestCombinedConfigurationBuilder",
            "TestCombinedConfigurationBuilderVFS",
            "TestInMemoryNodeModel",
            "TestServletRequestConfiguration",
            "TestJNDIConfiguration",
            "TestDefaultBeanFactory",
            "TestCombinedBeanDeclaration",
            "TestNodeSelector",
            "TestJndiBuilderParametersImpl",
            "TestEnvironmentLookup",
            "TestXPathContextFactory",
            "TestConfigurationUtils",
            "TestBasicConfigurationBuilder",
            "TestInMemoryNodeModelTrackedNodes",
            "TestQueryResult",
            "TestNodeAddData",
            "TestParameters",
            "TestMultiFileBuilderParametersImpl",
            "TestDataConfiguration",
            "TestFileBasedConfigurationBuilder",
            "TestFileHandlerReloadingDetector",
            "TestOverrideCombiner",
            "TestHierarchicalConfiguration",
            "TestConstantLookup",
            "TestCombinedLocationStrategy",
            "TestDisabledListDelimiterHandler",
            "TestManagedReloadingDetector",
            "TestHomeDirectoryLocationStrategy",
            "TestPropertiesConfigurationEvents",
            "TestEvent",
            "TestPropertiesBuilderParametersImpl",
            "TestHierarchicalXMLConfiguration",
            "TestXMLDocumentHelper",
            "TestCombinedConfiguration",
            "TestBasicBuilderParameters",
            "TestImmutableNode",
            "TestFileSystemLocationStrategy",
            "TestConfigurationMap",
            "TestDefaultExpressionEngineSymbols",
            "TestUnionCombiner",
            "TestConfigurationLogger",
            "TestMultiFileConfigurationBuilder",
            "TestReloadingMultiFileConfigurationBuilder",
            "TestXMLPropertyListConfigurationEvents",
            "TestEqualBehaviour",
            "TestReloadingBuilderSupportListener",
            "TestHierarchicalConfigurationEvents",
            "TestDummyLookup",
            "TestAbsoluteNameLocationStrategy",
            "TestConfigurationNodeIteratorChildren",
            "TestCompositeConfigurationNonStringProperties",
            "TestConfigurationConverter",
            "TestJNDIEnvironmentValues",
            "TestDefaultParametersManager",
            "TestNullJNDIEnvironmentValues",
            "TestXMLConfigurationEvents",
            "TestDefaultFileSystem",
            "TestServletContextConfiguration",
            "TestMapConfiguration",
            "TestNullCompositeConfiguration",
            "TestEventListenerParameters",
            "TestXMLBuilderParametersImpl",
            "TestAppletConfiguration",
            "TestTrackedNodeHandler",
            "TestConfigurationPropertiesFactoryBean",
            "TestDatabaseBuilderParametersImpl",
            "TestInMemoryNodeModelReferences",
            "TestDatabaseConfigurationEvents",
            "TestBeanHelper",
            "TestConfigurationNodePointerFactory",
            "TestConfigurationEventTypes",
            "TestBaseConfigurationBuilderProvider",
            "TestXMLPropertiesConfiguration",
            "TestConfigurationInterpolator",
            "TestTreeData",
            "TestThreesomeConfiguration",
            "TestYAMLConfiguration",
            "TestINIConfiguration",
            "TestMapConfigurationEvents",
            "TestBasicConfigurationBuilderEvents",
            "TestMultiWrapDynaBean",
            "TestHierarchicalBuilderParametersImpl",
            "TestSubsetConfiguration",
            "TestPropertyListConfiguration",
            "TestVFSFileHandlerReloadingDetector",
            "TestDefaultConfigurationKey",
            "TestInterpolatorSpecification",
            "TestDefaultListDelimiterHandler",
            "TestConfigurationLookup",
            "TestBaseHierarchicalConfigurationSynchronization",
            "TestDefaultExpressionEngine",
            "TestTrackedNodeModel",
            "TestSystemConfiguration",
            "TestFileExtensionConfigurationBuilderProvider",
            "TestExprLookup",
            "TestConfigurationSet",
            "TestCatalogResolver",
            "TestBaseConfiguration",
            "TestBuilderConfigurationWrapperFactory",
            "TestProvidedURLLocationStrategy",
            "TestConfigurationIteratorAttributes",
            "TestBasePathLocationStrategy",
            "TestConfigurationAttributePointer",
            "TestServletConfiguration",
            "TestConfigurationDynaBean",
            "TestReloadingController",
            "TestReadWriteSynchronizer",
            "TestClasspathLocationStrategy",
            "TestCombinedBuilderParametersImpl",
            "TestFileHandler",
            "TestDefaultReloadingDetectorFactory",
            "TestReloadingFileBasedConfigurationBuilder",
            "TestEventSource",
            "TestEnvironmentConfiguration",
            "TestNodeNameMatchers",
            "TestBaseConfigurationXMLReader",
            "TestConstructorArg",
            "TestDefaultConversionHandler",
            "TestXMLConfiguration_605",
            "TestXMLPropertyListConfiguration",
            "TestFileLocatorUtils",
            "TestPropertyListParser",
            "TestNodeTreeWalker",
            "TestPropertiesConfigurationLayout",
            "TestSubsetConfigurationEvents",
            "TestConfigurations",
            "TestSystemPropertiesLookup",
            "TestPropertyListConfigurationEvents",
            "TestAbstractConfigurationSynchronization",
            "TestEventListenerList",
            "TestConfigurationNodePointer",
            "TestMergeCombiner",
            "TestServletFilterConfiguration",
            "TestAutoSaveListener",
            "TestAbstractHierarchicalConfiguration",
            "TestEqualsProperty",
            "TestCombinedReloadingController",
            "TestDatabaseConfiguration",
            "TestHierarchicalConfigurationXMLReader",
            "TestXPathExpressionEngine",
            "TestPropertiesSequence",
            "TestXPathExpressionEngineInConfig",
            "TestConfigurationDynaBeanXMLConfig",
            "TestNodeHandlerDecorator",
            "TestJSONConfiguration",
            "TestConfigurationDeclaration",
            "TestXMLConfiguration",
            "TestPropertiesConfiguration",
            "TestFileLocator",
            "TestCompositeConfiguration",
            "TestPropertyConverter",
            "TestStrictConfigurationComparator",
            "TestSubnodeConfiguration",
            "TestXMLBeanDeclaration",
            "TestAbstractConfigurationBasicFeatures",
            "TestDynamicCombinedConfiguration",
            "TestCopyObjectDefaultHandler",
            "TestImmutableConfiguration",
            "TestReloadingCombinedConfigurationBuilder",
            "TestEventType"
        ],
        "tests_cases_num": {
            "TestAbstractConfigurationBasicFeatures": 64,
            "TestAbstractConfigurationSynchronization": 19,
            "TestAbstractHierarchicalConfiguration": 54,
            "TestBaseConfiguration": 60,
            "TestBaseConfigurationXMLReader": 4,
            "TestBaseHierarchicalConfigurationSynchronization": 14,
            "TestBaseNullConfiguration": 37,
            "TestCatalogResolver": 5,
            "TestCombinedConfiguration": 58,
            "TestCompositeConfiguration": 52,
            "TestCompositeConfigurationNonStringProperties": 23,
            "TestConfigurationConverter": 6,
            "TestConfigurationLookup": 5,
            "TestConfigurationMap": 1,
            "TestConfigurationSet": 2,
            "TestConfigurationUtils": 36,
            "TestDataConfiguration": 59,
            "TestDatabaseConfiguration": 36,
            "TestDynamicCombinedConfiguration": 12,
            "TestEnvironmentConfiguration": 5,
            "TestEqualBehaviour": 7,
            "TestEqualsProperty": 1,
            "TestHierarchicalConfiguration": 37,
            "TestHierarchicalConfigurationXMLReader": 1,
            "TestHierarchicalXMLConfiguration": 10,
            "TestINIConfiguration": 65,
            "TestImmutableConfiguration": 10,
            "TestJNDIConfiguration": 27,
            "TestJNDIEnvironmentValues": 12,
            "TestJSONConfiguration": 10,
            "TestMapConfiguration": 20,
            "TestNonStringProperties": 23,
            "TestNullCompositeConfiguration": 23,
            "TestNullJNDIEnvironmentValues": 12,
            "TestPatternSubtreeConfiguration": 3,
            "TestPropertiesConfiguration": 75,
            "TestPropertiesConfigurationLayout": 38,
            "TestPropertiesSequence": 3,
            "TestStrictConfigurationComparator": 2,
            "TestSubnodeConfiguration": 24,
            "TestSubsetConfiguration": 21,
            "TestSystemConfiguration": 5,
            "TestThreesomeConfiguration": 3,
            "TestXMLConfiguration": 94,
            "TestXMLConfiguration_605": 8,
            "TestXMLDocumentHelper": 11,
            "TestXMLListHandling": 5,
            "TestXMLPropertiesConfiguration": 4,
            "TestYAMLConfiguration": 9,
            "TestBeanHelper": 27,
            "TestCombinedBeanDeclaration": 12,
            "TestConfigurationDynaBean": 42,
            "TestConfigurationDynaBeanXMLConfig": 42,
            "TestConstructorArg": 6,
            "TestDefaultBeanFactory": 11,
            "TestXMLBeanDeclaration": 28,
            "TestAutoSaveListener": 7,
            "TestBasicBuilderParameters": 34,
            "TestBasicConfigurationBuilder": 27,
            "TestBasicConfigurationBuilderEvents": 11,
            "TestBuilderConfigurationWrapperFactory": 8,
            "TestCopyObjectDefaultHandler": 4,
            "TestDatabaseBuilderParametersImpl": 8,
            "TestDefaultParametersManager": 9,
            "TestDefaultReloadingDetectorFactory": 2,
            "TestEventListenerParameters": 4,
            "TestFileBasedBuilderParameters": 24,
            "TestFileBasedConfigurationBuilder": 24,
            "TestHierarchicalBuilderParametersImpl": 3,
            "TestJndiBuilderParametersImpl": 4,
            "TestPropertiesBuilderParametersImpl": 6,
            "TestReloadingBuilderSupportListener": 2,
            "TestReloadingFileBasedConfigurationBuilder": 9,
            "TestXMLBuilderParametersImpl": 8,
            "TestBaseConfigurationBuilderProvider": 9,
            "TestCombinedBuilderParametersImpl": 27,
            "TestCombinedConfigurationBuilder": 51,
            "TestCombinedConfigurationBuilderVFS": 52,
            "TestConfigurationDeclaration": 5,
            "TestFileExtensionConfigurationBuilderProvider": 10,
            "TestMultiFileBuilderParametersImpl": 7,
            "TestMultiFileConfigurationBuilder": 16,
            "TestMultiWrapDynaBean": 13,
            "TestReloadingCombinedConfigurationBuilder": 5,
            "TestReloadingCombinedConfigurationBuilderFileBased": 4,
            "TestReloadingMultiFileConfigurationBuilder": 6,
            "TestConfigurations": 32,
            "TestParameters": 19,
            "TestDefaultConversionHandler": 23,
            "TestDefaultListDelimiterHandler": 13,
            "TestDisabledListDelimiterHandler": 13,
            "TestPropertyConverter": 26,
            "TestConfigurationEventTypes": 19,
            "TestDatabaseConfigurationEvents": 8,
            "TestEvent": 3,
            "TestEventListenerList": 31,
            "TestEventSource": 19,
            "TestEventType": 1,
            "TestHierarchicalConfigurationEvents": 13,
            "TestMapConfigurationEvents": 8,
            "TestPropertiesConfigurationEvents": 8,
            "TestSubsetConfigurationEvents": 8,
            "TestXMLConfigurationEvents": 13,
            "TestConfigurationInterpolator": 41,
            "TestConstantLookup": 8,
            "TestDummyLookup": 1,
            "TestEnvironmentLookup": 2,
            "TestExprLookup": 6,
            "TestInterpolatorSpecification": 10,
            "TestSystemPropertiesLookup": 2,
            "TestAbsoluteNameLocationStrategy": 4,
            "TestBasePathLocationStrategy": 4,
            "TestClasspathLocationStrategy": 3,
            "TestCombinedLocationStrategy": 7,
            "TestConfigurationLogger": 16,
            "TestDefaultFileSystem": 3,
            "TestFileHandler": 85,
            "TestFileLocator": 8,
            "TestFileLocatorUtils": 36,
            "TestFileSystemLocationStrategy": 1,
            "TestHomeDirectoryLocationStrategy": 6,
            "TestProvidedURLLocationStrategy": 2,
            "TestPropertyListConfiguration": 23,
            "TestPropertyListConfigurationEvents": 10,
            "TestPropertyListParser": 4,
            "TestXMLPropertyListConfiguration": 24,
            "TestXMLPropertyListConfigurationEvents": 10,
            "TestCombinedReloadingController": 8,
            "TestFileHandlerReloadingDetector": 11,
            "TestManagedReloadingDetector": 3,
            "TestPeriodicReloadingTrigger": 9,
            "TestReloadingController": 8,
            "TestVFSFileHandlerReloadingDetector": 6,
            "TestConfigurationPropertiesFactoryBean": 10,
            "TestConfigurationPropertySource": 1,
            "TestReadWriteSynchronizer": 3,
            "TestDefaultConfigurationKey": 33,
            "TestDefaultExpressionEngine": 38,
            "TestDefaultExpressionEngineSymbols": 6,
            "TestImmutableNode": 35,
            "TestInMemoryNodeModel": 39,
            "TestInMemoryNodeModelReferences": 12,
            "TestInMemoryNodeModelTrackedNodes": 43,
            "TestMergeCombiner": 8,
            "TestNodeAddData": 4,
            "TestNodeHandlerDecorator": 25,
            "TestNodeNameMatchers": 6,
            "TestNodeSelector": 12,
            "TestNodeTreeWalker": 8,
            "TestNodeUpdateData": 7,
            "TestOverrideCombiner": 9,
            "TestQueryResult": 9,
            "TestTrackedNodeHandler": 2,
            "TestTrackedNodeModel": 13,
            "TestTreeData": 25,
            "TestUnionCombiner": 6,
            "TestConfigurationAttributePointer": 13,
            "TestConfigurationIteratorAttributes": 6,
            "TestConfigurationNodeIteratorChildren": 13,
            "TestConfigurationNodePointer": 7,
            "TestConfigurationNodePointerFactory": 8,
            "TestXPathContextFactory": 1,
            "TestXPathExpressionEngine": 34,
            "TestXPathExpressionEngineInConfig": 6,
            "TestAppletConfiguration": 12,
            "TestServletConfiguration": 12,
            "TestServletContextConfiguration": 12,
            "TestServletFilterConfiguration": 12,
            "TestServletRequestConfiguration": 13
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        org.apache.commons.configuration2.DatabaseConfiguration never closes result sets and statements.\n+                try (final PreparedStatement pstmt = initStatement(query.toString(),\n+                        false, key, String.valueOf(obj)))\n+                    if (configurationNameColumn != null)\n+                    {\n+                        pstmt.setString(3, configurationName);\n+                    }\n+                    pstmt.executeUpdate();\n+                    return null;\n+                }\n+                try (final PreparedStatement ps = initStatement(String.format(\n+                        SQL_CLEAR_PROPERTY, table, keyColumn), true, key))\n+                {\n+                    ps.executeUpdate();\n+                    return null;\n+                }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": "                try (final PreparedStatement pstmt = initStatement(query.toString(),\n                        false, key, String.valueOf(obj)))\n                    if (configurationNameColumn != null)\n                    {\n                        pstmt.setString(3, configurationName);\n                    }\n                    pstmt.executeUpdate();\n                    return null;\n                }\n                try (final PreparedStatement ps = initStatement(String.format(\n                        SQL_CLEAR_PROPERTY, table, keyColumn), true, key))\n                {\n                    ps.executeUpdate();\n                    return null;\n                }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": [
                393,
                394,
                396,
                397,
                398,
                399,
                401,
                402,
                403,
                517,
                518,
                519,
                520,
                521,
                522
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": "                final PreparedStatement pstmt = initStatement(query.toString(),\n                        false, key, String.valueOf(obj));\n                if (configurationNameColumn != null)\n                    pstmt.setString(3, configurationName);\n                }\n                pstmt.executeUpdate();\n                return null;\n                final PreparedStatement ps = initStatement(String.format(\n                        SQL_CLEAR_PROPERTY, table, keyColumn), true, key);\n                ps.executeUpdate();\n                return null;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": [
                393,
                394,
                395,
                397,
                398,
                400,
                401,
                515,
                516,
                517,
                518
            ]
        }
    },
    {
        "commit": "f9e8b415",
        "prev_commit": "61732d3c",
        "changed_files": [
            "src/changes/changes.xml",
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderProperties.java",
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderProperties.java",
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "TestXMLListHandling",
            "TestPeriodicReloadingTrigger",
            "TestConfigurationPropertySource",
            "TestPatternSubtreeConfiguration",
            "TestBaseNullConfiguration",
            "TestNonStringProperties",
            "TestNodeUpdateData",
            "TestFileBasedBuilderParameters",
            "TestReloadingCombinedConfigurationBuilderFileBased",
            "TestCombinedConfigurationBuilder",
            "TestCombinedConfigurationBuilderVFS",
            "TestInMemoryNodeModel",
            "TestServletRequestConfiguration",
            "TestJNDIConfiguration",
            "TestDefaultBeanFactory",
            "TestCombinedBeanDeclaration",
            "TestNodeSelector",
            "TestJndiBuilderParametersImpl",
            "TestEnvironmentLookup",
            "TestXPathContextFactory",
            "TestConfigurationUtils",
            "TestBasicConfigurationBuilder",
            "TestInMemoryNodeModelTrackedNodes",
            "TestQueryResult",
            "TestNodeAddData",
            "TestParameters",
            "TestMultiFileBuilderParametersImpl",
            "TestDataConfiguration",
            "TestFileBasedConfigurationBuilder",
            "TestFileHandlerReloadingDetector",
            "TestOverrideCombiner",
            "TestHierarchicalConfiguration",
            "TestConstantLookup",
            "TestCombinedLocationStrategy",
            "TestDisabledListDelimiterHandler",
            "TestManagedReloadingDetector",
            "TestHomeDirectoryLocationStrategy",
            "TestPropertiesConfigurationEvents",
            "TestEvent",
            "TestPropertiesBuilderParametersImpl",
            "TestHierarchicalXMLConfiguration",
            "TestXMLDocumentHelper",
            "TestCombinedConfiguration",
            "TestBasicBuilderParameters",
            "TestImmutableNode",
            "TestFileSystemLocationStrategy",
            "TestConfigurationMap",
            "TestDefaultExpressionEngineSymbols",
            "TestUnionCombiner",
            "TestConfigurationLogger",
            "TestMultiFileConfigurationBuilder",
            "TestReloadingMultiFileConfigurationBuilder",
            "TestXMLPropertyListConfigurationEvents",
            "TestEqualBehaviour",
            "TestReloadingBuilderSupportListener",
            "TestHierarchicalConfigurationEvents",
            "TestDummyLookup",
            "TestAbsoluteNameLocationStrategy",
            "TestConfigurationNodeIteratorChildren",
            "TestCompositeConfigurationNonStringProperties",
            "TestConfigurationConverter",
            "TestJNDIEnvironmentValues",
            "TestDefaultParametersManager",
            "TestNullJNDIEnvironmentValues",
            "TestXMLConfigurationEvents",
            "TestDefaultFileSystem",
            "TestServletContextConfiguration",
            "TestMapConfiguration",
            "TestNullCompositeConfiguration",
            "TestEventListenerParameters",
            "TestXMLBuilderParametersImpl",
            "TestAppletConfiguration",
            "TestTrackedNodeHandler",
            "TestConfigurationPropertiesFactoryBean",
            "TestDatabaseBuilderParametersImpl",
            "TestInMemoryNodeModelReferences",
            "TestDatabaseConfigurationEvents",
            "TestBeanHelper",
            "TestConfigurationNodePointerFactory",
            "TestConfigurationEventTypes",
            "TestBaseConfigurationBuilderProvider",
            "TestXMLPropertiesConfiguration",
            "TestConfigurationInterpolator",
            "TestTreeData",
            "TestThreesomeConfiguration",
            "TestYAMLConfiguration",
            "TestINIConfiguration",
            "TestMapConfigurationEvents",
            "TestBasicConfigurationBuilderEvents",
            "TestMultiWrapDynaBean",
            "TestHierarchicalBuilderParametersImpl",
            "TestSubsetConfiguration",
            "TestPropertyListConfiguration",
            "TestVFSFileHandlerReloadingDetector",
            "TestDefaultConfigurationKey",
            "TestInterpolatorSpecification",
            "TestDefaultListDelimiterHandler",
            "TestConfigurationLookup",
            "TestBaseHierarchicalConfigurationSynchronization",
            "TestDefaultExpressionEngine",
            "TestTrackedNodeModel",
            "TestSystemConfiguration",
            "TestFileExtensionConfigurationBuilderProvider",
            "TestExprLookup",
            "TestConfigurationSet",
            "TestCatalogResolver",
            "TestBaseConfiguration",
            "TestBuilderConfigurationWrapperFactory",
            "TestProvidedURLLocationStrategy",
            "TestConfigurationIteratorAttributes",
            "TestBasePathLocationStrategy",
            "TestConfigurationAttributePointer",
            "TestServletConfiguration",
            "TestConfigurationDynaBean",
            "TestReloadingController",
            "TestReadWriteSynchronizer",
            "TestClasspathLocationStrategy",
            "TestCombinedBuilderParametersImpl",
            "TestFileHandler",
            "TestDefaultReloadingDetectorFactory",
            "TestReloadingFileBasedConfigurationBuilder",
            "TestEventSource",
            "TestEnvironmentConfiguration",
            "TestNodeNameMatchers",
            "TestBaseConfigurationXMLReader",
            "TestConstructorArg",
            "TestDefaultConversionHandler",
            "TestXMLConfiguration_605",
            "TestXMLPropertyListConfiguration",
            "TestFileLocatorUtils",
            "TestPropertyListParser",
            "TestNodeTreeWalker",
            "TestPropertiesConfigurationLayout",
            "TestSubsetConfigurationEvents",
            "TestConfigurations",
            "TestSystemPropertiesLookup",
            "TestPropertyListConfigurationEvents",
            "TestAbstractConfigurationSynchronization",
            "TestEventListenerList",
            "TestConfigurationNodePointer",
            "TestMergeCombiner",
            "TestServletFilterConfiguration",
            "TestAutoSaveListener",
            "TestAbstractHierarchicalConfiguration",
            "TestEqualsProperty",
            "TestCombinedReloadingController",
            "TestDatabaseConfiguration",
            "TestHierarchicalConfigurationXMLReader",
            "TestXPathExpressionEngine",
            "TestPropertiesSequence",
            "TestXPathExpressionEngineInConfig",
            "TestConfigurationDynaBeanXMLConfig",
            "TestNodeHandlerDecorator",
            "TestJSONConfiguration",
            "TestConfigurationDeclaration",
            "TestXMLConfiguration",
            "TestPropertiesConfiguration",
            "TestFileLocator",
            "TestCompositeConfiguration",
            "TestPropertyConverter",
            "TestStrictConfigurationComparator",
            "TestSubnodeConfiguration",
            "TestXMLBeanDeclaration",
            "TestAbstractConfigurationBasicFeatures",
            "TestDynamicCombinedConfiguration",
            "TestCopyObjectDefaultHandler",
            "TestImmutableConfiguration",
            "TestReloadingCombinedConfigurationBuilder",
            "TestEventType"
        ],
        "tests_cases_num": {
            "TestAbstractConfigurationBasicFeatures": 64,
            "TestAbstractConfigurationSynchronization": 19,
            "TestAbstractHierarchicalConfiguration": 54,
            "TestBaseConfiguration": 60,
            "TestBaseConfigurationXMLReader": 4,
            "TestBaseHierarchicalConfigurationSynchronization": 14,
            "TestBaseNullConfiguration": 37,
            "TestCatalogResolver": 5,
            "TestCombinedConfiguration": 58,
            "TestCompositeConfiguration": 52,
            "TestCompositeConfigurationNonStringProperties": 23,
            "TestConfigurationConverter": 6,
            "TestConfigurationLookup": 5,
            "TestConfigurationMap": 1,
            "TestConfigurationSet": 2,
            "TestConfigurationUtils": 36,
            "TestDataConfiguration": 59,
            "TestDatabaseConfiguration": 36,
            "TestDynamicCombinedConfiguration": 12,
            "TestEnvironmentConfiguration": 5,
            "TestEqualBehaviour": 7,
            "TestEqualsProperty": 1,
            "TestHierarchicalConfiguration": 37,
            "TestHierarchicalConfigurationXMLReader": 1,
            "TestHierarchicalXMLConfiguration": 10,
            "TestINIConfiguration": 67,
            "TestImmutableConfiguration": 10,
            "TestJNDIConfiguration": 27,
            "TestJNDIEnvironmentValues": 12,
            "TestJSONConfiguration": 10,
            "TestMapConfiguration": 20,
            "TestNonStringProperties": 23,
            "TestNullCompositeConfiguration": 23,
            "TestNullJNDIEnvironmentValues": 12,
            "TestPatternSubtreeConfiguration": 3,
            "TestPropertiesConfiguration": 75,
            "TestPropertiesConfigurationLayout": 38,
            "TestPropertiesSequence": 3,
            "TestStrictConfigurationComparator": 2,
            "TestSubnodeConfiguration": 24,
            "TestSubsetConfiguration": 21,
            "TestSystemConfiguration": 5,
            "TestThreesomeConfiguration": 3,
            "TestXMLConfiguration": 94,
            "TestXMLConfiguration_605": 8,
            "TestXMLDocumentHelper": 11,
            "TestXMLListHandling": 5,
            "TestXMLPropertiesConfiguration": 4,
            "TestYAMLConfiguration": 9,
            "TestBeanHelper": 27,
            "TestCombinedBeanDeclaration": 12,
            "TestConfigurationDynaBean": 42,
            "TestConfigurationDynaBeanXMLConfig": 42,
            "TestConstructorArg": 6,
            "TestDefaultBeanFactory": 11,
            "TestXMLBeanDeclaration": 28,
            "TestAutoSaveListener": 7,
            "TestBasicBuilderParameters": 34,
            "TestBasicConfigurationBuilder": 27,
            "TestBasicConfigurationBuilderEvents": 11,
            "TestBuilderConfigurationWrapperFactory": 8,
            "TestCopyObjectDefaultHandler": 4,
            "TestDatabaseBuilderParametersImpl": 8,
            "TestDefaultParametersManager": 9,
            "TestDefaultReloadingDetectorFactory": 2,
            "TestEventListenerParameters": 4,
            "TestFileBasedBuilderParameters": 24,
            "TestFileBasedConfigurationBuilder": 24,
            "TestHierarchicalBuilderParametersImpl": 3,
            "TestJndiBuilderParametersImpl": 4,
            "TestPropertiesBuilderParametersImpl": 6,
            "TestReloadingBuilderSupportListener": 2,
            "TestReloadingFileBasedConfigurationBuilder": 9,
            "TestXMLBuilderParametersImpl": 8,
            "TestBaseConfigurationBuilderProvider": 9,
            "TestCombinedBuilderParametersImpl": 27,
            "TestCombinedConfigurationBuilder": 51,
            "TestCombinedConfigurationBuilderVFS": 52,
            "TestConfigurationDeclaration": 5,
            "TestFileExtensionConfigurationBuilderProvider": 10,
            "TestMultiFileBuilderParametersImpl": 7,
            "TestMultiFileConfigurationBuilder": 16,
            "TestMultiWrapDynaBean": 13,
            "TestReloadingCombinedConfigurationBuilder": 5,
            "TestReloadingCombinedConfigurationBuilderFileBased": 4,
            "TestReloadingMultiFileConfigurationBuilder": 6,
            "TestConfigurations": 32,
            "TestParameters": 19,
            "TestDefaultConversionHandler": 23,
            "TestDefaultListDelimiterHandler": 13,
            "TestDisabledListDelimiterHandler": 13,
            "TestPropertyConverter": 26,
            "TestConfigurationEventTypes": 19,
            "TestDatabaseConfigurationEvents": 8,
            "TestEvent": 3,
            "TestEventListenerList": 31,
            "TestEventSource": 19,
            "TestEventType": 1,
            "TestHierarchicalConfigurationEvents": 13,
            "TestMapConfigurationEvents": 8,
            "TestPropertiesConfigurationEvents": 8,
            "TestSubsetConfigurationEvents": 8,
            "TestXMLConfigurationEvents": 13,
            "TestConfigurationInterpolator": 41,
            "TestConstantLookup": 8,
            "TestDummyLookup": 1,
            "TestEnvironmentLookup": 2,
            "TestExprLookup": 6,
            "TestInterpolatorSpecification": 10,
            "TestSystemPropertiesLookup": 2,
            "TestAbsoluteNameLocationStrategy": 4,
            "TestBasePathLocationStrategy": 4,
            "TestClasspathLocationStrategy": 3,
            "TestCombinedLocationStrategy": 7,
            "TestConfigurationLogger": 16,
            "TestDefaultFileSystem": 3,
            "TestFileHandler": 85,
            "TestFileLocator": 8,
            "TestFileLocatorUtils": 36,
            "TestFileSystemLocationStrategy": 1,
            "TestHomeDirectoryLocationStrategy": 6,
            "TestProvidedURLLocationStrategy": 2,
            "TestPropertyListConfiguration": 23,
            "TestPropertyListConfigurationEvents": 10,
            "TestPropertyListParser": 4,
            "TestXMLPropertyListConfiguration": 24,
            "TestXMLPropertyListConfigurationEvents": 10,
            "TestCombinedReloadingController": 8,
            "TestFileHandlerReloadingDetector": 11,
            "TestManagedReloadingDetector": 3,
            "TestPeriodicReloadingTrigger": 9,
            "TestReloadingController": 8,
            "TestVFSFileHandlerReloadingDetector": 6,
            "TestConfigurationPropertiesFactoryBean": 10,
            "TestConfigurationPropertySource": 1,
            "TestReadWriteSynchronizer": 3,
            "TestDefaultConfigurationKey": 33,
            "TestDefaultExpressionEngine": 38,
            "TestDefaultExpressionEngineSymbols": 6,
            "TestImmutableNode": 35,
            "TestInMemoryNodeModel": 39,
            "TestInMemoryNodeModelReferences": 12,
            "TestInMemoryNodeModelTrackedNodes": 43,
            "TestMergeCombiner": 8,
            "TestNodeAddData": 4,
            "TestNodeHandlerDecorator": 25,
            "TestNodeNameMatchers": 6,
            "TestNodeSelector": 12,
            "TestNodeTreeWalker": 8,
            "TestNodeUpdateData": 7,
            "TestOverrideCombiner": 9,
            "TestQueryResult": 9,
            "TestTrackedNodeHandler": 2,
            "TestTrackedNodeModel": 13,
            "TestTreeData": 25,
            "TestUnionCombiner": 6,
            "TestConfigurationAttributePointer": 13,
            "TestConfigurationIteratorAttributes": 6,
            "TestConfigurationNodeIteratorChildren": 13,
            "TestConfigurationNodePointer": 7,
            "TestConfigurationNodePointerFactory": 8,
            "TestXPathContextFactory": 1,
            "TestXPathExpressionEngine": 34,
            "TestXPathExpressionEngineInConfig": 6,
            "TestAppletConfiguration": 12,
            "TestServletConfiguration": 12,
            "TestServletContextConfiguration": 12,
            "TestServletFilterConfiguration": 12,
            "TestServletRequestConfiguration": 13
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    <release version=\"2.5\" date=\"2019-MM-DD\"\n+             description=\"Minor release with new features and updated dependencies.\">\n+      <action dev=\"ggregory\" type=\"fix\" issue=\"CONFIGURATION-731\" due-to=\"Shuai Zhang, Gary Gregory\">\n+        Allow user to specify the comments & separator chars.\n+      </action>\n+    </release>\n+    private String separatorUsedInInput = SEPARATOR_CHARS;\n+    private String commentCharsUsedInInput = COMMENT_CHARS;\n+    public String getSeparatorUsedInInput()\n+    {\n+        beginRead(false);\n+        try\n+        {\n+            return separatorUsedInInput;\n+        }\n+        finally\n+        {\n+            endRead();\n+        }\n+    }\n+    public void setSeparatorUsedInInput(final String separator)\n+    {\n+        beginRead(false);\n+        try\n+        {\n+            this.separatorUsedInInput = separator;\n+        }\n+        finally\n+        {\n+            endRead();\n+        }\n+    }\n+    public String getCommentLeadingCharsUsedInInput()\n+    {\n+        beginRead(false);\n+        try\n+        {\n+            return commentCharsUsedInInput;\n+        }\n+        finally\n+        {\n+            endRead();\n+        }\n+    }\n+    public void setCommentLeadingCharsUsedInInput(final String separator)\n+    {\n+        beginRead(false);\n+        try\n+        {\n+            this.commentCharsUsedInInput = separator;\n+        }\n+        finally\n+        {\n+            endRead();\n+        }\n+    }\n+    private String parseValue(final String val, final BufferedReader reader)\n+        throws IOException\n+    private boolean lineContinues(final String line, final int pos)\n+    private boolean isCommentChar(final char c)\n+        return getCommentLeadingCharsUsedInInput().indexOf(c) >= 0;\n+    private int findSeparator(final String line)\n+            index = findFirstOccurrence(line, getSeparatorUsedInInput());\n+    private String escapeComments(final String value)\n+        final String commentChars = getCommentLeadingCharsUsedInInput();\n+        for (int i = 0; i < commentChars.length() && !quoted; i++)\n+            final char c = commentChars.charAt(i);\n+        return line.length() < 1\n+            || getCommentLeadingCharsUsedInInput().indexOf(line.charAt(0)) >= 0;\n+    private static final String PROP_SEPARATOR_USED_IN_INI_INPUT\n+        = \"separatorUsedInInput\";\n+    private static final String PROP_COMMENT_LEADING_SEPARATOR_USED_IN_INI_INPUT\n+        = \"commentLeadingCharsUsedInInput\";\n+        copyPropertiesFrom(source, PROP_SEPARATOR_USED_IN_INI_INPUT);\n+        copyPropertiesFrom(source, PROP_COMMENT_LEADING_SEPARATOR_USED_IN_INI_INPUT);\n+    @Override\n+    public INIBuilderParametersImpl setSeparatorUsedInInput(String separator) {\n+        storeProperty(PROP_SEPARATOR_USED_IN_INI_INPUT, separator);\n+        return this;\n+    }\n+    @Override\n+    public INIBuilderParametersImpl setCommentLeadingCharsUsedInInput(String separator) {\n+        storeProperty(PROP_COMMENT_LEADING_SEPARATOR_USED_IN_INI_INPUT, separator);\n+        return this;\n+    }\n+    \n+    default T setCommentLeadingCharsUsedInInput(String separator) {\n+        return (T) this;\n+    }\n+    default T setSeparatorUsedInInput(String separator) {\n+        return (T) this;\n+    }\n+    @Test\n+    public void testSeparatorUsedInINIInput() throws Exception\n+    {\n+        final String inputSeparator = \"=\";\n+        final String input = \"[section]\" + LINE_SEPARATOR\n+            + \"k1:v1$key1=value1\" + LINE_SEPARATOR\n+            + \"k1:v1,k2:v2$key2=value2\" + LINE_SEPARATOR\n+            + \"key3:value3\" + LINE_SEPARATOR\n+            + \"key4 = value4\" + LINE_SEPARATOR;\n+        final INIConfiguration instance = new FileBasedConfigurationBuilder<>(\n+            INIConfiguration.class)\n+            .configure(new Parameters().ini().setSeparatorUsedInInput(inputSeparator))\n+            .getConfiguration();\n+        load(instance, input);\n+        assertEquals(\"value1\", instance.getString(\"section.k1:v1$key1\"));\n+        assertEquals(\"value2\", instance.getString(\"section.k1:v1,k2:v2$key2\"));\n+        assertEquals(\"\", instance.getString(\"section.key3:value3\"));\n+        assertEquals(\"value4\", instance.getString(\"section.key4\").trim());\n+    }\n+    @Test\n+    public void testCommentLeadingSeparatorUsedInINIInput() throws Exception\n+    {\n+        final String inputCommentLeadingSeparator = \";\";\n+        final String input = \"[section]\" + LINE_SEPARATOR\n+            + \"key1=a;b;c\" + LINE_SEPARATOR\n+            + \"key2=a#b#c\" + LINE_SEPARATOR\n+            + \";key3=value3\" + LINE_SEPARATOR\n+            + \"#key4=value4\" + LINE_SEPARATOR;\n+        final INIConfiguration instance = new FileBasedConfigurationBuilder<>(\n+            INIConfiguration.class)\n+            .configure(new Parameters().ini()\n+                .setCommentLeadingCharsUsedInInput(inputCommentLeadingSeparator))\n+            .getConfiguration();\n+        load(instance, input);\n+        assertEquals(\"a;b;c\", instance.getString(\"section.key1\"));\n+        assertEquals(\"a#b#c\", instance.getString(\"section.key2\"));\n+        assertNull(\"\", instance.getString(\"section.;key3\"));\n+        assertEquals(\"value4\", instance.getString(\"section.#key4\"));\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java": "    private String separatorUsedInInput = SEPARATOR_CHARS;\n    private String commentCharsUsedInInput = COMMENT_CHARS;\n    public String getSeparatorUsedInInput()\n    {\n        beginRead(false);\n        try\n        {\n            return separatorUsedInInput;\n        }\n        finally\n        {\n            endRead();\n        }\n    }\n    public void setSeparatorUsedInInput(final String separator)\n    {\n        beginRead(false);\n        try\n        {\n            this.separatorUsedInInput = separator;\n        }\n        finally\n        {\n            endRead();\n        }\n    }\n    public String getCommentLeadingCharsUsedInInput()\n    {\n        beginRead(false);\n        try\n        {\n            return commentCharsUsedInInput;\n        }\n        finally\n        {\n            endRead();\n        }\n    }\n    public void setCommentLeadingCharsUsedInInput(final String separator)\n    {\n        beginRead(false);\n        try\n        {\n            this.commentCharsUsedInInput = separator;\n        }\n        finally\n        {\n            endRead();\n        }\n    }\n    private String parseValue(final String val, final BufferedReader reader)\n        throws IOException\n    private boolean lineContinues(final String line, final int pos)\n    private boolean isCommentChar(final char c)\n        return getCommentLeadingCharsUsedInInput().indexOf(c) >= 0;\n    private int findSeparator(final String line)\n            index = findFirstOccurrence(line, getSeparatorUsedInInput());\n    private String escapeComments(final String value)\n        final String commentChars = getCommentLeadingCharsUsedInInput();\n        for (int i = 0; i < commentChars.length() && !quoted; i++)\n            final char c = commentChars.charAt(i);\n        return line.length() < 1\n            || getCommentLeadingCharsUsedInInput().indexOf(line.charAt(0)) >= 0;\n",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java": "    private static final String PROP_SEPARATOR_USED_IN_INI_INPUT\n        = \"separatorUsedInInput\";\n    private static final String PROP_COMMENT_LEADING_SEPARATOR_USED_IN_INI_INPUT\n        = \"commentLeadingCharsUsedInInput\";\n        copyPropertiesFrom(source, PROP_SEPARATOR_USED_IN_INI_INPUT);\n        copyPropertiesFrom(source, PROP_COMMENT_LEADING_SEPARATOR_USED_IN_INI_INPUT);\n    @Override\n    public INIBuilderParametersImpl setSeparatorUsedInInput(String separator) {\n        storeProperty(PROP_SEPARATOR_USED_IN_INI_INPUT, separator);\n        return this;\n    }\n    @Override\n    public INIBuilderParametersImpl setCommentLeadingCharsUsedInInput(String separator) {\n        storeProperty(PROP_COMMENT_LEADING_SEPARATOR_USED_IN_INI_INPUT, separator);\n        return this;\n    }\n",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderProperties.java": "public interface INIBuilderProperties<T> {\n    default T setCommentLeadingCharsUsedInInput(String separator) {\n        return (T) this;\n    }\n    default T setSeparatorUsedInInput(String separator) {\n        return (T) this;\n    }\n",
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java": "import static org.junit.Assert.assertNull;\n    @Test\n    public void testSeparatorUsedInINIInput() throws Exception\n    {\n        final String inputSeparator = \"=\";\n        final String input = \"[section]\" + LINE_SEPARATOR\n            + \"k1:v1$key1=value1\" + LINE_SEPARATOR\n            + \"k1:v1,k2:v2$key2=value2\" + LINE_SEPARATOR\n            + \"key3:value3\" + LINE_SEPARATOR\n            + \"key4 = value4\" + LINE_SEPARATOR;\n        final INIConfiguration instance = new FileBasedConfigurationBuilder<>(\n            INIConfiguration.class)\n            .configure(new Parameters().ini().setSeparatorUsedInInput(inputSeparator))\n            .getConfiguration();\n        load(instance, input);\n        assertEquals(\"value1\", instance.getString(\"section.k1:v1$key1\"));\n        assertEquals(\"value2\", instance.getString(\"section.k1:v1,k2:v2$key2\"));\n        assertEquals(\"\", instance.getString(\"section.key3:value3\"));\n        assertEquals(\"value4\", instance.getString(\"section.key4\").trim());\n    }\n    @Test\n    public void testCommentLeadingSeparatorUsedInINIInput() throws Exception\n    {\n        final String inputCommentLeadingSeparator = \";\";\n        final String input = \"[section]\" + LINE_SEPARATOR\n            + \"key1=a;b;c\" + LINE_SEPARATOR\n            + \"key2=a#b#c\" + LINE_SEPARATOR\n            + \";key3=value3\" + LINE_SEPARATOR\n            + \"#key4=value4\" + LINE_SEPARATOR;\n        final INIConfiguration instance = new FileBasedConfigurationBuilder<>(\n            INIConfiguration.class)\n            .configure(new Parameters().ini()\n                .setCommentLeadingCharsUsedInInput(inputCommentLeadingSeparator))\n            .getConfiguration();\n        load(instance, input);\n        assertEquals(\"a;b;c\", instance.getString(\"section.key1\"));\n        assertEquals(\"a#b#c\", instance.getString(\"section.key2\"));\n        assertNull(\"\", instance.getString(\"section.;key3\"));\n        assertEquals(\"value4\", instance.getString(\"section.#key4\"));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java": [
                262,
                268,
                337,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347,
                348,
                357,
                358,
                359,
                360,
                361,
                362,
                363,
                364,
                365,
                366,
                367,
                368,
                377,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                385,
                386,
                387,
                388,
                397,
                398,
                399,
                400,
                401,
                402,
                403,
                404,
                405,
                406,
                407,
                408,
                624,
                625,
                740,
                767,
                769,
                782,
                789,
                869,
                871,
                874,
                876,
                904,
                905
            ],
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java": [
                43,
                44,
                45,
                46,
                53,
                54,
                64,
                65,
                66,
                67,
                68,
                70,
                71,
                72,
                73,
                74
            ],
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderProperties.java": [
                36,
                46,
                48,
                49,
                59,
                61,
                62
            ],
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java": [
                23,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                270,
                271,
                272,
                273,
                274,
                276,
                277,
                278,
                279,
                280,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                295,
                296,
                297,
                298,
                299,
                300,
                302,
                303,
                304,
                305,
                306
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java": "    private static String parseValue(final String val, final BufferedReader reader) throws IOException\n    private static boolean lineContinues(final String line, final int pos)\n    private static boolean isCommentChar(final char c)\n        return COMMENT_CHARS.indexOf(c) >= 0;\n    private static int findSeparator(final String line)\n            index = findFirstOccurrence(line, SEPARATOR_CHARS);\n    private static String escapeComments(final String value)\n        for (int i = 0; i < COMMENT_CHARS.length() && !quoted; i++)\n            final char c = COMMENT_CHARS.charAt(i);\n        return line.length() < 1 || COMMENT_CHARS.indexOf(line.charAt(0)) >= 0;\n",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderProperties.java": "public interface INIBuilderProperties<T>\n{\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java": [
                533,
                648,
                675,
                677,
                690,
                697,
                777,
                781,
                783,
                811
            ],
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderProperties.java": [
                36,
                37
            ]
        }
    },
    {
        "commit": "5b743d5e",
        "prev_commit": "e0fc7b4d",
        "changed_files": [
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java"
        ],
        "changed_java_files_num": 1,
        "failed_test_list": [],
        "passed_test_list": [
            "TestXMLListHandling",
            "TestPeriodicReloadingTrigger",
            "TestConfigurationPropertySource",
            "TestPatternSubtreeConfiguration",
            "TestBaseNullConfiguration",
            "TestNonStringProperties",
            "TestNodeUpdateData",
            "TestFileBasedBuilderParameters",
            "TestReloadingCombinedConfigurationBuilderFileBased",
            "TestCombinedConfigurationBuilder",
            "TestCombinedConfigurationBuilderVFS",
            "TestInMemoryNodeModel",
            "TestServletRequestConfiguration",
            "TestJNDIConfiguration",
            "TestDefaultBeanFactory",
            "TestCombinedBeanDeclaration",
            "TestNodeSelector",
            "TestJndiBuilderParametersImpl",
            "TestEnvironmentLookup",
            "TestXPathContextFactory",
            "TestConfigurationUtils",
            "TestBasicConfigurationBuilder",
            "TestInMemoryNodeModelTrackedNodes",
            "TestQueryResult",
            "TestNodeAddData",
            "TestParameters",
            "TestMultiFileBuilderParametersImpl",
            "TestDataConfiguration",
            "TestFileBasedConfigurationBuilder",
            "TestFileHandlerReloadingDetector",
            "TestOverrideCombiner",
            "TestHierarchicalConfiguration",
            "TestConstantLookup",
            "TestCombinedLocationStrategy",
            "TestDisabledListDelimiterHandler",
            "TestManagedReloadingDetector",
            "TestHomeDirectoryLocationStrategy",
            "TestPropertiesConfigurationEvents",
            "TestEvent",
            "TestPropertiesBuilderParametersImpl",
            "TestHierarchicalXMLConfiguration",
            "TestXMLDocumentHelper",
            "TestCombinedConfiguration",
            "TestBasicBuilderParameters",
            "TestImmutableNode",
            "TestFileSystemLocationStrategy",
            "TestConfigurationMap",
            "TestDefaultExpressionEngineSymbols",
            "TestUnionCombiner",
            "TestConfigurationLogger",
            "TestMultiFileConfigurationBuilder",
            "TestReloadingMultiFileConfigurationBuilder",
            "TestXMLPropertyListConfigurationEvents",
            "TestEqualBehaviour",
            "TestReloadingBuilderSupportListener",
            "TestHierarchicalConfigurationEvents",
            "TestDummyLookup",
            "TestAbsoluteNameLocationStrategy",
            "TestConfigurationNodeIteratorChildren",
            "TestCompositeConfigurationNonStringProperties",
            "TestConfigurationConverter",
            "TestJNDIEnvironmentValues",
            "TestDefaultParametersManager",
            "TestNullJNDIEnvironmentValues",
            "TestXMLConfigurationEvents",
            "TestDefaultFileSystem",
            "TestServletContextConfiguration",
            "TestMapConfiguration",
            "TestNullCompositeConfiguration",
            "TestEventListenerParameters",
            "TestXMLBuilderParametersImpl",
            "TestAppletConfiguration",
            "TestTrackedNodeHandler",
            "TestConfigurationPropertiesFactoryBean",
            "TestDatabaseBuilderParametersImpl",
            "TestInMemoryNodeModelReferences",
            "TestDatabaseConfigurationEvents",
            "TestBeanHelper",
            "TestConfigurationNodePointerFactory",
            "TestConfigurationEventTypes",
            "TestBaseConfigurationBuilderProvider",
            "TestXMLPropertiesConfiguration",
            "TestConfigurationInterpolator",
            "TestTreeData",
            "TestThreesomeConfiguration",
            "TestYAMLConfiguration",
            "TestINIConfiguration",
            "TestMapConfigurationEvents",
            "TestBasicConfigurationBuilderEvents",
            "TestMultiWrapDynaBean",
            "TestHierarchicalBuilderParametersImpl",
            "TestSubsetConfiguration",
            "TestPropertyListConfiguration",
            "TestVFSFileHandlerReloadingDetector",
            "TestDefaultConfigurationKey",
            "TestInterpolatorSpecification",
            "TestDefaultListDelimiterHandler",
            "TestConfigurationLookup",
            "TestBaseHierarchicalConfigurationSynchronization",
            "TestDefaultExpressionEngine",
            "TestTrackedNodeModel",
            "TestSystemConfiguration",
            "TestFileExtensionConfigurationBuilderProvider",
            "TestExprLookup",
            "TestConfigurationSet",
            "TestCatalogResolver",
            "TestBaseConfiguration",
            "TestBuilderConfigurationWrapperFactory",
            "TestProvidedURLLocationStrategy",
            "TestConfigurationIteratorAttributes",
            "TestBasePathLocationStrategy",
            "TestConfigurationAttributePointer",
            "TestServletConfiguration",
            "TestConfigurationDynaBean",
            "TestReloadingController",
            "TestReadWriteSynchronizer",
            "TestClasspathLocationStrategy",
            "TestCombinedBuilderParametersImpl",
            "TestFileHandler",
            "TestDefaultReloadingDetectorFactory",
            "TestReloadingFileBasedConfigurationBuilder",
            "TestEventSource",
            "TestEnvironmentConfiguration",
            "TestNodeNameMatchers",
            "TestBaseConfigurationXMLReader",
            "TestConstructorArg",
            "TestDefaultConversionHandler",
            "TestXMLConfiguration_605",
            "TestXMLPropertyListConfiguration",
            "TestFileLocatorUtils",
            "TestPropertyListParser",
            "TestNodeTreeWalker",
            "TestPropertiesConfigurationLayout",
            "TestSubsetConfigurationEvents",
            "TestConfigurations",
            "TestSystemPropertiesLookup",
            "TestPropertyListConfigurationEvents",
            "TestAbstractConfigurationSynchronization",
            "TestEventListenerList",
            "TestConfigurationNodePointer",
            "TestMergeCombiner",
            "TestServletFilterConfiguration",
            "TestAutoSaveListener",
            "TestAbstractHierarchicalConfiguration",
            "TestEqualsProperty",
            "TestCombinedReloadingController",
            "TestDatabaseConfiguration",
            "TestHierarchicalConfigurationXMLReader",
            "TestXPathExpressionEngine",
            "TestPropertiesSequence",
            "TestXPathExpressionEngineInConfig",
            "TestConfigurationDynaBeanXMLConfig",
            "TestNodeHandlerDecorator",
            "TestJSONConfiguration",
            "TestConfigurationDeclaration",
            "TestXMLConfiguration",
            "TestPropertiesConfiguration",
            "TestFileLocator",
            "TestCompositeConfiguration",
            "TestPropertyConverter",
            "TestStrictConfigurationComparator",
            "TestSubnodeConfiguration",
            "TestXMLBeanDeclaration",
            "TestAbstractConfigurationBasicFeatures",
            "TestDynamicCombinedConfiguration",
            "TestCopyObjectDefaultHandler",
            "TestImmutableConfiguration",
            "TestReloadingCombinedConfigurationBuilder",
            "TestEventType"
        ],
        "tests_cases_num": {
            "TestAbstractConfigurationBasicFeatures": 64,
            "TestAbstractConfigurationSynchronization": 19,
            "TestAbstractHierarchicalConfiguration": 53,
            "TestBaseConfiguration": 59,
            "TestBaseConfigurationXMLReader": 4,
            "TestBaseHierarchicalConfigurationSynchronization": 14,
            "TestBaseNullConfiguration": 37,
            "TestCatalogResolver": 5,
            "TestCombinedConfiguration": 58,
            "TestCompositeConfiguration": 52,
            "TestCompositeConfigurationNonStringProperties": 23,
            "TestConfigurationConverter": 6,
            "TestConfigurationLookup": 5,
            "TestConfigurationMap": 1,
            "TestConfigurationSet": 2,
            "TestConfigurationUtils": 36,
            "TestDataConfiguration": 59,
            "TestDatabaseConfiguration": 36,
            "TestDynamicCombinedConfiguration": 12,
            "TestEnvironmentConfiguration": 5,
            "TestEqualBehaviour": 7,
            "TestEqualsProperty": 1,
            "TestHierarchicalConfiguration": 37,
            "TestHierarchicalConfigurationXMLReader": 1,
            "TestHierarchicalXMLConfiguration": 10,
            "TestINIConfiguration": 65,
            "TestImmutableConfiguration": 10,
            "TestJNDIConfiguration": 27,
            "TestJNDIEnvironmentValues": 12,
            "TestJSONConfiguration": 10,
            "TestMapConfiguration": 20,
            "TestNonStringProperties": 23,
            "TestNullCompositeConfiguration": 23,
            "TestNullJNDIEnvironmentValues": 12,
            "TestPatternSubtreeConfiguration": 3,
            "TestPropertiesConfiguration": 72,
            "TestPropertiesConfigurationLayout": 38,
            "TestPropertiesSequence": 3,
            "TestStrictConfigurationComparator": 2,
            "TestSubnodeConfiguration": 24,
            "TestSubsetConfiguration": 21,
            "TestSystemConfiguration": 5,
            "TestThreesomeConfiguration": 3,
            "TestXMLConfiguration": 94,
            "TestXMLConfiguration_605": 8,
            "TestXMLDocumentHelper": 11,
            "TestXMLListHandling": 5,
            "TestXMLPropertiesConfiguration": 4,
            "TestYAMLConfiguration": 9,
            "TestBeanHelper": 27,
            "TestCombinedBeanDeclaration": 12,
            "TestConfigurationDynaBean": 42,
            "TestConfigurationDynaBeanXMLConfig": 42,
            "TestConstructorArg": 6,
            "TestDefaultBeanFactory": 11,
            "TestXMLBeanDeclaration": 28,
            "TestAutoSaveListener": 7,
            "TestBasicBuilderParameters": 34,
            "TestBasicConfigurationBuilder": 27,
            "TestBasicConfigurationBuilderEvents": 11,
            "TestBuilderConfigurationWrapperFactory": 8,
            "TestCopyObjectDefaultHandler": 4,
            "TestDatabaseBuilderParametersImpl": 8,
            "TestDefaultParametersManager": 9,
            "TestDefaultReloadingDetectorFactory": 2,
            "TestEventListenerParameters": 4,
            "TestFileBasedBuilderParameters": 24,
            "TestFileBasedConfigurationBuilder": 24,
            "TestHierarchicalBuilderParametersImpl": 3,
            "TestJndiBuilderParametersImpl": 4,
            "TestPropertiesBuilderParametersImpl": 6,
            "TestReloadingBuilderSupportListener": 2,
            "TestReloadingFileBasedConfigurationBuilder": 9,
            "TestXMLBuilderParametersImpl": 8,
            "TestBaseConfigurationBuilderProvider": 9,
            "TestCombinedBuilderParametersImpl": 27,
            "TestCombinedConfigurationBuilder": 51,
            "TestCombinedConfigurationBuilderVFS": 52,
            "TestConfigurationDeclaration": 5,
            "TestFileExtensionConfigurationBuilderProvider": 10,
            "TestMultiFileBuilderParametersImpl": 7,
            "TestMultiFileConfigurationBuilder": 16,
            "TestMultiWrapDynaBean": 13,
            "TestReloadingCombinedConfigurationBuilder": 5,
            "TestReloadingCombinedConfigurationBuilderFileBased": 4,
            "TestReloadingMultiFileConfigurationBuilder": 6,
            "TestConfigurations": 32,
            "TestParameters": 19,
            "TestDefaultConversionHandler": 23,
            "TestDefaultListDelimiterHandler": 13,
            "TestDisabledListDelimiterHandler": 13,
            "TestPropertyConverter": 26,
            "TestConfigurationEventTypes": 19,
            "TestDatabaseConfigurationEvents": 8,
            "TestEvent": 3,
            "TestEventListenerList": 31,
            "TestEventSource": 19,
            "TestEventType": 1,
            "TestHierarchicalConfigurationEvents": 13,
            "TestMapConfigurationEvents": 8,
            "TestPropertiesConfigurationEvents": 8,
            "TestSubsetConfigurationEvents": 8,
            "TestXMLConfigurationEvents": 13,
            "TestConfigurationInterpolator": 41,
            "TestConstantLookup": 8,
            "TestDummyLookup": 1,
            "TestEnvironmentLookup": 2,
            "TestExprLookup": 6,
            "TestInterpolatorSpecification": 10,
            "TestSystemPropertiesLookup": 2,
            "TestAbsoluteNameLocationStrategy": 4,
            "TestBasePathLocationStrategy": 4,
            "TestClasspathLocationStrategy": 3,
            "TestCombinedLocationStrategy": 7,
            "TestConfigurationLogger": 16,
            "TestDefaultFileSystem": 3,
            "TestFileHandler": 85,
            "TestFileLocator": 8,
            "TestFileLocatorUtils": 36,
            "TestFileSystemLocationStrategy": 1,
            "TestHomeDirectoryLocationStrategy": 6,
            "TestProvidedURLLocationStrategy": 2,
            "TestPropertyListConfiguration": 23,
            "TestPropertyListConfigurationEvents": 10,
            "TestPropertyListParser": 4,
            "TestXMLPropertyListConfiguration": 24,
            "TestXMLPropertyListConfigurationEvents": 10,
            "TestCombinedReloadingController": 8,
            "TestFileHandlerReloadingDetector": 11,
            "TestManagedReloadingDetector": 3,
            "TestPeriodicReloadingTrigger": 9,
            "TestReloadingController": 8,
            "TestVFSFileHandlerReloadingDetector": 6,
            "TestConfigurationPropertiesFactoryBean": 10,
            "TestConfigurationPropertySource": 1,
            "TestReadWriteSynchronizer": 3,
            "TestDefaultConfigurationKey": 33,
            "TestDefaultExpressionEngine": 38,
            "TestDefaultExpressionEngineSymbols": 6,
            "TestImmutableNode": 35,
            "TestInMemoryNodeModel": 39,
            "TestInMemoryNodeModelReferences": 12,
            "TestInMemoryNodeModelTrackedNodes": 43,
            "TestMergeCombiner": 8,
            "TestNodeAddData": 4,
            "TestNodeHandlerDecorator": 25,
            "TestNodeNameMatchers": 6,
            "TestNodeSelector": 12,
            "TestNodeTreeWalker": 8,
            "TestNodeUpdateData": 7,
            "TestOverrideCombiner": 9,
            "TestQueryResult": 9,
            "TestTrackedNodeHandler": 2,
            "TestTrackedNodeModel": 13,
            "TestTreeData": 25,
            "TestUnionCombiner": 6,
            "TestConfigurationAttributePointer": 13,
            "TestConfigurationIteratorAttributes": 6,
            "TestConfigurationNodeIteratorChildren": 13,
            "TestConfigurationNodePointer": 7,
            "TestConfigurationNodePointerFactory": 8,
            "TestXPathContextFactory": 1,
            "TestXPathExpressionEngine": 34,
            "TestXPathExpressionEngineInConfig": 6,
            "TestAppletConfiguration": 12,
            "TestServletConfiguration": 12,
            "TestServletContextConfiguration": 12,
            "TestServletFilterConfiguration": 12,
            "TestServletRequestConfiguration": 13
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    static\n+    {\n+        final Map<String, Lookup> lookups = new HashMap<>();\n+        for (final DefaultLookups l : DefaultLookups.values())\n+        {\n+            lookups.put(l.getPrefix(), l.getLookup());\n+        }\n+        DEFAULT_PREFIX_LOOKUPS = Collections.unmodifiableMap(lookups);\n+    }\n+    private static ConfigurationInterpolator createInterpolator(\n+            final InterpolatorSpecification spec)\n+    {\n+        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n+        ci.addDefaultLookups(spec.getDefaultLookups());\n+        ci.registerLookups(spec.getPrefixLookups());\n+        ci.setParentInterpolator(spec.getParentInterpolator());\n+        return ci;\n+    }\n+    private static String extractVariableName(final String strValue)\n+        return strValue.substring(VAR_START_LENGTH,\n+                strValue.length() - VAR_END_LENGTH);\n+    private final Map<String, Lookup> prefixLookups;\n+    private final List<Lookup> defaultLookups;\n+    private final StringSubstitutor substitutor;\n+    private volatile ConfigurationInterpolator parentInterpolator;\n+    public ConfigurationInterpolator()\n+        prefixLookups = new ConcurrentHashMap<>();\n+        defaultLookups = new CopyOnWriteArrayList<>();\n+        substitutor = initSubstitutor();\n+    public void addDefaultLookup(final Lookup defaultLookup)\n+        defaultLookups.add(defaultLookup);\n+    public void addDefaultLookups(final Collection<? extends Lookup> lookups)\n+            defaultLookups.addAll(lookups);\n+    protected Lookup fetchLookupForPrefix(final String prefix)\n+        return nullSafeLookup(prefixLookups.get(prefix));\n+    public Map<String, Lookup> getLookups()\n+        return new HashMap<>(prefixLookups);\n+    private StringSubstitutor initSubstitutor()\n+        return new StringSubstitutor(new StringLookup()\n+        {\n+            @Override\n+            public String lookup(final String key)\n+            {\n+                final Object result = resolve(key);\n+                return result != null ? result.toString() : null;\n+            }\n+        });\n+    public boolean isEnableSubstitutionInVariables()\n+    {\n+        return substitutor.isEnableSubstitutionInVariables();\n+    }\n+    private boolean looksLikeSingleVariable(final String strValue)\n+    {\n+        return strValue.startsWith(VAR_START) && strValue.endsWith(VAR_END);\n+    }\n+    public Set<String> prefixSet()\n+    {\n+        return Collections.unmodifiableSet(prefixLookups.keySet());\n+    }\n+    public void registerLookup(final String prefix, final Lookup lookup)\n+    {\n+        if (prefix == null)\n+        {\n+            throw new IllegalArgumentException(\n+                    \"Prefix for lookup object must not be null!\");\n+        }\n+        if (lookup == null)\n+        {\n+            throw new IllegalArgumentException(\n+                    \"Lookup object must not be null!\");\n+        }\n+        prefixLookups.put(prefix, lookup);\n+    }\n+    public void registerLookups(final Map<String, ? extends Lookup> lookups)\n+    {\n+        if (lookups != null)\n+        {\n+            prefixLookups.putAll(lookups);\n+        }\n+    }\n+    public boolean removeDefaultLookup(final Lookup lookup)\n+    {\n+        return defaultLookups.remove(lookup);\n+    }\n+    public void setEnableSubstitutionInVariables(final boolean f)\n+        substitutor.setEnableSubstitutionInVariables(f);\n+    public void setParentInterpolator(\n+            final ConfigurationInterpolator parentInterpolator)\n+        this.parentInterpolator = parentInterpolator;\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": "    static\n    {\n        final Map<String, Lookup> lookups = new HashMap<>();\n        for (final DefaultLookups l : DefaultLookups.values())\n        {\n            lookups.put(l.getPrefix(), l.getLookup());\n        }\n        DEFAULT_PREFIX_LOOKUPS = Collections.unmodifiableMap(lookups);\n    }\n    private static ConfigurationInterpolator createInterpolator(\n            final InterpolatorSpecification spec)\n    {\n        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n        ci.addDefaultLookups(spec.getDefaultLookups());\n        ci.registerLookups(spec.getPrefixLookups());\n        ci.setParentInterpolator(spec.getParentInterpolator());\n        return ci;\n    }\n    private static String extractVariableName(final String strValue)\n        return strValue.substring(VAR_START_LENGTH,\n                strValue.length() - VAR_END_LENGTH);\n    private final Map<String, Lookup> prefixLookups;\n    private final List<Lookup> defaultLookups;\n    private final StringSubstitutor substitutor;\n    private volatile ConfigurationInterpolator parentInterpolator;\n    public ConfigurationInterpolator()\n        prefixLookups = new ConcurrentHashMap<>();\n        defaultLookups = new CopyOnWriteArrayList<>();\n        substitutor = initSubstitutor();\n    public void addDefaultLookup(final Lookup defaultLookup)\n        defaultLookups.add(defaultLookup);\n    public void addDefaultLookups(final Collection<? extends Lookup> lookups)\n            defaultLookups.addAll(lookups);\n    protected Lookup fetchLookupForPrefix(final String prefix)\n        return nullSafeLookup(prefixLookups.get(prefix));\n    public Map<String, Lookup> getLookups()\n        return new HashMap<>(prefixLookups);\n    private StringSubstitutor initSubstitutor()\n        return new StringSubstitutor(new StringLookup()\n        {\n            @Override\n            public String lookup(final String key)\n            {\n                final Object result = resolve(key);\n                return result != null ? result.toString() : null;\n            }\n        });\n    public boolean isEnableSubstitutionInVariables()\n    {\n        return substitutor.isEnableSubstitutionInVariables();\n    }\n    private boolean looksLikeSingleVariable(final String strValue)\n    {\n        return strValue.startsWith(VAR_START) && strValue.endsWith(VAR_END);\n    }\n    public Set<String> prefixSet()\n    {\n        return Collections.unmodifiableSet(prefixLookups.keySet());\n    }\n    public void registerLookup(final String prefix, final Lookup lookup)\n    {\n        if (prefix == null)\n        {\n            throw new IllegalArgumentException(\n                    \"Prefix for lookup object must not be null!\");\n        }\n        if (lookup == null)\n        {\n            throw new IllegalArgumentException(\n                    \"Lookup object must not be null!\");\n        }\n        prefixLookups.put(prefix, lookup);\n    }\n    public void registerLookups(final Map<String, ? extends Lookup> lookups)\n    {\n        if (lookups != null)\n        {\n            prefixLookups.putAll(lookups);\n        }\n    }\n    public boolean removeDefaultLookup(final Lookup lookup)\n    {\n        return defaultLookups.remove(lookup);\n    }\n    public void setEnableSubstitutionInVariables(final boolean f)\n        substitutor.setEnableSubstitutionInVariables(f);\n    public void setParentInterpolator(\n            final ConfigurationInterpolator parentInterpolator)\n        this.parentInterpolator = parentInterpolator;\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": [
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                143,
                145,
                146,
                211,
                214,
                217,
                220,
                225,
                227,
                228,
                229,
                243,
                245,
                257,
                261,
                287,
                289,
                314,
                316,
                337,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347,
                387,
                388,
                389,
                390,
                402,
                403,
                404,
                405,
                414,
                415,
                416,
                417,
                430,
                431,
                432,
                433,
                434,
                435,
                436,
                437,
                438,
                439,
                440,
                441,
                442,
                443,
                454,
                455,
                456,
                457,
                458,
                459,
                460,
                470,
                471,
                472,
                473,
                543,
                545,
                556,
                557,
                559
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": "    private final Map<String, Lookup> prefixLookups;\n    private final List<Lookup> defaultLookups;\n    private final StringSubstitutor substitutor;\n    private volatile ConfigurationInterpolator parentInterpolator;\n    public ConfigurationInterpolator()\n        prefixLookups = new ConcurrentHashMap<>();\n        defaultLookups = new CopyOnWriteArrayList<>();\n        substitutor = initSubstitutor();\n    public Map<String, Lookup> getLookups()\n        return new HashMap<>(prefixLookups);\n    public void registerLookup(final String prefix, final Lookup lookup)\n        if (prefix == null)\n        {\n            throw new IllegalArgumentException(\n                    \"Prefix for lookup object must not be null!\");\n        }\n        if (lookup == null)\n        {\n            throw new IllegalArgumentException(\n                    \"Lookup object must not be null!\");\n        }\n        prefixLookups.put(prefix, lookup);\n    public void registerLookups(final Map<String, ? extends Lookup> lookups)\n            prefixLookups.putAll(lookups);\n    public Set<String> prefixSet()\n        return Collections.unmodifiableSet(prefixLookups.keySet());\n    public void addDefaultLookup(final Lookup defaultLookup)\n    {\n        defaultLookups.add(defaultLookup);\n    }\n    public void addDefaultLookups(final Collection<? extends Lookup> lookups)\n    {\n        if (lookups != null)\n        {\n            defaultLookups.addAll(lookups);\n        }\n    }\n    public boolean removeDefaultLookup(final Lookup lookup)\n    {\n        return defaultLookups.remove(lookup);\n    }\n    public void setParentInterpolator(\n            final ConfigurationInterpolator parentInterpolator)\n        this.parentInterpolator = parentInterpolator;\n    public boolean isEnableSubstitutionInVariables()\n    {\n        return substitutor.isEnableSubstitutionInVariables();\n    }\n    public void setEnableSubstitutionInVariables(final boolean f)\n        substitutor.setEnableSubstitutionInVariables(f);\n    protected Lookup fetchLookupForPrefix(final String prefix)\n    {\n        return nullSafeLookup(prefixLookups.get(prefix));\n    }\n    private StringSubstitutor initSubstitutor()\n    {\n        return new StringSubstitutor(new StringLookup()\n        {\n            @Override\n            public String lookup(final String key)\n            {\n                final Object result = resolve(key);\n                return result != null ? result.toString() : null;\n            }\n        });\n    }\n    private static boolean looksLikeSingleVariable(final String strValue)\n        return strValue.startsWith(VAR_START) && strValue.endsWith(VAR_END);\n    private static String extractVariableName(final String strValue)\n    {\n        return strValue.substring(VAR_START_LENGTH,\n                strValue.length() - VAR_END_LENGTH);\n    }\n    private static ConfigurationInterpolator createInterpolator(\n            final InterpolatorSpecification spec)\n    {\n        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n        ci.addDefaultLookups(spec.getDefaultLookups());\n        ci.registerLookups(spec.getPrefixLookups());\n        ci.setParentInterpolator(spec.getParentInterpolator());\n        return ci;\n    }\n    static\n        final Map<String, Lookup> lookups = new HashMap<>();\n        for (final DefaultLookups l : DefaultLookups.values())\n        {\n            lookups.put(l.getPrefix(), l.getLookup());\n        }\n        DEFAULT_PREFIX_LOOKUPS = Collections.unmodifiableMap(lookups);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": [
                110,
                113,
                116,
                119,
                124,
                126,
                127,
                128,
                200,
                202,
                216,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                240,
                244,
                268,
                270,
                298,
                299,
                300,
                301,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                328,
                329,
                330,
                331,
                341,
                342,
                344,
                363,
                364,
                365,
                366,
                375,
                377,
                470,
                471,
                472,
                473,
                483,
                484,
                485,
                486,
                487,
                488,
                489,
                490,
                491,
                492,
                493,
                494,
                517,
                519,
                529,
                530,
                531,
                532,
                533,
                542,
                543,
                544,
                545,
                546,
                547,
                548,
                549,
                550,
                552,
                554,
                555,
                556,
                557,
                558,
                559
            ]
        }
    },
    {
        "commit": "fa5dbfaf",
        "prev_commit": "d7280877",
        "changed_files": [
            "src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/AbstractHierarchicalConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/AbstractYAMLBasedConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/BaseConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/BaseConfigurationXMLReader.java",
            "src/main/java/org/apache/commons/configuration2/BaseHierarchicalConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/CombinedConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/CompositeConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationLookup.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationMap.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationXMLReader.java",
            "src/main/java/org/apache/commons/configuration2/DataConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/DynamicCombinedConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/EnvironmentConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/FindNodeVisitor.java",
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationConverter.java",
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationXMLReader.java",
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/ImmutableConfigurationInvocationHandler.java",
            "src/main/java/org/apache/commons/configuration2/JNDIConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/JSONConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/MapConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/PatternSubtreeConfigurationWrapper.java",
            "src/main/java/org/apache/commons/configuration2/PrefixedKeysIterator.java",
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/PropertiesConfigurationLayout.java",
            "src/main/java/org/apache/commons/configuration2/StrictConfigurationComparator.java",
            "src/main/java/org/apache/commons/configuration2/SubnodeConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/SubsetConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/SystemConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/XMLConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/XMLDocumentHelper.java",
            "src/main/java/org/apache/commons/configuration2/XMLListReference.java",
            "src/main/java/org/apache/commons/configuration2/XMLPropertiesConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/YAMLConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/BeanHelper.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/CombinedBeanDeclaration.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaClass.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConstructorArg.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/DefaultBeanFactory.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/XMLBeanDeclaration.java",
            "src/main/java/org/apache/commons/configuration2/builder/AutoSaveListener.java",
            "src/main/java/org/apache/commons/configuration2/builder/BasicBuilderParameters.java",
            "src/main/java/org/apache/commons/configuration2/builder/BasicConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/BuilderConfigurationWrapperFactory.java",
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderEvent.java",
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderResultCreatedEvent.java",
            "src/main/java/org/apache/commons/configuration2/builder/CopyObjectDefaultHandler.java",
            "src/main/java/org/apache/commons/configuration2/builder/DatabaseBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/DefaultParametersManager.java",
            "src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java",
            "src/main/java/org/apache/commons/configuration2/builder/EventListenerParameters.java",
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/HierarchicalBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/JndiBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/PropertiesBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingBuilderSupportListener.java",
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingFileBasedConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/XMLBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/BaseConfigurationBuilderProvider.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilderProvider.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ConfigurationDeclaration.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/FileExtensionConfigurationBuilderProvider.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilderProvider.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaBean.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaClass.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingMultiFileConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Configurations.java",
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Parameters.java",
            "src/main/java/org/apache/commons/configuration2/convert/AbstractListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/DefaultConversionHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/DefaultListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/DisabledListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/LegacyListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/ListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/PropertyConverter.java",
            "src/main/java/org/apache/commons/configuration2/event/BaseEventSource.java",
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationErrorEvent.java",
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationEvent.java",
            "src/main/java/org/apache/commons/configuration2/event/Event.java",
            "src/main/java/org/apache/commons/configuration2/event/EventListenerList.java",
            "src/main/java/org/apache/commons/configuration2/event/EventListenerRegistrationData.java",
            "src/main/java/org/apache/commons/configuration2/event/EventType.java",
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationException.java",
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationRuntimeException.java",
            "src/main/java/org/apache/commons/configuration2/ex/ConversionException.java",
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java",
            "src/main/java/org/apache/commons/configuration2/interpol/ConstantLookup.java",
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java",
            "src/main/java/org/apache/commons/configuration2/interpol/DummyLookup.java",
            "src/main/java/org/apache/commons/configuration2/interpol/EnvironmentLookup.java",
            "src/main/java/org/apache/commons/configuration2/interpol/ExprLookup.java",
            "src/main/java/org/apache/commons/configuration2/interpol/InterpolatorSpecification.java",
            "src/main/java/org/apache/commons/configuration2/interpol/SystemPropertiesLookup.java",
            "src/main/java/org/apache/commons/configuration2/io/AbsoluteNameLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/BasePathLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/ClasspathLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/CombinedLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/ConfigurationLogger.java",
            "src/main/java/org/apache/commons/configuration2/io/DefaultFileSystem.java",
            "src/main/java/org/apache/commons/configuration2/io/FileHandler.java",
            "src/main/java/org/apache/commons/configuration2/io/FileHandlerListenerAdapter.java",
            "src/main/java/org/apache/commons/configuration2/io/FileLocator.java",
            "src/main/java/org/apache/commons/configuration2/io/FileLocatorUtils.java",
            "src/main/java/org/apache/commons/configuration2/io/FileSystem.java",
            "src/main/java/org/apache/commons/configuration2/io/FileSystemLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/HomeDirectoryLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/ProvidedURLLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/VFSFileSystem.java",
            "src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java",
            "src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java",
            "src/main/java/org/apache/commons/configuration2/reloading/PeriodicReloadingTrigger.java",
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingController.java",
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingEvent.java",
            "src/main/java/org/apache/commons/configuration2/reloading/VFSFileHandlerReloadingDetector.java",
            "src/main/java/org/apache/commons/configuration2/resolver/CatalogResolver.java",
            "src/main/java/org/apache/commons/configuration2/resolver/DefaultEntityResolver.java",
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertiesFactoryBean.java",
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertySource.java",
            "src/main/java/org/apache/commons/configuration2/sync/ReadWriteSynchronizer.java",
            "src/main/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandler.java",
            "src/main/java/org/apache/commons/configuration2/tree/ConfigurationNodeVisitorAdapter.java",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultConfigurationKey.java",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngine.java",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngineSymbols.java",
            "src/main/java/org/apache/commons/configuration2/tree/ImmutableNode.java",
            "src/main/java/org/apache/commons/configuration2/tree/InMemoryNodeModel.java",
            "src/main/java/org/apache/commons/configuration2/tree/MergeCombiner.java",
            "src/main/java/org/apache/commons/configuration2/tree/ModelTransaction.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeAddData.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeCombiner.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeHandlerDecorator.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeNameMatchers.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeSelector.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeTracker.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeTreeWalker.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeUpdateData.java",
            "src/main/java/org/apache/commons/configuration2/tree/OverrideCombiner.java",
            "src/main/java/org/apache/commons/configuration2/tree/QueryResult.java",
            "src/main/java/org/apache/commons/configuration2/tree/ReferenceTracker.java",
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeHandler.java",
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeModel.java",
            "src/main/java/org/apache/commons/configuration2/tree/TreeData.java",
            "src/main/java/org/apache/commons/configuration2/tree/TreeUtils.java",
            "src/main/java/org/apache/commons/configuration2/tree/UnionCombiner.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationAttributePointer.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorAttribute.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorBase.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorChildren.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointer.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointerFactory.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathContextFactory.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathExpressionEngine.java",
            "src/main/java/org/apache/commons/configuration2/web/AppletConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/BaseWebConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/ServletConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/ServletContextConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/ServletFilterConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/ServletRequestConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/BaseNonStringProperties.java",
            "src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java",
            "src/test/java/org/apache/commons/configuration2/DatabaseConfigurationTestHelper.java",
            "src/test/java/org/apache/commons/configuration2/FileURLStreamHandler.java",
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java",
            "src/test/java/org/apache/commons/configuration2/Logging.java",
            "src/test/java/org/apache/commons/configuration2/MockInitialContextFactory.java",
            "src/test/java/org/apache/commons/configuration2/NonCloneableConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/NonStringTestHolder.java",
            "src/test/java/org/apache/commons/configuration2/SynchronizerTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationSynchronization.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfigurationXMLReader.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseHierarchicalConfigurationSynchronization.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestCatalogResolver.java",
            "src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfigurationNonStringProperties.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationConverter.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationLookup.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationMap.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationSet.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java",
            "src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestDynamicCombinedConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestEnvironmentConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestEqualBehaviour.java",
            "src/test/java/org/apache/commons/configuration2/TestEqualsProperty.java",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfigurationXMLReader.java",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalXMLConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestImmutableConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestJNDIEnvironmentValues.java",
            "src/test/java/org/apache/commons/configuration2/TestJSONConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestMapConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestNonStringProperties.java",
            "src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestNullJNDIEnvironmentValues.java",
            "src/test/java/org/apache/commons/configuration2/TestPatternSubtreeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesSequence.java",
            "src/test/java/org/apache/commons/configuration2/TestStrictConfigurationComparator.java",
            "src/test/java/org/apache/commons/configuration2/TestSubnodeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestSystemConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestThreesomeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration_605.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLDocumentHelper.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLListHandling.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestYAMLConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBean.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBeanWithListChild.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestCtorBean.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanDeclarationTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestBeanHelper.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestCombinedBeanDeclaration.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConstructorArg.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestDefaultBeanFactory.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestXMLBeanDeclaration.java",
            "src/test/java/org/apache/commons/configuration2/builder/BuilderEventListenerImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/ParametersBeanTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestAutoSaveListener.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilderEvents.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestBuilderConfigurationWrapperFactory.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestCopyObjectDefaultHandler.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestDatabaseBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultParametersManager.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultReloadingDetectorFactory.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestEventListenerParameters.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestHierarchicalBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestJndiBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestPropertiesBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingBuilderSupportListener.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingFileBasedConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestXMLBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/AbstractMultiFileConfigurationBuilderTest.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestBaseConfigurationBuilderProvider.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilderVFS.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestConfigurationDeclaration.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestFileExtensionConfigurationBuilderProvider.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiWrapDynaBean.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilderFileBased.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingMultiFileConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestConfigurations.java",
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestParameters.java",
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultConversionHandler.java",
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultListDelimiterHandler.java",
            "src/test/java/org/apache/commons/configuration2/convert/TestDisabledListDelimiterHandler.java",
            "src/test/java/org/apache/commons/configuration2/convert/TestPropertyConverter.java",
            "src/test/java/org/apache/commons/configuration2/event/AbstractEventListenerTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/event/ErrorListenerTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/event/EventListenerTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/event/TestConfigurationEventTypes.java",
            "src/test/java/org/apache/commons/configuration2/event/TestDatabaseConfigurationEvents.java",
            "src/test/java/org/apache/commons/configuration2/event/TestEvent.java",
            "src/test/java/org/apache/commons/configuration2/event/TestEventListenerList.java",
            "src/test/java/org/apache/commons/configuration2/event/TestEventSource.java",
            "src/test/java/org/apache/commons/configuration2/event/TestEventType.java",
            "src/test/java/org/apache/commons/configuration2/event/TestHierarchicalConfigurationEvents.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestConfigurationInterpolator.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestConstantLookup.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestEnvironmentLookup.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestExprLookup.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestInterpolatorSpecification.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestSystemPropertiesLookup.java",
            "src/test/java/org/apache/commons/configuration2/io/TestAbsoluteNameLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestBasePathLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestClasspathLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestCombinedLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestConfigurationLogger.java",
            "src/test/java/org/apache/commons/configuration2/io/TestDefaultFileSystem.java",
            "src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java",
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocator.java",
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocatorUtils.java",
            "src/test/java/org/apache/commons/configuration2/io/TestFileSystemLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestHomeDirectoryLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestProvidedURLLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfigurationEvents.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListParser.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfigurationEvents.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestPeriodicReloadingTrigger.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestReloadingController.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestVFSFileHandlerReloadingDetector.java",
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertiesFactoryBean.java",
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertySource.java",
            "src/test/java/org/apache/commons/configuration2/sync/TestReadWriteSynchronizer.java",
            "src/test/java/org/apache/commons/configuration2/test/HsqlDB.java",
            "src/test/java/org/apache/commons/configuration2/tree/AbstractCombinerTest.java",
            "src/test/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandlerTest.java",
            "src/test/java/org/apache/commons/configuration2/tree/NodeStructureHelper.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngineSymbols.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestImmutableNode.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelReferences.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestMergeCombiner.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeAddData.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeHandlerDecorator.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeNameMatchers.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeSelector.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeTreeWalker.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeUpdateData.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestQueryResult.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeHandler.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeModel.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestTreeData.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestUnionCombiner.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/AbstractXPathTest.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationAttributePointer.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationIteratorAttributes.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodeIteratorChildren.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointer.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointerFactory.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathContextFactory.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngine.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngineInConfig.java",
            "src/test/java/org/apache/commons/configuration2/web/TestAppletConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/web/TestServletConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/web/TestServletContextConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/web/TestServletFilterConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/web/TestServletRequestConfiguration.java"
        ],
        "changed_files_num": 360,
        "changed_java_files": [
            "src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/AbstractHierarchicalConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/AbstractYAMLBasedConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/BaseConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/BaseConfigurationXMLReader.java",
            "src/main/java/org/apache/commons/configuration2/BaseHierarchicalConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/CombinedConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/CompositeConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationLookup.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationMap.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java",
            "src/main/java/org/apache/commons/configuration2/ConfigurationXMLReader.java",
            "src/main/java/org/apache/commons/configuration2/DataConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/DynamicCombinedConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/EnvironmentConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/FindNodeVisitor.java",
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationConverter.java",
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationXMLReader.java",
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/ImmutableConfigurationInvocationHandler.java",
            "src/main/java/org/apache/commons/configuration2/JNDIConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/JSONConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/MapConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/PatternSubtreeConfigurationWrapper.java",
            "src/main/java/org/apache/commons/configuration2/PrefixedKeysIterator.java",
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/PropertiesConfigurationLayout.java",
            "src/main/java/org/apache/commons/configuration2/StrictConfigurationComparator.java",
            "src/main/java/org/apache/commons/configuration2/SubnodeConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/SubsetConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/SystemConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/XMLConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/XMLDocumentHelper.java",
            "src/main/java/org/apache/commons/configuration2/XMLListReference.java",
            "src/main/java/org/apache/commons/configuration2/XMLPropertiesConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/YAMLConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/BeanHelper.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/CombinedBeanDeclaration.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaClass.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConstructorArg.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/DefaultBeanFactory.java",
            "src/main/java/org/apache/commons/configuration2/beanutils/XMLBeanDeclaration.java",
            "src/main/java/org/apache/commons/configuration2/builder/AutoSaveListener.java",
            "src/main/java/org/apache/commons/configuration2/builder/BasicBuilderParameters.java",
            "src/main/java/org/apache/commons/configuration2/builder/BasicConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/BuilderConfigurationWrapperFactory.java",
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderEvent.java",
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderResultCreatedEvent.java",
            "src/main/java/org/apache/commons/configuration2/builder/CopyObjectDefaultHandler.java",
            "src/main/java/org/apache/commons/configuration2/builder/DatabaseBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/DefaultParametersManager.java",
            "src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java",
            "src/main/java/org/apache/commons/configuration2/builder/EventListenerParameters.java",
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/HierarchicalBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/JndiBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/PropertiesBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingBuilderSupportListener.java",
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingFileBasedConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/XMLBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/BaseConfigurationBuilderProvider.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilderProvider.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ConfigurationDeclaration.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/FileExtensionConfigurationBuilderProvider.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileBuilderParametersImpl.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilderProvider.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaBean.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaClass.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingMultiFileConfigurationBuilder.java",
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Configurations.java",
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Parameters.java",
            "src/main/java/org/apache/commons/configuration2/convert/AbstractListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/DefaultConversionHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/DefaultListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/DisabledListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/LegacyListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/ListDelimiterHandler.java",
            "src/main/java/org/apache/commons/configuration2/convert/PropertyConverter.java",
            "src/main/java/org/apache/commons/configuration2/event/BaseEventSource.java",
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationErrorEvent.java",
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationEvent.java",
            "src/main/java/org/apache/commons/configuration2/event/Event.java",
            "src/main/java/org/apache/commons/configuration2/event/EventListenerList.java",
            "src/main/java/org/apache/commons/configuration2/event/EventListenerRegistrationData.java",
            "src/main/java/org/apache/commons/configuration2/event/EventType.java",
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationException.java",
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationRuntimeException.java",
            "src/main/java/org/apache/commons/configuration2/ex/ConversionException.java",
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java",
            "src/main/java/org/apache/commons/configuration2/interpol/ConstantLookup.java",
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java",
            "src/main/java/org/apache/commons/configuration2/interpol/DummyLookup.java",
            "src/main/java/org/apache/commons/configuration2/interpol/EnvironmentLookup.java",
            "src/main/java/org/apache/commons/configuration2/interpol/ExprLookup.java",
            "src/main/java/org/apache/commons/configuration2/interpol/InterpolatorSpecification.java",
            "src/main/java/org/apache/commons/configuration2/interpol/SystemPropertiesLookup.java",
            "src/main/java/org/apache/commons/configuration2/io/AbsoluteNameLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/BasePathLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/ClasspathLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/CombinedLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/ConfigurationLogger.java",
            "src/main/java/org/apache/commons/configuration2/io/DefaultFileSystem.java",
            "src/main/java/org/apache/commons/configuration2/io/FileHandler.java",
            "src/main/java/org/apache/commons/configuration2/io/FileHandlerListenerAdapter.java",
            "src/main/java/org/apache/commons/configuration2/io/FileLocator.java",
            "src/main/java/org/apache/commons/configuration2/io/FileLocatorUtils.java",
            "src/main/java/org/apache/commons/configuration2/io/FileSystem.java",
            "src/main/java/org/apache/commons/configuration2/io/FileSystemLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/HomeDirectoryLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/ProvidedURLLocationStrategy.java",
            "src/main/java/org/apache/commons/configuration2/io/VFSFileSystem.java",
            "src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java",
            "src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java",
            "src/main/java/org/apache/commons/configuration2/reloading/PeriodicReloadingTrigger.java",
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingController.java",
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingEvent.java",
            "src/main/java/org/apache/commons/configuration2/reloading/VFSFileHandlerReloadingDetector.java",
            "src/main/java/org/apache/commons/configuration2/resolver/CatalogResolver.java",
            "src/main/java/org/apache/commons/configuration2/resolver/DefaultEntityResolver.java",
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertiesFactoryBean.java",
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertySource.java",
            "src/main/java/org/apache/commons/configuration2/sync/ReadWriteSynchronizer.java",
            "src/main/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandler.java",
            "src/main/java/org/apache/commons/configuration2/tree/ConfigurationNodeVisitorAdapter.java",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultConfigurationKey.java",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngine.java",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngineSymbols.java",
            "src/main/java/org/apache/commons/configuration2/tree/ImmutableNode.java",
            "src/main/java/org/apache/commons/configuration2/tree/InMemoryNodeModel.java",
            "src/main/java/org/apache/commons/configuration2/tree/MergeCombiner.java",
            "src/main/java/org/apache/commons/configuration2/tree/ModelTransaction.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeAddData.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeCombiner.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeHandlerDecorator.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeNameMatchers.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeSelector.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeTracker.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeTreeWalker.java",
            "src/main/java/org/apache/commons/configuration2/tree/NodeUpdateData.java",
            "src/main/java/org/apache/commons/configuration2/tree/OverrideCombiner.java",
            "src/main/java/org/apache/commons/configuration2/tree/QueryResult.java",
            "src/main/java/org/apache/commons/configuration2/tree/ReferenceTracker.java",
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeHandler.java",
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeModel.java",
            "src/main/java/org/apache/commons/configuration2/tree/TreeData.java",
            "src/main/java/org/apache/commons/configuration2/tree/TreeUtils.java",
            "src/main/java/org/apache/commons/configuration2/tree/UnionCombiner.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationAttributePointer.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorAttribute.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorBase.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorChildren.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointer.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointerFactory.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathContextFactory.java",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathExpressionEngine.java",
            "src/main/java/org/apache/commons/configuration2/web/AppletConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/BaseWebConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/ServletConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/ServletContextConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/ServletFilterConfiguration.java",
            "src/main/java/org/apache/commons/configuration2/web/ServletRequestConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/BaseNonStringProperties.java",
            "src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java",
            "src/test/java/org/apache/commons/configuration2/DatabaseConfigurationTestHelper.java",
            "src/test/java/org/apache/commons/configuration2/FileURLStreamHandler.java",
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java",
            "src/test/java/org/apache/commons/configuration2/Logging.java",
            "src/test/java/org/apache/commons/configuration2/MockInitialContextFactory.java",
            "src/test/java/org/apache/commons/configuration2/NonCloneableConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/NonStringTestHolder.java",
            "src/test/java/org/apache/commons/configuration2/SynchronizerTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationSynchronization.java",
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfigurationXMLReader.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseHierarchicalConfigurationSynchronization.java",
            "src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestCatalogResolver.java",
            "src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfigurationNonStringProperties.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationConverter.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationLookup.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationMap.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationSet.java",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java",
            "src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestDynamicCombinedConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestEnvironmentConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestEqualBehaviour.java",
            "src/test/java/org/apache/commons/configuration2/TestEqualsProperty.java",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfigurationXMLReader.java",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalXMLConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestImmutableConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestJNDIEnvironmentValues.java",
            "src/test/java/org/apache/commons/configuration2/TestJSONConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestMapConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestNonStringProperties.java",
            "src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestNullJNDIEnvironmentValues.java",
            "src/test/java/org/apache/commons/configuration2/TestPatternSubtreeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesSequence.java",
            "src/test/java/org/apache/commons/configuration2/TestStrictConfigurationComparator.java",
            "src/test/java/org/apache/commons/configuration2/TestSubnodeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestSystemConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestThreesomeConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration_605.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLDocumentHelper.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLListHandling.java",
            "src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/TestYAMLConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBean.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBeanWithListChild.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestCtorBean.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanDeclarationTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestBeanHelper.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestCombinedBeanDeclaration.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConstructorArg.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestDefaultBeanFactory.java",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestXMLBeanDeclaration.java",
            "src/test/java/org/apache/commons/configuration2/builder/BuilderEventListenerImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/ParametersBeanTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestAutoSaveListener.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilderEvents.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestBuilderConfigurationWrapperFactory.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestCopyObjectDefaultHandler.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestDatabaseBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultParametersManager.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultReloadingDetectorFactory.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestEventListenerParameters.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestHierarchicalBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestJndiBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestPropertiesBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingBuilderSupportListener.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingFileBasedConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/TestXMLBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/AbstractMultiFileConfigurationBuilderTest.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestBaseConfigurationBuilderProvider.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilderVFS.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestConfigurationDeclaration.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestFileExtensionConfigurationBuilderProvider.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileBuilderParametersImpl.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiWrapDynaBean.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilderFileBased.java",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingMultiFileConfigurationBuilder.java",
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestConfigurations.java",
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestParameters.java",
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultConversionHandler.java",
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultListDelimiterHandler.java",
            "src/test/java/org/apache/commons/configuration2/convert/TestDisabledListDelimiterHandler.java",
            "src/test/java/org/apache/commons/configuration2/convert/TestPropertyConverter.java",
            "src/test/java/org/apache/commons/configuration2/event/AbstractEventListenerTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/event/ErrorListenerTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/event/EventListenerTestImpl.java",
            "src/test/java/org/apache/commons/configuration2/event/TestConfigurationEventTypes.java",
            "src/test/java/org/apache/commons/configuration2/event/TestDatabaseConfigurationEvents.java",
            "src/test/java/org/apache/commons/configuration2/event/TestEvent.java",
            "src/test/java/org/apache/commons/configuration2/event/TestEventListenerList.java",
            "src/test/java/org/apache/commons/configuration2/event/TestEventSource.java",
            "src/test/java/org/apache/commons/configuration2/event/TestEventType.java",
            "src/test/java/org/apache/commons/configuration2/event/TestHierarchicalConfigurationEvents.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestConfigurationInterpolator.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestConstantLookup.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestEnvironmentLookup.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestExprLookup.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestInterpolatorSpecification.java",
            "src/test/java/org/apache/commons/configuration2/interpol/TestSystemPropertiesLookup.java",
            "src/test/java/org/apache/commons/configuration2/io/TestAbsoluteNameLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestBasePathLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestClasspathLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestCombinedLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestConfigurationLogger.java",
            "src/test/java/org/apache/commons/configuration2/io/TestDefaultFileSystem.java",
            "src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java",
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocator.java",
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocatorUtils.java",
            "src/test/java/org/apache/commons/configuration2/io/TestFileSystemLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestHomeDirectoryLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/io/TestProvidedURLLocationStrategy.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfigurationEvents.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListParser.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfigurationEvents.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestPeriodicReloadingTrigger.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestReloadingController.java",
            "src/test/java/org/apache/commons/configuration2/reloading/TestVFSFileHandlerReloadingDetector.java",
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertiesFactoryBean.java",
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertySource.java",
            "src/test/java/org/apache/commons/configuration2/sync/TestReadWriteSynchronizer.java",
            "src/test/java/org/apache/commons/configuration2/test/HsqlDB.java",
            "src/test/java/org/apache/commons/configuration2/tree/AbstractCombinerTest.java",
            "src/test/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandlerTest.java",
            "src/test/java/org/apache/commons/configuration2/tree/NodeStructureHelper.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngineSymbols.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestImmutableNode.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelReferences.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestMergeCombiner.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeAddData.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeHandlerDecorator.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeNameMatchers.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeSelector.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeTreeWalker.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeUpdateData.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestQueryResult.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeHandler.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeModel.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestTreeData.java",
            "src/test/java/org/apache/commons/configuration2/tree/TestUnionCombiner.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/AbstractXPathTest.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationAttributePointer.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationIteratorAttributes.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodeIteratorChildren.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointer.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointerFactory.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathContextFactory.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngine.java",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngineInConfig.java",
            "src/test/java/org/apache/commons/configuration2/web/TestAppletConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/web/TestServletConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/web/TestServletContextConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/web/TestServletFilterConfiguration.java",
            "src/test/java/org/apache/commons/configuration2/web/TestServletRequestConfiguration.java"
        ],
        "changed_java_files_num": 360,
        "failed_test_list": [],
        "passed_test_list": [
            "TestXMLListHandling",
            "TestPeriodicReloadingTrigger",
            "TestConfigurationPropertySource",
            "TestPatternSubtreeConfiguration",
            "TestBaseNullConfiguration",
            "TestNonStringProperties",
            "TestNodeUpdateData",
            "TestFileBasedBuilderParameters",
            "TestReloadingCombinedConfigurationBuilderFileBased",
            "TestCombinedConfigurationBuilder",
            "TestCombinedConfigurationBuilderVFS",
            "TestInMemoryNodeModel",
            "TestServletRequestConfiguration",
            "TestJNDIConfiguration",
            "TestDefaultBeanFactory",
            "TestCombinedBeanDeclaration",
            "TestNodeSelector",
            "TestJndiBuilderParametersImpl",
            "TestEnvironmentLookup",
            "TestXPathContextFactory",
            "TestConfigurationUtils",
            "TestBasicConfigurationBuilder",
            "TestInMemoryNodeModelTrackedNodes",
            "TestQueryResult",
            "TestNodeAddData",
            "TestParameters",
            "TestMultiFileBuilderParametersImpl",
            "TestDataConfiguration",
            "TestFileBasedConfigurationBuilder",
            "TestFileHandlerReloadingDetector",
            "TestOverrideCombiner",
            "TestHierarchicalConfiguration",
            "TestConstantLookup",
            "TestCombinedLocationStrategy",
            "TestDisabledListDelimiterHandler",
            "TestManagedReloadingDetector",
            "TestHomeDirectoryLocationStrategy",
            "TestPropertiesConfigurationEvents",
            "TestEvent",
            "TestPropertiesBuilderParametersImpl",
            "TestHierarchicalXMLConfiguration",
            "TestXMLDocumentHelper",
            "TestCombinedConfiguration",
            "TestBasicBuilderParameters",
            "TestImmutableNode",
            "TestFileSystemLocationStrategy",
            "TestConfigurationMap",
            "TestDefaultExpressionEngineSymbols",
            "TestUnionCombiner",
            "TestConfigurationLogger",
            "TestMultiFileConfigurationBuilder",
            "TestReloadingMultiFileConfigurationBuilder",
            "TestXMLPropertyListConfigurationEvents",
            "TestEqualBehaviour",
            "TestReloadingBuilderSupportListener",
            "TestHierarchicalConfigurationEvents",
            "TestDummyLookup",
            "TestAbsoluteNameLocationStrategy",
            "TestConfigurationNodeIteratorChildren",
            "TestCompositeConfigurationNonStringProperties",
            "TestConfigurationConverter",
            "TestJNDIEnvironmentValues",
            "TestDefaultParametersManager",
            "TestNullJNDIEnvironmentValues",
            "TestXMLConfigurationEvents",
            "TestDefaultFileSystem",
            "TestServletContextConfiguration",
            "TestMapConfiguration",
            "TestNullCompositeConfiguration",
            "TestEventListenerParameters",
            "TestXMLBuilderParametersImpl",
            "TestAppletConfiguration",
            "TestTrackedNodeHandler",
            "TestConfigurationPropertiesFactoryBean",
            "TestDatabaseBuilderParametersImpl",
            "TestInMemoryNodeModelReferences",
            "TestDatabaseConfigurationEvents",
            "TestBeanHelper",
            "TestConfigurationNodePointerFactory",
            "TestConfigurationEventTypes",
            "TestBaseConfigurationBuilderProvider",
            "TestXMLPropertiesConfiguration",
            "TestConfigurationInterpolator",
            "TestTreeData",
            "TestThreesomeConfiguration",
            "TestYAMLConfiguration",
            "TestINIConfiguration",
            "TestMapConfigurationEvents",
            "TestBasicConfigurationBuilderEvents",
            "TestMultiWrapDynaBean",
            "TestHierarchicalBuilderParametersImpl",
            "TestSubsetConfiguration",
            "TestPropertyListConfiguration",
            "TestVFSFileHandlerReloadingDetector",
            "TestDefaultConfigurationKey",
            "TestInterpolatorSpecification",
            "TestDefaultListDelimiterHandler",
            "TestConfigurationLookup",
            "TestBaseHierarchicalConfigurationSynchronization",
            "TestDefaultExpressionEngine",
            "TestTrackedNodeModel",
            "TestSystemConfiguration",
            "TestFileExtensionConfigurationBuilderProvider",
            "TestExprLookup",
            "TestConfigurationSet",
            "TestCatalogResolver",
            "TestBaseConfiguration",
            "TestBuilderConfigurationWrapperFactory",
            "TestProvidedURLLocationStrategy",
            "TestConfigurationIteratorAttributes",
            "TestBasePathLocationStrategy",
            "TestConfigurationAttributePointer",
            "TestServletConfiguration",
            "TestConfigurationDynaBean",
            "TestReloadingController",
            "TestReadWriteSynchronizer",
            "TestClasspathLocationStrategy",
            "TestCombinedBuilderParametersImpl",
            "TestFileHandler",
            "TestDefaultReloadingDetectorFactory",
            "TestReloadingFileBasedConfigurationBuilder",
            "TestEventSource",
            "TestEnvironmentConfiguration",
            "TestNodeNameMatchers",
            "TestBaseConfigurationXMLReader",
            "TestConstructorArg",
            "TestDefaultConversionHandler",
            "TestXMLConfiguration_605",
            "TestXMLPropertyListConfiguration",
            "TestFileLocatorUtils",
            "TestPropertyListParser",
            "TestNodeTreeWalker",
            "TestPropertiesConfigurationLayout",
            "TestSubsetConfigurationEvents",
            "TestConfigurations",
            "TestSystemPropertiesLookup",
            "TestPropertyListConfigurationEvents",
            "TestAbstractConfigurationSynchronization",
            "TestEventListenerList",
            "TestConfigurationNodePointer",
            "TestMergeCombiner",
            "TestServletFilterConfiguration",
            "TestAutoSaveListener",
            "TestAbstractHierarchicalConfiguration",
            "TestEqualsProperty",
            "TestCombinedReloadingController",
            "TestDatabaseConfiguration",
            "TestHierarchicalConfigurationXMLReader",
            "TestXPathExpressionEngine",
            "TestPropertiesSequence",
            "TestXPathExpressionEngineInConfig",
            "TestConfigurationDynaBeanXMLConfig",
            "TestNodeHandlerDecorator",
            "TestJSONConfiguration",
            "TestConfigurationDeclaration",
            "TestXMLConfiguration",
            "TestPropertiesConfiguration",
            "TestFileLocator",
            "TestCompositeConfiguration",
            "TestPropertyConverter",
            "TestStrictConfigurationComparator",
            "TestSubnodeConfiguration",
            "TestXMLBeanDeclaration",
            "TestAbstractConfigurationBasicFeatures",
            "TestDynamicCombinedConfiguration",
            "TestCopyObjectDefaultHandler",
            "TestImmutableConfiguration",
            "TestReloadingCombinedConfigurationBuilder",
            "TestEventType"
        ],
        "tests_cases_num": {
            "TestAbstractConfigurationBasicFeatures": 64,
            "TestAbstractConfigurationSynchronization": 19,
            "TestAbstractHierarchicalConfiguration": 53,
            "TestBaseConfiguration": 59,
            "TestBaseConfigurationXMLReader": 4,
            "TestBaseHierarchicalConfigurationSynchronization": 14,
            "TestBaseNullConfiguration": 37,
            "TestCatalogResolver": 5,
            "TestCombinedConfiguration": 58,
            "TestCompositeConfiguration": 52,
            "TestCompositeConfigurationNonStringProperties": 23,
            "TestConfigurationConverter": 6,
            "TestConfigurationLookup": 5,
            "TestConfigurationMap": 1,
            "TestConfigurationSet": 2,
            "TestConfigurationUtils": 36,
            "TestDataConfiguration": 59,
            "TestDatabaseConfiguration": 36,
            "TestDynamicCombinedConfiguration": 12,
            "TestEnvironmentConfiguration": 5,
            "TestEqualBehaviour": 7,
            "TestEqualsProperty": 1,
            "TestHierarchicalConfiguration": 37,
            "TestHierarchicalConfigurationXMLReader": 1,
            "TestHierarchicalXMLConfiguration": 10,
            "TestINIConfiguration": 65,
            "TestImmutableConfiguration": 10,
            "TestJNDIConfiguration": 27,
            "TestJNDIEnvironmentValues": 12,
            "TestJSONConfiguration": 10,
            "TestMapConfiguration": 20,
            "TestNonStringProperties": 23,
            "TestNullCompositeConfiguration": 23,
            "TestNullJNDIEnvironmentValues": 12,
            "TestPatternSubtreeConfiguration": 3,
            "TestPropertiesConfiguration": 72,
            "TestPropertiesConfigurationLayout": 38,
            "TestPropertiesSequence": 3,
            "TestStrictConfigurationComparator": 2,
            "TestSubnodeConfiguration": 24,
            "TestSubsetConfiguration": 21,
            "TestSystemConfiguration": 5,
            "TestThreesomeConfiguration": 3,
            "TestXMLConfiguration": 94,
            "TestXMLConfiguration_605": 8,
            "TestXMLDocumentHelper": 11,
            "TestXMLListHandling": 5,
            "TestXMLPropertiesConfiguration": 4,
            "TestYAMLConfiguration": 9,
            "TestBeanHelper": 27,
            "TestCombinedBeanDeclaration": 12,
            "TestConfigurationDynaBean": 42,
            "TestConfigurationDynaBeanXMLConfig": 42,
            "TestConstructorArg": 6,
            "TestDefaultBeanFactory": 11,
            "TestXMLBeanDeclaration": 28,
            "TestAutoSaveListener": 7,
            "TestBasicBuilderParameters": 34,
            "TestBasicConfigurationBuilder": 27,
            "TestBasicConfigurationBuilderEvents": 11,
            "TestBuilderConfigurationWrapperFactory": 8,
            "TestCopyObjectDefaultHandler": 4,
            "TestDatabaseBuilderParametersImpl": 8,
            "TestDefaultParametersManager": 9,
            "TestDefaultReloadingDetectorFactory": 2,
            "TestEventListenerParameters": 4,
            "TestFileBasedBuilderParameters": 24,
            "TestFileBasedConfigurationBuilder": 24,
            "TestHierarchicalBuilderParametersImpl": 3,
            "TestJndiBuilderParametersImpl": 4,
            "TestPropertiesBuilderParametersImpl": 6,
            "TestReloadingBuilderSupportListener": 2,
            "TestReloadingFileBasedConfigurationBuilder": 9,
            "TestXMLBuilderParametersImpl": 8,
            "TestBaseConfigurationBuilderProvider": 9,
            "TestCombinedBuilderParametersImpl": 27,
            "TestCombinedConfigurationBuilder": 51,
            "TestCombinedConfigurationBuilderVFS": 52,
            "TestConfigurationDeclaration": 5,
            "TestFileExtensionConfigurationBuilderProvider": 10,
            "TestMultiFileBuilderParametersImpl": 7,
            "TestMultiFileConfigurationBuilder": 16,
            "TestMultiWrapDynaBean": 13,
            "TestReloadingCombinedConfigurationBuilder": 5,
            "TestReloadingCombinedConfigurationBuilderFileBased": 4,
            "TestReloadingMultiFileConfigurationBuilder": 6,
            "TestConfigurations": 32,
            "TestParameters": 19,
            "TestDefaultConversionHandler": 23,
            "TestDefaultListDelimiterHandler": 13,
            "TestDisabledListDelimiterHandler": 13,
            "TestPropertyConverter": 26,
            "TestConfigurationEventTypes": 19,
            "TestDatabaseConfigurationEvents": 8,
            "TestEvent": 3,
            "TestEventListenerList": 31,
            "TestEventSource": 19,
            "TestEventType": 1,
            "TestHierarchicalConfigurationEvents": 13,
            "TestMapConfigurationEvents": 8,
            "TestPropertiesConfigurationEvents": 8,
            "TestSubsetConfigurationEvents": 8,
            "TestXMLConfigurationEvents": 13,
            "TestConfigurationInterpolator": 41,
            "TestConstantLookup": 8,
            "TestDummyLookup": 1,
            "TestEnvironmentLookup": 2,
            "TestExprLookup": 6,
            "TestInterpolatorSpecification": 10,
            "TestSystemPropertiesLookup": 2,
            "TestAbsoluteNameLocationStrategy": 4,
            "TestBasePathLocationStrategy": 4,
            "TestClasspathLocationStrategy": 3,
            "TestCombinedLocationStrategy": 7,
            "TestConfigurationLogger": 16,
            "TestDefaultFileSystem": 3,
            "TestFileHandler": 85,
            "TestFileLocator": 8,
            "TestFileLocatorUtils": 36,
            "TestFileSystemLocationStrategy": 1,
            "TestHomeDirectoryLocationStrategy": 6,
            "TestProvidedURLLocationStrategy": 2,
            "TestPropertyListConfiguration": 23,
            "TestPropertyListConfigurationEvents": 10,
            "TestPropertyListParser": 4,
            "TestXMLPropertyListConfiguration": 24,
            "TestXMLPropertyListConfigurationEvents": 10,
            "TestCombinedReloadingController": 8,
            "TestFileHandlerReloadingDetector": 11,
            "TestManagedReloadingDetector": 3,
            "TestPeriodicReloadingTrigger": 9,
            "TestReloadingController": 8,
            "TestVFSFileHandlerReloadingDetector": 6,
            "TestConfigurationPropertiesFactoryBean": 10,
            "TestConfigurationPropertySource": 1,
            "TestReadWriteSynchronizer": 3,
            "TestDefaultConfigurationKey": 33,
            "TestDefaultExpressionEngine": 38,
            "TestDefaultExpressionEngineSymbols": 6,
            "TestImmutableNode": 35,
            "TestInMemoryNodeModel": 39,
            "TestInMemoryNodeModelReferences": 12,
            "TestInMemoryNodeModelTrackedNodes": 43,
            "TestMergeCombiner": 8,
            "TestNodeAddData": 4,
            "TestNodeHandlerDecorator": 25,
            "TestNodeNameMatchers": 6,
            "TestNodeSelector": 12,
            "TestNodeTreeWalker": 8,
            "TestNodeUpdateData": 7,
            "TestOverrideCombiner": 9,
            "TestQueryResult": 9,
            "TestTrackedNodeHandler": 2,
            "TestTrackedNodeModel": 13,
            "TestTreeData": 25,
            "TestUnionCombiner": 6,
            "TestConfigurationAttributePointer": 13,
            "TestConfigurationIteratorAttributes": 6,
            "TestConfigurationNodeIteratorChildren": 13,
            "TestConfigurationNodePointer": 7,
            "TestConfigurationNodePointerFactory": 8,
            "TestXPathContextFactory": 1,
            "TestXPathExpressionEngine": 34,
            "TestXPathExpressionEngineInConfig": 6,
            "TestAppletConfiguration": 12,
            "TestServletConfiguration": 12,
            "TestServletContextConfiguration": 12,
            "TestServletFilterConfiguration": 12,
            "TestServletRequestConfiguration": 13
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            final ListDelimiterHandler listDelimiterHandler)\n+    public void setConversionHandler(final ConversionHandler conversionHandler)\n+    public void setThrowExceptionOnMissing(final boolean throwExceptionOnMissing)\n+    public final void setInterpolator(final ConfigurationInterpolator ci)\n+            final Map<String, ? extends Lookup> prefixLookups,\n+            final Collection<? extends Lookup> defLookups)\n+        final InterpolatorSpecification spec =\n+    public void setPrefixLookups(final Map<String, ? extends Lookup> lookups)\n+            final ConfigurationInterpolator ciOld = getInterpolator();\n+            final ConfigurationInterpolator ciNew =\n+    public void setDefaultLookups(final Collection<? extends Lookup> lookups)\n+            final ConfigurationInterpolator ciOld = getInterpolator();\n+            final ConfigurationInterpolator ciNew =\n+    public void setParentInterpolator(final ConfigurationInterpolator parent)\n+            final ConfigurationInterpolator ciOld = getInterpolator();\n+            final ConfigurationInterpolator ciNew =\n+            final ConfigurationDecoder configurationDecoder)\n+    protected void cloneInterpolator(final AbstractConfiguration orgConfig)\n+        final ConfigurationInterpolator orgInterpolator = orgConfig.getInterpolator();\n+        final List<Lookup> defaultLookups = orgInterpolator.getDefaultLookups();\n+        final Lookup lookup = findConfigurationLookup(orgInterpolator, orgConfig);\n+    private Lookup findConfigurationLookup(final ConfigurationInterpolator ci)\n+    private static Lookup findConfigurationLookup(final ConfigurationInterpolator ci,\n+            final ImmutableConfiguration targetConf)\n+        for (final Lookup l : ci.getDefaultLookups())\n+    public void setLogger(final ConfigurationLogger log)\n+                    public void onEvent(final ConfigurationErrorEvent event)\n+        final Synchronizer sync = synchronizer;\n+    public final void setSynchronizer(final Synchronizer synchronizer)\n+    public final void lock(final LockMode mode)\n+    public final void unlock(final LockMode mode)\n+    protected void beginRead(final boolean optimize)\n+    protected void beginWrite(final boolean optimize)\n+    public final void addProperty(final String key, final Object value)\n+    protected void addPropertyInternal(final String key, final Object value)\n+        for (final Object obj : getListDelimiterHandler().parse(value))\n+    protected String interpolate(final String base)\n+        final Object result = interpolate((Object) base);\n+    protected Object interpolate(final Object value)\n+        final ConfigurationInterpolator ci = getInterpolator();\n+    public Configuration subset(final String prefix)\n+    public ImmutableConfiguration immutableSubset(final String prefix)\n+    public final void setProperty(final String key, final Object value)\n+    protected void setPropertyInternal(final String key, final Object value)\n+    public final void clearProperty(final String key)\n+            final Iterator<String> it = getKeys();\n+                final String key = it.next();\n+                    catch (final UnsupportedOperationException usoex)\n+    public final Iterator<String> getKeys(final String prefix)\n+    protected Iterator<String> getKeysInternal(final String prefix)\n+    public final Object getProperty(final String key)\n+        for (final Iterator<String> keyIt = getKeysInternal(); keyIt.hasNext(); size++)\n+    public final boolean containsKey(final String key)\n+    public Properties getProperties(final String key)\n+    public Properties getProperties(final String key, final Properties defaults)\n+        final String[] tokens = getStringArray(key);\n+        final Properties props = defaults == null ? new Properties() : new Properties(defaults);\n+        for (final String token : tokens)\n+            final int equalSign = token.indexOf('=');\n+                final String pkey = token.substring(0, equalSign).trim();\n+                final String pvalue = token.substring(equalSign + 1).trim();\n+    public boolean getBoolean(final String key)\n+        final Boolean b = convert(Boolean.class, key, null, true);\n+    public boolean getBoolean(final String key, final boolean defaultValue)\n+    public Boolean getBoolean(final String key, final Boolean defaultValue)\n+    public byte getByte(final String key)\n+        final Byte b = convert(Byte.class, key, null, true);\n+    public byte getByte(final String key, final byte defaultValue)\n+    public Byte getByte(final String key, final Byte defaultValue)\n+    public double getDouble(final String key)\n+        final Double d = convert(Double.class, key, null, true);\n+    public double getDouble(final String key, final double defaultValue)\n+    public Double getDouble(final String key, final Double defaultValue)\n+    public float getFloat(final String key)\n+        final Float f = convert(Float.class, key, null, true);\n+    public float getFloat(final String key, final float defaultValue)\n+    public Float getFloat(final String key, final Float defaultValue)\n+    public int getInt(final String key)\n+        final Integer i = convert(Integer.class, key, null, true);\n+    public int getInt(final String key, final int defaultValue)\n+    public Integer getInteger(final String key, final Integer defaultValue)\n+    public long getLong(final String key)\n+        final Long l = convert(Long.class, key, null, true);\n+    public long getLong(final String key, final long defaultValue)\n+    public Long getLong(final String key, final Long defaultValue)\n+    public short getShort(final String key)\n+        final Short s = convert(Short.class, key, null, true);\n+    public short getShort(final String key, final short defaultValue)\n+    public Short getShort(final String key, final Short defaultValue)\n+    public BigDecimal getBigDecimal(final String key)\n+    public BigDecimal getBigDecimal(final String key, final BigDecimal defaultValue)\n+    public BigInteger getBigInteger(final String key)\n+    public BigInteger getBigInteger(final String key, final BigInteger defaultValue)\n+    public String getString(final String key)\n+    public String getString(final String key, final String defaultValue)\n+        final String result = convert(String.class, key, null, false);\n+    public String getEncodedString(final String key, final ConfigurationDecoder decoder)\n+        final String value = getString(key);\n+    public String getEncodedString(final String key)\n+        final ConfigurationDecoder decoder = getConfigurationDecoder();\n+    public String[] getStringArray(final String key)\n+        final String[] result = (String[]) getArray(String.class, key);\n+    public List<Object> getList(final String key)\n+    public List<Object> getList(final String key, final List<?> defaultValue)\n+        final Object value = getProperty(key);\n+            final List<?> l = (List<?>) value;\n+            for (final Object elem : l)\n+            final\n+    public <T> T get(final Class<T> cls, final String key)\n+    public <T> T get(final Class<T> cls, final String key, final T defaultValue)\n+    public Object getArray(final Class<?> cls, final String key)\n+    public Object getArray(final Class<?> cls, final String key, final Object defaultValue)\n+    public <T> List<T> getList(final Class<T> cls, final String key)\n+    public <T> List<T> getList(final Class<T> cls, final String key, final List<T> defaultValue)\n+        final List<T> result = new ArrayList<>();\n+    public <T> Collection<T> getCollection(final Class<T> cls, final String key,\n+            final Collection<T> target)\n+    public <T> Collection<T> getCollection(final Class<T> cls, final String key,\n+            final Collection<T> target, final Collection<T> defaultValue)\n+        final Object src = getProperty(key);\n+        final Collection<T> targetCol =\n+    protected boolean isScalarValue(final Object value)\n+    public void copy(final Configuration c)\n+                for (final Iterator<String> it = c.getKeys(); it.hasNext();)\n+                    final String key = it.next();\n+                    final Object value = encodeForCopy(c.getProperty(key));\n+    public void append(final Configuration c)\n+                for (final Iterator<String> it = c.getKeys(); it.hasNext();)\n+                    final String key = it.next();\n+                    final Object value = encodeForCopy(c.getProperty(key));\n+        final AbstractConfiguration c = (AbstractConfiguration) ConfigurationUtils\n+        for (final Iterator<String> it = getKeys(); it.hasNext();)\n+            final String key = it.next();\n+    protected final void initLogger(final ConfigurationLogger log)\n+    private Object encodeForCopy(final Object value)\n+    private Object encodeListForCopy(final Collection<?> values)\n+        final List<Object> result = new ArrayList<>(values.size());\n+        for (final Object value : values)\n+    private <T> T getAndConvertProperty(final Class<T> cls, final String key, final T defaultValue)\n+        final Object value = getProperty(key);\n+        catch (final ConversionException cex)\n+    private <T> T convert(final Class<T> cls, final String key, final T defValue,\n+            final boolean throwOnMissing)\n+        final T result = getAndConvertProperty(cls, key, defValue);\n+    private Object convertToArray(final Class<?> cls, final String key, final Object defaultValue)\n+    private static void checkDefaultValueArray(final Class<?> cls, final Object defaultValue)\n+    private static <T> Collection<T> handleDefaultCollection(final Collection<T> target,\n+            final Collection<T> defaultValue)\n+    private static <T> T checkNonNullValue(final String key, final T value)\n+    private static void throwMissingPropertyException(final String key)\n+    protected AbstractHierarchicalConfiguration(final NodeModel<T> nodeModel)\n+        final NodeHandler<T> nodeHandler = getModel().getNodeHandler();\n+    public void setExpressionEngine(final ExpressionEngine expressionEngine)\n+    protected Object getPropertyInternal(final String key)\n+        final List<QueryResult<T>> results = fetchNodeList(key);\n+        final NodeHandler<T> handler = getModel().getNodeHandler();\n+        final List<Object> list = new ArrayList<>();\n+        for (final QueryResult<T> result : results)\n+            final Object value = valueFromResult(result, handler);\n+    protected void addPropertyInternal(final String key, final Object obj)\n+    protected void addPropertyDirect(final String key, final Object value)\n+    private void addPropertyToModel(final String key, final Iterable<?> values)\n+    public final void addNodes(final String key, final Collection<? extends T> nodes)\n+    protected void addNodesInternal(final String key, final Collection<? extends T> nodes)\n+    protected boolean containsKeyInternal(final String key)\n+    protected void setPropertyInternal(final String key, final Object value)\n+    public List<QueryResult<T>> resolveKey(final T root, final String key,\n+            final NodeHandler<T> handler)\n+    public List<T> resolveNodeKey(final T root, final String key, final NodeHandler<T> handler)\n+        final List<QueryResult<T>> results = resolveKey(root, key, handler);\n+        final List<T> targetNodes = new LinkedList<>();\n+        for (final QueryResult<T> result : results)\n+    public NodeAddData<T> resolveAddKey(final T root, final String key,\n+            final NodeHandler<T> handler)\n+    public NodeUpdateData<T> resolveUpdateKey(final T root, final String key,\n+            final Object newValue, final NodeHandler<T> handler)\n+        final Iterator<QueryResult<T>> itNodes = fetchNodeList(key).iterator();\n+        final Iterator<?> itValues = getListDelimiterHandler().parse(newValue).iterator();\n+        final Map<QueryResult<T>, Object> changedValues =\n+    public String nodeKey(final T node, final Map<T, String> cache, final NodeHandler<T> handler)\n+        final List<T> path = new LinkedList<>();\n+        for (final T n : path)\n+            final String currentKey = getExpressionEngine().canonicalKey(n, key, handler);\n+    public final void clearTree(final String key)\n+            final Object nodes = clearTreeInternal(key);\n+    protected Object clearTreeInternal(final String key)\n+    protected void clearPropertyDirect(final String key)\n+        final DefinedKeysVisitor visitor = new DefinedKeysVisitor();\n+        final NodeHandler<T> nodeHandler = getModel().getNodeHandler();\n+    protected Iterator<String> getKeysInternal(final String prefix)\n+        final DefinedKeysVisitor visitor = new DefinedKeysVisitor(prefix);\n+        final List<QueryResult<T>> results = fetchNodeList(prefix);\n+        final NodeHandler<T> handler = getModel().getNodeHandler();\n+        for (final QueryResult<T> result : results)\n+                for (final T c : handler.getChildren(result.getNode()))\n+    public final int getMaxIndex(final String key)\n+    protected int getMaxIndexInternal(final String key)\n+            final\n+        catch (final CloneNotSupportedException cex)\n+    protected List<QueryResult<T>> fetchNodeList(final String key)\n+        final NodeHandler<T> nodeHandler = getModel().getNodeHandler();\n+    protected boolean nodeDefined(final T node)\n+        final DefinedVisitor<T> visitor = new DefinedVisitor<>();\n+    private Object valueFromResult(final QueryResult<T> result, final NodeHandler<T> handler)\n+        public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n+        public DefinedKeysVisitor(final String prefix)\n+        public void visitAfterChildren(final T node, final NodeHandler<T> handler)\n+        public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n+            final String parentKey = parentKeys.isEmpty() ? null\n+            final String key = getExpressionEngine().nodeKey(node, parentKey, handler);\n+        public void handleAttributeKeys(final String parentKey, final T node,\n+                final NodeHandler<T> handler)\n+            for (final String attr : handler.getAttributes(node))\n+            final HierarchicalConfiguration<ImmutableNode> c)\n+    protected void load(final Map<String, Object> map)\n+        final List<ImmutableNode> roots = constructHierarchy(\"\", map);\n+    protected Map<String, Object> constructMap(final ImmutableNode node)\n+        final Map<String, Object> map = new HashMap<>(node.getChildren().size());\n+        for (final ImmutableNode cNode : node.getChildren())\n+            final Object value = cNode.getChildren().isEmpty() ? cNode.getValue()\n+    private static void addEntry(final Map<String, Object> map, final String key,\n+            final Object value)\n+        final Object oldValue = map.get(key);\n+            final\n+            final Collection<Object> values = new ArrayList<>();\n+    private static List<ImmutableNode> constructHierarchy(final String key,\n+            final Object elem)\n+    private static List<ImmutableNode> parseMap(final Map<String, Object> map, final String key)\n+        final ImmutableNode.Builder subtree = new ImmutableNode.Builder().name(key);\n+        for (final Map.Entry<String, Object> entry : map.entrySet())\n+            final List<ImmutableNode> children =\n+            for (final ImmutableNode child : children)\n+    private static List<ImmutableNode> parseCollection(final Collection<Object> col, final String key)\n+        final List<ImmutableNode> nodes = new ArrayList<>(col.size());\n+        for (final Object elem : col)\n+    static void rethrowException(final Exception e) throws ConfigurationException\n+    protected void addPropertyDirect(final String key, final Object value)\n+        final Object previousValue = getPropertyInternal(key);\n+            final\n+            final List<Object> list = new ArrayList<>();\n+    protected Object getPropertyInternal(final String key)\n+    protected boolean containsKeyInternal(final String key)\n+    protected void clearPropertyDirect(final String key)\n+            final BaseConfiguration copy = (BaseConfiguration) super.clone();\n+        catch (final CloneNotSupportedException cex)\n+    private void cloneStore(final BaseConfiguration copy)\n+        final\n+        for (final Map.Entry<String, Object> e : store.entrySet())\n+                final\n+    public BaseConfigurationXMLReader(final Configuration conf)\n+    public void setConfiguration(final Configuration conf)\n+        protected void elementStart(final String name, final Object value)\n+        protected void elementEnd(final String name)\n+    public BaseHierarchicalConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n+    protected BaseHierarchicalConfiguration(final NodeModel<ImmutableNode> model)\n+    public Configuration subset(final String prefix)\n+            final List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);\n+            final BaseHierarchicalConfiguration result =\n+                        protected Object interpolate(final Object value)\n+            final Collection<QueryResult<ImmutableNode>> results)\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder();\n+        for (final QueryResult<ImmutableNode> result : results)\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key,\n+            final boolean supportUpdates)\n+    protected NodeSelector getSubConfigurationNodeSelector(final String key)\n+            final NodeSelector selector, final InMemoryNodeModelSupport parentModelSupport)\n+        final SubnodeConfiguration subConfig =\n+    protected void initSubConfigurationForThisParent(final SubnodeConfiguration subConfig)\n+            final String key)\n+        final NodeSelector selector = getSubConfigurationNodeSelector(key);\n+            final InMemoryNodeModelSupport parentModelSupport,\n+            final Collection<NodeSelector> selectors)\n+        final List<HierarchicalConfiguration<ImmutableNode>> configs =\n+        for (final NodeSelector selector : selectors)\n+            final String key)\n+        final List<ImmutableNode> targetNodes = fetchFilteredNodeResults(key);\n+        final int size = targetNodes.size();\n+        final BaseHierarchicalConfiguration sub =\n+            final ImmutableNode node)\n+        final BaseHierarchicalConfiguration sub =\n+    private List<ImmutableNode> fetchFilteredNodeResults(final String key)\n+        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();\n+            final String key, final boolean supportUpdates)\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key)\n+            final String key)\n+            final String key)\n+        final List<HierarchicalConfiguration<ImmutableNode>> results =\n+        for (final ImmutableNode node : nodes)\n+            final BaseHierarchicalConfiguration sub =\n+            final String key, final boolean supportUpdates)\n+        final Collection<NodeSelector> selectors =\n+            final String key)\n+            final String key)\n+        final ImmutableNode parent = nodes.get(0);\n+        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n+        for (final ImmutableNode node : parent.getChildren())\n+            final String key, final boolean supportUpdates)\n+        final InMemoryNodeModel parentModel = getSubConfigurationParentModel();\n+            final String key)\n+    protected void subnodeConfigurationChanged(final ConfigurationEvent event)\n+    private void initSubConfiguration(final BaseHierarchicalConfiguration sub)\n+            public void onEvent(final ConfigurationEvent event)\n+        final InterpolatedVisitor visitor = new InterpolatedVisitor();\n+        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();\n+        final BaseHierarchicalConfiguration c =\n+            final List<? extends HierarchicalConfiguration<?>> subs)\n+        final List<ImmutableHierarchicalConfiguration> res =\n+        for (final HierarchicalConfiguration<?> sub : subs)\n+            final HierarchicalConfiguration<ImmutableNode> c)\n+        final ImmutableNode root = (c != null) ? obtainRootNode(c) : null;\n+            final HierarchicalConfiguration<ImmutableNode> c)\n+        public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler)\n+            final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;\n+        private void updateNode(final ImmutableNode node,\n+                final ReferenceNodeHandler refHandler)\n+            final Object reference = refHandler.getReference(node);\n+        private void insertNewChildNodes(final ImmutableNode node,\n+                final ReferenceNodeHandler refHandler)\n+            final Collection<ImmutableNode> subNodes =\n+            final Iterator<ImmutableNode> children = subNodes.iterator();\n+                    final List<ImmutableNode> newNodes =\n+                    final ImmutableNode sibling2 =\n+                    for (final ImmutableNode insertNode : newNodes)\n+        public void visitBeforeChildren(final ImmutableNode node,\n+                final NodeHandler<ImmutableNode> handler)\n+                final ImmutableNode.Builder builder =\n+        public void visitAfterChildren(final ImmutableNode node,\n+                final NodeHandler<ImmutableNode> handler)\n+                final ImmutableNode newNode = pop().create();\n+        private void push(final ImmutableNode.Builder builder)\n+        private boolean isLeafNode(final ImmutableNode node,\n+                final NodeHandler<ImmutableNode> handler)\n+        private void handleLeafNode(final ImmutableNode node,\n+                final NodeHandler<ImmutableNode> handler)\n+            final Object value = interpolate(node.getValue());\n+            final Map<String, Object> interpolatedAttributes =\n+            final boolean attributeChanged =\n+            final ImmutableNode newNode =\n+        private void storeInterpolatedNode(final ImmutableNode node)\n+        private boolean interpolateAttributes(final ImmutableNode node,\n+                final NodeHandler<ImmutableNode> handler,\n+                final Map<String, Object> interpolatedAttributes)\n+            for (final String attr : handler.getAttributes(node))\n+                final Object attrValue =\n+        private Map<String, Object> interpolateAttributes(final ImmutableNode node,\n+                final NodeHandler<ImmutableNode> handler)\n+            final Map<String, Object> attributes = new HashMap<>();\n+        private boolean valueChanged(final Object interpolatedValue, final Object value)\n+    public CombinedConfiguration(final NodeCombiner comb)\n+    public void setNodeCombiner(final NodeCombiner nodeCombiner)\n+            final ExpressionEngine conversionExpressionEngine)\n+    public void addConfiguration(final Configuration config, final String name,\n+            final String at)\n+            final ConfigData cd = new ConfigData(config, name, at);\n+    public void addConfiguration(final Configuration config, final String name)\n+    public void addConfiguration(final Configuration config)\n+    public Configuration getConfiguration(final int index)\n+            final ConfigData cd = configurations.get(index);\n+    public Configuration getConfiguration(final String name)\n+            final List<Configuration> list =\n+            for (final ConfigData cd : configurations)\n+            final List<String> list = new ArrayList<>(getNumberOfConfigurationsInternal());\n+            for (final ConfigData cd : configurations)\n+    public boolean removeConfiguration(final Configuration config)\n+    public Configuration removeConfigurationAt(final int index)\n+        final ConfigData cd = configurations.remove(index);\n+    public Configuration removeConfiguration(final String name)\n+        final Configuration conf = getConfiguration(name);\n+    public void onEvent(final ConfigurationEvent event)\n+            final CombinedConfiguration copy = (CombinedConfiguration) super.clone();\n+            for (final ConfigData cd : configurations)\n+    public Configuration getSource(final String key)\n+        final Set<Configuration> sources = getSources(key);\n+        final Iterator<Configuration> iterator = sources.iterator();\n+        final Configuration source = iterator.next();\n+    public Set<Configuration> getSources(final String key)\n+            final List<QueryResult<ImmutableNode>> results = fetchNodeList(key);\n+            final Set<Configuration> sources = new HashSet<>();\n+            for (final QueryResult<ImmutableNode> result : results)\n+                final Set<Configuration> resultSources =\n+    protected void beginRead(final boolean optimize)\n+    protected void beginWrite(final boolean optimize)\n+        catch (final RuntimeException rex)\n+        final Iterator<ConfigData> it = configurations.iterator();\n+            final ByteArrayOutputStream os = new ByteArrayOutputStream();\n+            final PrintStream stream = new PrintStream(os);\n+    private Set<Configuration> findSourceConfigurations(final ImmutableNode node)\n+        final Set<Configuration> result = new HashSet<>();\n+        final FindNodeVisitor<ImmutableNode> visitor =\n+        for (final ConfigData cd : configurations)\n+    private void registerListenerAt(final Configuration configuration)\n+    private void unregisterListenerAt(final Configuration configuration)\n+            for (final ConfigData child : configurations)\n+        public ConfigData(final Configuration config, final String n, final String at)\n+            final ImmutableNode configRoot = getRootNodeOfConfiguration();\n+        private ImmutableNode prependAtPath(final ImmutableNode node)\n+            final ImmutableNode.Builder pathBuilder = new ImmutableNode.Builder();\n+            final Iterator<String> pathIterator = atPath.iterator();\n+        private void prependAtPathComponent(final ImmutableNode.Builder builder,\n+                final String currentComponent, final Iterator<String> components,\n+                final ImmutableNode orgRoot)\n+                final ImmutableNode.Builder childBuilder =\n+                final ImmutableNode root =\n+        private Collection<String> parseAt(final String at)\n+            final Collection<String> result = new ArrayList<>();\n+            final DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(\n+    public CompositeConfiguration(final Configuration inMemoryConfiguration)\n+    public CompositeConfiguration(final Collection<? extends Configuration> configurations)\n+    public CompositeConfiguration(final Configuration inMemoryConfiguration,\n+            final Collection<? extends Configuration> configurations)\n+            for (final Configuration c : configurations)\n+    public void addConfiguration(final Configuration config)\n+    public void addConfiguration(final Configuration config, final boolean asInMemory)\n+    public void addConfigurationFirst(final Configuration config)\n+    public void addConfigurationFirst(final Configuration config, final boolean asInMemory)\n+    public void removeConfiguration(final Configuration config)\n+    protected void addPropertyDirect(final String key, final Object token)\n+    protected Object getPropertyInternal(final String key)\n+        for (final Configuration config : configList)\n+        final Set<String> keys = new LinkedHashSet<>();\n+        for (final Configuration config : configList)\n+            for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n+    protected Iterator<String> getKeysInternal(final String key)\n+        final Set<String> keys = new LinkedHashSet<>();\n+        for (final Configuration config : configList)\n+            for (final Iterator<String> it = config.getKeys(key); it.hasNext();)\n+        for (final Configuration config : configList)\n+    protected void clearPropertyDirect(final String key)\n+        for (final Configuration config : configList)\n+    protected boolean containsKeyInternal(final String key)\n+        for (final Configuration config : configList)\n+    public List<Object> getList(final String key, final List<?> defaultValue)\n+        final List<Object> list = new ArrayList<>();\n+        final Iterator<Configuration> it = configList.iterator();\n+            final Configuration config = it.next();\n+            final\n+        final ListIterator<Object> lit = list.listIterator();\n+    public String[] getStringArray(final String key)\n+        final List<Object> list = getList(key);\n+        final String[] tokens = new String[list.size()];\n+    public Configuration getConfiguration(final int index)\n+            final CompositeConfiguration copy = (CompositeConfiguration) super\n+            for (final Configuration config : configList)\n+        catch (final CloneNotSupportedException cnex)\n+            final ListDelimiterHandler listDelimiterHandler)\n+    public Configuration getSource(final String key)\n+        for (final Configuration conf : configList)\n+    private void replaceInMemoryConfiguration(final Configuration config)\n+    private  void appendListProperty(final List<Object> dest, final Configuration config,\n+            final String key)\n+        final Object value = interpolate(config.getProperty(key));\n+                final Collection<?> col = (Collection<?>) value;\n+    public static Configuration getConfiguration(final Properties props)\n+    public static Properties getProperties(final ImmutableConfiguration config)\n+        final Properties props = new Properties();\n+        for (final Iterator<String> keys = config.getKeys(); keys.hasNext();)\n+            final String key = keys.next();\n+            final List<Object> list = config.getList(key);\n+                catch (final Exception ex)\n+    public static Properties getProperties(final Configuration config)\n+    public static Map<Object, Object> getMap(final Configuration config)\n+    private static String listToString(final List<?> list)\n+    public ConfigurationLookup(final ImmutableConfiguration config)\n+    public Object lookup(final String variable)\n+    public ConfigurationMap(final Configuration configuration)\n+    public Object put(final Object key, final Object value)\n+        final String strKey = String.valueOf(key);\n+        final Object old = configuration.getProperty(strKey);\n+    public Object get(final Object key)\n+            private Entry(final Object key)\n+            public Object setValue(final Object value)\n+                final Object old = getValue();\n+        ConfigurationSet(final Configuration configuration)\n+            for (final Iterator<String> iterator = configuration.getKeys(); iterator.hasNext();)\n+        public <T extends Event> void addEventListener(final EventType<T> eventType,\n+                final EventListener<? super T> listener)\n+                final EventType<T> eventType, final EventListener<? super T> listener)\n+    public static void dump(final ImmutableConfiguration configuration, final PrintStream out)\n+    public static void dump(final Configuration configuration, final PrintStream out)\n+    public static void dump(final ImmutableConfiguration configuration, final PrintWriter out)\n+        for (final Iterator<String> keys = configuration.getKeys(); keys.hasNext();)\n+            final String key = keys.next();\n+            final Object value = configuration.getProperty(key);\n+    public static void dump(final Configuration configuration, final PrintWriter out)\n+    public static String toString(final ImmutableConfiguration configuration)\n+        final StringWriter writer = new StringWriter();\n+    public static String toString(final Configuration configuration)\n+    public static void copy(final ImmutableConfiguration source, final Configuration target)\n+        for (final Iterator<String> keys = source.getKeys(); keys.hasNext();)\n+            final String key = keys.next();\n+    public static void copy(final Configuration source, final Configuration target)\n+    public static void append(final ImmutableConfiguration source, final Configuration target)\n+        for (final Iterator<String> keys = source.getKeys(); keys.hasNext();)\n+            final String key = keys.next();\n+    public static void append(final Configuration source, final Configuration target)\n+            final Configuration conf)\n+            final Configuration conf, final ExpressionEngine engine)\n+            final HierarchicalConfiguration<?> hc = (HierarchicalConfiguration<?>) conf;\n+        final BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();\n+    public static Configuration cloneConfiguration(final Configuration config)\n+        catch (final CloneNotSupportedException cnex)\n+    public static Object cloneIfPossible(final Object obj)\n+        catch (final Exception ex)\n+    static Object clone(final Object obj) throws CloneNotSupportedException\n+                final Method m = obj.getClass().getMethod(METHOD_CLONE);\n+            catch (final NoSuchMethodException nmex)\n+            catch (final IllegalAccessException iaex)\n+            catch (final InvocationTargetException itex)\n+    public static Synchronizer cloneSynchronizer(final Synchronizer sync)\n+        catch (final Exception ex)\n+        catch (final CloneNotSupportedException cnex)\n+    public static void enableRuntimeExceptions(final Configuration src)\n+                    public void onEvent(final ConfigurationErrorEvent event)\n+    public static Class<?> loadClass(final String clsName)\n+        final ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+        catch (final ClassNotFoundException cnfex)\n+    public static Class<?> loadClassNoEx(final String clsName)\n+        catch (final ClassNotFoundException cnfex)\n+            final Configuration c)\n+            final HierarchicalConfiguration<?> c)\n+            final Class<?>[] ifcs, final Configuration c)\n+    public static EventSource asEventSource(final Object obj,\n+            final boolean mockIfUnsupported)\n+    public void parse(final String systemId) throws IOException, SAXException\n+    public void parse(final InputSource input) throws IOException, SAXException\n+    public boolean getFeature(final String name)\n+    public void setFeature(final String name, final boolean value)\n+    public void setContentHandler(final ContentHandler handler)\n+    public void setDTDHandler(final DTDHandler handler)\n+    public void setEntityResolver(final EntityResolver resolver)\n+    public void setErrorHandler(final ErrorHandler handler)\n+    public Object getProperty(final String name)\n+    public void setProperty(final String name, final Object value)\n+    public void setRootName(final String string)\n+    protected void fireElementStart(final String name, final Attributes attribs)\n+                final Attributes at = (attribs == null) ? EMPTY_ATTRS : attribs;\n+            catch (final SAXException ex)\n+    protected void fireElementEnd(final String name)\n+            catch (final SAXException ex)\n+    protected void fireCharacters(final String text)\n+                final char[] ch = text.toCharArray();\n+            catch (final SAXException ex)\n+    public DataConfiguration(final Configuration configuration)\n+    protected Object getPropertyInternal(final String key)\n+    protected void addPropertyInternal(final String key, final Object obj)\n+    protected void addPropertyDirect(final String key, final Object value)\n+    protected boolean containsKeyInternal(final String key)\n+    protected void clearPropertyDirect(final String key)\n+    protected void setPropertyInternal(final String key, final Object value)\n+    public List<Boolean> getBooleanList(final String key)\n+    public List<Boolean> getBooleanList(final String key, final List<Boolean> defaultValue)\n+    public boolean[] getBooleanArray(final String key)\n+    public boolean[] getBooleanArray(final String key, final boolean[] defaultValue)\n+    public List<Byte> getByteList(final String key)\n+    public List<Byte> getByteList(final String key, final List<Byte> defaultValue)\n+    public byte[] getByteArray(final String key)\n+    public byte[] getByteArray(final String key, final byte[] defaultValue)\n+    public List<Short> getShortList(final String key)\n+    public List<Short> getShortList(final String key, final List<Short> defaultValue)\n+    public short[] getShortArray(final String key)\n+    public short[] getShortArray(final String key, final short[] defaultValue)\n+    public List<Integer> getIntegerList(final String key)\n+    public List<Integer> getIntegerList(final String key, final List<Integer> defaultValue)\n+    public int[] getIntArray(final String key)\n+    public int[] getIntArray(final String key, final int[] defaultValue)\n+    public List<Long> getLongList(final String key)\n+    public List<Long> getLongList(final String key, final List<Long> defaultValue)\n+    public long[] getLongArray(final String key)\n+    public long[] getLongArray(final String key, final long[] defaultValue)\n+    public List<Float> getFloatList(final String key)\n+    public List<Float> getFloatList(final String key, final List<Float> defaultValue)\n+    public float[] getFloatArray(final String key)\n+    public float[] getFloatArray(final String key, final float[] defaultValue)\n+    public List<Double> getDoubleList(final String key)\n+    public List<Double> getDoubleList(final String key, final List<Double> defaultValue)\n+    public double[] getDoubleArray(final String key)\n+    public double[] getDoubleArray(final String key, final double[] defaultValue)\n+    public List<BigInteger> getBigIntegerList(final String key)\n+    public List<BigInteger> getBigIntegerList(final String key, final List<BigInteger> defaultValue)\n+    public BigInteger[] getBigIntegerArray(final String key)\n+    public BigInteger[] getBigIntegerArray(final String key, final BigInteger[] defaultValue)\n+    public List<BigDecimal> getBigDecimalList(final String key)\n+    public List<BigDecimal> getBigDecimalList(final String key, final List<BigDecimal> defaultValue)\n+    public BigDecimal[] getBigDecimalArray(final String key)\n+    public BigDecimal[] getBigDecimalArray(final String key, final BigDecimal[] defaultValue)\n+    public URI getURI(final String key)\n+    public URI getURI(final String key, final URI defaultValue)\n+    public URI[] getURIArray(final String key)\n+    public URI[] getURIArray(final String key, final URI[] defaultValue)\n+    public List<URI> getURIList(final String key)\n+    public List<URI> getURIList(final String key, final List<URI> defaultValue)\n+    public URL getURL(final String key)\n+    public URL getURL(final String key, final URL defaultValue)\n+    public List<URL> getURLList(final String key)\n+    public List<URL> getURLList(final String key, final List<URL> defaultValue)\n+    public URL[] getURLArray(final String key)\n+    public URL[] getURLArray(final String key, final URL[] defaultValue)\n+    public Date getDate(final String key)\n+    public Date getDate(final String key, final String format)\n+        final Date value = getDate(key, null, format);\n+    public Date getDate(final String key, final Date defaultValue)\n+    public Date getDate(final String key, final Date defaultValue, final String format)\n+    public List<Date> getDateList(final String key)\n+    public List<Date> getDateList(final String key, final String format)\n+    public List<Date> getDateList(final String key, final List<Date> defaultValue)\n+    public List<Date> getDateList(final String key, final List<Date> defaultValue, final String format)\n+    public Date[] getDateArray(final String key)\n+    public Date[] getDateArray(final String key, final String format)\n+    public Date[] getDateArray(final String key, final Date[] defaultValue)\n+    public Date[] getDateArray(final String key, final Date[] defaultValue, final String format)\n+    public Calendar getCalendar(final String key)\n+    public Calendar getCalendar(final String key, final String format)\n+        final Calendar value = getCalendar(key, null, format);\n+    public Calendar getCalendar(final String key, final Calendar defaultValue)\n+    public Calendar getCalendar(final String key, final Calendar defaultValue, final String format)\n+    public List<Calendar> getCalendarList(final String key)\n+    public List<Calendar> getCalendarList(final String key, final String format)\n+    public List<Calendar> getCalendarList(final String key, final List<Calendar> defaultValue)\n+    public List<Calendar> getCalendarList(final String key, final List<Calendar> defaultValue, final String format)\n+    public Calendar[] getCalendarArray(final String key)\n+    public Calendar[] getCalendarArray(final String key, final String format)\n+    public Calendar[] getCalendarArray(final String key, final Calendar[] defaultValue)\n+    public Calendar[] getCalendarArray(final String key, final Calendar[] defaultValue, final String format)\n+    public Locale getLocale(final String key)\n+    public Locale getLocale(final String key, final Locale defaultValue)\n+    public List<Locale> getLocaleList(final String key)\n+    public List<Locale> getLocaleList(final String key, final List<Locale> defaultValue)\n+    public Locale[] getLocaleArray(final String key)\n+    public Locale[] getLocaleArray(final String key, final Locale[] defaultValue)\n+    public Color getColor(final String key)\n+    public Color getColor(final String key, final Color defaultValue)\n+    public List<Color> getColorList(final String key)\n+    public List<Color> getColorList(final String key, final List<Color> defaultValue)\n+    public Color[] getColorArray(final String key)\n+    public Color[] getColorArray(final String key, final Color[] defaultValue)\n+        final ConversionHandler handler = super.getConversionHandler();\n+            final DefaultConversionHandler orgHandler =\n+    public void setDataSource(final DataSource dataSource)\n+    public void setTable(final String table)\n+    public void setConfigurationNameColumn(final String configurationNameColumn)\n+    public void setKeyColumn(final String keyColumn)\n+    public void setValueColumn(final String valueColumn)\n+    public void setConfigurationName(final String configurationName)\n+    public void setAutoCommit(final boolean autoCommit)\n+        final JdbcOperation<Object> op =\n+                final ResultSet rs =\n+                final List<Object> results = new ArrayList<>();\n+                    final Object value = extractPropertyValue(rs);\n+                    for (final Object o : getListDelimiterHandler().parse(value))\n+                final StringBuilder query = new StringBuilder(\"INSERT INTO \");\n+                final PreparedStatement pstmt = initStatement(query.toString(),\n+    protected void addPropertyInternal(final String key, final Object value)\n+        final ListDelimiterHandler oldHandler = getListDelimiterHandler();\n+        final JdbcOperation<Integer> op =\n+                final ResultSet rs = openResultSet(String.format(\n+        final Integer count = op.execute();\n+        final JdbcOperation<Boolean> op =\n+                final ResultSet rs = openResultSet(\n+        final Boolean result = op.execute();\n+                final PreparedStatement ps = initStatement(String.format(\n+                final ResultSet rs = openResultSet(String.format(\n+    protected void close(final Connection conn, final Statement stmt, final ResultSet rs)\n+        catch (final SQLException e)\n+        catch (final SQLException e)\n+        catch (final SQLException e)\n+    protected Object extractPropertyValue(final ResultSet rs) throws SQLException\n+    private static Object convertClob(final Clob clob) throws SQLException\n+        final int len = (int) clob.length();\n+                final EventType<? extends ConfigurationErrorEvent> errEvType,\n+                final EventType<?> opType, final String errPropName, final Object errPropVal)\n+            catch (final SQLException e)\n+        protected PreparedStatement createStatement(final String sql, final boolean nameCol)\n+                final StringBuilder buf = new StringBuilder(sql);\n+        protected PreparedStatement initStatement(final String sql, final boolean nameCol,\n+                final Object... params) throws SQLException\n+            final PreparedStatement ps = createStatement(sql, nameCol);\n+            for (final Object param : params)\n+        protected ResultSet openResultSet(final String sql, final boolean nameCol,\n+                final Object... params) throws SQLException\n+    public DynamicCombinedConfiguration(final NodeCombiner comb)\n+    public void setKeyPattern(final String pattern)\n+    public void setLoggerName(final String name)\n+    public void setNodeCombiner(final NodeCombiner nodeCombiner)\n+    public void addConfiguration(final Configuration config, final String name,\n+            final String at)\n+            final ConfigData cd = new ConfigData(config, name, at);\n+    public Configuration getConfiguration(final int index)\n+            final ConfigData cd = configurations.get(index);\n+    public Configuration getConfiguration(final String name)\n+    public Configuration removeConfiguration(final String name)\n+        final Configuration conf = getConfiguration(name);\n+    public boolean removeConfiguration(final Configuration config)\n+    public Configuration removeConfigurationAt(final int index)\n+            final ConfigData cd = configurations.remove(index);\n+    protected void addPropertyInternal(final String key, final Object value)\n+    protected void clearPropertyDirect(final String key)\n+    protected boolean containsKeyInternal(final String key)\n+    public BigDecimal getBigDecimal(final String key, final BigDecimal defaultValue)\n+    public BigDecimal getBigDecimal(final String key)\n+    public BigInteger getBigInteger(final String key, final BigInteger defaultValue)\n+    public BigInteger getBigInteger(final String key)\n+    public boolean getBoolean(final String key, final boolean defaultValue)\n+    public Boolean getBoolean(final String key, final Boolean defaultValue)\n+    public boolean getBoolean(final String key)\n+    public byte getByte(final String key, final byte defaultValue)\n+    public Byte getByte(final String key, final Byte defaultValue)\n+    public byte getByte(final String key)\n+    public double getDouble(final String key, final double defaultValue)\n+    public Double getDouble(final String key, final Double defaultValue)\n+    public double getDouble(final String key)\n+    public float getFloat(final String key, final float defaultValue)\n+    public Float getFloat(final String key, final Float defaultValue)\n+    public float getFloat(final String key)\n+    public int getInt(final String key, final int defaultValue)\n+    public int getInt(final String key)\n+    public Integer getInteger(final String key, final Integer defaultValue)\n+    protected Iterator<String> getKeysInternal(final String prefix)\n+    public List<Object> getList(final String key, final List<?> defaultValue)\n+    public List<Object> getList(final String key)\n+    public long getLong(final String key, final long defaultValue)\n+    public Long getLong(final String key, final Long defaultValue)\n+    public long getLong(final String key)\n+    public Properties getProperties(final String key)\n+    protected Object getPropertyInternal(final String key)\n+    public short getShort(final String key, final short defaultValue)\n+    public Short getShort(final String key, final Short defaultValue)\n+    public short getShort(final String key)\n+    public String getString(final String key, final String defaultValue)\n+    public String getString(final String key)\n+    public String[] getStringArray(final String key)\n+    protected void setPropertyInternal(final String key, final Object value)\n+    public Configuration subset(final String prefix)\n+    public void setExpressionEngine(final ExpressionEngine expressionEngine)\n+    protected void addNodesInternal(final String key, final Collection<? extends ImmutableNode> nodes)\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates)\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key)\n+    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key)\n+    protected Object clearTreeInternal(final String key)\n+    protected int getMaxIndexInternal(final String key)\n+    public Configuration getSource(final String key)\n+        for (final CombinedConfiguration cc : configs.values())\n+    public <T extends Event> void addEventListener(final EventType<T> eventType,\n+            final EventListener<? super T> listener)\n+        for (final CombinedConfiguration cc : configs.values())\n+            final EventType<T> eventType, final EventListener<? super T> listener)\n+        for (final CombinedConfiguration cc : configs.values())\n+        for (final CombinedConfiguration cc : configs.values())\n+        for (final CombinedConfiguration cc : configs.values())\n+    protected void beginRead(final boolean optimize)\n+        final CurrentConfigHolder cch = ensureCurrentConfiguration();\n+    protected void beginWrite(final boolean optimize)\n+        final CurrentConfigHolder cch = ensureCurrentConfiguration();\n+        final CurrentConfigHolder cch = CURRENT_CONFIG.get();\n+    private void initChildConfiguration(final CombinedConfiguration config)\n+        for (final ConfigData data : configurations)\n+            protected Lookup fetchLookupForPrefix(final String prefix)\n+            final String key = String.valueOf(localSubst.interpolate(keyPattern));\n+        public ConfigData(final Configuration config, final String n, final String at)\n+        public CurrentConfigHolder(final String curKey)\n+                final CombinedConfiguration currentConfiguration)\n+    protected void addPropertyDirect(final String key, final Object value)\n+    protected void clearPropertyDirect(final String key)\n+    public FindNodeVisitor(final T node)\n+    public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n+    public void process(final Configuration config)\n+            final DefaultExpressionEngine exprEngine = DefaultExpressionEngine.INSTANCE;\n+            final DefaultConfigurationKey keyEmpty =\n+            final Set<String> keySet = new HashSet<>();\n+            for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n+                final String key = it.next();\n+                final DefaultConfigurationKey keyAct =\n+                final String elem = openElements(keyLast, keyAct, config, keySet);\n+    protected void closeElements(final DefaultConfigurationKey keyLast, final DefaultConfigurationKey keyAct)\n+        final DefaultConfigurationKey keyDiff = keyAct.differenceKey(keyLast);\n+        final Iterator<String> it = reverseIterator(keyDiff);\n+    protected Iterator<String> reverseIterator(final DefaultConfigurationKey key)\n+        final List<String> list = new ArrayList<>();\n+        for (final DefaultConfigurationKey.KeyIterator it = key.iterator(); it.hasNext();)\n+    protected String openElements(final DefaultConfigurationKey keyLast, final DefaultConfigurationKey keyAct,\n+            final Configuration config, final Set<String> keySet)\n+        final DefaultConfigurationKey.KeyIterator it = keyLast.differenceKey(keyAct).iterator();\n+        final DefaultConfigurationKey k = keyLast.commonKey(keyAct);\n+    protected void fireValue(final String name, final Object value)\n+            final Collection<?> valueCol = (Collection<?>) value;\n+            for (final Object v : valueCol)\n+            final HierarchicalConfiguration<T> config)\n+    public void setConfiguration(final HierarchicalConfiguration<T> config)\n+        final NodeHandler<T> nodeHandler =\n+        public void visitAfterChildren(final T node, final NodeHandler<T> handler)\n+        public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n+            final Object value = handler.getValue(node);\n+        protected Attributes fetchAttributes(final T node, final NodeHandler<T> handler)\n+            final AttributesImpl attrs = new AttributesImpl();\n+            for (final String attr : handler.getAttributes(node))\n+                final Object value = handler.getAttributeValue(node, attr);\n+        private String nodeName(final T node, final NodeHandler<T> handler)\n+            final String nodeName = handler.nodeName(node);\n+    public INIConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n+    public void setSeparatorUsedInOutput(final String separator)\n+    public void write(final Writer writer) throws ConfigurationException, IOException\n+        final PrintWriter out = new PrintWriter(writer);\n+            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode()\n+                    for (final ImmutableNode child : node.getChildren())\n+    public void read(final Reader in) throws ConfigurationException, IOException\n+        final BufferedReader bufferedReader = new BufferedReader(in);\n+        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();\n+        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n+        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);\n+            final ImmutableNode.Builder rootBuilder,\n+            final Map<String, ImmutableNode.Builder> sectionBuilders)\n+        for (final Map.Entry<String, ImmutableNode.Builder> e : sectionBuilders\n+    private void createNodeBuilders(final BufferedReader in,\n+            final ImmutableNode.Builder rootBuilder,\n+            final Map<String, ImmutableNode.Builder> sectionBuilders)\n+                    final String section = line.substring(1, line.length() - 1);\n+                    final int index = findSeparator(line);\n+    private void createValueNodes(final ImmutableNode.Builder sectionBuilder,\n+            final String key, final String value)\n+        final Collection<String> values =\n+        for (final String v : values)\n+    private void writeProperty(final PrintWriter out, final String key, final Object value, final String separator)\n+    private static String parseValue(final String val, final BufferedReader reader) throws IOException\n+        final StringBuilder propertyValue = new StringBuilder();\n+            final boolean quoted = value.startsWith(\"\\\"\") || value.startsWith(\"'\");\n+            final char quote = quoted ? value.charAt(0) : 0;\n+            final StringBuilder result = new StringBuilder();\n+                final char c = value.charAt(i);\n+    private static boolean lineContinues(final String line)\n+        final String s = line.trim();\n+    private static boolean lineContinues(final String line, final int pos)\n+    private static boolean isCommentChar(final char c)\n+    private static int findSeparator(final String line)\n+    private static int findFirstOccurrence(final String line, final String separators)\n+            final char sep = separators.charAt(i);\n+            final int pos = line.indexOf(sep);\n+    private static int findSeparatorBeforeQuote(final String line, final int quoteIndex)\n+    private String escapeValue(final String value)\n+    private static String escapeComments(final String value)\n+            final char c = COMMENT_CHARS.charAt(i);\n+    protected boolean isCommentLine(final String line)\n+    protected boolean isSectionLine(final String line)\n+        final Set<String> sections = new LinkedHashSet<>();\n+            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode()\n+    public SubnodeConfiguration getSection(final String name)\n+        catch (final ConfigurationRuntimeException iex)\n+            final InMemoryNodeModel parentModel = getSubConfigurationParentModel();\n+            final NodeSelector selector = parentModel.trackChildNodeWithCreation(null, name, this);\n+        final InMemoryNodeModel parentModel = getSubConfigurationParentModel();\n+        final NodeSelector selector = new NodeSelector(null); // selects parent\n+        final GlobalSectionNodeModel model =\n+        final SubnodeConfiguration sub = new SubnodeConfiguration(this, model);\n+    private static boolean isSectionNode(final ImmutableNode node)\n+        public GlobalSectionNodeModel(final InMemoryNodeModelSupport modelSupport,\n+                final NodeSelector selector)\n+                public List<ImmutableNode> getChildren(final ImmutableNode node)\n+                    final List<ImmutableNode> children = super.getChildren(node);\n+                public List<ImmutableNode> getChildren(final ImmutableNode node,\n+                        final String name)\n+                    final List<ImmutableNode> children =\n+                public int getChildrenCount(final ImmutableNode node, final String name)\n+                    final List<ImmutableNode> children =\n+                public ImmutableNode getChild(final ImmutableNode node, final int index)\n+                    final List<ImmutableNode> children = super.getChildren(node);\n+                public int indexOfChild(final ImmutableNode parent,\n+                        final ImmutableNode child)\n+                    final List<ImmutableNode> children = super.getChildren(parent);\n+                        final ImmutableNode node, final List<ImmutableNode> children)\n+                        for (final ImmutableNode child : children)\n+    public ImmutableConfigurationInvocationHandler(final Configuration conf)\n+    public Object invoke(final Object proxy, final Method method, final Object[] args)\n+        catch (final InvocationTargetException e)\n+    private static Object handleResult(final Object result)\n+        public ImmutableIterator(final Iterator<?> it)\n+    public JNDIConfiguration(final String prefix) throws NamingException\n+    public JNDIConfiguration(final Context context)\n+    public JNDIConfiguration(final Context context, final String prefix)\n+    private void recursiveGetKeys(final Set<String> keys, final Context context, final String prefix,\n+            final Set<Context> processedCtx) throws NamingException\n+                final NameClassPair nameClassPair = elements.next();\n+                final String name = nameClassPair.getName();\n+                final Object object = context.lookup(name);\n+                final StringBuilder key = new StringBuilder();\n+                    final Context subcontext = (Context) object;\n+    protected Iterator<String> getKeysInternal(final String prefix)\n+        final String[] splitPath = StringUtils.split(prefix, \".\");\n+        final List<String> path = Arrays.asList(splitPath);\n+            final Context context = getContext(path, getBaseContext());\n+            final Set<String> keys = new HashSet<>();\n+        catch (final NameNotFoundException e)\n+        catch (final NamingException e)\n+    private Context getContext(final List<String> path, final Context context) throws NamingException\n+        final String key = path.get(0);\n+                final NameClassPair nameClassPair = elements.next();\n+                final String name = nameClassPair.getName();\n+                final Object object = context.lookup(name);\n+                    final Context subcontext = (Context) object;\n+        catch (final NamingException e)\n+    protected void setPropertyInternal(final String key, final Object value)\n+    protected void clearPropertyDirect(final String key)\n+        catch (final NameNotFoundException e)\n+        catch (final NamingException e)\n+    public void setPrefix(final String prefix)\n+        catch (final NameNotFoundException e)\n+        catch (final NotContextException nctxex)\n+        catch (final NamingException e)\n+    protected void addPropertyDirect(final String key, final Object obj)\n+    public void setContext(final Context context)\n+    public JSONConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n+    public void read(final Reader in) throws ConfigurationException\n+            final Map<String, Object> map = mapper.readValue(in, this.type);\n+        catch (final Exception e)\n+    public void write(final Writer out) throws ConfigurationException, IOException\n+    public void read(final InputStream in) throws ConfigurationException\n+            final Map<String, Object> map = mapper.readValue(in, this.type);\n+        catch (final Exception e)\n+    public MapConfiguration(final Map<String, ?> map)\n+    public MapConfiguration(final Properties props)\n+    public void setTrimmingDisabled(final boolean trimmingDisabled)\n+    protected Object getPropertyInternal(final String key)\n+        final Object value = map.get(key);\n+            final Collection<String> list = getListDelimiterHandler().split((String) value, !isTrimmingDisabled());\n+    protected void addPropertyDirect(final String key, final Object value)\n+        final Object previousValue = getProperty(key);\n+            final List<Object> list = new ArrayList<>();\n+    protected boolean containsKeyInternal(final String key)\n+    protected void clearPropertyDirect(final String key)\n+            final MapConfiguration copy = (MapConfiguration) super.clone();\n+            final\n+        catch (final CloneNotSupportedException cex)\n+    private static Map<String, Object> convertPropertiesToMap(final Properties props)\n+        final\n+            final HierarchicalConfiguration<ImmutableNode> config, final String path)\n+    protected void addPropertyInternal(final String key, final Object value)\n+    protected void clearPropertyDirect(final String key)\n+    protected boolean containsKeyInternal(final String key)\n+    public BigDecimal getBigDecimal(final String key, final BigDecimal defaultValue)\n+    public BigDecimal getBigDecimal(final String key)\n+    public BigInteger getBigInteger(final String key, final BigInteger defaultValue)\n+    public BigInteger getBigInteger(final String key)\n+    public boolean getBoolean(final String key, final boolean defaultValue)\n+    public Boolean getBoolean(final String key, final Boolean defaultValue)\n+    public boolean getBoolean(final String key)\n+    public byte getByte(final String key, final byte defaultValue)\n+    public Byte getByte(final String key, final Byte defaultValue)\n+    public byte getByte(final String key)\n+    public double getDouble(final String key, final double defaultValue)\n+    public Double getDouble(final String key, final Double defaultValue)\n+    public double getDouble(final String key)\n+    public float getFloat(final String key, final float defaultValue)\n+    public Float getFloat(final String key, final Float defaultValue)\n+    public float getFloat(final String key)\n+    public int getInt(final String key, final int defaultValue)\n+    public int getInt(final String key)\n+    public Integer getInteger(final String key, final Integer defaultValue)\n+    protected Iterator<String> getKeysInternal(final String prefix)\n+    public List<Object> getList(final String key, final List<?> defaultValue)\n+    public List<Object> getList(final String key)\n+    public long getLong(final String key, final long defaultValue)\n+    public Long getLong(final String key, final Long defaultValue)\n+    public long getLong(final String key)\n+    public Properties getProperties(final String key)\n+    protected Object getPropertyInternal(final String key)\n+    public short getShort(final String key, final short defaultValue)\n+    public Short getShort(final String key, final Short defaultValue)\n+    public short getShort(final String key)\n+    public String getString(final String key, final String defaultValue)\n+    public String getString(final String key)\n+    public String[] getStringArray(final String key)\n+    protected void setPropertyInternal(final String key, final Object value)\n+    public Configuration subset(final String prefix)\n+    public void setExpressionEngine(final ExpressionEngine expressionEngine)\n+    protected void addNodesInternal(final String key, final Collection<? extends ImmutableNode> nodes)\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates)\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key)\n+    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key)\n+    protected Object clearTreeInternal(final String key)\n+    protected int getMaxIndexInternal(final String key)\n+    public <T extends Event> void addEventListener(final EventType<T> eventType,\n+            final EventListener<? super T> listener)\n+            final EventType<T> eventType, final EventListener<? super T> listener)\n+            final EventType<T> eventType)\n+    public void write(final Writer writer) throws ConfigurationException, IOException\n+    public void read(final Reader reader) throws ConfigurationException, IOException\n+        final String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;\n+    private String makePath(final String item)\n+    private String substitute(final String pattern)\n+    public PrefixedKeysIterator(final Iterator<String> wrappedIterator, final String keyPrefix)\n+            final String key = iterator.next();\n+    public static void setInclude(final String inc)\n+    public void setIncludesAllowed(final boolean includesAllowed)\n+    public void setHeader(final String header)\n+    public void setFooter(final String footer)\n+    public void setLayout(final PropertiesConfigurationLayout layout)\n+    private void installLayout(final PropertiesConfigurationLayout layout)\n+    public void setIOFactory(final IOFactory ioFactory)\n+    public void initFileLocator(final FileLocator locator)\n+    public void read(final Reader in) throws ConfigurationException, IOException\n+    public void write(final Writer out) throws ConfigurationException, IOException\n+        final PropertiesConfiguration copy = (PropertiesConfiguration) super.clone();\n+    boolean propertyLoaded(final String key, final String value)\n+                final Collection<String> files =\n+                for (final String f : files)\n+    static boolean isCommentLine(final String line)\n+        final String s = line.trim();\n+    private static int countTrailingBS(final String line)\n+        public PropertiesReader(final Reader reader)\n+            final StringBuilder buffer = new StringBuilder();\n+            final String line = readProperty();\n+        protected void parseProperty(final String line)\n+            final String[] property = doParseProperty(line);\n+        protected void initPropertyName(final String name)\n+        protected void initPropertyValue(final String value)\n+        protected void initPropertySeparator(final String value)\n+        private static boolean checkCombineLines(final String line)\n+        private static String[] doParseProperty(final String line)\n+            final Matcher matcher = PROPERTY_PATTERN.matcher(line);\n+            final String[] result = {\"\", \"\", \"\"};\n+                    public Object transformValue(final Object value)\n+                        final String strVal = String.valueOf(value);\n+        public PropertiesWriter(final Writer writer, final ListDelimiterHandler delHandler)\n+        public void setCurrentSeparator(final String currentSeparator)\n+        public void setGlobalSeparator(final String globalSeparator)\n+        public void setLineSeparator(final String lineSeparator)\n+        public void writeProperty(final String key, final Object value) throws IOException\n+        public void writeProperty(final String key, final List<?> values) throws IOException\n+        public void writeProperty(final String key, final Object value,\n+                final boolean forceSingleLine) throws IOException\n+                final List<?> values = (List<?>) value;\n+                    catch (final UnsupportedOperationException uoex)\n+        public void writeComment(final String comment) throws IOException\n+        protected String escapeKey(final String key)\n+            final StringBuilder newkey = new StringBuilder();\n+                final char c = key.charAt(i);\n+        public void writeln(final String s) throws IOException\n+        protected String fetchSeparator(final String key, final Object value)\n+        public PropertiesReader createPropertiesReader(final Reader in)\n+        public PropertiesWriter createPropertiesWriter(final Writer out,\n+                final ListDelimiterHandler handler)\n+    protected static String unescapeJava(final String str)\n+        final int sz = str.length();\n+        final StringBuilder out = new StringBuilder(sz);\n+        final StringBuilder unicode = new StringBuilder(UNICODE_LEN);\n+            final char ch = str.charAt(i);\n+                        final int value = Integer.parseInt(unicode.toString(), HEX_RADIX);\n+                    catch (final NumberFormatException nfe)\n+    private static boolean needsUnescape(final char ch)\n+    private void loadIncludeFile(final String fileName) throws ConfigurationException\n+            final URL baseURL = locator.getSourceURL();\n+        final FileHandler fh = new FileHandler(this);\n+        final FileLocator orgLocator = locator;\n+    private URL locateIncludeFile(final String basePath, final String fileName)\n+        final FileLocator includeLocator =\n+    public PropertiesConfigurationLayout(final PropertiesConfigurationLayout c)\n+    public String getCanonicalComment(final String key, final boolean commentChar)\n+    public String getComment(final String key)\n+    public void setComment(final String key, final String comment)\n+    public int getBlancLinesBefore(final String key)\n+    public void setBlancLinesBefore(final String key, final int number)\n+    public String getCanonicalHeaderComment(final boolean commentChar)\n+    public void setHeaderComment(final String comment)\n+    public String getCanonicalFooterCooment(final boolean commentChar)\n+    public void setFooterComment(final String footerComment)\n+    public boolean isSingleLine(final String key)\n+    public void setSingleLine(final String key, final boolean f)\n+    public void setForceSingleLine(final boolean f)\n+    public String getSeparator(final String key)\n+    public void setSeparator(final String key, final String sep)\n+    public void setGlobalSeparator(final String globalSeparator)\n+    public void setLineSeparator(final String lineSeparator)\n+    public void load(final PropertiesConfiguration config, final Reader in)\n+        final PropertiesConfiguration.PropertiesReader reader =\n+                    final boolean contained = layoutData.containsKey(reader\n+                    final String comment = extractComment(reader.getCommentLines(),\n+                    final PropertyLayoutData data = fetchLayoutData(reader\n+        catch (final IOException ioex)\n+    public void save(final PropertiesConfiguration config, final Writer out) throws ConfigurationException\n+            final PropertiesConfiguration.PropertiesWriter writer =\n+            for (final String key : getKeys())\n+                    final boolean singleLine = isForceSingleLine() || isSingleLine(key);\n+        catch (final IOException ioex)\n+    public void onEvent(final ConfigurationEvent event)\n+                final boolean contained =\n+                final PropertyLayoutData data =\n+    private PropertyLayoutData fetchLayoutData(final String key)\n+    static boolean isCommentLine(final String line)\n+    static String trimComment(final String s, final boolean comment)\n+        final StringBuilder buf = new StringBuilder(s.length());\n+                final String line = s.substring(lastPos, pos);\n+    static String stripCommentChar(final String s, final boolean comment)\n+    private String extractComment(final List<String> commentLines, final int from, final int to)\n+        final StringBuilder buf = new StringBuilder(commentLines.get(from));\n+    private int checkHeaderComment(final List<String> commentLines)\n+    private void copyFrom(final PropertiesConfigurationLayout c)\n+        for (final String key : c.getKeys())\n+            final PropertyLayoutData data = c.layoutData.get(key);\n+            final PropertiesConfiguration.PropertiesWriter writer, final String comment)\n+    private static String constructCanonicalComment(final String comment,\n+            final boolean commentChar)\n+        public void setBlancLines(final int blancLines)\n+        public void setSingleLine(final boolean singleLine)\n+        public void addComment(final String s)\n+        public void setComment(final String s)\n+        public void setSeparator(final String separator)\n+                final PropertyLayoutData copy = (PropertyLayoutData) super.clone();\n+            catch (final CloneNotSupportedException cnex)\n+    public boolean compare(final Configuration a, final Configuration b)\n+        for (final Iterator<String> keys = a.getKeys(); keys.hasNext();)\n+            final String key = keys.next();\n+            final Object value = a.getProperty(key);\n+        for (final Iterator<String> keys = b.getKeys(); keys.hasNext();)\n+            final String key = keys.next();\n+            final Object value = b.getProperty(key);\n+    public SubnodeConfiguration(final BaseHierarchicalConfiguration parent,\n+                                final TrackedNodeModel model)\n+        final ImmutableNode root =\n+        final InMemoryNodeModel parentModel =\n+    protected NodeSelector getSubConfigurationNodeSelector(final String key)\n+            final NodeSelector selector, final InMemoryNodeModelSupport parentModelSupport)\n+    public SubsetConfiguration(final Configuration parent, final String prefix)\n+    public SubsetConfiguration(final Configuration parent, final String prefix, final String delimiter)\n+    protected String getParentKey(final String key)\n+    protected String getChildKey(final String key)\n+            final int i = prefix.length() + (delimiter != null ? delimiter.length() : 0);\n+    public void setPrefix(final String prefix)\n+    public Configuration subset(final String prefix)\n+    protected boolean containsKeyInternal(final String key)\n+    public void addPropertyDirect(final String key, final Object value)\n+    protected void clearPropertyDirect(final String key)\n+    protected Object getPropertyInternal(final String key)\n+    protected Iterator<String> getKeysInternal(final String prefix)\n+    public void setThrowExceptionOnMissing(final boolean throwExceptionOnMissing)\n+            final ListDelimiterHandler listDelimiterHandler)\n+        public SubsetIterator(final Iterator<String> it)\n+    public static void setSystemProperties(final String fileName)\n+    public static void setSystemProperties(final String basePath, final String fileName)\n+        final FileBasedConfiguration config =\n+        final FileHandler handler = new FileHandler(config);\n+    public static void setSystemProperties(final Configuration systemConfig)\n+        final Iterator<String> iter = systemConfig.getKeys();\n+            final String key = iter.next();\n+            final String value = (String) systemConfig.getProperty(key);\n+    public XMLConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n+        final Document doc = getDocument();\n+    public void setRootElementName(final String name)\n+    public void setDocumentBuilder(final DocumentBuilder documentBuilder)\n+    public void setPublicID(final String publicID)\n+    public void setSystemID(final String systemID)\n+    public void setValidating(final boolean validating)\n+    public void setSchemaValidation(final boolean schemaValidation)\n+    public void setEntityResolver(final EntityResolver resolver)\n+        final XMLDocumentHelper docHelper = getDocumentHelper();\n+        final ReferenceNodeHandler handler = getReferenceHandler();\n+    private void initProperties(final XMLDocumentHelper docHelper, final boolean elemRefs)\n+        final Document document = docHelper.getDocument();\n+        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n+        final MutableObject<String> rootValue = new MutableObject<>();\n+        final Map<ImmutableNode, Object> elemRefMap =\n+        final Map<String, String> attributes =\n+        final ImmutableNode top =\n+    private Map<String, String> constructHierarchy(final ImmutableNode.Builder node,\n+            final MutableObject<String> refValue, final Element element,\n+            final Map<ImmutableNode, Object> elemRefs, final boolean trim, final int level)\n+        final boolean trimFlag = shouldTrim(element, trim);\n+        final Map<String, String> attributes = processAttributes(element);\n+        final StringBuilder buffer = new StringBuilder();\n+        final NodeList list = element.getChildNodes();\n+            final org.w3c.dom.Node w3cNode = list.item(i);\n+                final Element child = (Element) w3cNode;\n+                final ImmutableNode.Builder childNode = new ImmutableNode.Builder();\n+                final MutableObject<String> refChildValue =\n+                final Map<String, String> attrmap =\n+                final Boolean childTrim = Boolean.valueOf(attrmap.remove(ATTR_SPACE_INTERNAL));\n+                final ImmutableNode newChild =\n+                final Text data = (Text) w3cNode;\n+        final String text = determineValue(buffer.toString(), childrenFlag, trimFlag);\n+    private static String determineValue(final String content, final boolean hasChildren,\n+            final boolean trimFlag)\n+        final boolean shouldTrim =\n+    private static Map<String, String> processAttributes(final Element element)\n+        final NamedNodeMap attributes = element.getAttributes();\n+        final Map<String, String> attrmap = new HashMap<>();\n+            final org.w3c.dom.Node w3cNode = attributes.item(i);\n+                final Attr attr = (Attr) w3cNode;\n+    private ImmutableNode createChildNodeWithValue(final ImmutableNode.Builder parent,\n+            final ImmutableNode.Builder child, final Element elem, final String value,\n+            final boolean trim, final Map<String, String> attrmap,\n+            final Map<ImmutableNode, Object> elemRefs)\n+            final Map<ImmutableNode, Object> refs = isSingleElementList(elem) ? elemRefs : null;\n+            final Iterator<String> it = values.iterator();\n+                final ImmutableNode.Builder c = new ImmutableNode.Builder();\n+                final ImmutableNode newChild = c.create();\n+    private static boolean isSingleElementList(final Element element)\n+        final Node parentNode = element.getParentNode();\n+    private static int countChildElements(final Node parent, final String name)\n+        final NodeList childNodes = parent.getChildNodes();\n+            final Node item = childNodes.item(i);\n+    private static boolean shouldTrim(final Element element, final boolean currentTrim)\n+        final Attr attr = element.getAttributeNode(ATTR_SPACE);\n+        final DocumentBuilderFactory factory = DocumentBuilderFactory\n+        final DocumentBuilder result = factory.newDocumentBuilder();\n+                public void error(final SAXParseException ex) throws SAXException\n+        final Transformer transformer = XMLDocumentHelper.createTransformer();\n+        final ReferenceNodeHandler handler = getReferenceHandler();\n+        final XMLDocumentHelper docHelper =\n+        final XMLDocumentHelper newHelper =\n+        final XMLBuilderVisitor builder =\n+    private void initRootElementText(final Document doc, final Object value)\n+        final Element elem = doc.getDocumentElement();\n+        final NodeList children = elem.getChildNodes();\n+            final org.w3c.dom.Node nd = children.item(i);\n+    public void initFileLocator(final FileLocator loc)\n+    public void read(final Reader in) throws ConfigurationException, IOException\n+    public void read(final InputStream in) throws ConfigurationException, IOException\n+    private void load(final InputSource source) throws ConfigurationException\n+            final URL sourceURL = locator.getSourceURL();\n+            final DocumentBuilder builder = createDocumentBuilder();\n+            final Document newDocument = builder.parse(source);\n+            final Document oldDocument = getDocument();\n+        catch (final SAXParseException spe)\n+        catch (final Exception e)\n+    public void write(final Writer writer) throws ConfigurationException, IOException\n+        final Transformer transformer = createTransformer();\n+        final Source source = new DOMSource(createDocument());\n+        final Result result = new StreamResult(writer);\n+            final Transformer transformer = createTransformer();\n+            final Source source = new DOMSource(createDocument());\n+            final StringWriter writer = new StringWriter();\n+            final Result result = new StreamResult(writer);\n+            final Reader reader = new StringReader(writer.getBuffer().toString());\n+            final DocumentBuilder builder = createDocumentBuilder();\n+        catch (final SAXException e)\n+        catch (final IOException e)\n+        catch (final ParserConfigurationException pce)\n+        public XMLBuilderVisitor(final XMLDocumentHelper docHelper,\n+                final ListDelimiterHandler handler)\n+        public void processDocument(final ReferenceNodeHandler refHandler)\n+        public void handleRemovedNodes(final ReferenceNodeHandler refHandler)\n+            for (final Object ref : refHandler.removedReferences())\n+                    final Node removedElem = (Node) ref;\n+        protected void insert(final ImmutableNode newNode, final ImmutableNode parent,\n+                final ImmutableNode sibling1, final ImmutableNode sibling2,\n+                final ReferenceNodeHandler refHandler)\n+            final Element elem = document.createElement(newNode.getNodeName());\n+                final String txt =\n+        protected void update(final ImmutableNode node, final Object reference,\n+                final ReferenceNodeHandler refHandler)\n+                    final String value = XMLListReference.listValue(node, refHandler, listDelimiterHandler);\n+                final Object value = listDelimiterHandler.escape(refHandler.getValue(node),\n+        private void updateElement(final ImmutableNode node, final ReferenceNodeHandler refHandler,\n+                                   final Object value)\n+            final Element element = getElement(node, refHandler);\n+        private void updateElement(final Element element, final Object value)\n+                final String newValue = String.valueOf(value);\n+        private void removeReference(final Element element)\n+            final org.w3c.dom.Node parentElem = element.getParentNode();\n+        private Element getElement(final ImmutableNode node,\n+                final ReferenceNodeHandler refHandler)\n+            final Element elementNew = newElements.get(node);\n+            final Object reference = refHandler.getReference(node);\n+        private static void updateAttributes(final ImmutableNode node, final Element elem)\n+                for (final Map.Entry<String, Object> e : node.getAttributes()\n+        private static void clearAttributes(final Element elem)\n+            final NamedNodeMap attributes = elem.getAttributes();\n+        private static Text findTextNodeForUpdate(final Element elem)\n+            final NodeList children = elem.getChildNodes();\n+            final Collection<org.w3c.dom.Node> textNodes =\n+                final org.w3c.dom.Node nd = children.item(i);\n+            for (final org.w3c.dom.Node tn : textNodes)\n+    XMLDocumentHelper(final Document doc, final Map<Node, Node> elemMap, final String pubID,\n+            final String sysID)\n+    public static XMLDocumentHelper forNewDocument(final String rootElementName)\n+        final Document doc =\n+        final Element rootElem = doc.createElement(rootElementName);\n+    public static XMLDocumentHelper forSourceDocument(final Document srcDoc)\n+    public static void transform(final Transformer transformer, final Source source,\n+            final Result result) throws ConfigurationException\n+        catch (final TransformerException tex)\n+        final Document docCopy = copyDocument(getDocument());\n+    static Transformer createTransformer(final TransformerFactory factory)\n+        catch (final TransformerConfigurationException tex)\n+    static DocumentBuilder createDocumentBuilder(final DocumentBuilderFactory factory)\n+        catch (final ParserConfigurationException pcex)\n+    private static Document copyDocument(final Document doc)\n+        final Transformer transformer = createTransformer();\n+        final DOMSource source = new DOMSource(doc);\n+        final DOMResult result = new DOMResult();\n+    private static Map<Node, Node> createElementMapping(final Document doc1,\n+            final Document doc2)\n+        final Map<Node, Node> mapping = new HashMap<>();\n+    private static void createElementMappingForNodes(final Node n1, final Node n2,\n+            final Map<Node, Node> mapping)\n+        final NodeList childNodes1 = n1.getChildNodes();\n+        final NodeList childNodes2 = n2.getChildNodes();\n+        final int count = Math.min(childNodes1.getLength(), childNodes2.getLength());\n+    private XMLListReference(final Element e)\n+    public static void assignListReference(final Map<ImmutableNode, Object> refs,\n+            final ImmutableNode node, final Element elem)\n+    public static boolean isListNode(final ImmutableNode node,\n+            final ReferenceNodeHandler handler)\n+        final ImmutableNode parent = handler.getParent(node);\n+                final ImmutableNode child = handler.getChild(parent, i);\n+    public static boolean isFirstListItem(final ImmutableNode node,\n+            final ReferenceNodeHandler handler)\n+        final ImmutableNode parent = handler.getParent(node);\n+            final ImmutableNode child = handler.getChild(parent, idx);\n+    public static String listValue(final ImmutableNode node,\n+            final ReferenceNodeHandler nodeHandler,\n+            final ListDelimiterHandler delimiterHandler)\n+        final ImmutableNode parent = nodeHandler.getParent(node);\n+        final List<ImmutableNode> items =\n+        final List<Object> values = new ArrayList<>(items.size());\n+        for (final ImmutableNode n : items)\n+        catch (final UnsupportedOperationException e)\n+    private static boolean hasListReference(final ImmutableNode node,\n+            final ReferenceNodeHandler handler)\n+    private static boolean nameEquals(final ImmutableNode n1, final ImmutableNode n2)\n+    public XMLPropertiesConfiguration(final Element element) throws ConfigurationException\n+    public void setHeader(final String header)\n+    public void read(final Reader in) throws ConfigurationException\n+        final SAXParserFactory factory = SAXParserFactory.newInstance();\n+            final SAXParser parser = factory.newSAXParser();\n+            final XMLReader xmlReader = parser.getXMLReader();\n+                public InputSource resolveEntity(final String publicId, final String systemId)\n+        catch (final Exception e)\n+    public void load(final Element element) throws ConfigurationException\n+        final NodeList childNodes = element.getChildNodes();\n+            final Node item = childNodes.item(i);\n+                    final String key = ((Element) item).getAttribute(\"key\");\n+    public void write(final Writer out) throws ConfigurationException\n+        final PrintWriter writer = new PrintWriter(out);\n+        final Iterator<String> keys = getKeys();\n+            final String key = keys.next();\n+            final Object value = getProperty(key);\n+    private void writeProperty(final PrintWriter out, final String key, final Object value)\n+        final String k = StringEscapeUtils.escapeXml10(key);\n+            final String v = escapeValue(value);\n+    private void writeProperty(final PrintWriter out, final String key, final List<?> values)\n+        for (final Object value : values)\n+    public void save(final Document document, final Node parent)\n+        final Element properties = document.createElement(\"properties\");\n+            final Element comment = document.createElement(\"comment\");\n+        final Iterator<String> keys = getKeys();\n+            final String key = keys.next();\n+            final Object value = getProperty(key);\n+    public void initFileLocator(final FileLocator locator)\n+    private void writeProperty(final Document document, final Node properties, final String key, final Object value)\n+        final Element entry = document.createElement(\"entry\");\n+        final String k = StringEscapeUtils.escapeXml10(key);\n+            final String v = escapeValue(value);\n+    private void writeProperty(final Document document, final Node properties, final String key, final List<?> values)\n+        for (final Object value : values)\n+    private String escapeValue(final Object value)\n+        final String v = StringEscapeUtils.escapeXml10(String.valueOf(value));\n+        public void startElement(final String uri, final String localName, final String qName, final Attributes attrs)\n+        public void endElement(final String uri, final String localName, final String qName)\n+        public void characters(final char[] chars, final int start, final int length)\n+    public YAMLConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n+    public void read(final Reader in) throws ConfigurationException\n+            final Yaml yaml = new Yaml();\n+            final Map<String, Object> map = (Map) yaml.load(in);\n+        catch (final Exception e)\n+    public void read(final Reader in, final LoaderOptions options)\n+            final Yaml yaml = new Yaml(options);\n+            final Map<String, Object> map = (Map) yaml.load(in);\n+        catch (final Exception e)\n+    public void write(final Writer out) throws ConfigurationException, IOException\n+        final DumperOptions options = new DumperOptions();\n+    public void dump(final Writer out, final DumperOptions options)\n+        final Yaml yaml = new Yaml(options);\n+    public void read(final InputStream in) throws ConfigurationException\n+            final Yaml yaml = new Yaml();\n+            final Map<String, Object> map = (Map) yaml.load(in);\n+        catch (final Exception e)\n+    public void read(final InputStream in, final LoaderOptions options)\n+            final Yaml yaml = new Yaml(options);\n+            final Map<String, Object> map = (Map) yaml.load(in);\n+        catch (final Exception e)\n+    public BeanHelper(final BeanFactory defFactory)\n+    public void registerBeanFactory(final String name, final BeanFactory factory)\n+    public BeanFactory deregisterBeanFactory(final String name)\n+    public void initBean(final Object bean, final BeanDeclaration data)\n+        final Map<String, Object> nestedBeans = data.getNestedBeanDeclarations();\n+                final\n+                    final Map.Entry<String, Object> e = nestedBeans.entrySet().iterator().next();\n+                    final String propName = e.getKey();\n+                    final Class<?> defaultClass = getDefaultClass(bean, propName);\n+                        final\n+                        for (final BeanDeclaration decl : decls)\n+                        final BeanDeclaration decl = (BeanDeclaration) e.getValue();\n+                for (final Map.Entry<String, Object> e : nestedBeans.entrySet())\n+                    final String propName = e.getKey();\n+                    final Class<?> defaultClass = getDefaultClass(bean, propName);\n+                    final Object prop = e.getValue();\n+                        final Collection<Object> beanCollection =\n+                        for (final Object elemDef : (Collection<?>) prop)\n+    public static void initBeanProperties(final Object bean, final BeanDeclaration data)\n+        final Map<String, Object> properties = data.getBeanProperties();\n+            for (final Map.Entry<String, Object> e : properties.entrySet())\n+                final String propName = e.getKey();\n+    public static DynaBean createWrapDynaBean(final Object bean)\n+        final WrapDynaClass dynaClass =\n+    public static void copyProperties(final Object dest, final Object orig)\n+    private static Class<?> getDefaultClass(final Object bean, final String propName)\n+            final PropertyDescriptor desc =\n+        catch (final Exception ex)\n+    private static void initProperty(final Object bean, final String propName, final Object value)\n+        catch (final IllegalAccessException iaex)\n+        catch (final InvocationTargetException itex)\n+    private static Collection<Object> createPropertyCollection(final String propName,\n+            final Class<?> propertyClass)\n+    public static void setProperty(final Object bean, final String propName, final Object value)\n+    public Object createBean(final BeanDeclaration data, final Class<?> defaultClass,\n+            final Object param)\n+        final BeanFactory factory = fetchBeanFactory(data);\n+        final BeanCreationContext bcc =\n+        catch (final Exception ex)\n+    public Object createBean(final BeanDeclaration data, final Class<?> defaultClass)\n+    public Object createBean(final BeanDeclaration data)\n+    static Class<?> loadClass(final String name) throws ClassNotFoundException\n+    private static boolean isPropertyWriteable(final Object bean, final String propName)\n+    private static Class<?> fetchBeanClass(final BeanDeclaration data,\n+            final Class<?> defaultClass, final BeanFactory factory)\n+        final String clsName = data.getBeanClassName();\n+            catch (final ClassNotFoundException cex)\n+        final Class<?> clazz = factory.getDefaultBeanClass();\n+    private BeanFactory fetchBeanFactory(final BeanDeclaration data)\n+        final String factoryName = data.getBeanFactoryName();\n+            final BeanFactory factory = beanFactories.get(factoryName);\n+            final BeanDeclaration data, final Class<?> defaultClass,\n+            final Object param, final BeanFactory factory)\n+        final PropertyUtilsBean propUtilsBean = new PropertyUtilsBean();\n+        private BeanCreationContextImpl(final BeanHelper helper, final Class<?> beanClass,\n+                final BeanDeclaration data, final Object param)\n+        public void initBean(final Object bean, final BeanDeclaration data)\n+        public Object createBean(final BeanDeclaration data)\n+    public CombinedBeanDeclaration(final BeanDeclaration... decl)\n+        for (final BeanDeclaration d : childDeclarations)\n+            final String factoryName = d.getBeanFactoryName();\n+        for (final BeanDeclaration d : childDeclarations)\n+            final Object factoryParam = d.getBeanFactoryParameter();\n+        for (final BeanDeclaration d : childDeclarations)\n+            final String beanClassName = d.getBeanClassName();\n+        final Map<String, Object> result = new HashMap<>();\n+            final Map<String, Object> props =\n+        final Map<String, Object> result = new HashMap<>();\n+            final Map<String, Object> decls =\n+        for (final BeanDeclaration d : childDeclarations)\n+            final Collection<ConstructorArg> args = d.getConstructorArgs();\n+    public ConfigurationDynaBean(final Configuration configuration)\n+    public void set(final String name, final Object value)\n+            final Collection<?> collection = (Collection<?>) value;\n+            for (final Object v : collection)\n+            final int length = Array.getLength(value);\n+    public Object get(final String name)\n+            final Configuration subset = new SubsetConfiguration(getConfiguration(), name, PROPERTY_DELIMITER);\n+    public boolean contains(final String name, final String key)\n+        final Configuration subset = getConfiguration().subset(name);\n+    public Object get(final String name, final int index)\n+        final List<Object> list = getConfiguration().getList(name);\n+    public Object get(final String name, final String key)\n+        final Configuration subset = getConfiguration().subset(name);\n+    public void remove(final String name, final String key)\n+        final Configuration subset = new SubsetConfiguration(getConfiguration(), name, PROPERTY_DELIMITER);\n+    public void set(final String name, final int index, final Object value)\n+        final Object property = getConfiguration().getProperty(name);\n+            final\n+    public void set(final String name, final String key, final Object value)\n+    private boolean checkIndexedProperty(final String name)\n+        final Object property = getConfiguration().getProperty(name);\n+    public ConfigurationDynaClass(final Configuration configuration)\n+    public DynaProperty getDynaProperty(final String name)\n+        final Object value = configuration.getProperty(name);\n+        final Iterator<String> keys = configuration.getKeys();\n+        final List<DynaProperty> properties = new ArrayList<>();\n+            final String key = keys.next();\n+            final DynaProperty property = getDynaProperty(key);\n+        final DynaProperty[] propertyArray = new DynaProperty[properties.size()];\n+    private ConstructorArg(final BeanDeclaration decl, final Object val, final String type)\n+    public static ConstructorArg forBeanDeclaration(final BeanDeclaration decl)\n+    public static ConstructorArg forBeanDeclaration(final BeanDeclaration decl,\n+            final String typeName)\n+    public static ConstructorArg forValue(final Object value)\n+    public static ConstructorArg forValue(final Object value, final String typeName)\n+    public boolean matches(final Class<?> argCls)\n+        final StringBuilder buf = new StringBuilder();\n+    public DefaultBeanFactory(final ConversionHandler convHandler)\n+    public Object createBean(final BeanCreationContext bcc) throws Exception\n+        final Object result = createBeanInstance(bcc);\n+    protected Object createBeanInstance(final BeanCreationContext bcc)\n+        final Constructor<?> ctor =\n+        final Object[] args = fetchConstructorArgs(ctor, bcc);\n+    protected void initBeanInstance(final Object bean, final BeanCreationContext bcc) throws Exception\n+            final Class<T> beanClass, final BeanDeclaration data)\n+        final List<Constructor<T>> matchingConstructors =\n+    private Object[] fetchConstructorArgs(final Constructor<?> ctor,\n+            final BeanCreationContext bcc)\n+        final Class<?>[] types = ctor.getParameterTypes();\n+        final Object[] args = new Object[types.length];\n+        for (final ConstructorArg arg : nullSafeConstructorArgs(bcc.getBeanDeclaration()))\n+            final Object val =\n+            final BeanDeclaration data)\n+            final Class<T> beanClass, final BeanDeclaration data)\n+        final List<Constructor<T>> result = new LinkedList<>();\n+        final Collection<ConstructorArg> args = getConstructorArgs(data);\n+        for (final Constructor<?> ctor : beanClass.getConstructors())\n+                final\n+    private static boolean matchesConstructor(final Constructor<?> ctor,\n+            final Collection<ConstructorArg> args)\n+        final Class<?>[] types = ctor.getParameterTypes();\n+        for (final ConstructorArg arg : args)\n+            final BeanDeclaration data)\n+    private static <T> void checkSingleMatchingConstructor(final Class<T> beanClass,\n+            final BeanDeclaration data, final List<Constructor<T>> matchingConstructors)\n+            final Class<?> beanClass, final BeanDeclaration data, final String msg)\n+    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key)\n+    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key,\n+            final boolean optional)\n+    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key,\n+            final boolean optional, final String defBeanClsName)\n+        catch (final ConfigurationRuntimeException iex)\n+    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config)\n+    XMLBeanDeclaration(final HierarchicalConfiguration<?> config,\n+            final NodeData<?> node)\n+        final Map<String, Object> props = new HashMap<>();\n+        for (final String key : getAttributeNames())\n+        final Map<String, Object> nested = new HashMap<>();\n+        for (final NodeData<?> child : getNode().getChildren())\n+                    final Object obj = nested.get(child.nodeName());\n+                        final\n+        final Collection<ConstructorArg> args = new LinkedList<>();\n+        for (final NodeData<?> child : getNode().getChildren(ELEM_CTOR_ARG))\n+    protected Object interpolate(final Object value)\n+        final ConfigurationInterpolator interpolator =\n+    protected boolean isReservedChildName(final String name)\n+    protected boolean isReservedAttributeName(final String name)\n+    protected boolean isReservedName(final String name)\n+    BeanDeclaration createBeanDeclaration(final NodeData<?> node)\n+        for (final HierarchicalConfiguration<?> config : getConfiguration()\n+    private void initSubnodeConfiguration(final HierarchicalConfiguration<?> conf)\n+    private ConstructorArg createConstructorArg(final NodeData<?> child)\n+        final String type = getAttribute(child, ATTR_CTOR_TYPE);\n+    private String getAttribute(final NodeData<?> nd, final String attr)\n+        final Object value = nd.getAttribute(attr);\n+    private static boolean isBeanDeclarationArgument(final NodeData<?> nd)\n+            final HierarchicalConfiguration<T> config)\n+        final NodeHandler<T> handler = config.getNodeModel().getNodeHandler();\n+        public NodeData(final T nd, final NodeHandler<T> hndlr)\n+        public String escapedNodeName(final HierarchicalConfiguration<?> config)\n+        public List<NodeData<T>> getChildren(final String name)\n+        public Object getAttribute(final String key)\n+        public boolean matchesConfigRootNode(final HierarchicalConfiguration<?> config)\n+        private List<NodeData<T>> wrapInNodeData(final List<T> nodes)\n+            final List<NodeData<T>> result = new ArrayList<>(nodes.size());\n+            for (final T node : nodes)\n+    public AutoSaveListener(final FileBasedConfigurationBuilder<?> bldr)\n+    public void onEvent(final ConfigurationEvent event)\n+            catch (final ConfigurationException ce)\n+    public synchronized void loading(final FileHandler handler)\n+    public synchronized void loaded(final FileHandler handler)\n+    public synchronized void updateFileHandler(final FileHandler fh)\n+    private boolean autoSaveRequired(final ConfigurationEvent event)\n+        final HashMap<String, Object> result =\n+    public BasicBuilderParameters setLogger(final ConfigurationLogger log)\n+    public BasicBuilderParameters setThrowExceptionOnMissing(final boolean b)\n+            final ListDelimiterHandler handler)\n+    public BasicBuilderParameters setInterpolator(final ConfigurationInterpolator ci)\n+            final Map<String, ? extends Lookup> lookups)\n+            final Collection<? extends Lookup> lookups)\n+            final ConfigurationInterpolator parent)\n+    public BasicBuilderParameters setSynchronizer(final Synchronizer sync)\n+    public BasicBuilderParameters setConversionHandler(final ConversionHandler handler)\n+    public BasicBuilderParameters setBeanHelper(final BeanHelper beanHelper)\n+            final ConfigurationDecoder decoder)\n+    public void merge(final BuilderParameters p)\n+        for (final Map.Entry<String, Object> e : p.getParameters().entrySet())\n+    public void inheritFrom(final Map<String, ?> source)\n+            final Map<String, Object> params)\n+    public static BeanHelper fetchBeanHelper(final Map<String, Object> params)\n+            final BasicBuilderParameters copy =\n+        catch (final CloneNotSupportedException cnex)\n+    protected void storeProperty(final String key, final Object value)\n+    protected Object fetchProperty(final String key)\n+    protected void copyPropertiesFrom(final Map<String, ?> source, final String... keys)\n+        for (final String key : keys)\n+            final Object value = source.get(key);\n+    private BasicBuilderParameters setProperty(final String key, final Object value)\n+    private static void createDefensiveCopies(final HashMap<String, Object> params)\n+        final Map<String, ? extends Lookup> prefixLookups =\n+        final Collection<? extends Lookup> defLookups = fetchDefaultLookups(params);\n+            final Map<String, Object> params)\n+        final\n+            final Map<String, Object> params)\n+        final Map<?, ?> prefixes =\n+        for (final Map.Entry<?, ?> e : prefixes.entrySet())\n+            final Map<String, Object> params)\n+        final\n+            final Map<String, Object> params)\n+        final Collection<?> col =\n+        for (final Object o : col)\n+    private static <T> T fetchParameter(final Map<String, Object> params, final String key,\n+            final Class<T> expClass)\n+        final Object value = params.get(key);\n+    private static void checkParameters(final Map<String, Object> params)\n+    public BasicConfigurationBuilder(final Class<? extends T> resCls)\n+    public BasicConfigurationBuilder(final Class<? extends T> resCls, final Map<String, Object> params)\n+    public BasicConfigurationBuilder(final Class<? extends T> resCls,\n+            final Map<String, Object> params, final boolean allowFailOnInit)\n+            final Map<String, Object> params)\n+            final Map<String, Object> params)\n+        final Map<String, Object> newParams =\n+    public BasicConfigurationBuilder<T> configure(final BuilderParameters... params)\n+        final Map<String, Object> newParams = new HashMap<>();\n+        for (final BuilderParameters p : params)\n+            final EventType<E> eventType, final EventListener<? super E> listener)\n+            final EventType<E> eventType, final EventListener<? super E> listener)\n+            final ReloadingController controller)\n+        final T resObj = createResultInstance();\n+        catch (final ConfigurationException cex)\n+        final Object bean = fetchBeanHelper().createBean(getResultDeclaration());\n+    protected void initResultInstance(final T obj) throws ConfigurationException\n+        final BeanHelper helper =\n+            final BasicConfigurationBuilder<?> target)\n+    protected void copyEventListeners(final BasicConfigurationBuilder<?> target,\n+            final EventListenerList listeners)\n+            final EventType<E> eventType, final EventListener<? super E> listener)\n+    protected void fireBuilderEvent(final ConfigurationBuilderEvent event)\n+    private void updateParameters(final Map<String, Object> newParams)\n+        final Map<String, Object> map = new HashMap<>();\n+    private void registerEventListeners(final T obj)\n+        final EventSource evSrc = ConfigurationUtils.asEventSource(obj, true);\n+        for (final EventListenerRegistrationData<?> regData : eventListeners\n+    private void removeEventListeners(final T obj)\n+        final EventSource evSrc = ConfigurationUtils.asEventSource(obj, true);\n+        for (final EventListenerRegistrationData<?> regData : eventListeners\n+    private void handleEventListenerProviders(final BuilderParameters params)\n+    private void checkResultInstance(final Object inst)\n+        final Map<String, Object> filteredMap =\n+        for (final Iterator<String> it = filteredMap.keySet().iterator(); it\n+            final String key = it.next();\n+    private void handleInitializable(final T obj)\n+    private static <E extends Event> void registerListener(final EventSource evSrc,\n+            final EventListenerRegistrationData<E> regData)\n+    private static <E extends Event> void removeListener(final EventSource evSrc,\n+            final EventListenerRegistrationData<E> regData)\n+    public BuilderConfigurationWrapperFactory(final EventSourceSupport evSrcSupport)\n+            final Class<T> ifcClass, final ConfigurationBuilder<? extends T> builder)\n+            final Class<T> ifcClass, final ConfigurationBuilder<? extends T> builder,\n+            final EventSourceSupport evSrcSupport)\n+    private static Class<?>[] fetchSupportedInterfaces(final Class<?> ifcClass,\n+            final EventSourceSupport evSrcSupport)\n+        final Class<?>[] result = new Class<?>[2];\n+                final ConfigurationBuilder<? extends ImmutableConfiguration> wrappedBuilder,\n+                final EventSourceSupport evSrcSupport)\n+        public Object invoke(final Object proxy, final Method method, final Object[] args)\n+        private Object handleConfigurationInvocation(final Method method,\n+                final Object[] args) throws Exception\n+        private Object handleEventSourceInvocation(final Method method, final Object[] args)\n+            final Object target =\n+    public ConfigurationBuilderEvent(final ConfigurationBuilder<?> source,\n+            final EventType<? extends ConfigurationBuilderEvent> evType)\n+            final ConfigurationBuilder<?> source,\n+            final EventType<? extends ConfigurationBuilderResultCreatedEvent> evType,\n+            final ImmutableConfiguration createdConfiguration)\n+    public CopyObjectDefaultHandler(final BuilderParameters src)\n+    public void initializeDefaults(final Object parameters)\n+        catch (final Exception e)\n+    public DatabaseBuilderParametersImpl setDataSource(final DataSource src)\n+    public DatabaseBuilderParametersImpl setTable(final String tname)\n+    public DatabaseBuilderParametersImpl setKeyColumn(final String name)\n+    public DatabaseBuilderParametersImpl setValueColumn(final String name)\n+    public DatabaseBuilderParametersImpl setConfigurationNameColumn(final String name)\n+    public DatabaseBuilderParametersImpl setConfigurationName(final String name)\n+    public DatabaseBuilderParametersImpl setAutoCommit(final boolean f)\n+    public <T> void registerDefaultsHandler(final Class<T> paramsClass,\n+            final DefaultParametersHandler<? super T> handler)\n+    public <T> void registerDefaultsHandler(final Class<T> paramsClass,\n+            final DefaultParametersHandler<? super T> handler, final Class<?> startClass)\n+    public void unregisterDefaultsHandler(final DefaultParametersHandler<?> handler)\n+    public void unregisterDefaultsHandler(final DefaultParametersHandler<?> handler,\n+            final Class<?> startClass)\n+        final Collection<DefaultHandlerData> toRemove =\n+        for (final DefaultHandlerData dhd : defaultHandlers)\n+    public void initializeParameters(final BuilderParameters params)\n+            for (final DefaultHandlerData dhd : defaultHandlers)\n+        public DefaultHandlerData(final DefaultParametersHandler<?> h, final Class<?> cls,\n+                final Class<?> startCls)\n+        public void applyHandlerIfMatching(final BuilderParameters obj)\n+                final\n+        public boolean isOccurrence(final DefaultParametersHandler<?> h,\n+                final Class<?> startCls)\n+    public ReloadingDetector createReloadingDetector(final FileHandler handler,\n+            final FileBasedBuilderParametersImpl params)\n+        final Long refreshDelay = params.getReloadingRefreshDelay();\n+        final FileHandlerReloadingDetector fileHandlerReloadingDetector =\n+            final EventType<T> eventType, final EventListener<? super T> listener)\n+            final EventListenerRegistrationData<T> registrationData)\n+    public FileBasedBuilderParametersImpl(final FileHandler handler)\n+            final Map<String, ?> params)\n+            final Map<String, ?> params, final boolean createIfMissing)\n+    public static FileBasedBuilderParametersImpl fromMap(final Map<String, ?> map)\n+        final FileBasedBuilderParametersImpl params =\n+    public void inheritFrom(final Map<String, ?> source)\n+        final FileBasedBuilderParametersImpl srcParams = fromParameters(source);\n+            final Long reloadingRefreshDelay)\n+            final ReloadingDetectorFactory reloadingDetectorFactory)\n+    public FileBasedBuilderParametersImpl setFile(final File file)\n+    public FileBasedBuilderParametersImpl setURL(final URL url)\n+    public FileBasedBuilderParametersImpl setPath(final String path)\n+    public FileBasedBuilderParametersImpl setFileName(final String name)\n+    public FileBasedBuilderParametersImpl setBasePath(final String path)\n+    public FileBasedBuilderParametersImpl setFileSystem(final FileSystem fs)\n+            final FileLocationStrategy strategy)\n+    public FileBasedBuilderParametersImpl setEncoding(final String enc)\n+        final Map<String, Object> params = super.getParameters();\n+        final FileBasedBuilderParametersImpl copy =\n+    public FileBasedConfigurationBuilder(final Class<? extends T> resCls)\n+    public FileBasedConfigurationBuilder(final Class<? extends T> resCls,\n+            final Map<String, Object> params)\n+    public FileBasedConfigurationBuilder(final Class<? extends T> resCls,\n+            final Map<String, Object> params, final boolean allowFailOnInit)\n+    public static String getDefaultEncoding(final Class<?> configClass)\n+        final List<Class<?>> superclasses =\n+        for (final Class<?> cls : superclasses)\n+        final List<Class<?>> interfaces = ClassUtils.getAllInterfaces(configClass);\n+        for (final Class<?> cls : interfaces)\n+    public static void setDefaultEncoding(final Class<?> configClass, final String encoding)\n+            final BuilderParameters... params)\n+            final Map<String, Object> params)\n+    public synchronized void setAutoSave(final boolean enabled)\n+    protected void initResultInstance(final T obj) throws ConfigurationException\n+        final FileHandler srcHandler =\n+    protected void initFileHandler(final FileHandler handler)\n+    private void initEncoding(final FileHandler handler)\n+            final String encoding = getDefaultEncoding(getResultClass());\n+        final Map<Class<?>, String> enc = new ConcurrentHashMap<>();\n+    public void inheritFrom(final Map<String, ?> source)\n+            final ExpressionEngine engine)\n+    public void inheritFrom(final Map<String, ?> source)\n+    public INIBuilderParametersImpl setSeparatorUsedInOutput(final String separator)\n+    public JndiBuilderParametersImpl setContext(final Context ctx)\n+    public JndiBuilderParametersImpl setPrefix(final String p)\n+    public PropertiesBuilderParametersImpl setIncludesAllowed(final boolean f)\n+    public void inheritFrom(final Map<String, ?> source)\n+            final PropertiesConfigurationLayout layout)\n+    public PropertiesBuilderParametersImpl setIOFactory(final IOFactory factory)\n+            final BasicConfigurationBuilder<?> configBuilder,\n+            final ReloadingController controller)\n+            final BasicConfigurationBuilder<?> configBuilder,\n+            final ReloadingController controller)\n+        final ReloadingBuilderSupportListener listener =\n+    public void onEvent(final Event event)\n+    public ReloadingFileBasedConfigurationBuilder(final Class<? extends T> resCls,\n+            final Map<String, Object> params)\n+    public ReloadingFileBasedConfigurationBuilder(final Class<? extends T> resCls,\n+            final Map<String, Object> params, final boolean allowFailOnInit)\n+    public ReloadingFileBasedConfigurationBuilder(final Class<? extends T> resCls)\n+            final BuilderParameters... params)\n+    protected ReloadingDetector createReloadingDetector(final FileHandler handler,\n+            final FileBasedBuilderParametersImpl fbparams)\n+    protected void initFileHandler(final FileHandler handler)\n+        final ReloadingDetector ctrlDetector = createReloadingDetectorForController();\n+        final ReloadingController ctrl = new ReloadingController(ctrlDetector);\n+                final ReloadingDetector detector = resultReloadingDetector;\n+                final ReloadingDetector detector = resultReloadingDetector;\n+            final FileBasedBuilderParametersImpl params)\n+        final ReloadingDetectorFactory factory = params.getReloadingDetectorFactory();\n+    public void inheritFrom(final Map<String, ?> source)\n+            final DocumentBuilder docBuilder)\n+    public XMLBuilderParametersImpl setEntityResolver(final EntityResolver resolver)\n+    public XMLBuilderParametersImpl setPublicID(final String pubID)\n+    public XMLBuilderParametersImpl setSystemID(final String sysID)\n+    public XMLBuilderParametersImpl setValidating(final boolean f)\n+    public XMLBuilderParametersImpl setSchemaValidation(final boolean f)\n+    public BaseConfigurationBuilderProvider(final String bldrCls,\n+            final String reloadBldrCls, final String configCls, final Collection<String> paramCls)\n+            final ConfigurationDeclaration decl) throws ConfigurationException\n+            final Collection<BuilderParameters> params = createParameterObjects();\n+            final BasicConfigurationBuilder<? extends Configuration> builder =\n+        catch (final ConfigurationException cex)\n+        catch (final Exception ex)\n+    protected boolean isAllowFailOnInit(final ConfigurationDeclaration decl)\n+        final Collection<BuilderParameters> params =\n+        for (final String paramcls : getParameterClasses())\n+    protected void initializeParameterObjects(final ConfigurationDeclaration decl,\n+            final Collection<BuilderParameters> params) throws Exception\n+        final MultiWrapDynaBean wrapBean = new MultiWrapDynaBean(params);\n+            final ConfigurationDeclaration decl, final Collection<BuilderParameters> params)\n+        for (final BuilderParameters p : params)\n+            final ConfigurationDeclaration decl, final Collection<BuilderParameters> params)\n+        final Class<?> bldCls =\n+        final Class<?> configCls =\n+        final Constructor<?> ctor = bldCls.getConstructor(CTOR_PARAM_TYPES);\n+        final\n+            final BasicConfigurationBuilder<? extends Configuration> builder,\n+            final ConfigurationDeclaration decl, final Collection<BuilderParameters> params)\n+    protected String determineBuilderClass(final ConfigurationDeclaration decl)\n+    protected String determineConfigurationClass(final ConfigurationDeclaration decl,\n+            final Collection<BuilderParameters> params) throws ConfigurationException\n+    private static BuilderParameters createParameterObject(final String paramcls)\n+        final Class<?> cls = ConfigurationUtils.loadClass(paramcls);\n+        final BuilderParameters p = (BuilderParameters) cls.newInstance();\n+            final Collection<String> paramCls)\n+            final Map<String, ?> params)\n+            final Map<String, ?> params, final boolean createIfMissing)\n+    public void inheritFrom(final Map<String, ?> source)\n+        final CombinedBuilderParametersImpl srcParams = fromParameters(source);\n+            final boolean inheritSettings)\n+            final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> builder)\n+    public CombinedBuilderParametersImpl registerProvider(final String tagName,\n+            final ConfigurationBuilderProvider provider)\n+            final Map<String, ConfigurationBuilderProvider> providers)\n+        for (final Map.Entry<String, ConfigurationBuilderProvider> e : providers\n+            final CombinedBuilderParametersImpl params)\n+    public ConfigurationBuilderProvider providerForTag(final String tagName)\n+    public CombinedBuilderParametersImpl setBasePath(final String path)\n+            final BuilderParameters params)\n+            final DefaultParametersManager manager)\n+            final Class<D> paramClass, final DefaultParametersHandler<? super D> handler)\n+            final Class<D> paramClass, final DefaultParametersHandler<? super D> handler,\n+            final Class<?> startClass)\n+        final Map<String, Object> params = super.getParameters();\n+        final CombinedBuilderParametersImpl copy =\n+    public CombinedConfigurationBuilder(final Map<String, Object> params)\n+    public CombinedConfigurationBuilder(final Map<String, Object> params, final boolean allowFailOnInit)\n+    public CombinedConfigurationBuilder configure(final BuilderParameters... params)\n+            final String name) throws ConfigurationException\n+        final ConfigurationBuilder<? extends Configuration> builder =\n+            final Map<String, Object> params) throws ConfigurationException\n+        final CombinedBuilderParametersImpl cbParams =\n+            final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder =\n+        final BuilderParameters fileParams =\n+            final BuilderParameters builderParams)\n+    protected BeanDeclaration createResultDeclaration(final Map<String, Object> params)\n+        final BeanDeclaration paramsDecl = super.createResultDeclaration(params);\n+        final XMLBeanDeclaration resultDecl =\n+    protected void initResultInstance(final CombinedConfiguration result)\n+        final HierarchicalConfiguration<?> config = getDefinitionConfiguration();\n+        final ConfigurationSourceData data = getSourceData();\n+        final boolean createBuilders = data.getChildBuilders().isEmpty();\n+        final List<ConfigurationBuilder<? extends Configuration>> overrideBuilders =\n+            final CombinedConfiguration addConfig = createAdditionalsConfiguration(result);\n+            final List<ConfigurationBuilder<? extends Configuration>> unionBuilders =\n+            final CombinedConfiguration resultConfig)\n+        final CombinedConfiguration addConfig =\n+            final HierarchicalConfiguration<?> defConfig, final Configuration resultConfig)\n+        final Map<String, Lookup> lookups = new HashMap<>();\n+        final List<? extends HierarchicalConfiguration<?>> nodes =\n+        for (final HierarchicalConfiguration<?> config : nodes)\n+            final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n+            final String key = config.getString(KEY_LOOKUP_KEY);\n+            final Lookup lookup = (Lookup) fetchBeanHelper().createBean(decl);\n+            final ConfigurationInterpolator defCI = defConfig.getInterpolator();\n+    protected FileSystem initFileSystem(final HierarchicalConfiguration<?> config)\n+            final XMLBeanDeclaration decl =\n+    protected void initSystemProperties(final HierarchicalConfiguration<?> config,\n+            final String basePath) throws ConfigurationException\n+        final String fileName = config.getString(KEY_SYSTEM_PROPS);\n+            catch (final Exception ex)\n+    protected void configureEntityResolver(final HierarchicalConfiguration<?> config,\n+            final XMLBuilderParametersImpl xmlParams) throws ConfigurationException\n+            final XMLBeanDeclaration decl =\n+            final EntityResolver resolver =\n+            final FileSystem fileSystem = xmlParams.getFileHandler().getFileSystem();\n+            final String basePath = xmlParams.getFileHandler().getBasePath();\n+            final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n+    protected ConfigurationBuilderProvider providerForTag(final String tagName)\n+    protected void initChildBuilderParameters(final BuilderParameters params)\n+            final BasicConfigurationBuilder<? extends Configuration> dest)\n+    void initBean(final Object bean, final BeanDeclaration decl)\n+    private void setUpParentInterpolator(final Configuration resultConfig,\n+            final Configuration defConfig)\n+        final ConfigurationInterpolator defInterpolator = defConfig.getInterpolator();\n+            final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder =\n+                final\n+                final URL url = fileBuilder.getFileHandler().getURL();\n+    private void initDefaultChildParameters(final BuilderParameters params)\n+    private void initChildBasicParameters(final BasicBuilderParameters params)\n+            final FileBasedBuilderProperties<?> params)\n+    private void initChildXMLParameters(final XMLBuilderProperties<?> params)\n+            final CombinedBuilderParametersImpl params)\n+        final ConfigurationSourceData result = new ConfigurationSourceData();\n+    private void registerConfiguredProviders(final HierarchicalConfiguration<?> defConfig)\n+        final List<? extends HierarchicalConfiguration<?>> nodes =\n+        for (final HierarchicalConfiguration<?> config : nodes)\n+            final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n+            final String key = config.getString(KEY_PROVIDER_KEY);\n+            public void onEvent(final ConfigurationBuilderEvent event)\n+        final CombinedConfiguration cc = getConfigurationUnderConstruction();\n+            final Collection<? extends HierarchicalConfiguration<?>> configs)\n+        final Collection<ConfigurationDeclaration> declarations =\n+        for (final HierarchicalConfiguration<?> c : configs)\n+    private static void initNodeCombinerListNodes(final CombinedConfiguration cc,\n+            final HierarchicalConfiguration<?> defConfig, final String key)\n+        final List<Object> listNodes = defConfig.getList(key);\n+        for (final Object listNode : listNodes)\n+        final Map<String, ConfigurationBuilderProvider> providers =\n+                final HierarchicalConfiguration<?> config) throws ConfigurationException\n+                final CombinedConfiguration ccResult,\n+                final List<ConfigurationDeclaration> srcDecl,\n+                final List<ConfigurationBuilder<? extends Configuration>> builders)\n+            final boolean createBuilders = builders.isEmpty();\n+            for (final ConfigurationBuilder<?> b : getChildBuilders())\n+                final String name)\n+                final ConfigurationDeclaration decl) throws ConfigurationException\n+            final ConfigurationBuilderProvider provider =\n+            final ConfigurationBuilder<? extends Configuration> builder =\n+        private void addChildConfiguration(final CombinedConfiguration ccResult,\n+                final ConfigurationDeclaration decl,\n+                final ConfigurationBuilder<? extends Configuration> builder)\n+            catch (final ConfigurationException cex)\n+                public void onEvent(final ConfigurationBuilderEvent event)\n+                final HierarchicalConfiguration<?> config)\n+            final List<? extends HierarchicalConfiguration<?>> configs =\n+            for (final Iterator<? extends HierarchicalConfiguration<?>> it =\n+                final String nodeName = it.next().getRootElementName();\n+                for (final String element : CONFIG_SECTIONS)\n+            final ConfigurationDeclaration decl, final Collection<BuilderParameters> params)\n+    protected void initializeParameterObjects(final ConfigurationDeclaration decl,\n+            final Collection<BuilderParameters> params) throws Exception\n+        final BasicBuilderParameters basicParams =\n+    private static void setUpBasicParameters(final CombinedConfiguration config,\n+            final BasicBuilderParameters params)\n+    public ConfigurationDeclaration(final CombinedConfigurationBuilder builder,\n+            final HierarchicalConfiguration<?> config)\n+        final String result =\n+    protected boolean isReservedAttributeName(final String name)\n+        final Set<String> attributes = getAttributeNames();\n+    public FileExtensionConfigurationBuilderProvider(final String bldrCls,\n+            final String reloadBldrCls, final String matchingConfigCls,\n+            final String defConfigClass, final String ext, final Collection<String> paramCls)\n+    protected String determineConfigurationClass(final ConfigurationDeclaration decl,\n+            final Collection<BuilderParameters> params) throws ConfigurationException\n+        final String currentExt = extractExtension(fetchCurrentFileName(params));\n+            final Collection<BuilderParameters> params)\n+        for (final BuilderParameters p : params)\n+                final FileBasedBuilderParametersImpl fp = (FileBasedBuilderParametersImpl) p;\n+    private static String extractExtension(final String fileName)\n+        final int pos = fileName.lastIndexOf(EXT_SEPARATOR);\n+            final Map<String, Object> params)\n+            final Map<String, Object> params, final boolean createIfMissing)\n+    public MultiFileBuilderParametersImpl setFilePattern(final String p)\n+            final BuilderParameters p)\n+        final Map<String, Object> params = super.getParameters();\n+        final MultiFileBuilderParametersImpl copy =\n+                public void onEvent(final ConfigurationBuilderEvent event)\n+    public MultiFileConfigurationBuilder(final Class<? extends T> resCls,\n+            final Map<String, Object> params, final boolean allowFailOnInit)\n+    public MultiFileConfigurationBuilder(final Class<? extends T> resCls,\n+            final Map<String, Object> params)\n+    public MultiFileConfigurationBuilder(final Class<? extends T> resCls)\n+    public MultiFileConfigurationBuilder<T> configure(final BuilderParameters... params)\n+        final Map<String, Object> params = getParameters();\n+        final MultiFileBuilderParametersImpl multiParams =\n+        final String fileName = fetchFileName(multiParams);\n+            final FileBasedConfigurationBuilder<T> newBuilder =\n+            final EventType<E> eventType, final EventListener<? super E> l)\n+            for (final FileBasedConfigurationBuilder<T> b : getManagedBuilders()\n+            final EventType<E> eventType, final EventListener<? super E> l)\n+        final boolean result = super.removeEventListener(eventType, l);\n+            for (final FileBasedConfigurationBuilder<T> b : getManagedBuilders()\n+        for (final FileBasedConfigurationBuilder<T> b : getManagedBuilders().values())\n+        final InterpolatorSpecification spec =\n+            final MultiFileBuilderParametersImpl multiParams)\n+        final ConfigurationInterpolator ci = getInterpolator();\n+            final String fileName, final Map<String, Object> params)\n+            final String fileName, final Map<String, Object> params)\n+        final FileBasedConfigurationBuilder<T> managedBuilder =\n+    private void initListeners(final FileBasedConfigurationBuilder<T> newBuilder)\n+    private String fetchFileName(final MultiFileBuilderParametersImpl multiParams)\n+        final Boolean reentrant = inInterpolation.get();\n+    private void handleManagedBuilderEvent(final ConfigurationBuilderEvent event)\n+            final ConfigurationBuilderEvent event)\n+        final\n+            final Map<String, Object> params,\n+            final MultiFileBuilderParametersImpl multiParams)\n+        final Map<String, Object> newParams = new HashMap<>(params);\n+        final BuilderParameters managedBuilderParameters =\n+            final BuilderParameters copy =\n+    private static boolean isEventTypeForManagedBuilders(final EventType<?> eventType)\n+    public MultiFileConfigurationBuilderProvider(final String configCls,\n+            final String paramCls)\n+            final ConfigurationDeclaration decl) throws ConfigurationException\n+        final ConfigurationBuilder<? extends Configuration> multiBuilder =\n+        final Configuration wrapConfig = createWrapperConfiguration(multiBuilder);\n+            final ConfigurationBuilder builder)\n+        final Class<?> configClass =\n+        final Class ifcClass =\n+            final ConfigurationBuilder<? extends Configuration> multiBuilder,\n+            final Configuration wrapConfig)\n+        public WrapperBuilder(final Configuration conf,\n+                final ConfigurationBuilder<? extends Configuration> bldr)\n+                final EventType<T> eventType, final EventListener<? super T> listener)\n+                final EventType<T> eventType, final EventListener<? super T> listener)\n+        public ReloadableWrapperBuilder(final Configuration conf,\n+                final ConfigurationBuilder<? extends Configuration> bldr)\n+    public MultiWrapDynaBean(final Collection<?> beans)\n+        final Collection<DynaClass> beanClasses =\n+        for (final Object bean : beans)\n+            final DynaBean dynaBean = createDynaBean(bean);\n+            final DynaClass beanClass = dynaBean.getDynaClass();\n+            for (final DynaProperty prop : beanClass.getDynaProperties())\n+    public boolean contains(final String name, final String key)\n+    public Object get(final String name)\n+    public Object get(final String name, final int index)\n+    public Object get(final String name, final String key)\n+    public void remove(final String name, final String key)\n+    public void set(final String name, final Object value)\n+    public void set(final String name, final int index, final Object value)\n+    public void set(final String name, final String key, final Object value)\n+    private DynaBean fetchBean(final String property)\n+    private static DynaBean createDynaBean(final Object bean)\n+    public MultiWrapDynaClass(final Collection<? extends DynaClass> wrappedCls)\n+    public DynaProperty getDynaProperty(final String name)\n+    private void initProperties(final Collection<? extends DynaClass> wrappedCls)\n+        for (final DynaClass cls : wrappedCls)\n+            final DynaProperty[] props = cls.getDynaProperties();\n+            for (final DynaProperty p : props)\n+    public ReloadingCombinedConfigurationBuilder(final Map<String, Object> params,\n+            final boolean allowFailOnInit)\n+    public ReloadingCombinedConfigurationBuilder(final Map<String, Object> params)\n+    public ReloadingCombinedConfigurationBuilder configure(final BuilderParameters... params)\n+        final CombinedConfiguration result = super.getConfiguration();\n+            final BuilderParameters builderParams)\n+    protected void initResultInstance(final CombinedConfiguration result)\n+        final Collection<ReloadingController> subControllers =\n+        final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder =\n+        for (final ConfigurationBuilder<? extends Configuration> b : getChildBuilders())\n+        final CombinedReloadingController ctrl =\n+            final Collection<ReloadingController> subControllers, final Object builder)\n+    public ReloadingMultiFileConfigurationBuilder(final Class<T> resCls,\n+            final Map<String, Object> params, final boolean allowFailOnInit)\n+    public ReloadingMultiFileConfigurationBuilder(final Class<T> resCls,\n+            final Map<String, Object> params)\n+    public ReloadingMultiFileConfigurationBuilder(final Class<T> resCls)\n+            final String fileName, final Map<String, Object> params)\n+        final Set<ReloadingController> empty = Collections.emptySet();\n+                final Collection<FileBasedConfigurationBuilder<T>> builders =\n+                final Collection<ReloadingController> controllers =\n+                for (final FileBasedConfigurationBuilder<T> b : builders)\n+    public Configurations(final Parameters params)\n+            final Class<T> configClass, final File file)\n+            final Class<T> configClass, final URL url)\n+            final Class<T> configClass, final String path)\n+    public <T extends FileBasedConfiguration> T fileBased(final Class<T> configClass,\n+            final File file) throws ConfigurationException\n+    public <T extends FileBasedConfiguration> T fileBased(final Class<T> configClass,\n+            final URL url) throws ConfigurationException\n+    public <T extends FileBasedConfiguration> T fileBased(final Class<T> configClass,\n+            final String path) throws ConfigurationException\n+            final File file)\n+            final URL url)\n+            final String path)\n+    public PropertiesConfiguration properties(final File file)\n+    public PropertiesConfiguration properties(final URL url)\n+    public PropertiesConfiguration properties(final String path)\n+    public FileBasedConfigurationBuilder<XMLConfiguration> xmlBuilder(final File file)\n+    public FileBasedConfigurationBuilder<XMLConfiguration> xmlBuilder(final URL url)\n+            final String path)\n+    public XMLConfiguration xml(final File file) throws ConfigurationException\n+    public XMLConfiguration xml(final URL url) throws ConfigurationException\n+    public XMLConfiguration xml(final String path) throws ConfigurationException\n+    public FileBasedConfigurationBuilder<INIConfiguration> iniBuilder(final File file)\n+    public FileBasedConfigurationBuilder<INIConfiguration> iniBuilder(final URL url)\n+            final String path)\n+    public INIConfiguration ini(final File file) throws ConfigurationException\n+    public INIConfiguration ini(final URL url) throws ConfigurationException\n+    public INIConfiguration ini(final String path) throws ConfigurationException\n+    public CombinedConfigurationBuilder combinedBuilder(final File file)\n+    public CombinedConfigurationBuilder combinedBuilder(final URL url)\n+    public CombinedConfigurationBuilder combinedBuilder(final String path)\n+    public CombinedConfiguration combined(final File file)\n+    public CombinedConfiguration combined(final URL url)\n+    public CombinedConfiguration combined(final String path)\n+            final Class<T> configClass, final FileBasedBuilderParameters params)\n+    private FileBasedBuilderParameters fileParams(final File file)\n+    private FileBasedBuilderParameters fileParams(final URL url)\n+    private FileBasedBuilderParameters fileParams(final String path)\n+    public Parameters(final DefaultParametersManager manager)\n+    public <T> void registerDefaultsHandler(final Class<T> paramsClass,\n+            final DefaultParametersHandler<? super T> handler)\n+    public <T> void registerDefaultsHandler(final Class<T> paramsClass,\n+            final DefaultParametersHandler<? super T> handler, final Class<?> startClass)\n+    private <T> T createParametersProxy(final Object target, final Class<T> ifcClass,\n+            final Class<?>... superIfcs)\n+        final Class<?>[] ifcClasses = new Class<?>[1 + superIfcs.length];\n+        final Object obj =\n+        public ParametersIfcInvocationHandler(final Object targetObj)\n+        public Object invoke(final Object proxy, final Method method, final Object[] args)\n+            final Object result = method.invoke(target, args);\n+        private static boolean isFluentResult(final Method method)\n+            final Class<?> declaringClass = method.getDeclaringClass();\n+    public Iterable<?> parse(final Object value)\n+    public Collection<String> split(final String s, final boolean trim)\n+    public Object escape(final Object value, final ValueTransformer transformer)\n+        final Object escValue =\n+    Collection<?> flatten(final Object value, final int limit)\n+        final Collection<Object> result = new LinkedList<>();\n+    private Collection<?> flatten(final Object value)\n+    private void flattenIterator(final Collection<Object> target, final Iterator<?> it, final int limit)\n+                public Object interpolate(final Object value)\n+        final String fmt = dateFormat;\n+    public void setDateFormat(final String dateFormat)\n+    public <T> T to(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci)\n+        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n+    public Object toArray(final Object src, final Class<?> elemClass,\n+            final ConfigurationInterpolator ci)\n+        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n+    public <T> void toCollection(final Object src, final Class<T> elemClass,\n+            final ConfigurationInterpolator ci, final Collection<T> dest)\n+            final ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n+    protected boolean isComplexObject(final Object src)\n+    protected boolean isEmptyElement(final Object src)\n+    protected <T> T convert(final Object src, final Class<T> targetCls,\n+            final ConfigurationInterpolator ci)\n+        final Object conversionSrc =\n+    protected Collection<?> extractValues(final Object source, final int limit)\n+    protected Collection<?> extractValues(final Object source)\n+    protected Object extractConversionValue(final Object container,\n+            final Class<?> targetCls, final ConfigurationInterpolator ci)\n+        final Collection<?> values = extractValues(container, 1);\n+    protected <T> T convertValue(final Object src, final Class<T> targetCls,\n+            final ConfigurationInterpolator ci)\n+        final\n+    private <T> T[] toObjectArray(final Object src, final Class<T> elemClass,\n+            final ConfigurationInterpolator ci)\n+        final Collection<T> convertedCol = new LinkedList<>();\n+        final\n+    private Object toPrimitiveArray(final Object src, final Class<?> elemClass,\n+            final ConfigurationInterpolator ci)\n+                final int length = Array.getLength(src);\n+                final Object array = Array.newInstance(elemClass, length);\n+        final Collection<?> values = extractValues(src);\n+        final Class<?> targetClass = ClassUtils.primitiveToWrapper(elemClass);\n+        final Object array = Array.newInstance(elemClass, values.size());\n+        for (final Object value : values)\n+    private <T> void convertToCollection(final Object src, final Class<T> elemClass,\n+            final ConfigurationInterpolator ci, final Collection<T> dest)\n+        for (final Object o : extractValues(ci.interpolate(src)))\n+            final ConfigurationInterpolator ci)\n+    public DefaultListDelimiterHandler(final char listDelimiter)\n+    public Object escapeList(final List<?> values, final ValueTransformer transformer)\n+        final Object[] escapedValues = new String[values.size()];\n+        for (final Object v : values)\n+    protected String escapeString(final String s)\n+        final StringBuilder buf = new StringBuilder(s.length() + BUF_SIZE);\n+            final char c = s.charAt(i);\n+    protected Collection<String> splitString(final String s, final boolean trim)\n+        final List<String> list = new LinkedList<>();\n+            final char c = s.charAt(i);\n+    public Object escapeList(final List<?> values, final ValueTransformer transformer)\n+    protected Collection<String> splitString(final String s, final boolean trim)\n+        final Collection<String> result = new ArrayList<>(1);\n+    protected String escapeString(final String s)\n+    public LegacyListDelimiterHandler(final char listDelimiter)\n+    public Object escape(final Object value, final ValueTransformer transformer)\n+    public Object escapeList(final List<?> values, final ValueTransformer transformer)\n+            final Iterator<?> it = values.iterator();\n+            final StringBuilder buf = new StringBuilder(lastValue);\n+    protected Collection<String> splitString(final String s, final boolean trim)\n+        final List<String> list = new ArrayList<>();\n+        final char esc = ESCAPE.charAt(0);\n+            final char c = s.charAt(begin);\n+    protected String escapeString(final String s)\n+    protected String escapeBackslashs(final Object value, final boolean inList)\n+    protected String escapeValue(final Object value, final boolean inList,\n+            final ValueTransformer transformer)\n+    private static int countTrailingBS(final String line)\n+        public Object transformValue(final Object value)\n+    public static Object to(final Class<?> cls, final Object value,\n+            final DefaultConversionHandler convHandler) throws ConversionException\n+    public static Boolean toBoolean(final Object value) throws ConversionException\n+            final Boolean b = BooleanUtils.toBooleanObject((String) value);\n+    public static Character toCharacter(final Object value) throws ConversionException\n+        final String strValue = String.valueOf(value);\n+    public static Byte toByte(final Object value) throws ConversionException\n+        final Number n = toNumber(value, Byte.class);\n+    public static Short toShort(final Object value) throws ConversionException\n+        final Number n = toNumber(value, Short.class);\n+    public static Integer toInteger(final Object value) throws ConversionException\n+        final Number n = toNumber(value, Integer.class);\n+    public static Long toLong(final Object value) throws ConversionException\n+        final Number n = toNumber(value, Long.class);\n+    public static Float toFloat(final Object value) throws ConversionException\n+        final Number n = toNumber(value, Float.class);\n+    public static Double toDouble(final Object value) throws ConversionException\n+        final Number n = toNumber(value, Double.class);\n+    public static BigInteger toBigInteger(final Object value) throws ConversionException\n+        final Number n = toNumber(value, BigInteger.class);\n+    public static BigDecimal toBigDecimal(final Object value) throws ConversionException\n+        final Number n = toNumber(value, BigDecimal.class);\n+    static Number toNumber(final Object value, final Class<?> targetClass) throws ConversionException\n+        final String str = value.toString();\n+            catch (final NumberFormatException nex)\n+            catch (final NumberFormatException nex)\n+            final Constructor<?> constr = targetClass.getConstructor(CONSTR_ARGS);\n+        catch (final InvocationTargetException itex)\n+        catch (final Exception ex)\n+    public static File toFile(final Object value) throws ConversionException\n+    public static Path toPath(final Object value) throws ConversionException\n+    public static URI toURI(final Object value) throws ConversionException\n+            catch (final URISyntaxException e)\n+    public static URL toURL(final Object value) throws ConversionException\n+            catch (final MalformedURLException e)\n+    public static Pattern toPattern(final Object value) throws ConversionException\n+            catch (final PatternSyntaxException e)\n+    public static Locale toLocale(final Object value) throws ConversionException\n+            final String[] elements = ((String) value).split(\"_\");\n+            final int size = elements.length;\n+                final String language = elements[0];\n+                final String country = (size >= 2) ? elements[1] : \"\";\n+                final String variant = (size >= 3) ? elements[2] : \"\";\n+    public static Color toColor(final Object value) throws ConversionException\n+            final int[] components = new int[3];\n+            final int minlength = components.length * 2;\n+            catch (final Exception e)\n+    static InetAddress toInetAddress(final Object value) throws ConversionException\n+            catch (final UnknownHostException e)\n+    static Object toInternetAddress(final Object value) throws ConversionException\n+                final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME)\n+            catch (final Exception e)\n+    static boolean isEnum(final Class<?> cls)\n+    static <E extends Enum<E>> E toEnum(final Object value, final Class<E> cls) throws ConversionException\n+            catch (final Exception e)\n+                final E[] enumConstants = cls.getEnumConstants();\n+            catch (final Exception e)\n+    public static Date toDate(final Object value, final String format) throws ConversionException\n+            catch (final ParseException e)\n+    public static Calendar toCalendar(final Object value, final String format) throws ConversionException\n+            final Calendar calendar = Calendar.getInstance();\n+                final Calendar calendar = Calendar.getInstance();\n+            catch (final ParseException e)\n+    private static Object convertToEnum(final Class<?> enumClass, final Object value)\n+            final EventType<T> eventType)\n+        final List<EventListener<? super T>> result =\n+        for (final EventListener<? super T> l : eventListeners\n+    public void setDetailEvents(final boolean enable)\n+    public <T extends Event> void addEventListener(final EventType<T> eventType,\n+            final EventListener<? super T> listener)\n+            final EventType<T> eventType, final EventListener<? super T> listener)\n+        for (final EventListenerRegistrationData<? extends ConfigurationErrorEvent> reg : eventListeners\n+    public void copyEventListeners(final BaseEventSource source)\n+    protected <T extends ConfigurationEvent> void fireEvent(final EventType<T> type,\n+            final String propName, final Object propValue, final boolean before)\n+            final EventListenerList.EventListenerIterator<T> it =\n+                final ConfigurationEvent event =\n+            final EventType<T> type, final String propName, final Object propValue, final boolean before)\n+            final EventType<T> eventType, final EventType<?> operationType,\n+            final String propertyName, final Object propertyValue, final Throwable cause)\n+        final EventListenerList.EventListenerIterator<T> iterator =\n+            final ConfigurationErrorEvent event =\n+            final EventType<? extends ConfigurationErrorEvent> type,\n+            final EventType<?> opType, final String propName, final Object propValue, final Throwable ex)\n+        final BaseEventSource copy = (BaseEventSource) super.clone();\n+    private boolean checkDetailEvents(final int limit)\n+    public ConfigurationErrorEvent(final Object source,\n+            final EventType<? extends ConfigurationErrorEvent> eventType,\n+            final EventType<?> operationType, final String propName, final Object propValue,\n+            final Throwable cause)\n+    public ConfigurationEvent(final Object source,\n+            final EventType<? extends ConfigurationEvent> type, final String propertyName,\n+            final Object propertyValue, final boolean beforeUpdate)\n+    public Event(final Object source, final EventType<? extends Event> evType)\n+        final StringBuilder buf = new StringBuilder(BUF_SIZE);\n+    protected void appendPropertyRepresentation(final StringBuilder buf,\n+            final String property, final Object value)\n+    public <T extends Event> void addEventListener(final EventType<T> type,\n+            final EventListener<? super T> listener)\n+            final EventListenerRegistrationData<T> regData)\n+            final EventType<T> eventType, final EventListener<? super T> listener)\n+            final EventListenerRegistrationData<T> regData)\n+    public void fire(final Event event)\n+        for (final EventListenerIterator<? extends Event> iterator =\n+            final EventType<T> eventType)\n+            final EventType<T> eventType)\n+        final Map<EventType<?>, Set<EventType<?>>> superTypes =\n+        final List<EventListenerRegistrationData<? extends T>> results =\n+        for (final EventListenerRegistrationData<?> reg : listeners)\n+                final\n+    public void addAll(final EventListenerList c)\n+        for (final EventListenerRegistrationData<?> regData : c.getRegistrations())\n+    private static void callListener(final EventListener<?> listener, final Event event)\n+        final\n+                final Iterator<EventListenerRegistrationData<?>> it, final EventType<T> base)\n+            final EventListener<? super T> result = nextElement;\n+        public void invokeNext(final Event event)\n+                final EventListenerRegistrationData<?> regData =\n+        private void validateEvent(final Event event)\n+        private void invokeNextListenerUnchecked(final Event event)\n+            final EventListener<? super T> listener = next();\n+                final EventListenerRegistrationData<?> regData)\n+            final\n+    public EventListenerRegistrationData(final EventType<T> type,\n+            final EventListener<? super T> lstnr)\n+    public boolean equals(final Object obj)\n+        final EventListenerRegistrationData<?> c =\n+    public EventType(final EventType<? super T> superEventType, final String typeName)\n+    public static Set<EventType<?>> fetchSuperEventTypes(final EventType<?> eventType)\n+        final Set<EventType<?>> types = new HashSet<>();\n+    public static boolean isInstanceOf(final EventType<?> derivedType,\n+            final EventType<?> baseType)\n+    public ConfigurationException(final String message)\n+    public ConfigurationException(final Throwable cause)\n+    public ConfigurationException(final String message, final Throwable cause)\n+    public ConfigurationRuntimeException(final String message)\n+    public ConfigurationRuntimeException(final String message, final Object... args)\n+    public ConfigurationRuntimeException(final Throwable cause)\n+    public ConfigurationRuntimeException(final String message, final Throwable cause)\n+    public ConversionException(final String message)\n+    public ConversionException(final Throwable cause)\n+    public ConversionException(final String message, final Throwable cause)\n+            final InterpolatorSpecification spec)\n+    public void registerLookup(final String prefix, final Lookup lookup)\n+    public void registerLookups(final Map<String, ? extends Lookup> lookups)\n+    public boolean deregisterLookup(final String prefix)\n+    public void addDefaultLookup(final Lookup defaultLookup)\n+    public void addDefaultLookups(final Collection<? extends Lookup> lookups)\n+    public boolean removeDefaultLookup(final Lookup lookup)\n+            final ConfigurationInterpolator parentInterpolator)\n+    public void setEnableSubstitutionInVariables(final boolean f)\n+    public Object interpolate(final Object value)\n+            final String strValue = (String) value;\n+                final Object resolvedValue = resolveSingleVariable(strValue);\n+    public Object resolve(final String var)\n+        final int prefixPos = var.indexOf(PREFIX_SEPARATOR);\n+            final String prefix = var.substring(0, prefixPos);\n+            final String name = var.substring(prefixPos + 1);\n+            final Object value = fetchLookupForPrefix(prefix).lookup(name);\n+        for (final Lookup lookup : defaultLookups)\n+            final Object value = lookup.lookup(var);\n+        final ConfigurationInterpolator parent = getParentInterpolator();\n+    protected Lookup fetchLookupForPrefix(final String prefix)\n+            public String lookup(final String key)\n+                final Object result = resolve(key);\n+    private Object resolveSingleVariable(final String strValue)\n+    private static boolean looksLikeSingleVariable(final String strValue)\n+    private static String extractVariableName(final String strValue)\n+            final InterpolatorSpecification spec)\n+        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n+        final Map<String, Lookup> lookups = new HashMap<>();\n+        for (final DefaultLookups l : DefaultLookups.values())\n+    public Object lookup(final String var)\n+        final int fieldPos = var.lastIndexOf(FIELD_SEPRATOR);\n+            final Object value = resolveField(var.substring(0, fieldPos), var\n+        catch (final Exception ex)\n+    protected Object resolveField(final String className, final String fieldName)\n+        final Class<?> clazz = fetchClass(className);\n+        final Field field = clazz.getField(fieldName);\n+    protected Class<?> fetchClass(final String className) throws ClassNotFoundException\n+    private DefaultLookups(final String prfx, final Lookup look)\n+    public Object lookup(final String variable)\n+    public String lookup(final String key)\n+    public ExprLookup(final Variables list)\n+    public ExprLookup(final Variables list, final String prefix, final String suffix)\n+    public void setVariablePrefixMatcher(final String prefix)\n+    public void setVariableSuffixMatcher(final String suffix)\n+    public void setVariables(final Variables list)\n+    public void setLogger(final ConfigurationLogger logger)\n+    public void setInterpolator(final ConfigurationInterpolator interpolator)\n+    public String lookup(final String var)\n+            final Expression exp = engine.createExpression(result);\n+            final Object exprResult = exp.evaluate(createContext());\n+        catch (final Exception e)\n+            final ConfigurationLogger l = getLogger();\n+            final StringLookup variableResolver = new StringLookup()\n+                public String lookup(final String key)\n+                    final Object value = ip.resolve(key);\n+        final JexlContext ctx = new MapContext();\n+    private void initializeContext(final JexlContext ctx)\n+        for (final Variable var : variables)\n+        public Variables(final Variables vars)\n+        public Variable(final String name, final Object value)\n+        public void setName(final String name)\n+        public void setValue(final Object value) throws ConfigurationRuntimeException\n+                final String val = (String) value;\n+                final String name = StringUtils.removeStartIgnoreCase(val, CLASS);\n+                final Class<?> clazz = ClassUtils.getClass(name);\n+            catch (final Exception e)\n+    private InterpolatorSpecification(final Builder builder)\n+        public Builder withPrefixLookup(final String prefix, final Lookup lookup)\n+        public Builder withPrefixLookups(final Map<String, ? extends Lookup> lookups)\n+                for (final Map.Entry<String, ? extends Lookup> e : lookups.entrySet())\n+        public Builder withDefaultLookup(final Lookup lookup)\n+        public Builder withDefaultLookups(final Collection<? extends Lookup> lookups)\n+                for (final Lookup l : lookups)\n+        public Builder withInterpolator(final ConfigurationInterpolator ci)\n+        public Builder withParentInterpolator(final ConfigurationInterpolator parent)\n+            final InterpolatorSpecification spec =\n+        private static void checkLookup(final Lookup lookup)\n+    public Object lookup(final String variable)\n+    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n+            final File file = new File(locator.getFileName());\n+    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n+            final File file =\n+    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n+            final Collection<? extends FileLocationStrategy> subs)\n+    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n+        for (final FileLocationStrategy sub : getSubStrategies())\n+            final URL url = sub.locate(fileSystem, locator);\n+    public ConfigurationLogger(final String loggerName)\n+    public ConfigurationLogger(final Class<?> logCls)\n+    ConfigurationLogger(final Log wrapped)\n+    public void debug(final String msg)\n+    public void info(final String msg)\n+    public void warn(final String msg)\n+    public void warn(final String msg, final Throwable ex)\n+    public void error(final String msg)\n+    public void error(final String msg, final Throwable ex)\n+    private static Log createLoggerForName(final String name)\n+    private static Log createLoggerForClass(final Class<?> cls)\n+    public InputStream getInputStream(final URL url) throws ConfigurationException\n+        final File file = FileLocatorUtils.fileFromURL(url);\n+        catch (final Exception e)\n+    public OutputStream getOutputStream(final URL url) throws ConfigurationException\n+        final File file = FileLocatorUtils.fileFromURL(url);\n+            final URLConnection connection = url.openConnection();\n+                final HttpURLConnection conn = (HttpURLConnection) connection;\n+        catch (final IOException e)\n+    public OutputStream getOutputStream(final File file) throws ConfigurationException\n+        catch (final FileNotFoundException e)\n+    public String getPath(final File file, final URL url, final String basePath, final String fileName)\n+                catch (final Exception e)\n+    public String getBasePath(final String path)\n+        catch (final Exception e)\n+    public String getFileName(final String path)\n+        catch (final Exception e)\n+    public URL getURL(final String basePath, final String file) throws MalformedURLException\n+        final File f = new File(file);\n+            final URL base = new URL(basePath);\n+        catch (final MalformedURLException uex)\n+    public URL locateFromURL(final String basePath, final String fileName)\n+            final URL baseURL = new URL(basePath);\n+        catch (final IOException e)\n+    private void createPath(final File file) throws ConfigurationException\n+                final File parent = file.getParentFile();\n+        public HttpOutputStream(final OutputStream stream, final HttpURLConnection connection)\n+        public void write(final byte[] bytes) throws IOException\n+        public void write(final byte[] bytes, final int i, final int i1) throws IOException\n+        public void write(final int i) throws IOException\n+                public void unlock(final LockMode mode)\n+                public void setSynchronizer(final Synchronizer sync)\n+                public void lock(final LockMode mode)\n+    public FileHandler(final FileBased obj)\n+    public FileHandler(final FileBased obj, final FileHandler c)\n+    private FileHandler(final FileBased obj, final FileLocator locator)\n+    public static FileHandler fromMap(final Map<String, ?> map)\n+    public void addFileHandlerListener(final FileHandlerListener l)\n+    public void removeFileHandlerListener(final FileHandlerListener l)\n+        final FileLocator locator = getFileLocator();\n+    public void setFileName(final String fileName)\n+            protected void updateBuilder(final FileLocatorBuilder builder)\n+        final FileLocator locator = getFileLocator();\n+    public void setBasePath(final String basePath)\n+            protected void updateBuilder(final FileLocatorBuilder builder)\n+    public void setFile(final File file)\n+            protected void updateBuilder(final FileLocatorBuilder builder)\n+        final FileLocator locator = getFileLocator();\n+        final File file = createFile(locator);\n+    public void setPath(final String path)\n+        final FileLocator locator = getFileLocator();\n+            protected void updateBuilder(final FileLocatorBuilder builder)\n+    public void setFileLocator(final FileLocator locator)\n+            protected void updateBuilder(final FileLocatorBuilder builder)\n+            protected void updateBuilder(final FileLocatorBuilder builder)\n+            protected void updateBuilder(final FileLocatorBuilder builder)\n+            protected void updateBuilder(final FileLocatorBuilder builder)\n+            final FileLocator locator = getFileLocator();\n+    public void load(final String fileName) throws ConfigurationException\n+    public void load(final File file) throws ConfigurationException\n+        catch (final MalformedURLException e1)\n+    public void load(final URL url) throws ConfigurationException\n+    public void load(final InputStream in) throws ConfigurationException\n+    public void load(final InputStream in, final String encoding)\n+    public void load(final Reader in) throws ConfigurationException\n+    public void save(final String fileName) throws ConfigurationException\n+    public void save(final URL url) throws ConfigurationException\n+    public void save(final File file) throws ConfigurationException\n+    public void save(final OutputStream out) throws ConfigurationException\n+    public void save(final OutputStream out, final String encoding)\n+    public void save(final Writer out) throws ConfigurationException\n+            final FileLocator locator = prepareNullLocatorBuilder().create();\n+    private void injectFileLocator(final URL url)\n+                final FileLocator locator =\n+    private void load(final FileLocator locator) throws ConfigurationException\n+        final URL url = FileLocatorUtils.locateOrThrow(locator);\n+    private void load(final URL url, final FileLocator locator) throws ConfigurationException\n+        catch (final ConfigurationException e)\n+        catch (final Exception e)\n+    private void load(final String fileName, final FileLocator locator)\n+        final FileLocator locFileName = createLocatorWithFileName(fileName, locator);\n+        final URL url = FileLocatorUtils.locateOrThrow(locFileName);\n+    private void load(final InputStream in, final FileLocator locator)\n+    private void loadFromStream(final InputStream in, final String encoding, final URL url)\n+        final SynchronizerSupport syncSupport = fetchSynchronizerSupport();\n+    private void loadFromStreamDirectly(final InputStream in)\n+        catch (final IOException e)\n+    private void loadFromTransformedStream(final InputStream in, final String encoding)\n+            catch (final UnsupportedEncodingException e)\n+    private void loadFromReader(final Reader in) throws ConfigurationException\n+        catch (final IOException ioex)\n+    private void save(final FileLocator locator) throws ConfigurationException\n+    private void save(final String fileName, final FileLocator locator)\n+        catch (final MalformedURLException e)\n+    private void save(final URL url, final FileLocator locator) throws ConfigurationException\n+                catch (final IOException e)\n+    private void save(final File file, final FileLocator locator) throws ConfigurationException\n+        catch (final MalformedURLException muex)\n+    private void save(final OutputStream out, final FileLocator locator)\n+    private void saveToStream(final OutputStream out, final String encoding, final URL url)\n+        final SynchronizerSupport syncSupport = fetchSynchronizerSupport();\n+                catch (final UnsupportedEncodingException e)\n+    private void saveToWriter(final Writer out) throws ConfigurationException\n+        catch (final IOException ioex)\n+    private FileLocator createLocatorWithFileName(final String fileName,\n+            final FileLocator locator)\n+        for (final FileHandlerListener l : listeners)\n+        for (final FileHandlerListener l : listeners)\n+        for (final FileHandlerListener l : listeners)\n+        for (final FileHandlerListener l : listeners)\n+        for (final FileHandlerListener l : listeners)\n+    private static void closeSilent(final Closeable cl)\n+        catch (final IOException e)\n+    private static File createFile(final FileLocator loc)\n+    private static FileHandler checkSourceHandler(final FileHandler c)\n+                final FileLocator oldLocator = fileLocator.get();\n+                final FileLocatorBuilder builder =\n+    public void loading(final FileHandler handler)\n+    public void loaded(final FileHandler handler)\n+    public void saving(final FileHandler handler)\n+    public void saved(final FileHandler handler)\n+    public void locationChanged(final FileHandler handler)\n+    public FileLocator(final FileLocatorBuilder builder)\n+    public boolean equals(final Object obj)\n+        final FileLocator c = (FileLocator) obj;\n+        FileLocatorBuilder(final FileLocator src)\n+        public FileLocatorBuilder encoding(final String enc)\n+        public FileLocatorBuilder fileSystem(final FileSystem fs)\n+        public FileLocatorBuilder basePath(final String path)\n+        public FileLocatorBuilder fileName(final String name)\n+        public FileLocatorBuilder sourceURL(final URL url)\n+        public FileLocatorBuilder locationStrategy(final FileLocationStrategy strategy)\n+        private void initBuilder(final FileLocator src)\n+    public static File fileFromURL(final URL url)\n+    public static FileLocator.FileLocatorBuilder fileLocator(final FileLocator src)\n+    public static FileLocator fromMap(final Map<String, ?> map)\n+        final FileLocator.FileLocatorBuilder builder = fileLocator();\n+    public static void put(final FileLocator locator, final Map<String, Object> map)\n+    public static boolean isLocationDefined(final FileLocator locator)\n+    public static boolean isFullyInitialized(final FileLocator locator)\n+    public static FileLocator fullyInitializedLocator(final FileLocator locator)\n+        final URL url = locate(locator);\n+    public static URL locate(final FileLocator locator)\n+    public static URL locateOrThrow(final FileLocator locator)\n+        final URL url = locate(locator);\n+    static String getBasePath(final URL url)\n+    static String getFileName(final URL url)\n+        final String path = url.getPath();\n+    static File getFile(final String basePath, final String fileName)\n+        final File f = new File(fileName);\n+        catch (final MalformedURLException mex1)\n+            catch (final MalformedURLException mex2)\n+    static URL toURL(final File file) throws MalformedURLException\n+    static URL convertURIToURL(final URI uri)\n+        catch (final MalformedURLException e)\n+    static URL convertFileToURL(final File file)\n+    static URL locateFromClasspath(final String resourceName)\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+    static File constructFile(final String basePath, final String fileName)\n+        final File absolute = new File(fileName);\n+    static String appendPath(final String path, final String ext)\n+        final StringBuilder fName = new StringBuilder();\n+    static FileSystem obtainFileSystem(final FileLocator locator)\n+    static FileLocationStrategy obtainLocationStrategy(final FileLocator locator)\n+    private static FileLocator createFullyInitializedLocatorFromURL(final FileLocator src,\n+            final URL url)\n+        final FileLocator.FileLocatorBuilder fileLocatorBuilder = fileLocator(src);\n+        final FileLocationStrategy[] subStrategies =\n+        final ConfigurationLogger result = log;\n+    public void setLogger(final ConfigurationLogger log)\n+    public void setFileOptionsProvider(final FileOptionsProvider provider)\n+    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n+    public HomeDirectoryLocationStrategy(final String homeDir, final boolean withBasePath)\n+    public HomeDirectoryLocationStrategy(final boolean withBasePath)\n+    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n+            final String basePath = fetchBasePath(locator);\n+            final File file =\n+    private String fetchBasePath(final FileLocator locator)\n+    private static String fetchHomeDirectory(final String homeDir)\n+    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n+    public InputStream getInputStream(final URL url) throws ConfigurationException\n+            final FileSystemOptions opts = getOptions(url.getProtocol());\n+            final FileContent content = file.getContent();\n+                final String msg = \"Cannot access content of \" + file.getName().getFriendlyURI();\n+        catch (final FileSystemException fse)\n+            final String msg = \"Unable to access \" + url.toString();\n+    public OutputStream getOutputStream(final URL url) throws ConfigurationException\n+            final FileSystemOptions opts = getOptions(url.getProtocol());\n+            final FileSystemManager fsManager = VFS.getManager();\n+            final FileObject file = (opts == null) ? fsManager.resolveFile(url.toString())\n+            final FileContent content = file.getContent();\n+        catch (final FileSystemException fse)\n+    public String getPath(final File file, final URL url, final String basePath, final String fileName)\n+            final FileSystemManager fsManager = VFS.getManager();\n+                final FileName name = fsManager.resolveURI(url.toString());\n+                final FileName base = fsManager.resolveURI(basePath);\n+                final FileName name = fsManager.resolveURI(fileName);\n+                final FileName base = name.getParent();\n+        catch (final FileSystemException fse)\n+    public String getBasePath(final String path)\n+            final FileSystemManager fsManager = VFS.getManager();\n+            final FileName name = fsManager.resolveURI(path);\n+        catch (final FileSystemException fse)\n+    public String getFileName(final String path)\n+            final FileSystemManager fsManager = VFS.getManager();\n+            final FileName name = fsManager.resolveURI(path);\n+        catch (final FileSystemException fse)\n+    public URL getURL(final String basePath, final String file) throws MalformedURLException\n+            final FileSystemManager fsManager = VFS.getManager();\n+                final FileName base = fsManager.resolveURI(basePath);\n+            final URLStreamHandler handler = new VFSURLStreamHandler(path);\n+        catch (final FileSystemException fse)\n+    public URL locateFromURL(final String basePath, final String fileName)\n+        final String fileScheme = UriParser.extractScheme(fileName);\n+            final FileSystemManager fsManager = VFS.getManager();\n+                final String scheme = UriParser.extractScheme(basePath);\n+                final FileSystemOptions opts = (scheme != null) ? getOptions(scheme) : null;\n+                final FileSystemOptions opts = (fileScheme != null) ? getOptions(fileScheme) : null;\n+            final FileName path = file.getName();\n+            final URLStreamHandler handler = new VFSURLStreamHandler(path);\n+        catch (final FileSystemException fse)\n+        catch (final MalformedURLException ex)\n+    private FileSystemOptions getOptions(final String scheme)\n+        final FileSystemOptions opts = new FileSystemOptions();\n+        catch (final Exception ex)\n+        final FileOptionsProvider provider = getFileOptionsProvider();\n+            final Map<String, Object> map = provider.getOptions();\n+            for (final Map.Entry<String, Object> entry : map.entrySet())\n+                catch (final Exception ex)\n+    private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options,\n+                             final String key, final Object value)\n+        final String methodName = \"set\" + key.substring(0, 1).toUpperCase() + key.substring(1);\n+        final Class<?>[] paramTypes = new Class<?>[2];\n+            final Method method = builder.getClass().getMethod(methodName, paramTypes);\n+            final Object[] params = new Object[2];\n+        catch (final Exception ex)\n+        public VFSURLStreamHandler(final FileName file)\n+        protected URLConnection openConnection(final URL url) throws IOException\n+    public PropertyListConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n+    PropertyListConfiguration(final ImmutableNode root)\n+    protected void setPropertyInternal(final String key, final Object value)\n+    protected void addPropertyInternal(final String key, final Object value)\n+    public void read(final Reader in) throws ConfigurationException\n+        final PropertyListParser parser = new PropertyListParser(in);\n+            final PropertyListConfiguration config = parser.parse();\n+        catch (final ParseException e)\n+    public void write(final Writer out) throws ConfigurationException\n+        final PrintWriter writer = new PrintWriter(out);\n+        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();\n+    private void printNode(final PrintWriter out, final int indentLevel,\n+            final ImmutableNode node, final NodeHandler<ImmutableNode> handler)\n+        final String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n+        final List<ImmutableNode> children = new ArrayList<>(node.getChildren());\n+            final Iterator<ImmutableNode> it = children.iterator();\n+                final ImmutableNode child = it.next();\n+                final Object value = child.getValue();\n+            final Object value = node.getValue();\n+    private void printValue(final PrintWriter out, final int indentLevel, final Object value)\n+        final String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n+            final Iterator<?> it = ((List<?>) value).iterator();\n+            final NodeHandler<ImmutableNode> handler =\n+            final ImmutableConfiguration config = (ImmutableConfiguration) value;\n+            final Iterator<String> it = config.getKeys();\n+                final String key = it.next();\n+                final ImmutableNode node =\n+                final InMemoryNodeModel tempModel = new InMemoryNodeModel(node);\n+            final Map<String, Object> map = transformMap((Map<?, ?>) value);\n+    static Date parseDate(final String s) throws ParseException\n+        final Calendar cal = Calendar.getInstance();\n+        for (final DateComponentParser parser : DATE_PARSERS)\n+    static String formatDate(final Calendar cal)\n+        final StringBuilder buf = new StringBuilder();\n+        for (final DateComponentParser element : DATE_PARSERS)\n+    static String formatDate(final Date date)\n+        final Calendar cal = Calendar.getInstance();\n+    private static Map<String, Object> transformMap(final Map<?, ?> src)\n+        final Map<String, Object> dest = new HashMap<>();\n+        for (final Map.Entry<?, ?> e : src.entrySet())\n+        protected void checkLength(final String s, final int index, final int length)\n+            final int len = (s == null) ? 0 : s.length();\n+        protected void padNum(final StringBuilder buf, final int num, final int length)\n+        public DateFieldParser(final int calFld, final int len)\n+        public DateFieldParser(final int calFld, final int len, final int ofs)\n+        public void formatComponent(final StringBuilder buf, final Calendar cal)\n+        public int parseComponent(final String s, final int index, final Calendar cal)\n+            catch (final NumberFormatException nfex)\n+        public DateSeparatorParser(final String sep)\n+        public void formatComponent(final StringBuilder buf, final Calendar cal)\n+        public int parseComponent(final String s, final int index, final Calendar cal)\n+        public void formatComponent(final StringBuilder buf, final Calendar cal)\n+            final TimeZone tz = cal.getTimeZone();\n+            final int hour = ofs / MINUTES_PER_HOUR;\n+            final int min = ofs % MINUTES_PER_HOUR;\n+        public int parseComponent(final String s, final int index, final Calendar cal)\n+            final TimeZone tz = TimeZone.getTimeZone(TIME_ZONE_PREFIX\n+    public XMLPropertyListConfiguration(final HierarchicalConfiguration<ImmutableNode> configuration)\n+    XMLPropertyListConfiguration(final ImmutableNode root)\n+    protected void setPropertyInternal(final String key, final Object value)\n+    protected void addPropertyInternal(final String key, final Object value)\n+    public void initFileLocator(final FileLocator locator)\n+    public void read(final Reader in) throws ConfigurationException\n+        final EntityResolver resolver = new EntityResolver()\n+            public InputSource resolveEntity(final String publicId, final String systemId)\n+        final XMLPropertyListHandler handler = new XMLPropertyListHandler();\n+            final SAXParserFactory factory = SAXParserFactory.newInstance();\n+            final SAXParser parser = factory.newSAXParser();\n+        catch (final Exception e)\n+    public void write(final Writer out) throws ConfigurationException\n+        final PrintWriter writer = new PrintWriter(out);\n+    private void printNode(final PrintWriter out, final int indentLevel, final ImmutableNode node)\n+        final String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n+        final List<ImmutableNode> children = node.getChildren();\n+            final Iterator<ImmutableNode> it = children.iterator();\n+                final ImmutableNode child = it.next();\n+            final Object value = node.getValue();\n+    private void printValue(final PrintWriter out, final int indentLevel, final Object value)\n+        final String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n+            for (final Object o : (List<?>) value)\n+            final\n+            final ImmutableConfiguration config = (ImmutableConfiguration) value;\n+            final Iterator<String> it = config.getKeys();\n+                final String key = it.next();\n+                final ImmutableNode node =\n+            final Map<String, Object> map = transformMap((Map<?, ?>) value);\n+            catch (final UnsupportedEncodingException e)\n+    private static Map<String, Object> transformMap(final Map<?, ?> src)\n+        final Map<String, Object> dest = new HashMap<>();\n+        for (final Map.Entry<?, ?> e : src.entrySet())\n+            final PListNodeBuilder result = peek();\n+        private void push(final PListNodeBuilder node)\n+        public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException\n+        public void endElement(final String uri, final String localName, final String qName) throws SAXException\n+                final PListNodeBuilder node = new PListNodeBuilder();\n+                final PListNodeBuilder builder = pop();\n+                    final XMLPropertyListConfiguration config = new XMLPropertyListConfiguration(builder.createNode());\n+                    final ArrayNodeBuilder node = (ArrayNodeBuilder) peekNE();\n+                    catch (final IllegalArgumentException iex)\n+                    final ArrayNodeBuilder array = (ArrayNodeBuilder) pop();\n+        public void characters(final char[] ch, final int start, final int length) throws SAXException\n+        public void addValue(final Object v)\n+                final\n+                final List<Object> list = new ArrayList<>();\n+        public void addDateValue(final String value)\n+            catch (final ParseException e)\n+        public void addDataValue(final String value)\n+            catch (final UnsupportedEncodingException e)\n+        public void addIntegerValue(final String value)\n+        public void addRealValue(final String value)\n+        public void addList(final ArrayNodeBuilder node)\n+        public void setName(final String nodeName)\n+        public void addChild(final PListNodeBuilder child)\n+            final ImmutableNode.Builder nodeBuilder =\n+            for (final PListNodeBuilder child : childBuilders)\n+        public void addValue(final Object value)\n+            final Collection<? extends ReloadingController> subCtrls)\n+            final Collection<? extends ReloadingController> subCtrls)\n+        final Collection<ReloadingController> ctrls =\n+        for (final ReloadingController rc : ctrls)\n+        public MultiReloadingControllerDetector(final CombinedReloadingController o)\n+            for (final ReloadingController rc : owner.getSubControllers())\n+            for (final ReloadingController rc : owner.getSubControllers())\n+    public FileHandlerReloadingDetector(final FileHandler handler, final long refreshDelay)\n+    public FileHandlerReloadingDetector(final FileHandler handler)\n+        final long now = System.currentTimeMillis();\n+            final long modified = getLastModificationDate();\n+        final File file = getExistingFile();\n+    protected void updateLastModified(final long time)\n+        final URL url = getFileHandler().getURL();\n+    private static File fileFromURL(final URL url)\n+            final String path = url.getPath();\n+            catch (final MalformedURLException mex)\n+    public PeriodicReloadingTrigger(final ReloadingController ctrl, final Object ctrlParam,\n+            final long triggerPeriod, final TimeUnit unit, final ScheduledExecutorService exec)\n+    public PeriodicReloadingTrigger(final ReloadingController ctrl, final Object ctrlParam,\n+            final long triggerPeriod, final TimeUnit unit)\n+    public void shutdown(final boolean shutdownExecutor)\n+        final ThreadFactory factory =\n+    public ReloadingController(final ReloadingDetector detect)\n+            final EventType<T> eventType, final EventListener<? super T> listener)\n+            final EventType<T> eventType, final EventListener<? super T> listener)\n+    public boolean checkForReloading(final Object data)\n+    public ReloadingEvent(final ReloadingController source, final Object addData)\n+    public VFSFileHandlerReloadingDetector(final FileHandler handler,\n+            final long refreshDelay)\n+    public VFSFileHandlerReloadingDetector(final FileHandler handler)\n+        final FileObject file = getFileObject();\n+        catch (final FileSystemException ex)\n+            final FileSystemManager fsManager = VFS.getManager();\n+            final String uri = resolveFileURI();\n+        catch (final FileSystemException fse)\n+            final String msg = \"Unable to monitor \" + getFileHandler().getURL().toString();\n+        final FileSystem fs = getFileHandler().getFileSystem();\n+        final String uri =\n+    public void setCatalogFiles(final String catalogs)\n+    public void setFileSystem(final FileSystem fileSystem)\n+    public void setBaseDir(final String baseDir)\n+    public void setInterpolator(final ConfigurationInterpolator ci)\n+    public void setDebug(final boolean debug)\n+    public InputSource resolveEntity(final String publicId, final String systemId)\n+            final String badFilePrefix = \"file://\";\n+            final String correctFilePrefix = \"file:///\";\n+                final URL url = locate(fs, null, resolved);\n+                final InputStream is = fs.getInputStream(url);\n+                final InputSource iSource = new InputSource(resolved);\n+            catch (final Exception e)\n+    public void setLogger(final ConfigurationLogger log)\n+    private void initLogger(final ConfigurationLogger log)\n+    private static URL locate(final FileSystem fs, final String basePath, final String name)\n+        final FileLocator locator =\n+        public void setFileSystem(final FileSystem fileSystem)\n+        public void setBaseDir(final String baseDir)\n+        public void setInterpolator(final ConfigurationInterpolator ci)\n+                catch (final Exception ex)\n+            final String base = ((CatalogManager) catalogManager).getBaseDir();\n+            final\n+                    final String fileName = catalogs.elementAt(count);\n+                    catch (final ConfigurationException ce)\n+                        final String name = url.toString();\n+                        final String mimeType = fileNameMap.getContentTypeFor(fileName);\n+                        catch (final Exception ex)\n+        public void parseCatalog(final String baseDir, final String fileName) throws IOException\n+                final CatalogReader reader = (CatalogReader) readerArr.get(count);\n+                catch (final Exception ex)\n+                catch (final CatalogException ce)\n+                    catch (final IOException ioe)\n+        protected String normalizeURI(final String uriref)\n+            final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();\n+            final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;\n+    public void registerEntityId(final String publicId, final URL entityURL)\n+    public InputSource resolveEntity(final String publicId, final String systemId)\n+                final URLConnection connection = entityURL.openConnection();\n+                final InputStream stream = connection.getInputStream();\n+                final InputSource source = new InputSource(stream);\n+            catch (final IOException e)\n+    public ConfigurationPropertiesFactoryBean(final Configuration configuration)\n+            for (final Configuration configuration : configurations)\n+            for (final Resource location : locations)\n+                final URL url = location.getURL();\n+                final Configuration props = new Configurations().properties(url);\n+    public void setConfigurations(final Configuration[] configurations)\n+    public void setLocations(final Resource[] locations)\n+    public void setThrowExceptionOnMissing(final boolean throwExceptionOnMissing)\n+    private static <T> T[] defensiveCopy(final T[] src)\n+    public ConfigurationPropertySource(final String name, final Configuration source)\n+    protected ConfigurationPropertySource(final String name)\n+    public Object getProperty(final String name)\n+    public ReadWriteSynchronizer(final ReadWriteLock l)\n+    public String nodeName(final ImmutableNode node)\n+    public Object getValue(final ImmutableNode node)\n+    public List<ImmutableNode> getChildren(final ImmutableNode node)\n+    public <C> int getMatchingChildrenCount(final ImmutableNode node,\n+            final NodeMatcher<C> matcher, final C criterion)\n+    public <C> List<ImmutableNode> getMatchingChildren(final ImmutableNode node,\n+            final NodeMatcher<C> matcher, final C criterion)\n+        final List<ImmutableNode> result =\n+        for (final ImmutableNode c : node.getChildren())\n+    public List<ImmutableNode> getChildren(final ImmutableNode node, final String name)\n+    public ImmutableNode getChild(final ImmutableNode node, final int index)\n+    public int indexOfChild(final ImmutableNode parent, final ImmutableNode child)\n+    public int getChildrenCount(final ImmutableNode node, final String name)\n+    public Set<String> getAttributes(final ImmutableNode node)\n+    public boolean hasAttributes(final ImmutableNode node)\n+    public Object getAttributeValue(final ImmutableNode node, final String name)\n+    public boolean isDefined(final ImmutableNode node)\n+    static boolean checkIfNodeDefined(final ImmutableNode node)\n+    public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n+    public void visitAfterChildren(final T node, final NodeHandler<T> handler)\n+    public DefaultConfigurationKey(final DefaultExpressionEngine engine)\n+    public DefaultConfigurationKey(final DefaultExpressionEngine engine, final String key)\n+    public DefaultConfigurationKey append(final String property, final boolean escape)\n+    public DefaultConfigurationKey append(final String property)\n+    public DefaultConfigurationKey appendIndex(final int index)\n+    public DefaultConfigurationKey appendAttribute(final String attr)\n+    public void setLength(final int len)\n+    public DefaultConfigurationKey commonKey(final DefaultConfigurationKey other)\n+        final DefaultConfigurationKey result = new DefaultConfigurationKey(getExpressionEngine());\n+        final KeyIterator it1 = iterator();\n+        final KeyIterator it2 = other.iterator();\n+    public DefaultConfigurationKey differenceKey(final DefaultConfigurationKey other)\n+        final DefaultConfigurationKey common = commonKey(other);\n+        final DefaultConfigurationKey result = new DefaultConfigurationKey(getExpressionEngine());\n+            final String k = other.toString().substring(common.length());\n+    public boolean equals(final Object obj)\n+        final DefaultConfigurationKey c = (DefaultConfigurationKey) obj;\n+    public boolean isAttributeKey(final String key)\n+    public String constructAttributeKey(final String key)\n+        final StringBuilder buf = new StringBuilder();\n+    public String attributeName(final String key)\n+    public String trimLeft(final String key)\n+    public String trimRight(final String key)\n+    public String trim(final String key)\n+    private boolean hasTrailingDelimiter(final String key)\n+    private boolean hasLeadingDelimiter(final String key)\n+    private String removeAttributeMarkers(final String key)\n+    private String unescapeDelimiters(final String key)\n+    private String escapeDelimiters(final String key)\n+    private static boolean partsEqual(final KeyIterator it1, final KeyIterator it2)\n+        public String nextKey(final boolean decorated)\n+            final String key = findNextIndices();\n+        public String currentKey(final boolean decorated)\n+            catch (final CloneNotSupportedException cex)\n+        private int nextDelimiterPos(final String key, final int pos, final int endPos)\n+                final int escapePos = escapedPosition(key, delimiterPos);\n+        private int escapedPosition(final String key, final int pos)\n+            final int escapeOffset = escapeOffset();\n+            final int escapePos = key.indexOf(getSymbols()\n+        private boolean checkAttribute(final String key)\n+        private boolean checkIndex(final String key)\n+                final int idx = key.lastIndexOf(getSymbols().getIndexStart());\n+                    final int endidx = key.indexOf(getSymbols().getIndexEnd(),\n+            catch (final NumberFormatException nfe)\n+    public DefaultExpressionEngine(final DefaultExpressionEngineSymbols syms)\n+    public DefaultExpressionEngine(final DefaultExpressionEngineSymbols syms,\n+            final NodeMatcher<String> nodeNameMatcher)\n+    public <T> List<QueryResult<T>> query(final T root, final String key,\n+            final NodeHandler<T> handler)\n+        final List<QueryResult<T>> results = new LinkedList<>();\n+    public <T> String nodeKey(final T node, final String parentKey, final NodeHandler<T> handler)\n+        final DefaultConfigurationKey key = new DefaultConfigurationKey(this,\n+    public String attributeKey(final String parentKey, final String attributeName)\n+        final DefaultConfigurationKey key =\n+    public <T> String canonicalKey(final T node, final String parentKey,\n+            final NodeHandler<T> handler)\n+        final String nodeName = handler.nodeName(node);\n+        final T parent = handler.getParent(node);\n+        final DefaultConfigurationKey key =\n+    public <T> NodeAddData<T> prepareAdd(final T root, final String key, final NodeHandler<T> handler)\n+        final DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(\n+        final T parent = findLastPathNode(it, root, handler);\n+        final List<String> pathNodes = new LinkedList<>();\n+            final DefaultConfigurationKey.KeyIterator keyPart, final T node,\n+            final Collection<QueryResult<T>> results, final NodeHandler<T> handler)\n+            final String key = keyPart.nextKey(false);\n+    protected <T> T findLastPathNode(final DefaultConfigurationKey.KeyIterator keyIt,\n+            final T node, final NodeHandler<T> handler)\n+        final String keyPart = keyIt.nextKey(false);\n+            final int idx =\n+    private <T> void processSubNodes(final DefaultConfigurationKey.KeyIterator keyPart,\n+            final List<T> subNodes, final Collection<QueryResult<T>> nodes, final NodeHandler<T> handler)\n+            for (final T node : subNodes)\n+    private <T> int determineIndex(final T node, final T parent, final String nodeName,\n+                                          final NodeHandler<T> handler)\n+    private <T> List<T> findChildNodesByName(final NodeHandler<T> handler, final T parent,\n+            final String nodeName)\n+    private DefaultExpressionEngineSymbols(final Builder b)\n+    public boolean equals(final Object obj)\n+        final DefaultExpressionEngineSymbols c = (DefaultExpressionEngineSymbols) obj;\n+        public Builder(final DefaultExpressionEngineSymbols c)\n+        public Builder setPropertyDelimiter(final String d)\n+        public Builder setEscapedDelimiter(final String ed)\n+        public Builder setIndexStart(final String is)\n+        public Builder setIndexEnd(final String ie)\n+        public Builder setAttributeStart(final String as)\n+        public Builder setAttributeEnd(final String ae)\n+    private ImmutableNode(final Builder b)\n+    public ImmutableNode setName(final String name)\n+    public ImmutableNode setValue(final Object newValue)\n+    public ImmutableNode addChild(final ImmutableNode child)\n+        final Builder builder = new Builder(children.size() + 1, attributes);\n+    public ImmutableNode removeChild(final ImmutableNode child)\n+        final Builder builder = new Builder(children.size(), attributes);\n+        for (final ImmutableNode c : children)\n+    public ImmutableNode replaceChild(final ImmutableNode oldChild,\n+            final ImmutableNode newChild)\n+        final Builder builder = new Builder(children.size(), attributes);\n+        for (final ImmutableNode c : children)\n+    public ImmutableNode replaceChildren(final Collection<ImmutableNode> newChildren)\n+        final Builder builder = new Builder(null, attributes);\n+    public ImmutableNode setAttribute(final String name, final Object value)\n+        final Map<String, Object> newAttrs = new HashMap<>(attributes);\n+    public ImmutableNode setAttributes(final Map<String, ?> newAttributes)\n+        final Map<String, Object> newAttrs = new HashMap<>(attributes);\n+    public ImmutableNode removeAttribute(final String name)\n+        final Map<String, Object> newAttrs = new HashMap<>(attributes);\n+    private ImmutableNode createWithBasicProperties(final Builder builder)\n+    private ImmutableNode createWithNewAttributes(final Map<String, Object> newAttrs)\n+    private static void checkChildNode(final ImmutableNode child)\n+        public Builder(final int childCount)\n+        private Builder(final List<ImmutableNode> dirChildren,\n+                final Map<String, Object> dirAttrs)\n+        private Builder(final int childCount, final Map<String, Object> dirAttrs)\n+        public Builder name(final String n)\n+        public Builder value(final Object v)\n+        public Builder addChild(final ImmutableNode c)\n+        public Builder addChildren(final Collection<? extends ImmutableNode> children)\n+        public Builder addAttribute(final String name, final Object value)\n+        public Builder addAttributes(final Map<String, ?> attrs)\n+            final ImmutableNode newNode = new ImmutableNode(this);\n+        private void initChildrenCollection(final int childCount)\n+                final Collection<? extends ImmutableNode> children)\n+            final List<ImmutableNode> result =\n+            for (final ImmutableNode c : children)\n+    public InMemoryNodeModel(final ImmutableNode root)\n+    public void addProperty(final String key, final Iterable<?> values,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public void addProperty(final String key, final NodeSelector selector,\n+                public boolean initTransaction(final ModelTransaction tx)\n+    public void addNodes(final String key, final Collection<? extends ImmutableNode> nodes,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public void addNodes(final String key, final NodeSelector selector,\n+                public boolean initTransaction(final ModelTransaction tx)\n+                    final List<QueryResult<ImmutableNode>> results =\n+                        final NodeAddData<ImmutableNode> addData =\n+                        final ImmutableNode newNode =\n+    public void setProperty(final String key, final Object value,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public void setProperty(final String key, final NodeSelector selector,\n+            public boolean initTransaction(final ModelTransaction tx)\n+                final NodeUpdateData<ImmutableNode> updateData =\n+                final boolean cleared =\n+                final boolean updated =\n+    public List<QueryResult<ImmutableNode>> clearTree(final String key,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+            final NodeSelector selector, final NodeKeyResolver<ImmutableNode> resolver)\n+            public boolean initTransaction(final ModelTransaction tx)\n+                final TreeData currentStructure = tx.getCurrentData();\n+                final List<QueryResult<ImmutableNode>> results = resolver.resolveKey(\n+                for (final QueryResult<ImmutableNode> result : results)\n+    public void clearProperty(final String key,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public void clearProperty(final String key, final NodeSelector selector,\n+            public boolean initTransaction(final ModelTransaction tx)\n+                final List<QueryResult<ImmutableNode>> results =\n+    public void clear(final NodeKeyResolver<ImmutableNode> resolver)\n+        final ImmutableNode newRoot =\n+    public void setRootNode(final ImmutableNode newRoot)\n+    public void replaceRoot(final ImmutableNode newRoot,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+        final TreeData current = structure.get();\n+        final TreeData temp =\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+            public boolean initTransaction(final ModelTransaction tx)\n+                final TreeData current = tx.getCurrentData();\n+                final String newRootName =\n+    public void trackNode(final NodeSelector selector,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+            final TreeData current = structure.get();\n+            final NodeTracker newTracker =\n+    public Collection<NodeSelector> selectAndTrackNodes(final String key,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+        final Mutable<Collection<NodeSelector>> refSelectors =\n+            final TreeData current = structure.get();\n+            final List<ImmutableNode> nodes =\n+    public Collection<NodeSelector> trackChildNodes(final String key,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+        final Mutable<Collection<NodeSelector>> refSelectors =\n+            final TreeData current = structure.get();\n+            final List<ImmutableNode> nodes =\n+                final ImmutableNode node = nodes.get(0);\n+    public NodeSelector trackChildNodeWithCreation(final String key,\n+            final String childName, final NodeKeyResolver<ImmutableNode> resolver)\n+        final MutableObject<NodeSelector> refSelector =\n+            final TreeData current = structure.get();\n+            final List<ImmutableNode> nodes =\n+            final ImmutableNode parent = nodes.get(0);\n+            final TreeData newData =\n+    public ImmutableNode getTrackedNode(final NodeSelector selector)\n+    public void replaceTrackedNode(final NodeSelector selector, final ImmutableNode newNode)\n+            final TreeData currentData = structure.get();\n+            final NodeSelector selector)\n+        final TreeData currentData = structure.get();\n+        final InMemoryNodeModel detachedNodeModel =\n+    public boolean isTrackedNodeDetached(final NodeSelector selector)\n+    public void untrackNode(final NodeSelector selector)\n+            final TreeData current = structure.get();\n+            final NodeTracker newTracker =\n+            final ImmutableNode root)\n+                    public void visitBeforeChildren(final ImmutableNode node,\n+                            final NodeHandler<ImmutableNode> handler)\n+                        for (final ImmutableNode c : node.getChildren())\n+    static boolean checkIfNodeDefined(final ImmutableNode node)\n+    private void initializeAddTransaction(final ModelTransaction tx, final String key,\n+            final Iterable<?> values, final NodeKeyResolver<ImmutableNode> resolver)\n+        final NodeAddData<ImmutableNode> addData =\n+    private TreeData createTreeData(final ImmutableNode root, final TreeData current)\n+        final NodeTracker newTracker =\n+    private TreeData createTreeDataForRootAndTracker(final ImmutableNode root,\n+            final NodeTracker newTracker)\n+    private static void addNodeProperty(final ModelTransaction tx,\n+            final NodeAddData<ImmutableNode> addData, final Iterable<?> values)\n+        final Collection<ImmutableNode> newNodes =\n+    private static void addNodesByAddData(final ModelTransaction tx,\n+            final NodeAddData<ImmutableNode> addData,\n+            final Collection<ImmutableNode> newNodes)\n+            final ImmutableNode newChild = createNodeToAddWithPath(addData, newNodes);\n+    private static void addAttributeProperty(final ModelTransaction tx,\n+            final NodeAddData<ImmutableNode> addData, final Iterable<?> values)\n+            final int pathNodeCount = addData.getPathNodes().size();\n+            final ImmutableNode childWithAttribute =\n+            final ImmutableNode newChild =\n+            final String newNodeName, final Iterable<?> values)\n+        final Collection<ImmutableNode> nodes = new LinkedList<>();\n+        for (final Object value : values)\n+            final NodeAddData<ImmutableNode> addData,\n+            final Collection<ImmutableNode> newNodes)\n+    private static ImmutableNode createNodeOnPath(final Iterator<String> it,\n+            final Collection<ImmutableNode> newNodes)\n+        final String nodeName = it.next();\n+    private static boolean initializeClearTransaction(final ModelTransaction tx,\n+            final Collection<QueryResult<ImmutableNode>> results)\n+        for (final QueryResult<ImmutableNode> result : results)\n+    private static boolean initializeUpdateTransaction(final ModelTransaction tx,\n+            final Map<QueryResult<ImmutableNode>, Object> changedValues)\n+        for (final Map.Entry<QueryResult<ImmutableNode>, Object> e : changedValues\n+    private static ImmutableNode initialRootNode(final ImmutableNode providedRoot)\n+    private static String determineRootName(final ImmutableNode rootNode,\n+            final ImmutableNode node, final String rootName)\n+            final ImmutableNode root)\n+        final Map<ImmutableNode, ImmutableNode> parents =\n+    private void updateModel(final TransactionInitializer txInit,\n+            final NodeSelector selector, final NodeKeyResolver<ImmutableNode> resolver)\n+            final TreeData currentData = getTreeData();\n+            final TransactionInitializer txInit, final NodeSelector selector,\n+            final TreeData currentData, final NodeKeyResolver<ImmutableNode> resolver)\n+        final ModelTransaction tx =\n+            final TreeData newData = tx.execute();\n+            final TransactionInitializer txInit, final NodeSelector selector,\n+            final TreeData currentData, final NodeKeyResolver<ImmutableNode> resolver)\n+            final InMemoryNodeModel detachedNodeModel =\n+    private boolean replaceDetachedTrackedNode(final TreeData currentData,\n+            final NodeSelector selector, final ImmutableNode newNode)\n+        final InMemoryNodeModel detachedNodeModel =\n+    private boolean replaceActiveTrackedNode(final TreeData currentData,\n+            final NodeSelector selector, final ImmutableNode newNode)\n+        final NodeTracker newTracker =\n+            final Mutable<Collection<NodeSelector>> refSelectors,\n+            final List<ImmutableNode> nodes, final TreeData current,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+        final List<NodeSelector> selectors =\n+        final Map<ImmutableNode, String> cache = new HashMap<>();\n+        for (final ImmutableNode node : nodes)\n+        final NodeTracker newTracker =\n+    private static TreeData updateDataWithNewTrackedNode(final TreeData current,\n+            final ImmutableNode node, final NodeKeyResolver<ImmutableNode> resolver,\n+            final MutableObject<NodeSelector> refSelector)\n+        final NodeSelector selector =\n+        final NodeTracker newTracker =\n+    private static TreeData createDataWithTrackedChildNode(final TreeData current,\n+            final ImmutableNode parent, final String childName,\n+            final NodeKeyResolver<ImmutableNode> resolver,\n+            final MutableObject<NodeSelector> refSelector)\n+        final List<ImmutableNode> namedChildren =\n+            final ImmutableNode child =\n+            final ModelTransaction tx = new ModelTransaction(current, null, resolver);\n+    private static boolean valuesNotEmpty(final Iterable<?> values)\n+    private static RuntimeException attributeKeyException(final String key)\n+    public ImmutableNode combine(final ImmutableNode node1, final ImmutableNode node2)\n+        final ImmutableNode.Builder result = new ImmutableNode.Builder();\n+        final List<ImmutableNode> children2 = new LinkedList<>(node2.getChildren());\n+        for (final ImmutableNode child1 : node1.getChildren())\n+            final ImmutableNode child2 = canCombine(node2, child1, children2);\n+        for (final ImmutableNode c : children2)\n+    protected void addAttributes(final ImmutableNode.Builder result, final ImmutableNode node1,\n+            final ImmutableNode node2)\n+        final Map<String, Object> attributes = new HashMap<>();\n+        for (final Map.Entry<String, Object> e : node2.getAttributes().entrySet())\n+    protected ImmutableNode canCombine(final ImmutableNode node2,\n+            final ImmutableNode child, final List<ImmutableNode> children2)\n+        final Map<String, Object> attrs1 = child.getAttributes();\n+        final List<ImmutableNode> nodes = new ArrayList<>();\n+        final List<ImmutableNode> children =\n+        for (final ImmutableNode node : children)\n+            for (final ImmutableNode node : nodes)\n+    private static boolean matchAttributes(final Map<String, Object> attrs1,\n+            final ImmutableNode node)\n+        final Map<String, Object> attrs2 = node.getAttributes();\n+        for (final Map.Entry<String, Object> e : attrs1.entrySet())\n+    public ModelTransaction(final TreeData treeData, final NodeSelector selector,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public void addAddNodesOperation(final ImmutableNode parent,\n+            final Collection<? extends ImmutableNode> newNodes)\n+        final ChildrenUpdateOperation op = new ChildrenUpdateOperation();\n+    public void addAddNodeOperation(final ImmutableNode parent, final ImmutableNode newChild)\n+        final ChildrenUpdateOperation op = new ChildrenUpdateOperation();\n+    public void addAttributeOperation(final ImmutableNode target, final String name,\n+            final Object value)\n+    public void addAttributesOperation(final ImmutableNode target,\n+            final Map<String, Object> attributes)\n+    public void addRemoveNodeOperation(final ImmutableNode parent, final ImmutableNode node)\n+        final ChildrenUpdateOperation op = new ChildrenUpdateOperation();\n+    public void addRemoveAttributeOperation(final ImmutableNode target, final String name)\n+    public void addClearNodeValueOperation(final ImmutableNode target)\n+    public void addChangeNodeValueOperation(final ImmutableNode target,\n+            final Object newValue)\n+    public void addChangeNodeNameOperation(final ImmutableNode target, final String newName)\n+    public void addNewReferences(final Map<ImmutableNode, ?> refs)\n+    public void addNewReference(final ImmutableNode node, final Object ref)\n+    ImmutableNode getParent(final ImmutableNode node)\n+    Operations fetchOperations(final ImmutableNode target, final int level)\n+        final Integer nodeLevel =\n+    private ImmutableNode initQueryRoot(final TreeData treeData, final NodeSelector selector)\n+    private int level(final ImmutableNode node)\n+            final Integer level = operations.lastKey(); // start down in hierarchy\n+            final Map<ImmutableNode, Operations> levelOps = operations.remove(level);\n+            for (final Map.Entry<ImmutableNode, Operations> e : levelOps.entrySet())\n+        for (final ImmutableNode node : addedNodes)\n+        for (final ImmutableNode node : removedNodes)\n+    private void removeNodesFromParentAndReplacementMapping(final ImmutableNode root)\n+                    public void visitBeforeChildren(final ImmutableNode node,\n+                            final NodeHandler<ImmutableNode> handler)\n+    private void removeNodeFromReplacementMapping(final ImmutableNode node)\n+    private static <E> Collection<E> concatenate(final Collection<E> col1,\n+            final Collection<? extends E> col2)\n+        final Collection<E> result =\n+    private static <E> Set<E> concatenate(final Set<E> set1, final Set<? extends E> set2)\n+        final Set<E> result = (set1 != null) ? set1 : new HashSet<>();\n+    private static <K, V> Map<K, V> concatenate(final Map<K, V> map1,\n+            final Map<? extends K, ? extends V> map2)\n+        final Map<K, V> result = (map1 != null) ? map1 : new HashMap<>();\n+    private static <E> Collection<E> append(final Collection<E> col, final E node)\n+        final Collection<E> result = (col != null) ? col : new LinkedList<>();\n+    private static <E> Set<E> append(final Set<E> col, final E elem)\n+        final Set<E> result = (col != null) ? col : new HashSet<>();\n+    private static <K, V> Map<K, V> append(final Map<K, V> map, final K key, final V value)\n+        final Map<K, V> result = (map != null) ? map : new HashMap<>();\n+        public void combine(final ChildrenUpdateOperation op)\n+        public void addNewNode(final ImmutableNode node)\n+        public void addNewNodes(final Collection<? extends ImmutableNode> nodes)\n+        public void addNodeToReplace(final ImmutableNode org,\n+                final ImmutableNode replacement)\n+        public void addNodeToRemove(final ImmutableNode node)\n+        protected ImmutableNode apply(final ImmutableNode target,\n+                final Operations operations)\n+            final Map<ImmutableNode, ImmutableNode> replacements =\n+            final Set<ImmutableNode> removals = fetchRemovalSet();\n+            final List<ImmutableNode> resultNodes = new LinkedList<>();\n+            for (final ImmutableNode nd : target.getChildren())\n+                final ImmutableNode repl = replacements.get(nd);\n+        public AddAttributeOperation(final String name, final Object value)\n+        protected ImmutableNode apply(final ImmutableNode target,\n+                final Operations operations)\n+        public AddAttributesOperation(final Map<String, Object> attrs)\n+        protected ImmutableNode apply(final ImmutableNode target,\n+                final Operations operations)\n+        public RemoveAttributeOperation(final String name)\n+        protected ImmutableNode apply(final ImmutableNode target,\n+                final Operations operations)\n+        public ChangeNodeValueOperation(final Object value)\n+        protected ImmutableNode apply(final ImmutableNode target,\n+                final Operations operations)\n+        public ChangeNodeNameOperation(final String name)\n+        protected ImmutableNode apply(final ImmutableNode target,\n+                final Operations operations)\n+        public void addChildrenOperation(final ChildrenUpdateOperation co)\n+        public void addOperation(final Operation op)\n+        public void newNodesAdded(final Collection<ImmutableNode> newNodes)\n+        public void apply(final ImmutableNode target, final int level)\n+                for (final Operation op : operations)\n+        private void propagateChange(final ImmutableNode target, final ImmutableNode node,\n+                final int level)\n+            final ImmutableNode parent = getParent(target);\n+            final ChildrenUpdateOperation co = new ChildrenUpdateOperation();\n+        private void handleAddedNodes(final ImmutableNode node)\n+                for (final ImmutableNode child : addedNodesInOperation)\n+    public NodeAddData(final T parentNode, final String newName, final boolean isAttr,\n+            final Collection<String> intermediateNodes)\n+            final Collection<String> intermediateNodes)\n+    public void addListNode(final String nodeName)\n+    public boolean isListNode(final ImmutableNode node)\n+            public ImmutableNode getParent(final ImmutableNode node)\n+    public String nodeName(final T node)\n+    public Object getValue(final T node)\n+    public T getParent(final T node)\n+    public List<T> getChildren(final T node)\n+    public <C> List<T> getMatchingChildren(final T node, final NodeMatcher<C> matcher,\n+            final C criterion)\n+    public <C> int getMatchingChildrenCount(final T node, final NodeMatcher<C> matcher,\n+            final C criterion)\n+    public List<T> getChildren(final T node, final String name)\n+    public T getChild(final T node, final int index)\n+    public int indexOfChild(final T parent, final T child)\n+    public int getChildrenCount(final T node, final String name)\n+    public Set<String> getAttributes(final T node)\n+    public boolean hasAttributes(final T node)\n+    public Object getAttributeValue(final T node, final String name)\n+    public boolean isDefined(final T node)\n+        public <T> boolean matches(final T node, final NodeHandler<T> handler,\n+                final String criterion)\n+        public <T> boolean matches(final T node, final NodeHandler<T> handler,\n+                final String criterion)\n+    public NodeSelector(final String key)\n+    private NodeSelector(final List<String> keys)\n+    public ImmutableNode select(final ImmutableNode root,\n+            final NodeKeyResolver<ImmutableNode> resolver,\n+            final NodeHandler<ImmutableNode> handler)\n+        final Iterator<String> itKeys = nodeKeys.iterator();\n+            final String currentKey = itKeys.next();\n+            final List<ImmutableNode> currentResults =\n+            for (final ImmutableNode currentRoot : nodes)\n+    public NodeSelector subSelector(final String subKey)\n+        final List<String> keys = new ArrayList<>(nodeKeys.size() + 1);\n+    public boolean equals(final Object obj)\n+        final NodeSelector c = (NodeSelector) obj;\n+    private void getFilteredResults(final ImmutableNode root,\n+            final NodeKeyResolver<ImmutableNode> resolver,\n+            final NodeHandler<ImmutableNode> handler, final String key,\n+            final List<ImmutableNode> nodes)\n+        final List<QueryResult<ImmutableNode>> results =\n+        for (final QueryResult<ImmutableNode> result : results)\n+    private NodeTracker(final Map<NodeSelector, TrackedNodeData> map)\n+    public NodeTracker trackNode(final ImmutableNode root, final NodeSelector selector,\n+            final NodeKeyResolver<ImmutableNode> resolver,\n+            final NodeHandler<ImmutableNode> handler)\n+        final Map<NodeSelector, TrackedNodeData> newState =\n+        final TrackedNodeData trackData = newState.get(selector);\n+    public NodeTracker trackNodes(final Collection<NodeSelector> selectors,\n+            final Collection<ImmutableNode> nodes)\n+        final Map<NodeSelector, TrackedNodeData> newState =\n+        final Iterator<ImmutableNode> itNodes = nodes.iterator();\n+        for (final NodeSelector selector : selectors)\n+            final ImmutableNode node = itNodes.next();\n+    public NodeTracker untrackNode(final NodeSelector selector)\n+        final TrackedNodeData trackData = getTrackedNodeData(selector);\n+        final Map<NodeSelector, TrackedNodeData> newState =\n+        final TrackedNodeData newTrackData = trackData.observerRemoved();\n+    public ImmutableNode getTrackedNode(final NodeSelector selector)\n+    public boolean isTrackedNodeDetached(final NodeSelector selector)\n+    public InMemoryNodeModel getDetachedNodeModel(final NodeSelector selector)\n+    public NodeTracker update(final ImmutableNode root, final NodeSelector txTarget,\n+            final NodeKeyResolver<ImmutableNode> resolver,\n+            final NodeHandler<ImmutableNode> handler)\n+        final Map<NodeSelector, TrackedNodeData> newState =\n+        for (final Map.Entry<NodeSelector, TrackedNodeData> e : trackedNodes\n+        final Map<NodeSelector, TrackedNodeData> newState =\n+        for (final Map.Entry<NodeSelector, TrackedNodeData> e : trackedNodes\n+            final TrackedNodeData newData =\n+    public NodeTracker replaceAndDetachTrackedNode(final NodeSelector selector,\n+            final ImmutableNode newNode)\n+        final Map<NodeSelector, TrackedNodeData> newState =\n+    private TrackedNodeData getTrackedNodeData(final NodeSelector selector)\n+        final TrackedNodeData trackData = trackedNodes.get(selector);\n+            final ImmutableNode root, final NodeSelector txTarget,\n+            final NodeKeyResolver<ImmutableNode> resolver,\n+            final NodeHandler<ImmutableNode> handler,\n+            final Map.Entry<NodeSelector, TrackedNodeData> e)\n+        catch (final Exception ex)\n+            final NodeSelector txTarget, final Map.Entry<NodeSelector, TrackedNodeData> e)\n+        final ImmutableNode newNode =\n+    private static ImmutableNode createEmptyTrackedNode(final TrackedNodeData data)\n+            final ImmutableNode root, final NodeSelector selector,\n+            final NodeKeyResolver<ImmutableNode> resolver,\n+            final NodeHandler<ImmutableNode> handler, final TrackedNodeData trackData)\n+        final ImmutableNode target = selector.select(root, resolver, handler);\n+        public TrackedNodeData(final ImmutableNode nd)\n+        private TrackedNodeData(final ImmutableNode nd, final int obsCount,\n+                final InMemoryNodeModel detachedNodeModel)\n+        public TrackedNodeData updateNode(final ImmutableNode newNode)\n+        public TrackedNodeData detach(final ImmutableNode newNode)\n+            final ImmutableNode newTrackedNode =\n+    public <T> void walkDFS(final T root, final ConfigurationNodeVisitor<T> visitor,\n+            final NodeHandler<T> handler)\n+    public <T> void walkBFS(final T root, final ConfigurationNodeVisitor<T> visitor,\n+            final NodeHandler<T> handler)\n+    private static <T> void dfs(final T node, final ConfigurationNodeVisitor<T> visitor,\n+            final NodeHandler<T> handler)\n+            for (final T c : handler.getChildren(node))\n+    private static <T> void bfs(final T root, final ConfigurationNodeVisitor<T> visitor,\n+            final NodeHandler<T> handler)\n+        final List<T> pendingNodes = new LinkedList<>();\n+            final T node = pendingNodes.remove(0);\n+            for (final T c : handler.getChildren(node))\n+    private static <T> boolean checkParameters(final T root,\n+            final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler)\n+    public NodeUpdateData(final Map<QueryResult<T>, Object> changedValues,\n+            final Collection<Object> newValues,\n+            final Collection<QueryResult<T>> removedNodes, final String key)\n+    private static <K, V> Map<K, V> copyMap(final Map<? extends K, ? extends V> map)\n+    private static <T> Collection<T> copyCollection(final Collection<? extends T> col)\n+    public ImmutableNode combine(final ImmutableNode node1,\n+            final ImmutableNode node2)\n+        final ImmutableNode.Builder result = new ImmutableNode.Builder();\n+        for (final ImmutableNode child : node1.getChildren())\n+            final ImmutableNode child2 = canCombine(node1, node2, child);\n+        for (final ImmutableNode child : node2.getChildren())\n+    protected void addAttributes(final ImmutableNode.Builder result,\n+            final ImmutableNode node1, final ImmutableNode node2)\n+        for (final String attr : node2.getAttributes().keySet())\n+    protected ImmutableNode canCombine(final ImmutableNode node1,\n+            final ImmutableNode node2, final ImmutableNode child)\n+    private QueryResult(final T nd, final String attr)\n+    public static <T> QueryResult<T> createNodeResult(final T resultNode)\n+    public static <T> QueryResult<T> createAttributeResult(final T parentNode,\n+                                                           final String attrName)\n+    public Object getAttributeValue(final NodeHandler<T> handler)\n+    public boolean equals(final Object obj)\n+        final QueryResult<?> c = (QueryResult<?>) obj;\n+        final ToStringBuilder sb = new ToStringBuilder(this);\n+    private ReferenceTracker(final Map<ImmutableNode, Object> refs,\n+            final List<Object> removedRefs)\n+    public ReferenceTracker addReferences(final Map<ImmutableNode, ?> refs)\n+        final Map<ImmutableNode, Object> newRefs =\n+            final Map<ImmutableNode, ImmutableNode> replacedNodes,\n+            final Collection<ImmutableNode> removedNodes)\n+            for (final Map.Entry<ImmutableNode, ImmutableNode> e : replacedNodes\n+                final Object ref = references.get(e.getKey());\n+            for (final ImmutableNode node : removedNodes)\n+                final Object ref = references.get(node);\n+    public Object getReference(final ImmutableNode node)\n+    public TrackedNodeHandler(final ImmutableNode root,\n+            final NodeHandler<ImmutableNode> handler)\n+    public ImmutableNode getParent(final ImmutableNode node)\n+    public TrackedNodeModel(final InMemoryNodeModelSupport modelSupport, final NodeSelector sel,\n+            final boolean untrackOnFinalize)\n+    public void setRootNode(final ImmutableNode newRoot)\n+    public void addProperty(final String key, final Iterable<?> values,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public void addNodes(final String key, final Collection<? extends ImmutableNode> nodes,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public void setProperty(final String key, final Object value,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public List<QueryResult<ImmutableNode>> clearTree(final String key,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public void clearProperty(final String key,\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+    public void clear(final NodeKeyResolver<ImmutableNode> resolver)\n+    public TreeData(final ImmutableNode root,\n+            final Map<ImmutableNode, ImmutableNode> parentMapping,\n+            final Map<ImmutableNode, ImmutableNode> replacements,\n+            final NodeTracker tracker, final ReferenceTracker refTracker)\n+    public ImmutableNode getParent(final ImmutableNode node)\n+        final ImmutableNode org = handleReplacements(node, inverseReplacementMapping);\n+        final ImmutableNode parent = parentMapping.get(org);\n+    public TreeData updateNodeTracker(final NodeTracker newTracker)\n+    public TreeData updateReferenceTracker(final ReferenceTracker newTracker)\n+    public Object getReference(final ImmutableNode node)\n+    private static ImmutableNode handleReplacements(final ImmutableNode replace,\n+            final Map<ImmutableNode, ImmutableNode> mapping)\n+            final Map<ImmutableNode, ImmutableNode> replacements)\n+        final Map<ImmutableNode, ImmutableNode> inverseMapping =\n+        for (final Map.Entry<ImmutableNode, ImmutableNode> e : replacements\n+    public static void printTree(final PrintStream stream, final ImmutableNode result)\n+    private static void printTree(final PrintStream stream, final String indent, final ImmutableNode result)\n+        final StringBuilder buffer = new StringBuilder(indent).append(\"<\").append(result.getNodeName());\n+        for (final Map.Entry<String, Object> e : result.getAttributes().entrySet())\n+            for (final ImmutableNode child : result.getChildren())\n+    public ImmutableNode combine(final ImmutableNode node1,\n+            final ImmutableNode node2)\n+        final ImmutableNode.Builder result = new ImmutableNode.Builder();\n+        final List<ImmutableNode> children2 = new LinkedList<>(node2.getChildren());\n+        for (final ImmutableNode child1 : node1.getChildren())\n+            final ImmutableNode child2 = findCombineNode(node1, node2, child1\n+        for (final ImmutableNode c : children2)\n+    protected ImmutableNode findCombineNode(final ImmutableNode node1,\n+            final ImmutableNode node2, final ImmutableNode child)\n+            final ImmutableNode child2 =\n+    public ConfigurationAttributePointer(final ConfigurationNodePointer<T> parent,\n+            final String attrName)\n+        final\n+    public int compareChildNodePointers(final NodePointer p1, final NodePointer p2)\n+    public void setValue(final Object value)\n+    public boolean testNode(final NodeTest test)\n+            final ConfigurationNodePointer<T> parent, final QName name)\n+    protected NodePointer createNodePointer(final int position)\n+            final ConfigurationNodePointer<T> parent, final QName name)\n+        final List<String> result = new ArrayList<>();\n+            final Set<String> names =\n+            final String prefix =\n+            for (final String n : names)\n+    private void addAttributeData(final ConfigurationNodePointer<T> parent,\n+            final List<String> result, final String name)\n+    protected ConfigurationNodeIteratorBase(final ConfigurationNodePointer<T> parent,\n+            final boolean reverse)\n+    public boolean setPosition(final int pos)\n+    protected void setStartOffset(final int startOffset)\n+    protected int positionToIndex(final int pos)\n+    protected static String prefixName(final String prefix, final String name)\n+    protected static String qualifiedName(final QName name)\n+            final ConfigurationNodePointer<T> parent, final NodeTest nodeTest,\n+            final boolean reverse, final ConfigurationNodePointer<T> startsWith)\n+        final T root = parent.getConfigurationNode();\n+    protected NodePointer createNodePointer(final int position)\n+    private List<T> createSubNodeList(final T node, final NodeTest test)\n+            final NodeNameTest nameTest = (NodeNameTest) test;\n+            final QName name = nameTest.getNodeName();\n+            final NodeTypeTest typeTest = (NodeTypeTest) test;\n+    private List<T> createSubNodeListForName(final T node, final QName name)\n+        final String compareName = qualifiedName(name);\n+        final List<T> result = new ArrayList<>();\n+        for (final T child : getNodeHandler().getChildren(node))\n+    private List<T> createSubNodeListForWildcardName(final T node, final QName name)\n+        final List<T> children = getNodeHandler().getChildren(node);\n+        final List<T> prefixChildren = new ArrayList<>(children.size());\n+        final String prefix = prefixName(name.getPrefix(), null);\n+        for (final T child : children)\n+    private int findStartIndex(final List<T> children, final T startNode)\n+        for (final T child : children)\n+    public ConfigurationNodePointer(final T node, final Locale locale,\n+            final NodeHandler<T> handler)\n+    public ConfigurationNodePointer(final ConfigurationNodePointer<T> parent, final T node,\n+            final NodeHandler<T> handler)\n+    public void setValue(final Object value)\n+    public int compareChildNodePointers(final NodePointer pointer1,\n+            final NodePointer pointer2)\n+        final Object node1 = pointer1.getBaseValue();\n+        final Object node2 = pointer2.getBaseValue();\n+        for (final T child : getNodeHandler().getChildren(node))\n+    public NodeIterator attributeIterator(final QName name)\n+    public NodeIterator childIterator(final NodeTest test, final boolean reverse,\n+            final NodePointer startWith)\n+    public boolean testNode(final NodeTest test)\n+    private ConfigurationNodePointer<T> castPointer(final NodePointer p)\n+        final\n+    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale)\n+            final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;\n+    public NodePointer createNodePointer(final NodePointer parent, final QName name,\n+            final Object bean)\n+            final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;\n+    public static <T> Object wrapNode(final T node, final NodeHandler<T> handler)\n+        public NodeWrapper(final T nd, final NodeHandler<T> handler)\n+    public <T> JXPathContext createContext(final T root, final NodeHandler<T> handler)\n+        final JXPathContext context =\n+    XPathExpressionEngine(final XPathContextFactory factory)\n+    public <T> List<QueryResult<T>> query(final T root, final String key,\n+            final NodeHandler<T> handler)\n+            final QueryResult<T> result = createResult(root);\n+        final JXPathContext context = createContext(root, handler);\n+    public <T> String nodeKey(final T node, final String parentKey, final NodeHandler<T> handler)\n+            final StringBuilder buf =\n+    public String attributeKey(final String parentKey, final String attributeName)\n+        final StringBuilder buf =\n+    public <T> String canonicalKey(final T node, final String parentKey,\n+            final NodeHandler<T> handler)\n+        final T parent = handler.getParent(node);\n+        final StringBuilder buf = new StringBuilder(BUF_SIZE);\n+    public <T> NodeAddData<T> prepareAdd(final T root, final String key,\n+            final NodeHandler<T> handler)\n+        final List<QueryResult<T>> nodes =\n+    private <T> JXPathContext createContext(final T root, final NodeHandler<T> handler)\n+    <T> NodeAddData<T> createNodeAddData(final String path,\n+            final QueryResult<T> parentNodeResult)\n+        final List<String> pathNodes = new LinkedList<>();\n+        final StringTokenizer tok =\n+            final String token = tok.nextToken();\n+    private <T> String generateKeyForAdd(final T root, final String key,\n+            final NodeHandler<T> handler)\n+            final String keyExisting = key.substring(0, pos);\n+                final StringBuilder buf = new StringBuilder(key.length() + 1);\n+    private static <T> int determineIndex(final T parent, final T child,\n+            final NodeHandler<T> handler)\n+    private static void invalidPath(final String path, final String msg)\n+    private static int findKeySeparator(final String key)\n+    private static <T> List<QueryResult<T>> convertResults(final List<?> results)\n+        final List<QueryResult<T>> queryResults =\n+        for (final Object res : results)\n+            final QueryResult<T> queryResult = createResult(res);\n+    private static <T> QueryResult<T> createResult(final Object resObj)\n+    public AppletConfiguration(final Applet applet)\n+    protected Object getPropertyInternal(final String key)\n+        final String[][] paramsInfo = applet.getParameterInfo();\n+        final String[] keys = new String[paramsInfo != null ? paramsInfo.length : 0];\n+    protected boolean containsKeyInternal(final String key)\n+    protected void clearPropertyDirect(final String key)\n+    protected void addPropertyDirect(final String key, final Object obj)\n+            final Collection<String> values =\n+    public ServletConfiguration(final Servlet servlet)\n+    public ServletConfiguration(final ServletConfig config)\n+    protected Object getPropertyInternal(final String key)\n+        final Enumeration<String> en = config.getInitParameterNames();\n+    public ServletContextConfiguration(final Servlet servlet)\n+    public ServletContextConfiguration(final ServletContext context)\n+    protected Object getPropertyInternal(final String key)\n+        final Enumeration<String> en = context.getInitParameterNames();\n+    public ServletFilterConfiguration(final FilterConfig config)\n+    protected Object getPropertyInternal(final String key)\n+        final Enumeration<String> en = config.getInitParameterNames();\n+    public ServletRequestConfiguration(final ServletRequest request)\n+    protected Object getPropertyInternal(final String key)\n+        final String[] values = request.getParameterValues(key);\n+            final List<Object> result = new ArrayList<>(values.length);\n+            for (final String value : values)\n+                final Object val = handleDelimiters(value);\n+        final Map<String, ?> parameterMap = request.getParameterMap();\n+        final boolean booleanValue = conf.getBoolean(\"test.boolean\");\n+        final byte testValue = 10;\n+        final byte byteValue = conf.getByte(\"test.byte\");\n+        final double testValue = 10.25;\n+        final double doubleValue = conf.getDouble(\"test.double\");\n+        final float testValue = (float) 20.25;\n+        final float floatValue = conf.getFloat(\"test.float\");\n+        final int intValue = conf.getInt(\"test.integer\");\n+        final long longValue = conf.getLong(\"test.long\");\n+        final short shortValue = conf.getShort(\"test.short\");\n+    public static void assertConfigurationEquals(final ImmutableConfiguration expected, final ImmutableConfiguration actual)\n+        for (final Iterator<String> it = expected.getKeys(); it.hasNext();)\n+            final String key = it.next();\n+        for (final Iterator<String> it = actual.getKeys(); it.hasNext();)\n+            final String key = it.next();\n+    public static File getTestFile(final String name)\n+    public static File getOutFile(final String name)\n+    public static URL getTestURL(final String name)\n+    public static URL getOutURL(final String name)\n+    public static void checkEquals(final Object o1, final Object o2, final boolean expEquals)\n+    public static List<String> keysToList(final ImmutableConfiguration config)\n+        final List<String> keyList = new LinkedList<>();\n+    public static Set<String> keysToSet(final ImmutableConfiguration config)\n+        final Set<String> keySet = new HashSet<>();\n+    public static void appendKeys(final ImmutableConfiguration config,\n+            final Collection<String> collection)\n+        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n+    private static URL urlFromFile(final File file)\n+        catch (final MalformedURLException mex)\n+    public void setAutoCommit(final boolean autoCommit)\n+        final File script = ConfigurationAssert.getTestFile(\"testdb.script\");\n+    public DatabaseBuilderParameters setUpMultiParameters(final String configName)\n+    public <T extends DatabaseConfiguration> T createConfig(final Class<T> configCls,\n+            final DatabaseBuilderParameters params) throws ConfigurationException\n+    public <T extends DatabaseConfiguration> T setUpConfig(final Class<T> configCls)\n+            final Class<T> configCls, final String configName)\n+            catch (final Exception ex)\n+        final BasicDataSource ds = new BasicDataSource();\n+        final Connection conn = ds.getConnection();\n+        final IDatabaseConnection connection = new DatabaseConnection(conn);\n+        final IDataSet dataSet = new XmlDataSet(new FileInputStream(\n+    protected URLConnection openConnection(final URL u) throws IOException\n+    public static void testGetInterpolator(final AbstractConfiguration config)\n+        final ConfigurationInterpolator interpol = config.getInterpolator();\n+            public Object lookup(final String varName)\n+            final AbstractConfiguration config)\n+        final Configuration c = config.interpolatedConfiguration();\n+        final List<?> lst = (List<?>) c.getProperty(\"inttest.list\");\n+    public static void testInterpolation(final Configuration config)\n+        final String unInterpolatedValue = \"${applicationRoot2}/db/hypersonic\";\n+        final String dbProp = \"/home/applicationRoot/db/hypersonic\";\n+        final String[] arrayInt = config.getStringArray(\"arrayInt\");\n+    public static void testInterpolationConstants(final Configuration config)\n+    public static void testInterpolationEnvironment(final Configuration config)\n+        final Map<String, String> env = System.getenv();\n+        for (final Map.Entry<String, String> e : env.entrySet())\n+        for (final Map.Entry<String, String> e : env.entrySet())\n+    public static void testInterpolationEscaped(final Configuration config)\n+    public static void testInterpolationLoop(final Configuration config)\n+        catch (final IllegalStateException e)\n+    public static void testInterpolationSubset(final Configuration config)\n+        final Configuration subset = config.subset(\"test\");\n+    public static void testInterpolationSystemProperties(final Configuration config)\n+        final String[] sysProperties =\n+    public static void testInterpolationUnknownProperty(final Configuration config)\n+    public static void testMultipleInterpolation(final Configuration config)\n+        final String expectedValue = \"/base-level/first-level/second-level/third-level\";\n+        catch (final Exception ex)\n+        final String level = System.getProperty(\"LogLevel\");\n+            final org.apache.log4j.Logger log = org.apache.log4j.Logger.getRootLogger();\n+            final Appender appender = new ConsoleAppender(new PatternLayout(\"%p %l - %m%n\"), ConsoleAppender.SYSTEM_OUT);\n+    public Logging(final String name)\n+    public Logging(final org.apache.log4j.Logger logger)\n+    public void trace(final Object message)\n+    public void trace(final Object message, final Throwable t)\n+    public void debug(final Object message)\n+    public void debug(final Object message, final Throwable t)\n+    public void info(final Object message)\n+    public void info(final Object message, final Throwable t)\n+    public void warn(final Object message)\n+    public void warn(final Object message, final Throwable t)\n+    public void error(final Object message)\n+    public void error(final Object message, final Throwable t)\n+    public void fatal(final Object message)\n+    public void fatal(final Object message, final Throwable t)\n+    public Context getInitialContext(@SuppressWarnings(\"rawtypes\") final Hashtable env) throws NamingException\n+        final boolean useCycles = env.containsKey(PROP_CYCLES);\n+        final Mock mockTopCtx = createCtxMock(PREFIX);\n+        final Mock mockCycleCtx = createCtxMock(\"\");\n+        final Mock mockPrfxCtx = createCtxMock(\"\");\n+        final Mock mockBaseCtx = new Mock(Context.class);\n+            final Mock mockEnum = createEnumMock(mockCycleCtx, PROP_NAMES,\n+    private Mock createCtxMock(final String prefix)\n+        final Mock mockCtx = new Mock(Context.class);\n+            final String errProp = (prefix.length() > 0) ? PROP_NAMES[i] : PREFIX\n+        for (final String element : MISSING_NAMES) {\n+    private void bind(final Mock mockCtx, final String name, final String value)\n+    private void bindError(final Mock mockCtx, final String name)\n+    private Mock createEnumMock(final Mock mockCtx, final String[] names, final Object[] values,\n+            final boolean close)\n+        final Mock mockEnum = new Mock(NamingEnumeration.class);\n+    private Mock createEnumMock(final Mock mockCtx, final String[] names, final Object[] values)\n+    private void addEnumPair(final Mock mockEnum, final String name, final Object value)\n+        final NameClassPair ncp = new NameClassPair(name, value.getClass().getName());\n+    private void closeEnum(final Mock mockEnum)\n+    protected void addPropertyDirect(final String key, final Object value)\n+    protected boolean containsKeyInternal(final String key)\n+    protected Object getPropertyInternal(final String key)\n+    protected void clearPropertyDirect(final String key)\n+    public void setConfiguration(final Configuration configuration)\n+        final boolean booleanValue = configuration.getBoolean(\"test.boolean\");\n+        final boolean booleanValue = configuration.getBoolean(\"test.boolean.missing\", true);\n+        final Boolean booleanObject = configuration.getBoolean(\"test.boolean.missing\", new Boolean(true));\n+        final byte testValue = 10;\n+        final byte byteValue = configuration.getByte(\"test.byte\");\n+        final double testValue = 10.25;\n+        final double doubleValue = configuration.getDouble(\"test.double\");\n+        final double testValue = 10.25;\n+        final double doubleValue = configuration.getDouble(\"test.double.missing\", 10.25);\n+        final float testValue = (float) 20.25;\n+        final float floatValue = configuration.getFloat(\"test.float\");\n+        final float testValue = (float) 20.25;\n+        final float floatValue = configuration.getFloat(\"test.float.missing\", testValue);\n+        final int intValue = configuration.getInt(\"test.integer\");\n+        final int intValue = configuration.getInt(\"test.integer.missing\", 10);\n+        final long longValue = configuration.getLong(\"test.long\");\n+        final long longValue = configuration.getLong(\"test.long.missing\", 1000000);\n+        final short shortValue = configuration.getShort(\"test.short\");\n+        final short shortValue = configuration.getShort(\"test.short.missing\", (short) 1);\n+        final List<?> list = configuration.getList(\"missing.list\");\n+        final Configuration subset = configuration.subset(\"test\");\n+        final Iterator<String> it = subset.getKeys();\n+            final String key = it.next();\n+    public void verify(final Methods... expMethods)\n+    public void verifyStart(final Methods... expMethods)\n+    public void verifyEnd(final Methods... expMethods)\n+    public void verifyContains(final Methods... expMethods)\n+    private String constructExpectedMethods(final Methods... expMethods)\n+        final StringBuilder buf = new StringBuilder();\n+        for (final Methods m : expMethods)\n+    private void append(final Methods m)\n+        final Configuration config = getConfiguration();\n+        final Configuration config = getConfiguration();\n+        final List<?> list = config.getList(\"list\");\n+        final AbstractConfiguration config = getConfiguration();\n+        final List<Object> list = config.getList(\"key3\");\n+        final List<Object> expected = new ArrayList<>();\n+        final Configuration config = getConfiguration();\n+        final Configuration config = getConfiguration();\n+        final Configuration config = getConfiguration();\n+        final Configuration config = getConfiguration();\n+        final Iterator<String> keys = config.getKeys();\n+        final List<String> expectedKeys = new ArrayList<>();\n+        final List<String> actualKeys = new ArrayList<>();\n+        final AbstractConfiguration config = getEmptyConfiguration();\n+        final ConfigurationLogger log = new ConfigurationLogger(config.getClass());\n+        final Configuration config = getConfiguration();\n+        catch (final ConversionException cex)\n+        final AbstractConfiguration config = new TestConfigurationImpl(\n+                final Collection<String> keyCol = new ArrayList<>();\n+                final String[] keys = keyCol.toArray(new String[keyCol.size()]);\n+        final AbstractConfiguration config = new TestConfigurationImpl(\n+        final AbstractConfiguration config = new TestConfigurationImpl(\n+    private void checkAddListProperty(final AbstractConfiguration config)\n+        final Object[] lstValues1 = new Object[]\n+        final Object[] lstValues2 = new Object[]\n+        final List<Object> lst = config.getList(\"test\");\n+        final AbstractConfiguration config = setUpDestConfig();\n+        final Configuration srcConfig = setUpSourceConfig();\n+            final String key = KEY_PREFIX + i;\n+        final Configuration srcConfig = setUpSourceConfig();\n+        final AbstractConfiguration config = setUpDestConfig();\n+        final AbstractConfiguration config = setUpDestConfig();\n+        final Configuration srcConfig = setUpSourceConfig();\n+        final CollectingConfigurationListener l = new CollectingConfigurationListener();\n+        final AbstractConfiguration config = setUpDestConfig();\n+        final BaseConfiguration srcConfig = new BaseConfiguration();\n+        final BaseConfiguration dstConfig = new BaseConfiguration();\n+        final AbstractConfiguration config = setUpDestConfig();\n+        final Configuration srcConfig = setUpSourceConfig();\n+            final String key = KEY_PREFIX + i;\n+                final List<Object> values = config.getList(key);\n+        final AbstractConfiguration config = setUpDestConfig();\n+        final AbstractConfiguration config = setUpDestConfig();\n+        final Configuration srcConfig = setUpSourceConfig();\n+        final CollectingConfigurationListener l = new CollectingConfigurationListener();\n+        final AbstractConfiguration config = setUpDestConfig();\n+        final BaseConfiguration srcConfig = new BaseConfiguration();\n+        final BaseConfiguration dstConfig = new BaseConfiguration();\n+        final AbstractConfiguration config = new TestConfigurationImpl(\n+        final Lookup look = EasyMock.createMock(Lookup.class);\n+        final AbstractConfiguration config =\n+        final int count = config.getInterpolator().getLookups().size();\n+        final Map<String, Lookup> lookups = new HashMap<>();\n+        final Map<String, Lookup> lookups2 = config.getInterpolator().getLookups();\n+        final Lookup look = EasyMock.createMock(Lookup.class);\n+        final AbstractConfiguration config =\n+        final Map<String, Lookup> lookups = config.getInterpolator().getLookups();\n+        final Lookup look = EasyMock.createMock(Lookup.class);\n+        final AbstractConfiguration config =\n+        final List<Lookup> lookups = config.getInterpolator().getDefaultLookups();\n+        final Lookup look = EasyMock.createMock(Lookup.class);\n+        final AbstractConfiguration config =\n+        final List<Lookup> lookups = config.getInterpolator().getDefaultLookups();\n+        final AbstractConfiguration config =\n+        final List<Lookup> defLookups = config.getInterpolator().getDefaultLookups();\n+        final ConfigurationInterpolator parent =\n+        final AbstractConfiguration config =\n+        final ConfigurationInterpolator ci = config.getInterpolator();\n+        final ConfigurationInterpolator parent =\n+        final AbstractConfiguration config =\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final String[] values = {\"some\", \"test\", \"values\"};\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final List<String> values = Arrays.asList(\"some\", \"test\", \"values\");\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final String[] array = config.getStringArray(KEY_PREFIX);\n+    private void checkGetListScalar(final Object value)\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final List<Object> lst = config.getList(KEY_PREFIX);\n+    private void checkGetStringArrayScalar(final Object value)\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final String[] array = config.getStringArray(KEY_PREFIX);\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config2 = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final ConversionHandler handler = new DefaultConversionHandler();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final Integer value = 20130816;\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final Integer defaultValue = 2121;\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final Integer defaultValue = 2121;\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final Integer[] expected = new Integer[PROP_COUNT];\n+        final Integer[] result = config.get(Integer[].class, KEY_PREFIX);\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final short[] expected = new short[PROP_COUNT];\n+        final short[] result =\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final int[] defValue = {\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+    private static List<Integer> prepareListTest(final PropertiesConfiguration config)\n+        final List<Integer> expected = new ArrayList<>(PROP_COUNT);\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final List<Integer> expected = prepareListTest(config);\n+        final List<Integer> result = config.getList(Integer.class, KEY_PREFIX);\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final List<Integer> defValue = Arrays.asList(1, 2, 3);\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final List<Integer> expected = prepareListTest(config);\n+        final List<Integer> result = new ArrayList<>(PROP_COUNT);\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final List<Integer> expected = prepareListTest(config);\n+        final Collection<Integer> result = config.getCollection(Integer.class, KEY_PREFIX, null, new ArrayList<Integer>());\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final List<Integer> result = new ArrayList<>(1);\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final List<Integer> result = new ArrayList<>();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final List<Integer> defValue = Arrays.asList(1, 2, 4, 8, 16, 32);\n+        final Collection<Integer> result = config.getCollection(Integer.class, KEY_PREFIX, null, defValue);\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final ConfigurationDecoder decoder =\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final ConfigurationDecoder decoder =\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final ConfigurationDecoder decoder =\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final AbstractConfiguration config =\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final AbstractConfiguration config = new TestConfigurationImpl(\n+    private void checkListProperties(final Configuration config)\n+    private void checkCopyEvents(final CollectingConfigurationListener l,\n+            final Configuration src, final EventType<?> eventType)\n+        final Map<String, ConfigurationEvent> events = new HashMap<>();\n+        for (final ConfigurationEvent e : l.events)\n+        for (final Iterator<String> it = src.getKeys(); it.hasNext();)\n+            final String key = it.next();\n+        public TestConfigurationImpl(final AbstractConfiguration wrappedConfig)\n+        protected void addPropertyDirect(final String key, final Object value)\n+        protected boolean containsKeyInternal(final String key)\n+        protected Object getPropertyInternal(final String key)\n+        protected void clearPropertyDirect(final String key)\n+        public void onEvent(final ConfigurationEvent event)\n+        final PropertiesConfiguration c = new PropertiesConfiguration();\n+        final AbstractConfiguration subset =\n+        final Configuration config2 = EasyMock.createStrictMock(Configuration.class);\n+        final Configuration config2 = prepareConfigurationMockForCopy();\n+        final Configuration config2 = prepareConfigurationMockForCopy();\n+        final ImmutableNode root =\n+        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder(1);\n+        final ImmutableNode.Builder nodeBuilder = new ImmutableNode.Builder(1);\n+    private static void checkGetProperty(final AbstractHierarchicalConfiguration<?> testConfig)\n+            final String name = config.getString(\"indexList.index(\" + idx\n+            final String name = config.getString(\"indexList.index(\" + idx\n+        final List<String> keys = new ArrayList<>();\n+        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n+        final Iterator<String> it = config.getKeys(\"order\");\n+        final Set<String> keys = new HashSet<>();\n+        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n+        final Iterator<String> itKeys = config.getKeys(\"tables.table[@type]\");\n+        final Iterator<String> it = config.getKeys(\"order.key1\");\n+        final Iterator<String> it = config.getKeys(\"order.key1\");\n+        final List<?> list = (List<?>) prop;\n+        final DefaultConfigurationKey key = createConfigurationKey();\n+        final int maxIdx = config.getMaxIndex(\"tables.table(0).fields.field.name\");\n+            final DefaultConfigurationKey key =\n+        final Configuration copy = (Configuration) config.clone();\n+        final EventListener<ConfigurationEvent> l = new EventListenerTestImpl(null);\n+        final AbstractHierarchicalConfiguration<?> copy =\n+        final Configuration clone = (Configuration) config.clone();\n+        final Collection<ImmutableNode> nodes = new ArrayList<>();\n+        final Collection<ImmutableNode> nodes = new ArrayList<>();\n+        final ImmutableNode newNode =\n+        final Collection<ImmutableNode> nodes = new ArrayList<>();\n+        final AbstractHierarchicalConfigurationTestImpl configDest =\n+        final Collection<ImmutableNode> nodes = getRootNode().getChildren();\n+            final String keyTab = \"newNodes.tables.table(\" + i + \").\";\n+        final Configuration sub = config.subset(\"test.absolute.dir\");\n+        final Configuration sub1 = config.subset(\"prop2\");\n+        final Configuration sub2 = sub1.subset(\"prop\");\n+        final AbstractHierarchicalConfiguration<?> c = (AbstractHierarchicalConfiguration<?>) InterpolationTestHelper\n+        final BaseHierarchicalConfiguration copy =\n+        final List<ImmutableNode> nodes =\n+        final String attrKey = \"tables.table(0)[@type]\";\n+        final Map<ImmutableNode, String> cache = new HashMap<>();\n+        final ImmutableNode nodeTabName =\n+        final ImmutableNode nodeFldName =\n+        final Map<ImmutableNode, String> cache = new HashMap<>();\n+        final ImmutableNode nodeTabName =\n+        final NodeHandler<ImmutableNode> handler = config.getModel().getNodeHandler();\n+        final Map<ImmutableNode, String> cache = new HashMap<>();\n+        final ImmutableNode nodeTabName =\n+        final NodeHandler<ImmutableNode> handler = config.getModel().getNodeHandler();\n+        final Map<ImmutableNode, String> cache = new HashMap<>();\n+        final Map<ImmutableNode, String> cache = new HashMap<>();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final NodeModel<ImmutableNode> model = config.getNodeModel();\n+        final ImmutableNode rootNode = model.getNodeHandler().getRootNode();\n+    private void checkKeys(final String prefix, final String[] expected)\n+        final Set<String> values = new HashSet<>();\n+        for (final String anExpected : expected) {\n+        final Iterator<String> itKeys = config.getKeys(prefix);\n+            final String key = itKeys.next();\n+        final Set<String> keys = ConfigurationAssert.keysToSet(config);\n+    private static void checkContent(final Configuration c)\n+        public AbstractHierarchicalConfigurationTestImpl(final InMemoryNodeModel model)\n+        public SubnodeConfiguration configurationAt(final String key,\n+                final boolean supportUpdates)\n+        public SubnodeConfiguration configurationAt(final String key)\n+        public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key)\n+        public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key, final boolean supportUpdates) {\n+        public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key)\n+        public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key, final boolean supportUpdates) {\n+                final String key, final boolean supportUpdates)\n+                final String key)\n+                final String key)\n+                final String key)\n+        final byte oneB = 1;\n+        final byte twoB = 2;\n+        final short oneS = 1;\n+        final short twoS = 2;\n+        final long oneL = 1;\n+        final long twoL = 2;\n+        final float oneF = 1;\n+        final float twoF = 2;\n+        final double oneD = 1;\n+        final double twoD = 2;\n+        final BigDecimal number = new BigDecimal(\"123.456\");\n+        final BigDecimal defaultValue = new BigDecimal(\"654.321\");\n+        final BigInteger number = new BigInteger(\"1234567890\");\n+        final BigInteger defaultValue = new BigInteger(\"654321\");\n+        final String string = \"The quick brown fox\";\n+        final String defaultValue = \"jumps over the lazy dog\";\n+        final boolean boolT = true, boolF = false;\n+        final List<Object> list = config.getList(\"number\");\n+        final List<String> list = new ArrayList<>();\n+        final String prop = \"hey, that's a test\";\n+        final List<Object> list = config.getList(\"prop.string\");\n+        final String prop2 = \"hey\\\\, that's a test\";\n+        final Object[] data = new Object[] {\n+        final Iterator<?> it = col.iterator();\n+        final StringTokenizer tok = new StringTokenizer(\"The quick brown fox jumps over the lazy dog.\", \" \");\n+        final Properties p = new Properties();\n+        final String prop = \"hey, that's a test\";\n+        final String prop2 = \"hey\\\\, that's a test\";\n+        final ConfigurationInterpolator interpolator =\n+        final Lookup prefixLookup = EasyMock.createMock(Lookup.class);\n+        final Lookup defLookup = EasyMock.createMock(Lookup.class);\n+        final Map<String, Lookup> prefixLookups = new HashMap<>();\n+        final List<Lookup> defLookups = new ArrayList<>();\n+        final ConfigurationInterpolator interpolator = config.getInterpolator();\n+        final List<Lookup> defLookups2 = interpolator.getDefaultLookups();\n+        final String var = \"testVariable\";\n+        final Object value = 42;\n+        final BaseConfiguration config2 = (BaseConfiguration) config.clone();\n+        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n+            final String key = it.next();\n+        final EventListener<ConfigurationEvent> l = new EventListenerTestImpl(config);\n+        final BaseConfiguration config2 = (BaseConfiguration) config.clone();\n+        final BaseConfiguration config2 = (BaseConfiguration) config.clone();\n+        final BaseConfiguration clone = (BaseConfiguration) config.clone();\n+        final BaseConfigurationXMLReader reader = new BaseConfigurationXMLReader();\n+        final BaseConfigurationXMLReader reader = new BaseConfigurationXMLReader(config);\n+    private void checkDocument(final BaseConfigurationXMLReader creader,\n+    final String rootName) throws Exception\n+        final SAXSource source = new SAXSource(creader, new InputSource());\n+        final DOMResult result = new DOMResult();\n+        final Transformer trans = TransformerFactory.newInstance().newTransformer();\n+        final Node root = ((Document) result.getNode()).getDocumentElement();\n+        final JXPathContext ctx = JXPathContext.newContext(root);\n+    private void check(final JXPathContext ctx, final String path, final String[] values)\n+        final Iterator<?> it = ctx.iterate(path);\n+        for (final String value : values) {\n+    private void check(final JXPathContext ctx, final String path, final String value)\n+        public void characters(final char[] ch, final int start, final int length)\n+        final XMLConfiguration c = new XMLConfiguration();\n+        final BaseHierarchicalConfiguration clone =\n+        final ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", \"true\");\n+        final BaseHierarchicalConfiguration copy =\n+        final HierarchicalConfiguration<ImmutableNode> sub = config.configurationAt(\"element2\");\n+        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n+        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n+    private static boolean isDetached(final HierarchicalConfiguration<ImmutableNode> c)\n+        final InMemoryNodeModel nodeModel = ((SubnodeConfiguration) c).getRootNodeModel();\n+        final HierarchicalConfiguration<ImmutableNode> sub =\n+        final HierarchicalConfiguration<ImmutableNode> subsub =\n+        final HierarchicalConfiguration<ImmutableNode> sub =\n+        final HierarchicalConfiguration<ImmutableNode> subsub =\n+        final HierarchicalConfiguration<ImmutableNode> sub2 =\n+        final BaseHierarchicalConfiguration conf2 =\n+        final HierarchicalConfiguration<ImmutableNode> sub =\n+        final\n+        final HierarchicalConfiguration<ImmutableNode> sub2 =\n+        final Configuration subset = config.subset(\"test\");\n+        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n+        final CountDownLatch startLatch = new CountDownLatch(1);\n+        final Collection<SubNodeAccessThread> threads =\n+            final SubNodeAccessThread t =\n+            final SubNodeAccessThread t =\n+        for (final SubNodeAccessThread t : threads)\n+        public SubNodeAccessThread(final HierarchicalConfiguration<ImmutableNode> c,\n+                final CountDownLatch startLatch, final String keySubConfig,\n+                final String keyProperty)\n+                final HierarchicalConfiguration<ImmutableNode> subConfig =\n+            catch (final InterruptedException iex)\n+            catch (final InterruptedException e)\n+        final byte oneB = 1;\n+        final byte twoB = 2;\n+        final short oneS = 1;\n+        final short twoS = 2;\n+        final long oneL = 1;\n+        final long twoL = 2;\n+        final float oneF = 1;\n+        final float twoF = 2;\n+        final double oneD = 1;\n+        final double twoD = 2;\n+        final BigDecimal number = new BigDecimal(\"123.456\");\n+        final BigDecimal defaultValue = new BigDecimal(\"654.321\");\n+        final BigInteger number = new BigInteger(\"1234567890\");\n+        final BigInteger defaultValue = new BigInteger(\"654321\");\n+        final String string = new String(\"The quick brown fox\");\n+        final String defaultValue = new String(\"jumps over the lazy dog\");\n+        final boolean boolT = true, boolF = false;\n+        final List<Object> list = config.getList(\"number\");\n+        final String prop = \"hey, that's a test\";\n+        final List<Object> list = config.getList(\"prop.string\");\n+        final String prop2 = \"hey\\\\, that's a test\";\n+        final Properties p = new Properties();\n+        final String prop = \"hey, that's a test\";\n+        final String prop2 = \"hey\\\\, that's a test\";\n+        final String unInterpolatedValue = \"${applicationRoot2}/db/hypersonic\";\n+        final String dbProp = \"/home/applicationRoot/db/hypersonic\";\n+        final BaseConfiguration superProp = config;\n+        final String[] arrayInt = superProp.getStringArray(\"arrayInt\");\n+        final String expectedValue =\n+    private void load(final String fileName) throws ConfigurationException\n+        final FileHandler handler = new FileHandler(config);\n+        final ConfigurationLogger log = new ConfigurationLogger(this.getClass());\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+        final Set<String> names = config.getConfigurationNames();\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+    private void checkAddConfig(final AbstractConfiguration c)\n+        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+    private void checkRemoveConfig(final AbstractConfiguration c)\n+        final AbstractConfiguration c = setUpTestConfiguration();\n+        final NodeCombiner combiner = new UnionCombiner();\n+        final CombinedConfiguration cc2 = (CombinedConfiguration) config.clone();\n+        final StrictConfigurationComparator comp = new StrictConfigurationComparator();\n+        final CombinedConfiguration cc2 = (CombinedConfiguration) config.clone();\n+        final AbstractConfiguration child = setUpTestConfiguration();\n+        for (final EventListener<?> listener : child\n+        final BaseHierarchicalConfiguration c1 = new BaseHierarchicalConfiguration();\n+        final PropertiesConfiguration c2 = new PropertiesConfiguration();\n+        final CombinedConfiguration cc = new CombinedConfiguration();\n+        final Set<Configuration> sources = config.getSources(key);\n+        final PropertiesConfiguration sub = new PropertiesConfiguration();\n+        final PropertiesConfiguration child = new PropertiesConfiguration();\n+        final DefaultExpressionEngine engineQuery =\n+        final DefaultExpressionEngine engineConvert =\n+        final AbstractConfiguration pc = new PropertiesConfiguration();\n+        final List<Configuration> list = config.getConfigurations();\n+        final Configuration c = list.get(2);\n+        final AbstractConfiguration pc = new PropertiesConfiguration();\n+        final List<String> list = config.getConfigurationNameList();\n+        final String name = list.get(1);\n+        final XMLConfiguration x1 = new XMLConfiguration();\n+        final XMLConfiguration x2 = new XMLConfiguration();\n+        final StringWriter w = new StringWriter();\n+        final String s = w.toString();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n+        final BaseHierarchicalConfiguration childEx =\n+        catch (final Exception ex)\n+        final XMLConfiguration xmlConf = new XMLConfiguration();\n+        final PropertiesConfiguration propConf = new PropertiesConfiguration();\n+        final Synchronizer sync = new ReadWriteSynchronizer();\n+        for (final Configuration c : config.getConfigurations())\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicInteger errorCount = new AtomicInteger();\n+        final Collection<Thread> threads = new ArrayList<>(numberOfReaders + 1);\n+        final Thread writeThread =\n+            final Thread readThread =\n+        for (final Thread t : threads)\n+        final AbstractConfiguration srcConfig = setUpTestConfiguration();\n+        final AbstractConfiguration srcConfig = setUpSubConfigTest();\n+        final HierarchicalConfiguration<ImmutableNode> sub =\n+    private void checkConfigurationsAt(final boolean withUpdates)\n+        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        public void onEvent(final ConfigurationEvent event)\n+        public void checkEvent(final int expectedInvalidate, final int expectedOthers)\n+        public ReadThread(final Configuration readConfig, final CountDownLatch latch,\n+                final AtomicInteger errCnt, final int readCount)\n+            catch (final Exception e)\n+            final List<Object> values = config.getList(KEY_CONCURRENT);\n+                for (final Object value : values)\n+        public WriteThread(final CombinedConfiguration cc, final CountDownLatch latch,\n+                final AtomicInteger errCnt, final int writeCount)\n+            catch (final InterruptedException e)\n+            final int newIdx = (currentChildConfigIdx + 1) % testConfigs.size();\n+        final ListDelimiterHandler listHandler = new LegacyListDelimiterHandler(',');\n+        final FileHandler handler1 = new FileHandler(conf1);\n+        final FileHandler handler2 = new FileHandler(conf2);\n+        final FileHandler handler3 = new FileHandler(xmlConf);\n+        final List<Object> l = cc.getList(\"packages\");\n+        final Configuration internal = cc.getConfiguration(0);\n+        catch (final NoSuchElementException nsee)\n+        final Configuration subset = cc.subset(\"subset\");\n+        final List<Object> defaultList = new ArrayList<>();\n+        final Configuration conf1 = new BaseConfiguration();\n+        final Configuration conf2 = new BaseConfiguration();\n+        final List<String> orderedList = new ArrayList<>();\n+        for (final Iterator<String> keys = conf1.getKeys(); keys.hasNext();)\n+        final List<String> iteratedList = new ArrayList<>();\n+        for (final Iterator<String> keys = cc.getKeys(); keys.hasNext();)\n+        final List<String> orderedList = new ArrayList<>();\n+        for (final Iterator<String> keys = conf1.getKeys(\"test\"); keys.hasNext();)\n+        final List<String> iteratedList = new ArrayList<>();\n+        for (final Iterator<String> keys = cc.getKeys(\"test\"); keys.hasNext();)\n+        final BaseConfiguration defaults = new BaseConfiguration();\n+        final CompositeConfiguration c = new CompositeConfiguration(defaults);\n+        catch (final NoSuchElementException e)\n+        catch (final Exception e)\n+        final String TEST_KEY = \"testKey\";\n+        final Configuration defaults = new PropertiesConfiguration();\n+        final Configuration testConfiguration = new CompositeConfiguration(defaults);\n+        final Iterator<String> i = testConfiguration.getKeys();\n+            final String key = i.next();\n+        final CompositeConfiguration config = new CompositeConfiguration();\n+        final String[] array = config.getStringArray(\"list\");\n+        final PropertiesConfiguration c1 = new PropertiesConfiguration();\n+        final PropertiesConfiguration c2 = new PropertiesConfiguration();\n+        final List<Object> lst = cc.getList(\"c1.value\");\n+        final Collection<Configuration> configs = new ArrayList<>();\n+        final CompositeConfiguration config = new CompositeConfiguration(configs);\n+        final CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();\n+        final StrictConfigurationComparator comp = new StrictConfigurationComparator();\n+        final CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();\n+        final CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();\n+        final EventListenerTestImpl listener = new EventListenerTestImpl(cc);\n+        final EventListenerTestImpl listener = new EventListenerTestImpl(cc);\n+        final String key = \"configuration.loaded\";\n+        final EventListenerTestImpl listener = new EventListenerTestImpl(cc);\n+        final AbstractConfiguration config =\n+        final DefaultListDelimiterHandler listHandler =\n+        final PropertiesConfiguration p = new PropertiesConfiguration();\n+        final List<Object> lst = cc.getList(\"bar\");\n+        final String[] values = cc.getStringArray(\"bar\");\n+        final Configuration c1 = new PropertiesConfiguration();\n+        final Configuration c2 = new PropertiesConfiguration();\n+        final Configuration props = new PropertiesConfiguration();\n+        final String[] values = { \"a\", \"property\", \"with\", \"multiple\", \"values\" };\n+        final Configuration inMemoryConfig = EasyMock.createMock(Configuration.class);\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final SynchronizerTestImpl sync = installSynchronizer();\n+        final SynchronizerTestImpl sync = installSynchronizer();\n+        final SynchronizerTestImpl sync = installSynchronizer();\n+        final SynchronizerTestImpl sync = installSynchronizer();\n+        final SynchronizerTestImpl sync = installSynchronizer();\n+        final CompositeConfiguration cc = new CompositeConfiguration();\n+        final PropertiesConfiguration pc = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(pc);\n+        final Properties props = new Properties();\n+        final AbstractConfiguration config =\n+        final List<Object> item1 = config.getList(\"list\");\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final BaseConfiguration config = createTestConfiguration();\n+        final Properties props = ConfigurationConverter.getProperties(config);\n+        final BaseConfiguration config = createTestConfiguration();\n+        final Properties props = ConfigurationConverter.getProperties(config);\n+        final Configuration src = EasyMock.createMock(Configuration.class);\n+                final String key = (String) EasyMock.getCurrentArguments()[0];\n+        final Properties props = ConfigurationConverter.getProperties(src);\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final Properties props = ConfigurationConverter.getProperties(config);\n+        final Configuration config = new BaseConfiguration();\n+        final Map<Object, Object> map = ConfigurationConverter.getMap(config);\n+        final Configuration conf = new BaseConfiguration();\n+        final ConfigurationLookup lookup = new ConfigurationLookup(conf);\n+        final Configuration conf = new BaseConfiguration();\n+        final ConfigurationLookup lookup = new ConfigurationLookup(conf);\n+        final BaseConfiguration conf = new BaseConfiguration();\n+        final ConfigurationLookup lookup = new ConfigurationLookup(conf);\n+        final Configuration conf = new BaseConfiguration();\n+        final ConfigurationLookup lookup = new ConfigurationLookup(conf);\n+        final Collection<?> col = (Collection<?>) lookup.lookup(VAR);\n+        final Iterator<?> it = col.iterator();\n+        final BaseConfiguration configuration = new BaseConfiguration();\n+        final BaseConfiguration configuration = new BaseConfiguration();\n+        final Iterator<Map.Entry<Object, Object>> iterator = set.iterator();\n+            final Map.Entry<Object, Object> entry = iterator.next();\n+        final Configuration config = new BaseConfiguration();\n+        final String lineSeparator = System.getProperty(\"line.separator\");\n+        final Configuration conf1 = new BaseConfiguration();\n+        final Configuration conf2 = new BaseConfiguration();\n+        final Configuration conf1 = new BaseConfiguration();\n+        final Configuration conf2 = new BaseConfiguration();\n+        final Configuration conf = new BaseConfiguration();\n+        final BaseHierarchicalConfiguration hc =\n+        for (final Iterator<String> it = conf.getKeys(); it.hasNext();)\n+            final String key = it.next();\n+        final Configuration conf = new BaseHierarchicalConfiguration();\n+        final BaseConfiguration conf = new BaseConfiguration();\n+        final HierarchicalConfiguration<?> hc = ConfigurationUtils\n+        final Configuration conf = new BaseConfiguration();\n+        final DefaultExpressionEngine engine =\n+        final HierarchicalConfiguration<?> hc = ConfigurationUtils\n+        final BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();\n+        final ExpressionEngine engine =\n+        final BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();\n+        final ExpressionEngine engine =\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final HierarchicalConfiguration<?> hc = ConfigurationUtils\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final\n+        final ImmutableNode rootNode = hc.getNodeModel().getNodeHandler().getRootNode();\n+        final ImmutableNode nodeX = rootNode.getChildren().get(0);\n+        final BaseHierarchicalConfiguration conf = new BaseHierarchicalConfiguration();\n+        final BaseHierarchicalConfiguration copy = (BaseHierarchicalConfiguration) ConfigurationUtils\n+        final Configuration myNonCloneableConfig = new NonCloneableConfiguration();\n+        final XMLBuilderParametersImpl params = new XMLBuilderParametersImpl();\n+        final XMLBuilderParametersImpl clone =\n+        final Map<String, Object> map = clone.getParameters();\n+        for (final Map.Entry<String, Object> e : params.getParameters().entrySet())\n+        final Long value = 20130116221714L;\n+        final XMLBuilderParametersImpl params = new XMLBuilderParametersImpl()\n+        final PropertiesConfiguration config = new PropertiesConfiguration()\n+            protected void addPropertyDirect(final String key, final Object value)\n+        final Configuration c = EasyMock.createMock(Configuration.class);\n+            public Class<?> loadClass(final String name)\n+        final XMLConfiguration src = new XMLConfiguration();\n+        final\n+        final EventSource source = ConfigurationUtils.asEventSource(this, true);\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final SynchronizerTestImpl sync2 =\n+        final CloneableSynchronizer sync = new CloneableSynchronizer(false);\n+        final CloneableSynchronizer sync2 =\n+        public CloneableSynchronizer(final boolean clone)\n+        final BaseConfiguration baseConfig = new BaseConfiguration();\n+        final List<Object> booleans = new ArrayList<>();\n+        final List<Object> bytes = new ArrayList<>();\n+        final List<Object> shorts = new ArrayList<>();\n+        final List<Object> integers = new ArrayList<>();\n+        final List<Object> longs = new ArrayList<>();\n+        final List<Object> floats = new ArrayList<>();\n+        final List<Object> doubles = new ArrayList<>();\n+        final List<Object> bigintegers = new ArrayList<>();\n+        final List<Object> bigdecimals = new ArrayList<>();\n+        final String uri1 = \"http://jakarta.apache.org\";\n+        final String uri2 = \"http://www.apache.org\";\n+        final List<Object> uris = new ArrayList<>();\n+        final String url1 = \"http://jakarta.apache.org\";\n+        final String url2 = \"http://www.apache.org\";\n+        final List<Object> urls = new ArrayList<>();\n+        final List<Object> locales = new ArrayList<>();\n+        final String color1 = \"FF0000\";\n+        final String color2 = \"0000FF\";\n+        final List<Object> colors = new ArrayList<>();\n+        final String pattern = DATE_PATTERN;\n+        final DateFormat format = new SimpleDateFormat(pattern);\n+        final Date date1 = format.parse(\"2004-01-01\");\n+        final Date date2 = format.parse(\"2004-12-31\");\n+        final Calendar calendar1 = Calendar.getInstance();\n+        final Calendar calendar2 = Calendar.getInstance();\n+        final List<Object> dates = new ArrayList<>();\n+        final List<Object> calendars = new ArrayList<>();\n+        final Configuration baseconf = new BaseConfiguration();\n+        final DataConfiguration conf = new DataConfiguration(baseconf);\n+        final Configuration baseconf = new BaseConfiguration();\n+        final DataConfiguration conf = new DataConfiguration(baseconf);\n+        final Configuration baseconf = new BaseConfiguration();\n+        final DataConfiguration conf = new DataConfiguration(baseconf);\n+        final Configuration baseconf = new BaseConfiguration();\n+        final DataConfiguration conf = new DataConfiguration(baseconf);\n+        final Iterator<String> it = conf.getKeys();\n+        final boolean[] defaultValue = new boolean[] { false, true };\n+        final boolean[] expected = new boolean[] { true, false };\n+        final byte[] defaultValue = new byte[] { 1, 2};\n+        final byte[] expected = new byte[] { 1, 2 };\n+        final short[] defaultValue = new short[] { 2, 1};\n+        final short[] expected = new short[] { 1, 2 };\n+        final int[] defaultValue = new int[] { 2, 1};\n+        final int[] expected = new int[] { 1, 2 };\n+        final long[] defaultValue = new long[] { 2, 1};\n+        final long[] expected = new long[] { 1, 2 };\n+        final float[] defaultValue = new float[] { 2, 1};\n+        final float[] expected = new float[] { 1, 2 };\n+        final double[] defaultValue = new double[] { 2, 1 };\n+        final double[] expected = new double[] { 1, 2 };\n+        final BigInteger[] defaultValue = new BigInteger[] { new BigInteger(\"2\"), new BigInteger(\"1\") };\n+        final BigInteger[] expected = new BigInteger[] { new BigInteger(\"1\"), new BigInteger(\"2\") };\n+        final List<BigInteger> bigIntegerList = conf.getBigIntegerList(\"biginteger.list\", null);\n+        final BigDecimal[] defaultValue = new BigDecimal[] { new BigDecimal(\"2\"), new BigDecimal(\"1\") };\n+        final BigDecimal[] expected = new BigDecimal[] { new BigDecimal(\"1\"), new BigDecimal(\"2\") };\n+        final URI defaultValue = new URI(\"http://www.google.com\");\n+        final URI expected = new URI(\"http://jakarta.apache.org\");\n+        final URI[] defaultValue = new URI[] { new URI(\"http://www.apache.org\"), new URI(\"http://jakarta.apache.org\") };\n+        final URI[] expected = new URI[] { new URI(\"http://jakarta.apache.org\"), new URI(\"http://www.apache.org\") };\n+        final URL defaultValue = new URL(\"http://www.google.com\");\n+        final URL expected = new URL(\"http://jakarta.apache.org\");\n+        final URL[] defaultValue = new URL[] { new URL(\"http://www.apache.org\"), new URL(\"http://jakarta.apache.org\") };\n+        final URL[] expected = new URL[] { new URL(\"http://jakarta.apache.org\"), new URL(\"http://www.apache.org\") };\n+        final Locale[] defaultValue = new Locale[] { Locale.GERMAN, Locale.FRENCH };\n+        final Locale[] expected = new Locale[] { Locale.FRENCH, Locale.GERMAN };\n+        final Color color = conf.getColor(\"color\");\n+        final Color[] defaultValue = new Color[] { Color.red, Color.blue };\n+        final Color[] expected = new Color[] { Color.red, Color.blue };\n+        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n+        final Date expected = expectedDate();\n+        final Date defaultValue = new Date();\n+        catch (final NoSuchElementException e)\n+        final DefaultConversionHandler handler = new DefaultConversionHandler();\n+        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n+        final Date date1 = format.parse(\"2004-01-01\");\n+        final Date date2 = format.parse(\"2004-12-31\");\n+        final Date[] defaultValue = new Date[] { date2, date1 };\n+        final Date[] expected = new Date[] { date1, date2 };\n+        final DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\n+        final Date date1 = format.parse(\"01/01/2004\");\n+        final Date date2 = format.parse(\"12/31/2004\");\n+        final Date[] expected = new Date[] { date1, date2 };\n+        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n+        final Date date1 = format.parse(\"2004-01-01\");\n+        final Date date2 = format.parse(\"2004-12-31\");\n+        final List<Date> nullList = null;\n+        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n+        final Calendar defaultValue = Calendar.getInstance();\n+        catch (final NoSuchElementException e)\n+        final Calendar expected = Calendar.getInstance();\n+        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n+        final Date date1 = format.parse(\"2004-01-01\");\n+        final Date date2 = format.parse(\"2004-12-31\");\n+        final Calendar calendar1 = Calendar.getInstance();\n+        final Calendar calendar2 = Calendar.getInstance();\n+        final Calendar[] defaultValue = new Calendar[] { calendar2, calendar1 };\n+        final Calendar[] expected = new Calendar[] { calendar1, calendar2 };\n+        final DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\n+        final Date date1 = format.parse(\"01/01/2004\");\n+        final Date date2 = format.parse(\"12/31/2004\");\n+        final Calendar calendar1 = Calendar.getInstance();\n+        final Calendar calendar2 = Calendar.getInstance();\n+        final Calendar[] expected = new Calendar[] { calendar1, calendar2 };\n+        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n+        final Date date1 = format.parse(\"2004-01-01\");\n+        final Date date2 = format.parse(\"2004-12-31\");\n+        final Calendar calendar1 = Calendar.getInstance();\n+        final Calendar calendar2 = Calendar.getInstance();\n+        final List<Calendar> nullList = null;\n+        final InetAddress expected = InetAddress.getByName(\"127.0.0.1\");\n+        final Object expected = createInternetAddress(\"ebourg@apache.org\");\n+        catch (final ConversionException e)\n+        final Object expected = createInternetAddress(\"ebourg@apache.org\");\n+    private Object createInternetAddress(final String email) throws Exception\n+        final Class<?> cls = Class.forName(\"javax.mail.internet.InternetAddress\");\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        catch (final ConversionException e)\n+        final String key = \"test.str\";\n+        final String value = \"someTestValue\";\n+        final String key = \"test.property\";\n+        final String key = \"test.property\";\n+        final Configuration wrapped = EasyMock.createMock(Configuration.class);\n+        final String key = \"test.property\";\n+        catch (final ConversionException cex)\n+    private void setUpErrorListener(final PotentialErrorDatabaseConfiguration config)\n+        final PotentialErrorDatabaseConfiguration config = setUpConfig();\n+            final EventType<? extends ConfigurationErrorEvent> type,\n+            final EventType<?> opType, final String key, final Object value)\n+        final Throwable exception = listener.checkEvent(type, opType, key, value);\n+        final DatabaseConfiguration config = helper.setUpConfig();\n+        final DatabaseConfiguration config = helper.setUpConfig();\n+        final DatabaseConfiguration config = helper.setUpMultiConfig();\n+        final DatabaseConfiguration config = helper.setUpConfig();\n+        final Configuration config = setUpConfig();\n+        final Configuration config = helper.setUpMultiConfig();\n+        final Configuration config = helper.setUpConfig();\n+        final Configuration config = helper.setUpMultiConfig();\n+        final DatabaseConfiguration config = helper.setUpMultiConfig();\n+        final DatabaseConfiguration config2 =\n+        final Configuration config = helper.setUpConfig();\n+        final Configuration config = helper.setUpConfig();\n+        final Configuration config = helper.setUpMultiConfig();\n+        final Configuration config = helper.setUpConfig();\n+        final Configuration config = setUpConfig();\n+        final Iterator<String> it = config.getKeys();\n+        final Configuration config = helper.setUpMultiConfig();\n+        final Iterator<String> it = config.getKeys();\n+        final Configuration config = setUpConfig();\n+        final Configuration config = helper.setUpMultiConfig();\n+        final Configuration config1 = setUpConfig();\n+        final Configuration config1 = helper.setUpMultiConfig();\n+        final Configuration config2 = helper.setUpMultiConfig(DatabaseConfiguration.class, \"testIsEmpty\");\n+        final DatabaseBuilderParameters params = helper.setUpDefaultParameters().setTable(\"configurationList\");\n+        final Configuration config1 = helper.createConfig(DatabaseConfiguration.class, params);\n+        final List<Object> list = config1.getList(\"key3\");\n+        final DatabaseBuilderParameters params = helper.setUpDefaultParameters().setTable(\"configurationList\");\n+        final Configuration config1 = helper.createConfig(DatabaseConfiguration.class, params);\n+        final Iterator<String> i = config1.getKeys();\n+        final Object key = i.next();\n+        final Configuration config = setUpConfig();\n+        final Configuration subset = config.subset(\"key1\");\n+        final DatabaseConfiguration config = helper.setUpConfig();\n+        final Iterator<String> it = setUpErrorConfig().getKeys();\n+        final DatabaseConfiguration config = setUpConfig();\n+        final List<Object> values = config.getList(\"keyMulti\");\n+        final DatabaseConfiguration config = setUpConfig();\n+        final DatabaseConfiguration config = setUpConfig();\n+        final String[] values = config.getStringArray(\"keyList\");\n+        final DatabaseConfiguration config = helper.setUpMultiConfig();\n+        final String[] values = config.getStringArray(\"keyList\");\n+        final ResultSet rs = EasyMock.createMock(ResultSet.class);\n+        final Clob clob = EasyMock.createMock(Clob.class);\n+        final DatabaseConfiguration config = helper.setUpConfig();\n+        final ResultSet rs = EasyMock.createMock(ResultSet.class);\n+        final Clob clob = EasyMock.createMock(Clob.class);\n+        final DatabaseConfiguration config = helper.setUpConfig();\n+                final DataSource ds = EasyMock.createMock(DataSource.class);\n+                catch (final SQLException e)\n+        final DynamicCombinedConfiguration config = new DynamicCombinedConfiguration();\n+        final DefaultListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final ConfigurationBuilder<XMLConfiguration> multiBuilder =\n+        final BuilderConfigurationWrapperFactory wrapFactory =\n+        final XMLConfiguration xml = new XMLConfiguration();\n+        final FileHandler handler = new FileHandler(xml);\n+        final CombinedConfigurationBuilder builder =\n+        final CombinedConfiguration config = builder.getConfiguration();\n+    private SynchronizerTestImpl prepareSynchronizerTest(final Configuration config)\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final DynamicCombinedConfiguration config =\n+        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n+        final DynamicCombinedConfiguration config =\n+        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n+        final DynamicCombinedConfiguration config =\n+        final Configuration child = new PropertiesConfiguration();\n+        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n+        final DynamicCombinedConfiguration config =\n+        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n+        final DynamicCombinedConfiguration config =\n+        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n+        final DynamicCombinedConfiguration config =\n+        final String configName = \"testConfig\";\n+        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n+        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n+        final CombinedConfiguration config = builder.getConfiguration();\n+        final Thread testThreads[] = new Thread[THREAD_COUNT];\n+        final int failures[] = new int[THREAD_COUNT];\n+        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n+        final CombinedConfiguration config = builder.getConfiguration();\n+        final Thread testThreads[] = new Thread[THREAD_COUNT];\n+        final int failures[] = new int[THREAD_COUNT];\n+        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n+        final CombinedConfiguration config = builder.getConfiguration();\n+        final Thread testThreads[] = new Thread[THREAD_COUNT];\n+        final int failures[] = new int[THREAD_COUNT];\n+        final String[] ids = new String[] {null, \"2002\", \"3001\", \"3002\", \"3003\"};\n+        final String[] expected = new String[] {\"50\", \"25\", \"15\", \"25\", \"50\"};\n+        final File output = folder.newFile(\"testMultiDynamic_default.xml\");\n+        final ReloadingCombinedConfigurationBuilder builder =\n+        final ReaderThread testThreads[] = new ReaderThread[threadCount];\n+        final String id = config.getString(\"Product/FIIndex/FI[@id='123456782']\");\n+        final String rows = config.getString(\"rowsPerPage\");\n+        for (final ReaderThread testThread : testThreads) {\n+        for (final ReaderThread testThread : testThreads) {\n+        ReloadThread(final CombinedConfigurationBuilder b, final int[] failures, final int index, final int count,\n+                     final boolean useId, final String id, final String expected)\n+                    final CombinedConfiguration combined = builder.getConfiguration();\n+                    final String value = combined.getString(\"rowsPerPage\", null);\n+                catch (final Exception ex)\n+        public ReaderThread(final CombinedConfigurationBuilder b)\n+                    final CombinedConfiguration combined = builder.getConfiguration();\n+                    final String bcId =\n+                    final int sleepTime = random.nextInt(75);\n+            catch (final ConfigurationException cex)\n+            catch(final InterruptedException iex)\n+    private void verify(final String key, final DynamicCombinedConfiguration config, final int rows)\n+    private void copyFile(final File input, final File output) throws IOException\n+        final Reader reader = new FileReader(input);\n+        final Writer writer = new FileWriter(output);\n+        final char[] buffer = new char[4096];\n+        public static void setId(final String value)\n+        public String lookup(final String key)\n+            final String value = System.getProperty(\"Id\");\n+        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n+            final String key = it.next();\n+        final String key = config.getKeys().next();\n+        final String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testEqual.properties\").getAbsolutePath();\n+        final PropertiesConfiguration c = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(c);\n+        final CombinedConfigurationBuilder builder =\n+    private void checkEquality(final String msg, final Configuration c1, final Configuration c2)\n+        final Iterator<String> it1 = c1.getKeys();\n+        final Iterator<String> it2 = c2.getKeys();\n+            final String key1 = it1.next();\n+            final String key2 = it2.next();\n+    private void checkSameKey(final String msg, final String key, final Configuration c1, final Configuration c2)\n+        final String [] s1 = c1.getStringArray(key);\n+        final String [] s2 = c2.getStringArray(key);\n+        final List<Object> list1 = c1.getList(key);\n+        final List<Object> list2 = c2.getList(key);\n+        final Iterator<Object> it1 = list1.iterator();\n+        final Iterator<Object> it2 = list2.iterator();\n+            final String val1 = (String) it1.next();\n+            final String val2 = (String) it2.next();\n+        final Configuration simple = setupSimpleConfiguration();\n+        final Configuration composite = setupCompositeConfiguration();\n+        final Configuration simple = setupSimpleConfiguration();\n+        final Configuration composite = setupCompositeConfiguration();\n+        final String key = \"clear.property\";\n+        final Configuration simple = setupSimpleConfiguration();\n+        final Configuration composite = setupCompositeConfiguration();\n+        final String key = \"nonexisting.clear.property\";\n+        final Configuration simple = setupSimpleConfiguration();\n+        final Configuration composite = setupCompositeConfiguration();\n+        final String key = \"nonexisting.property\";\n+        final String value = \"new value\";\n+        final Configuration simple = setupSimpleConfiguration();\n+        final Configuration composite = setupCompositeConfiguration();\n+        final String key = \"existing.property\";\n+        final String value = \"new value\";\n+        final Configuration simple = setupSimpleConfiguration();\n+        final Configuration composite = setupCompositeConfiguration();\n+        final String key = \"nonexisting.property\";\n+        final String value = \"new value\";\n+        final Configuration simple = setupSimpleConfiguration();\n+        final Configuration composite = setupCompositeConfiguration();\n+        final String key = \"existing.property\";\n+        final String value = \"new value\";\n+        final PropertiesConfiguration conf = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(conf);\n+        final String equals = conf.getString(\"test.equals\");\n+        final ImmutableNode root =\n+            final DefaultConfigurationKey key = createConfigurationKey();\n+        final Configuration subset = config.subset(\"tables.table(0).fields\");\n+        final String key = \"tables.table(0)[@type]\";\n+        final BaseHierarchicalConfiguration subset =\n+        final HierarchicalConfiguration<ImmutableNode> subConfig =\n+        final List<Object> lstFlds = subConfig.getList(\"fields.field.name\");\n+        final HierarchicalConfiguration<ImmutableNode> subConfig =\n+        final HierarchicalConfiguration<ImmutableNode> subConfig =\n+        final HierarchicalConfiguration<ImmutableNode> subConfig =\n+        final HierarchicalConfiguration<ImmutableNode> subConfig =\n+        final ImmutableHierarchicalConfiguration subConfig =\n+        final List<Object> lstFlds = subConfig.getList(\"fields.field.name\");\n+        final String newTableName = NodeStructureHelper.table(1) + \"_other\";\n+        final ImmutableHierarchicalConfiguration subConfig =\n+    private void checkConfigurationAtAttributeNode(final boolean withUpdates)\n+        final HierarchicalConfiguration<ImmutableNode> sub =\n+            final List<? extends ImmutableConfiguration> lstFlds)\n+            final ImmutableConfiguration sub = lstFlds.get(i);\n+    private void checkConfigurationsAtWithUpdate(final boolean withUpdates,\n+            final String expName)\n+        final String key = \"tables.table(1).fields.field\";\n+        final List<HierarchicalConfiguration<ImmutableNode>> lstFlds =\n+        final String key = \"tables.table\";\n+        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n+        final BaseHierarchicalConfiguration sub =\n+        final List<ImmutableHierarchicalConfiguration> lstFlds =\n+        final String attrKey = \"tables.table(0)[@type]\";\n+        final Configuration copy = (Configuration) config.clone();\n+        final BaseHierarchicalConfiguration copy = new BaseHierarchicalConfiguration(config);\n+        final BaseHierarchicalConfiguration copy = new BaseHierarchicalConfiguration(config);\n+        final Configuration sub1 = config.subset(\"prop2\");\n+        final Configuration sub2 = sub1.subset(\"prop\");\n+        final BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration) InterpolationTestHelper\n+        final BaseHierarchicalConfiguration copy =\n+        final List<ImmutableHierarchicalConfiguration> children =\n+        final ImmutableHierarchicalConfiguration c1 = children.get(0);\n+        final ImmutableHierarchicalConfiguration c2 = children.get(1);\n+    private void checkChildConfigurationsAtWithUpdates(final boolean withUpdates,\n+            final String expectedName)\n+        final String key = \"tables.table(0)\";\n+        final List<HierarchicalConfiguration<ImmutableNode>> children =\n+        final HierarchicalConfiguration<ImmutableNode> sub = children.get(0);\n+    private void checkContent(final Configuration c)\n+        final XMLConfiguration config = new XMLConfiguration();\n+        final FileHandler handler = new FileHandler(config);\n+        final SAXSource source = new SAXSource(parser, new InputSource());\n+        final DOMResult result = new DOMResult();\n+        final Transformer trans = TransformerFactory.newInstance().newTransformer();\n+        final Node root = ((Document) result.getNode()).getDocumentElement();\n+        final JXPathContext ctx = JXPathContext.newContext(root);\n+    private void configTest(final XMLConfiguration config)\n+        final FileHandler handler = new FileHandler(config);\n+        final FileHandler handler = new FileHandler(config);\n+        final FileHandler handler = new FileHandler(config);\n+        final FileHandler handler = new FileHandler(config);\n+        final FileHandler handler = new FileHandler(config);\n+        final Iterator<String> iter = config.getKeys();\n+        final FileHandler handler = new FileHandler(config);\n+        final File saveFile = folder.newFile(TEST_SAVENAME);\n+        final FileHandler handler2 = new FileHandler(config);\n+        final File saveFile = folder.newFile(TEST_SAVENAME);\n+        final File saveFile = folder.newFile(TEST_SAVENAME);\n+        final FileHandler handler = new FileHandler(config);\n+    private static INIConfiguration setUpConfig(final String data)\n+        final INIConfiguration instance = new INIConfiguration();\n+    private static void load(final INIConfiguration instance, final String data)\n+        final StringReader reader = new StringReader(data);\n+        catch (final IOException e)\n+    private static String saveToString(final INIConfiguration config)\n+        final StringWriter writer = new StringWriter();\n+        catch (final IOException e)\n+    private File writeTestFile(final String content) throws IOException\n+        final File file = folder.newFile();\n+        final PrintWriter out = new PrintWriter(new FileWriter(file));\n+        final Writer writer = new StringWriter();\n+        final INIConfiguration instance = new INIConfiguration();\n+    \tfinal String input = MessageFormat.format(INI_DATA4, \"=\").trim();\n+    \tfinal String expectedOutput = MessageFormat.format(INI_DATA4, outputSeparator).trim();\n+    \tfinal INIConfiguration instance = new FileBasedConfigurationBuilder<>(\n+        final Writer writer = new StringWriter();\n+        final String result = writer.toString().trim();\n+    private void checkSave(final String content) throws ConfigurationException\n+        final INIConfiguration config = setUpConfig(content);\n+        final String sOutput = saveToString(config);\n+        final INIConfiguration config = new INIConfiguration();\n+        final String data =\n+        final String content = saveToString(config);\n+        final INIConfiguration config2 = new INIConfiguration();\n+        final File file = writeTestFile(INI_DATA);\n+        final FileBasedConfigurationBuilder<INIConfiguration> builder =\n+        final INIConfiguration config = builder.getConfiguration();\n+    private void checkContent(final INIConfiguration instance)\n+    private void checkLoad(final String data) throws ConfigurationException\n+        final INIConfiguration instance = setUpConfig(data);\n+        final INIConfiguration instance = new INIConfiguration();\n+        final INIConfiguration instance = new INIConfiguration();\n+        final INIConfiguration instance = new INIConfiguration();\n+        final Set<String> expResult = new HashSet<>();\n+        final Set<String> result = instance.getSections();\n+        final INIConfiguration config = setUpConfig(INI_DATA2);\n+        final INIConfiguration config = setUpConfig(INI_DATA2);\n+        final INIConfiguration config = setUpConfig(INI_DATA2);\n+        final INIConfiguration config = setUpConfig(INI_DATA2);\n+        final INIConfiguration config = setUpConfig(INI_DATA2);\n+        final INIConfiguration config = new INIConfiguration();\n+        final StringWriter writer = new StringWriter();\n+        final INIConfiguration config2 = new INIConfiguration();\n+        final INIConfiguration config = setUpConfig(content);\n+        final INIConfiguration config = setUpConfig(content);\n+        final INIConfiguration config = setUpConfig(INI_DATA2);\n+        final INIConfiguration config = setUpConfig(data);\n+        final INIConfiguration config = setUpConfig(data);\n+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n+        final HierarchicalConfiguration<ImmutableNode> sub = config.getSection(null);\n+    private void checkSectionNames(final INIConfiguration config,\n+            final String[] expected)\n+        final Set<String> sectionNames = config.getSections();\n+        final Iterator<String> it = sectionNames.iterator();\n+    private INIConfiguration checkSectionNames(final String data,\n+            final String[] expected) throws ConfigurationException\n+        final INIConfiguration config = setUpConfig(data);\n+        final INIConfiguration config = checkSectionNames(data,\n+        final INIConfiguration config = setUpConfig(INI_DATA2);\n+        final INIConfiguration config = setUpConfig(INI_DATA);\n+        final HierarchicalConfiguration<ImmutableNode> section =\n+        final INIConfiguration config = setUpConfig(INI_DATA);\n+        final HierarchicalConfiguration<ImmutableNode> section =\n+        final INIConfiguration config = setUpConfig(data);\n+        final HierarchicalConfiguration<ImmutableNode> section = config.getSection(\"section1\");\n+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n+        final HierarchicalConfiguration<ImmutableNode> section = config.getSection(null);\n+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n+        final GlobalSectionTestThread[] threads = new GlobalSectionTestThread[threadCount];\n+        final INIConfiguration config = setUpConfig(INI_DATA);\n+        final HierarchicalConfiguration<ImmutableNode> section = config.getSection(null);\n+        final INIConfiguration config = setUpConfig(INI_DATA);\n+        final HierarchicalConfiguration<ImmutableNode> section = config\n+        final INIConfiguration config = setUpConfig(INI_DATA3);\n+        final INIConfiguration config = setUpConfig(INI_DATA3);\n+        final INIConfiguration config = setUpConfig(INI_DATA3);\n+        final INIConfiguration config = setUpConfig(INI_DATA3);\n+        final INIConfiguration config = setUpConfig(INI_DATA3);\n+        final INIConfiguration config = setUpConfig(INI_DATA3);\n+        final INIConfiguration config = setUpConfig(INI_DATA3);\n+        final StringWriter writer = new StringWriter();\n+        final String data = INI_DATA + \"key.dot = dotValue\";\n+        final INIConfiguration conf = new INIConfiguration();\n+        final String output = saveToString(conf);\n+        final INIConfiguration config = setUpConfig(content);\n+        final INIConfiguration config = setUpConfig(INI_DATA_SEPARATORS);\n+        final INIConfiguration config = setUpConfig(INI_DATA_SEPARATORS);\n+        final INIConfiguration config = setUpConfig(INI_DATA_SEPARATORS);\n+        final INIConfiguration config = setUpConfig(data);\n+        final StringWriter writer = new StringWriter();\n+        final HierarchicalConfiguration<?> config2 = setUpConfig(writer.toString());\n+        final INIConfiguration config = setUpConfig(data);\n+        final HierarchicalConfiguration<ImmutableNode> sub = config.getSection(\"section\");\n+        final StringWriter writer = new StringWriter();\n+        final String content = writer.toString();\n+        final int pos = content.indexOf(\"[section]\");\n+        final INIConfiguration config = setUpConfig(INI_DATA);\n+        final StringWriter writer = new StringWriter();\n+        final INIConfiguration config2 = setUpConfig(writer.toString());\n+        final INIConfiguration config =\n+        final HierarchicalConfiguration<ImmutableNode> section = config.getSection(\"section\");\n+        final Iterator<String> keys = section.getKeys();\n+        final INIConfiguration config =\n+        final List<Object> list = config.getList(\"test.list\");\n+        final INIConfiguration config =\n+        final INIConfiguration config = setUpConfig(INI_DATA);\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final INIConfiguration config = new INIConfiguration();\n+        final String output = saveToString(config);\n+        final INIConfiguration config2 = setUpConfig(output);\n+        final String data =\n+        final INIConfiguration config = setUpConfig(data);\n+        final INIConfiguration config2 = setUpConfig(saveToString(config));\n+        final List<Object> list = config2.getList(\"sectest.list\");\n+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n+        final HierarchicalConfiguration<ImmutableNode> sub = config.getSection(null);\n+        final Iterator<String> keys = sub.getKeys();\n+            final StringBuilder buf = new StringBuilder();\n+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n+        final SubnodeConfiguration sub = config.getSection(null);\n+        final NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n+        final SubnodeConfiguration sub = config.getSection(null);\n+        final NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n+        final SubnodeConfiguration sub = config.getSection(null);\n+        final NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n+        final ImmutableNode child = handler.getChild(handler.getRootNode(), 0);\n+        catch (final IndexOutOfBoundsException iex)\n+        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n+        final SubnodeConfiguration sub = config.getSection(null);\n+        final NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n+        final List<ImmutableNode> children = handler.getRootNode().getChildren();\n+        final DefaultExpressionEngine engine =\n+        final INIConfiguration config = new INIConfiguration();\n+        final INIConfiguration config = setUpConfig(section);\n+        final StringWriter writer = new StringWriter();\n+        public GlobalSectionTestThread(final INIConfiguration conf)\n+                catch (final IllegalStateException istex)\n+        final Configuration confOrg = createTestConfig();\n+        final ImmutableConfiguration conf =\n+        for (final Iterator<String> it = confOrg.getKeys(); it.hasNext();)\n+            final String key = it.next();\n+        final ImmutableConfiguration conf =\n+    private static Set<String> fetchKeys(final Iterator<String> it)\n+        final Set<String> keys = new HashSet<>();\n+        final Configuration confOrg = createTestConfig();\n+        final ImmutableConfiguration conf =\n+        final ImmutableConfiguration conf =\n+        final Iterator<String> it = conf.getKeys();\n+        final Configuration confOrg = createTestConfig();\n+        final ImmutableConfiguration conf =\n+        final String value = \"new value\";\n+        final ImmutableConfiguration conf =\n+        final Configuration mutableConf = (Configuration) conf;\n+        final ImmutableConfiguration conf =\n+        final ImmutableConfiguration subset = conf.immutableSubset(\"test\");\n+        final HierarchicalConfiguration<?> conf = new BaseHierarchicalConfiguration();\n+        final String key = \"test\";\n+        final ImmutableHierarchicalConfiguration ihc =\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final ImmutableConfiguration ic =\n+        catch (final NoSuchElementException e)\n+        final Properties props = new Properties();\n+        final Context ctx = new InitialContext(props);\n+        final Object o = conf.getProperty(\"test.boolean\");\n+        final String key = \"test.boolean\";\n+        final Iterator<EventListener<? super ConfigurationErrorEvent>> iterator =\n+            final EventType<? extends ConfigurationErrorEvent> type,\n+            final EventType<?> opEventType, final String propName, final Object propValue)\n+        final Throwable exception =\n+        final JNDIConfiguration c = new JNDIConfiguration();\n+        final Hashtable<Object, Object> env = new Hashtable<>();\n+        final InitialContext initCtx = new InitialContext(env);\n+        final JNDIConfiguration c = new JNDIConfiguration(initCtx);\n+        public PotentialErrorJNDIConfiguration(final Context ctx)\n+        public void installException(final NamingException nex)\n+        final String s = conf.getString(\"test.key\");\n+        final String s = conf.getString(\"test.key\");\n+        final String result = conf.getString(\"test.imaginarykey\", \"bob\");\n+        final Iterator<String> it = conf.getKeys();\n+        final Iterator<String> it = conf.getKeys(\"foo.bar\");\n+        final Iterator<String> it = conf.getKeys(\"test\");\n+        final Iterator<String> it = conf.getKeys(\"test.boolean\");\n+    private final String testJson =\n+        final Configuration subset = jsonConfiguration.subset(\"key4\");\n+        final Object property =\n+        final Object property = jsonConfiguration.getProperty(\"int1\");\n+        final StringWriter sw = new StringWriter();\n+        final String output = sw.toString();\n+        final ObjectMapper mapper = new ObjectMapper();\n+        final MapType type = mapper.getTypeFactory().constructMapType(Map.class,\n+        final Map<String, Object> parsed = mapper.readValue(output, type);\n+        final Map key2 = (Map) parsed.get(\"key2\");\n+        final List<String> key5 =\n+        final List<?> capitals = (List<?>) parsed.get(\"capitals\");\n+        final Map<?, ?> capUk = (Map<?, ?>) capitals.get(1);\n+        final BaseHierarchicalConfiguration c = new BaseHierarchicalConfiguration();\n+        final Map<String, Object> map = new HashMap<>();\n+        final MapConfiguration config = new MapConfiguration(map);\n+        final Map<String, Object> map = new HashMap<>();\n+        final MapConfiguration conf = new MapConfiguration(map);\n+        final MapConfiguration config = (MapConfiguration) getConfiguration();\n+        final MapConfiguration copy = (MapConfiguration) config.clone();\n+        final StrictConfigurationComparator comp = new StrictConfigurationComparator();\n+        final MapConfiguration config = (MapConfiguration) getConfiguration();\n+        final MapConfiguration copy = (MapConfiguration) config.clone();\n+        final MapConfiguration config = (MapConfiguration) getConfiguration();\n+        final MapConfiguration clone = (MapConfiguration) config.clone();\n+        final MapConfiguration config = (MapConfiguration) getConfiguration();\n+        final List<Object> values = config.getList(KEY);\n+        final MapConfiguration config = (MapConfiguration) getConfiguration();\n+        final MapConfiguration config = (MapConfiguration) getConfiguration();\n+        final MapConfiguration config = (MapConfiguration) getConfiguration();\n+        final PropertiesConfiguration c = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(c);\n+        final ListDelimiterHandler listHandler = new LegacyListDelimiterHandler(',');\n+        final FileHandler handler1 = new FileHandler(conf1);\n+        final FileHandler handler2 = new FileHandler(conf2);\n+        final FileHandler handler3 = new FileHandler(xmlConf);\n+        final List<Object> l = cc.getList(\"packages\");\n+        final Configuration internal = cc.getConfiguration(0);\n+        final Configuration subset = cc.subset(\"subset\");\n+        final List<Object> defaultList = new ArrayList<>();\n+        final Configuration conf1 = new BaseConfiguration();\n+        final Configuration conf2 = new BaseConfiguration();\n+        final Configuration conf1 = new BaseConfiguration();\n+        final Configuration conf2 = new BaseConfiguration();\n+        final List<Object> list = cc.getList(\"array\");\n+        final List<String> orderedList = new ArrayList<>();\n+        for (final Iterator<String> keys = conf1.getKeys(); keys.hasNext();)\n+        final List<String> iteratedList = new ArrayList<>();\n+        for (final Iterator<String> keys = cc.getKeys(); keys.hasNext();)\n+        final List<String> orderedList = new ArrayList<>();\n+        for (final Iterator<String> keys = conf1.getKeys(\"test\"); keys.hasNext();)\n+        final List<String> iteratedList = new ArrayList<>();\n+        for (final Iterator<String> keys = cc.getKeys(\"test\"); keys.hasNext();)\n+        final BaseConfiguration defaults = new BaseConfiguration();\n+        final Configuration c = new CompositeConfiguration(defaults);\n+        final String TEST_KEY = \"testKey\";\n+        final Configuration defaults = new PropertiesConfiguration();\n+        final Configuration testConfiguration = new CompositeConfiguration(defaults);\n+        final Iterator<String> i = testConfiguration.getKeys();\n+            final String key = i.next();\n+        final String s = conf.getString(\"test.key\");\n+        final String s = conf.getString(\"test.key\");\n+        final String result = conf.getString(\"test.imaginarykey\", \"bob\");\n+        final Iterator<String> it = conf.getKeys();\n+        final Iterator<String> it = conf.getKeys(\"foo.bar\");\n+        final Iterator<String> it = conf.getKeys(\"test\");\n+        final Iterator<String> it = conf.getKeys(\"test.boolean\");\n+        final PatternSubtreeConfigurationWrapper config = new PatternSubtreeConfigurationWrapper(this.conf, PATTERN);\n+        final HierarchicalConfiguration<ImmutableNode> hc = new BaseHierarchicalConfiguration();\n+        final PatternSubtreeConfigurationWrapper config =\n+        final HierarchicalConfiguration<ImmutableNode> hc = new BaseHierarchicalConfiguration();\n+        final PatternSubtreeConfigurationWrapper config =\n+    private static FileHandler load(final PropertiesConfiguration pc, final String fileName)\n+        final FileHandler handler = new FileHandler(pc);\n+        final String loaded = conf.getString(\"configuration.loaded\");\n+        final File file2 = ConfigurationAssert.getTestFile(\"threesome.properties\");\n+        final FileHandler handler = new FileHandler(conf);\n+    private void checkEmpty(final String key)\n+        final String empty = conf.getString(key);\n+        final String loaded = conf.getString(\"include.loaded\");\n+        final String loaded = conf.getString(\"include.interpol.loaded\");\n+        final StringReader in =\n+        final FileHandler handler = new FileHandler(conf);\n+        final String content =\n+        final StringReader in = new StringReader(content);\n+        final FileHandler handler = new FileHandler(conf);\n+        final List<Object> packages = conf.getList(\"packages\");\n+        final List<Object> list = new ArrayList<>();\n+        final URL url = new URL(\"foo\", \"\", 0, folder.newFile(\"testsave-custom-url.properties\").getAbsolutePath(), new FileURLStreamHandler());\n+        final FileHandler handlerSave = new FileHandler(conf);\n+        final PropertiesConfiguration config2 = new PropertiesConfiguration();\n+        final FileHandler handlerLoad = new FileHandler(config2);\n+        final List<Object> list = new ArrayList<>();\n+        final PropertiesConfiguration checkConfig = new PropertiesConfiguration();\n+        final PropertiesConfiguration checkConfig = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(conf);\n+        final FileHandler handler = new FileHandler(conf);\n+        final List<Object> dirs = conf.getList(\"test.dirs\");\n+        final PropertiesConfiguration pc = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(pc);\n+        final PropertiesConfiguration pc = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(pc);\n+        final File file = ConfigurationAssert.getTestFile(\"test.properties\");\n+        final FileHandler handler = new FileHandler(conf);\n+        final PropertiesConfiguration checkConfig = new PropertiesConfiguration();\n+        final String property = conf.getString(\"test.unescape\");\n+        final String property = conf.getString(\"test.unescape.list-separator\");\n+        final FileHandler handler = new FileHandler(conf);\n+        final String[] array = conf.getStringArray(\"test.mixed.array\");\n+        final String property = \"This is a value spread out across several adjacent \"\n+        final PropertiesConfiguration pc2 = new PropertiesConfiguration();\n+        final PropertiesConfiguration pc2 = new PropertiesConfiguration();\n+        final List<Object> list = conf.getList(\"test.path\");\n+        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n+        final Configuration config = builder.getConfiguration();\n+        final StringWriter out = new StringWriter();\n+        final String content = out.toString();\n+        final PropertiesConfigurationLayout layout = conf.getLayout();\n+        final PropertiesConfigurationLayout layout2 = conf.getLayout();\n+        final DummyLayout layout = new DummyLayout();\n+        final DummyLayout layout = new DummyLayout();\n+        final DummyLayout layout = new DummyLayout();\n+        final PropertiesConfiguration copy = (PropertiesConfiguration) conf.clone();\n+        final StringWriter outConf = new StringWriter();\n+        final StringWriter outCopy = new StringWriter();\n+        final PropertiesConfiguration copy = (PropertiesConfiguration) conf.clone();\n+        final MockHttpURLStreamHandler handler = new MockHttpURLStreamHandler(\n+        final URL url = new URL(null, \"http://jakarta.apache.org\", handler);\n+        final MockHttpURLConnection con = handler.getMockConnection();\n+        final MockHttpURLStreamHandler handler = new MockHttpURLStreamHandler(\n+        final URL url = new URL(null, \"http://jakarta.apache.org\", handler);\n+        catch (final ConfigurationException cex)\n+        final File file = folder.newFile(\"sharp#1.properties\");\n+        final PropertiesConfiguration conf = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(conf);\n+        final FileHandler handler = new FileHandler(conf);\n+        final Configuration copyConf = setUpCopyConfig();\n+        final Configuration copyConf = setUpCopyConfig();\n+        final FileHandler handler = new FileHandler(conf);\n+        final DataConfiguration dataConfig = new DataConfiguration(conf);\n+        final PropertiesConfiguration config2 = new PropertiesConfiguration();\n+                    final Reader in)\n+                    final Writer out, final ListDelimiterHandler handler)\n+                    final Reader in)\n+                    final Writer out, final ListDelimiterHandler handler)\n+                    final PropertiesWriterTestImpl propWriter = new PropertiesWriterTestImpl(handler);\n+                catch (final IOException e)\n+        final Set<String> foundLines = new HashSet<>();\n+        final BufferedReader in = new BufferedReader(new FileReader(\n+                for (final String separatorTest : separatorTests) {\n+        final StringWriter writer = new StringWriter();\n+        final String s = writer.toString();\n+        final String prop = \"delimiterListProp\";\n+        final List<String> list = Arrays.asList(\"val\", \"val2\", \"val3\");\n+        final StringWriter out = new StringWriter();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final String text = \"\\\"Hello World!\\\"\";\n+        final StringWriter out = new StringWriter();\n+        final PropertiesConfiguration c2 = new PropertiesConfiguration();\n+        final FileSystem fs = new DefaultFileSystem()\n+            public InputStream getInputStream(final URL url)\n+                    catch (final UnsupportedEncodingException e)\n+        final Parameters params = new Parameters();\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration configuration = builder.getConfiguration();\n+        final Reader in = new FileReader(ConfigurationAssert.getTestFile(\"test.properties\"));\n+        catch (final ConfigurationException e)\n+    private void checkBackslashList(final String key)\n+        final Object prop = conf.getProperty(\"test.\" + key);\n+        final List<?> list = (List<?>) prop;\n+        final Configuration result = new BaseConfiguration();\n+    private void checkCopiedConfig(final Configuration copyConf)\n+        final PropertiesConfiguration checkConf = new PropertiesConfiguration();\n+        for (final Iterator<String> it = copyConf.getKeys(); it.hasNext();)\n+            final String key = it.next();\n+        final FileHandler handler = new FileHandler(conf);\n+        public void load(final PropertiesConfiguration config, final Reader in)\n+        protected MockHttpURLConnection(final URL u, final int respCode, final File outFile)\n+        public MockHttpURLStreamHandler(final int respCode, final File outFile)\n+        protected URLConnection openConnection(final URL u) throws IOException\n+        public PropertiesReaderTestImpl(final Reader reader, final int maxProps)\n+        public PropertiesWriterTestImpl(final ListDelimiterHandler handler) throws IOException\n+        final Iterator<EventListener<? super ConfigurationEvent>> it =\n+        final String presetHeaderComment = \"preset\" + TEST_COMMENT + CRNORM + CRNORM + TEST_COMMENT;\n+        final ConfigurationEvent event = new ConfigurationEvent(this,\n+        final ConfigurationEvent event = new ConfigurationEvent(this,\n+        final ConfigurationEvent event = new ConfigurationEvent(this,\n+        final ConfigurationEvent event = new ConfigurationEvent(this,\n+        final ConfigurationEvent event = new ConfigurationEvent(this,\n+        final ConfigurationEvent event = new ConfigurationEvent(this,\n+        final PropertiesBuilder b = new PropertiesBuilder();\n+        final String output = getLayoutString();\n+        final PropertiesConfigurationLayout l2 = new PropertiesConfigurationLayout(layout);\n+        for (final String key : layout.getKeys())\n+        final PropertiesConfigurationLayout l2 = new PropertiesConfigurationLayout(layout);\n+        catch (final ConfigurationException cex)\n+        final StringWriter out = new StringWriter();\n+    private void checkLayoutString(final String expected)\n+        public void addLine(final String s)\n+        public void addProperty(final String key, final String value)\n+        public void addComment(final String s)\n+        boolean propertyLoaded(final String key, final String value)\n+        final String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testSequence.properties\").getAbsolutePath();\n+        final String compositeConfigurationFile = ConfigurationAssert.getTestFile(\"testSequenceDigester.xml\").getAbsolutePath();\n+        final PropertiesConfiguration simpleConfiguration = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(simpleConfiguration);\n+        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n+        final Configuration compositeConfiguration = builder.getConfiguration();\n+        final Configuration a = simpleConfiguration.subset(\"prefix\");\n+        final Configuration b = compositeConfiguration.subset(\"prefix\");\n+        final List<String> keysSimpleConfiguration = ConfigurationAssert.keysToList(a);\n+        final List<String> keysCompositeConfiguration = ConfigurationAssert.keysToList(b);\n+        final String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testSequence.properties\").getAbsolutePath();\n+        final String compositeConfigurationFile = ConfigurationAssert.getTestFile(\"testSequenceDigester.xml\").getAbsolutePath();\n+        final PropertiesConfiguration simpleConfiguration = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(simpleConfiguration);\n+        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n+        final Configuration compositeConfiguration = builder.getConfiguration();\n+        final Configuration a = simpleConfiguration.subset(\"prefix\");\n+        final Configuration b = compositeConfiguration.subset(\"prefix\");\n+        final List<String> keysSimpleConfiguration = ConfigurationAssert.keysToList(a);\n+        final List<String> keysCompositeConfiguration = ConfigurationAssert.keysToList(b);\n+        final String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testSequence.properties\").getAbsolutePath();\n+        final String compositeConfigurationFile = ConfigurationAssert.getTestFile(\"testSequenceDigester.xml\").getAbsolutePath();\n+        final PropertiesConfiguration simpleConfiguration = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(simpleConfiguration);\n+        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n+        final Configuration compositeConfiguration = builder.getConfiguration();\n+        final Configuration mapping = new BaseConfiguration();\n+        final Configuration mapping2 = new BaseConfiguration();\n+        for (final Iterator<String> keys = simpleConfiguration.getKeys(); keys.hasNext();)\n+            final String key = keys.next();\n+            final String[] keyParts = StringUtils.split(key, \".\");\n+                final String serviceKey = keyParts[1];\n+        for (final Iterator<String> keys = compositeConfiguration.getKeys(); keys.hasNext();)\n+            final String key = keys.next();\n+            final String[] keyParts = StringUtils.split(key, \".\");\n+                final String serviceKey = keyParts[1];\n+        final Configuration other = new BaseConfiguration();\n+        final BaseHierarchicalConfiguration conf =\n+    private static void appendTree(final BaseHierarchicalConfiguration configuration,\n+            final ImmutableNode root)\n+    private void setUpSubnodeConfig(final String key)\n+    private TrackedNodeModel setUpTrackedModel(final NodeSelector selector)\n+        final InMemoryNodeModel parentModel = (InMemoryNodeModel) parent.getModel();\n+        final List<Object> fields = config.getList(\"fields.field.name\");\n+        final List<Object> fields = config.getList(\"fields.field.name\");\n+        final Set<String> keys = new HashSet<>();\n+        final ListDelimiterHandler handler1 = new DefaultListDelimiterHandler('/');\n+        final ListDelimiterHandler handler2 = new DefaultListDelimiterHandler(';');\n+        final Set<String> keys = ConfigurationAssert.keysToSet(config);\n+        final HierarchicalConfiguration<ImmutableNode> sub2 =\n+        final SubnodeConfiguration sub2 =\n+    private void checkInterpolationFromConfigurationAt(final boolean withUpdates)\n+        final Configuration sub =\n+        final Configuration sub = parent.configurationAt(\"test.absolute.dir\");\n+        final ConfigurationInterpolator interpolator = parent.getInterpolator();\n+            public String lookup(final String key) {\n+        final SubnodeConfiguration copy = (SubnodeConfiguration) config.clone();\n+        final TrackedNodeModel subModel = (TrackedNodeModel) copy.getModel();\n+        final InMemoryNodeModel parentModel = (InMemoryNodeModel) parent.getModel();\n+        final TrackedNodeModel model = EasyMock.createMock(TrackedNodeModel.class);\n+        final SubnodeConfiguration config = new SubnodeConfiguration(parent, model);\n+        final InMemoryNodeModel nodeModel = config.getNodeModel();\n+        final Configuration conf = new BaseConfiguration();\n+        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n+        final Configuration conf = new BaseConfiguration();\n+        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n+        final Configuration conf = new BaseConfiguration();\n+        final Configuration conf = new BaseConfiguration();\n+        final Configuration conf = new BaseConfiguration();\n+        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n+        final Iterator<String> it = subset.getKeys();\n+        final Configuration conf = new BaseConfiguration();\n+        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n+        final Iterator<String> it = subset.getKeys(\"abc\");\n+        final BaseConfiguration conf = new BaseConfiguration();\n+        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n+        final List<Object> list = subset.getList(\"abc\", new ArrayList<>());\n+        final Configuration conf = new BaseConfiguration();\n+        final SubsetConfiguration subset = new SubsetConfiguration(conf, \"prefix\", \".\");\n+        final Configuration conf = new BaseConfiguration();\n+        final SubsetConfiguration subset = new SubsetConfiguration(conf, \"prefix\", \".\");\n+        final Configuration conf = new BaseConfiguration();\n+        final SubsetConfiguration subset = new SubsetConfiguration(conf, null, \".\");\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final SubsetConfiguration subset = new SubsetConfiguration(config, \"prefix\");\n+        catch (final NoSuchElementException e)\n+        catch (final NoSuchElementException e)\n+        final CombinedConfigurationBuilder builder =\n+        final Configuration config = builder.getConfiguration();\n+        final Configuration subConf = config.subset(\"tables.table(0)\");\n+        final Configuration subSubConf = subConf.subset(\"fields.field(1)\");\n+        final Iterator<String> itKeys = subSubConf.getKeys();\n+        final Set<String> keys = new HashSet<>();\n+            final String k = itKeys.next();\n+        final Configuration config = new BaseConfiguration();\n+        final Configuration subset = config.subset(\"test\");\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final Configuration subset = config.subset(\"prefix\");\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final AbstractConfiguration subset =\n+        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final AbstractConfiguration subset =\n+        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n+        final Configuration config = EasyMock.createNiceMock(Configuration.class);\n+        final SubsetConfiguration subset = new SubsetConfiguration(config, \"prefix\");\n+        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final AbstractConfiguration subset = (AbstractConfiguration) config\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final ConfigurationInterpolator interpolator = config.getInterpolator();\n+            public String lookup(final String key) {\n+        final AbstractConfiguration subset = (AbstractConfiguration) config\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final AbstractConfiguration subset = (AbstractConfiguration) config\n+        final Properties props = System.getProperties();\n+        final Configuration conf = new SystemConfiguration();\n+        final PropertiesConfiguration props = new PropertiesConfiguration();\n+        final File file = folder.newFile(\"sys.properties\");\n+        final PropertiesConfiguration pconfig = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(pconfig);\n+        final SystemConfiguration sconf = new SystemConfiguration();\n+        final String testProperty = \"someTest\";\n+        final SystemConfiguration config = new SystemConfiguration();\n+        final Thread t = new Thread()\n+            final SystemConfiguration config = new SystemConfiguration();\n+            final PropertiesConfiguration props = new PropertiesConfiguration();\n+            for (final Iterator<String> keys = config.getKeys(); keys.hasNext();)\n+                final String key = keys.next();\n+        final PropertiesConfiguration c = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(c);\n+        final List<Object> packages = conf.getList(\"test.threesome.one\");\n+        final List<Object> packages = conf.getList(\"test.threesome.two\");\n+        final List<Object> packages = conf.getList(\"test.threesome.three\");\n+    private static void load(final XMLConfiguration config, final String fileName)\n+        final FileHandler handler = new FileHandler(config);\n+    private static XMLConfiguration createFromFile(final String fileName)\n+        final XMLConfiguration config = new XMLConfiguration();\n+        final String key = \"clearly\";\n+        final String key = \"clear.element\";\n+        final String key = \"clear.comment\";\n+        final String key = \"clear.cdata\";\n+        final String key = \"list.item\";\n+        final String key = \"clear[@id]\";\n+        final List<Object> list = conf.getList(\"element3[@name]\");\n+        final XMLConfiguration checkConf = checkSavedConfig();\n+        final List<Object> list = conf.getList(\"test.array\");\n+        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n+        final XMLConfiguration checkConfig =\n+        final String xml = \"<?xml version=\\\"1.0\\\"?><config><test>1</test></config>\";\n+        final String xml = \"<?xml version=\\\"1.0\\\"?><config><test>1</rest></config>\";\n+        final FileHandler handler = new FileHandler(conf);\n+        final XMLConfiguration config = new XMLConfiguration();\n+        final FileHandler handler = new FileHandler(conf);\n+        final FileHandler handler = new FileHandler(conf);\n+        final FileHandler handler = new FileHandler(conf);\n+        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+        final DocumentBuilder builder = factory.newDocumentBuilder();\n+            public void error(final SAXParseException ex) throws SAXException\n+        final DocumentBuilder builder = createValidatingDocBuilder();\n+        final DocumentBuilder builder = createValidatingDocBuilder();\n+        final Configuration c = (Configuration) conf.clone();\n+        final XMLConfiguration copy = (XMLConfiguration) c;\n+        final XMLConfiguration c = (XMLConfiguration) conf.clone();\n+        final XMLConfiguration c2 = new XMLConfiguration();\n+        final XMLConfiguration conf2 = new XMLConfiguration();\n+        final XMLConfiguration conf2 = new XMLConfiguration();\n+        final XMLConfiguration checkConfig = new XMLConfiguration();\n+        final File nonValidFile = ConfigurationAssert.getTestFile(\"testValidateInvalid.xml\");\n+        final FileHandler handler = new FileHandler(conf);\n+        final StringWriter out = new StringWriter();\n+        final FileHandler handler = new FileHandler(conf);\n+        final StringWriter out = new StringWriter();\n+        final FileHandler handler = new FileHandler(conf);\n+        final StringWriter out = new StringWriter();\n+        final FileHandler handler = new FileHandler(conf);\n+        final StringWriter out = new StringWriter();\n+        final StringWriter out = new StringWriter();\n+        final StringWriter out = new StringWriter();\n+        catch (final TransformerFactoryConfigurationError cex)\n+        final XMLConfiguration copy = new XMLConfiguration(conf);\n+        final StringReader in = new StringReader(xml);\n+        final FileHandler handler = new FileHandler(conf);\n+            final String idxStr = String.format(\"(%d)\", Integer.valueOf(i + 3));\n+            final String nodeKey = \"attrList.a\" + idxStr;\n+        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n+        final Configuration sub = conf.configurationAt(\"element2.subelement\", true);\n+        final XMLConfiguration conf2 = new XMLConfiguration();\n+        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n+        final HierarchicalConfiguration<?> sub1 = conf.configurationAt(\"element2\", true);\n+        final HierarchicalConfiguration<?> sub2 = sub1.configurationAt(\"subelement\", true);\n+        final XMLConfiguration conf2 = new XMLConfiguration();\n+    private void checkSaveDelimiterParsingDisabled(final String key)\n+        final XMLConfiguration checkConf = new XMLConfiguration();\n+        final List<Object> expr = conf.getList(\"expressions[@value]\");\n+        final XMLConfiguration checkConfig = new XMLConfiguration();\n+        final XMLConfiguration c2 = new XMLConfiguration();\n+        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n+        final ImmutableNode node = NodeStructureHelper.createNode(\n+        final Collection<ImmutableNode> nodes = new ArrayList<>(1);\n+        final XMLConfiguration c2 = new XMLConfiguration();\n+        final ImmutableNode.Builder bldrNode = new ImmutableNode.Builder(1);\n+        final ImmutableNode node2 = NodeStructureHelper.createNode(\"test2\", null);\n+        final XMLConfiguration c2 = new XMLConfiguration();\n+        final HierarchicalConfiguration<ImmutableNode> hc =\n+        final XMLConfiguration checkConfig = checkSavedConfig();\n+        final XMLConfiguration copy = new XMLConfiguration(conf);\n+        final CatalogResolver resolver = new CatalogResolver();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final CatalogResolver resolver = new CatalogResolver();\n+        catch (final Exception e)\n+            final Throwable cause = e.getCause();\n+        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n+        final Thread testThreads[] = new Thread[THREAD_COUNT];\n+        for (final Thread testThread : testThreads) {\n+        final StringWriter writer = new StringWriter();\n+        final String content = writer.toString();\n+        final XMLConfiguration conf2 = new XMLConfiguration();\n+        final String key = \"element3[@value]\";\n+        final HierarchicalConfiguration<ImmutableNode> sub =\n+        final String prop = \"delimiterListProp\";\n+        final List<String> list = Arrays.asList(\"val\", \"val2\", \"val3\");\n+        final XMLConfiguration conf2 = new XMLConfiguration();\n+        final String prop = \"delimiterListProp\";\n+        final List<String> list = Arrays.asList(\"val\", \"val2\", \"val3\");\n+        final XMLConfiguration conf2 = new XMLConfiguration();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final String content = \"<configuration><test>1</test></configuration>\";\n+        final ByteArrayInputStream bis = new ByteArrayInputStream(content.getBytes());\n+        catch (final ConfigurationException e)\n+        final FileHandler handler = new FileHandler(conf);\n+    private XMLConfiguration checkSavedConfig(final File saveFile)\n+        final XMLConfiguration config = createFromFile(saveFile.getAbsolutePath());\n+        ReloadThread(final FileBasedConfigurationBuilder<?> confBulder)\n+    private static void checkConfiguration(final Configuration config)\n+    private static Configuration create(final String content) throws ConfigurationException\n+        final XMLConfiguration config = new XMLConfiguration();\n+        final FileHandler handler = new FileHandler(config);\n+    private static Configuration create(final String content, final ListDelimiterHandler delimiterHandler)\n+        final XMLConfiguration config = new XMLConfiguration();\n+        final FileHandler handler = new FileHandler(config);\n+        final String source = \"<configuration><key0></key0><key1></key1><key2></key2><key3></key3></configuration>\";\n+        final String source = \"<configuration><key0></key0><key1>,</key1><key2></key2><key3></key3></configuration>\";\n+        final String source = \"<configuration><key0></key0><key1>a,b</key1><key2></key2><key3></key3></configuration>\";\n+        final String source = \"<configuration><key0></key0><key1>,</key1> <key2></key2><key3></key3></configuration>\";\n+        final String source = \"<configuration><key0></key0><key1>,</key1>A<key2></key2><key3></key3></configuration>\";\n+        final String source = \"<configuration><key0></key0><key1>,</key1><key2></key2><key3></key3></configuration>\";\n+        final StringBuilder sourceBuilder = new StringBuilder(\"<configuration>\");\n+        final StringBuilder sourceBuilder = new StringBuilder(\"<configuration>\");\n+    private static Document loadDocument(final String name) throws IOException,\n+        final DocumentBuilder builder =\n+    private static String documentToString(final XMLDocumentHelper helper)\n+    private static String documentToString(final Document document)\n+        final Transformer transformer = XMLDocumentHelper.createTransformer();\n+        final StringWriter writer = new StringWriter();\n+        final Result result = new StreamResult(writer);\n+        final TransformerConfigurationException cause =\n+        catch (final ConfigurationException cex)\n+        final Transformer transformer = EasyMock.createMock(Transformer.class);\n+        final Source src = EasyMock.createMock(Source.class);\n+        final Result res = EasyMock.createMock(Result.class);\n+        final TransformerException tex = new TransformerException(\"Test Exception\");\n+        catch (final ConfigurationException cex)\n+        final DocumentBuilderFactory factory =\n+        final ParserConfigurationException pcex = new ParserConfigurationException();\n+        catch (final ConfigurationException cex)\n+        final XMLDocumentHelper helper = XMLDocumentHelper.forNewDocument(ELEMENT);\n+        final Document doc = helper.getDocument();\n+        final Element rootElement = doc.getDocumentElement();\n+        final NodeList childNodes = rootElement.getChildNodes();\n+        final XMLDocumentHelper helper = XMLDocumentHelper.forNewDocument(ELEMENT);\n+        final Document doc = loadDocument();\n+        final XMLDocumentHelper helper = XMLDocumentHelper.forSourceDocument(doc);\n+        final Document doc = loadDocument();\n+        final XMLDocumentHelper helper = XMLDocumentHelper.forSourceDocument(doc);\n+        final XMLDocumentHelper helper =\n+        final XMLDocumentHelper copy = helper.createCopy();\n+        final String doc1 = documentToString(helper);\n+        final String doc2 = documentToString(copy);\n+    private void checkCopyElementMapping(final String file) throws Exception\n+        final XMLDocumentHelper helper =\n+        final XMLDocumentHelper copy = helper.createCopy();\n+        final Collection<Node> texts = findTextElements(helper.getDocument());\n+        for (final Node n : texts)\n+            final Text txtSrc = (Text) n;\n+            final Text txtCopy = (Text) copy.getElementMapping().get(n);\n+    private static Collection<Node> findTextElements(final Document document)\n+        final Collection<Node> texts = new HashSet<>();\n+    private static void findTextElementsForNode(final Node node,\n+            final Collection<Node> texts)\n+        final NodeList childNodes = node.getChildNodes();\n+    private static XMLConfiguration readFromString(final String xml)\n+        final XMLConfiguration config = new XMLConfiguration();\n+        final FileHandler handler = new FileHandler(config);\n+        final StringWriter writer = new StringWriter(4096);\n+        final FileHandler handler = new FileHandler(config);\n+    private static String element(final String key, final String value)\n+    private static void checkCommaSeparated(final String xml, final String key,\n+            final String... values)\n+        final String strValues = StringUtils.join(values, ',');\n+        final String element = element(key, strValues);\n+    private static void checkSplit(final String xml, final String key, final String... values)\n+        for (final String v : values)\n+        final String xml = saveToString();\n+        final String xml = saveToString();\n+        final String xml = saveToString();\n+        final List<String> expected = Arrays.asList(\"foo\", \"blah\", \"bar\", \"baz\");\n+        final String xml = saveToString();\n+        final XMLConfiguration c2 = readFromString(xml);\n+    private static XMLPropertiesConfiguration load(final String fileName)\n+        final XMLPropertiesConfiguration conf = new XMLPropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(conf);\n+        final XMLPropertiesConfiguration conf = load(TEST_PROPERTIES_FILE);\n+        final URL location = ConfigurationAssert.getTestURL(TEST_PROPERTIES_FILE);\n+        final DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+        final DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n+            public InputSource resolveEntity(final String publicId, final String systemId)\n+        final File file = new File(location.toURI());\n+        final Document doc = dBuilder.parse(file);\n+        final XMLPropertiesConfiguration conf = new XMLPropertiesConfiguration(doc.getDocumentElement());\n+        final XMLPropertiesConfiguration conf = load(TEST_PROPERTIES_FILE);\n+        final File saveFile = folder.newFile(\"test2.properties.xml\");\n+        final FileHandler saveHandler = new FileHandler(conf);\n+        final XMLPropertiesConfiguration conf2 = load(saveFile.getAbsolutePath());\n+        final XMLPropertiesConfiguration conf = load(TEST_PROPERTIES_FILE);\n+        final File saveFile = folder.newFile(\"test2.properties.xml\");\n+        final DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+        final DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n+        final Document document = dBuilder.newDocument();\n+        final TransformerFactory tFactory = TransformerFactory.newInstance();\n+        final Transformer transformer = tFactory.newTransformer();\n+        final DOMSource source = new DOMSource(document);\n+        final Result result = new StreamResult(saveFile);\n+        final XMLPropertiesConfiguration conf2 = load(saveFile.getAbsolutePath());\n+    private final String testYaml =\n+        final Configuration subset = yamlConfiguration.subset(\"key4\");\n+        final Object property =\n+        final Object property = yamlConfiguration.getProperty(\"int1\");\n+        final StringWriter sw = new StringWriter();\n+        final String output = sw.toString();\n+        final Map parsed = new Yaml().loadAs(output, Map.class);\n+        final Map key2 = (Map) parsed.get(\"key2\");\n+        final List<String> key5 =\n+        final BaseHierarchicalConfiguration c = new BaseHierarchicalConfiguration();\n+    public void setBuddy(final BeanCreationTestBean buddy)\n+    public void setIntValue(final int intValue)\n+    public void setStringValue(final String stringValue)\n+    public void setChildren(final List<BeanCreationTestBean> buddies)\n+    public void setIntValue(final int intValue)\n+    public void setStringValue(final String stringValue)\n+    public BeanCreationTestCtorBean(final BeanCreationTestBean buddy)\n+    public BeanCreationTestCtorBean(final String s)\n+    public BeanCreationTestCtorBean(final String s, final int i)\n+    public void setBeanClassName(final String beanClassName)\n+    public void setBeanFactoryName(final String beanFactoryName)\n+    public void setBeanFactoryParameter(final Object beanFactoryParameter)\n+    public void setBeanProperties(final Map<String, Object> beanProperties)\n+            final Map<String, Object> nestedBeanDeclarations)\n+    public void setConstructorArgs(final Collection<ConstructorArg> args)\n+        final BeanFactory factory = EasyMock.createMock(BeanFactory.class);\n+        final BeanFactory factory = new TestBeanFactory();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final BeanCreationTestBean bean = new BeanCreationTestBean();\n+        final BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n+        final BeanCreationTestBean bean = new BeanCreationTestBean();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final TestBeanFactory factory = new TestBeanFactory();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final TestBeanFactory factory = new TestBeanFactory();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclarationWithListChild();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final TestBeanFactory factory = new TestBeanFactory();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final TestBeanFactory factory = (TestBeanFactory) helper.getDefaultBeanFactory();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final Object param = new Integer(42);\n+        final TestBeanFactory factory = new TestBeanFactory();\n+        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final DynaBean bean = BeanHelper.createWrapDynaBean(config);\n+        final String value = \"TestFooter\";\n+        final PropertiesConfiguration src = new PropertiesConfiguration();\n+        final LazyDynaBean dest = new LazyDynaBean();\n+        final BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n+        final Map<String, Object> properties = new HashMap<>();\n+        final BeanDeclarationTestImpl buddyData = new BeanDeclarationTestImpl();\n+        final Map<String, Object> properties2 = new HashMap<>();\n+        final Map<String, Object> nested = new HashMap<>();\n+        final BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n+        final Map<String, Object> properties = new HashMap<>();\n+        final List<BeanDeclaration> childData = new ArrayList<>();\n+        final Map<String, Object> nested = new HashMap<>();\n+    private BeanDeclarationTestImpl createChildBean(final String name)\n+        final BeanDeclarationTestImpl childBean = new BeanDeclarationTestImpl();\n+        final Map<String, Object> properties2 = new HashMap<>();\n+    private void checkBean(final BeanCreationTestBean bean)\n+        final BeanCreationTestBean buddy = bean.getBuddy();\n+    private void checkBean(final BeanCreationTestBeanWithListChild bean)\n+        final List<BeanCreationTestBean> children = bean.getChildren();\n+        public Object createBean(final BeanCreationContext bcc) throws Exception\n+                final BeanCreationTestBean bean = new BeanCreationTestBean();\n+                final BeanCreationTestBeanWithListChild bean =\n+    private BeanDeclaration decl(final int idx)\n+        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n+        final String name = \"someTestBeanFactory\";\n+        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration();\n+        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n+        final Object param = new Object();\n+        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration();\n+        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n+        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration();\n+        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n+        final Collection<ConstructorArg> args =\n+        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n+        final Map<String, Object> props1 = new HashMap<>();\n+        final Map<String, Object> props2 = new HashMap<>();\n+        final Map<String, Object> props3 = new HashMap<>();\n+        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n+        final Map<String, Object> props = cd.getBeanProperties();\n+        final BeanDeclaration child = EasyMock.createMock(BeanDeclaration.class);\n+        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration(child);\n+        final Map<String, Object> decls1 = new HashMap<>();\n+        final Map<String, Object> decls2 = new HashMap<>();\n+        final Map<String, Object> decls3 = new HashMap<>();\n+        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n+        final Map<String, Object> decls = cd.getNestedBeanDeclarations();\n+        final BeanDeclaration child = EasyMock.createMock(BeanDeclaration.class);\n+        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration(child);\n+        final Configuration configuration = createConfiguration();\n+        for (final int element : intArray) {\n+        for (final String element : stringArray) {\n+        final List<String> list = Arrays.asList(stringArray);\n+        final DynaProperty descriptor = bean.getDynaClass().getDynaProperty(\"unknown\");\n+        final DynaProperty pd[] = bean.getDynaClass().getDynaProperties();\n+        final int count[] = new int[properties.length];\n+        for (final DynaProperty element : pd) {\n+            final String name = element.getName();\n+            final Object value = bean.get(\"mappedProperty\", \"unknown\");\n+        catch (final Throwable t)\n+        final Object value = bean.get(\"booleanProperty\");\n+        final Object value = bean.get(\"doubleProperty\");\n+        final Object value = bean.get(\"floatProperty\");\n+        final Object value = bean.get(\"intProperty\");\n+        final Object value = bean.get(\"longProperty\");\n+        final Object value = bean.get(\"shortProperty\");\n+        final Object value = bean.get(\"stringProperty\");\n+        final MapConfiguration configuration = new MapConfiguration(new HashMap<String, Object>());\n+        final ConfigurationDynaBean bean = new ConfigurationDynaBean(configuration);\n+        final Object value = bean.get(\"objectArray\", 1);\n+        final boolean oldValue = ((Boolean) bean.get(\"booleanProperty\")).booleanValue();\n+        final boolean newValue = !oldValue;\n+        final double oldValue = ((Double) bean.get(\"doubleProperty\")).doubleValue();\n+        final double newValue = oldValue + 1.0;\n+        final float oldValue = ((Float) bean.get(\"floatProperty\")).floatValue();\n+        final float newValue = oldValue + (float) 1.0;\n+        final int oldValue = ((Integer) bean.get(\"intProperty\")).intValue();\n+        final int newValue = oldValue + 1;\n+        final long oldValue = ((Long) bean.get(\"longProperty\")).longValue();\n+        final long newValue = oldValue + 1;\n+        final short oldValue = ((Short) bean.get(\"shortProperty\")).shortValue();\n+        final short newValue = (short) (oldValue + 1);\n+        final String oldValue = (String) bean.get(\"stringProperty\");\n+        final String newValue = oldValue + \" Extra Value\";\n+    protected void testGetDescriptorBase(final String name, final Class<?> type)\n+        final DynaProperty descriptor = bean.getDynaClass().getDynaProperty(name);\n+        final ConfigurationDynaBean nested = (ConfigurationDynaBean) bean.get(\"mappedProperty\");\n+        final String value = (String) nested.get(\"key1\");\n+        final BeanDeclaration decl = EasyMock.createMock(BeanDeclaration.class);\n+        final ConstructorArg arg = ConstructorArg.forBeanDeclaration(decl);\n+        final ConstructorArg arg = ConstructorArg.forValue(\"test\");\n+        final ConstructorArg arg = ConstructorArg.forValue(42);\n+        final ConstructorArg arg = ConstructorArg.forValue(\"42\", int.class.getName());\n+        final ConstructorArg arg = ConstructorArg.forValue(0);\n+            public void initBean(final Object bean, final BeanDeclaration data)\n+            public Object createBean(final BeanDeclaration data)\n+        final ConversionHandler handler =\n+        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n+        final Map<String, Object> props = new HashMap<>();\n+        final Object bean = factory.createBean(createBcc(PropertiesConfiguration.class, decl));\n+        final PropertiesConfiguration config = (PropertiesConfiguration) bean;\n+        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n+        final Collection<ConstructorArg> args = new ArrayList<>();\n+        final BeanCreationTestCtorBean bean =\n+        final BeanDeclarationTestImpl declNested = new BeanDeclarationTestImpl();\n+        final Collection<ConstructorArg> args = new ArrayList<>();\n+        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n+        final BeanCreationTestCtorBean bean =\n+        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n+        final Constructor<BeanCreationTestBean> ctor =\n+        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n+        final Collection<ConstructorArg> args = new ArrayList<>();\n+        final Constructor<BeanCreationTestCtorBean> ctor =\n+        final Class<?>[] paramTypes = ctor.getParameterTypes();\n+        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n+        final Collection<ConstructorArg> args = new ArrayList<>();\n+        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n+        final Collection<ConstructorArg> args = new ArrayList<>();\n+        final Constructor<BeanCreationTestCtorBean> ctor =\n+        final Class<?>[] paramTypes = ctor.getParameterTypes();\n+        final BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n+        final Map<String, Object> properties = new HashMap<>();\n+        final BeanDeclarationTestImpl buddyData = new BeanDeclarationTestImpl();\n+        final Map<String, Object> properties2 = new HashMap<>();\n+        final Map<String, Object> nested = new HashMap<>();\n+        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n+        final Collection<ConstructorArg> args = new ArrayList<>();\n+        catch (final ConfigurationRuntimeException crex)\n+            final String msg = crex.getMessage();\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n+        final BaseHierarchicalConfiguration config =\n+        final XMLBeanDeclaration decl =\n+        final BaseHierarchicalConfiguration config =\n+        final XMLBeanDeclaration decl =\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n+        final Map<String, Object> props = decl.getBeanProperties();\n+        final BaseHierarchicalConfiguration config =\n+        final String keyCtorArg = KEY + \".config-constrarg\";\n+        final BaseHierarchicalConfiguration config = prepareNestedBeanDeclarations();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final Map<String, Object> nested = decl.getNestedBeanDeclarations();\n+            final XMLBeanDeclaration d = (XMLBeanDeclaration) nested\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final String key = KEY + \".address..private\";\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final Map<String, Object> nested = decl.getNestedBeanDeclarations();\n+        final BaseHierarchicalConfiguration config = prepareNestedBeanDeclarations();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY)\n+            BeanDeclaration createBeanDeclaration(final NodeData<?> node)\n+        final Map<String, Object> nested = decl.getNestedBeanDeclarations();\n+        for (final String element : COMPLEX_PROPS) {\n+            final Object d = nested.get(element);\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final Map<String, Object> nested = decl.getNestedBeanDeclarations();\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final String[] varValues = new String[TEST_PROPS.length];\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, \"undefined_key\", true);\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final BaseHierarchicalConfiguration config = prepareNestedBeanDeclarations();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final Collection<ConstructorArg> args = decl.getConstructorArgs();\n+        final Iterator<ConstructorArg> it = args.iterator();\n+        final ConstructorArg arg1 = it.next();\n+        final ConstructorArg arg2 = it.next();\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final Collection<ConstructorArg> args = decl.getConstructorArgs();\n+        final ConstructorArg arg = args.iterator().next();\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final String expectedValue = \"ctorArg\";\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final Collection<ConstructorArg> args = decl.getConstructorArgs();\n+        final ConstructorArg arg = args.iterator().next();\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final String value = \"${value}\";\n+        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n+        final Collection<ConstructorArg> args = decl.getConstructorArgs();\n+        final ConstructorArg arg = args.iterator().next();\n+    private static void setupBeanDeclaration(final HierarchicalConfiguration<?> config,\n+            final String key, final String[] names, final String[] values)\n+    private static void checkProperties(final BeanDeclaration beanDecl, final String[] names,\n+            final String[] values)\n+        final Map<String, Object> props = beanDecl.getBeanProperties();\n+        public XMLBeanDeclarationTestImpl(final HierarchicalConfiguration<?> config,\n+                final NodeData<?> node)\n+    public void onEvent(final ConfigurationBuilderEvent event)\n+            final EventType<T> eventType)\n+        final Iterator<ConfigurationBuilderEvent> it = initIterator();\n+        final ConfigurationBuilderEvent nextEvent = it.next();\n+        final\n+    public void setIntProperty(final int intProperty)\n+    public void setStringProperty(final String stringProperty)\n+    public ParametersBeanTestImpl setFluentProperty(final String value)\n+    public ParametersBeanTestImpl setFluentPropertyWithGet(final String s)\n+    private void fireChangeEvent(final boolean before)\n+        final FileHandler handler = EasyMock.createMock(FileHandler.class);\n+        final FileHandler handler2 = EasyMock.createMock(FileHandler.class);\n+        final FileHandler handler = EasyMock.createMock(FileHandler.class);\n+        final FileHandler handler = new FileHandler();\n+        final Map<String, Object> paramMap = params.getParameters();\n+        final Map<String, Object> map1 = params.getParameters();\n+        final Map<String, Object> mapCopy = new HashMap<>(map1);\n+        final Map<String, Object> map2 = params.getParameters();\n+        final ConfigurationLogger log = EasyMock.createMock(ConfigurationLogger.class);\n+        final ListDelimiterHandler handler =\n+        final ConfigurationInterpolator ci =\n+        final Lookup look = EasyMock.createMock(Lookup.class);\n+        final Map<String, Lookup> lookups = Collections.singletonMap(\"test\", look);\n+        final Map<?, ?> map = (Map<?, ?>) params.getParameters().get(\"prefixLookups\");\n+        final Map<?, ?> map2 = (Map<?, ?>) params.getParameters().get(\"prefixLookups\");\n+        final Lookup look = EasyMock.createMock(Lookup.class);\n+        final Collection<Lookup> looks = Collections.singleton(look);\n+        final Collection<?> col =\n+        final Collection<?> col2 =\n+        final ConfigurationInterpolator parent =\n+        final Lookup look1 = EasyMock.createMock(Lookup.class);\n+        final Lookup look2 = EasyMock.createMock(Lookup.class);\n+        final ConfigurationInterpolator parent =\n+        final ConfigurationInterpolator ci =\n+        final Map<String, Object> map = params.getParameters();\n+        final ListDelimiterHandler handler1 = EasyMock.createMock(ListDelimiterHandler.class);\n+        final ListDelimiterHandler handler2 = EasyMock.createMock(ListDelimiterHandler.class);\n+        final Map<String, Object> props = new HashMap<>();\n+        final BuilderParameters p = EasyMock.createMock(BuilderParameters.class);\n+        final Map<String, Object> map = params.getParameters();\n+        final ConfigurationInterpolator parent =\n+        final Lookup l1 = EasyMock.createMock(Lookup.class);\n+        final Lookup l2 = EasyMock.createMock(Lookup.class);\n+        final Lookup l3 = EasyMock.createMock(Lookup.class);\n+        final Map<String, Lookup> prefixLookups = new HashMap<>();\n+        final Collection<Lookup> defLookups = Collections.singleton(l3);\n+        final Map<String, Object> map = params.getParameters();\n+        final InterpolatorSpecification spec =\n+        final ConfigurationInterpolator ci =\n+        final InterpolatorSpecification spec =\n+        final Map<String, Object> map = new HashMap<>();\n+        final Map<String, Object> map = new HashMap<>();\n+        final Map<Object, Object> prefix = new HashMap<>();\n+        final Map<String, Object> map = new HashMap<>();\n+        final Map<Object, Object> prefix = new HashMap<>();\n+        final Map<String, Object> map = new HashMap<>();\n+        final InterpolatorSpecification spec =\n+        final ConfigurationLogger log = EasyMock.createMock(ConfigurationLogger.class);\n+        final ConfigurationInterpolator ci =\n+        final ListDelimiterHandler handler1 = EasyMock.createMock(ListDelimiterHandler.class);\n+        final ListDelimiterHandler handler2 = EasyMock.createMock(ListDelimiterHandler.class);\n+        final BasicBuilderParameters clone = params.clone();\n+        final Map<String, Object> map = clone.getParameters();\n+        final Lookup look = EasyMock.createMock(Lookup.class);\n+        final Map<String, Lookup> lookups = Collections.singletonMap(\"test\", look);\n+        final BasicBuilderParameters clone = params.clone();\n+        final Lookup look = EasyMock.createMock(Lookup.class);\n+        final Collection<Lookup> looks = Collections.singleton(look);\n+        final BasicBuilderParameters clone = params.clone();\n+        final Synchronizer sync = EasyMock.createMock(Synchronizer.class);\n+        final ConversionHandler handler =\n+        final BeanHelper helper = new BeanHelper();\n+        final ConfigurationDecoder decoder =\n+        final BeanHelper beanHelper = new BeanHelper();\n+        final ConfigurationDecoder decoder =\n+        final ConversionHandler conversionHandler = new DefaultConversionHandler();\n+        final ListDelimiterHandler listDelimiterHandler =\n+        final ConfigurationLogger logger = new ConfigurationLogger(\"test\");\n+        final Synchronizer synchronizer = new ReadWriteSynchronizer();\n+        final BasicBuilderParameters p2 = new BasicBuilderParameters();\n+        final Map<String, Object> parameters = p2.getParameters();\n+        final BasicBuilderParameters p2 =\n+        final Map<String, Object> parameters = p2.getParameters();\n+        final Map<String, Object> params = new HashMap<>();\n+        final Map<String, Object> params = createTestParameters();\n+        final BasicConfigurationBuilder<Configuration> builder =\n+        final Map<String, Object> params2 =\n+        final Map<String, Object> params = createTestParameters();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Map<String, Object> params2 =\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Map<String, Object> params2 =\n+        final Map<String, Object> params1 = new HashMap<>();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Map<String, Object> params2 =\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Map<String, Object> params = createTestParameters();\n+        final Map<String, Object> params2 = builder.getParameters();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Map<String, Object> params = builder.getParameters();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config =\n+        final CountDownLatch startLatch = new CountDownLatch(1);\n+        final CountDownLatch endLatch = new CountDownLatch(threadCount);\n+        final ConfigurationBuilder<?> builder =\n+        final AccessBuilderThread[] threads = new AccessBuilderThread[threadCount];\n+        final Set<Object> results = new HashSet<>();\n+        for (final AccessBuilderThread t : threads)\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final PropertiesConfiguration config2 = builder.getConfiguration();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final PropertiesConfiguration config2 = builder.getConfiguration();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+                            final Map<String, Object> params)\n+        final\n+        final EventListener<ConfigurationEvent> l1 = createEventListener();\n+        final EventListener<ConfigurationEvent> l2 = createEventListener();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n+        final EventListener<ConfigurationEvent> l1 = createEventListener();\n+        final EventListener<ConfigurationEvent> l2 = createEventListener();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final EventListener<ConfigurationEvent> l1 = createEventListener();\n+        final EventListener<ConfigurationEvent> l2 = createEventListener();\n+        final EventListener<ConfigurationErrorEvent> l3 = new ErrorListenerTestImpl(null);\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final BasicConfigurationBuilder<XMLConfiguration> builder2 =\n+        final XMLConfiguration config = builder2.getConfiguration();\n+        final Collection<EventListener<? super ConfigurationErrorEvent>> errListeners =\n+        final EventListenerTestImpl listener1 = new EventListenerTestImpl(null);\n+        final EventListenerRegistrationData<ConfigurationErrorEvent> regData =\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final EventListenerTestImpl listener = new EventListenerTestImpl(null);\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final Map<String, Object> params = new HashMap<>();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final BasicConfigurationBuilderInitFailImpl builder =\n+        final BasicConfigurationBuilderInitFailImpl builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final BasicConfigurationBuilder<InitializableConfiguration> builder =\n+        final InitializableConfiguration config = builder.getConfiguration();\n+        final BeanFactory factory = new DefaultBeanFactory()\n+            public Object createBean(final BeanCreationContext bcc) throws Exception\n+        final BeanHelper helper = new BeanHelper(factory);\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final ReloadingDetector detector =\n+        final ReloadingController controller = new ReloadingController(detector);\n+        final BasicConfigurationBuilder<Configuration> builder =\n+        final Configuration configuration = builder.getConfiguration();\n+        final BasicConfigurationBuilder<Configuration> builder =\n+        public AccessBuilderThread(final CountDownLatch lstart, final CountDownLatch lend,\n+                final ConfigurationBuilder<?> bldr)\n+            catch (final Exception ex)\n+        public BasicConfigurationBuilderInitFailImpl(final boolean allowFailOnInit)\n+        protected void initResultInstance(final PropertiesConfiguration obj)\n+        final EventType<ConfigurationBuilderEvent> builderEventType =\n+        final EventType<ConfigurationBuilderEvent> builderResetType =\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+        final EventType<ConfigurationBuilderEvent> eventType =\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+        final ConfigurationBuilderEvent event =\n+        final PropertiesConfiguration configuration = builder.getConfiguration();\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+                    public void onEvent(final ConfigurationBuilderEvent event)\n+        final PropertiesConfiguration configuration2 = builder.getConfiguration();\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+        final PropertiesConfiguration configuration = builder.getConfiguration();\n+        final ConfigurationBuilderResultCreatedEvent event =\n+        final BuilderConfigurationWrapperFactory factory =\n+            final BaseHierarchicalConfiguration conf)\n+        final\n+        catch (final ConfigurationException e)\n+        final BaseHierarchicalConfiguration conf =\n+        final ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n+        final BuilderConfigurationWrapperFactory factory =\n+        final HierarchicalConfiguration<?> wrapper =\n+        final BaseHierarchicalConfiguration conf =\n+        final ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n+        final BuilderConfigurationWrapperFactory factory =\n+        final HierarchicalConfiguration<?> wrapper =\n+        final BaseHierarchicalConfiguration conf =\n+        final ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n+        final BuilderConfigurationWrapperFactory factory =\n+        final EventSource src =\n+        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n+        final EventListener<ConfigurationEvent> l1 = new EventListenerTestImpl(null);\n+        final EventListener<ConfigurationEvent> l2 = new EventListenerTestImpl(null);\n+        final BuilderConfigurationWrapperFactory factory =\n+        final EventSource src =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n+        final BaseHierarchicalConfiguration conf =\n+        final ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n+        final EventListenerTestImpl listener = new EventListenerTestImpl(null);\n+        final BuilderConfigurationWrapperFactory factory =\n+        final EventSource src =\n+        final BuilderConfigurationWrapperFactory factory =\n+        final BuilderConfigurationWrapperFactory factory =\n+        final FileBasedBuilderParametersImpl source =\n+        final CopyObjectDefaultHandler handler = new CopyObjectDefaultHandler(source);\n+        final FileBasedBuilderParametersImpl copy =\n+        final Map<String, Object> map = copy.getParameters();\n+        final XMLBuilderParametersImpl paramsXml = new XMLBuilderParametersImpl();\n+        final CopyObjectDefaultHandler handler =\n+        final FileBasedBuilderParametersImpl paramsFb =\n+        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n+        final XMLBuilderParametersImpl source = new XMLBuilderParametersImpl();\n+        final XMLBuilderParametersImpl dest = new XMLBuilderParametersImpl()\n+                    final ExpressionEngine engine)\n+        final CopyObjectDefaultHandler handler = new CopyObjectDefaultHandler(source);\n+        final DataSource src = EasyMock.createMock(DataSource.class);\n+        final String table = \"TestTable\";\n+        final String colName = \"KEY_COLUMN\";\n+        final String colName = \"VALUE_COLUMN\";\n+        final String colName = \"CONFIG_COLUMN\";\n+        final String confName = \"TestConfiguration\";\n+        final Map<String, Object> map = params.getParameters();\n+    private static void checkDefaultValues(final Map<String, Object> map)\n+        final FileBasedBuilderParametersImpl fbparams =\n+    private static void checkNoDefaultValues(final Map<String, Object> map)\n+        final FileBasedBuilderParametersImpl fbParams =\n+        final FileBasedBuilderParameters params = parameters.fileBased();\n+        final Map<String, Object> map = params.getParameters();\n+        final XMLBuilderParameters params = parameters.xml();\n+        final Map<String, Object> map = params.getParameters();\n+        final XMLBuilderParameters paramsXml = parameters.xml();\n+        final PropertiesBuilderParameters paramsProps = parameters.properties();\n+                            final XMLBuilderParameters parameters)\n+        final XMLBuilderParameters params = parameters.xml();\n+        final Map<String, Object> map = params.getParameters();\n+        final FileBasedDefaultsHandler handler = new FileBasedDefaultsHandler();\n+        final XMLBuilderParameters paramsXml = parameters.xml();\n+        final PropertiesBuilderParameters paramsProps = parameters.properties();\n+        final FileBasedDefaultsHandler handler = new FileBasedDefaultsHandler();\n+        final XMLBuilderParameters paramsXml = parameters.xml();\n+        final PropertiesBuilderParameters paramsProps = parameters.properties();\n+        public void initializeDefaults(final FileBasedBuilderParameters parameters)\n+        final FileHandler handler = new FileHandler();\n+        final FileBasedBuilderParametersImpl params =\n+        final FileHandlerReloadingDetector detector =\n+        final FileHandler handler = new FileHandler();\n+        final FileBasedBuilderParametersImpl params =\n+        final FileHandlerReloadingDetector detector =\n+        final EventListenerParameters parameters = new EventListenerParameters();\n+        final EventListenerParameters parameters = new EventListenerParameters();\n+        final EventListenerTestImpl listener = new EventListenerTestImpl(null);\n+        final EventListenerParameters parameters = new EventListenerParameters();\n+        final EventListenerRegistrationData<?> reg =\n+        final EventListenerRegistrationData<ConfigurationEvent> reg =\n+        final EventListenerParameters parameters = new EventListenerParameters();\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final FileHandler handler = new FileHandler();\n+        final FileBasedBuilderParametersImpl params =\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final ReloadingDetectorFactory factory =\n+        final FileBasedBuilderParametersImpl params =\n+        final File file =\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final URL url = ConfigurationAssert.getTestURL(\"test.properties\");\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final String path =\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final String name = \"testConfig.xml\";\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final String path =\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final FileLocationStrategy strat =\n+        final FileBasedBuilderParametersImpl params =\n+        final String enc = \"ISO-8859-1\";\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final FileBasedBuilderParametersImpl params =\n+        final Map<String, Object> map = params.getParameters();\n+        final FileBasedBuilderParametersImpl params =\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final Map<String, Object> map = params.getParameters();\n+        final FileBasedBuilderParametersImpl params =\n+        final Map<String, Object> map = params.getParameters();\n+        final FileBased content = EasyMock.createMock(FileBased.class);\n+        final FileHandler fh = new FileHandler(content);\n+        final FileBasedBuilderParametersImpl params =\n+        final FileBasedBuilderParametersImpl clone = params.clone();\n+        final ReloadingDetectorFactory factory =\n+        final Map<String, Object> map = new HashMap<>();\n+        final FileBasedBuilderParametersImpl params =\n+        final FileBasedBuilderParametersImpl params =\n+        final FileBasedBuilderParametersImpl params =\n+        final FileBasedBuilderParametersImpl params2 =\n+        final String encoding = \"UTF-16\";\n+        final ReloadingDetectorFactory factory =\n+        final Long refreshDelay = 20160213172611L;\n+        final FileBasedBuilderParametersImpl params =\n+        final FileBasedBuilderParametersImpl params =\n+    private File createTestFile(final int value)\n+        catch (final IOException ioex)\n+                catch (final IOException ioex)\n+        final Map<String, Object> params = new HashMap<>();\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration conf = builder.getConfiguration();\n+        final File file = createTestFile(1);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final File file = createTestFile(1);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final PropertiesConfiguration config2 = builder.getConfiguration();\n+        final File file = createTestFile(1);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final FileLocator locator = builder.getFileHandler().getFileLocator();\n+        final File file1 = createTestFile(1);\n+        final File file2 = createTestFile(2);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final File file = createTestFile(1);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final File file1 = createTestFile(1);\n+        final File file2 = createTestFile(2);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final File file = createTestFile(1);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+    private static void checkSavedConfig(final File file, final int expValue)\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final FileHandler handler = new FileHandler(config);\n+        final File file = createTestFile(1);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final File file = folder.newFile();\n+        final File outFile = ConfigurationAssert.getOutFile(\"save.properties\");\n+        final Parameters parameters = new Parameters();\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder = new FileBasedConfigurationBuilder<>(\n+        final Configuration config = builder.getConfiguration();\n+        final File file = createTestFile(0);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final File file = createTestFile(0);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config1 = builder.getConfiguration();\n+        final PropertiesConfiguration config2 = builder.getConfiguration();\n+        final File file = createTestFile(0);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final File file = folder.newFile();\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final PropertiesConfiguration conf = new PropertiesConfiguration()\n+        final String encoding = \"testEncoding\";\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final FileHandler handler = new FileHandler();\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final FileHandler handler = new FileHandler();\n+        final String encoding = \"testEncoding\";\n+        final String folderName = \"test\";\n+        final String fileName = \"sample.properties\";\n+        final FileBasedConfigurationBuilder<FileBasedConfiguration> homeDirConfigurationBuilder =\n+        final PropertiesBuilderParameters homeDirProperties =\n+        final HomeDirectoryLocationStrategy strategy =\n+        final FileBasedConfigurationBuilder<FileBasedConfiguration> builder =\n+        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n+        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n+        final Map<String, Object> map = params.getParameters();\n+        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n+        final HierarchicalBuilderParametersImpl params =\n+        final HierarchicalBuilderParametersImpl params2 =\n+        final Map<String, Object> parameters = params2.getParameters();\n+        final Context ctx = EasyMock.createMock(Context.class);\n+        final Map<String, Object> paramsMap = params.getParameters();\n+        final String prefix = \"testJndiPrefix\";\n+        final Map<String, Object> paramsMap = params.getParameters();\n+        final Map<String, Object> paramsMap = params.getParameters();\n+        final Context ctx = EasyMock.createMock(Context.class);\n+        final String prefix = \"testJndiPrefix\";\n+        final Map<String, Object> paramsMap = params.getParameters();\n+        final PropertiesConfigurationLayout layout =\n+        final PropertiesConfiguration.IOFactory factory =\n+        final PropertiesConfiguration.IOFactory factory =\n+        final Map<String, Object> paramsMap = params.getParameters();\n+        final PropertiesConfiguration.IOFactory factory =\n+        final PropertiesBuilderParametersImpl params2 =\n+        final Map<String, Object> parameters = params2.getParameters();\n+        final PropertiesConfiguration.IOFactory factory =\n+        final ConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration config = builder.getConfiguration();\n+        final ReloadingDetector detector =\n+        final ReloadingController controller = new ReloadingController(detector);\n+        final BasicConfigurationBuilder<Configuration> builder =\n+        final BuilderEventListenerImpl builderListener =\n+        final ReloadingBuilderSupportListener listener =\n+        final ReloadingController controller =\n+        final BasicConfigurationBuilder<Configuration> builder =\n+        final ReloadingBuilderSupportListener listener =\n+        final Map<String, Object> params = new HashMap<>();\n+        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final PropertiesConfiguration conf = builder.getConfiguration();\n+        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final FileHandler handler = new FileHandler();\n+        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n+        final long refreshDelay = 60000L;\n+        final FileHandlerReloadingDetector detector =\n+        final ReloadingDetector detector =\n+        final ReloadingDetectorFactory factory =\n+        final FileHandler handler = new FileHandler();\n+        final FileBasedBuilderParametersImpl params =\n+        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final ReloadingDetector detector =\n+        final ReloadingFileBasedConfigurationBuilderTestImpl builder =\n+        final ReloadingDetector ctrlDetector =\n+        final ReloadingDetector detector =\n+        final ReloadingFileBasedConfigurationBuilderTestImpl builder =\n+        final ReloadingDetector ctrlDetector =\n+        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final ReloadingDetector ctrlDetector =\n+        final ReloadingDetector detector =\n+        final ReloadingFileBasedConfigurationBuilderTestImpl builder =\n+        final PropertiesConfiguration config1 = builder.getConfiguration();\n+        final PropertiesConfiguration config2 = builder.getConfiguration();\n+        final ReloadingDetector detector =\n+        final ReloadingFileBasedConfigurationBuilderTestImpl builder =\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+                final ReloadingDetector detector)\n+                final FileHandler handler, final FileBasedBuilderParametersImpl fbparams)\n+        final EntityResolver resolver = EasyMock.createMock(EntityResolver.class);\n+        final DocumentBuilder builder = EasyMock.createMock(DocumentBuilder.class);\n+        final String pubID = \"testPublicID\";\n+        final String sysID = \"testSystemID\";\n+        final EntityResolver resolver = EasyMock.createMock(EntityResolver.class);\n+        final DocumentBuilder builder = EasyMock.createMock(DocumentBuilder.class);\n+        final Map<String, Object> paramsMap = params.getParameters();\n+        final EntityResolver resolver = EasyMock.createMock(EntityResolver.class);\n+        final DocumentBuilder builder = EasyMock.createMock(DocumentBuilder.class);\n+        final XMLBuilderParametersImpl params2 = new XMLBuilderParametersImpl();\n+        final Map<String, Object> parameters = params2.getParameters();\n+    protected static void switchToConfig(final String id)\n+    protected static void switchToConfig(final int index)\n+        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n+            final BuilderParameters managedParams)\n+    private HierarchicalConfiguration<?> setUpConfig(final boolean reload)\n+        final HierarchicalConfiguration<?> config = new BaseHierarchicalConfiguration();\n+            final HierarchicalConfiguration<?> declConfig)\n+        final CombinedConfigurationBuilder parentBuilder =\n+                            final BuilderParameters params)\n+        final ConfigurationDeclaration decl =\n+                    protected Object interpolate(final Object value)\n+            final boolean reload) throws ConfigurationException\n+        final HierarchicalConfiguration<?> declConfig = setUpConfig(reload);\n+        final ConfigurationDeclaration decl = createDeclaration(declConfig);\n+        final ConfigurationBuilder<? extends Configuration> builder =\n+        final Configuration config = builder.getConfiguration();\n+        final PropertiesConfiguration pconfig = (PropertiesConfiguration) config;\n+        final DefaultListDelimiterHandler listHandler =\n+        final ConfigurationBuilder<? extends Configuration> builder =\n+        final ConfigurationBuilder<? extends Configuration> builder =\n+        final BaseConfigurationBuilderProvider provider =\n+        final HierarchicalConfiguration<?> declConfig = setUpConfig(true);\n+        final ConfigurationDeclaration decl = createDeclaration(declConfig);\n+    private void checkAllowFailOnInit(final boolean expFlag, final String... props)\n+        final HierarchicalConfiguration<?> declConfig = setUpConfig(false);\n+        for (final String key : props)\n+        final ConfigurationDeclaration decl = createDeclaration(declConfig);\n+        final BasicConfigurationBuilder<? extends Configuration> builder =\n+        final BaseConfigurationBuilderProvider provider =\n+        final BaseConfigurationBuilderProvider provider =\n+        final CombinedBuilderParametersImpl params =\n+        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n+        final Map<String, Object> map = params.getParameters();\n+        final CombinedBuilderParametersImpl params =\n+        final Map<String, Object> map = params.getParameters();\n+        final CombinedBuilderParametersImpl params =\n+        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n+        final ConfigurationBuilder<XMLConfiguration> builder =\n+        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n+        final ConfigurationBuilderProvider provider =\n+        final String tagName = \"testTag\";\n+        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n+        final Map<String, ConfigurationBuilderProvider> providers =\n+        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n+        final ConfigurationBuilderProvider provider1 =\n+        final ConfigurationBuilderProvider provider2 =\n+        final ConfigurationBuilderProvider provider3 =\n+        final String tagPrefix = \"testTag\";\n+        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n+        final Map<String, ConfigurationBuilderProvider> map =\n+        final Map<String, ConfigurationBuilderProvider> map = null;\n+        final Map<String, ConfigurationBuilderProvider> map =\n+        final ConfigurationBuilderProvider provider1 =\n+        final ConfigurationBuilderProvider provider2 =\n+        final ConfigurationBuilderProvider provider3 =\n+        final String tagPrefix = \"testTag\";\n+        final CombinedBuilderParametersImpl params =\n+        final CombinedBuilderParametersImpl params2 =\n+        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n+        final CombinedBuilderParametersImpl params =\n+        final String basePath = ConfigurationAssert.OUT_DIR.getAbsolutePath();\n+        final BuilderParameters defparams =\n+        final CombinedBuilderParametersImpl params =\n+        final BuilderParameters defparams =\n+        final CombinedBuilderParametersImpl params =\n+        final CombinedBuilderParametersImpl params =\n+        final XMLBuilderParametersImpl defParams = new XMLBuilderParametersImpl();\n+        final CombinedBuilderParametersImpl clone = params.clone();\n+        final CombinedBuilderParametersImpl params =\n+        final DefaultParametersManager manager =\n+        final CombinedBuilderParametersImpl params =\n+        final\n+        final DefaultParametersManager manager =\n+        final DefaultParametersHandler<BuilderParameters> handler =\n+        final CombinedBuilderParametersImpl params =\n+        final DefaultParametersManager manager =\n+        final DefaultParametersHandler<BuilderParameters> handler =\n+        final CombinedBuilderParametersImpl params =\n+        final DefaultParametersManager manager =\n+        final CombinedBuilderParametersImpl params =\n+        final CombinedBuilderParametersImpl params2 =\n+        final Map<String, Object> parameters = params2.getParameters();\n+        final BasicBuilderParameters params =\n+        final CombinedBuilderParametersImpl params2 =\n+        final Map<String, Object> parameters = params2.getParameters();\n+            final BaseHierarchicalConfiguration defConfig)\n+    protected static BaseHierarchicalConfiguration createDefinitionConfig(final String tag,\n+            final Map<String, Object> attrs)\n+        final BaseHierarchicalConfiguration defConfig =\n+        final String prefix = \"override.\" + tag;\n+        for (final Map.Entry<String, Object> e : attrs.entrySet())\n+        final CombinedConfiguration compositeConfiguration =\n+        final PropertiesConfiguration pc =\n+    private void checkProperties(final Configuration compositeConfiguration)\n+        final CombinedConfigurationBuilder configuredBuilder =\n+        final File additonalFile =\n+        final CombinedConfiguration compositeConfiguration =\n+        final File optionalFile =\n+        final Configuration config = builder.getConfiguration();\n+        final File optionalExFile =\n+        final String name = \"optionalConfig\";\n+        final Map<String, Object> attrs = new HashMap<>();\n+        final BaseHierarchicalConfiguration defConfig =\n+        final BasicConfigurationBuilder<? extends BaseHierarchicalConfiguration> defBuilder =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final Set<String> names = builder.builderNames();\n+        final List<String> expected = Arrays.asList(\"props\", \"xml\");\n+        final Set<String> names = builder.builderNames();\n+        final ConfigurationBuilder<? extends Configuration> propBuilder =\n+            final Map<String, Object> attrs)\n+        final BaseHierarchicalConfiguration defConfig =\n+        final BasicConfigurationBuilder<? extends HierarchicalConfiguration<ImmutableNode>> defBuilder =\n+        final Map<String, Object> attrs = new HashMap<>();\n+        final BasicConfigurationBuilder<? extends HierarchicalConfiguration<ImmutableNode>> defBuilder =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final ConfigurationBuilder<? extends Configuration> subBuilder =\n+        final CombinedConfiguration cc2 = builder.getConfiguration();\n+        final ConfigurationBuilder<? extends Configuration> subBuilder2 =\n+        final Map<String, Object> attrs = new HashMap<>();\n+        final Map<String, Object> attrs = new HashMap<>();\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final BasicConfigurationBuilder<?> subBuilder =\n+        final Map<String, Object> attrs = new HashMap<>();\n+        final BasicConfigurationBuilder<?> subBuilder =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final BasicConfigurationBuilder<?> subBuilder2 =\n+    private static void checkCombinedConfigAttrs(final CombinedConfiguration cc)\n+        final ListDelimiterHandler handler = cc.getListDelimiterHandler();\n+        final File initFile =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final CombinedConfiguration cc2 =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final File initFile =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final CombinedConfiguration cca =\n+        final String tagName = \"myTestTag\";\n+        final Map<String, Object> attrs = new HashMap<>();\n+                                    final ConfigurationDeclaration decl)\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final File systemFile =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final File envFile =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        for (final Map.Entry<String, String> e : System.getenv().entrySet())\n+        final File multiFile =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final File multiFile =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final File resolverFile =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final XMLConfiguration xmlConf =\n+        final EntityResolverWithPropertiesTestImpl resolver =\n+        final HierarchicalConfiguration<ImmutableNode> config = new BaseHierarchicalConfiguration();\n+        final XMLBuilderParametersImpl xmlParams = new XMLBuilderParametersImpl();\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final String baseDir = ConfigurationAssert.OUT_DIR_NAME;\n+        final EntityResolverWithPropertiesTestImpl resolver =\n+    private void checkFileSystem(final File fsFile) throws ConfigurationException\n+        final\n+        final File testFile =\n+        final String basePath = ConfigurationAssert.OUT_DIR.getAbsolutePath();\n+        final XMLBuilderParametersImpl xmlParams = new XMLBuilderParametersImpl();\n+        final String testFile = \"testCCSystemProperties.xml\";\n+        final XMLBuilderParametersImpl xmlParams = new XMLBuilderParametersImpl();\n+        final File basePathFile =\n+        final BaseHierarchicalConfiguration defConfig =\n+        final File deepDir = new File(ConfigurationAssert.TEST_DIR, \"config/deep\");\n+        final CombinedConfiguration config = builder.getConfiguration();\n+        final File testFile =\n+        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler('.');\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final BaseHierarchicalConfiguration defConfig =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final File testFile =\n+        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler('*');\n+        final ConfigurationDecoder decoder = EasyMock.createMock(ConfigurationDecoder.class);\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final CombinedConfiguration cc2 =\n+        final\n+        final\n+        final File testFile =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final CombinedConfiguration cc2 =\n+        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n+        final Collection<EventListener<? super Event>> eventListeners =\n+        final CombinedBuilderParametersImpl ccparams =\n+        final File envFile =\n+        final String basePath = ConfigurationAssert.OUT_DIR.getAbsolutePath();\n+        final CombinedBuilderParametersImpl params =\n+        final XMLBuilderParametersImpl params = new XMLBuilderParametersImpl();\n+        final PropertiesBuilderParametersImpl params2 =\n+        final File testFile = ConfigurationAssert.getTestFile(\"testCCLookup.xml\");\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final Configuration xmlConf = cc.getConfiguration(\"xml\");\n+        final File testFile =\n+        final CombinedConfiguration combConfig = builder.getConfiguration();\n+        final XMLConfiguration xmlConfig =\n+        final HierarchicalConfiguration<ImmutableNode> subConfig =\n+        final Collection<ConfigurationBuilder<? extends Configuration>> childBuilders =\n+        final Collection<ConfigurationBuilder<? extends Configuration>> childBuilders =\n+    private CombinedConfiguration createMultiFileConfig(final String fileName)\n+        final File testFile = ConfigurationAssert.getTestFile(fileName);\n+        final CombinedConfiguration config = builder.getConfiguration();\n+        final CombinedConfiguration config = createMultiFileConfig(\"testCCMultiTenent.xml\");\n+        final CombinedConfiguration config = createMultiFileConfig(\"testCCMultiTenent.xml\");\n+        final HierarchicalConfiguration<?> multiConf =\n+    private void checkMultiFile(final String key, final CombinedConfiguration config,\n+            final int rows)\n+    private static void switchToMultiFile(final String key)\n+        final CombinedConfiguration config =\n+        final File outFile =\n+        final XMLConfiguration reloadConfig = new XMLConfiguration();\n+        final FileHandler handler = new FileHandler(reloadConfig);\n+            final ConfigurationBuilder<? extends Configuration> childBuilder =\n+            final ReloadingController ctrl =\n+            final BuilderEventListenerImpl l = new BuilderEventListenerImpl();\n+            final ConfigurationBuilderEvent event = l.nextEvent(ConfigurationBuilderEvent.RESET);\n+            final BasicConfigurationBuilder<? extends Configuration> multiBuilder =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+        final CombinedConfiguration config = builder.getConfiguration();\n+        final CountDownLatch startLatch = new CountDownLatch(1);\n+        final ReadThread[] threads = new ReadThread[threadCount];\n+        for (final ReadThread t : threads)\n+    private static XMLBuilderParameters prepareParamsForInheritanceTest(final Parameters params) {\n+        final DefaultExpressionEngineSymbols symbols = new DefaultExpressionEngineSymbols.Builder(\n+        final DefaultExpressionEngine engine = new DefaultExpressionEngine(symbols);\n+        final DefaultListDelimiterHandler listDelimiterHandler = new DefaultListDelimiterHandler(',');\n+        final Parameters params = new Parameters();\n+        final XMLBuilderParameters xmlParams =\n+        final CombinedConfiguration config = builder.getConfiguration();\n+        final String[] stringArray = config.getStringArray(\"test/mixed/array\");\n+        final XMLConfiguration xmlConfig =\n+        final Parameters params = new Parameters();\n+        final CombinedBuilderParameters combinedParams =\n+        final CombinedConfiguration config = builder.getConfiguration();\n+        final XMLConfiguration xmlConfig =\n+        final List<String> list = xmlConfig.getList(String.class, \"split.list1\");\n+        public void setPropertyKey(final String propertyKey)\n+                final ConfigurationDeclaration decl) throws ConfigurationException\n+            final BaseHierarchicalConfiguration config =\n+        public ConstantConfigurationBuilder(final BaseHierarchicalConfiguration conf)\n+        public void setFileSystem(final FileSystem fileSystem)\n+        public void setBaseDir(final String baseDir)\n+        public void setInterpolator(final ConfigurationInterpolator interpolator)\n+        public String lookup(final String key)\n+        public ReadThread(final CombinedConfiguration cc, final CountDownLatch latch)\n+            catch (final InterruptedException iex)\n+            catch (final InterruptedException iex)\n+        final FileBasedBuilderParameters params = super.createParameters();\n+        final File deepDir = new File(ConfigurationAssert.TEST_DIR, \"config/deep\");\n+        final Map<String, Object> params = new HashMap<>();\n+        final BaseHierarchicalConfiguration defConfig =\n+        final BasicConfigurationBuilder<? extends HierarchicalConfiguration<ImmutableNode>> defBuilder =\n+        final Configuration config = builder.getConfiguration();\n+            final HierarchicalConfiguration<?> conf)\n+        final HierarchicalConfiguration<?> config =\n+        final ConfigurationDeclaration decl = createDeclaration(null);\n+    private void checkOldReservedAttribute(final String name)\n+        final String prefixName = \"config-\" + name;\n+        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n+        final ConfigurationDeclaration decl = createDeclaration(config);\n+        final HierarchicalConfiguration<?> config = new BaseHierarchicalConfiguration();\n+        final HierarchicalConfiguration<?> factory = new BaseHierarchicalConfiguration();\n+        final ConfigurationDeclaration decl =\n+        final FileExtensionConfigurationBuilderProvider provider =\n+        final ConfigurationDeclaration decl =\n+        final FileExtensionConfigurationBuilderProvider provider =\n+        final ConfigurationDeclaration decl = setUpDecl();\n+        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n+        final ConfigurationDeclaration decl = setUpDecl();\n+        final BuilderParameters params =\n+        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n+        final ConfigurationDeclaration decl = setUpDecl();\n+        final BuilderParameters params =\n+        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n+        final ConfigurationDeclaration decl = setUpDecl();\n+        final BuilderParameters params = new FileBasedBuilderParametersImpl();\n+        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n+        final ConfigurationDeclaration decl = setUpDecl();\n+        final BuilderParameters params =\n+        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n+        final ConfigurationDeclaration decl = setUpDecl();\n+        final BuilderParameters params =\n+        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n+        final Map<String, Object> map = params.getParameters();\n+        final String pattern = \"somePattern\";\n+        final BuilderParameters bp = EasyMock.createMock(BuilderParameters.class);\n+        final BuilderParameters bp = EasyMock.createMock(BuilderParameters.class);\n+        final String pattern = \"testPattern\";\n+        final Map<String, Object> map = params.getParameters();\n+        final FileBasedBuilderParametersImpl managedParams =\n+        final MultiFileBuilderParametersImpl clone = params.clone();\n+            final BuilderParameters managedParams)\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+                            final String fileName,\n+                            final java.util.Map<String, Object> params)\n+                        final FileBasedConfigurationBuilder<XMLConfiguration> result =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final String key = \"rowsPerPage\";\n+        final BasicBuilderParameters params =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final ExpressionEngine engine = new XPathExpressionEngine();\n+        final BuilderParameters xmlParams =\n+        final MultiFileBuilderParametersImpl params =\n+        final ConfigurationInterpolator ci = createInterpolator();\n+        final XMLConfiguration config = builder.getConfiguration();\n+        final DefaultListDelimiterHandler listHandler =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        catch (final ConfigurationException ex)\n+        final BasicBuilderParameters params = createTestBuilderParameters(null);\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final XMLConfiguration config = builder.getConfiguration();\n+        final BasicBuilderParameters params =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final EventListener<ConfigurationEvent> l1 = new EventListenerTestImpl(null);\n+        final\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final XMLConfiguration config = builder.getConfiguration();\n+        final XMLConfiguration config2 = builder.getConfiguration();\n+        final Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final BasicBuilderParameters params =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final ConfigurationInterpolator interpolator = builder.getInterpolator();\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+        final Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final XMLConfiguration configuration = builder.getConfiguration();\n+        final ConfigurationBuilderEvent event =\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+        final Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final ConfigurationBuilderEvent event =\n+        final ConfigurationBuilderResultCreatedEvent createdEvent =\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder1 =\n+        final FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder2 =\n+        final DynamicCombinedConfiguration config =\n+        final BasicBuilderParameters params = createTestBuilderParameters(null);\n+        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n+        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final BuilderConfigurationWrapperFactory wrapFactory =\n+    private MultiWrapDynaBean createBean(final boolean withDynaBean)\n+        final Collection<Object> beans = new ArrayList<>();\n+        final MultiWrapDynaBean bean = createBean(false);\n+        final String text = \"testText\";\n+        final MultiWrapDynaBean bean = createBean(false);\n+        final MultiWrapDynaBean bean = createBean(true);\n+        final String key = \"testKey\";\n+        final String text = \"Hello World\";\n+        final MultiWrapDynaBean bean = createBean(true);\n+        final String key = \"testKey\";\n+        final String value = \"Hello World\";\n+        final DynaClass cls = createBean(false).getDynaClass();\n+        final Collection<Object> beans = new ArrayList<>();\n+        final MultiWrapDynaBean bean = new MultiWrapDynaBean(beans);\n+        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler('+');\n+        final Map<String, Object> map = params.getParameters();\n+        public String getMapProperty(final String key)\n+        public void setMapProperty(final String key, final String value)\n+        public int getIndexedProperty(final int idx)\n+        public void setIndexedProperty(final int idx, final int value)\n+        public void setText(final String text)\n+        final File testFile =\n+        final CombinedReloadingController rc =\n+        final File testFile =\n+        final ReloadingCombinedConfigurationBuilder confBuilder =\n+        final CombinedReloadingController rc =\n+        final Collection<ReloadingController> subControllers = rc.getSubControllers();\n+        final ReloadingController subctrl =\n+        final File testFile =\n+        final CombinedReloadingController rc =\n+        final Collection<ReloadingController> subControllers = rc.getSubControllers();\n+        final ReloadingControllerSupport ccBuilder =\n+        final CombinedReloadingController rc2 =\n+        final FileBasedBuilderParametersImpl params =\n+        final CombinedConfiguration cc = builder.getConfiguration();\n+    private static void addReloadSource(final Configuration config, final String fileName)\n+    private static void writeFile(final File file, final String content) throws IOException\n+    private File writeReloadFile(final File f, final String content) throws IOException\n+        final File file = (f != null) ? f : folder.newFile();\n+    private File writeReloadFile(final File f, final int tagIdx, final int value)\n+    private static String testProperty(final int idx)\n+        final File xmlConf1 = writeReloadFile(null, 1, 0);\n+        final File xmlConf2 = writeReloadFile(null, 2, 0);\n+        final ReloadingDetectorFactory detectorFactory =\n+                            final FileHandler handler,\n+                            final FileBasedBuilderParametersImpl params)\n+        final BaseHierarchicalConfiguration defConf = new BaseHierarchicalConfiguration();\n+        final ReloadingDetectorFactory detectorFactory =\n+                            final FileHandler handler,\n+                            final FileBasedBuilderParametersImpl params)\n+        final BaseHierarchicalConfiguration defConf = new BaseHierarchicalConfiguration();\n+        final Synchronizer sync = new ReadWriteSynchronizer();\n+        final Thread testThreads[] = new Thread[threadCount];\n+        final int failures[] = new int[threadCount];\n+    private void checkReloadDefinitionFile(final File defFile) throws IOException,\n+        final File src1 = writeReloadFile(null, 1, 0);\n+        final File src2 = writeReloadFile(null, 1, 1);\n+        final File defFile = folder.newFile();\n+        final File defFile = folder.newFile();\n+    private void writeDefinitionFile(final File defFile, final File src)\n+        final XMLConfiguration defConf = new XMLConfiguration();\n+        public ConstantConfigurationBuilder(final BaseHierarchicalConfiguration conf)\n+        ReloadThread(final ReloadingCombinedConfigurationBuilder bldr,\n+                final int[] failures, final int index, final int count)\n+                    final String value =\n+                catch (final Exception ex)\n+        final ExpressionEngine engine = new XPathExpressionEngine();\n+        final BasicBuilderParameters params =\n+        final ReloadingMultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final XMLConfiguration config = builder.getConfiguration();\n+        final ReloadingMultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder =\n+        final ReloadingMultiFileConfigurationBuilder<XMLConfiguration> builder =\n+        final FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder =\n+        final ReloadingMultiFileConfigurationBuilderTestImpl builder =\n+        final List<ReloadingController> controllers =\n+        for (final ReloadingController c : controllers)\n+        final ReloadingMultiFileConfigurationBuilderTestImpl builder =\n+        final List<ReloadingController> controllers =\n+        final ReloadingMultiFileConfigurationBuilderTestImpl builder =\n+        final List<ReloadingController> controllers =\n+        for (final ReloadingController c : controllers)\n+                final String fileName, final Map<String, Object> params)\n+    private static String filePath(final String name)\n+        final Configurations configs = new Configurations();\n+        final Parameters params = new Parameters();\n+        final Configurations configs = new Configurations(params);\n+        final Configurations configs = new Configurations();\n+        final File file = ConfigurationAssert.getTestFile(TEST_PROPERTIES);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final URL url = ConfigurationAssert.getTestURL(\"test.properties\");\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final String filePath = filePath(TEST_PROPERTIES);\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+    private static void checkPList(final Configuration config)\n+        final Configurations configs = new Configurations();\n+        final PropertyListConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final PropertyListConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final PropertyListConfiguration config =\n+    private static void checkProperties(final Configuration config)\n+        final Configurations configs = new Configurations();\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final PropertiesConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final PropertiesConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final PropertiesConfiguration config =\n+    private static void checkXML(final Configuration config)\n+        final Configurations configs = new Configurations();\n+        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final XMLConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final XMLConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final XMLConfiguration config = configs.xml(filePath(TEST_XML));\n+    private static void checkINI(final INIConfiguration config)\n+        final Configurations configs = new Configurations();\n+        final FileBasedConfigurationBuilder<INIConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final INIConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final FileBasedConfigurationBuilder<INIConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final INIConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final FileBasedConfigurationBuilder<INIConfiguration> builder =\n+        final Configurations configs = new Configurations();\n+        final INIConfiguration config = configs.ini(filePath(TEST_INI));\n+    private static void checkCombined(final Configuration config)\n+        final Configurations configs = new Configurations();\n+        final CombinedConfigurationBuilder builder =\n+        final Configurations configs = new Configurations();\n+        final CombinedConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final CombinedConfigurationBuilder builder =\n+        final Configurations configs = new Configurations();\n+        final CombinedConfiguration config =\n+        final Configurations configs = new Configurations();\n+        final CombinedConfigurationBuilder builder =\n+        final Configurations configs = new Configurations();\n+        final CombinedConfiguration config =\n+        final Parameters parameters = new Parameters();\n+        final BasicBuilderParameters basic = new Parameters().basic();\n+    private static void checkBasicProperties(final Map<String, Object> map)\n+        final Map<String, Object> map =\n+        final FileBasedBuilderParametersImpl fbparams =\n+    private static void checkInstanceOf(final Object obj, final Class<?> cls)\n+    private static void checkInheritance(final Object params, final Class<?>... ifcClasses)\n+        for (final Class<?> c : ifcClasses)\n+        final FileBasedBuilderParameters params = new Parameters().fileBased();\n+        final String s = params.toString();\n+        final Map<String, Object> map =\n+        final CombinedBuilderParametersImpl cparams =\n+        final Map<String, Object> map =\n+        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n+        final Map<String, Object> map =\n+        final FileBasedBuilderParametersImpl fbp =\n+        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n+        final Map<String, Object> map =\n+        final FileBasedBuilderParametersImpl fbp =\n+        final PropertiesConfiguration.IOFactory factory =\n+        final Map<String, Object> map =\n+        final FileBasedBuilderParametersImpl fbp =\n+        final BuilderParameters bp = EasyMock.createMock(BuilderParameters.class);\n+        final String pattern = \"a pattern\";\n+        final Map<String, Object> map =\n+        final MultiFileBuilderParametersImpl params =\n+        final Map<String, Object> map =\n+        final Object params = new Parameters().xml();\n+        final FileBasedBuilderParameters fbParams =\n+        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n+        final Map<String, Object> map = fbParams.getParameters();\n+        final DefaultParametersManager manager =\n+        final Parameters params = new Parameters(manager);\n+        final XMLBuilderParameters xmlParams = params.xml();\n+        final\n+        final DefaultParametersManager manager =\n+        final DefaultParametersHandler<XMLBuilderParameters> handler =\n+        final Parameters params = new Parameters(manager);\n+        final DefaultParametersManager manager =\n+        final DefaultParametersHandler<XMLBuilderParameters> handler =\n+        final Parameters params = new Parameters(manager);\n+            public Object interpolate(final Object value)\n+    private void checkSingleValue(final Integer expResult)\n+        final Integer result = handler.to(VAR, Integer.class, createInterpolator());\n+        final Integer result = handler.to(REPLACEMENT, Integer.class, null);\n+        final Object[] src = {\n+        final Collection<String> src = Arrays.asList(VAR, \"true\", \"1000\");\n+        final Iterator<String> src = Arrays.asList(VAR, \"true\", \"1000\").iterator();\n+        final ArrayList<Integer> col = new ArrayList<>();\n+        final Object[] src = new Object[] {\n+        final List<Integer> col = new ArrayList<>(src.length);\n+        final List<Integer> col = new ArrayList<>(1);\n+        final List<String> src = Arrays.asList(VAR, \"100\");\n+        final Integer[] array =\n+        final int[] src = new int[] {\n+        final int[] array =\n+        final Integer[] src = new Integer[] {\n+        final int[] array =\n+        final List<String> src = Arrays.asList(VAR, \"100\");\n+        final int[] array =\n+        final int[] array = (int[]) handler.toArray(\"\", Integer.TYPE, null);\n+        final String dateFormat = \"dd.MM.yyyy\";\n+        final Date dt = handler.to(\"19.08.2013\", Date.class, null);\n+        final Calendar cal = Calendar.getInstance();\n+        final Calendar cal = handler.to(\"2013-08-19 21:17:22\", Calendar.class, null);\n+        final Long value = 20130819214935L;\n+        final Object result = handler.to(value.toString(), Long.TYPE, null);\n+        final ValueTransformer trans = EasyMock.createMock(ValueTransformer.class);\n+        final ValueTransformer trans = new ValueTransformer()\n+            public Object transformValue(final Object value)\n+        final List<String> data =\n+    private void checkSplit(final String value, final boolean trim,\n+            final String... expectedElements)\n+        final Collection<String> elems = handler.split(value, trim);\n+        for (final String elem : elems)\n+    private static void checkIterator(final Iterable<?> container)\n+        final Iterator<?> it = container.iterator();\n+        for (final Object o : VALUES)\n+        final Iterator<?> it = handler.parse(STR_VALUE).iterator();\n+        final ValueTransformer trans = EasyMock.createMock(ValueTransformer.class);\n+        final String testStr = \"Some other string\";\n+        final Object value = 42;\n+        final ValueTransformer trans = EasyMock.createMock(ValueTransformer.class);\n+        final Object value = 42;\n+        final Collection<?> res = handler.flatten(VALUES, 1);\n+        final Collection<Object> src = Arrays.asList(VALUES);\n+        final Collection<?> res = handler.flatten(src, 1);\n+        final Collection<Object> src = new ArrayList<>(2);\n+        final Collection<?> res = handler.flatten(src, 2);\n+        final Iterator<?> it = res.iterator();\n+        final File f = new File(\"dir\", \"file\");\n+        final Path p = Paths.get(\"dir\", \"file\");\n+        final Path p = Paths.get(\"dir\", \"file\");\n+        final File f =  new File(\"dir\", \"file\");\n+        final Integer i = new Integer(42);\n+        final BigDecimal d = new BigDecimal(\"3.1415\");\n+        final Number n = PropertyConverter.toNumber(\"0x10\", Integer.class);\n+        final Number n = PropertyConverter.toNumber(\"0b1111\", Integer.class);\n+        final Pattern p = Pattern.compile(\".+\");\n+        final Pattern p = Pattern.compile(\".+\");\n+        final String value = \"testValue\";\n+        final Object value = new Object()\n+        final Integer src = 42;\n+        final Object result =\n+    protected AbstractEventListenerTestImpl(final Object source)\n+    public void onEvent(final T event)\n+    public void checkEventCount(final int minEvents)\n+    public T nextEvent(final EventType<?> expectedType)\n+        final T e = events.remove(0);\n+    public void skipToLast(final EventType<?> type)\n+            final T e = events.remove(0);\n+    public ErrorListenerTestImpl(final Object source)\n+    public Throwable checkEvent(final EventType<?> type, final EventType<?> opType,\n+            final String propName, final Object propValue)\n+        final ConfigurationErrorEvent e = nextEvent(type);\n+    public EventListenerTestImpl(final Object source)\n+    public void checkEvent(final EventType<?> type, final String propName, final Object propValue,\n+            final boolean before)\n+        final ConfigurationEvent e = nextEvent(type);\n+        final Set<EventType<?>> superTypes = EventType.fetchSuperEventTypes(null);\n+        final Set<EventType<?>> superTypes =\n+        final Set<EventType<?>> superTypes =\n+        final List<EventType<? extends Event>> expected =\n+    private void checkUpdateEvent(final EventType<ConfigurationEvent> eventType)\n+    private void checkHierarchicalEvent(final EventType<ConfigurationEvent> eventType)\n+    private void checkErrorEvent(final EventType<ConfigurationErrorEvent> type)\n+        catch (final ConfigurationException e)\n+        final Event event = new Event(this, Event.ANY);\n+        final String s = event.toString();\n+        final ListenerTestImpl listener = new ListenerTestImpl();\n+        final ListenerTestImpl listener1 = new ListenerTestImpl();\n+        final ListenerTestImpl listener2 = new ListenerTestImpl();\n+        final ListenerTestImpl listener1 = new ListenerTestImpl();\n+        final ListenerTestImpl listener2 = new ListenerTestImpl();\n+        final ListenerTestImpl listener = new ListenerTestImpl();\n+        final ListenerTestImpl listener = new ListenerTestImpl();\n+        final ListenerTestImpl listener = new ListenerTestImpl();\n+        final EventListenerRegistrationData<EventSub1> regData =\n+        final ListenerTestImpl listener = new ListenerTestImpl();\n+        final ListenerTestImpl listener = new ListenerTestImpl();\n+        final ListenerTestImpl listener = new ListenerTestImpl();\n+    private static <T> List<T> fetchElements(final Iterable<? extends T> iterable)\n+        final List<T> elems = new LinkedList<>();\n+        for (final T listener : iterable)\n+            final EventType<? extends Event> eventType,\n+            final EventListener<?>... expListeners)\n+        final List<?> listeners = fetchElements(list.getEventListeners(eventType));\n+        final ListenerTestImpl listener1 = new ListenerTestImpl();\n+        final ListenerTestImpl listener2 = new ListenerTestImpl();\n+        final ListenerTestImpl listener1 = new ListenerTestImpl();\n+        final ListenerTestImpl listener2 = new ListenerTestImpl();\n+        final ListenerTestImpl listener1 = new ListenerTestImpl();\n+        final ListenerTestImpl listener2 = new ListenerTestImpl();\n+        final Iterator<EventListener<? super EventBase>> iterator =\n+        final Iterator<EventListener<? super EventBase>> iterator =\n+        final EventListener<EventSub2> listener = new EventListener<EventSub2>()\n+            public void onEvent(final EventSub2 event)\n+        final EventListenerList.EventListenerIterator<EventSub2> iterator =\n+        final EventListenerList.EventListenerIterator<EventBase> iterator =\n+        final EventListenerRegistrationData<EventSub1> reg1 =\n+        final EventListenerRegistrationData<EventSub2> reg2 =\n+        final List<EventListenerRegistrationData<?>> registrations =\n+        final EventListener<EventBase> l1 = new ListenerTestImpl();\n+        final EventListener<EventBase> l2 = new ListenerTestImpl();\n+        final EventListener<EventBase> l3 = new ListenerTestImpl();\n+        final EventListenerList list2 = new EventListenerList();\n+        final Iterator<EventListenerRegistrationData<?>> it =\n+        final ListenerTestImpl l1 = new ListenerTestImpl();\n+        final ListenerTestImpl l2 = new ListenerTestImpl();\n+        final\n+        final List<EventListenerRegistrationData<? extends EventBase>> regs =\n+        final Iterator<EventListenerRegistrationData<? extends EventBase>> iterator =\n+        public EventBase(final Object source, final EventType<? extends EventBase> type,\n+                final String msg)\n+        public EventSub1(final Object source, final EventType<? extends EventSub1> type,\n+                final String msg)\n+        public EventSub2(final Object source, final EventType<? extends EventSub2> type,\n+                final String msg)\n+        public void onEvent(final EventBase event)\n+        public void assertEvent(final Object expSource, final EventType<?> expType,\n+                final String expMessage)\n+        final EventListenerTestImpl l = new EventListenerTestImpl(this);\n+        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n+        final EventListenerTestImpl l = new EventListenerTestImpl(this);\n+        final Collection<EventListener<? super ConfigurationEvent>> list =\n+        final Collection<EventListener<? super ConfigurationEvent>> list =\n+        final EventListenerTestImpl l = new EventListenerTestImpl(source);\n+        final EventListenerTestImpl l = new EventListenerTestImpl(source);\n+        final EventListener<ConfigurationEvent> lstRemove = new EventListener<ConfigurationEvent>()\n+            public void onEvent(final ConfigurationEvent event)\n+        final EventListenerTestImpl l = new EventListenerTestImpl(source);\n+        final ErrorListenerTestImpl lstRead = new ErrorListenerTestImpl(source);\n+        final ErrorListenerTestImpl lstWrite = new ErrorListenerTestImpl(source);\n+        final ErrorListenerTestImpl lstAll = new ErrorListenerTestImpl(source);\n+        final Exception testException = new Exception(\"A test\");\n+        final BaseEventSource copy = (BaseEventSource) source.clone();\n+        final EventListenerTestImpl l1 = new EventListenerTestImpl(source);\n+        final EventListenerTestImpl l2 = new EventListenerTestImpl(source);\n+        final BaseEventSource source2 = new BaseEventSource();\n+        final EventListener<ConfigurationEvent> cl = new EventListenerTestImpl(null);\n+        final ErrorListenerTestImpl el1 = new ErrorListenerTestImpl(null);\n+        final ErrorListenerTestImpl el2 = new ErrorListenerTestImpl(null);\n+        final ErrorListenerTestImpl el3 = new ErrorListenerTestImpl(null);\n+        final List<EventListenerRegistrationData<?>> regs =\n+                final EventType<T> eventType, final String propName, final Object propValue,\n+                final boolean before)\n+                final EventType<? extends ConfigurationErrorEvent> type,\n+                final EventType<?> opType, final String propName, final Object propValue,\n+                final Throwable ex)\n+        final String s = eventType.toString();\n+        final BaseHierarchicalConfiguration hc = (BaseHierarchicalConfiguration) config;\n+        final String key = EXIST_PROPERTY.substring(0, EXIST_PROPERTY.indexOf('.'));\n+        final NodeHandler<ImmutableNode> nodeHandler = hc.getNodeModel().getNodeHandler();\n+        final Collection<QueryResult<ImmutableNode>> nodes = hc.getExpressionEngine()\n+        final BaseHierarchicalConfiguration hc = (BaseHierarchicalConfiguration) config;\n+        final Collection<ImmutableNode> nodes = new ArrayList<>(1);\n+        final HierarchicalConfiguration<ImmutableNode> sub =\n+        final HierarchicalConfiguration<ImmutableNode> sub =\n+    private void checkSubnodeEvent(final ConfigurationEvent event, final boolean before)\n+        final ConfigurationEvent evSub = (ConfigurationEvent) event\n+        final Lookup lookup = EasyMock.createMock(Lookup.class);\n+        final Lookup lookup = EasyMock.createMock(Lookup.class);\n+        final Lookup lookup = EasyMock.createMock(Lookup.class);\n+        final Lookup l1 = EasyMock.createMock(Lookup.class);\n+        final Lookup l2 = EasyMock.createMock(Lookup.class);\n+        final Lookup l3 = EasyMock.createMock(Lookup.class);\n+        final Lookup l1 = setUpTestLookup();\n+        final Lookup l2 = setUpTestLookup(\"someVar\", \"someValue\");\n+        final Map<String, Lookup> lookups = new HashMap<>();\n+        final String prefix2 = TEST_PREFIX + \"_other\";\n+        final Map<String, Lookup> lookups2 = interpolator.getLookups();\n+        final Map<String, Lookup> lookups = interpolator.getLookups();\n+        final List<Lookup> lookups = new ArrayList<>();\n+        final List<Lookup> lookups2 = interpolator.getDefaultLookups();\n+        final List<Lookup> lookups = interpolator.getDefaultLookups();\n+        final List<Lookup> lookups = new ArrayList<>();\n+        final Iterator<String> it = interpolator.prefixSet().iterator();\n+        final ConfigurationInterpolator parent =\n+        final ConfigurationInterpolator parent =\n+        final Object value = 42;\n+        final String value = \"${\" + TEST_PREFIX + ':' + TEST_NAME + \"}\";\n+        final String value = \"${unknownVariable}\";\n+        final String var = \"${jre-${java.version}}\";\n+        final String value = \"The ${subject} jumps over ${object}.\";\n+        final Object value = 42;\n+        final String value = \"${\" + TEST_NAME;\n+        final String value = \"${}\";\n+        final ConfigurationInterpolator ci =\n+        final InterpolatorSpecification spec =\n+        final Lookup defLookup = EasyMock.createMock(Lookup.class);\n+        final Lookup preLookup = EasyMock.createMock(Lookup.class);\n+        final InterpolatorSpecification spec =\n+        final ConfigurationInterpolator ci =\n+        final Map<String, Lookup> lookups =\n+        for (final DefaultLookups l : DefaultLookups.values())\n+        final Lookup look = EasyMock.createMock(Lookup.class);\n+        final Lookup lookup = ConfigurationInterpolator.nullSafeLookup(null);\n+    private String variable(final String field)\n+        final EnvironmentConfiguration envConf = new EnvironmentConfiguration();\n+        for (final Iterator<String> it = envConf.getKeys(); it.hasNext();)\n+            final String var = it.next();\n+        final XMLConfiguration config = new XMLConfiguration();\n+        final FileHandler handler = new FileHandler(config);\n+        final ConsoleAppender app = new ConsoleAppender(new SimpleLayout());\n+        final Log log = LogFactory.getLog(\"TestLogger\");\n+        final Logger logger = ((Log4JLogger)log).getLogger();\n+        final ExprLookup.Variables vars = new ExprLookup.Variables();\n+        final XMLConfiguration config = loadConfig();\n+        final ConfigurationLogger testLogger = new ConfigurationLogger(\"TestLogger\");\n+        final ExprLookup lookup = new ExprLookup(vars);\n+        final ExprLookup.Variables vars = new ExprLookup.Variables();\n+        final ExprLookup lookup = new ExprLookup(vars);\n+        final String value = \"test\";\n+        final ExprLookup.Variables vars = new ExprLookup.Variables();\n+        final ExprLookup lookup = new ExprLookup(vars);\n+        final ExprLookup.Variables vars = new ExprLookup.Variables();\n+        final ExprLookup lookup = new ExprLookup(vars);\n+        final ExprLookup.Variables vars2 = lookup.getVariables();\n+        final ExprLookup.Variables vars = new ExprLookup.Variables();\n+        final ExprLookup lookup = new ExprLookup(vars);\n+        final XMLConfiguration config = loadConfig();\n+        final String pattern = \"System.currentTimeMillis()\";\n+        final String result = lookup.lookup(pattern);\n+        final ExprLookup.Variables vars = new ExprLookup.Variables();\n+        final ExprLookup lookup = new ExprLookup(vars);\n+        final XMLConfiguration config = loadConfig();\n+        public Utility(final String msg)\n+        public String str(final String str)\n+    private static <T> T createMock(final Class<T> cls)\n+        final T mock = EasyMock.createMock(cls);\n+    private static void checkPrefixLookups(final InterpolatorSpecification spec,\n+            final Lookup prefLook1, final Lookup prefLook2)\n+    private static void checkDefaultLookups(final InterpolatorSpecification spec,\n+            final Lookup defLook1, final Lookup defLook2)\n+        final Lookup prefLook1 = createLookup();\n+        final Lookup prefLook2 = createLookup();\n+        final Lookup defLook1 = createLookup();\n+        final Lookup defLook2 = createLookup();\n+        final ConfigurationInterpolator interpolator =\n+        final ConfigurationInterpolator parent =\n+        final InterpolatorSpecification spec =\n+        final Lookup prefLook1 = createLookup();\n+        final Lookup prefLook2 = createLookup();\n+        final Lookup defLook1 = createLookup();\n+        final Lookup defLook2 = createLookup();\n+        final Map<String, Lookup> prefixLookups = new HashMap<>();\n+        final InterpolatorSpecification spec =\n+        final InterpolatorSpecification spec =\n+        final InterpolatorSpecification spec =\n+        final InterpolatorSpecification spec =\n+        final InterpolatorSpecification spec =\n+        final Lookup prefLook1 = createLookup();\n+        final Lookup prefLook2 = createLookup();\n+        final Lookup defLook1 = createLookup();\n+        final Lookup defLook2 = createLookup();\n+        final ConfigurationInterpolator parent =\n+        final InterpolatorSpecification spec =\n+        for(final Map.Entry<Object, Object> e : System.getProperties().entrySet())\n+        final FileLocator locator = FileLocatorUtils.fileLocator().create();\n+        final FileLocator locator =\n+        final File file = ConfigurationAssert.getOutFile(\"NotExistingFile.tst\");\n+        final FileLocator locator =\n+        final File file = ConfigurationAssert.getTestFile(\"test.xml\");\n+        final FileLocator locator =\n+        final URL url = strategy.locate(fileSystem, locator);\n+    private static void checkURL(final URL url)\n+        final File path = ConfigurationAssert.TEST_DIR;\n+        final FileLocator locator =\n+        final File path = ConfigurationAssert.TEST_DIR;\n+        final FileLocator locator =\n+        final FileLocator locator =\n+        final FileLocator locator =\n+        final FileLocator locator =\n+        final URL url = strategy.locate(fileSystem, locator);\n+        final Configurations configurations = new Configurations();\n+        final XMLConfiguration config1 = configurations.xml(url);\n+        final XMLConfiguration config2 = configurations.xml(ConfigurationAssert.getTestURL(FILE_NAME));\n+        final FileLocator locator =\n+        final FileLocator locator =\n+    private void checkSubStrategies(final CombinedLocationStrategy strategy)\n+        final Collection<FileLocationStrategy> subs = strategy.getSubStrategies();\n+        for (final FileLocationStrategy strat : subs)\n+        final Collection<FileLocationStrategy> col =\n+        final Collection<FileLocationStrategy> col =\n+        final CombinedLocationStrategy strategy = new CombinedLocationStrategy(col);\n+        final CombinedLocationStrategy strategy = createCombinedStrategy();\n+        final CombinedLocationStrategy strategy = createCombinedStrategy();\n+        final CombinedLocationStrategy strategy = createCombinedStrategy();\n+        final CombinedLocationStrategy strategy = createCombinedStrategy();\n+        final ConfigurationLogger logger1 =\n+        final ConfigurationLogger logger2 = new ConfigurationLogger(getClass());\n+        final Log log = EasyMock.createMock(Log.class);\n+        final ConfigurationLogger logger = new ConfigurationLogger(log);\n+        final Log log = EasyMock.createMock(Log.class);\n+        final ConfigurationLogger logger = new ConfigurationLogger(log);\n+        final Log log = EasyMock.createMock(Log.class);\n+        final ConfigurationLogger logger = new ConfigurationLogger(log);\n+        final Log log = EasyMock.createMock(Log.class);\n+        final ConfigurationLogger logger = new ConfigurationLogger(log);\n+        final Log log = EasyMock.createMock(Log.class);\n+        final ConfigurationLogger logger = new ConfigurationLogger(log);\n+        final Log log = EasyMock.createMock(Log.class);\n+        final Throwable ex = new Exception(\"Test exception\");\n+        final ConfigurationLogger logger = new ConfigurationLogger(log);\n+        final Log log = EasyMock.createMock(Log.class);\n+        final ConfigurationLogger logger = new ConfigurationLogger(log);\n+        final Log log = EasyMock.createMock(Log.class);\n+        final Throwable ex = new Exception(\"Test exception\");\n+        final ConfigurationLogger logger = new ConfigurationLogger(log);\n+        final ConfigurationLogger logger = ConfigurationLogger.newDummyLogger();\n+        final ConfigurationLogger logger = new ConfigurationLogger()\n+            public void info(final String msg)\n+        final AbstractConfiguration config = new BaseConfiguration();\n+        final ConfigurationLogger logger = new ConfigurationLogger(getClass());\n+        final AbstractConfiguration config = new BaseConfiguration();\n+        final AbstractConfiguration config = new BaseConfiguration();\n+        final ConfigurationLogger log = new ConfigurationLogger(getClass());\n+    private File createTestFile(final File f)\n+        catch (final IOException ioex)\n+                catch (final IOException ioex)\n+    private static String readReader(final Reader in) throws IOException\n+        final StringBuilder buf = new StringBuilder();\n+    private static String readFile(final File f)\n+        catch (final IOException ioex)\n+                catch (final IOException ioex)\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileSystem sys = EasyMock.createMock(FileSystem.class);\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileSystem sys = EasyMock.createMock(FileSystem.class);\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileHandler handler = new FileHandler();\n+        final FileLocationStrategy strategy =\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final URL url =\n+        final FileHandler handler = new FileHandler();\n+        final FileLocator locator = handler.getFileLocator();\n+        final FileHandler handler = new FileHandler();\n+        final File directory = ConfigurationAssert.TEST_DIR;\n+        final File file = ConfigurationAssert.getTestFile(TEST_FILENAME);\n+        final FileHandler handler = new FileHandler();\n+        final File file = ConfigurationAssert.getTestFile(TEST_FILENAME);\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final String basePath = ConfigurationAssert.TEST_DIR_NAME;\n+        final FileLocator locator = handler.getFileLocator();\n+        final FileHandler handler = new FileHandler();\n+        final String testProperties =\n+        final String testBasePath = ConfigurationAssert.TEST_DIR.getAbsolutePath();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final StringReader reader = new StringReader(CONTENT);\n+        final FileBased content = EasyMock.createMock(FileBased.class);\n+        final Reader in = new StringReader(CONTENT);\n+        final IOException ioex = new IOException(\"Test exception\");\n+        final FileHandler handler = new FileHandler(content);\n+        catch (final ConfigurationException cex)\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final File file = createTestFile();\n+        final FileHandler handler = new FileHandler(content);\n+        final FileHandler handler = new FileHandler();\n+        final File file = createTestFile();\n+        catch (final ConfigurationException cex)\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler config1 = new FileHandler(content);\n+        final File file = createTestFile();\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final File file = createTestFile();\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final File file = createTestFile();\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final File file = createTestFile();\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final FileInputStream in = new FileInputStream(file);\n+        final File file = createTestFile();\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final Reader in = new FileReader(file);\n+        final File file = createTestFile();\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final File file = createTestFile();\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final StringWriter out = new StringWriter();\n+        final FileBased content = EasyMock.createMock(FileBased.class);\n+        final StringWriter out = new StringWriter();\n+        final IOException ioex = new IOException(\"Test exception!\");\n+        final FileHandler handler = new FileHandler(content);\n+        catch (final ConfigurationException cex)\n+        final FileHandler handler = new FileHandler();\n+        final File file = folder.newFile();\n+        final FileOutputStream out = new FileOutputStream(file);\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final File file = folder.newFile();\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final File file = folder.newFile();\n+        final URL url = file.toURI().toURL();\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final File file = folder.newFile();\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final File file = folder.newFile();\n+        final String basePath = \"some base path\";\n+        final MalformedURLException urlex =\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        catch (final ConfigurationException cex)\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final File file = folder.newFile();\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        catch (final ConfigurationException cex)\n+        final File file = folder.newFile();\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final File file = folder.newFile();\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final File path = folder.newFolder(\"path with spaces\");\n+        final File confFile = new File(path, \"config-test.properties\");\n+        final File testFile = createTestFile(confFile);\n+        final URL url = testFile.toURI().toURL();\n+        final FileBasedTestImpl content = new FileBasedTestImpl();\n+        final FileHandler handler = new FileHandler(content);\n+        final File out = new File(path, \"out.txt\");\n+        final File saveFile = folder.newFile(\"test+config.properties\");\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileHandler h1 = new FileHandler();\n+        final File f = new File(\"testfile.txt\");\n+        final FileBased content = new FileBasedTestImpl();\n+        final FileHandler h2 = new FileHandler(content, h1);\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final File file = createTestFile();\n+        final FileBasedFileLocatorAwareTestImpl content =\n+        final FileHandler handler = new FileHandler(content);\n+            final FileBasedFileLocatorAwareTestImpl content)\n+        final FileBasedFileLocatorAwareTestImpl content =\n+        final FileHandler handler = new FileHandler(content);\n+        final ByteArrayInputStream bos = new ByteArrayInputStream(CONTENT.getBytes());\n+        final FileBasedFileLocatorAwareTestImpl content =\n+        final FileHandler handler = new FileHandler(content);\n+        final File file = folder.newFile();\n+        final FileBasedFileLocatorAwareTestImpl content =\n+        final FileHandler handler = new FileHandler(content);\n+        final FileBasedFileLocatorAwareTestImpl content =\n+        final FileHandler handler = new FileHandler(content);\n+        final FileBasedFileLocatorAwareTestImpl content =\n+        final FileHandler handler = new FileHandler(content);\n+        final FileBasedFileLocatorAwareTestImpl content =\n+        final FileHandler handler = new FileHandler(content);\n+        final String encoding = \"testEncoding\";\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileHandlerListenerTestImpl listener =\n+        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n+        final FileHandlerListenerTestImpl listener =\n+        final File f = folder.newFile();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandlerListenerTestImpl listener =\n+        final FileHandler handler = new FileHandler();\n+        final FileHandlerListenerTestImpl listener =\n+        final FileHandler handler = new FileHandler();\n+        final FileHandlerListenerTestImpl listener =\n+        final FileHandler handler = new FileHandler();\n+        final FileHandlerListenerTestImpl listener =\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final FileHandler handler = new FileHandler();\n+        final FileHandlerListenerTestImpl listener =\n+        final FileHandler handler = new FileHandler();\n+        final FileHandlerListenerTestImpl listener =\n+        final URL url = folder.newFile().toURI().toURL();\n+        final FileHandler handler = new FileHandler();\n+        final FileHandlerListenerTestImpl listener =\n+        final FileHandler handler = new FileHandler();\n+        final FileHandlerListenerTestImpl listener =\n+        final FileBasedInputStreamSupportTestImpl content =\n+        final FileHandler handler = new FileHandler(content);\n+        final ByteArrayInputStream bin = new ByteArrayInputStream(CONTENT.getBytes());\n+        final FileBasedInputStreamSupportTestImpl content =\n+        final ByteArrayInputStream bin = new ByteArrayInputStream(CONTENT.getBytes());\n+        final IOException ioex = new IOException();\n+        final FileHandler handler = new FileHandler(content);\n+        catch (final ConfigurationException cex)\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final FileHandler handler = new FileHandler(config);\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n+        final FileHandler handler = new FileHandler(config);\n+        final File f = folder.newFile();\n+            final Thread t1 = new Thread()\n+            final Thread t2 = new Thread()\n+            final Thread t3 = new Thread()\n+            final Thread t4 = new Thread()\n+            final List<Thread> threads = Arrays.asList(t1, t2, t3, t4);\n+            for (final Thread t : threads)\n+            for (final Thread t : threads)\n+            final FileLocator locator = handler.getFileLocator();\n+        final FileHandler handler = new FileHandler();\n+        final FileLocator locator =\n+        final FileHandler handler = new FileHandler();\n+        final FileHandler handler = new FileHandler();\n+        final FileLocator locator = handler.getFileLocator();\n+        final PropertiesConfiguration config = new PropertiesConfiguration();\n+        final FileHandler h2 = new FileHandler(config);\n+        final FileHandler handler = new FileHandler();\n+        final FileLocator locator = handler.getFileLocator();\n+        final FileHandler handler = new FileHandler();\n+        final FileLocator locator = handler.getFileLocator();\n+        final FileLocator locator =\n+        final Map<String, Object> map = new HashMap<>();\n+        final FileHandler handler = FileHandler.fromMap(map);\n+        public void setContent(final String content)\n+        public void read(final Reader in) throws ConfigurationException, IOException\n+        public void write(final Writer out) throws ConfigurationException,\n+        public void read(final InputStream in) throws ConfigurationException,\n+            final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        public void initFileLocator(final FileLocator loc)\n+        public void read(final Reader in) throws ConfigurationException, IOException\n+        public void write(final Writer out) throws ConfigurationException,\n+        public FileHandlerListenerTestImpl(final FileHandler fh)\n+        public void checkMethods(final String expMethods)\n+        public void loading(final FileHandler handler)\n+        public void loaded(final FileHandler handler)\n+        public void saving(final FileHandler handler)\n+        public void saved(final FileHandler handler)\n+        public void locationChanged(final FileHandler handler)\n+        private void methodCalled(final FileHandler handler, final String method)\n+        final FileLocator locator = FileLocatorUtils.fileLocator().create();\n+    private static void checkLocator(final FileLocator locator)\n+        final FileLocator locator =\n+        final FileLocator locatorSrc =\n+        final FileLocator locator =\n+        final FileLocator loc1 =\n+        final FileLocator loc =\n+        final FileLocator loc =\n+        final FileLocator loc =\n+        final String s = loc.toString();\n+        final File file = new File(\"https%3A%2F%2Fwww.apache.org%2F.url\").getAbsoluteFile();\n+        final URL fileURL = file.toURI().toURL();\n+        final File file2 = FileLocatorUtils.fileFromURL(fileURL);\n+        final File file = new File(new File(\"target\"), \"foo+bar.txt\")\n+        final URL fileURL = file.toURI().toURL();\n+        final File file2 = FileLocatorUtils.fileFromURL(fileURL);\n+        final File directory = new File(\"target\");\n+        final File reference = new File(directory, \"test.txt\").getAbsoluteFile();\n+        final ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final FileLocator locator =\n+        final FileLocator locator =\n+        final FileLocator locator =\n+        final FileLocator locator =\n+    private static void checkTestConfiguration(final FileHandler handler)\n+        final XMLConfiguration config = new XMLConfiguration();\n+        final FileHandler h2 = new FileHandler(config, handler);\n+    private static void checkFullyInitializedLocator(final FileLocator locator)\n+        final FileLocator locator =\n+        final FileLocator locator =\n+        final FileLocator locator =\n+        final FileLocator fullLocator =\n+        final FileLocator locator =\n+        final FileLocator locator =\n+        final URI uri = new URI(\"test://test/path/file.tst\");\n+        final File file = ConfigurationAssert.getTestFile(FILE_NAME);\n+        final FileHandler handler = new FileHandler();\n+        final CombinedLocationStrategy strategy =\n+        final Iterator<FileLocationStrategy> it =\n+        final FileLocationStrategy strategy =\n+        final FileLocator locator =\n+        final FileLocator locator = FileLocatorUtils.fileLocator().create();\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final FileLocationStrategy strategy =\n+        final FileLocator locator =\n+        final FileLocationStrategy strategy =\n+        final FileLocator locator =\n+        final FileLocator locator =\n+        final FileLocationStrategy strategy =\n+        final FileLocator locator =\n+        final FileLocationStrategy strategy =\n+        final FileLocator locator =\n+        final Map<String, Object> map = new HashMap<>();\n+        final FileLocator locator2 = FileLocatorUtils.fromMap(map);\n+        final Map<String, Object> map = new HashMap<>();\n+        final FileLocator fileLocator = FileLocatorUtils.fromMap(null);\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final URL url = ConfigurationAssert.getTestURL(\"test.xml\");\n+        final FileLocator locator =\n+    private HomeDirectoryLocationStrategy setUpStrategy(final boolean withBasePath)\n+        final HomeDirectoryLocationStrategy strategy =\n+        final File file = folder.newFile(FILE_NAME);\n+        final FileLocator locator =\n+        final HomeDirectoryLocationStrategy strategy = setUpStrategy(false);\n+        final URL url = strategy.locate(fileSystem, locator);\n+        final FileLocator locator =\n+        final HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n+        final File sub = folder.newFolder(BASE_PATH);\n+        final File file = new File(sub, FILE_NAME);\n+        final FileLocator locator =\n+        final HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n+        final URL url = strategy.locate(fileSystem, locator);\n+        final File file = folder.newFile(FILE_NAME);\n+        final FileLocator locator =\n+        final HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n+        final URL url = strategy.locate(fileSystem, locator);\n+        final FileLocator locator =\n+        final HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final URL url = ConfigurationAssert.getTestURL(\"test.xml\");\n+        final FileLocator locator =\n+        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n+        final FileLocator locator =\n+    private static void load(final PropertyListConfiguration c, final File f)\n+        } catch (final ConfigurationException e) {\n+        final String key = \"empty-array\";\n+        final List<?> list = (List<?>) config.getProperty(key);\n+        final String key = \"array\";\n+        final List<?> list = (List<?>) config.getProperty(key);\n+        final String key = \"nested-arrays\";\n+        final Object array = config.getProperty(key);\n+        final List<?> list = config.getList(key);\n+        final List<?> list1 = (List<?>) list.get(0);\n+        final List<?> list2 = (List<?>) list.get(1);\n+        final String key = \"dictionary-array\";\n+        final Object array = config.getProperty(key);\n+        final List<?> list = config.getList(key);\n+        final Configuration conf1 = (Configuration) list.get(0);\n+        final Configuration conf2 = (Configuration) list.get(1);\n+        final Calendar cal = Calendar.getInstance();\n+        final Date date = cal.getTime();\n+    private void saveConfig(final File file) throws ConfigurationException\n+        final File savedFile = folder.newFile(\"testsave.plist\");\n+        final PropertyListConfiguration checkConfig = new PropertyListConfiguration();\n+        final Iterator<String> it = config.getKeys();\n+            final String key = it.next();\n+            final Object value = checkConfig.getProperty(key);\n+                final byte[] array = (byte[]) value;\n+                final List<?> list1 = (List<?>) config.getProperty(key);\n+                final List<?> list2 = (List<?>) value;\n+                    final Object value1 = list1.get(i);\n+                    final Object value2 = list2.get(i);\n+                        final ConfigurationComparator comparator = new StrictConfigurationComparator();\n+        final File savedFile = folder.newFile(\"testsave.plist\");\n+        final PropertyListConfiguration checkConfig = new PropertyListConfiguration();\n+            final HierarchicalConfiguration<ImmutableNode> config, final String name)\n+        final NodeHandler<ImmutableNode> handler =\n+        final File saveFile = folder.newFile();\n+        final byte[] expected = new byte[]{1, 2, 3, 4};\n+        final PropertyListConfiguration config2 = new PropertyListConfiguration();\n+        final Object array = config2.getProperty(\"foo\");\n+        final File saveFile = folder.newFile();\n+        final byte[] expected = new byte[]{1, 2, 3, 4};\n+        final PropertyListConfiguration config2 = new PropertyListConfiguration();\n+        final Object array = config2.getProperty(\"foo\");\n+        final PropertyListConfiguration copy = new PropertyListConfiguration(config);\n+        final Calendar cal = Calendar.getInstance();\n+            final PropertyListConfiguration c = new PropertyListConfiguration();\n+        catch (final ConfigurationException cex)\n+        final Calendar calendar = Calendar.getInstance();\n+        final byte[] expected = new byte[] {0x20, 0x20};\n+    private static void load(final XMLPropertyListConfiguration c, final File file)\n+    private void save(final File file) throws ConfigurationException\n+        final Calendar calendar = Calendar.getInstance();\n+        final Configuration subset = config.subset(\"dictionary\");\n+        final Iterator<String> keys = subset.getKeys();\n+        final Object array = config.getProperty(\"array\");\n+        final List<?> list = config.getList(\"array\");\n+        final String key = \"nested-array\";\n+        final Object array = config.getProperty(key);\n+        final List<?> list = config.getList(key);\n+        final List<?> list1 = (List<?>) list.get(0);\n+        final List<?> list2 = (List<?>) list.get(1);\n+        final String key = \"dictionary-array\";\n+        final Object array = config.getProperty(key);\n+        final List<?> list = config.getList(key);\n+        final Configuration conf1 = (Configuration) list.get(0);\n+        final Configuration conf2 = (Configuration) list.get(1);\n+        final File savedFile = folder.newFile();\n+        final XMLPropertyListConfiguration checkConfig = new XMLPropertyListConfiguration();\n+        final Iterator<String> it = config.getKeys();\n+            final String key = it.next();\n+            final Object value = checkConfig.getProperty(key);\n+                final byte[] array = (byte[]) value;\n+                final List<?> list1 = (List<?>) config.getProperty(key);\n+                final List<?> list2 = (List<?>) value;\n+                    final Object value1 = list1.get(i);\n+                    final Object value2 = list2.get(i);\n+                        final ConfigurationComparator comparator = new StrictConfigurationComparator();\n+        final File savedFile = folder.newFile();\n+        final XMLPropertyListConfiguration checkConfig = new XMLPropertyListConfiguration();\n+        final File savedFile = folder.newFile();\n+        final byte[] expected = new byte[]{1, 2, 3, 4};\n+        final XMLPropertyListConfiguration config2 = new XMLPropertyListConfiguration();\n+        final Object array = config2.getProperty(\"foo\");\n+        final File savedFile = folder.newFile();\n+        final byte[] expected = new byte[]{1, 2, 3, 4};\n+        final XMLPropertyListConfiguration config2 = new XMLPropertyListConfiguration();\n+        final Object array = config2.getProperty(\"foo\");\n+        final XMLPropertyListConfiguration copy = new XMLPropertyListConfiguration(config);\n+        final StrictConfigurationComparator comp = new StrictConfigurationComparator();\n+        final XMLPropertyListConfiguration plist = new XMLPropertyListConfiguration();\n+        final XMLPropertyListConfiguration plist = new XMLPropertyListConfiguration();\n+        final StringWriter writer = new StringWriter();\n+        final String encoding = \"UTF-8\";\n+        final FileHandler handler = new FileHandler(config);\n+        final StringWriter writer = new StringWriter();\n+    private void checkArrayProperty(final List<?> expectedValues)\n+        final StringWriter out = new StringWriter();\n+        final StringBuilder values = new StringBuilder();\n+        for (final Object v : expectedValues)\n+        final String content = out.toString().replaceAll(\"[ \\n\\r]\", \"\");\n+        final List<String> elems =\n+        final Object[] elems = {\n+        final Writer out = new FileWriter(folder.newFile());\n+        catch (final ConfigurationException e)\n+            final XMLPropertyListConfiguration c = new XMLPropertyListConfiguration();\n+        catch (final ConfigurationException cex)\n+        final List<ReloadingController> lstCtrls =\n+        final CombinedReloadingController result =\n+        final Collection<ReloadingController> ctrls =\n+        final CombinedReloadingController ctrl = setUpController();\n+        final CombinedReloadingController ctrl = setUpController();\n+        for (final ReloadingController rc : subControllers)\n+        final CombinedReloadingController ctrl = setUpController();\n+        for (final ReloadingController rc : subControllers)\n+        final CombinedReloadingController ctrl = setUpController();\n+        for (final ReloadingController rc : subControllers)\n+        final CombinedReloadingController ctrl = setUpController();\n+        final Collection<ReloadingController> subs = ctrl.getSubControllers();\n+        final Collection<ReloadingController> subs =\n+\t\tfinal FileHandler handler = new FileHandler();\n+\t\tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector(\n+    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n+    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n+    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n+        final File f = EasyMock.createMock(File.class);\n+        final FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n+        final File f = EasyMock.createMock(File.class);\n+        final FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n+        final File f = EasyMock.createMock(File.class);\n+        final FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n+        final File f = EasyMock.createMock(File.class);\n+        final FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n+        final File f = EasyMock.createMock(File.class);\n+\t\tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(\n+    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n+    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n+        final URL url =\n+        final File file = detector.getFile();\n+\t\tpublic FileHandlerReloadingDetectorTestImpl(final File file) {\n+\t\tpublic FileHandlerReloadingDetectorTestImpl(final File file, final long delay)\n+        final PeriodicReloadingTrigger trigger =\n+        final\n+    private void expectSchedule(final ScheduledFuture<Void> future)\n+        final PeriodicReloadingTrigger trigger = createTrigger();\n+        final ScheduledFuture<Void> future = createFutureMock();\n+        final PeriodicReloadingTrigger trigger = createTrigger();\n+        final ScheduledFuture<Void> future = createFutureMock();\n+        final PeriodicReloadingTrigger trigger = createTrigger();\n+        final ScheduledFuture<Void> future = createFutureMock();\n+        final PeriodicReloadingTrigger trigger = createTrigger();\n+        final\n+    private void expectEvent(final EventListener<ReloadingEvent> l,\n+        final EventListener<ReloadingEvent> l = createListenerMock();\n+        final EventListener<ReloadingEvent> lRemoved = createListenerMock();\n+        final MutableObject<ReloadingEvent> evRef = new MutableObject<>();\n+        final ReloadingController ctrl = createController();\n+        final Object testData = \"Some test data\";\n+        final EventListener<ReloadingEvent> l = createListenerMock();\n+        final ReloadingController ctrl = createController();\n+        final EventListener<ReloadingEvent> l = createListenerMock();\n+        final ReloadingController ctrl = createController();\n+        final ReloadingController ctrl = createController();\n+    private void writeTestFile(final File file, final String value) throws IOException\n+        final FileWriter out = new FileWriter(file);\n+        final File file = folder.newFile();\n+        final VFSFileHandlerReloadingDetector strategy =\n+        final long modificationDate = strategy.getLastModificationDate();\n+        final File file = ConfigurationAssert.getOutFile(\"NonExistingFile.xml\");\n+        final FileHandler handler = new FileHandler();\n+        final VFSFileHandlerReloadingDetector strategy =\n+        final VFSFileHandlerReloadingDetector strategy =\n+        final FileName name = EasyMock.createMock(FileName.class);\n+        final VFSFileHandlerReloadingDetector strategy =\n+        final VFSFileHandlerReloadingDetector strategy =\n+        final VFSFileHandlerReloadingDetector strategy =\n+        final Configuration one = new BaseConfiguration();\n+        final String properties =\n+        final PropertiesConfiguration two = new PropertiesConfiguration();\n+        final PropertiesConfigurationLayout layout =\n+        final Properties props = configurationFactory.getObject();\n+        final Properties props = configurationFactory.getObject();\n+        final Resource[] locations = {\n+        final Resource[] locationsUpdate = locations.clone();\n+        final Resource[] locations = {\n+        final Resource[] locationsGet = configurationFactory.getLocations();\n+        final Configuration[] configs = {\n+        final Configuration[] configsUpdate = configs.clone();\n+        final Configuration[] configs = {\n+        final Configuration[] configsGet = configurationFactory.getConfigurations();\n+                final ConfigurableEnvironment env)\n+            final PropertySourcesPlaceholderConfigurer configurer =\n+            final MutablePropertySources sources = new MutablePropertySources();\n+        final PropertiesConfiguration propertiesConfiguration =\n+        final ReadWriteLock lock = EasyMock.createMock(ReadWriteLock.class);\n+        final Lock readLock = EasyMock.createMock(Lock.class);\n+        final ReadWriteSynchronizer sync = new ReadWriteSynchronizer(lock);\n+        final Synchronizer sync = new ReadWriteSynchronizer();\n+        final Synchronizer sync = new ReadWriteSynchronizer();\n+        final Account account1 = new Account();\n+        final Account account2 = new Account();\n+        final UpdateThread[] updateThreads = new UpdateThread[updateThreadCount];\n+        final ReaderThread[] readerThreads = new ReaderThread[readThreadCount];\n+        for (final UpdateThread t : updateThreads)\n+        for (final ReaderThread t : readerThreads)\n+    private static long sumUpAccounts(final Account... accounts)\n+        for (final Account acc : accounts)\n+        public void change(final long delta)\n+        public ReaderThread(final Synchronizer s, final int readCount, final Account... accs)\n+                final long sum = sumUpAccounts(accounts);\n+        public UpdateThread(final Synchronizer s, final int updateCount, final Account ac1,\n+                final Account ac2)\n+                final long x =\n+    public HsqlDB(final String uri, final String databaseDriver, final String loadFile)\n+        catch (final Exception e)\n+    private void loadSqlFile(final String fileName)\n+                final String cmd = commands.substring(0, targetPos + 1);\n+                catch (final SQLException sqle)\n+    private String getFileContents(final String fileName)\n+        final FileReader fr = new FileReader(fileName);\n+        final char fileBuf[]  = new char[1024];\n+        final StringBuffer sb = new StringBuffer(1000);\n+        final XMLConfiguration conf1 = new XMLConfiguration();\n+        final XMLConfiguration conf2 = new XMLConfiguration();\n+        final ImmutableNode cn =\n+        final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration();\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+            final ImmutableNode authorNode =\n+                final String workKey =\n+                final ImmutableNode workNode =\n+                    final String personKey =\n+                    final ImmutableNode personNode =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final ImmutableNode author =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final int year = 1611;\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final String name = \"Achilles\";\n+        final Set<ImmutableNode> children =\n+        for (final ImmutableNode c : children)\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final List<ImmutableNode> children =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final String key = \"Simmons/Hyperion\";\n+        final ImmutableNode parent = nodeForKey(handler, key);\n+        final ImmutableNode child = nodeForKey(handler, key + \"/Weintraub\");\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final ImmutableNode parent = nodeForKey(handler, \"Homer/Ilias\");\n+        final ImmutableNode child =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final ImmutableNode node = nodeForKey(handler, \"Puck\");\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final ImmutableNode node = nodeForKey(handler, \"Puck\");\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final ImmutableNode node = nodeForKey(handler, \"Puck\");\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final ImmutableNode node = nodeForKey(handler, \"Prospero\");\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final ImmutableNode node =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final ImmutableNode node = new ImmutableNode.Builder().value(42).create();\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n+        final ImmutableNode node =\n+        final NodeMatcher<ImmutableNode> matcher = new NodeMatcher<ImmutableNode>()\n+            public <T> boolean matches(final T node, final NodeHandler<T> paramHandler,\n+                    final ImmutableNode criterion)\n+        final List<ImmutableNode> result =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        final List<ImmutableNode> result =\n+        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n+        public <T> boolean matches(final T node, final NodeHandler<T> handler, final Object criterion) {\n+    public static String author(final int idx)\n+    public static int worksLength(final int authorIdx)\n+    public static String work(final int authorIdx, final int idx)\n+    public static int personaeLength(final int authorIdx, final int workIdx)\n+    public static String persona(final int authorIdx, final int workIdx, final int personaIdx)\n+    public static String table(final int idx)\n+    public static int fieldsLength(final int tabIdx)\n+    public static String field(final int tabIdx, final int fldIdx)\n+    public static String appendPath(final String path, final String component)\n+        final StringBuilder buf =\n+    public static ImmutableNode nodeForKey(final ImmutableNode root, final String key)\n+        final String[] components = key.split(PATH_SEPARATOR);\n+    public static ImmutableNode nodeForKey(final InMemoryNodeModel model, final String key)\n+    public static ImmutableNode nodeForKey(final NodeHandler<ImmutableNode> handler,\n+            final String key)\n+    public static String nodePath(final String... path)\n+    public static String nodePathWithEndNode(final String endNode, final String... path)\n+    public static ImmutableNode createNode(final String name, final Object value)\n+    public static ImmutableNode createFieldNode(final String name)\n+        final ImmutableNode.Builder fldBuilder = new ImmutableNode.Builder(1);\n+        final\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+                        final ImmutableNode root =\n+                        final String key = (String) EasyMock.getCurrentArguments()[1];\n+                        final NodeHandler<ImmutableNode> handler =\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+                        final ImmutableNode root =\n+                        final String key = (String) EasyMock.getCurrentArguments()[1];\n+                        final TreeData handler =\n+    public static ImmutableNode createTablesTree(final String[] tables,\n+                                                 final String[][] fields)\n+        final ImmutableNode.Builder bldTables =\n+            final ImmutableNode.Builder bldTable = new ImmutableNode.Builder(2);\n+            final ImmutableNode.Builder bldFields =\n+        final String[][] fieldNamesNew = new String[FIELDS.length][];\n+        final ImmutableNode.Builder rootBuilder =\n+            final ImmutableNode.Builder authorBuilder = new ImmutableNode.Builder();\n+                final ImmutableNode.Builder workBuilder = new ImmutableNode.Builder();\n+                for (final String person : PERSONAE[author][work])\n+        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n+                for (final String person : PERSONAE[author][work])\n+                    final ImmutableNode orgValue =\n+                    final ImmutableNode workNode =\n+                    final ImmutableNode personNode =\n+    private static ImmutableNode findNode(final ImmutableNode parent,\n+            final String[] components, final int currentIdx)\n+        final Matcher m = PAT_KEY_WITH_INDEX.matcher(components[currentIdx]);\n+        for (final ImmutableNode node : parent.getChildren())\n+    private DefaultConfigurationKey key(final String k)\n+        final DefaultExpressionEngineSymbols symbols =\n+        final DefaultExpressionEngineSymbols symbols =\n+        final DefaultConfigurationKey k1 = key(TESTKEY);\n+        final DefaultConfigurationKey k2 = key(TESTKEY);\n+        final DefaultConfigurationKey.KeyIterator it = key.iterator();\n+        catch (final NoSuchElementException nex)\n+        final DefaultConfigurationKey.KeyIterator it = key.iterator();\n+        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n+        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n+        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n+        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n+        final DefaultConfigurationKey.KeyIterator it = key.iterator();\n+        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n+        final DefaultConfigurationKey k1 = key(TESTKEY);\n+        final DefaultConfigurationKey k1 = key(TESTKEY);\n+        final DefaultConfigurationKey kd = k1.differenceKey(k1);\n+        final DefaultConfigurationKey k1 = key(TESTKEY);\n+        final DefaultExpressionEngineSymbols symbols =\n+    private void checkQueryRootNode(final String key)\n+        final List<QueryResult<ImmutableNode>> results = checkKey(key, null, 1);\n+        final QueryResult<ImmutableNode> result = results.get(0);\n+        final ImmutableNode node = root.getChildren().get(0);\n+        final ImmutableNode node = root.getChildren().get(1);\n+        final DefaultExpressionEngineSymbols symbols =\n+        final ImmutableNode nd = data.getParent().getChildren().get(0);\n+        final ImmutableNode node = data.getParent().getChildren().get(0);\n+        final NodeAddData<ImmutableNode> data = engine.prepareAdd(root,\n+        final NodeAddData<ImmutableNode> data = engine.prepareAdd(root, \"[@newAttr]\", handler);\n+        final DefaultExpressionEngineSymbols symbols =\n+        final ImmutableNode node = fetchNode(\"tables.table(0).name\");\n+        final ImmutableNode tab1 = fetchNode(\"tables.table(0)\");\n+        final ImmutableNode tab2 = fetchNode(\"tables.table(1)\");\n+        final ImmutableNode node = fetchNode(\"tables.table(0).fields.field(1).name\");\n+        final NodeAddData<ImmutableNode> data =\n+        final ImmutableNode.Builder nodeTablesBuilder =\n+            final ImmutableNode.Builder nodeTableBuilder =\n+            final ImmutableNode.Builder nodeFieldsBuilder =\n+        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n+        final ImmutableNode.Builder nodeConnBuilder = new ImmutableNode.Builder();\n+        final DefaultExpressionEngineSymbols symbols =\n+        final NodeMatcher<String> matcher = new NodeMatcher<String>()\n+            public <T> boolean matches(final T node, final NodeHandler<T> handler,\n+                    final String criterion)\n+    private List<QueryResult<ImmutableNode>> checkKey(final String key, final String name,\n+            final int count)\n+        final List<QueryResult<ImmutableNode>> nodes = query(key, count);\n+        for (final QueryResult<ImmutableNode> result : nodes)\n+    private List<QueryResult<ImmutableNode>> query(final String key, final int expCount)\n+        final List<QueryResult<ImmutableNode>> nodes = engine.query(root, key, handler);\n+    private ImmutableNode fetchNode(final String key)\n+        final QueryResult<ImmutableNode> result = query(key, 1).get(0);\n+    private void checkKeyValue(final String key, final String name, final String value)\n+        final List<QueryResult<ImmutableNode>> results = checkKey(key, name, 1);\n+        final QueryResult<ImmutableNode> result = results.get(0);\n+    private void checkAttributeValue(final String key, final String attr, final Object expValue)\n+        final List<QueryResult<ImmutableNode>> results = checkKey(key, attr, 1);\n+        final QueryResult<ImmutableNode> result = results.get(0);\n+    private void checkNodePath(final NodeAddData<ImmutableNode> data,\n+            final String... expected)\n+        final Iterator<String> it = data.getPathNodes().iterator();\n+    private static ImmutableNode createFieldNode(final String name)\n+        final ImmutableNode.Builder nodeFieldBuilder = new ImmutableNode.Builder(1);\n+    private static ImmutableNode createNode(final String name, final Object value)\n+    private static void expEqual(final Object o1, final Object o2)\n+    private static void expNE(final Object o1, final Object o2)\n+        final DefaultExpressionEngineSymbols s2 =\n+        final DefaultExpressionEngineSymbols s1 =\n+        final DefaultExpressionEngineSymbols symbols = builder().create();\n+        final String s = symbols.toString();\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder();\n+        final ImmutableNode node = setUpBuilder().create();\n+        final ImmutableNode node = setUpBuilder().create();\n+        final ImmutableNode node = setUpBuilder().create();\n+    private static void checkChildNodes(final ImmutableNode node,\n+            final Collection<ImmutableNode> expChildren)\n+        final Iterator<ImmutableNode> itExp = expChildren.iterator();\n+        for(final ImmutableNode c : node.getChildren())\n+    private static void checkChildNodes(final ImmutableNode parent,\n+            final ImmutableNode... children)\n+        final List<ImmutableNode> childNodes = new ArrayList<>(childCount);\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder(childCount);\n+            final ImmutableNode.Builder childBuilder = new ImmutableNode.Builder();\n+            final ImmutableNode child = childBuilder.name(NAME + i).value(i).create();\n+        final ImmutableNode node = builder.name(NAME).create();\n+        final List<ImmutableNode> childNodes =\n+            final ImmutableNode.Builder childBuilder = new ImmutableNode.Builder();\n+            final ImmutableNode child = childBuilder.name(NAME + i).value(i).create();\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final ImmutableNode node = builder.addChildren(childNodes).create();\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final ImmutableNode node = builder.create();\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final ImmutableNode child =\n+        final ImmutableNode node = builder.addChild(child).create();\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final ImmutableNode node = builder.create();\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final List<ImmutableNode> children = Arrays.asList(createChild(), null, createChild());\n+        final ImmutableNode node = builder.create();\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final Map<String, Object> attrs = new HashMap<>();\n+            final String attrName = NAME + i;\n+        final ImmutableNode node = builder.create();\n+    private static void checkAttributes(final ImmutableNode node,\n+            final Map<String, ?> expAttrs)\n+        for (final Map.Entry<String, ?> e : expAttrs.entrySet())\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final ImmutableNode node = builder.create();\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final Map<String, Object> attrs = new HashMap<>();\n+            final String attrName = NAME + i;\n+        final ImmutableNode node = builder.addAttributes(attrs).create();\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final ImmutableNode node = builder.create();\n+    private ImmutableNode createDefaultNode(final Object value)\n+    private ImmutableNode createDefaultNode(final String name, final Object value)\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder(1);\n+        final int idx = childCounter++;\n+    private static void checkUpdatedNode(final ImmutableNode org,\n+            final ImmutableNode updated)\n+        final ImmutableNode node = createDefaultNode(\"test\");\n+        final ImmutableNode node2 = node.setValue(VALUE);\n+        final ImmutableNode node = createDefaultNode(\"anotherName\", VALUE);\n+        final ImmutableNode node2 = node.setName(NAME);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode child2 =\n+        final ImmutableNode node2 = node.addChild(child2);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode child2 =\n+        final ImmutableNode node2 = node.addChild(child2);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode child2 =\n+        final ImmutableNode node2 = node.addChild(child2);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode child2 =\n+        final ImmutableNode node2 = node.addChild(child2);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode child = node.getChildren().get(0);\n+        final ImmutableNode node2 = node.removeChild(child);\n+        final ImmutableNode childRemove = createChild();\n+        final ImmutableNode node =\n+        final ImmutableNode node2 = node.removeChild(childRemove);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode childRemove = createChild();\n+        final ImmutableNode childReplace = createChild();\n+        final ImmutableNode node = createDefaultNode(VALUE).addChild(childRemove);\n+        final ImmutableNode node2 = node.replaceChild(childRemove, childReplace);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode node2 = node.setAttribute(\"attr\", ATTR_VALUE);\n+        final Map<String, Object> newAttrs =\n+        final ImmutableNode.Builder builder = setUpBuilder();\n+        final Map<String, Object> attrs = new HashMap<>();\n+        final ImmutableNode node = builder.addAttributes(attrs).create();\n+        final ImmutableNode node2 = node.setAttribute(attr2, VALUE);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final Map<String, Object> attributes = new HashMap<>();\n+        final ImmutableNode node2 = node.setAttributes(attributes);\n+    private static void checkAttributesContained(final ImmutableNode node,\n+            final Map<String, Object> attributes)\n+        for (final Map.Entry<String, Object> e : attributes.entrySet())\n+    private void checkSetAttributesNoOp(final Map<String, Object> attributes)\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final String attrName = node.getAttributes().keySet().iterator().next();\n+        final ImmutableNode node2 = node.removeAttribute(attrName);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final Collection<ImmutableNode> newChildren =\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode node2 = node.replaceChildren(newChildren);\n+        final ImmutableNode node = createDefaultNode(VALUE);\n+        final ImmutableNode node2 = node.replaceChildren(null);\n+        final InMemoryNodeModel model = new InMemoryNodeModel();\n+        final ImmutableNode root = model.getRootNode();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n+        final\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeAddData<ImmutableNode> addData =\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final String[] locations = {\n+        final ImmutableNode nodeLocs = nodeForKey(model, \"Homer/Ilias/locations\");\n+        for (final ImmutableNode c : nodeLocs.getChildren())\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeAddData<ImmutableNode> addData =\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node = nodeForKey(model, \"Homer/work\");\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeAddData<ImmutableNode> addData =\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final String[] locations = {\n+        final String[] path = {\n+        final ImmutableNode node =\n+    private static void checkPathToRoot(final InMemoryNodeModel model,\n+            ImmutableNode node, final String... path)\n+        final NodeHandler<ImmutableNode> handler = model.getNodeHandler();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeAddData<ImmutableNode> addData =\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node = nodeForKey(model, \"Homer/Ilias/scenes/scene\");\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeAddData<ImmutableNode> addData =\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node = nodeForKey(model, \"Shakespeare/dateOfBirth\");\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeAddData<ImmutableNode> addData =\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node = nodeForKey(model, \"Shakespeare/The Tempest\");\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final QueryResult<ImmutableNode> result =\n+        final List<QueryResult<ImmutableNode>> removed = model.clearTree(KEY, resolver);\n+        final ImmutableNode node = nodeForKey(model, \"Homer/Ilias\");\n+        for (final ImmutableNode c : node.getChildren())\n+    private void checkClearTreeUpdatedParentMapping(final String pathToRemove,\n+            final ImmutableNode nodeToCheck)\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final QueryResult<ImmutableNode> result =\n+        catch (final IllegalArgumentException iaex)\n+        final String path = \"Homer/Ilias/Achilles\";\n+        final String path = \"Homer/Ilias\";\n+        final String[] path = {\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final QueryResult<ImmutableNode> result =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node = nodeForKey(model, \"Homer/Ilias\");\n+        final List<QueryResult<ImmutableNode>> results =\n+        for (final ImmutableNode child : node.getChildren())\n+        for (final ImmutableNode child : model.getRootNode().getChildren())\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final ImmutableNode child =\n+        final ImmutableNode root =\n+        final InMemoryNodeModel model = new InMemoryNodeModel(root);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n+        final QueryResult<ImmutableNode> result = QueryResult.createAttributeResult(\n+        final List<QueryResult<ImmutableNode>> removed = model.clearTree(KEY, resolver);\n+        final ImmutableNode node = nodeForKey(model, nodeName);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n+        final ImmutableNode orgNode = nodeForKey(model, nodeName);\n+        final List<QueryResult<ImmutableNode>> results =\n+        catch (final NoSuchElementException nex)\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n+        final TreeData treeDataOld = model.getTreeData();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final List<QueryResult<ImmutableNode>> results =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+                            final ImmutableNode addParent = nodeForKey(model, key);\n+        final ImmutableNode orgNode = nodeForKey(ROOT_AUTHORS_TREE, key);\n+        final ImmutableNode changedNode = nodeForKey(model, key);\n+        final Map<ImmutableNode, ImmutableNode> replacementMapping =\n+                        final ImmutableNode addParent =\n+        final Thread[] threads = new Thread[threadCount];\n+                    catch (final InterruptedException iex)\n+        for (final Thread t : threads)\n+        final Pattern patternAuthorName =\n+        final Set<Integer> indices = new HashSet<>();\n+            final ImmutableNode node = nodeForKey(model, \"author(\" + i + \")/name\");\n+            final Matcher m =\n+            final int idx = Integer.parseInt(m.group(1));\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final ImmutableNode node = nodeForKey(model, nodeKey);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final ImmutableNode node = nodeForKey(model, nodeKey);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final TreeData treeDataOld = model.getTreeData();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeAddData<ImmutableNode> addData =\n+        final NodeUpdateData<ImmutableNode> updateData =\n+        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n+        final ImmutableNode node = nodeForKey(model, \"Homer/work\");\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final NodeUpdateData<ImmutableNode> updateData =\n+        final ImmutableNode node = nodeForKey(model, nodeKey);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final Map<QueryResult<ImmutableNode>, Object> changedValues =\n+        final ImmutableNode changedNode = nodeForKey(model, nodeKey);\n+        final NodeUpdateData<ImmutableNode> updateData =\n+        final ImmutableNode node = nodeForKey(model, nodeKey);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final ImmutableNode newWork1 =\n+        final ImmutableNode newWork2 =\n+        final ImmutableNode node = nodeForKey(model, key);\n+        final int size = node.getChildren().size();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final ImmutableNode personaNode =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final ImmutableNode newNode =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final ImmutableNode newNode =\n+    private void checkAddNodesNoNodes(final Collection<ImmutableNode> newNodes)\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final InMemoryNodeModel model =\n+        final InMemoryNodeModel model =\n+        final ImmutableNode node = nodeForKey(model, \"Homer/Ilias\");\n+        final InMemoryNodeModel model =\n+        final ImmutableNode rootNode = model.getRootNode();\n+        final InMemoryNodeModel model =\n+        final Map<ImmutableNode, String> references = createReferences();\n+        final Collection<ImmutableNode> nodes =\n+        final Map<ImmutableNode, String> refs = new HashMap<>();\n+        for (final ImmutableNode node : nodes)\n+    private Collection<ImmutableNode> collectNodes(final ImmutableNode root)\n+                    public void visitBeforeChildren(final ImmutableNode node,\n+                            final NodeHandler<ImmutableNode> handler)\n+        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n+        final Collection<ImmutableNode> nodes = collectNodes(handler.getRootNode());\n+        for (final ImmutableNode node : nodes)\n+        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n+        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n+        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n+        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n+        final List<Object> removedRefs = handler.removedReferences();\n+        final int authorIdx = 2;\n+        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n+        final List<Object> removedRefs = handler.removedReferences();\n+        final ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", \"test\");\n+        final ImmutableNode root = model.getNodeHandler().getRootNode();\n+        final ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", null);\n+        final ImmutableNode root = model.getNodeHandler().getRootNode();\n+        final ImmutableNode node =\n+        final ImmutableNode root = model.getNodeHandler().getRootNode();\n+        final ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", null);\n+        final ReferenceNodeHandler refHandler = model.getReferenceNodeHandler();\n+        final ImmutableNode checkNode =\n+        final NodeSelector selector = new NodeSelector(\"Simmons.Hyperion\");\n+        final ImmutableNode trackedNode = model.getTrackedNode(selector);\n+        final ImmutableNode node = model.getTrackedNode(selector);\n+    private static NodeKeyResolver<ImmutableNode> createResolver(final boolean replay)\n+        final NodeKeyResolver<ImmutableNode> resolver =\n+        final ImmutableNode node =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final ImmutableNode node = model.getTrackedNode(selector);\n+        final ImmutableNode node =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+    private void initDetachedNode(final NodeKeyResolver<ImmutableNode> resolver)\n+        final ImmutableNode node =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final ImmutableNode node =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        catch (final ConfigurationRuntimeException crex)\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+    private static void checkForRemovedField(final ImmutableNode nodeFields, final int idx)\n+        final Set<String> expectedNames = new HashSet<>();\n+        final Set<String> actualNames = new HashSet<>();\n+        for (final ImmutableNode field : nodeFields.getChildren())\n+            final ImmutableNode nodeName = field.getChildren().get(0);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final ImmutableNode nodeFields = fieldsNodeFromModel();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final ImmutableNode rootNode = model.getRootNode();\n+        final ImmutableNode nodeFields = fieldsNodeFromTrackedNode();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final ImmutableNode nodeFields = fieldsNodeFromModel();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final ImmutableNode rootNode = model.getRootNode();\n+        final ImmutableNode nodeFields = fieldsNodeFromTrackedNode();\n+    private static void checkForAddedField(final ImmutableNode nodeFields)\n+        final ImmutableNode nodeField =\n+    private static void checkFieldNode(final ImmutableNode nodeField, final String name)\n+        final ImmutableNode nodeName = nodeField.getChildren().get(0);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final ImmutableNode rootNode = model.getRootNode();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final ImmutableNode rootNode = model.getRootNode();\n+            final NodeKeyResolver<ImmutableNode> resolver)\n+                        final ImmutableNode root =\n+                        final String key = (String) EasyMock.getCurrentArguments()[1];\n+                        final TreeData handler =\n+                        final List<QueryResult<ImmutableNode>> results =\n+    private static void checkedForChangedField(final ImmutableNode nodeFields, final int idx)\n+        for (final ImmutableNode field : nodeFields.getChildren())\n+            final String expName =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final ImmutableNode rootNode = model.getRootNode();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final ImmutableNode node = model.getTrackedNode(selector);\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeHandler<ImmutableNode> handler =\n+        final TrackedNodeHandler tnh = (TrackedNodeHandler) handler;\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeHandler<ImmutableNode> handler =\n+        final ImmutableNode newNode =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n+    private void expectNodeKey(final NodeKeyResolver<ImmutableNode> resolver,\n+            final ImmutableNode node, final String key)\n+        final Map<ImmutableNode, String> cache = new HashMap<>();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final String nodeKey1 = \"tables/table(0)\";\n+        final String nodeKey2 = \"tables/table(1)\";\n+        final ImmutableNode node1 = NodeStructureHelper.nodeForKey(root, nodeKey1);\n+        final ImmutableNode node2 = NodeStructureHelper.nodeForKey(root, nodeKey2);\n+        final Collection<NodeSelector> selectors =\n+        final Iterator<NodeSelector> it = selectors.iterator();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final ImmutableNode node = model.getTrackedNode(selector);\n+        final Collection<NodeSelector> selectors =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final ImmutableNode node = NodeStructureHelper.nodeForKey(root, \"tables\");\n+        final String[] keys = new String[node.getChildren().size()];\n+            final ImmutableNode child = node.getChildren().get(i);\n+        final Collection<NodeSelector> selectors =\n+        for (final NodeSelector sel : selectors)\n+    private void checkTrackChildNodesNoResult(final List<ImmutableNode> queryResult)\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final TreeData oldData = model.getTreeData();\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final String childName = \"name\";\n+        final String parentKey = \"tables/table(0)\";\n+        final String childKey = parentKey + \"/\" + childName;\n+        final ImmutableNode node = NodeStructureHelper.nodeForKey(model, parentKey);\n+        final ImmutableNode child = NodeStructureHelper.nodeForKey(node, childName);\n+        final NodeSelector childSelector =\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final String childName = \"space\";\n+        final String parentKey = \"tables/table(0)\";\n+        final String childKey = parentKey + \"/\" + childName;\n+        final ImmutableNode node = NodeStructureHelper.nodeForKey(model, parentKey);\n+        final NodeSelector childSelector =\n+        final ImmutableNode child = model.getTrackedNode(childSelector);\n+        final ImmutableNode parent = model.getNodeHandler().getParent(child);\n+            final List<ImmutableNode> queryResult)\n+        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n+        final List<ImmutableNode> nodes =\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+            final HierarchicalConfiguration<ImmutableNode> config)\n+        final HierarchicalConfiguration<ImmutableNode> c =\n+        final NodeHandler<ImmutableNode> nodeHandler = config.getNodeModel().getNodeHandler();\n+        final List<QueryResult<ImmutableNode>> nds =\n+        final NodeAddData<ImmutableNode> data =\n+        final NodeAddData<ImmutableNode> data =\n+        final List<String> pathNodes = new ArrayList<>();\n+        final NodeAddData<ImmutableNode> data =\n+        final NodeAddData<ImmutableNode> data =\n+    protected NodeHandler<ImmutableNode> createHandler(final ImmutableNode root)\n+        final InMemoryNodeModel model = new InMemoryNodeModel();\n+    private static ImmutableNode createNode(final String name)\n+        final ImmutableNode node = createNode(NODE_NAME);\n+        final ImmutableNode node = createNode(NODE_NAME);\n+    private void checkMatcherWithNullInput(final NodeMatcher<String> matcher)\n+        final ImmutableNode node = createNode(NODE_NAME);\n+        final ImmutableNode node = createNode(NODE_NAME);\n+        final NodeKeyResolver<ImmutableNode> resolver =\n+        final NodeSelector selector = new NodeSelector(\"tables.table(0).name\");\n+        final ImmutableNode target = selector.select(root, resolver, handler);\n+        final NodeKeyResolver<ImmutableNode> resolverMock =\n+        final NodeSelector selector = new NodeSelector(KEY);\n+        final NodeKeyResolver<ImmutableNode> resolverMock =\n+        final List<QueryResult<ImmutableNode>> results =\n+        final ImmutableNode target =\n+        final NodeSelector selector = new NodeSelector(KEY);\n+        final NodeSelector selector = new NodeSelector(\"tables.table.name\");\n+        final NodeSelector selectorParent = new NodeSelector(\"tables.table(0)\");\n+        final NodeSelector selector =\n+        final ImmutableNode target = selector.select(root, resolver, handler);\n+        final NodeSelector selectorParent = new NodeSelector(\"tables.unknown\");\n+        final NodeSelector selector =\n+        final NodeSelector selectorParent = new NodeSelector(\"tables.table\");\n+        final NodeSelector selector =\n+        final NodeSelector first = new NodeSelector(\"tables.table\");\n+        final NodeSelector second = first.subSelector(\"fields\");\n+        final int fldIdx = NodeStructureHelper.fieldsLength(1) - 1;\n+        final NodeSelector selector =\n+        final ImmutableNode target = selector.select(root, resolver, handler);\n+        final NodeSelector selector = new NodeSelector(KEY);\n+        final NodeSelector sel2 = new NodeSelector(KEY);\n+        final NodeSelector sub1 = selector.subSelector(\"k2\");\n+        final NodeSelector sub2 = sel2.subSelector(\"k2\");\n+        final NodeSelector selector = new NodeSelector(KEY);\n+        final NodeSelector selector = new NodeSelector(KEY);\n+        final NodeSelector selector = new NodeSelector(KEY).subSelector(key2);\n+        final String s = selector.toString();\n+    private static String visitAfterName(final String name)\n+        final\n+        final\n+        final ConfigurationNodeVisitor<ImmutableNode> visitor = visitorMock();\n+        final NodeHandler<ImmutableNode> handler = handlerMock();\n+        final List<String> expected = expectDFS();\n+        final TestVisitor visitor = new TestVisitor();\n+        final List<String> expected = new LinkedList<>();\n+                    final String persona =\n+        final TestVisitor visitor = new TestVisitor();\n+        final ConfigurationNodeVisitor<ImmutableNode> visitor = visitorMock();\n+        final NodeHandler<ImmutableNode> handler = handlerMock();\n+        final List<String> expected = expectBFS();\n+        final TestVisitor visitor = new TestVisitor();\n+        final List<String> expected = new LinkedList<>();\n+        final List<String> works = new LinkedList<>();\n+        final List<String> personae = new LinkedList<>();\n+        final TestVisitor visitor = new TestVisitor();\n+        public void setMaxNodeCount(final int maxNodeCount)\n+        public void visitBeforeChildren(final ImmutableNode node,\n+                final NodeHandler<ImmutableNode> handler)\n+        public void visitAfterChildren(final ImmutableNode node,\n+                final NodeHandler<ImmutableNode> handler)\n+        final NodeUpdateData<Object> data =\n+    private static QueryResult<Object> result(final Object value)\n+        final Map<QueryResult<Object>, Object> map =\n+        final NodeUpdateData<Object> data =\n+        final Map<QueryResult<Object>, Object> changedValues =\n+        final Collection<Object> col = new LinkedList<>();\n+        final NodeUpdateData<Object> data =\n+        final Collection<Object> newValues = data.getNewValues();\n+        final Collection<QueryResult<Object>> col =\n+        final NodeUpdateData<Object> data =\n+        final Collection<QueryResult<Object>> removedNodes = data.getRemovedNodes();\n+        final Map<QueryResult<Object>, Object> map =\n+        final NodeUpdateData<Object> data =\n+        final Collection<Object> col = new LinkedList<>();\n+        final NodeUpdateData<Object> data =\n+        final Collection<QueryResult<Object>> col =\n+        final NodeUpdateData<Object> data =\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+    private ImmutableNode checkTable(final BaseHierarchicalConfiguration config)\n+        final HierarchicalConfiguration<ImmutableNode> c = config\n+        final NodeHandler<ImmutableNode> nodeHandler = config.getNodeModel().getNodeHandler();\n+        final List<QueryResult<ImmutableNode>> nds =\n+        final PropertiesConfiguration c1 = new PropertiesConfiguration();\n+        final PropertiesConfiguration c2 = new PropertiesConfiguration();\n+        final CombinedConfiguration config = new CombinedConfiguration(new OverrideCombiner());\n+        final QueryResult<ImmutableNode> result =\n+        final QueryResult<ImmutableNode> result =\n+        final QueryResult<ImmutableNode> result =\n+        final QueryResult<ImmutableNode> result =\n+        final QueryResult<ImmutableNode> nodeRes =\n+        final QueryResult<ImmutableNode> attrRes =\n+        final QueryResult<ImmutableNode> result =\n+        final QueryResult<ImmutableNode> result =\n+        final QueryResult<ImmutableNode> result =\n+        final String s = result.toString();\n+        final\n+        final ImmutableNode node = new ImmutableNode.Builder().name(\"node\").create();\n+        final ImmutableNode parent = new ImmutableNode.Builder().name(\"parent\").create();\n+        final\n+        final ImmutableNode root = NodeStructureHelper.createNode(\"root\", null);\n+        final TrackedNodeModel model = setUpModel();\n+        final\n+        final NodeHandler<ImmutableNode> handler = expectGetNodeHandler();\n+        final Iterable<?> values = EasyMock.createMock(Iterable.class);\n+        final List<ImmutableNode> nodes =\n+        final QueryResult<ImmutableNode> result =\n+        final List<QueryResult<ImmutableNode>> removed =\n+        final TrackedNodeModel model = setUpModel();\n+        final NodeHandler<ImmutableNode> handler = expectGetNodeHandler();\n+        final ImmutableNode root = NodeStructureHelper.createNode(\"Root\", null);\n+        final TrackedNodeModel model = setUpModel();\n+    protected NodeHandler<ImmutableNode> createHandler(final ImmutableNode root)\n+        final InMemoryNodeModel model = new InMemoryNodeModel(root);\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n+    protected ImmutableNode constructHierarchy(final int levels)\n+        final ImmutableNode.Builder resultBuilder = new ImmutableNode.Builder();\n+    protected int iteratorSize(final NodeIterator iterator)\n+    protected List<NodePointer> iterationElements(final NodeIterator iterator)\n+        final List<NodePointer> result = new ArrayList<>();\n+    private void createLevel(final ImmutableNode.Builder parentBuilder, final String value,\n+            final int level)\n+            final String prefix = (value == null) ? \"\" : value + \".\";\n+                final ImmutableNode.Builder childBuilder =\n+                final String currentValue = prefix + i;\n+        final ImmutableNode.Builder ndBuilder = new ImmutableNode.Builder();\n+        final ImmutableNode nd = ndBuilder.create();\n+        final Object node = pointer.getImmediateNode();\n+        final QueryResult<?> proxy = (QueryResult<?>) node;\n+        final QName name = pointer.getName();\n+        final ImmutableNode orgNode = root.getChildren().get(1);\n+        final ImmutableNode testNode =\n+        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n+        final List<NodePointer> attrs = iterationElements(it);\n+        final Set<String> attrNames = new HashSet<>();\n+        for (final NodePointer np : attrs)\n+        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n+        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n+        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n+        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n+        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n+            final ImmutableNode node)\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        final NodeNameTest test = new NodeNameTest(new QName(null, \"*\"));\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        final NodeNameTest test = new NodeNameTest(new QName(\"prefix\", \"*\"));\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        final NodeNameTest test = new NodeNameTest(new QName(null, CHILD_NAME2));\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        for (final NodePointer nd : iterationElements(it))\n+        final NodeTest test = new ProcessingInstructionTest(\"test\");\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        final NodeTypeTest test = new NodeTypeTest(Compiler.NODE_TYPE_NODE);\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        final NodeTypeTest test = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        final ConfigurationNodePointer<ImmutableNode> childPointer =\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        final List<NodePointer> nodes = iterationElements(it);\n+        for (final NodePointer np : nodes)\n+            final ImmutableNode node = (ImmutableNode) np.getImmediateNode();\n+        final ConfigurationNodePointer<ImmutableNode> childPointer =\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+            final ImmutableNode node = (ImmutableNode) it.getNodePointer().getNode();\n+        final ConfigurationNodePointer<ImmutableNode> childPointer =\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        final ImmutableNode node = (ImmutableNode) it.getNodePointer().getNode();\n+        final ImmutableNode node =\n+        final NodeNameTest test = new NodeNameTest(new QName(PREFIX, \"*\"));\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        for (final NodePointer p : iterationElements(it))\n+        final NodeNameTest test = new NodeNameTest(new QName(PREFIX, PREFIX_NODE));\n+        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n+        for (final NodePointer p : iterationElements(it))\n+    private void checkValues(final NodeIterator iterator, final int... expectedIndices)\n+        final List<NodePointer> nodes = iterationElements(iterator);\n+            final ImmutableNode child = (ImmutableNode) nodes.get(i).getImmediateNode();\n+        final NodePointer p1 = new ConfigurationNodePointer<>(\n+        final NodePointer p2 = new ConfigurationNodePointer<>(\n+        final ImmutableNode n1 = new ImmutableNode.Builder().name(\"n1\").create();\n+        final ImmutableNode n2 = new ImmutableNode.Builder().name(\"n2\").create();\n+        final NodePointer p1 =\n+        final NodePointer p2 =\n+        final ImmutableNode leafNode =\n+    private void checkIterators(final NodePointer p)\n+        final ImmutableNode node = (ImmutableNode) p.getNode();\n+            final NodePointer pchild = it.getNodePointer();\n+            final NodePointer pattr = it.getNodePointer();\n+        for (final Object result : results) {\n+            final ImmutableNode node = (ImmutableNode) result;\n+        final List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME1 + \"[1]/*\");\n+        for (final Iterator<?> it = nodes.iterator(); it.hasNext(); index++)\n+            final ImmutableNode node = (ImmutableNode) it.next();\n+        final List<?> nodes = context.selectNodes(\"//\" + CHILD_NAME2\n+        final List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME2 + \"/parent::*\");\n+        final List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME1\n+        final ImmutableNode node = (ImmutableNode) nodes.get(0);\n+        final List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME1\n+        final ImmutableNode node =\n+        final NodeHandler<ImmutableNode> handler =\n+        final JXPathContext context = factory.createContext(node, handler);\n+        final ConfigurationNodePointerFactory.NodeWrapper<?> wrapper =\n+    private JXPathContext expectSelect(final Object... results)\n+        final JXPathContext ctx = EasyMock.createMock(JXPathContext.class);\n+    private XPathExpressionEngine setUpEngine(final JXPathContext ctx)\n+        final XPathContextFactory factory =\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final JXPathContext ctx = expectSelect(root);\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+        final List<QueryResult<ImmutableNode>> result =\n+        final QueryResult<ImmutableNode> attrResult =\n+        final JXPathContext ctx = expectSelect(attrResult);\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+        final List<QueryResult<ImmutableNode>> result =\n+        final JXPathContext ctx = expectSelect();\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+    private void checkEmptyKey(final String key)\n+        final XPathContextFactory factory =\n+        final XPathExpressionEngine engine = new XPathExpressionEngine(factory);\n+        final List<QueryResult<ImmutableNode>> results =\n+        final NodePointerFactory[] factories =\n+        for (final NodePointerFactory factory : factories)\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final JXPathContext ctx = expectSelect(root);\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+        final NodeAddData<ImmutableNode> data =\n+        final JXPathContext ctx = expectSelect(root);\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+        final NodeAddData<ImmutableNode> data =\n+        final JXPathContext ctx = expectSelect(root);\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+        final NodeAddData<ImmutableNode> data =\n+        final JXPathContext ctx = expectSelect(root);\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+        final NodeAddData<ImmutableNode> data =\n+        final JXPathContext ctx = expectSelect(root);\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+        final NodeAddData<ImmutableNode> data =\n+        final JXPathContext ctx = expectSelect(root);\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+        final NodeAddData<ImmutableNode> data =\n+        final JXPathContext ctx = expectSelect();\n+        final XPathExpressionEngine engine = setUpEngine(ctx);\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+    private void checkInvalidAddPath(final String path)\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final QueryResult<ImmutableNode> res = QueryResult.createNodeResult(root);\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final QueryResult<ImmutableNode> result =\n+    private static void checkAddPath(final NodeAddData<ImmutableNode> data,\n+            final boolean attr, final String... expected)\n+        final List<String> path = data.getPathNodes();\n+        final Iterator<String> it = path.iterator();\n+        final ImmutableNode.Builder parentBuilder = new ImmutableNode.Builder(2);\n+        final ImmutableNode c1 = new ImmutableNode.Builder().name(\"child\").create();\n+        final ImmutableNode c2 =\n+        final ImmutableNode parent = parentBuilder.create();\n+        final NodeHandler<ImmutableNode> testHandler =\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final ImmutableNode.Builder parentBuilder = new ImmutableNode.Builder(3);\n+        final ImmutableNode c1 = new ImmutableNode.Builder().name(\"child\").create();\n+        final ImmutableNode c2 = new ImmutableNode.Builder().name(\"child\").create();\n+        final ImmutableNode c3 =\n+        final ImmutableNode parent = parentBuilder.create();\n+        final NodeHandler<ImmutableNode> testHandler =\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final ImmutableNode.Builder parentBuilder = new ImmutableNode.Builder(1);\n+        final ImmutableNode c1 = new ImmutableNode.Builder().name(\"child\").create();\n+        final ImmutableNode parent = parentBuilder.addChild(c1).create();\n+        final NodeHandler<ImmutableNode> testHandler =\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final XPathExpressionEngine engine = new XPathExpressionEngine();\n+        final String xml =\n+        final FileHandler handler = new FileHandler(config);\n+        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n+            final String key = it.next();\n+        catch (final Exception ex)\n+            final Applet applet = new Applet()\n+                public String getParameter(final String key)\n+            catch (final UnsupportedOperationException e)\n+            catch (final UnsupportedOperationException e)\n+        final Servlet servlet = new HttpServlet() {\n+        final ServletConfiguration servletConfiguration = new ServletConfiguration(servlet);\n+        final ServletContext context = new MockServletContext()\n+            public String getInitParameter(final String key)\n+        final Servlet servlet = new HttpServlet()\n+        final ServletContextConfiguration resultConfig = new ServletContextConfiguration(servlet);\n+        final ServletContext context = new MockServletContext()\n+        final MockFilterConfig config = new MockFilterConfig();\n+        final ServletFilterConfiguration resultConfig = new ServletFilterConfiguration(config);\n+        public String getInitParameter(final String key)\n+        public void setInitParameter(final String key, final String value)\n+        final ServletRequest request = new MockHttpServletRequest()\n+            public String getParameter(final String key)\n+        final ServletRequest request = new MockHttpServletRequest()\n+            public String[] getParameterValues(final String key)\n+        final ServletRequestConfiguration config = new ServletRequestConfiguration(request);\n+        final String[] values = { \"test1\", \"test2\\\\,test3\", \"test4\\\\,test5\" };\n+        final String listKey = \"test.list\";\n+        final BaseConfiguration config = new BaseConfiguration();\n+        final Configuration c = createConfiguration(config);\n+        final List<?> v = c.getList(listKey);\n",
        "diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java": "            final ListDelimiterHandler listDelimiterHandler)\n    public void setConversionHandler(final ConversionHandler conversionHandler)\n    public void setThrowExceptionOnMissing(final boolean throwExceptionOnMissing)\n    public final void setInterpolator(final ConfigurationInterpolator ci)\n            final Map<String, ? extends Lookup> prefixLookups,\n            final Collection<? extends Lookup> defLookups)\n        final InterpolatorSpecification spec =\n    public void setPrefixLookups(final Map<String, ? extends Lookup> lookups)\n            final ConfigurationInterpolator ciOld = getInterpolator();\n            final ConfigurationInterpolator ciNew =\n    public void setDefaultLookups(final Collection<? extends Lookup> lookups)\n            final ConfigurationInterpolator ciOld = getInterpolator();\n            final ConfigurationInterpolator ciNew =\n    public void setParentInterpolator(final ConfigurationInterpolator parent)\n            final ConfigurationInterpolator ciOld = getInterpolator();\n            final ConfigurationInterpolator ciNew =\n            final ConfigurationDecoder configurationDecoder)\n    protected void cloneInterpolator(final AbstractConfiguration orgConfig)\n        final ConfigurationInterpolator orgInterpolator = orgConfig.getInterpolator();\n        final List<Lookup> defaultLookups = orgInterpolator.getDefaultLookups();\n        final Lookup lookup = findConfigurationLookup(orgInterpolator, orgConfig);\n    private Lookup findConfigurationLookup(final ConfigurationInterpolator ci)\n    private static Lookup findConfigurationLookup(final ConfigurationInterpolator ci,\n            final ImmutableConfiguration targetConf)\n        for (final Lookup l : ci.getDefaultLookups())\n    public void setLogger(final ConfigurationLogger log)\n                    public void onEvent(final ConfigurationErrorEvent event)\n        final Synchronizer sync = synchronizer;\n    public final void setSynchronizer(final Synchronizer synchronizer)\n    public final void lock(final LockMode mode)\n    public final void unlock(final LockMode mode)\n    protected void beginRead(final boolean optimize)\n    protected void beginWrite(final boolean optimize)\n    public final void addProperty(final String key, final Object value)\n    protected void addPropertyInternal(final String key, final Object value)\n        for (final Object obj : getListDelimiterHandler().parse(value))\n    protected String interpolate(final String base)\n        final Object result = interpolate((Object) base);\n    protected Object interpolate(final Object value)\n        final ConfigurationInterpolator ci = getInterpolator();\n    public Configuration subset(final String prefix)\n    public ImmutableConfiguration immutableSubset(final String prefix)\n    public final void setProperty(final String key, final Object value)\n    protected void setPropertyInternal(final String key, final Object value)\n    public final void clearProperty(final String key)\n            final Iterator<String> it = getKeys();\n                final String key = it.next();\n                    catch (final UnsupportedOperationException usoex)\n    public final Iterator<String> getKeys(final String prefix)\n    protected Iterator<String> getKeysInternal(final String prefix)\n    public final Object getProperty(final String key)\n        for (final Iterator<String> keyIt = getKeysInternal(); keyIt.hasNext(); size++)\n    public final boolean containsKey(final String key)\n    public Properties getProperties(final String key)\n    public Properties getProperties(final String key, final Properties defaults)\n        final String[] tokens = getStringArray(key);\n        final Properties props = defaults == null ? new Properties() : new Properties(defaults);\n        for (final String token : tokens)\n            final int equalSign = token.indexOf('=');\n                final String pkey = token.substring(0, equalSign).trim();\n                final String pvalue = token.substring(equalSign + 1).trim();\n    public boolean getBoolean(final String key)\n        final Boolean b = convert(Boolean.class, key, null, true);\n    public boolean getBoolean(final String key, final boolean defaultValue)\n    public Boolean getBoolean(final String key, final Boolean defaultValue)\n    public byte getByte(final String key)\n        final Byte b = convert(Byte.class, key, null, true);\n    public byte getByte(final String key, final byte defaultValue)\n    public Byte getByte(final String key, final Byte defaultValue)\n    public double getDouble(final String key)\n        final Double d = convert(Double.class, key, null, true);\n    public double getDouble(final String key, final double defaultValue)\n    public Double getDouble(final String key, final Double defaultValue)\n    public float getFloat(final String key)\n        final Float f = convert(Float.class, key, null, true);\n    public float getFloat(final String key, final float defaultValue)\n    public Float getFloat(final String key, final Float defaultValue)\n    public int getInt(final String key)\n        final Integer i = convert(Integer.class, key, null, true);\n    public int getInt(final String key, final int defaultValue)\n    public Integer getInteger(final String key, final Integer defaultValue)\n    public long getLong(final String key)\n        final Long l = convert(Long.class, key, null, true);\n    public long getLong(final String key, final long defaultValue)\n    public Long getLong(final String key, final Long defaultValue)\n    public short getShort(final String key)\n        final Short s = convert(Short.class, key, null, true);\n    public short getShort(final String key, final short defaultValue)\n    public Short getShort(final String key, final Short defaultValue)\n    public BigDecimal getBigDecimal(final String key)\n    public BigDecimal getBigDecimal(final String key, final BigDecimal defaultValue)\n    public BigInteger getBigInteger(final String key)\n    public BigInteger getBigInteger(final String key, final BigInteger defaultValue)\n    public String getString(final String key)\n    public String getString(final String key, final String defaultValue)\n        final String result = convert(String.class, key, null, false);\n    public String getEncodedString(final String key, final ConfigurationDecoder decoder)\n        final String value = getString(key);\n    public String getEncodedString(final String key)\n        final ConfigurationDecoder decoder = getConfigurationDecoder();\n    public String[] getStringArray(final String key)\n        final String[] result = (String[]) getArray(String.class, key);\n    public List<Object> getList(final String key)\n    public List<Object> getList(final String key, final List<?> defaultValue)\n        final Object value = getProperty(key);\n            final List<?> l = (List<?>) value;\n            for (final Object elem : l)\n            final\n    public <T> T get(final Class<T> cls, final String key)\n    public <T> T get(final Class<T> cls, final String key, final T defaultValue)\n    public Object getArray(final Class<?> cls, final String key)\n    public Object getArray(final Class<?> cls, final String key, final Object defaultValue)\n    public <T> List<T> getList(final Class<T> cls, final String key)\n    public <T> List<T> getList(final Class<T> cls, final String key, final List<T> defaultValue)\n        final List<T> result = new ArrayList<>();\n    public <T> Collection<T> getCollection(final Class<T> cls, final String key,\n            final Collection<T> target)\n    public <T> Collection<T> getCollection(final Class<T> cls, final String key,\n            final Collection<T> target, final Collection<T> defaultValue)\n        final Object src = getProperty(key);\n        final Collection<T> targetCol =\n    protected boolean isScalarValue(final Object value)\n    public void copy(final Configuration c)\n                for (final Iterator<String> it = c.getKeys(); it.hasNext();)\n                    final String key = it.next();\n                    final Object value = encodeForCopy(c.getProperty(key));\n    public void append(final Configuration c)\n                for (final Iterator<String> it = c.getKeys(); it.hasNext();)\n                    final String key = it.next();\n                    final Object value = encodeForCopy(c.getProperty(key));\n        final AbstractConfiguration c = (AbstractConfiguration) ConfigurationUtils\n        for (final Iterator<String> it = getKeys(); it.hasNext();)\n            final String key = it.next();\n    protected final void initLogger(final ConfigurationLogger log)\n    private Object encodeForCopy(final Object value)\n    private Object encodeListForCopy(final Collection<?> values)\n        final List<Object> result = new ArrayList<>(values.size());\n        for (final Object value : values)\n    private <T> T getAndConvertProperty(final Class<T> cls, final String key, final T defaultValue)\n        final Object value = getProperty(key);\n        catch (final ConversionException cex)\n    private <T> T convert(final Class<T> cls, final String key, final T defValue,\n            final boolean throwOnMissing)\n        final T result = getAndConvertProperty(cls, key, defValue);\n    private Object convertToArray(final Class<?> cls, final String key, final Object defaultValue)\n    private static void checkDefaultValueArray(final Class<?> cls, final Object defaultValue)\n    private static <T> Collection<T> handleDefaultCollection(final Collection<T> target,\n            final Collection<T> defaultValue)\n    private static <T> T checkNonNullValue(final String key, final T value)\n    private static void throwMissingPropertyException(final String key)\n",
            "src/main/java/org/apache/commons/configuration2/AbstractHierarchicalConfiguration.java": "    protected AbstractHierarchicalConfiguration(final NodeModel<T> nodeModel)\n        final NodeHandler<T> nodeHandler = getModel().getNodeHandler();\n    public void setExpressionEngine(final ExpressionEngine expressionEngine)\n    protected Object getPropertyInternal(final String key)\n        final List<QueryResult<T>> results = fetchNodeList(key);\n        final NodeHandler<T> handler = getModel().getNodeHandler();\n        final List<Object> list = new ArrayList<>();\n        for (final QueryResult<T> result : results)\n            final Object value = valueFromResult(result, handler);\n    protected void addPropertyInternal(final String key, final Object obj)\n    protected void addPropertyDirect(final String key, final Object value)\n    private void addPropertyToModel(final String key, final Iterable<?> values)\n    public final void addNodes(final String key, final Collection<? extends T> nodes)\n    protected void addNodesInternal(final String key, final Collection<? extends T> nodes)\n    protected boolean containsKeyInternal(final String key)\n    protected void setPropertyInternal(final String key, final Object value)\n    public List<QueryResult<T>> resolveKey(final T root, final String key,\n            final NodeHandler<T> handler)\n    public List<T> resolveNodeKey(final T root, final String key, final NodeHandler<T> handler)\n        final List<QueryResult<T>> results = resolveKey(root, key, handler);\n        final List<T> targetNodes = new LinkedList<>();\n        for (final QueryResult<T> result : results)\n    public NodeAddData<T> resolveAddKey(final T root, final String key,\n            final NodeHandler<T> handler)\n    public NodeUpdateData<T> resolveUpdateKey(final T root, final String key,\n            final Object newValue, final NodeHandler<T> handler)\n        final Iterator<QueryResult<T>> itNodes = fetchNodeList(key).iterator();\n        final Iterator<?> itValues = getListDelimiterHandler().parse(newValue).iterator();\n        final Map<QueryResult<T>, Object> changedValues =\n    public String nodeKey(final T node, final Map<T, String> cache, final NodeHandler<T> handler)\n        final List<T> path = new LinkedList<>();\n        for (final T n : path)\n            final String currentKey = getExpressionEngine().canonicalKey(n, key, handler);\n    public final void clearTree(final String key)\n            final Object nodes = clearTreeInternal(key);\n    protected Object clearTreeInternal(final String key)\n    protected void clearPropertyDirect(final String key)\n        final DefinedKeysVisitor visitor = new DefinedKeysVisitor();\n        final NodeHandler<T> nodeHandler = getModel().getNodeHandler();\n    protected Iterator<String> getKeysInternal(final String prefix)\n        final DefinedKeysVisitor visitor = new DefinedKeysVisitor(prefix);\n        final List<QueryResult<T>> results = fetchNodeList(prefix);\n        final NodeHandler<T> handler = getModel().getNodeHandler();\n        for (final QueryResult<T> result : results)\n                for (final T c : handler.getChildren(result.getNode()))\n    public final int getMaxIndex(final String key)\n    protected int getMaxIndexInternal(final String key)\n            final\n        catch (final CloneNotSupportedException cex)\n    protected List<QueryResult<T>> fetchNodeList(final String key)\n        final NodeHandler<T> nodeHandler = getModel().getNodeHandler();\n    protected boolean nodeDefined(final T node)\n        final DefinedVisitor<T> visitor = new DefinedVisitor<>();\n    private Object valueFromResult(final QueryResult<T> result, final NodeHandler<T> handler)\n        public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n        public DefinedKeysVisitor(final String prefix)\n        public void visitAfterChildren(final T node, final NodeHandler<T> handler)\n        public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n            final String parentKey = parentKeys.isEmpty() ? null\n            final String key = getExpressionEngine().nodeKey(node, parentKey, handler);\n        public void handleAttributeKeys(final String parentKey, final T node,\n                final NodeHandler<T> handler)\n            for (final String attr : handler.getAttributes(node))\n",
            "src/main/java/org/apache/commons/configuration2/AbstractYAMLBasedConfiguration.java": "            final HierarchicalConfiguration<ImmutableNode> c)\n    protected void load(final Map<String, Object> map)\n        final List<ImmutableNode> roots = constructHierarchy(\"\", map);\n    protected Map<String, Object> constructMap(final ImmutableNode node)\n        final Map<String, Object> map = new HashMap<>(node.getChildren().size());\n        for (final ImmutableNode cNode : node.getChildren())\n            final Object value = cNode.getChildren().isEmpty() ? cNode.getValue()\n    private static void addEntry(final Map<String, Object> map, final String key,\n            final Object value)\n        final Object oldValue = map.get(key);\n            final\n            final Collection<Object> values = new ArrayList<>();\n    private static List<ImmutableNode> constructHierarchy(final String key,\n            final Object elem)\n    private static List<ImmutableNode> parseMap(final Map<String, Object> map, final String key)\n        final ImmutableNode.Builder subtree = new ImmutableNode.Builder().name(key);\n        for (final Map.Entry<String, Object> entry : map.entrySet())\n            final List<ImmutableNode> children =\n            for (final ImmutableNode child : children)\n    private static List<ImmutableNode> parseCollection(final Collection<Object> col, final String key)\n        final List<ImmutableNode> nodes = new ArrayList<>(col.size());\n        for (final Object elem : col)\n    static void rethrowException(final Exception e) throws ConfigurationException\n",
            "src/main/java/org/apache/commons/configuration2/BaseConfiguration.java": "    protected void addPropertyDirect(final String key, final Object value)\n        final Object previousValue = getPropertyInternal(key);\n            final\n            final List<Object> list = new ArrayList<>();\n    protected Object getPropertyInternal(final String key)\n    protected boolean containsKeyInternal(final String key)\n    protected void clearPropertyDirect(final String key)\n            final BaseConfiguration copy = (BaseConfiguration) super.clone();\n        catch (final CloneNotSupportedException cex)\n    private void cloneStore(final BaseConfiguration copy)\n        final\n        for (final Map.Entry<String, Object> e : store.entrySet())\n                final\n",
            "src/main/java/org/apache/commons/configuration2/BaseConfigurationXMLReader.java": "    public BaseConfigurationXMLReader(final Configuration conf)\n    public void setConfiguration(final Configuration conf)\n        protected void elementStart(final String name, final Object value)\n        protected void elementEnd(final String name)\n",
            "src/main/java/org/apache/commons/configuration2/BaseHierarchicalConfiguration.java": "    public BaseHierarchicalConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n    protected BaseHierarchicalConfiguration(final NodeModel<ImmutableNode> model)\n    public Configuration subset(final String prefix)\n            final List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);\n            final BaseHierarchicalConfiguration result =\n                        protected Object interpolate(final Object value)\n            final Collection<QueryResult<ImmutableNode>> results)\n        final ImmutableNode.Builder builder = new ImmutableNode.Builder();\n        for (final QueryResult<ImmutableNode> result : results)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key,\n            final boolean supportUpdates)\n    protected NodeSelector getSubConfigurationNodeSelector(final String key)\n            final NodeSelector selector, final InMemoryNodeModelSupport parentModelSupport)\n        final SubnodeConfiguration subConfig =\n    protected void initSubConfigurationForThisParent(final SubnodeConfiguration subConfig)\n            final String key)\n        final NodeSelector selector = getSubConfigurationNodeSelector(key);\n            final InMemoryNodeModelSupport parentModelSupport,\n            final Collection<NodeSelector> selectors)\n        final List<HierarchicalConfiguration<ImmutableNode>> configs =\n        for (final NodeSelector selector : selectors)\n            final String key)\n        final List<ImmutableNode> targetNodes = fetchFilteredNodeResults(key);\n        final int size = targetNodes.size();\n        final BaseHierarchicalConfiguration sub =\n            final ImmutableNode node)\n        final BaseHierarchicalConfiguration sub =\n    private List<ImmutableNode> fetchFilteredNodeResults(final String key)\n        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();\n            final String key, final boolean supportUpdates)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key)\n            final String key)\n            final String key)\n        final List<HierarchicalConfiguration<ImmutableNode>> results =\n        for (final ImmutableNode node : nodes)\n            final BaseHierarchicalConfiguration sub =\n            final String key, final boolean supportUpdates)\n        final Collection<NodeSelector> selectors =\n            final String key)\n            final String key)\n        final ImmutableNode parent = nodes.get(0);\n        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n        for (final ImmutableNode node : parent.getChildren())\n            final String key, final boolean supportUpdates)\n        final InMemoryNodeModel parentModel = getSubConfigurationParentModel();\n            final String key)\n    protected void subnodeConfigurationChanged(final ConfigurationEvent event)\n    private void initSubConfiguration(final BaseHierarchicalConfiguration sub)\n            public void onEvent(final ConfigurationEvent event)\n        final InterpolatedVisitor visitor = new InterpolatedVisitor();\n        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();\n        final BaseHierarchicalConfiguration c =\n            final List<? extends HierarchicalConfiguration<?>> subs)\n        final List<ImmutableHierarchicalConfiguration> res =\n        for (final HierarchicalConfiguration<?> sub : subs)\n            final HierarchicalConfiguration<ImmutableNode> c)\n        final ImmutableNode root = (c != null) ? obtainRootNode(c) : null;\n            final HierarchicalConfiguration<ImmutableNode> c)\n        public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler)\n            final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;\n        private void updateNode(final ImmutableNode node,\n                final ReferenceNodeHandler refHandler)\n            final Object reference = refHandler.getReference(node);\n        private void insertNewChildNodes(final ImmutableNode node,\n                final ReferenceNodeHandler refHandler)\n            final Collection<ImmutableNode> subNodes =\n            final Iterator<ImmutableNode> children = subNodes.iterator();\n                    final List<ImmutableNode> newNodes =\n                    final ImmutableNode sibling2 =\n                    for (final ImmutableNode insertNode : newNodes)\n        public void visitBeforeChildren(final ImmutableNode node,\n                final NodeHandler<ImmutableNode> handler)\n                final ImmutableNode.Builder builder =\n        public void visitAfterChildren(final ImmutableNode node,\n                final NodeHandler<ImmutableNode> handler)\n                final ImmutableNode newNode = pop().create();\n        private void push(final ImmutableNode.Builder builder)\n        private boolean isLeafNode(final ImmutableNode node,\n                final NodeHandler<ImmutableNode> handler)\n        private void handleLeafNode(final ImmutableNode node,\n                final NodeHandler<ImmutableNode> handler)\n            final Object value = interpolate(node.getValue());\n            final Map<String, Object> interpolatedAttributes =\n            final boolean attributeChanged =\n            final ImmutableNode newNode =\n        private void storeInterpolatedNode(final ImmutableNode node)\n        private boolean interpolateAttributes(final ImmutableNode node,\n                final NodeHandler<ImmutableNode> handler,\n                final Map<String, Object> interpolatedAttributes)\n            for (final String attr : handler.getAttributes(node))\n                final Object attrValue =\n        private Map<String, Object> interpolateAttributes(final ImmutableNode node,\n                final NodeHandler<ImmutableNode> handler)\n            final Map<String, Object> attributes = new HashMap<>();\n        private boolean valueChanged(final Object interpolatedValue, final Object value)\n",
            "src/main/java/org/apache/commons/configuration2/CombinedConfiguration.java": "    public CombinedConfiguration(final NodeCombiner comb)\n    public void setNodeCombiner(final NodeCombiner nodeCombiner)\n            final ExpressionEngine conversionExpressionEngine)\n    public void addConfiguration(final Configuration config, final String name,\n            final String at)\n            final ConfigData cd = new ConfigData(config, name, at);\n    public void addConfiguration(final Configuration config, final String name)\n    public void addConfiguration(final Configuration config)\n    public Configuration getConfiguration(final int index)\n            final ConfigData cd = configurations.get(index);\n    public Configuration getConfiguration(final String name)\n            final List<Configuration> list =\n            for (final ConfigData cd : configurations)\n            final List<String> list = new ArrayList<>(getNumberOfConfigurationsInternal());\n            for (final ConfigData cd : configurations)\n    public boolean removeConfiguration(final Configuration config)\n    public Configuration removeConfigurationAt(final int index)\n        final ConfigData cd = configurations.remove(index);\n    public Configuration removeConfiguration(final String name)\n        final Configuration conf = getConfiguration(name);\n    public void onEvent(final ConfigurationEvent event)\n            final CombinedConfiguration copy = (CombinedConfiguration) super.clone();\n            for (final ConfigData cd : configurations)\n    public Configuration getSource(final String key)\n        final Set<Configuration> sources = getSources(key);\n        final Iterator<Configuration> iterator = sources.iterator();\n        final Configuration source = iterator.next();\n    public Set<Configuration> getSources(final String key)\n            final List<QueryResult<ImmutableNode>> results = fetchNodeList(key);\n            final Set<Configuration> sources = new HashSet<>();\n            for (final QueryResult<ImmutableNode> result : results)\n                final Set<Configuration> resultSources =\n    protected void beginRead(final boolean optimize)\n    protected void beginWrite(final boolean optimize)\n        catch (final RuntimeException rex)\n        final Iterator<ConfigData> it = configurations.iterator();\n            final ByteArrayOutputStream os = new ByteArrayOutputStream();\n            final PrintStream stream = new PrintStream(os);\n    private Set<Configuration> findSourceConfigurations(final ImmutableNode node)\n        final Set<Configuration> result = new HashSet<>();\n        final FindNodeVisitor<ImmutableNode> visitor =\n        for (final ConfigData cd : configurations)\n    private void registerListenerAt(final Configuration configuration)\n    private void unregisterListenerAt(final Configuration configuration)\n            for (final ConfigData child : configurations)\n        public ConfigData(final Configuration config, final String n, final String at)\n            final ImmutableNode configRoot = getRootNodeOfConfiguration();\n        private ImmutableNode prependAtPath(final ImmutableNode node)\n            final ImmutableNode.Builder pathBuilder = new ImmutableNode.Builder();\n            final Iterator<String> pathIterator = atPath.iterator();\n        private void prependAtPathComponent(final ImmutableNode.Builder builder,\n                final String currentComponent, final Iterator<String> components,\n                final ImmutableNode orgRoot)\n                final ImmutableNode.Builder childBuilder =\n                final ImmutableNode root =\n        private Collection<String> parseAt(final String at)\n            final Collection<String> result = new ArrayList<>();\n            final DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(\n",
            "src/main/java/org/apache/commons/configuration2/CompositeConfiguration.java": "    public CompositeConfiguration(final Configuration inMemoryConfiguration)\n    public CompositeConfiguration(final Collection<? extends Configuration> configurations)\n    public CompositeConfiguration(final Configuration inMemoryConfiguration,\n            final Collection<? extends Configuration> configurations)\n            for (final Configuration c : configurations)\n    public void addConfiguration(final Configuration config)\n    public void addConfiguration(final Configuration config, final boolean asInMemory)\n    public void addConfigurationFirst(final Configuration config)\n    public void addConfigurationFirst(final Configuration config, final boolean asInMemory)\n    public void removeConfiguration(final Configuration config)\n    protected void addPropertyDirect(final String key, final Object token)\n    protected Object getPropertyInternal(final String key)\n        for (final Configuration config : configList)\n        final Set<String> keys = new LinkedHashSet<>();\n        for (final Configuration config : configList)\n            for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n    protected Iterator<String> getKeysInternal(final String key)\n        final Set<String> keys = new LinkedHashSet<>();\n        for (final Configuration config : configList)\n            for (final Iterator<String> it = config.getKeys(key); it.hasNext();)\n        for (final Configuration config : configList)\n    protected void clearPropertyDirect(final String key)\n        for (final Configuration config : configList)\n    protected boolean containsKeyInternal(final String key)\n        for (final Configuration config : configList)\n    public List<Object> getList(final String key, final List<?> defaultValue)\n        final List<Object> list = new ArrayList<>();\n        final Iterator<Configuration> it = configList.iterator();\n            final Configuration config = it.next();\n            final\n        final ListIterator<Object> lit = list.listIterator();\n    public String[] getStringArray(final String key)\n        final List<Object> list = getList(key);\n        final String[] tokens = new String[list.size()];\n    public Configuration getConfiguration(final int index)\n            final CompositeConfiguration copy = (CompositeConfiguration) super\n            for (final Configuration config : configList)\n        catch (final CloneNotSupportedException cnex)\n            final ListDelimiterHandler listDelimiterHandler)\n    public Configuration getSource(final String key)\n        for (final Configuration conf : configList)\n    private void replaceInMemoryConfiguration(final Configuration config)\n    private  void appendListProperty(final List<Object> dest, final Configuration config,\n            final String key)\n        final Object value = interpolate(config.getProperty(key));\n                final Collection<?> col = (Collection<?>) value;\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java": "    public static Configuration getConfiguration(final Properties props)\n    public static Properties getProperties(final ImmutableConfiguration config)\n        final Properties props = new Properties();\n        for (final Iterator<String> keys = config.getKeys(); keys.hasNext();)\n            final String key = keys.next();\n            final List<Object> list = config.getList(key);\n                catch (final Exception ex)\n    public static Properties getProperties(final Configuration config)\n    public static Map<Object, Object> getMap(final Configuration config)\n    private static String listToString(final List<?> list)\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationLookup.java": "    public ConfigurationLookup(final ImmutableConfiguration config)\n    public Object lookup(final String variable)\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationMap.java": "    public ConfigurationMap(final Configuration configuration)\n    public Object put(final Object key, final Object value)\n        final String strKey = String.valueOf(key);\n        final Object old = configuration.getProperty(strKey);\n    public Object get(final Object key)\n            private Entry(final Object key)\n            public Object setValue(final Object value)\n                final Object old = getValue();\n        ConfigurationSet(final Configuration configuration)\n            for (final Iterator<String> iterator = configuration.getKeys(); iterator.hasNext();)\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java": "        public <T extends Event> void addEventListener(final EventType<T> eventType,\n                final EventListener<? super T> listener)\n                final EventType<T> eventType, final EventListener<? super T> listener)\n    public static void dump(final ImmutableConfiguration configuration, final PrintStream out)\n    public static void dump(final Configuration configuration, final PrintStream out)\n    public static void dump(final ImmutableConfiguration configuration, final PrintWriter out)\n        for (final Iterator<String> keys = configuration.getKeys(); keys.hasNext();)\n            final String key = keys.next();\n            final Object value = configuration.getProperty(key);\n    public static void dump(final Configuration configuration, final PrintWriter out)\n    public static String toString(final ImmutableConfiguration configuration)\n        final StringWriter writer = new StringWriter();\n    public static String toString(final Configuration configuration)\n    public static void copy(final ImmutableConfiguration source, final Configuration target)\n        for (final Iterator<String> keys = source.getKeys(); keys.hasNext();)\n            final String key = keys.next();\n    public static void copy(final Configuration source, final Configuration target)\n    public static void append(final ImmutableConfiguration source, final Configuration target)\n        for (final Iterator<String> keys = source.getKeys(); keys.hasNext();)\n            final String key = keys.next();\n    public static void append(final Configuration source, final Configuration target)\n            final Configuration conf)\n            final Configuration conf, final ExpressionEngine engine)\n            final HierarchicalConfiguration<?> hc = (HierarchicalConfiguration<?>) conf;\n        final BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();\n    public static Configuration cloneConfiguration(final Configuration config)\n        catch (final CloneNotSupportedException cnex)\n    public static Object cloneIfPossible(final Object obj)\n        catch (final Exception ex)\n    static Object clone(final Object obj) throws CloneNotSupportedException\n                final Method m = obj.getClass().getMethod(METHOD_CLONE);\n            catch (final NoSuchMethodException nmex)\n            catch (final IllegalAccessException iaex)\n            catch (final InvocationTargetException itex)\n    public static Synchronizer cloneSynchronizer(final Synchronizer sync)\n        catch (final Exception ex)\n        catch (final CloneNotSupportedException cnex)\n    public static void enableRuntimeExceptions(final Configuration src)\n                    public void onEvent(final ConfigurationErrorEvent event)\n    public static Class<?> loadClass(final String clsName)\n        final ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        catch (final ClassNotFoundException cnfex)\n    public static Class<?> loadClassNoEx(final String clsName)\n        catch (final ClassNotFoundException cnfex)\n            final Configuration c)\n            final HierarchicalConfiguration<?> c)\n            final Class<?>[] ifcs, final Configuration c)\n    public static EventSource asEventSource(final Object obj,\n            final boolean mockIfUnsupported)\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationXMLReader.java": "    public void parse(final String systemId) throws IOException, SAXException\n    public void parse(final InputSource input) throws IOException, SAXException\n    public boolean getFeature(final String name)\n    public void setFeature(final String name, final boolean value)\n    public void setContentHandler(final ContentHandler handler)\n    public void setDTDHandler(final DTDHandler handler)\n    public void setEntityResolver(final EntityResolver resolver)\n    public void setErrorHandler(final ErrorHandler handler)\n    public Object getProperty(final String name)\n    public void setProperty(final String name, final Object value)\n    public void setRootName(final String string)\n    protected void fireElementStart(final String name, final Attributes attribs)\n                final Attributes at = (attribs == null) ? EMPTY_ATTRS : attribs;\n            catch (final SAXException ex)\n    protected void fireElementEnd(final String name)\n            catch (final SAXException ex)\n    protected void fireCharacters(final String text)\n                final char[] ch = text.toCharArray();\n            catch (final SAXException ex)\n",
            "src/main/java/org/apache/commons/configuration2/DataConfiguration.java": "    public DataConfiguration(final Configuration configuration)\n    protected Object getPropertyInternal(final String key)\n    protected void addPropertyInternal(final String key, final Object obj)\n    protected void addPropertyDirect(final String key, final Object value)\n    protected boolean containsKeyInternal(final String key)\n    protected void clearPropertyDirect(final String key)\n    protected void setPropertyInternal(final String key, final Object value)\n    public List<Boolean> getBooleanList(final String key)\n    public List<Boolean> getBooleanList(final String key, final List<Boolean> defaultValue)\n    public boolean[] getBooleanArray(final String key)\n    public boolean[] getBooleanArray(final String key, final boolean[] defaultValue)\n    public List<Byte> getByteList(final String key)\n    public List<Byte> getByteList(final String key, final List<Byte> defaultValue)\n    public byte[] getByteArray(final String key)\n    public byte[] getByteArray(final String key, final byte[] defaultValue)\n    public List<Short> getShortList(final String key)\n    public List<Short> getShortList(final String key, final List<Short> defaultValue)\n    public short[] getShortArray(final String key)\n    public short[] getShortArray(final String key, final short[] defaultValue)\n    public List<Integer> getIntegerList(final String key)\n    public List<Integer> getIntegerList(final String key, final List<Integer> defaultValue)\n    public int[] getIntArray(final String key)\n    public int[] getIntArray(final String key, final int[] defaultValue)\n    public List<Long> getLongList(final String key)\n    public List<Long> getLongList(final String key, final List<Long> defaultValue)\n    public long[] getLongArray(final String key)\n    public long[] getLongArray(final String key, final long[] defaultValue)\n    public List<Float> getFloatList(final String key)\n    public List<Float> getFloatList(final String key, final List<Float> defaultValue)\n    public float[] getFloatArray(final String key)\n    public float[] getFloatArray(final String key, final float[] defaultValue)\n    public List<Double> getDoubleList(final String key)\n    public List<Double> getDoubleList(final String key, final List<Double> defaultValue)\n    public double[] getDoubleArray(final String key)\n    public double[] getDoubleArray(final String key, final double[] defaultValue)\n    public List<BigInteger> getBigIntegerList(final String key)\n    public List<BigInteger> getBigIntegerList(final String key, final List<BigInteger> defaultValue)\n    public BigInteger[] getBigIntegerArray(final String key)\n    public BigInteger[] getBigIntegerArray(final String key, final BigInteger[] defaultValue)\n    public List<BigDecimal> getBigDecimalList(final String key)\n    public List<BigDecimal> getBigDecimalList(final String key, final List<BigDecimal> defaultValue)\n    public BigDecimal[] getBigDecimalArray(final String key)\n    public BigDecimal[] getBigDecimalArray(final String key, final BigDecimal[] defaultValue)\n    public URI getURI(final String key)\n    public URI getURI(final String key, final URI defaultValue)\n    public URI[] getURIArray(final String key)\n    public URI[] getURIArray(final String key, final URI[] defaultValue)\n    public List<URI> getURIList(final String key)\n    public List<URI> getURIList(final String key, final List<URI> defaultValue)\n    public URL getURL(final String key)\n    public URL getURL(final String key, final URL defaultValue)\n    public List<URL> getURLList(final String key)\n    public List<URL> getURLList(final String key, final List<URL> defaultValue)\n    public URL[] getURLArray(final String key)\n    public URL[] getURLArray(final String key, final URL[] defaultValue)\n    public Date getDate(final String key)\n    public Date getDate(final String key, final String format)\n        final Date value = getDate(key, null, format);\n    public Date getDate(final String key, final Date defaultValue)\n    public Date getDate(final String key, final Date defaultValue, final String format)\n    public List<Date> getDateList(final String key)\n    public List<Date> getDateList(final String key, final String format)\n    public List<Date> getDateList(final String key, final List<Date> defaultValue)\n    public List<Date> getDateList(final String key, final List<Date> defaultValue, final String format)\n    public Date[] getDateArray(final String key)\n    public Date[] getDateArray(final String key, final String format)\n    public Date[] getDateArray(final String key, final Date[] defaultValue)\n    public Date[] getDateArray(final String key, final Date[] defaultValue, final String format)\n    public Calendar getCalendar(final String key)\n    public Calendar getCalendar(final String key, final String format)\n        final Calendar value = getCalendar(key, null, format);\n    public Calendar getCalendar(final String key, final Calendar defaultValue)\n    public Calendar getCalendar(final String key, final Calendar defaultValue, final String format)\n    public List<Calendar> getCalendarList(final String key)\n    public List<Calendar> getCalendarList(final String key, final String format)\n    public List<Calendar> getCalendarList(final String key, final List<Calendar> defaultValue)\n    public List<Calendar> getCalendarList(final String key, final List<Calendar> defaultValue, final String format)\n    public Calendar[] getCalendarArray(final String key)\n    public Calendar[] getCalendarArray(final String key, final String format)\n    public Calendar[] getCalendarArray(final String key, final Calendar[] defaultValue)\n    public Calendar[] getCalendarArray(final String key, final Calendar[] defaultValue, final String format)\n    public Locale getLocale(final String key)\n    public Locale getLocale(final String key, final Locale defaultValue)\n    public List<Locale> getLocaleList(final String key)\n    public List<Locale> getLocaleList(final String key, final List<Locale> defaultValue)\n    public Locale[] getLocaleArray(final String key)\n    public Locale[] getLocaleArray(final String key, final Locale[] defaultValue)\n    public Color getColor(final String key)\n    public Color getColor(final String key, final Color defaultValue)\n    public List<Color> getColorList(final String key)\n    public List<Color> getColorList(final String key, final List<Color> defaultValue)\n    public Color[] getColorArray(final String key)\n    public Color[] getColorArray(final String key, final Color[] defaultValue)\n        final ConversionHandler handler = super.getConversionHandler();\n            final DefaultConversionHandler orgHandler =\n",
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": "    public void setDataSource(final DataSource dataSource)\n    public void setTable(final String table)\n    public void setConfigurationNameColumn(final String configurationNameColumn)\n    public void setKeyColumn(final String keyColumn)\n    public void setValueColumn(final String valueColumn)\n    public void setConfigurationName(final String configurationName)\n    public void setAutoCommit(final boolean autoCommit)\n        final JdbcOperation<Object> op =\n                final ResultSet rs =\n                final List<Object> results = new ArrayList<>();\n                    final Object value = extractPropertyValue(rs);\n                    for (final Object o : getListDelimiterHandler().parse(value))\n                final StringBuilder query = new StringBuilder(\"INSERT INTO \");\n                final PreparedStatement pstmt = initStatement(query.toString(),\n    protected void addPropertyInternal(final String key, final Object value)\n        final ListDelimiterHandler oldHandler = getListDelimiterHandler();\n        final JdbcOperation<Integer> op =\n                final ResultSet rs = openResultSet(String.format(\n        final Integer count = op.execute();\n        final JdbcOperation<Boolean> op =\n                final ResultSet rs = openResultSet(\n        final Boolean result = op.execute();\n                final PreparedStatement ps = initStatement(String.format(\n                final ResultSet rs = openResultSet(String.format(\n    protected void close(final Connection conn, final Statement stmt, final ResultSet rs)\n        catch (final SQLException e)\n        catch (final SQLException e)\n        catch (final SQLException e)\n    protected Object extractPropertyValue(final ResultSet rs) throws SQLException\n    private static Object convertClob(final Clob clob) throws SQLException\n        final int len = (int) clob.length();\n                final EventType<? extends ConfigurationErrorEvent> errEvType,\n                final EventType<?> opType, final String errPropName, final Object errPropVal)\n            catch (final SQLException e)\n        protected PreparedStatement createStatement(final String sql, final boolean nameCol)\n                final StringBuilder buf = new StringBuilder(sql);\n        protected PreparedStatement initStatement(final String sql, final boolean nameCol,\n                final Object... params) throws SQLException\n            final PreparedStatement ps = createStatement(sql, nameCol);\n            for (final Object param : params)\n        protected ResultSet openResultSet(final String sql, final boolean nameCol,\n                final Object... params) throws SQLException\n",
            "src/main/java/org/apache/commons/configuration2/DynamicCombinedConfiguration.java": "    public DynamicCombinedConfiguration(final NodeCombiner comb)\n    public void setKeyPattern(final String pattern)\n    public void setLoggerName(final String name)\n    public void setNodeCombiner(final NodeCombiner nodeCombiner)\n    public void addConfiguration(final Configuration config, final String name,\n            final String at)\n            final ConfigData cd = new ConfigData(config, name, at);\n    public Configuration getConfiguration(final int index)\n            final ConfigData cd = configurations.get(index);\n    public Configuration getConfiguration(final String name)\n    public Configuration removeConfiguration(final String name)\n        final Configuration conf = getConfiguration(name);\n    public boolean removeConfiguration(final Configuration config)\n    public Configuration removeConfigurationAt(final int index)\n            final ConfigData cd = configurations.remove(index);\n    protected void addPropertyInternal(final String key, final Object value)\n    protected void clearPropertyDirect(final String key)\n    protected boolean containsKeyInternal(final String key)\n    public BigDecimal getBigDecimal(final String key, final BigDecimal defaultValue)\n    public BigDecimal getBigDecimal(final String key)\n    public BigInteger getBigInteger(final String key, final BigInteger defaultValue)\n    public BigInteger getBigInteger(final String key)\n    public boolean getBoolean(final String key, final boolean defaultValue)\n    public Boolean getBoolean(final String key, final Boolean defaultValue)\n    public boolean getBoolean(final String key)\n    public byte getByte(final String key, final byte defaultValue)\n    public Byte getByte(final String key, final Byte defaultValue)\n    public byte getByte(final String key)\n    public double getDouble(final String key, final double defaultValue)\n    public Double getDouble(final String key, final Double defaultValue)\n    public double getDouble(final String key)\n    public float getFloat(final String key, final float defaultValue)\n    public Float getFloat(final String key, final Float defaultValue)\n    public float getFloat(final String key)\n    public int getInt(final String key, final int defaultValue)\n    public int getInt(final String key)\n    public Integer getInteger(final String key, final Integer defaultValue)\n    protected Iterator<String> getKeysInternal(final String prefix)\n    public List<Object> getList(final String key, final List<?> defaultValue)\n    public List<Object> getList(final String key)\n    public long getLong(final String key, final long defaultValue)\n    public Long getLong(final String key, final Long defaultValue)\n    public long getLong(final String key)\n    public Properties getProperties(final String key)\n    protected Object getPropertyInternal(final String key)\n    public short getShort(final String key, final short defaultValue)\n    public Short getShort(final String key, final Short defaultValue)\n    public short getShort(final String key)\n    public String getString(final String key, final String defaultValue)\n    public String getString(final String key)\n    public String[] getStringArray(final String key)\n    protected void setPropertyInternal(final String key, final Object value)\n    public Configuration subset(final String prefix)\n    public void setExpressionEngine(final ExpressionEngine expressionEngine)\n    protected void addNodesInternal(final String key, final Collection<? extends ImmutableNode> nodes)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key)\n    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key)\n    protected Object clearTreeInternal(final String key)\n    protected int getMaxIndexInternal(final String key)\n    public Configuration getSource(final String key)\n        for (final CombinedConfiguration cc : configs.values())\n    public <T extends Event> void addEventListener(final EventType<T> eventType,\n            final EventListener<? super T> listener)\n        for (final CombinedConfiguration cc : configs.values())\n            final EventType<T> eventType, final EventListener<? super T> listener)\n        for (final CombinedConfiguration cc : configs.values())\n        for (final CombinedConfiguration cc : configs.values())\n        for (final CombinedConfiguration cc : configs.values())\n    protected void beginRead(final boolean optimize)\n        final CurrentConfigHolder cch = ensureCurrentConfiguration();\n    protected void beginWrite(final boolean optimize)\n        final CurrentConfigHolder cch = ensureCurrentConfiguration();\n        final CurrentConfigHolder cch = CURRENT_CONFIG.get();\n    private void initChildConfiguration(final CombinedConfiguration config)\n        for (final ConfigData data : configurations)\n            protected Lookup fetchLookupForPrefix(final String prefix)\n            final String key = String.valueOf(localSubst.interpolate(keyPattern));\n        public ConfigData(final Configuration config, final String n, final String at)\n        public CurrentConfigHolder(final String curKey)\n                final CombinedConfiguration currentConfiguration)\n",
            "src/main/java/org/apache/commons/configuration2/EnvironmentConfiguration.java": "    protected void addPropertyDirect(final String key, final Object value)\n    protected void clearPropertyDirect(final String key)\n",
            "src/main/java/org/apache/commons/configuration2/FindNodeVisitor.java": "    public FindNodeVisitor(final T node)\n    public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n",
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationConverter.java": "    public void process(final Configuration config)\n            final DefaultExpressionEngine exprEngine = DefaultExpressionEngine.INSTANCE;\n            final DefaultConfigurationKey keyEmpty =\n            final Set<String> keySet = new HashSet<>();\n            for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n                final String key = it.next();\n                final DefaultConfigurationKey keyAct =\n                final String elem = openElements(keyLast, keyAct, config, keySet);\n    protected void closeElements(final DefaultConfigurationKey keyLast, final DefaultConfigurationKey keyAct)\n        final DefaultConfigurationKey keyDiff = keyAct.differenceKey(keyLast);\n        final Iterator<String> it = reverseIterator(keyDiff);\n    protected Iterator<String> reverseIterator(final DefaultConfigurationKey key)\n        final List<String> list = new ArrayList<>();\n        for (final DefaultConfigurationKey.KeyIterator it = key.iterator(); it.hasNext();)\n    protected String openElements(final DefaultConfigurationKey keyLast, final DefaultConfigurationKey keyAct,\n            final Configuration config, final Set<String> keySet)\n        final DefaultConfigurationKey.KeyIterator it = keyLast.differenceKey(keyAct).iterator();\n        final DefaultConfigurationKey k = keyLast.commonKey(keyAct);\n    protected void fireValue(final String name, final Object value)\n            final Collection<?> valueCol = (Collection<?>) value;\n            for (final Object v : valueCol)\n",
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationXMLReader.java": "            final HierarchicalConfiguration<T> config)\n    public void setConfiguration(final HierarchicalConfiguration<T> config)\n        final NodeHandler<T> nodeHandler =\n        public void visitAfterChildren(final T node, final NodeHandler<T> handler)\n        public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n            final Object value = handler.getValue(node);\n        protected Attributes fetchAttributes(final T node, final NodeHandler<T> handler)\n            final AttributesImpl attrs = new AttributesImpl();\n            for (final String attr : handler.getAttributes(node))\n                final Object value = handler.getAttributeValue(node, attr);\n        private String nodeName(final T node, final NodeHandler<T> handler)\n            final String nodeName = handler.nodeName(node);\n",
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java": "    public INIConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n    public void setSeparatorUsedInOutput(final String separator)\n    public void write(final Writer writer) throws ConfigurationException, IOException\n        final PrintWriter out = new PrintWriter(writer);\n            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode()\n                    for (final ImmutableNode child : node.getChildren())\n    public void read(final Reader in) throws ConfigurationException, IOException\n        final BufferedReader bufferedReader = new BufferedReader(in);\n        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();\n        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);\n            final ImmutableNode.Builder rootBuilder,\n            final Map<String, ImmutableNode.Builder> sectionBuilders)\n        for (final Map.Entry<String, ImmutableNode.Builder> e : sectionBuilders\n    private void createNodeBuilders(final BufferedReader in,\n            final ImmutableNode.Builder rootBuilder,\n            final Map<String, ImmutableNode.Builder> sectionBuilders)\n                    final String section = line.substring(1, line.length() - 1);\n                    final int index = findSeparator(line);\n    private void createValueNodes(final ImmutableNode.Builder sectionBuilder,\n            final String key, final String value)\n        final Collection<String> values =\n        for (final String v : values)\n    private void writeProperty(final PrintWriter out, final String key, final Object value, final String separator)\n    private static String parseValue(final String val, final BufferedReader reader) throws IOException\n        final StringBuilder propertyValue = new StringBuilder();\n            final boolean quoted = value.startsWith(\"\\\"\") || value.startsWith(\"'\");\n            final char quote = quoted ? value.charAt(0) : 0;\n            final StringBuilder result = new StringBuilder();\n                final char c = value.charAt(i);\n    private static boolean lineContinues(final String line)\n        final String s = line.trim();\n    private static boolean lineContinues(final String line, final int pos)\n    private static boolean isCommentChar(final char c)\n    private static int findSeparator(final String line)\n    private static int findFirstOccurrence(final String line, final String separators)\n            final char sep = separators.charAt(i);\n            final int pos = line.indexOf(sep);\n    private static int findSeparatorBeforeQuote(final String line, final int quoteIndex)\n    private String escapeValue(final String value)\n    private static String escapeComments(final String value)\n            final char c = COMMENT_CHARS.charAt(i);\n    protected boolean isCommentLine(final String line)\n    protected boolean isSectionLine(final String line)\n        final Set<String> sections = new LinkedHashSet<>();\n            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode()\n    public SubnodeConfiguration getSection(final String name)\n        catch (final ConfigurationRuntimeException iex)\n            final InMemoryNodeModel parentModel = getSubConfigurationParentModel();\n            final NodeSelector selector = parentModel.trackChildNodeWithCreation(null, name, this);\n        final InMemoryNodeModel parentModel = getSubConfigurationParentModel();\n        final NodeSelector selector = new NodeSelector(null); // selects parent\n        final GlobalSectionNodeModel model =\n        final SubnodeConfiguration sub = new SubnodeConfiguration(this, model);\n    private static boolean isSectionNode(final ImmutableNode node)\n        public GlobalSectionNodeModel(final InMemoryNodeModelSupport modelSupport,\n                final NodeSelector selector)\n                public List<ImmutableNode> getChildren(final ImmutableNode node)\n                    final List<ImmutableNode> children = super.getChildren(node);\n                public List<ImmutableNode> getChildren(final ImmutableNode node,\n                        final String name)\n                    final List<ImmutableNode> children =\n                public int getChildrenCount(final ImmutableNode node, final String name)\n                    final List<ImmutableNode> children =\n                public ImmutableNode getChild(final ImmutableNode node, final int index)\n                    final List<ImmutableNode> children = super.getChildren(node);\n                public int indexOfChild(final ImmutableNode parent,\n                        final ImmutableNode child)\n                    final List<ImmutableNode> children = super.getChildren(parent);\n                        final ImmutableNode node, final List<ImmutableNode> children)\n                        for (final ImmutableNode child : children)\n",
            "src/main/java/org/apache/commons/configuration2/ImmutableConfigurationInvocationHandler.java": "    public ImmutableConfigurationInvocationHandler(final Configuration conf)\n    public Object invoke(final Object proxy, final Method method, final Object[] args)\n        catch (final InvocationTargetException e)\n    private static Object handleResult(final Object result)\n        public ImmutableIterator(final Iterator<?> it)\n",
            "src/main/java/org/apache/commons/configuration2/JNDIConfiguration.java": "    public JNDIConfiguration(final String prefix) throws NamingException\n    public JNDIConfiguration(final Context context)\n    public JNDIConfiguration(final Context context, final String prefix)\n    private void recursiveGetKeys(final Set<String> keys, final Context context, final String prefix,\n            final Set<Context> processedCtx) throws NamingException\n                final NameClassPair nameClassPair = elements.next();\n                final String name = nameClassPair.getName();\n                final Object object = context.lookup(name);\n                final StringBuilder key = new StringBuilder();\n                    final Context subcontext = (Context) object;\n    protected Iterator<String> getKeysInternal(final String prefix)\n        final String[] splitPath = StringUtils.split(prefix, \".\");\n        final List<String> path = Arrays.asList(splitPath);\n            final Context context = getContext(path, getBaseContext());\n            final Set<String> keys = new HashSet<>();\n        catch (final NameNotFoundException e)\n        catch (final NamingException e)\n    private Context getContext(final List<String> path, final Context context) throws NamingException\n        final String key = path.get(0);\n                final NameClassPair nameClassPair = elements.next();\n                final String name = nameClassPair.getName();\n                final Object object = context.lookup(name);\n                    final Context subcontext = (Context) object;\n        catch (final NamingException e)\n    protected void setPropertyInternal(final String key, final Object value)\n    protected void clearPropertyDirect(final String key)\n        catch (final NameNotFoundException e)\n        catch (final NamingException e)\n    public void setPrefix(final String prefix)\n        catch (final NameNotFoundException e)\n        catch (final NotContextException nctxex)\n        catch (final NamingException e)\n    protected void addPropertyDirect(final String key, final Object obj)\n    public void setContext(final Context context)\n",
            "src/main/java/org/apache/commons/configuration2/JSONConfiguration.java": "    public JSONConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n    public void read(final Reader in) throws ConfigurationException\n            final Map<String, Object> map = mapper.readValue(in, this.type);\n        catch (final Exception e)\n    public void write(final Writer out) throws ConfigurationException, IOException\n    public void read(final InputStream in) throws ConfigurationException\n            final Map<String, Object> map = mapper.readValue(in, this.type);\n        catch (final Exception e)\n",
            "src/main/java/org/apache/commons/configuration2/MapConfiguration.java": "    public MapConfiguration(final Map<String, ?> map)\n    public MapConfiguration(final Properties props)\n    public void setTrimmingDisabled(final boolean trimmingDisabled)\n    protected Object getPropertyInternal(final String key)\n        final Object value = map.get(key);\n            final Collection<String> list = getListDelimiterHandler().split((String) value, !isTrimmingDisabled());\n    protected void addPropertyDirect(final String key, final Object value)\n        final Object previousValue = getProperty(key);\n            final List<Object> list = new ArrayList<>();\n    protected boolean containsKeyInternal(final String key)\n    protected void clearPropertyDirect(final String key)\n            final MapConfiguration copy = (MapConfiguration) super.clone();\n            final\n        catch (final CloneNotSupportedException cex)\n    private static Map<String, Object> convertPropertiesToMap(final Properties props)\n        final\n",
            "src/main/java/org/apache/commons/configuration2/PatternSubtreeConfigurationWrapper.java": "            final HierarchicalConfiguration<ImmutableNode> config, final String path)\n    protected void addPropertyInternal(final String key, final Object value)\n    protected void clearPropertyDirect(final String key)\n    protected boolean containsKeyInternal(final String key)\n    public BigDecimal getBigDecimal(final String key, final BigDecimal defaultValue)\n    public BigDecimal getBigDecimal(final String key)\n    public BigInteger getBigInteger(final String key, final BigInteger defaultValue)\n    public BigInteger getBigInteger(final String key)\n    public boolean getBoolean(final String key, final boolean defaultValue)\n    public Boolean getBoolean(final String key, final Boolean defaultValue)\n    public boolean getBoolean(final String key)\n    public byte getByte(final String key, final byte defaultValue)\n    public Byte getByte(final String key, final Byte defaultValue)\n    public byte getByte(final String key)\n    public double getDouble(final String key, final double defaultValue)\n    public Double getDouble(final String key, final Double defaultValue)\n    public double getDouble(final String key)\n    public float getFloat(final String key, final float defaultValue)\n    public Float getFloat(final String key, final Float defaultValue)\n    public float getFloat(final String key)\n    public int getInt(final String key, final int defaultValue)\n    public int getInt(final String key)\n    public Integer getInteger(final String key, final Integer defaultValue)\n    protected Iterator<String> getKeysInternal(final String prefix)\n    public List<Object> getList(final String key, final List<?> defaultValue)\n    public List<Object> getList(final String key)\n    public long getLong(final String key, final long defaultValue)\n    public Long getLong(final String key, final Long defaultValue)\n    public long getLong(final String key)\n    public Properties getProperties(final String key)\n    protected Object getPropertyInternal(final String key)\n    public short getShort(final String key, final short defaultValue)\n    public Short getShort(final String key, final Short defaultValue)\n    public short getShort(final String key)\n    public String getString(final String key, final String defaultValue)\n    public String getString(final String key)\n    public String[] getStringArray(final String key)\n    protected void setPropertyInternal(final String key, final Object value)\n    public Configuration subset(final String prefix)\n    public void setExpressionEngine(final ExpressionEngine expressionEngine)\n    protected void addNodesInternal(final String key, final Collection<? extends ImmutableNode> nodes)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key)\n    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key)\n    protected Object clearTreeInternal(final String key)\n    protected int getMaxIndexInternal(final String key)\n    public <T extends Event> void addEventListener(final EventType<T> eventType,\n            final EventListener<? super T> listener)\n            final EventType<T> eventType, final EventListener<? super T> listener)\n            final EventType<T> eventType)\n    public void write(final Writer writer) throws ConfigurationException, IOException\n    public void read(final Reader reader) throws ConfigurationException, IOException\n        final String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;\n    private String makePath(final String item)\n    private String substitute(final String pattern)\n",
            "src/main/java/org/apache/commons/configuration2/PrefixedKeysIterator.java": "    public PrefixedKeysIterator(final Iterator<String> wrappedIterator, final String keyPrefix)\n            final String key = iterator.next();\n",
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java": "    public static void setInclude(final String inc)\n    public void setIncludesAllowed(final boolean includesAllowed)\n    public void setHeader(final String header)\n    public void setFooter(final String footer)\n    public void setLayout(final PropertiesConfigurationLayout layout)\n    private void installLayout(final PropertiesConfigurationLayout layout)\n    public void setIOFactory(final IOFactory ioFactory)\n    public void initFileLocator(final FileLocator locator)\n    public void read(final Reader in) throws ConfigurationException, IOException\n    public void write(final Writer out) throws ConfigurationException, IOException\n        final PropertiesConfiguration copy = (PropertiesConfiguration) super.clone();\n    boolean propertyLoaded(final String key, final String value)\n                final Collection<String> files =\n                for (final String f : files)\n    static boolean isCommentLine(final String line)\n        final String s = line.trim();\n    private static int countTrailingBS(final String line)\n        public PropertiesReader(final Reader reader)\n            final StringBuilder buffer = new StringBuilder();\n            final String line = readProperty();\n        protected void parseProperty(final String line)\n            final String[] property = doParseProperty(line);\n        protected void initPropertyName(final String name)\n        protected void initPropertyValue(final String value)\n        protected void initPropertySeparator(final String value)\n        private static boolean checkCombineLines(final String line)\n        private static String[] doParseProperty(final String line)\n            final Matcher matcher = PROPERTY_PATTERN.matcher(line);\n            final String[] result = {\"\", \"\", \"\"};\n                    public Object transformValue(final Object value)\n                        final String strVal = String.valueOf(value);\n        public PropertiesWriter(final Writer writer, final ListDelimiterHandler delHandler)\n        public void setCurrentSeparator(final String currentSeparator)\n        public void setGlobalSeparator(final String globalSeparator)\n        public void setLineSeparator(final String lineSeparator)\n        public void writeProperty(final String key, final Object value) throws IOException\n        public void writeProperty(final String key, final List<?> values) throws IOException\n        public void writeProperty(final String key, final Object value,\n                final boolean forceSingleLine) throws IOException\n                final List<?> values = (List<?>) value;\n                    catch (final UnsupportedOperationException uoex)\n        public void writeComment(final String comment) throws IOException\n        protected String escapeKey(final String key)\n            final StringBuilder newkey = new StringBuilder();\n                final char c = key.charAt(i);\n        public void writeln(final String s) throws IOException\n        protected String fetchSeparator(final String key, final Object value)\n        public PropertiesReader createPropertiesReader(final Reader in)\n        public PropertiesWriter createPropertiesWriter(final Writer out,\n                final ListDelimiterHandler handler)\n    protected static String unescapeJava(final String str)\n        final int sz = str.length();\n        final StringBuilder out = new StringBuilder(sz);\n        final StringBuilder unicode = new StringBuilder(UNICODE_LEN);\n            final char ch = str.charAt(i);\n                        final int value = Integer.parseInt(unicode.toString(), HEX_RADIX);\n                    catch (final NumberFormatException nfe)\n    private static boolean needsUnescape(final char ch)\n    private void loadIncludeFile(final String fileName) throws ConfigurationException\n            final URL baseURL = locator.getSourceURL();\n        final FileHandler fh = new FileHandler(this);\n        final FileLocator orgLocator = locator;\n    private URL locateIncludeFile(final String basePath, final String fileName)\n        final FileLocator includeLocator =\n",
            "src/main/java/org/apache/commons/configuration2/PropertiesConfigurationLayout.java": "    public PropertiesConfigurationLayout(final PropertiesConfigurationLayout c)\n    public String getCanonicalComment(final String key, final boolean commentChar)\n    public String getComment(final String key)\n    public void setComment(final String key, final String comment)\n    public int getBlancLinesBefore(final String key)\n    public void setBlancLinesBefore(final String key, final int number)\n    public String getCanonicalHeaderComment(final boolean commentChar)\n    public void setHeaderComment(final String comment)\n    public String getCanonicalFooterCooment(final boolean commentChar)\n    public void setFooterComment(final String footerComment)\n    public boolean isSingleLine(final String key)\n    public void setSingleLine(final String key, final boolean f)\n    public void setForceSingleLine(final boolean f)\n    public String getSeparator(final String key)\n    public void setSeparator(final String key, final String sep)\n    public void setGlobalSeparator(final String globalSeparator)\n    public void setLineSeparator(final String lineSeparator)\n    public void load(final PropertiesConfiguration config, final Reader in)\n        final PropertiesConfiguration.PropertiesReader reader =\n                    final boolean contained = layoutData.containsKey(reader\n                    final String comment = extractComment(reader.getCommentLines(),\n                    final PropertyLayoutData data = fetchLayoutData(reader\n        catch (final IOException ioex)\n    public void save(final PropertiesConfiguration config, final Writer out) throws ConfigurationException\n            final PropertiesConfiguration.PropertiesWriter writer =\n            for (final String key : getKeys())\n                    final boolean singleLine = isForceSingleLine() || isSingleLine(key);\n        catch (final IOException ioex)\n    public void onEvent(final ConfigurationEvent event)\n                final boolean contained =\n                final PropertyLayoutData data =\n    private PropertyLayoutData fetchLayoutData(final String key)\n    static boolean isCommentLine(final String line)\n    static String trimComment(final String s, final boolean comment)\n        final StringBuilder buf = new StringBuilder(s.length());\n                final String line = s.substring(lastPos, pos);\n    static String stripCommentChar(final String s, final boolean comment)\n    private String extractComment(final List<String> commentLines, final int from, final int to)\n        final StringBuilder buf = new StringBuilder(commentLines.get(from));\n    private int checkHeaderComment(final List<String> commentLines)\n    private void copyFrom(final PropertiesConfigurationLayout c)\n        for (final String key : c.getKeys())\n            final PropertyLayoutData data = c.layoutData.get(key);\n            final PropertiesConfiguration.PropertiesWriter writer, final String comment)\n    private static String constructCanonicalComment(final String comment,\n            final boolean commentChar)\n        public void setBlancLines(final int blancLines)\n        public void setSingleLine(final boolean singleLine)\n        public void addComment(final String s)\n        public void setComment(final String s)\n        public void setSeparator(final String separator)\n                final PropertyLayoutData copy = (PropertyLayoutData) super.clone();\n            catch (final CloneNotSupportedException cnex)\n",
            "src/main/java/org/apache/commons/configuration2/StrictConfigurationComparator.java": "    public boolean compare(final Configuration a, final Configuration b)\n        for (final Iterator<String> keys = a.getKeys(); keys.hasNext();)\n            final String key = keys.next();\n            final Object value = a.getProperty(key);\n        for (final Iterator<String> keys = b.getKeys(); keys.hasNext();)\n            final String key = keys.next();\n            final Object value = b.getProperty(key);\n",
            "src/main/java/org/apache/commons/configuration2/SubnodeConfiguration.java": "    public SubnodeConfiguration(final BaseHierarchicalConfiguration parent,\n                                final TrackedNodeModel model)\n        final ImmutableNode root =\n        final InMemoryNodeModel parentModel =\n    protected NodeSelector getSubConfigurationNodeSelector(final String key)\n            final NodeSelector selector, final InMemoryNodeModelSupport parentModelSupport)\n",
            "src/main/java/org/apache/commons/configuration2/SubsetConfiguration.java": "    public SubsetConfiguration(final Configuration parent, final String prefix)\n    public SubsetConfiguration(final Configuration parent, final String prefix, final String delimiter)\n    protected String getParentKey(final String key)\n    protected String getChildKey(final String key)\n            final int i = prefix.length() + (delimiter != null ? delimiter.length() : 0);\n    public void setPrefix(final String prefix)\n    public Configuration subset(final String prefix)\n    protected boolean containsKeyInternal(final String key)\n    public void addPropertyDirect(final String key, final Object value)\n    protected void clearPropertyDirect(final String key)\n    protected Object getPropertyInternal(final String key)\n    protected Iterator<String> getKeysInternal(final String prefix)\n    public void setThrowExceptionOnMissing(final boolean throwExceptionOnMissing)\n            final ListDelimiterHandler listDelimiterHandler)\n        public SubsetIterator(final Iterator<String> it)\n",
            "src/main/java/org/apache/commons/configuration2/SystemConfiguration.java": "    public static void setSystemProperties(final String fileName)\n    public static void setSystemProperties(final String basePath, final String fileName)\n        final FileBasedConfiguration config =\n        final FileHandler handler = new FileHandler(config);\n    public static void setSystemProperties(final Configuration systemConfig)\n        final Iterator<String> iter = systemConfig.getKeys();\n            final String key = iter.next();\n            final String value = (String) systemConfig.getProperty(key);\n",
            "src/main/java/org/apache/commons/configuration2/XMLConfiguration.java": "    public XMLConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n        final Document doc = getDocument();\n    public void setRootElementName(final String name)\n    public void setDocumentBuilder(final DocumentBuilder documentBuilder)\n    public void setPublicID(final String publicID)\n    public void setSystemID(final String systemID)\n    public void setValidating(final boolean validating)\n    public void setSchemaValidation(final boolean schemaValidation)\n    public void setEntityResolver(final EntityResolver resolver)\n        final XMLDocumentHelper docHelper = getDocumentHelper();\n        final ReferenceNodeHandler handler = getReferenceHandler();\n    private void initProperties(final XMLDocumentHelper docHelper, final boolean elemRefs)\n        final Document document = docHelper.getDocument();\n        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n        final MutableObject<String> rootValue = new MutableObject<>();\n        final Map<ImmutableNode, Object> elemRefMap =\n        final Map<String, String> attributes =\n        final ImmutableNode top =\n    private Map<String, String> constructHierarchy(final ImmutableNode.Builder node,\n            final MutableObject<String> refValue, final Element element,\n            final Map<ImmutableNode, Object> elemRefs, final boolean trim, final int level)\n        final boolean trimFlag = shouldTrim(element, trim);\n        final Map<String, String> attributes = processAttributes(element);\n        final StringBuilder buffer = new StringBuilder();\n        final NodeList list = element.getChildNodes();\n            final org.w3c.dom.Node w3cNode = list.item(i);\n                final Element child = (Element) w3cNode;\n                final ImmutableNode.Builder childNode = new ImmutableNode.Builder();\n                final MutableObject<String> refChildValue =\n                final Map<String, String> attrmap =\n                final Boolean childTrim = Boolean.valueOf(attrmap.remove(ATTR_SPACE_INTERNAL));\n                final ImmutableNode newChild =\n                final Text data = (Text) w3cNode;\n        final String text = determineValue(buffer.toString(), childrenFlag, trimFlag);\n    private static String determineValue(final String content, final boolean hasChildren,\n            final boolean trimFlag)\n        final boolean shouldTrim =\n    private static Map<String, String> processAttributes(final Element element)\n        final NamedNodeMap attributes = element.getAttributes();\n        final Map<String, String> attrmap = new HashMap<>();\n            final org.w3c.dom.Node w3cNode = attributes.item(i);\n                final Attr attr = (Attr) w3cNode;\n    private ImmutableNode createChildNodeWithValue(final ImmutableNode.Builder parent,\n            final ImmutableNode.Builder child, final Element elem, final String value,\n            final boolean trim, final Map<String, String> attrmap,\n            final Map<ImmutableNode, Object> elemRefs)\n            final Map<ImmutableNode, Object> refs = isSingleElementList(elem) ? elemRefs : null;\n            final Iterator<String> it = values.iterator();\n                final ImmutableNode.Builder c = new ImmutableNode.Builder();\n                final ImmutableNode newChild = c.create();\n    private static boolean isSingleElementList(final Element element)\n        final Node parentNode = element.getParentNode();\n    private static int countChildElements(final Node parent, final String name)\n        final NodeList childNodes = parent.getChildNodes();\n            final Node item = childNodes.item(i);\n    private static boolean shouldTrim(final Element element, final boolean currentTrim)\n        final Attr attr = element.getAttributeNode(ATTR_SPACE);\n        final DocumentBuilderFactory factory = DocumentBuilderFactory\n        final DocumentBuilder result = factory.newDocumentBuilder();\n                public void error(final SAXParseException ex) throws SAXException\n        final Transformer transformer = XMLDocumentHelper.createTransformer();\n        final ReferenceNodeHandler handler = getReferenceHandler();\n        final XMLDocumentHelper docHelper =\n        final XMLDocumentHelper newHelper =\n        final XMLBuilderVisitor builder =\n    private void initRootElementText(final Document doc, final Object value)\n        final Element elem = doc.getDocumentElement();\n        final NodeList children = elem.getChildNodes();\n            final org.w3c.dom.Node nd = children.item(i);\n    public void initFileLocator(final FileLocator loc)\n    public void read(final Reader in) throws ConfigurationException, IOException\n    public void read(final InputStream in) throws ConfigurationException, IOException\n    private void load(final InputSource source) throws ConfigurationException\n            final URL sourceURL = locator.getSourceURL();\n            final DocumentBuilder builder = createDocumentBuilder();\n            final Document newDocument = builder.parse(source);\n            final Document oldDocument = getDocument();\n        catch (final SAXParseException spe)\n        catch (final Exception e)\n    public void write(final Writer writer) throws ConfigurationException, IOException\n        final Transformer transformer = createTransformer();\n        final Source source = new DOMSource(createDocument());\n        final Result result = new StreamResult(writer);\n            final Transformer transformer = createTransformer();\n            final Source source = new DOMSource(createDocument());\n            final StringWriter writer = new StringWriter();\n            final Result result = new StreamResult(writer);\n            final Reader reader = new StringReader(writer.getBuffer().toString());\n            final DocumentBuilder builder = createDocumentBuilder();\n        catch (final SAXException e)\n        catch (final IOException e)\n        catch (final ParserConfigurationException pce)\n        public XMLBuilderVisitor(final XMLDocumentHelper docHelper,\n                final ListDelimiterHandler handler)\n        public void processDocument(final ReferenceNodeHandler refHandler)\n        public void handleRemovedNodes(final ReferenceNodeHandler refHandler)\n            for (final Object ref : refHandler.removedReferences())\n                    final Node removedElem = (Node) ref;\n        protected void insert(final ImmutableNode newNode, final ImmutableNode parent,\n                final ImmutableNode sibling1, final ImmutableNode sibling2,\n                final ReferenceNodeHandler refHandler)\n            final Element elem = document.createElement(newNode.getNodeName());\n                final String txt =\n        protected void update(final ImmutableNode node, final Object reference,\n                final ReferenceNodeHandler refHandler)\n                    final String value = XMLListReference.listValue(node, refHandler, listDelimiterHandler);\n                final Object value = listDelimiterHandler.escape(refHandler.getValue(node),\n        private void updateElement(final ImmutableNode node, final ReferenceNodeHandler refHandler,\n                                   final Object value)\n            final Element element = getElement(node, refHandler);\n        private void updateElement(final Element element, final Object value)\n                final String newValue = String.valueOf(value);\n        private void removeReference(final Element element)\n            final org.w3c.dom.Node parentElem = element.getParentNode();\n        private Element getElement(final ImmutableNode node,\n                final ReferenceNodeHandler refHandler)\n            final Element elementNew = newElements.get(node);\n            final Object reference = refHandler.getReference(node);\n        private static void updateAttributes(final ImmutableNode node, final Element elem)\n                for (final Map.Entry<String, Object> e : node.getAttributes()\n        private static void clearAttributes(final Element elem)\n            final NamedNodeMap attributes = elem.getAttributes();\n        private static Text findTextNodeForUpdate(final Element elem)\n            final NodeList children = elem.getChildNodes();\n            final Collection<org.w3c.dom.Node> textNodes =\n                final org.w3c.dom.Node nd = children.item(i);\n            for (final org.w3c.dom.Node tn : textNodes)\n",
            "src/main/java/org/apache/commons/configuration2/XMLDocumentHelper.java": "    XMLDocumentHelper(final Document doc, final Map<Node, Node> elemMap, final String pubID,\n            final String sysID)\n    public static XMLDocumentHelper forNewDocument(final String rootElementName)\n        final Document doc =\n        final Element rootElem = doc.createElement(rootElementName);\n    public static XMLDocumentHelper forSourceDocument(final Document srcDoc)\n    public static void transform(final Transformer transformer, final Source source,\n            final Result result) throws ConfigurationException\n        catch (final TransformerException tex)\n        final Document docCopy = copyDocument(getDocument());\n    static Transformer createTransformer(final TransformerFactory factory)\n        catch (final TransformerConfigurationException tex)\n    static DocumentBuilder createDocumentBuilder(final DocumentBuilderFactory factory)\n        catch (final ParserConfigurationException pcex)\n    private static Document copyDocument(final Document doc)\n        final Transformer transformer = createTransformer();\n        final DOMSource source = new DOMSource(doc);\n        final DOMResult result = new DOMResult();\n    private static Map<Node, Node> createElementMapping(final Document doc1,\n            final Document doc2)\n        final Map<Node, Node> mapping = new HashMap<>();\n    private static void createElementMappingForNodes(final Node n1, final Node n2,\n            final Map<Node, Node> mapping)\n        final NodeList childNodes1 = n1.getChildNodes();\n        final NodeList childNodes2 = n2.getChildNodes();\n        final int count = Math.min(childNodes1.getLength(), childNodes2.getLength());\n",
            "src/main/java/org/apache/commons/configuration2/XMLListReference.java": "    private XMLListReference(final Element e)\n    public static void assignListReference(final Map<ImmutableNode, Object> refs,\n            final ImmutableNode node, final Element elem)\n    public static boolean isListNode(final ImmutableNode node,\n            final ReferenceNodeHandler handler)\n        final ImmutableNode parent = handler.getParent(node);\n                final ImmutableNode child = handler.getChild(parent, i);\n    public static boolean isFirstListItem(final ImmutableNode node,\n            final ReferenceNodeHandler handler)\n        final ImmutableNode parent = handler.getParent(node);\n            final ImmutableNode child = handler.getChild(parent, idx);\n    public static String listValue(final ImmutableNode node,\n            final ReferenceNodeHandler nodeHandler,\n            final ListDelimiterHandler delimiterHandler)\n        final ImmutableNode parent = nodeHandler.getParent(node);\n        final List<ImmutableNode> items =\n        final List<Object> values = new ArrayList<>(items.size());\n        for (final ImmutableNode n : items)\n        catch (final UnsupportedOperationException e)\n    private static boolean hasListReference(final ImmutableNode node,\n            final ReferenceNodeHandler handler)\n    private static boolean nameEquals(final ImmutableNode n1, final ImmutableNode n2)\n",
            "src/main/java/org/apache/commons/configuration2/XMLPropertiesConfiguration.java": "    public XMLPropertiesConfiguration(final Element element) throws ConfigurationException\n    public void setHeader(final String header)\n    public void read(final Reader in) throws ConfigurationException\n        final SAXParserFactory factory = SAXParserFactory.newInstance();\n            final SAXParser parser = factory.newSAXParser();\n            final XMLReader xmlReader = parser.getXMLReader();\n                public InputSource resolveEntity(final String publicId, final String systemId)\n        catch (final Exception e)\n    public void load(final Element element) throws ConfigurationException\n        final NodeList childNodes = element.getChildNodes();\n            final Node item = childNodes.item(i);\n                    final String key = ((Element) item).getAttribute(\"key\");\n    public void write(final Writer out) throws ConfigurationException\n        final PrintWriter writer = new PrintWriter(out);\n        final Iterator<String> keys = getKeys();\n            final String key = keys.next();\n            final Object value = getProperty(key);\n    private void writeProperty(final PrintWriter out, final String key, final Object value)\n        final String k = StringEscapeUtils.escapeXml10(key);\n            final String v = escapeValue(value);\n    private void writeProperty(final PrintWriter out, final String key, final List<?> values)\n        for (final Object value : values)\n    public void save(final Document document, final Node parent)\n        final Element properties = document.createElement(\"properties\");\n            final Element comment = document.createElement(\"comment\");\n        final Iterator<String> keys = getKeys();\n            final String key = keys.next();\n            final Object value = getProperty(key);\n    public void initFileLocator(final FileLocator locator)\n    private void writeProperty(final Document document, final Node properties, final String key, final Object value)\n        final Element entry = document.createElement(\"entry\");\n        final String k = StringEscapeUtils.escapeXml10(key);\n            final String v = escapeValue(value);\n    private void writeProperty(final Document document, final Node properties, final String key, final List<?> values)\n        for (final Object value : values)\n    private String escapeValue(final Object value)\n        final String v = StringEscapeUtils.escapeXml10(String.valueOf(value));\n        public void startElement(final String uri, final String localName, final String qName, final Attributes attrs)\n        public void endElement(final String uri, final String localName, final String qName)\n        public void characters(final char[] chars, final int start, final int length)\n",
            "src/main/java/org/apache/commons/configuration2/YAMLConfiguration.java": "    public YAMLConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n    public void read(final Reader in) throws ConfigurationException\n            final Yaml yaml = new Yaml();\n            final Map<String, Object> map = (Map) yaml.load(in);\n        catch (final Exception e)\n    public void read(final Reader in, final LoaderOptions options)\n            final Yaml yaml = new Yaml(options);\n            final Map<String, Object> map = (Map) yaml.load(in);\n        catch (final Exception e)\n    public void write(final Writer out) throws ConfigurationException, IOException\n        final DumperOptions options = new DumperOptions();\n    public void dump(final Writer out, final DumperOptions options)\n        final Yaml yaml = new Yaml(options);\n    public void read(final InputStream in) throws ConfigurationException\n            final Yaml yaml = new Yaml();\n            final Map<String, Object> map = (Map) yaml.load(in);\n        catch (final Exception e)\n    public void read(final InputStream in, final LoaderOptions options)\n            final Yaml yaml = new Yaml(options);\n            final Map<String, Object> map = (Map) yaml.load(in);\n        catch (final Exception e)\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/BeanHelper.java": "    public BeanHelper(final BeanFactory defFactory)\n    public void registerBeanFactory(final String name, final BeanFactory factory)\n    public BeanFactory deregisterBeanFactory(final String name)\n    public void initBean(final Object bean, final BeanDeclaration data)\n        final Map<String, Object> nestedBeans = data.getNestedBeanDeclarations();\n                final\n                    final Map.Entry<String, Object> e = nestedBeans.entrySet().iterator().next();\n                    final String propName = e.getKey();\n                    final Class<?> defaultClass = getDefaultClass(bean, propName);\n                        final\n                        for (final BeanDeclaration decl : decls)\n                        final BeanDeclaration decl = (BeanDeclaration) e.getValue();\n                for (final Map.Entry<String, Object> e : nestedBeans.entrySet())\n                    final String propName = e.getKey();\n                    final Class<?> defaultClass = getDefaultClass(bean, propName);\n                    final Object prop = e.getValue();\n                        final Collection<Object> beanCollection =\n                        for (final Object elemDef : (Collection<?>) prop)\n    public static void initBeanProperties(final Object bean, final BeanDeclaration data)\n        final Map<String, Object> properties = data.getBeanProperties();\n            for (final Map.Entry<String, Object> e : properties.entrySet())\n                final String propName = e.getKey();\n    public static DynaBean createWrapDynaBean(final Object bean)\n        final WrapDynaClass dynaClass =\n    public static void copyProperties(final Object dest, final Object orig)\n    private static Class<?> getDefaultClass(final Object bean, final String propName)\n            final PropertyDescriptor desc =\n        catch (final Exception ex)\n    private static void initProperty(final Object bean, final String propName, final Object value)\n        catch (final IllegalAccessException iaex)\n        catch (final InvocationTargetException itex)\n    private static Collection<Object> createPropertyCollection(final String propName,\n            final Class<?> propertyClass)\n    public static void setProperty(final Object bean, final String propName, final Object value)\n    public Object createBean(final BeanDeclaration data, final Class<?> defaultClass,\n            final Object param)\n        final BeanFactory factory = fetchBeanFactory(data);\n        final BeanCreationContext bcc =\n        catch (final Exception ex)\n    public Object createBean(final BeanDeclaration data, final Class<?> defaultClass)\n    public Object createBean(final BeanDeclaration data)\n    static Class<?> loadClass(final String name) throws ClassNotFoundException\n    private static boolean isPropertyWriteable(final Object bean, final String propName)\n    private static Class<?> fetchBeanClass(final BeanDeclaration data,\n            final Class<?> defaultClass, final BeanFactory factory)\n        final String clsName = data.getBeanClassName();\n            catch (final ClassNotFoundException cex)\n        final Class<?> clazz = factory.getDefaultBeanClass();\n    private BeanFactory fetchBeanFactory(final BeanDeclaration data)\n        final String factoryName = data.getBeanFactoryName();\n            final BeanFactory factory = beanFactories.get(factoryName);\n            final BeanDeclaration data, final Class<?> defaultClass,\n            final Object param, final BeanFactory factory)\n        final PropertyUtilsBean propUtilsBean = new PropertyUtilsBean();\n        private BeanCreationContextImpl(final BeanHelper helper, final Class<?> beanClass,\n                final BeanDeclaration data, final Object param)\n        public void initBean(final Object bean, final BeanDeclaration data)\n        public Object createBean(final BeanDeclaration data)\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/CombinedBeanDeclaration.java": "    public CombinedBeanDeclaration(final BeanDeclaration... decl)\n        for (final BeanDeclaration d : childDeclarations)\n            final String factoryName = d.getBeanFactoryName();\n        for (final BeanDeclaration d : childDeclarations)\n            final Object factoryParam = d.getBeanFactoryParameter();\n        for (final BeanDeclaration d : childDeclarations)\n            final String beanClassName = d.getBeanClassName();\n        final Map<String, Object> result = new HashMap<>();\n            final Map<String, Object> props =\n        final Map<String, Object> result = new HashMap<>();\n            final Map<String, Object> decls =\n        for (final BeanDeclaration d : childDeclarations)\n            final Collection<ConstructorArg> args = d.getConstructorArgs();\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java": "    public ConfigurationDynaBean(final Configuration configuration)\n    public void set(final String name, final Object value)\n            final Collection<?> collection = (Collection<?>) value;\n            for (final Object v : collection)\n            final int length = Array.getLength(value);\n    public Object get(final String name)\n            final Configuration subset = new SubsetConfiguration(getConfiguration(), name, PROPERTY_DELIMITER);\n    public boolean contains(final String name, final String key)\n        final Configuration subset = getConfiguration().subset(name);\n    public Object get(final String name, final int index)\n        final List<Object> list = getConfiguration().getList(name);\n    public Object get(final String name, final String key)\n        final Configuration subset = getConfiguration().subset(name);\n    public void remove(final String name, final String key)\n        final Configuration subset = new SubsetConfiguration(getConfiguration(), name, PROPERTY_DELIMITER);\n    public void set(final String name, final int index, final Object value)\n        final Object property = getConfiguration().getProperty(name);\n            final\n    public void set(final String name, final String key, final Object value)\n    private boolean checkIndexedProperty(final String name)\n        final Object property = getConfiguration().getProperty(name);\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaClass.java": "    public ConfigurationDynaClass(final Configuration configuration)\n    public DynaProperty getDynaProperty(final String name)\n        final Object value = configuration.getProperty(name);\n        final Iterator<String> keys = configuration.getKeys();\n        final List<DynaProperty> properties = new ArrayList<>();\n            final String key = keys.next();\n            final DynaProperty property = getDynaProperty(key);\n        final DynaProperty[] propertyArray = new DynaProperty[properties.size()];\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConstructorArg.java": "    private ConstructorArg(final BeanDeclaration decl, final Object val, final String type)\n    public static ConstructorArg forBeanDeclaration(final BeanDeclaration decl)\n    public static ConstructorArg forBeanDeclaration(final BeanDeclaration decl,\n            final String typeName)\n    public static ConstructorArg forValue(final Object value)\n    public static ConstructorArg forValue(final Object value, final String typeName)\n    public boolean matches(final Class<?> argCls)\n        final StringBuilder buf = new StringBuilder();\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/DefaultBeanFactory.java": "    public DefaultBeanFactory(final ConversionHandler convHandler)\n    public Object createBean(final BeanCreationContext bcc) throws Exception\n        final Object result = createBeanInstance(bcc);\n    protected Object createBeanInstance(final BeanCreationContext bcc)\n        final Constructor<?> ctor =\n        final Object[] args = fetchConstructorArgs(ctor, bcc);\n    protected void initBeanInstance(final Object bean, final BeanCreationContext bcc) throws Exception\n            final Class<T> beanClass, final BeanDeclaration data)\n        final List<Constructor<T>> matchingConstructors =\n    private Object[] fetchConstructorArgs(final Constructor<?> ctor,\n            final BeanCreationContext bcc)\n        final Class<?>[] types = ctor.getParameterTypes();\n        final Object[] args = new Object[types.length];\n        for (final ConstructorArg arg : nullSafeConstructorArgs(bcc.getBeanDeclaration()))\n            final Object val =\n            final BeanDeclaration data)\n            final Class<T> beanClass, final BeanDeclaration data)\n        final List<Constructor<T>> result = new LinkedList<>();\n        final Collection<ConstructorArg> args = getConstructorArgs(data);\n        for (final Constructor<?> ctor : beanClass.getConstructors())\n                final\n    private static boolean matchesConstructor(final Constructor<?> ctor,\n            final Collection<ConstructorArg> args)\n        final Class<?>[] types = ctor.getParameterTypes();\n        for (final ConstructorArg arg : args)\n            final BeanDeclaration data)\n    private static <T> void checkSingleMatchingConstructor(final Class<T> beanClass,\n            final BeanDeclaration data, final List<Constructor<T>> matchingConstructors)\n            final Class<?> beanClass, final BeanDeclaration data, final String msg)\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/XMLBeanDeclaration.java": "    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key)\n    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key,\n            final boolean optional)\n    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key,\n            final boolean optional, final String defBeanClsName)\n        catch (final ConfigurationRuntimeException iex)\n    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config)\n    XMLBeanDeclaration(final HierarchicalConfiguration<?> config,\n            final NodeData<?> node)\n        final Map<String, Object> props = new HashMap<>();\n        for (final String key : getAttributeNames())\n        final Map<String, Object> nested = new HashMap<>();\n        for (final NodeData<?> child : getNode().getChildren())\n                    final Object obj = nested.get(child.nodeName());\n                        final\n        final Collection<ConstructorArg> args = new LinkedList<>();\n        for (final NodeData<?> child : getNode().getChildren(ELEM_CTOR_ARG))\n    protected Object interpolate(final Object value)\n        final ConfigurationInterpolator interpolator =\n    protected boolean isReservedChildName(final String name)\n    protected boolean isReservedAttributeName(final String name)\n    protected boolean isReservedName(final String name)\n    BeanDeclaration createBeanDeclaration(final NodeData<?> node)\n        for (final HierarchicalConfiguration<?> config : getConfiguration()\n    private void initSubnodeConfiguration(final HierarchicalConfiguration<?> conf)\n    private ConstructorArg createConstructorArg(final NodeData<?> child)\n        final String type = getAttribute(child, ATTR_CTOR_TYPE);\n    private String getAttribute(final NodeData<?> nd, final String attr)\n        final Object value = nd.getAttribute(attr);\n    private static boolean isBeanDeclarationArgument(final NodeData<?> nd)\n            final HierarchicalConfiguration<T> config)\n        final NodeHandler<T> handler = config.getNodeModel().getNodeHandler();\n        public NodeData(final T nd, final NodeHandler<T> hndlr)\n        public String escapedNodeName(final HierarchicalConfiguration<?> config)\n        public List<NodeData<T>> getChildren(final String name)\n        public Object getAttribute(final String key)\n        public boolean matchesConfigRootNode(final HierarchicalConfiguration<?> config)\n        private List<NodeData<T>> wrapInNodeData(final List<T> nodes)\n            final List<NodeData<T>> result = new ArrayList<>(nodes.size());\n            for (final T node : nodes)\n",
            "src/main/java/org/apache/commons/configuration2/builder/AutoSaveListener.java": "    public AutoSaveListener(final FileBasedConfigurationBuilder<?> bldr)\n    public void onEvent(final ConfigurationEvent event)\n            catch (final ConfigurationException ce)\n    public synchronized void loading(final FileHandler handler)\n    public synchronized void loaded(final FileHandler handler)\n    public synchronized void updateFileHandler(final FileHandler fh)\n    private boolean autoSaveRequired(final ConfigurationEvent event)\n",
            "src/main/java/org/apache/commons/configuration2/builder/BasicBuilderParameters.java": "        final HashMap<String, Object> result =\n    public BasicBuilderParameters setLogger(final ConfigurationLogger log)\n    public BasicBuilderParameters setThrowExceptionOnMissing(final boolean b)\n            final ListDelimiterHandler handler)\n    public BasicBuilderParameters setInterpolator(final ConfigurationInterpolator ci)\n            final Map<String, ? extends Lookup> lookups)\n            final Collection<? extends Lookup> lookups)\n            final ConfigurationInterpolator parent)\n    public BasicBuilderParameters setSynchronizer(final Synchronizer sync)\n    public BasicBuilderParameters setConversionHandler(final ConversionHandler handler)\n    public BasicBuilderParameters setBeanHelper(final BeanHelper beanHelper)\n            final ConfigurationDecoder decoder)\n    public void merge(final BuilderParameters p)\n        for (final Map.Entry<String, Object> e : p.getParameters().entrySet())\n    public void inheritFrom(final Map<String, ?> source)\n            final Map<String, Object> params)\n    public static BeanHelper fetchBeanHelper(final Map<String, Object> params)\n            final BasicBuilderParameters copy =\n        catch (final CloneNotSupportedException cnex)\n    protected void storeProperty(final String key, final Object value)\n    protected Object fetchProperty(final String key)\n    protected void copyPropertiesFrom(final Map<String, ?> source, final String... keys)\n        for (final String key : keys)\n            final Object value = source.get(key);\n    private BasicBuilderParameters setProperty(final String key, final Object value)\n    private static void createDefensiveCopies(final HashMap<String, Object> params)\n        final Map<String, ? extends Lookup> prefixLookups =\n        final Collection<? extends Lookup> defLookups = fetchDefaultLookups(params);\n            final Map<String, Object> params)\n        final\n            final Map<String, Object> params)\n        final Map<?, ?> prefixes =\n        for (final Map.Entry<?, ?> e : prefixes.entrySet())\n            final Map<String, Object> params)\n        final\n            final Map<String, Object> params)\n        final Collection<?> col =\n        for (final Object o : col)\n    private static <T> T fetchParameter(final Map<String, Object> params, final String key,\n            final Class<T> expClass)\n        final Object value = params.get(key);\n    private static void checkParameters(final Map<String, Object> params)\n",
            "src/main/java/org/apache/commons/configuration2/builder/BasicConfigurationBuilder.java": "    public BasicConfigurationBuilder(final Class<? extends T> resCls)\n    public BasicConfigurationBuilder(final Class<? extends T> resCls, final Map<String, Object> params)\n    public BasicConfigurationBuilder(final Class<? extends T> resCls,\n            final Map<String, Object> params, final boolean allowFailOnInit)\n            final Map<String, Object> params)\n            final Map<String, Object> params)\n        final Map<String, Object> newParams =\n    public BasicConfigurationBuilder<T> configure(final BuilderParameters... params)\n        final Map<String, Object> newParams = new HashMap<>();\n        for (final BuilderParameters p : params)\n            final EventType<E> eventType, final EventListener<? super E> listener)\n            final EventType<E> eventType, final EventListener<? super E> listener)\n            final ReloadingController controller)\n        final T resObj = createResultInstance();\n        catch (final ConfigurationException cex)\n        final Object bean = fetchBeanHelper().createBean(getResultDeclaration());\n    protected void initResultInstance(final T obj) throws ConfigurationException\n        final BeanHelper helper =\n            final BasicConfigurationBuilder<?> target)\n    protected void copyEventListeners(final BasicConfigurationBuilder<?> target,\n            final EventListenerList listeners)\n            final EventType<E> eventType, final EventListener<? super E> listener)\n    protected void fireBuilderEvent(final ConfigurationBuilderEvent event)\n    private void updateParameters(final Map<String, Object> newParams)\n        final Map<String, Object> map = new HashMap<>();\n    private void registerEventListeners(final T obj)\n        final EventSource evSrc = ConfigurationUtils.asEventSource(obj, true);\n        for (final EventListenerRegistrationData<?> regData : eventListeners\n    private void removeEventListeners(final T obj)\n        final EventSource evSrc = ConfigurationUtils.asEventSource(obj, true);\n        for (final EventListenerRegistrationData<?> regData : eventListeners\n    private void handleEventListenerProviders(final BuilderParameters params)\n    private void checkResultInstance(final Object inst)\n        final Map<String, Object> filteredMap =\n        for (final Iterator<String> it = filteredMap.keySet().iterator(); it\n            final String key = it.next();\n    private void handleInitializable(final T obj)\n    private static <E extends Event> void registerListener(final EventSource evSrc,\n            final EventListenerRegistrationData<E> regData)\n    private static <E extends Event> void removeListener(final EventSource evSrc,\n            final EventListenerRegistrationData<E> regData)\n",
            "src/main/java/org/apache/commons/configuration2/builder/BuilderConfigurationWrapperFactory.java": "    public BuilderConfigurationWrapperFactory(final EventSourceSupport evSrcSupport)\n            final Class<T> ifcClass, final ConfigurationBuilder<? extends T> builder)\n            final Class<T> ifcClass, final ConfigurationBuilder<? extends T> builder,\n            final EventSourceSupport evSrcSupport)\n    private static Class<?>[] fetchSupportedInterfaces(final Class<?> ifcClass,\n            final EventSourceSupport evSrcSupport)\n        final Class<?>[] result = new Class<?>[2];\n                final ConfigurationBuilder<? extends ImmutableConfiguration> wrappedBuilder,\n                final EventSourceSupport evSrcSupport)\n        public Object invoke(final Object proxy, final Method method, final Object[] args)\n        private Object handleConfigurationInvocation(final Method method,\n                final Object[] args) throws Exception\n        private Object handleEventSourceInvocation(final Method method, final Object[] args)\n            final Object target =\n",
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderEvent.java": "    public ConfigurationBuilderEvent(final ConfigurationBuilder<?> source,\n            final EventType<? extends ConfigurationBuilderEvent> evType)\n",
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderResultCreatedEvent.java": "            final ConfigurationBuilder<?> source,\n            final EventType<? extends ConfigurationBuilderResultCreatedEvent> evType,\n            final ImmutableConfiguration createdConfiguration)\n",
            "src/main/java/org/apache/commons/configuration2/builder/CopyObjectDefaultHandler.java": "    public CopyObjectDefaultHandler(final BuilderParameters src)\n    public void initializeDefaults(final Object parameters)\n        catch (final Exception e)\n",
            "src/main/java/org/apache/commons/configuration2/builder/DatabaseBuilderParametersImpl.java": "    public DatabaseBuilderParametersImpl setDataSource(final DataSource src)\n    public DatabaseBuilderParametersImpl setTable(final String tname)\n    public DatabaseBuilderParametersImpl setKeyColumn(final String name)\n    public DatabaseBuilderParametersImpl setValueColumn(final String name)\n    public DatabaseBuilderParametersImpl setConfigurationNameColumn(final String name)\n    public DatabaseBuilderParametersImpl setConfigurationName(final String name)\n    public DatabaseBuilderParametersImpl setAutoCommit(final boolean f)\n",
            "src/main/java/org/apache/commons/configuration2/builder/DefaultParametersManager.java": "    public <T> void registerDefaultsHandler(final Class<T> paramsClass,\n            final DefaultParametersHandler<? super T> handler)\n    public <T> void registerDefaultsHandler(final Class<T> paramsClass,\n            final DefaultParametersHandler<? super T> handler, final Class<?> startClass)\n    public void unregisterDefaultsHandler(final DefaultParametersHandler<?> handler)\n    public void unregisterDefaultsHandler(final DefaultParametersHandler<?> handler,\n            final Class<?> startClass)\n        final Collection<DefaultHandlerData> toRemove =\n        for (final DefaultHandlerData dhd : defaultHandlers)\n    public void initializeParameters(final BuilderParameters params)\n            for (final DefaultHandlerData dhd : defaultHandlers)\n        public DefaultHandlerData(final DefaultParametersHandler<?> h, final Class<?> cls,\n                final Class<?> startCls)\n        public void applyHandlerIfMatching(final BuilderParameters obj)\n                final\n        public boolean isOccurrence(final DefaultParametersHandler<?> h,\n                final Class<?> startCls)\n",
            "src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java": "    public ReloadingDetector createReloadingDetector(final FileHandler handler,\n            final FileBasedBuilderParametersImpl params)\n        final Long refreshDelay = params.getReloadingRefreshDelay();\n        final FileHandlerReloadingDetector fileHandlerReloadingDetector =\n",
            "src/main/java/org/apache/commons/configuration2/builder/EventListenerParameters.java": "            final EventType<T> eventType, final EventListener<? super T> listener)\n            final EventListenerRegistrationData<T> registrationData)\n",
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedBuilderParametersImpl.java": "    public FileBasedBuilderParametersImpl(final FileHandler handler)\n            final Map<String, ?> params)\n            final Map<String, ?> params, final boolean createIfMissing)\n    public static FileBasedBuilderParametersImpl fromMap(final Map<String, ?> map)\n        final FileBasedBuilderParametersImpl params =\n    public void inheritFrom(final Map<String, ?> source)\n        final FileBasedBuilderParametersImpl srcParams = fromParameters(source);\n            final Long reloadingRefreshDelay)\n            final ReloadingDetectorFactory reloadingDetectorFactory)\n    public FileBasedBuilderParametersImpl setFile(final File file)\n    public FileBasedBuilderParametersImpl setURL(final URL url)\n    public FileBasedBuilderParametersImpl setPath(final String path)\n    public FileBasedBuilderParametersImpl setFileName(final String name)\n    public FileBasedBuilderParametersImpl setBasePath(final String path)\n    public FileBasedBuilderParametersImpl setFileSystem(final FileSystem fs)\n            final FileLocationStrategy strategy)\n    public FileBasedBuilderParametersImpl setEncoding(final String enc)\n        final Map<String, Object> params = super.getParameters();\n        final FileBasedBuilderParametersImpl copy =\n",
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedConfigurationBuilder.java": "    public FileBasedConfigurationBuilder(final Class<? extends T> resCls)\n    public FileBasedConfigurationBuilder(final Class<? extends T> resCls,\n            final Map<String, Object> params)\n    public FileBasedConfigurationBuilder(final Class<? extends T> resCls,\n            final Map<String, Object> params, final boolean allowFailOnInit)\n    public static String getDefaultEncoding(final Class<?> configClass)\n        final List<Class<?>> superclasses =\n        for (final Class<?> cls : superclasses)\n        final List<Class<?>> interfaces = ClassUtils.getAllInterfaces(configClass);\n        for (final Class<?> cls : interfaces)\n    public static void setDefaultEncoding(final Class<?> configClass, final String encoding)\n            final BuilderParameters... params)\n            final Map<String, Object> params)\n    public synchronized void setAutoSave(final boolean enabled)\n    protected void initResultInstance(final T obj) throws ConfigurationException\n        final FileHandler srcHandler =\n    protected void initFileHandler(final FileHandler handler)\n    private void initEncoding(final FileHandler handler)\n            final String encoding = getDefaultEncoding(getResultClass());\n        final Map<Class<?>, String> enc = new ConcurrentHashMap<>();\n",
            "src/main/java/org/apache/commons/configuration2/builder/HierarchicalBuilderParametersImpl.java": "    public void inheritFrom(final Map<String, ?> source)\n            final ExpressionEngine engine)\n",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java": "    public void inheritFrom(final Map<String, ?> source)\n    public INIBuilderParametersImpl setSeparatorUsedInOutput(final String separator)\n",
            "src/main/java/org/apache/commons/configuration2/builder/JndiBuilderParametersImpl.java": "    public JndiBuilderParametersImpl setContext(final Context ctx)\n    public JndiBuilderParametersImpl setPrefix(final String p)\n",
            "src/main/java/org/apache/commons/configuration2/builder/PropertiesBuilderParametersImpl.java": "    public PropertiesBuilderParametersImpl setIncludesAllowed(final boolean f)\n    public void inheritFrom(final Map<String, ?> source)\n            final PropertiesConfigurationLayout layout)\n    public PropertiesBuilderParametersImpl setIOFactory(final IOFactory factory)\n",
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingBuilderSupportListener.java": "            final BasicConfigurationBuilder<?> configBuilder,\n            final ReloadingController controller)\n            final BasicConfigurationBuilder<?> configBuilder,\n            final ReloadingController controller)\n        final ReloadingBuilderSupportListener listener =\n    public void onEvent(final Event event)\n",
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingFileBasedConfigurationBuilder.java": "    public ReloadingFileBasedConfigurationBuilder(final Class<? extends T> resCls,\n            final Map<String, Object> params)\n    public ReloadingFileBasedConfigurationBuilder(final Class<? extends T> resCls,\n            final Map<String, Object> params, final boolean allowFailOnInit)\n    public ReloadingFileBasedConfigurationBuilder(final Class<? extends T> resCls)\n            final BuilderParameters... params)\n    protected ReloadingDetector createReloadingDetector(final FileHandler handler,\n            final FileBasedBuilderParametersImpl fbparams)\n    protected void initFileHandler(final FileHandler handler)\n        final ReloadingDetector ctrlDetector = createReloadingDetectorForController();\n        final ReloadingController ctrl = new ReloadingController(ctrlDetector);\n                final ReloadingDetector detector = resultReloadingDetector;\n                final ReloadingDetector detector = resultReloadingDetector;\n            final FileBasedBuilderParametersImpl params)\n        final ReloadingDetectorFactory factory = params.getReloadingDetectorFactory();\n",
            "src/main/java/org/apache/commons/configuration2/builder/XMLBuilderParametersImpl.java": "    public void inheritFrom(final Map<String, ?> source)\n            final DocumentBuilder docBuilder)\n    public XMLBuilderParametersImpl setEntityResolver(final EntityResolver resolver)\n    public XMLBuilderParametersImpl setPublicID(final String pubID)\n    public XMLBuilderParametersImpl setSystemID(final String sysID)\n    public XMLBuilderParametersImpl setValidating(final boolean f)\n    public XMLBuilderParametersImpl setSchemaValidation(final boolean f)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/BaseConfigurationBuilderProvider.java": "    public BaseConfigurationBuilderProvider(final String bldrCls,\n            final String reloadBldrCls, final String configCls, final Collection<String> paramCls)\n            final ConfigurationDeclaration decl) throws ConfigurationException\n            final Collection<BuilderParameters> params = createParameterObjects();\n            final BasicConfigurationBuilder<? extends Configuration> builder =\n        catch (final ConfigurationException cex)\n        catch (final Exception ex)\n    protected boolean isAllowFailOnInit(final ConfigurationDeclaration decl)\n        final Collection<BuilderParameters> params =\n        for (final String paramcls : getParameterClasses())\n    protected void initializeParameterObjects(final ConfigurationDeclaration decl,\n            final Collection<BuilderParameters> params) throws Exception\n        final MultiWrapDynaBean wrapBean = new MultiWrapDynaBean(params);\n            final ConfigurationDeclaration decl, final Collection<BuilderParameters> params)\n        for (final BuilderParameters p : params)\n            final ConfigurationDeclaration decl, final Collection<BuilderParameters> params)\n        final Class<?> bldCls =\n        final Class<?> configCls =\n        final Constructor<?> ctor = bldCls.getConstructor(CTOR_PARAM_TYPES);\n        final\n            final BasicConfigurationBuilder<? extends Configuration> builder,\n            final ConfigurationDeclaration decl, final Collection<BuilderParameters> params)\n    protected String determineBuilderClass(final ConfigurationDeclaration decl)\n    protected String determineConfigurationClass(final ConfigurationDeclaration decl,\n            final Collection<BuilderParameters> params) throws ConfigurationException\n    private static BuilderParameters createParameterObject(final String paramcls)\n        final Class<?> cls = ConfigurationUtils.loadClass(paramcls);\n        final BuilderParameters p = (BuilderParameters) cls.newInstance();\n            final Collection<String> paramCls)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedBuilderParametersImpl.java": "            final Map<String, ?> params)\n            final Map<String, ?> params, final boolean createIfMissing)\n    public void inheritFrom(final Map<String, ?> source)\n        final CombinedBuilderParametersImpl srcParams = fromParameters(source);\n            final boolean inheritSettings)\n            final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> builder)\n    public CombinedBuilderParametersImpl registerProvider(final String tagName,\n            final ConfigurationBuilderProvider provider)\n            final Map<String, ConfigurationBuilderProvider> providers)\n        for (final Map.Entry<String, ConfigurationBuilderProvider> e : providers\n            final CombinedBuilderParametersImpl params)\n    public ConfigurationBuilderProvider providerForTag(final String tagName)\n    public CombinedBuilderParametersImpl setBasePath(final String path)\n            final BuilderParameters params)\n            final DefaultParametersManager manager)\n            final Class<D> paramClass, final DefaultParametersHandler<? super D> handler)\n            final Class<D> paramClass, final DefaultParametersHandler<? super D> handler,\n            final Class<?> startClass)\n        final Map<String, Object> params = super.getParameters();\n        final CombinedBuilderParametersImpl copy =\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilder.java": "    public CombinedConfigurationBuilder(final Map<String, Object> params)\n    public CombinedConfigurationBuilder(final Map<String, Object> params, final boolean allowFailOnInit)\n    public CombinedConfigurationBuilder configure(final BuilderParameters... params)\n            final String name) throws ConfigurationException\n        final ConfigurationBuilder<? extends Configuration> builder =\n            final Map<String, Object> params) throws ConfigurationException\n        final CombinedBuilderParametersImpl cbParams =\n            final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder =\n        final BuilderParameters fileParams =\n            final BuilderParameters builderParams)\n    protected BeanDeclaration createResultDeclaration(final Map<String, Object> params)\n        final BeanDeclaration paramsDecl = super.createResultDeclaration(params);\n        final XMLBeanDeclaration resultDecl =\n    protected void initResultInstance(final CombinedConfiguration result)\n        final HierarchicalConfiguration<?> config = getDefinitionConfiguration();\n        final ConfigurationSourceData data = getSourceData();\n        final boolean createBuilders = data.getChildBuilders().isEmpty();\n        final List<ConfigurationBuilder<? extends Configuration>> overrideBuilders =\n            final CombinedConfiguration addConfig = createAdditionalsConfiguration(result);\n            final List<ConfigurationBuilder<? extends Configuration>> unionBuilders =\n            final CombinedConfiguration resultConfig)\n        final CombinedConfiguration addConfig =\n            final HierarchicalConfiguration<?> defConfig, final Configuration resultConfig)\n        final Map<String, Lookup> lookups = new HashMap<>();\n        final List<? extends HierarchicalConfiguration<?>> nodes =\n        for (final HierarchicalConfiguration<?> config : nodes)\n            final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n            final String key = config.getString(KEY_LOOKUP_KEY);\n            final Lookup lookup = (Lookup) fetchBeanHelper().createBean(decl);\n            final ConfigurationInterpolator defCI = defConfig.getInterpolator();\n    protected FileSystem initFileSystem(final HierarchicalConfiguration<?> config)\n            final XMLBeanDeclaration decl =\n    protected void initSystemProperties(final HierarchicalConfiguration<?> config,\n            final String basePath) throws ConfigurationException\n        final String fileName = config.getString(KEY_SYSTEM_PROPS);\n            catch (final Exception ex)\n    protected void configureEntityResolver(final HierarchicalConfiguration<?> config,\n            final XMLBuilderParametersImpl xmlParams) throws ConfigurationException\n            final XMLBeanDeclaration decl =\n            final EntityResolver resolver =\n            final FileSystem fileSystem = xmlParams.getFileHandler().getFileSystem();\n            final String basePath = xmlParams.getFileHandler().getBasePath();\n            final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n    protected ConfigurationBuilderProvider providerForTag(final String tagName)\n    protected void initChildBuilderParameters(final BuilderParameters params)\n            final BasicConfigurationBuilder<? extends Configuration> dest)\n    void initBean(final Object bean, final BeanDeclaration decl)\n    private void setUpParentInterpolator(final Configuration resultConfig,\n            final Configuration defConfig)\n        final ConfigurationInterpolator defInterpolator = defConfig.getInterpolator();\n            final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder =\n                final\n                final URL url = fileBuilder.getFileHandler().getURL();\n    private void initDefaultChildParameters(final BuilderParameters params)\n    private void initChildBasicParameters(final BasicBuilderParameters params)\n            final FileBasedBuilderProperties<?> params)\n    private void initChildXMLParameters(final XMLBuilderProperties<?> params)\n            final CombinedBuilderParametersImpl params)\n        final ConfigurationSourceData result = new ConfigurationSourceData();\n    private void registerConfiguredProviders(final HierarchicalConfiguration<?> defConfig)\n        final List<? extends HierarchicalConfiguration<?>> nodes =\n        for (final HierarchicalConfiguration<?> config : nodes)\n            final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n            final String key = config.getString(KEY_PROVIDER_KEY);\n            public void onEvent(final ConfigurationBuilderEvent event)\n        final CombinedConfiguration cc = getConfigurationUnderConstruction();\n            final Collection<? extends HierarchicalConfiguration<?>> configs)\n        final Collection<ConfigurationDeclaration> declarations =\n        for (final HierarchicalConfiguration<?> c : configs)\n    private static void initNodeCombinerListNodes(final CombinedConfiguration cc,\n            final HierarchicalConfiguration<?> defConfig, final String key)\n        final List<Object> listNodes = defConfig.getList(key);\n        for (final Object listNode : listNodes)\n        final Map<String, ConfigurationBuilderProvider> providers =\n                final HierarchicalConfiguration<?> config) throws ConfigurationException\n                final CombinedConfiguration ccResult,\n                final List<ConfigurationDeclaration> srcDecl,\n                final List<ConfigurationBuilder<? extends Configuration>> builders)\n            final boolean createBuilders = builders.isEmpty();\n            for (final ConfigurationBuilder<?> b : getChildBuilders())\n                final String name)\n                final ConfigurationDeclaration decl) throws ConfigurationException\n            final ConfigurationBuilderProvider provider =\n            final ConfigurationBuilder<? extends Configuration> builder =\n        private void addChildConfiguration(final CombinedConfiguration ccResult,\n                final ConfigurationDeclaration decl,\n                final ConfigurationBuilder<? extends Configuration> builder)\n            catch (final ConfigurationException cex)\n                public void onEvent(final ConfigurationBuilderEvent event)\n                final HierarchicalConfiguration<?> config)\n            final List<? extends HierarchicalConfiguration<?>> configs =\n            for (final Iterator<? extends HierarchicalConfiguration<?>> it =\n                final String nodeName = it.next().getRootElementName();\n                for (final String element : CONFIG_SECTIONS)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilderProvider.java": "            final ConfigurationDeclaration decl, final Collection<BuilderParameters> params)\n    protected void initializeParameterObjects(final ConfigurationDeclaration decl,\n            final Collection<BuilderParameters> params) throws Exception\n        final BasicBuilderParameters basicParams =\n    private static void setUpBasicParameters(final CombinedConfiguration config,\n            final BasicBuilderParameters params)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ConfigurationDeclaration.java": "    public ConfigurationDeclaration(final CombinedConfigurationBuilder builder,\n            final HierarchicalConfiguration<?> config)\n        final String result =\n    protected boolean isReservedAttributeName(final String name)\n        final Set<String> attributes = getAttributeNames();\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/FileExtensionConfigurationBuilderProvider.java": "    public FileExtensionConfigurationBuilderProvider(final String bldrCls,\n            final String reloadBldrCls, final String matchingConfigCls,\n            final String defConfigClass, final String ext, final Collection<String> paramCls)\n    protected String determineConfigurationClass(final ConfigurationDeclaration decl,\n            final Collection<BuilderParameters> params) throws ConfigurationException\n        final String currentExt = extractExtension(fetchCurrentFileName(params));\n            final Collection<BuilderParameters> params)\n        for (final BuilderParameters p : params)\n                final FileBasedBuilderParametersImpl fp = (FileBasedBuilderParametersImpl) p;\n    private static String extractExtension(final String fileName)\n        final int pos = fileName.lastIndexOf(EXT_SEPARATOR);\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileBuilderParametersImpl.java": "            final Map<String, Object> params)\n            final Map<String, Object> params, final boolean createIfMissing)\n    public MultiFileBuilderParametersImpl setFilePattern(final String p)\n            final BuilderParameters p)\n        final Map<String, Object> params = super.getParameters();\n        final MultiFileBuilderParametersImpl copy =\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilder.java": "                public void onEvent(final ConfigurationBuilderEvent event)\n    public MultiFileConfigurationBuilder(final Class<? extends T> resCls,\n            final Map<String, Object> params, final boolean allowFailOnInit)\n    public MultiFileConfigurationBuilder(final Class<? extends T> resCls,\n            final Map<String, Object> params)\n    public MultiFileConfigurationBuilder(final Class<? extends T> resCls)\n    public MultiFileConfigurationBuilder<T> configure(final BuilderParameters... params)\n        final Map<String, Object> params = getParameters();\n        final MultiFileBuilderParametersImpl multiParams =\n        final String fileName = fetchFileName(multiParams);\n            final FileBasedConfigurationBuilder<T> newBuilder =\n            final EventType<E> eventType, final EventListener<? super E> l)\n            for (final FileBasedConfigurationBuilder<T> b : getManagedBuilders()\n            final EventType<E> eventType, final EventListener<? super E> l)\n        final boolean result = super.removeEventListener(eventType, l);\n            for (final FileBasedConfigurationBuilder<T> b : getManagedBuilders()\n        for (final FileBasedConfigurationBuilder<T> b : getManagedBuilders().values())\n        final InterpolatorSpecification spec =\n            final MultiFileBuilderParametersImpl multiParams)\n        final ConfigurationInterpolator ci = getInterpolator();\n            final String fileName, final Map<String, Object> params)\n            final String fileName, final Map<String, Object> params)\n        final FileBasedConfigurationBuilder<T> managedBuilder =\n    private void initListeners(final FileBasedConfigurationBuilder<T> newBuilder)\n    private String fetchFileName(final MultiFileBuilderParametersImpl multiParams)\n        final Boolean reentrant = inInterpolation.get();\n    private void handleManagedBuilderEvent(final ConfigurationBuilderEvent event)\n            final ConfigurationBuilderEvent event)\n        final\n            final Map<String, Object> params,\n            final MultiFileBuilderParametersImpl multiParams)\n        final Map<String, Object> newParams = new HashMap<>(params);\n        final BuilderParameters managedBuilderParameters =\n            final BuilderParameters copy =\n    private static boolean isEventTypeForManagedBuilders(final EventType<?> eventType)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilderProvider.java": "    public MultiFileConfigurationBuilderProvider(final String configCls,\n            final String paramCls)\n            final ConfigurationDeclaration decl) throws ConfigurationException\n        final ConfigurationBuilder<? extends Configuration> multiBuilder =\n        final Configuration wrapConfig = createWrapperConfiguration(multiBuilder);\n            final ConfigurationBuilder builder)\n        final Class<?> configClass =\n        final Class ifcClass =\n            final ConfigurationBuilder<? extends Configuration> multiBuilder,\n            final Configuration wrapConfig)\n        public WrapperBuilder(final Configuration conf,\n                final ConfigurationBuilder<? extends Configuration> bldr)\n                final EventType<T> eventType, final EventListener<? super T> listener)\n                final EventType<T> eventType, final EventListener<? super T> listener)\n        public ReloadableWrapperBuilder(final Configuration conf,\n                final ConfigurationBuilder<? extends Configuration> bldr)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaBean.java": "    public MultiWrapDynaBean(final Collection<?> beans)\n        final Collection<DynaClass> beanClasses =\n        for (final Object bean : beans)\n            final DynaBean dynaBean = createDynaBean(bean);\n            final DynaClass beanClass = dynaBean.getDynaClass();\n            for (final DynaProperty prop : beanClass.getDynaProperties())\n    public boolean contains(final String name, final String key)\n    public Object get(final String name)\n    public Object get(final String name, final int index)\n    public Object get(final String name, final String key)\n    public void remove(final String name, final String key)\n    public void set(final String name, final Object value)\n    public void set(final String name, final int index, final Object value)\n    public void set(final String name, final String key, final Object value)\n    private DynaBean fetchBean(final String property)\n    private static DynaBean createDynaBean(final Object bean)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaClass.java": "    public MultiWrapDynaClass(final Collection<? extends DynaClass> wrappedCls)\n    public DynaProperty getDynaProperty(final String name)\n    private void initProperties(final Collection<? extends DynaClass> wrappedCls)\n        for (final DynaClass cls : wrappedCls)\n            final DynaProperty[] props = cls.getDynaProperties();\n            for (final DynaProperty p : props)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java": "    public ReloadingCombinedConfigurationBuilder(final Map<String, Object> params,\n            final boolean allowFailOnInit)\n    public ReloadingCombinedConfigurationBuilder(final Map<String, Object> params)\n    public ReloadingCombinedConfigurationBuilder configure(final BuilderParameters... params)\n        final CombinedConfiguration result = super.getConfiguration();\n            final BuilderParameters builderParams)\n    protected void initResultInstance(final CombinedConfiguration result)\n        final Collection<ReloadingController> subControllers =\n        final ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder =\n        for (final ConfigurationBuilder<? extends Configuration> b : getChildBuilders())\n        final CombinedReloadingController ctrl =\n            final Collection<ReloadingController> subControllers, final Object builder)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingMultiFileConfigurationBuilder.java": "    public ReloadingMultiFileConfigurationBuilder(final Class<T> resCls,\n            final Map<String, Object> params, final boolean allowFailOnInit)\n    public ReloadingMultiFileConfigurationBuilder(final Class<T> resCls,\n            final Map<String, Object> params)\n    public ReloadingMultiFileConfigurationBuilder(final Class<T> resCls)\n            final String fileName, final Map<String, Object> params)\n        final Set<ReloadingController> empty = Collections.emptySet();\n                final Collection<FileBasedConfigurationBuilder<T>> builders =\n                final Collection<ReloadingController> controllers =\n                for (final FileBasedConfigurationBuilder<T> b : builders)\n",
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Configurations.java": "    public Configurations(final Parameters params)\n            final Class<T> configClass, final File file)\n            final Class<T> configClass, final URL url)\n            final Class<T> configClass, final String path)\n    public <T extends FileBasedConfiguration> T fileBased(final Class<T> configClass,\n            final File file) throws ConfigurationException\n    public <T extends FileBasedConfiguration> T fileBased(final Class<T> configClass,\n            final URL url) throws ConfigurationException\n    public <T extends FileBasedConfiguration> T fileBased(final Class<T> configClass,\n            final String path) throws ConfigurationException\n            final File file)\n            final URL url)\n            final String path)\n    public PropertiesConfiguration properties(final File file)\n    public PropertiesConfiguration properties(final URL url)\n    public PropertiesConfiguration properties(final String path)\n    public FileBasedConfigurationBuilder<XMLConfiguration> xmlBuilder(final File file)\n    public FileBasedConfigurationBuilder<XMLConfiguration> xmlBuilder(final URL url)\n            final String path)\n    public XMLConfiguration xml(final File file) throws ConfigurationException\n    public XMLConfiguration xml(final URL url) throws ConfigurationException\n    public XMLConfiguration xml(final String path) throws ConfigurationException\n    public FileBasedConfigurationBuilder<INIConfiguration> iniBuilder(final File file)\n    public FileBasedConfigurationBuilder<INIConfiguration> iniBuilder(final URL url)\n            final String path)\n    public INIConfiguration ini(final File file) throws ConfigurationException\n    public INIConfiguration ini(final URL url) throws ConfigurationException\n    public INIConfiguration ini(final String path) throws ConfigurationException\n    public CombinedConfigurationBuilder combinedBuilder(final File file)\n    public CombinedConfigurationBuilder combinedBuilder(final URL url)\n    public CombinedConfigurationBuilder combinedBuilder(final String path)\n    public CombinedConfiguration combined(final File file)\n    public CombinedConfiguration combined(final URL url)\n    public CombinedConfiguration combined(final String path)\n            final Class<T> configClass, final FileBasedBuilderParameters params)\n    private FileBasedBuilderParameters fileParams(final File file)\n    private FileBasedBuilderParameters fileParams(final URL url)\n    private FileBasedBuilderParameters fileParams(final String path)\n",
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Parameters.java": "    public Parameters(final DefaultParametersManager manager)\n    public <T> void registerDefaultsHandler(final Class<T> paramsClass,\n            final DefaultParametersHandler<? super T> handler)\n    public <T> void registerDefaultsHandler(final Class<T> paramsClass,\n            final DefaultParametersHandler<? super T> handler, final Class<?> startClass)\n    private <T> T createParametersProxy(final Object target, final Class<T> ifcClass,\n            final Class<?>... superIfcs)\n        final Class<?>[] ifcClasses = new Class<?>[1 + superIfcs.length];\n        final Object obj =\n        public ParametersIfcInvocationHandler(final Object targetObj)\n        public Object invoke(final Object proxy, final Method method, final Object[] args)\n            final Object result = method.invoke(target, args);\n        private static boolean isFluentResult(final Method method)\n            final Class<?> declaringClass = method.getDeclaringClass();\n",
            "src/main/java/org/apache/commons/configuration2/convert/AbstractListDelimiterHandler.java": "    public Iterable<?> parse(final Object value)\n    public Collection<String> split(final String s, final boolean trim)\n    public Object escape(final Object value, final ValueTransformer transformer)\n        final Object escValue =\n    Collection<?> flatten(final Object value, final int limit)\n        final Collection<Object> result = new LinkedList<>();\n    private Collection<?> flatten(final Object value)\n    private void flattenIterator(final Collection<Object> target, final Iterator<?> it, final int limit)\n",
            "src/main/java/org/apache/commons/configuration2/convert/DefaultConversionHandler.java": "                public Object interpolate(final Object value)\n        final String fmt = dateFormat;\n    public void setDateFormat(final String dateFormat)\n    public <T> T to(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci)\n        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n    public Object toArray(final Object src, final Class<?> elemClass,\n            final ConfigurationInterpolator ci)\n        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n    public <T> void toCollection(final Object src, final Class<T> elemClass,\n            final ConfigurationInterpolator ci, final Collection<T> dest)\n            final ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n    protected boolean isComplexObject(final Object src)\n    protected boolean isEmptyElement(final Object src)\n    protected <T> T convert(final Object src, final Class<T> targetCls,\n            final ConfigurationInterpolator ci)\n        final Object conversionSrc =\n    protected Collection<?> extractValues(final Object source, final int limit)\n    protected Collection<?> extractValues(final Object source)\n    protected Object extractConversionValue(final Object container,\n            final Class<?> targetCls, final ConfigurationInterpolator ci)\n        final Collection<?> values = extractValues(container, 1);\n    protected <T> T convertValue(final Object src, final Class<T> targetCls,\n            final ConfigurationInterpolator ci)\n        final\n    private <T> T[] toObjectArray(final Object src, final Class<T> elemClass,\n            final ConfigurationInterpolator ci)\n        final Collection<T> convertedCol = new LinkedList<>();\n        final\n    private Object toPrimitiveArray(final Object src, final Class<?> elemClass,\n            final ConfigurationInterpolator ci)\n                final int length = Array.getLength(src);\n                final Object array = Array.newInstance(elemClass, length);\n        final Collection<?> values = extractValues(src);\n        final Class<?> targetClass = ClassUtils.primitiveToWrapper(elemClass);\n        final Object array = Array.newInstance(elemClass, values.size());\n        for (final Object value : values)\n    private <T> void convertToCollection(final Object src, final Class<T> elemClass,\n            final ConfigurationInterpolator ci, final Collection<T> dest)\n        for (final Object o : extractValues(ci.interpolate(src)))\n            final ConfigurationInterpolator ci)\n",
            "src/main/java/org/apache/commons/configuration2/convert/DefaultListDelimiterHandler.java": "    public DefaultListDelimiterHandler(final char listDelimiter)\n    public Object escapeList(final List<?> values, final ValueTransformer transformer)\n        final Object[] escapedValues = new String[values.size()];\n        for (final Object v : values)\n    protected String escapeString(final String s)\n        final StringBuilder buf = new StringBuilder(s.length() + BUF_SIZE);\n            final char c = s.charAt(i);\n    protected Collection<String> splitString(final String s, final boolean trim)\n        final List<String> list = new LinkedList<>();\n            final char c = s.charAt(i);\n",
            "src/main/java/org/apache/commons/configuration2/convert/DisabledListDelimiterHandler.java": "    public Object escapeList(final List<?> values, final ValueTransformer transformer)\n    protected Collection<String> splitString(final String s, final boolean trim)\n        final Collection<String> result = new ArrayList<>(1);\n    protected String escapeString(final String s)\n",
            "src/main/java/org/apache/commons/configuration2/convert/LegacyListDelimiterHandler.java": "    public LegacyListDelimiterHandler(final char listDelimiter)\n    public Object escape(final Object value, final ValueTransformer transformer)\n    public Object escapeList(final List<?> values, final ValueTransformer transformer)\n            final Iterator<?> it = values.iterator();\n            final StringBuilder buf = new StringBuilder(lastValue);\n    protected Collection<String> splitString(final String s, final boolean trim)\n        final List<String> list = new ArrayList<>();\n        final char esc = ESCAPE.charAt(0);\n            final char c = s.charAt(begin);\n    protected String escapeString(final String s)\n    protected String escapeBackslashs(final Object value, final boolean inList)\n    protected String escapeValue(final Object value, final boolean inList,\n            final ValueTransformer transformer)\n    private static int countTrailingBS(final String line)\n",
            "src/main/java/org/apache/commons/configuration2/convert/ListDelimiterHandler.java": "        public Object transformValue(final Object value)\n",
            "src/main/java/org/apache/commons/configuration2/convert/PropertyConverter.java": "    public static Object to(final Class<?> cls, final Object value,\n            final DefaultConversionHandler convHandler) throws ConversionException\n    public static Boolean toBoolean(final Object value) throws ConversionException\n            final Boolean b = BooleanUtils.toBooleanObject((String) value);\n    public static Character toCharacter(final Object value) throws ConversionException\n        final String strValue = String.valueOf(value);\n    public static Byte toByte(final Object value) throws ConversionException\n        final Number n = toNumber(value, Byte.class);\n    public static Short toShort(final Object value) throws ConversionException\n        final Number n = toNumber(value, Short.class);\n    public static Integer toInteger(final Object value) throws ConversionException\n        final Number n = toNumber(value, Integer.class);\n    public static Long toLong(final Object value) throws ConversionException\n        final Number n = toNumber(value, Long.class);\n    public static Float toFloat(final Object value) throws ConversionException\n        final Number n = toNumber(value, Float.class);\n    public static Double toDouble(final Object value) throws ConversionException\n        final Number n = toNumber(value, Double.class);\n    public static BigInteger toBigInteger(final Object value) throws ConversionException\n        final Number n = toNumber(value, BigInteger.class);\n    public static BigDecimal toBigDecimal(final Object value) throws ConversionException\n        final Number n = toNumber(value, BigDecimal.class);\n    static Number toNumber(final Object value, final Class<?> targetClass) throws ConversionException\n        final String str = value.toString();\n            catch (final NumberFormatException nex)\n            catch (final NumberFormatException nex)\n            final Constructor<?> constr = targetClass.getConstructor(CONSTR_ARGS);\n        catch (final InvocationTargetException itex)\n        catch (final Exception ex)\n    public static File toFile(final Object value) throws ConversionException\n    public static Path toPath(final Object value) throws ConversionException\n    public static URI toURI(final Object value) throws ConversionException\n            catch (final URISyntaxException e)\n    public static URL toURL(final Object value) throws ConversionException\n            catch (final MalformedURLException e)\n    public static Pattern toPattern(final Object value) throws ConversionException\n            catch (final PatternSyntaxException e)\n    public static Locale toLocale(final Object value) throws ConversionException\n            final String[] elements = ((String) value).split(\"_\");\n            final int size = elements.length;\n                final String language = elements[0];\n                final String country = (size >= 2) ? elements[1] : \"\";\n                final String variant = (size >= 3) ? elements[2] : \"\";\n    public static Color toColor(final Object value) throws ConversionException\n            final int[] components = new int[3];\n            final int minlength = components.length * 2;\n            catch (final Exception e)\n    static InetAddress toInetAddress(final Object value) throws ConversionException\n            catch (final UnknownHostException e)\n    static Object toInternetAddress(final Object value) throws ConversionException\n                final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME)\n            catch (final Exception e)\n    static boolean isEnum(final Class<?> cls)\n    static <E extends Enum<E>> E toEnum(final Object value, final Class<E> cls) throws ConversionException\n            catch (final Exception e)\n                final E[] enumConstants = cls.getEnumConstants();\n            catch (final Exception e)\n    public static Date toDate(final Object value, final String format) throws ConversionException\n            catch (final ParseException e)\n    public static Calendar toCalendar(final Object value, final String format) throws ConversionException\n            final Calendar calendar = Calendar.getInstance();\n                final Calendar calendar = Calendar.getInstance();\n            catch (final ParseException e)\n    private static Object convertToEnum(final Class<?> enumClass, final Object value)\n",
            "src/main/java/org/apache/commons/configuration2/event/BaseEventSource.java": "            final EventType<T> eventType)\n        final List<EventListener<? super T>> result =\n        for (final EventListener<? super T> l : eventListeners\n    public void setDetailEvents(final boolean enable)\n    public <T extends Event> void addEventListener(final EventType<T> eventType,\n            final EventListener<? super T> listener)\n            final EventType<T> eventType, final EventListener<? super T> listener)\n        for (final EventListenerRegistrationData<? extends ConfigurationErrorEvent> reg : eventListeners\n    public void copyEventListeners(final BaseEventSource source)\n    protected <T extends ConfigurationEvent> void fireEvent(final EventType<T> type,\n            final String propName, final Object propValue, final boolean before)\n            final EventListenerList.EventListenerIterator<T> it =\n                final ConfigurationEvent event =\n            final EventType<T> type, final String propName, final Object propValue, final boolean before)\n            final EventType<T> eventType, final EventType<?> operationType,\n            final String propertyName, final Object propertyValue, final Throwable cause)\n        final EventListenerList.EventListenerIterator<T> iterator =\n            final ConfigurationErrorEvent event =\n            final EventType<? extends ConfigurationErrorEvent> type,\n            final EventType<?> opType, final String propName, final Object propValue, final Throwable ex)\n        final BaseEventSource copy = (BaseEventSource) super.clone();\n    private boolean checkDetailEvents(final int limit)\n",
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationErrorEvent.java": "    public ConfigurationErrorEvent(final Object source,\n            final EventType<? extends ConfigurationErrorEvent> eventType,\n            final EventType<?> operationType, final String propName, final Object propValue,\n            final Throwable cause)\n",
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationEvent.java": "    public ConfigurationEvent(final Object source,\n            final EventType<? extends ConfigurationEvent> type, final String propertyName,\n            final Object propertyValue, final boolean beforeUpdate)\n",
            "src/main/java/org/apache/commons/configuration2/event/Event.java": "    public Event(final Object source, final EventType<? extends Event> evType)\n        final StringBuilder buf = new StringBuilder(BUF_SIZE);\n    protected void appendPropertyRepresentation(final StringBuilder buf,\n            final String property, final Object value)\n",
            "src/main/java/org/apache/commons/configuration2/event/EventListenerList.java": "    public <T extends Event> void addEventListener(final EventType<T> type,\n            final EventListener<? super T> listener)\n            final EventListenerRegistrationData<T> regData)\n            final EventType<T> eventType, final EventListener<? super T> listener)\n            final EventListenerRegistrationData<T> regData)\n    public void fire(final Event event)\n        for (final EventListenerIterator<? extends Event> iterator =\n            final EventType<T> eventType)\n            final EventType<T> eventType)\n        final Map<EventType<?>, Set<EventType<?>>> superTypes =\n        final List<EventListenerRegistrationData<? extends T>> results =\n        for (final EventListenerRegistrationData<?> reg : listeners)\n                final\n    public void addAll(final EventListenerList c)\n        for (final EventListenerRegistrationData<?> regData : c.getRegistrations())\n    private static void callListener(final EventListener<?> listener, final Event event)\n        final\n                final Iterator<EventListenerRegistrationData<?>> it, final EventType<T> base)\n            final EventListener<? super T> result = nextElement;\n        public void invokeNext(final Event event)\n                final EventListenerRegistrationData<?> regData =\n        private void validateEvent(final Event event)\n        private void invokeNextListenerUnchecked(final Event event)\n            final EventListener<? super T> listener = next();\n                final EventListenerRegistrationData<?> regData)\n            final\n",
            "src/main/java/org/apache/commons/configuration2/event/EventListenerRegistrationData.java": "    public EventListenerRegistrationData(final EventType<T> type,\n            final EventListener<? super T> lstnr)\n    public boolean equals(final Object obj)\n        final EventListenerRegistrationData<?> c =\n",
            "src/main/java/org/apache/commons/configuration2/event/EventType.java": "    public EventType(final EventType<? super T> superEventType, final String typeName)\n    public static Set<EventType<?>> fetchSuperEventTypes(final EventType<?> eventType)\n        final Set<EventType<?>> types = new HashSet<>();\n    public static boolean isInstanceOf(final EventType<?> derivedType,\n            final EventType<?> baseType)\n",
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationException.java": "    public ConfigurationException(final String message)\n    public ConfigurationException(final Throwable cause)\n    public ConfigurationException(final String message, final Throwable cause)\n",
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationRuntimeException.java": "    public ConfigurationRuntimeException(final String message)\n    public ConfigurationRuntimeException(final String message, final Object... args)\n    public ConfigurationRuntimeException(final Throwable cause)\n    public ConfigurationRuntimeException(final String message, final Throwable cause)\n",
            "src/main/java/org/apache/commons/configuration2/ex/ConversionException.java": "    public ConversionException(final String message)\n    public ConversionException(final Throwable cause)\n    public ConversionException(final String message, final Throwable cause)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": "            final InterpolatorSpecification spec)\n    public void registerLookup(final String prefix, final Lookup lookup)\n    public void registerLookups(final Map<String, ? extends Lookup> lookups)\n    public boolean deregisterLookup(final String prefix)\n    public void addDefaultLookup(final Lookup defaultLookup)\n    public void addDefaultLookups(final Collection<? extends Lookup> lookups)\n    public boolean removeDefaultLookup(final Lookup lookup)\n            final ConfigurationInterpolator parentInterpolator)\n    public void setEnableSubstitutionInVariables(final boolean f)\n    public Object interpolate(final Object value)\n            final String strValue = (String) value;\n                final Object resolvedValue = resolveSingleVariable(strValue);\n    public Object resolve(final String var)\n        final int prefixPos = var.indexOf(PREFIX_SEPARATOR);\n            final String prefix = var.substring(0, prefixPos);\n            final String name = var.substring(prefixPos + 1);\n            final Object value = fetchLookupForPrefix(prefix).lookup(name);\n        for (final Lookup lookup : defaultLookups)\n            final Object value = lookup.lookup(var);\n        final ConfigurationInterpolator parent = getParentInterpolator();\n    protected Lookup fetchLookupForPrefix(final String prefix)\n            public String lookup(final String key)\n                final Object result = resolve(key);\n    private Object resolveSingleVariable(final String strValue)\n    private static boolean looksLikeSingleVariable(final String strValue)\n    private static String extractVariableName(final String strValue)\n            final InterpolatorSpecification spec)\n        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n        final Map<String, Lookup> lookups = new HashMap<>();\n        for (final DefaultLookups l : DefaultLookups.values())\n",
            "src/main/java/org/apache/commons/configuration2/interpol/ConstantLookup.java": "    public Object lookup(final String var)\n        final int fieldPos = var.lastIndexOf(FIELD_SEPRATOR);\n            final Object value = resolveField(var.substring(0, fieldPos), var\n        catch (final Exception ex)\n    protected Object resolveField(final String className, final String fieldName)\n        final Class<?> clazz = fetchClass(className);\n        final Field field = clazz.getField(fieldName);\n    protected Class<?> fetchClass(final String className) throws ClassNotFoundException\n",
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java": "    private DefaultLookups(final String prfx, final Lookup look)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/DummyLookup.java": "    public Object lookup(final String variable)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/EnvironmentLookup.java": "    public String lookup(final String key)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/ExprLookup.java": "    public ExprLookup(final Variables list)\n    public ExprLookup(final Variables list, final String prefix, final String suffix)\n    public void setVariablePrefixMatcher(final String prefix)\n    public void setVariableSuffixMatcher(final String suffix)\n    public void setVariables(final Variables list)\n    public void setLogger(final ConfigurationLogger logger)\n    public void setInterpolator(final ConfigurationInterpolator interpolator)\n    public String lookup(final String var)\n            final Expression exp = engine.createExpression(result);\n            final Object exprResult = exp.evaluate(createContext());\n        catch (final Exception e)\n            final ConfigurationLogger l = getLogger();\n            final StringLookup variableResolver = new StringLookup()\n                public String lookup(final String key)\n                    final Object value = ip.resolve(key);\n        final JexlContext ctx = new MapContext();\n    private void initializeContext(final JexlContext ctx)\n        for (final Variable var : variables)\n        public Variables(final Variables vars)\n        public Variable(final String name, final Object value)\n        public void setName(final String name)\n        public void setValue(final Object value) throws ConfigurationRuntimeException\n                final String val = (String) value;\n                final String name = StringUtils.removeStartIgnoreCase(val, CLASS);\n                final Class<?> clazz = ClassUtils.getClass(name);\n            catch (final Exception e)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/InterpolatorSpecification.java": "    private InterpolatorSpecification(final Builder builder)\n        public Builder withPrefixLookup(final String prefix, final Lookup lookup)\n        public Builder withPrefixLookups(final Map<String, ? extends Lookup> lookups)\n                for (final Map.Entry<String, ? extends Lookup> e : lookups.entrySet())\n        public Builder withDefaultLookup(final Lookup lookup)\n        public Builder withDefaultLookups(final Collection<? extends Lookup> lookups)\n                for (final Lookup l : lookups)\n        public Builder withInterpolator(final ConfigurationInterpolator ci)\n        public Builder withParentInterpolator(final ConfigurationInterpolator parent)\n            final InterpolatorSpecification spec =\n        private static void checkLookup(final Lookup lookup)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/SystemPropertiesLookup.java": "    public Object lookup(final String variable)\n",
            "src/main/java/org/apache/commons/configuration2/io/AbsoluteNameLocationStrategy.java": "    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n            final File file = new File(locator.getFileName());\n",
            "src/main/java/org/apache/commons/configuration2/io/BasePathLocationStrategy.java": "    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n            final File file =\n",
            "src/main/java/org/apache/commons/configuration2/io/ClasspathLocationStrategy.java": "    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n",
            "src/main/java/org/apache/commons/configuration2/io/CombinedLocationStrategy.java": "            final Collection<? extends FileLocationStrategy> subs)\n    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n        for (final FileLocationStrategy sub : getSubStrategies())\n            final URL url = sub.locate(fileSystem, locator);\n",
            "src/main/java/org/apache/commons/configuration2/io/ConfigurationLogger.java": "    public ConfigurationLogger(final String loggerName)\n    public ConfigurationLogger(final Class<?> logCls)\n    ConfigurationLogger(final Log wrapped)\n    public void debug(final String msg)\n    public void info(final String msg)\n    public void warn(final String msg)\n    public void warn(final String msg, final Throwable ex)\n    public void error(final String msg)\n    public void error(final String msg, final Throwable ex)\n    private static Log createLoggerForName(final String name)\n    private static Log createLoggerForClass(final Class<?> cls)\n",
            "src/main/java/org/apache/commons/configuration2/io/DefaultFileSystem.java": "    public InputStream getInputStream(final URL url) throws ConfigurationException\n        final File file = FileLocatorUtils.fileFromURL(url);\n        catch (final Exception e)\n    public OutputStream getOutputStream(final URL url) throws ConfigurationException\n        final File file = FileLocatorUtils.fileFromURL(url);\n            final URLConnection connection = url.openConnection();\n                final HttpURLConnection conn = (HttpURLConnection) connection;\n        catch (final IOException e)\n    public OutputStream getOutputStream(final File file) throws ConfigurationException\n        catch (final FileNotFoundException e)\n    public String getPath(final File file, final URL url, final String basePath, final String fileName)\n                catch (final Exception e)\n    public String getBasePath(final String path)\n        catch (final Exception e)\n    public String getFileName(final String path)\n        catch (final Exception e)\n    public URL getURL(final String basePath, final String file) throws MalformedURLException\n        final File f = new File(file);\n            final URL base = new URL(basePath);\n        catch (final MalformedURLException uex)\n    public URL locateFromURL(final String basePath, final String fileName)\n            final URL baseURL = new URL(basePath);\n        catch (final IOException e)\n    private void createPath(final File file) throws ConfigurationException\n                final File parent = file.getParentFile();\n        public HttpOutputStream(final OutputStream stream, final HttpURLConnection connection)\n        public void write(final byte[] bytes) throws IOException\n        public void write(final byte[] bytes, final int i, final int i1) throws IOException\n        public void write(final int i) throws IOException\n",
            "src/main/java/org/apache/commons/configuration2/io/FileHandler.java": "                public void unlock(final LockMode mode)\n                public void setSynchronizer(final Synchronizer sync)\n                public void lock(final LockMode mode)\n    public FileHandler(final FileBased obj)\n    public FileHandler(final FileBased obj, final FileHandler c)\n    private FileHandler(final FileBased obj, final FileLocator locator)\n    public static FileHandler fromMap(final Map<String, ?> map)\n    public void addFileHandlerListener(final FileHandlerListener l)\n    public void removeFileHandlerListener(final FileHandlerListener l)\n        final FileLocator locator = getFileLocator();\n    public void setFileName(final String fileName)\n            protected void updateBuilder(final FileLocatorBuilder builder)\n        final FileLocator locator = getFileLocator();\n    public void setBasePath(final String basePath)\n            protected void updateBuilder(final FileLocatorBuilder builder)\n    public void setFile(final File file)\n            protected void updateBuilder(final FileLocatorBuilder builder)\n        final FileLocator locator = getFileLocator();\n        final File file = createFile(locator);\n    public void setPath(final String path)\n        final FileLocator locator = getFileLocator();\n            protected void updateBuilder(final FileLocatorBuilder builder)\n    public void setFileLocator(final FileLocator locator)\n            protected void updateBuilder(final FileLocatorBuilder builder)\n            protected void updateBuilder(final FileLocatorBuilder builder)\n            protected void updateBuilder(final FileLocatorBuilder builder)\n            protected void updateBuilder(final FileLocatorBuilder builder)\n            final FileLocator locator = getFileLocator();\n    public void load(final String fileName) throws ConfigurationException\n    public void load(final File file) throws ConfigurationException\n        catch (final MalformedURLException e1)\n    public void load(final URL url) throws ConfigurationException\n    public void load(final InputStream in) throws ConfigurationException\n    public void load(final InputStream in, final String encoding)\n    public void load(final Reader in) throws ConfigurationException\n    public void save(final String fileName) throws ConfigurationException\n    public void save(final URL url) throws ConfigurationException\n    public void save(final File file) throws ConfigurationException\n    public void save(final OutputStream out) throws ConfigurationException\n    public void save(final OutputStream out, final String encoding)\n    public void save(final Writer out) throws ConfigurationException\n            final FileLocator locator = prepareNullLocatorBuilder().create();\n    private void injectFileLocator(final URL url)\n                final FileLocator locator =\n    private void load(final FileLocator locator) throws ConfigurationException\n        final URL url = FileLocatorUtils.locateOrThrow(locator);\n    private void load(final URL url, final FileLocator locator) throws ConfigurationException\n        catch (final ConfigurationException e)\n        catch (final Exception e)\n    private void load(final String fileName, final FileLocator locator)\n        final FileLocator locFileName = createLocatorWithFileName(fileName, locator);\n        final URL url = FileLocatorUtils.locateOrThrow(locFileName);\n    private void load(final InputStream in, final FileLocator locator)\n    private void loadFromStream(final InputStream in, final String encoding, final URL url)\n        final SynchronizerSupport syncSupport = fetchSynchronizerSupport();\n    private void loadFromStreamDirectly(final InputStream in)\n        catch (final IOException e)\n    private void loadFromTransformedStream(final InputStream in, final String encoding)\n            catch (final UnsupportedEncodingException e)\n    private void loadFromReader(final Reader in) throws ConfigurationException\n        catch (final IOException ioex)\n    private void save(final FileLocator locator) throws ConfigurationException\n    private void save(final String fileName, final FileLocator locator)\n        catch (final MalformedURLException e)\n    private void save(final URL url, final FileLocator locator) throws ConfigurationException\n                catch (final IOException e)\n    private void save(final File file, final FileLocator locator) throws ConfigurationException\n        catch (final MalformedURLException muex)\n    private void save(final OutputStream out, final FileLocator locator)\n    private void saveToStream(final OutputStream out, final String encoding, final URL url)\n        final SynchronizerSupport syncSupport = fetchSynchronizerSupport();\n                catch (final UnsupportedEncodingException e)\n    private void saveToWriter(final Writer out) throws ConfigurationException\n        catch (final IOException ioex)\n    private FileLocator createLocatorWithFileName(final String fileName,\n            final FileLocator locator)\n        for (final FileHandlerListener l : listeners)\n        for (final FileHandlerListener l : listeners)\n        for (final FileHandlerListener l : listeners)\n        for (final FileHandlerListener l : listeners)\n        for (final FileHandlerListener l : listeners)\n    private static void closeSilent(final Closeable cl)\n        catch (final IOException e)\n    private static File createFile(final FileLocator loc)\n    private static FileHandler checkSourceHandler(final FileHandler c)\n                final FileLocator oldLocator = fileLocator.get();\n                final FileLocatorBuilder builder =\n",
            "src/main/java/org/apache/commons/configuration2/io/FileHandlerListenerAdapter.java": "    public void loading(final FileHandler handler)\n    public void loaded(final FileHandler handler)\n    public void saving(final FileHandler handler)\n    public void saved(final FileHandler handler)\n    public void locationChanged(final FileHandler handler)\n",
            "src/main/java/org/apache/commons/configuration2/io/FileLocator.java": "    public FileLocator(final FileLocatorBuilder builder)\n    public boolean equals(final Object obj)\n        final FileLocator c = (FileLocator) obj;\n        FileLocatorBuilder(final FileLocator src)\n        public FileLocatorBuilder encoding(final String enc)\n        public FileLocatorBuilder fileSystem(final FileSystem fs)\n        public FileLocatorBuilder basePath(final String path)\n        public FileLocatorBuilder fileName(final String name)\n        public FileLocatorBuilder sourceURL(final URL url)\n        public FileLocatorBuilder locationStrategy(final FileLocationStrategy strategy)\n        private void initBuilder(final FileLocator src)\n",
            "src/main/java/org/apache/commons/configuration2/io/FileLocatorUtils.java": "    public static File fileFromURL(final URL url)\n    public static FileLocator.FileLocatorBuilder fileLocator(final FileLocator src)\n    public static FileLocator fromMap(final Map<String, ?> map)\n        final FileLocator.FileLocatorBuilder builder = fileLocator();\n    public static void put(final FileLocator locator, final Map<String, Object> map)\n    public static boolean isLocationDefined(final FileLocator locator)\n    public static boolean isFullyInitialized(final FileLocator locator)\n    public static FileLocator fullyInitializedLocator(final FileLocator locator)\n        final URL url = locate(locator);\n    public static URL locate(final FileLocator locator)\n    public static URL locateOrThrow(final FileLocator locator)\n        final URL url = locate(locator);\n    static String getBasePath(final URL url)\n    static String getFileName(final URL url)\n        final String path = url.getPath();\n    static File getFile(final String basePath, final String fileName)\n        final File f = new File(fileName);\n        catch (final MalformedURLException mex1)\n            catch (final MalformedURLException mex2)\n    static URL toURL(final File file) throws MalformedURLException\n    static URL convertURIToURL(final URI uri)\n        catch (final MalformedURLException e)\n    static URL convertFileToURL(final File file)\n    static URL locateFromClasspath(final String resourceName)\n        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n    static File constructFile(final String basePath, final String fileName)\n        final File absolute = new File(fileName);\n    static String appendPath(final String path, final String ext)\n        final StringBuilder fName = new StringBuilder();\n    static FileSystem obtainFileSystem(final FileLocator locator)\n    static FileLocationStrategy obtainLocationStrategy(final FileLocator locator)\n    private static FileLocator createFullyInitializedLocatorFromURL(final FileLocator src,\n            final URL url)\n        final FileLocator.FileLocatorBuilder fileLocatorBuilder = fileLocator(src);\n        final FileLocationStrategy[] subStrategies =\n",
            "src/main/java/org/apache/commons/configuration2/io/FileSystem.java": "        final ConfigurationLogger result = log;\n    public void setLogger(final ConfigurationLogger log)\n    public void setFileOptionsProvider(final FileOptionsProvider provider)\n",
            "src/main/java/org/apache/commons/configuration2/io/FileSystemLocationStrategy.java": "    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n",
            "src/main/java/org/apache/commons/configuration2/io/HomeDirectoryLocationStrategy.java": "    public HomeDirectoryLocationStrategy(final String homeDir, final boolean withBasePath)\n    public HomeDirectoryLocationStrategy(final boolean withBasePath)\n    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n            final String basePath = fetchBasePath(locator);\n            final File file =\n    private String fetchBasePath(final FileLocator locator)\n    private static String fetchHomeDirectory(final String homeDir)\n",
            "src/main/java/org/apache/commons/configuration2/io/ProvidedURLLocationStrategy.java": "    public URL locate(final FileSystem fileSystem, final FileLocator locator)\n",
            "src/main/java/org/apache/commons/configuration2/io/VFSFileSystem.java": "    public InputStream getInputStream(final URL url) throws ConfigurationException\n            final FileSystemOptions opts = getOptions(url.getProtocol());\n            final FileContent content = file.getContent();\n                final String msg = \"Cannot access content of \" + file.getName().getFriendlyURI();\n        catch (final FileSystemException fse)\n            final String msg = \"Unable to access \" + url.toString();\n    public OutputStream getOutputStream(final URL url) throws ConfigurationException\n            final FileSystemOptions opts = getOptions(url.getProtocol());\n            final FileSystemManager fsManager = VFS.getManager();\n            final FileObject file = (opts == null) ? fsManager.resolveFile(url.toString())\n            final FileContent content = file.getContent();\n        catch (final FileSystemException fse)\n    public String getPath(final File file, final URL url, final String basePath, final String fileName)\n            final FileSystemManager fsManager = VFS.getManager();\n                final FileName name = fsManager.resolveURI(url.toString());\n                final FileName base = fsManager.resolveURI(basePath);\n                final FileName name = fsManager.resolveURI(fileName);\n                final FileName base = name.getParent();\n        catch (final FileSystemException fse)\n    public String getBasePath(final String path)\n            final FileSystemManager fsManager = VFS.getManager();\n            final FileName name = fsManager.resolveURI(path);\n        catch (final FileSystemException fse)\n    public String getFileName(final String path)\n            final FileSystemManager fsManager = VFS.getManager();\n            final FileName name = fsManager.resolveURI(path);\n        catch (final FileSystemException fse)\n    public URL getURL(final String basePath, final String file) throws MalformedURLException\n            final FileSystemManager fsManager = VFS.getManager();\n                final FileName base = fsManager.resolveURI(basePath);\n            final URLStreamHandler handler = new VFSURLStreamHandler(path);\n        catch (final FileSystemException fse)\n    public URL locateFromURL(final String basePath, final String fileName)\n        final String fileScheme = UriParser.extractScheme(fileName);\n            final FileSystemManager fsManager = VFS.getManager();\n                final String scheme = UriParser.extractScheme(basePath);\n                final FileSystemOptions opts = (scheme != null) ? getOptions(scheme) : null;\n                final FileSystemOptions opts = (fileScheme != null) ? getOptions(fileScheme) : null;\n            final FileName path = file.getName();\n            final URLStreamHandler handler = new VFSURLStreamHandler(path);\n        catch (final FileSystemException fse)\n        catch (final MalformedURLException ex)\n    private FileSystemOptions getOptions(final String scheme)\n        final FileSystemOptions opts = new FileSystemOptions();\n        catch (final Exception ex)\n        final FileOptionsProvider provider = getFileOptionsProvider();\n            final Map<String, Object> map = provider.getOptions();\n            for (final Map.Entry<String, Object> entry : map.entrySet())\n                catch (final Exception ex)\n    private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options,\n                             final String key, final Object value)\n        final String methodName = \"set\" + key.substring(0, 1).toUpperCase() + key.substring(1);\n        final Class<?>[] paramTypes = new Class<?>[2];\n            final Method method = builder.getClass().getMethod(methodName, paramTypes);\n            final Object[] params = new Object[2];\n        catch (final Exception ex)\n        public VFSURLStreamHandler(final FileName file)\n        protected URLConnection openConnection(final URL url) throws IOException\n",
            "src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java": "    public PropertyListConfiguration(final HierarchicalConfiguration<ImmutableNode> c)\n    PropertyListConfiguration(final ImmutableNode root)\n    protected void setPropertyInternal(final String key, final Object value)\n    protected void addPropertyInternal(final String key, final Object value)\n    public void read(final Reader in) throws ConfigurationException\n        final PropertyListParser parser = new PropertyListParser(in);\n            final PropertyListConfiguration config = parser.parse();\n        catch (final ParseException e)\n    public void write(final Writer out) throws ConfigurationException\n        final PrintWriter writer = new PrintWriter(out);\n        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();\n    private void printNode(final PrintWriter out, final int indentLevel,\n            final ImmutableNode node, final NodeHandler<ImmutableNode> handler)\n        final String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n        final List<ImmutableNode> children = new ArrayList<>(node.getChildren());\n            final Iterator<ImmutableNode> it = children.iterator();\n                final ImmutableNode child = it.next();\n                final Object value = child.getValue();\n            final Object value = node.getValue();\n    private void printValue(final PrintWriter out, final int indentLevel, final Object value)\n        final String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n            final Iterator<?> it = ((List<?>) value).iterator();\n            final NodeHandler<ImmutableNode> handler =\n            final ImmutableConfiguration config = (ImmutableConfiguration) value;\n            final Iterator<String> it = config.getKeys();\n                final String key = it.next();\n                final ImmutableNode node =\n                final InMemoryNodeModel tempModel = new InMemoryNodeModel(node);\n            final Map<String, Object> map = transformMap((Map<?, ?>) value);\n    static Date parseDate(final String s) throws ParseException\n        final Calendar cal = Calendar.getInstance();\n        for (final DateComponentParser parser : DATE_PARSERS)\n    static String formatDate(final Calendar cal)\n        final StringBuilder buf = new StringBuilder();\n        for (final DateComponentParser element : DATE_PARSERS)\n    static String formatDate(final Date date)\n        final Calendar cal = Calendar.getInstance();\n    private static Map<String, Object> transformMap(final Map<?, ?> src)\n        final Map<String, Object> dest = new HashMap<>();\n        for (final Map.Entry<?, ?> e : src.entrySet())\n        protected void checkLength(final String s, final int index, final int length)\n            final int len = (s == null) ? 0 : s.length();\n        protected void padNum(final StringBuilder buf, final int num, final int length)\n        public DateFieldParser(final int calFld, final int len)\n        public DateFieldParser(final int calFld, final int len, final int ofs)\n        public void formatComponent(final StringBuilder buf, final Calendar cal)\n        public int parseComponent(final String s, final int index, final Calendar cal)\n            catch (final NumberFormatException nfex)\n        public DateSeparatorParser(final String sep)\n        public void formatComponent(final StringBuilder buf, final Calendar cal)\n        public int parseComponent(final String s, final int index, final Calendar cal)\n        public void formatComponent(final StringBuilder buf, final Calendar cal)\n            final TimeZone tz = cal.getTimeZone();\n            final int hour = ofs / MINUTES_PER_HOUR;\n            final int min = ofs % MINUTES_PER_HOUR;\n        public int parseComponent(final String s, final int index, final Calendar cal)\n            final TimeZone tz = TimeZone.getTimeZone(TIME_ZONE_PREFIX\n",
            "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java": "    public XMLPropertyListConfiguration(final HierarchicalConfiguration<ImmutableNode> configuration)\n    XMLPropertyListConfiguration(final ImmutableNode root)\n    protected void setPropertyInternal(final String key, final Object value)\n    protected void addPropertyInternal(final String key, final Object value)\n    public void initFileLocator(final FileLocator locator)\n    public void read(final Reader in) throws ConfigurationException\n        final EntityResolver resolver = new EntityResolver()\n            public InputSource resolveEntity(final String publicId, final String systemId)\n        final XMLPropertyListHandler handler = new XMLPropertyListHandler();\n            final SAXParserFactory factory = SAXParserFactory.newInstance();\n            final SAXParser parser = factory.newSAXParser();\n        catch (final Exception e)\n    public void write(final Writer out) throws ConfigurationException\n        final PrintWriter writer = new PrintWriter(out);\n    private void printNode(final PrintWriter out, final int indentLevel, final ImmutableNode node)\n        final String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n        final List<ImmutableNode> children = node.getChildren();\n            final Iterator<ImmutableNode> it = children.iterator();\n                final ImmutableNode child = it.next();\n            final Object value = node.getValue();\n    private void printValue(final PrintWriter out, final int indentLevel, final Object value)\n        final String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n            for (final Object o : (List<?>) value)\n            final\n            final ImmutableConfiguration config = (ImmutableConfiguration) value;\n            final Iterator<String> it = config.getKeys();\n                final String key = it.next();\n                final ImmutableNode node =\n            final Map<String, Object> map = transformMap((Map<?, ?>) value);\n            catch (final UnsupportedEncodingException e)\n    private static Map<String, Object> transformMap(final Map<?, ?> src)\n        final Map<String, Object> dest = new HashMap<>();\n        for (final Map.Entry<?, ?> e : src.entrySet())\n            final PListNodeBuilder result = peek();\n        private void push(final PListNodeBuilder node)\n        public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException\n        public void endElement(final String uri, final String localName, final String qName) throws SAXException\n                final PListNodeBuilder node = new PListNodeBuilder();\n                final PListNodeBuilder builder = pop();\n                    final XMLPropertyListConfiguration config = new XMLPropertyListConfiguration(builder.createNode());\n                    final ArrayNodeBuilder node = (ArrayNodeBuilder) peekNE();\n                    catch (final IllegalArgumentException iex)\n                    final ArrayNodeBuilder array = (ArrayNodeBuilder) pop();\n        public void characters(final char[] ch, final int start, final int length) throws SAXException\n        public void addValue(final Object v)\n                final\n                final List<Object> list = new ArrayList<>();\n        public void addDateValue(final String value)\n            catch (final ParseException e)\n        public void addDataValue(final String value)\n            catch (final UnsupportedEncodingException e)\n        public void addIntegerValue(final String value)\n        public void addRealValue(final String value)\n        public void addList(final ArrayNodeBuilder node)\n        public void setName(final String nodeName)\n        public void addChild(final PListNodeBuilder child)\n            final ImmutableNode.Builder nodeBuilder =\n            for (final PListNodeBuilder child : childBuilders)\n        public void addValue(final Object value)\n",
            "src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java": "            final Collection<? extends ReloadingController> subCtrls)\n            final Collection<? extends ReloadingController> subCtrls)\n        final Collection<ReloadingController> ctrls =\n        for (final ReloadingController rc : ctrls)\n        public MultiReloadingControllerDetector(final CombinedReloadingController o)\n            for (final ReloadingController rc : owner.getSubControllers())\n            for (final ReloadingController rc : owner.getSubControllers())\n",
            "src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java": "    public FileHandlerReloadingDetector(final FileHandler handler, final long refreshDelay)\n    public FileHandlerReloadingDetector(final FileHandler handler)\n        final long now = System.currentTimeMillis();\n            final long modified = getLastModificationDate();\n        final File file = getExistingFile();\n    protected void updateLastModified(final long time)\n        final URL url = getFileHandler().getURL();\n    private static File fileFromURL(final URL url)\n            final String path = url.getPath();\n            catch (final MalformedURLException mex)\n",
            "src/main/java/org/apache/commons/configuration2/reloading/PeriodicReloadingTrigger.java": "    public PeriodicReloadingTrigger(final ReloadingController ctrl, final Object ctrlParam,\n            final long triggerPeriod, final TimeUnit unit, final ScheduledExecutorService exec)\n    public PeriodicReloadingTrigger(final ReloadingController ctrl, final Object ctrlParam,\n            final long triggerPeriod, final TimeUnit unit)\n    public void shutdown(final boolean shutdownExecutor)\n        final ThreadFactory factory =\n",
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingController.java": "    public ReloadingController(final ReloadingDetector detect)\n            final EventType<T> eventType, final EventListener<? super T> listener)\n            final EventType<T> eventType, final EventListener<? super T> listener)\n    public boolean checkForReloading(final Object data)\n",
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingEvent.java": "    public ReloadingEvent(final ReloadingController source, final Object addData)\n",
            "src/main/java/org/apache/commons/configuration2/reloading/VFSFileHandlerReloadingDetector.java": "    public VFSFileHandlerReloadingDetector(final FileHandler handler,\n            final long refreshDelay)\n    public VFSFileHandlerReloadingDetector(final FileHandler handler)\n        final FileObject file = getFileObject();\n        catch (final FileSystemException ex)\n            final FileSystemManager fsManager = VFS.getManager();\n            final String uri = resolveFileURI();\n        catch (final FileSystemException fse)\n            final String msg = \"Unable to monitor \" + getFileHandler().getURL().toString();\n        final FileSystem fs = getFileHandler().getFileSystem();\n        final String uri =\n",
            "src/main/java/org/apache/commons/configuration2/resolver/CatalogResolver.java": "    public void setCatalogFiles(final String catalogs)\n    public void setFileSystem(final FileSystem fileSystem)\n    public void setBaseDir(final String baseDir)\n    public void setInterpolator(final ConfigurationInterpolator ci)\n    public void setDebug(final boolean debug)\n    public InputSource resolveEntity(final String publicId, final String systemId)\n            final String badFilePrefix = \"file://\";\n            final String correctFilePrefix = \"file:///\";\n                final URL url = locate(fs, null, resolved);\n                final InputStream is = fs.getInputStream(url);\n                final InputSource iSource = new InputSource(resolved);\n            catch (final Exception e)\n    public void setLogger(final ConfigurationLogger log)\n    private void initLogger(final ConfigurationLogger log)\n    private static URL locate(final FileSystem fs, final String basePath, final String name)\n        final FileLocator locator =\n        public void setFileSystem(final FileSystem fileSystem)\n        public void setBaseDir(final String baseDir)\n        public void setInterpolator(final ConfigurationInterpolator ci)\n                catch (final Exception ex)\n            final String base = ((CatalogManager) catalogManager).getBaseDir();\n            final\n                    final String fileName = catalogs.elementAt(count);\n                    catch (final ConfigurationException ce)\n                        final String name = url.toString();\n                        final String mimeType = fileNameMap.getContentTypeFor(fileName);\n                        catch (final Exception ex)\n        public void parseCatalog(final String baseDir, final String fileName) throws IOException\n                final CatalogReader reader = (CatalogReader) readerArr.get(count);\n                catch (final Exception ex)\n                catch (final CatalogException ce)\n                    catch (final IOException ioe)\n        protected String normalizeURI(final String uriref)\n            final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();\n            final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;\n",
            "src/main/java/org/apache/commons/configuration2/resolver/DefaultEntityResolver.java": "    public void registerEntityId(final String publicId, final URL entityURL)\n    public InputSource resolveEntity(final String publicId, final String systemId)\n                final URLConnection connection = entityURL.openConnection();\n                final InputStream stream = connection.getInputStream();\n                final InputSource source = new InputSource(stream);\n            catch (final IOException e)\n",
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertiesFactoryBean.java": "    public ConfigurationPropertiesFactoryBean(final Configuration configuration)\n            for (final Configuration configuration : configurations)\n            for (final Resource location : locations)\n                final URL url = location.getURL();\n                final Configuration props = new Configurations().properties(url);\n    public void setConfigurations(final Configuration[] configurations)\n    public void setLocations(final Resource[] locations)\n    public void setThrowExceptionOnMissing(final boolean throwExceptionOnMissing)\n    private static <T> T[] defensiveCopy(final T[] src)\n",
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertySource.java": "    public ConfigurationPropertySource(final String name, final Configuration source)\n    protected ConfigurationPropertySource(final String name)\n    public Object getProperty(final String name)\n",
            "src/main/java/org/apache/commons/configuration2/sync/ReadWriteSynchronizer.java": "    public ReadWriteSynchronizer(final ReadWriteLock l)\n",
            "src/main/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandler.java": "    public String nodeName(final ImmutableNode node)\n    public Object getValue(final ImmutableNode node)\n    public List<ImmutableNode> getChildren(final ImmutableNode node)\n    public <C> int getMatchingChildrenCount(final ImmutableNode node,\n            final NodeMatcher<C> matcher, final C criterion)\n    public <C> List<ImmutableNode> getMatchingChildren(final ImmutableNode node,\n            final NodeMatcher<C> matcher, final C criterion)\n        final List<ImmutableNode> result =\n        for (final ImmutableNode c : node.getChildren())\n    public List<ImmutableNode> getChildren(final ImmutableNode node, final String name)\n    public ImmutableNode getChild(final ImmutableNode node, final int index)\n    public int indexOfChild(final ImmutableNode parent, final ImmutableNode child)\n    public int getChildrenCount(final ImmutableNode node, final String name)\n    public Set<String> getAttributes(final ImmutableNode node)\n    public boolean hasAttributes(final ImmutableNode node)\n    public Object getAttributeValue(final ImmutableNode node, final String name)\n    public boolean isDefined(final ImmutableNode node)\n    static boolean checkIfNodeDefined(final ImmutableNode node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/ConfigurationNodeVisitorAdapter.java": "    public void visitBeforeChildren(final T node, final NodeHandler<T> handler)\n    public void visitAfterChildren(final T node, final NodeHandler<T> handler)\n",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultConfigurationKey.java": "    public DefaultConfigurationKey(final DefaultExpressionEngine engine)\n    public DefaultConfigurationKey(final DefaultExpressionEngine engine, final String key)\n    public DefaultConfigurationKey append(final String property, final boolean escape)\n    public DefaultConfigurationKey append(final String property)\n    public DefaultConfigurationKey appendIndex(final int index)\n    public DefaultConfigurationKey appendAttribute(final String attr)\n    public void setLength(final int len)\n    public DefaultConfigurationKey commonKey(final DefaultConfigurationKey other)\n        final DefaultConfigurationKey result = new DefaultConfigurationKey(getExpressionEngine());\n        final KeyIterator it1 = iterator();\n        final KeyIterator it2 = other.iterator();\n    public DefaultConfigurationKey differenceKey(final DefaultConfigurationKey other)\n        final DefaultConfigurationKey common = commonKey(other);\n        final DefaultConfigurationKey result = new DefaultConfigurationKey(getExpressionEngine());\n            final String k = other.toString().substring(common.length());\n    public boolean equals(final Object obj)\n        final DefaultConfigurationKey c = (DefaultConfigurationKey) obj;\n    public boolean isAttributeKey(final String key)\n    public String constructAttributeKey(final String key)\n        final StringBuilder buf = new StringBuilder();\n    public String attributeName(final String key)\n    public String trimLeft(final String key)\n    public String trimRight(final String key)\n    public String trim(final String key)\n    private boolean hasTrailingDelimiter(final String key)\n    private boolean hasLeadingDelimiter(final String key)\n    private String removeAttributeMarkers(final String key)\n    private String unescapeDelimiters(final String key)\n    private String escapeDelimiters(final String key)\n    private static boolean partsEqual(final KeyIterator it1, final KeyIterator it2)\n        public String nextKey(final boolean decorated)\n            final String key = findNextIndices();\n        public String currentKey(final boolean decorated)\n            catch (final CloneNotSupportedException cex)\n        private int nextDelimiterPos(final String key, final int pos, final int endPos)\n                final int escapePos = escapedPosition(key, delimiterPos);\n        private int escapedPosition(final String key, final int pos)\n            final int escapeOffset = escapeOffset();\n            final int escapePos = key.indexOf(getSymbols()\n        private boolean checkAttribute(final String key)\n        private boolean checkIndex(final String key)\n                final int idx = key.lastIndexOf(getSymbols().getIndexStart());\n                    final int endidx = key.indexOf(getSymbols().getIndexEnd(),\n            catch (final NumberFormatException nfe)\n",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngine.java": "    public DefaultExpressionEngine(final DefaultExpressionEngineSymbols syms)\n    public DefaultExpressionEngine(final DefaultExpressionEngineSymbols syms,\n            final NodeMatcher<String> nodeNameMatcher)\n    public <T> List<QueryResult<T>> query(final T root, final String key,\n            final NodeHandler<T> handler)\n        final List<QueryResult<T>> results = new LinkedList<>();\n    public <T> String nodeKey(final T node, final String parentKey, final NodeHandler<T> handler)\n        final DefaultConfigurationKey key = new DefaultConfigurationKey(this,\n    public String attributeKey(final String parentKey, final String attributeName)\n        final DefaultConfigurationKey key =\n    public <T> String canonicalKey(final T node, final String parentKey,\n            final NodeHandler<T> handler)\n        final String nodeName = handler.nodeName(node);\n        final T parent = handler.getParent(node);\n        final DefaultConfigurationKey key =\n    public <T> NodeAddData<T> prepareAdd(final T root, final String key, final NodeHandler<T> handler)\n        final DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(\n        final T parent = findLastPathNode(it, root, handler);\n        final List<String> pathNodes = new LinkedList<>();\n            final DefaultConfigurationKey.KeyIterator keyPart, final T node,\n            final Collection<QueryResult<T>> results, final NodeHandler<T> handler)\n            final String key = keyPart.nextKey(false);\n    protected <T> T findLastPathNode(final DefaultConfigurationKey.KeyIterator keyIt,\n            final T node, final NodeHandler<T> handler)\n        final String keyPart = keyIt.nextKey(false);\n            final int idx =\n    private <T> void processSubNodes(final DefaultConfigurationKey.KeyIterator keyPart,\n            final List<T> subNodes, final Collection<QueryResult<T>> nodes, final NodeHandler<T> handler)\n            for (final T node : subNodes)\n    private <T> int determineIndex(final T node, final T parent, final String nodeName,\n                                          final NodeHandler<T> handler)\n    private <T> List<T> findChildNodesByName(final NodeHandler<T> handler, final T parent,\n            final String nodeName)\n",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngineSymbols.java": "    private DefaultExpressionEngineSymbols(final Builder b)\n    public boolean equals(final Object obj)\n        final DefaultExpressionEngineSymbols c = (DefaultExpressionEngineSymbols) obj;\n        public Builder(final DefaultExpressionEngineSymbols c)\n        public Builder setPropertyDelimiter(final String d)\n        public Builder setEscapedDelimiter(final String ed)\n        public Builder setIndexStart(final String is)\n        public Builder setIndexEnd(final String ie)\n        public Builder setAttributeStart(final String as)\n        public Builder setAttributeEnd(final String ae)\n",
            "src/main/java/org/apache/commons/configuration2/tree/ImmutableNode.java": "    private ImmutableNode(final Builder b)\n    public ImmutableNode setName(final String name)\n    public ImmutableNode setValue(final Object newValue)\n    public ImmutableNode addChild(final ImmutableNode child)\n        final Builder builder = new Builder(children.size() + 1, attributes);\n    public ImmutableNode removeChild(final ImmutableNode child)\n        final Builder builder = new Builder(children.size(), attributes);\n        for (final ImmutableNode c : children)\n    public ImmutableNode replaceChild(final ImmutableNode oldChild,\n            final ImmutableNode newChild)\n        final Builder builder = new Builder(children.size(), attributes);\n        for (final ImmutableNode c : children)\n    public ImmutableNode replaceChildren(final Collection<ImmutableNode> newChildren)\n        final Builder builder = new Builder(null, attributes);\n    public ImmutableNode setAttribute(final String name, final Object value)\n        final Map<String, Object> newAttrs = new HashMap<>(attributes);\n    public ImmutableNode setAttributes(final Map<String, ?> newAttributes)\n        final Map<String, Object> newAttrs = new HashMap<>(attributes);\n    public ImmutableNode removeAttribute(final String name)\n        final Map<String, Object> newAttrs = new HashMap<>(attributes);\n    private ImmutableNode createWithBasicProperties(final Builder builder)\n    private ImmutableNode createWithNewAttributes(final Map<String, Object> newAttrs)\n    private static void checkChildNode(final ImmutableNode child)\n        public Builder(final int childCount)\n        private Builder(final List<ImmutableNode> dirChildren,\n                final Map<String, Object> dirAttrs)\n        private Builder(final int childCount, final Map<String, Object> dirAttrs)\n        public Builder name(final String n)\n        public Builder value(final Object v)\n        public Builder addChild(final ImmutableNode c)\n        public Builder addChildren(final Collection<? extends ImmutableNode> children)\n        public Builder addAttribute(final String name, final Object value)\n        public Builder addAttributes(final Map<String, ?> attrs)\n            final ImmutableNode newNode = new ImmutableNode(this);\n        private void initChildrenCollection(final int childCount)\n                final Collection<? extends ImmutableNode> children)\n            final List<ImmutableNode> result =\n            for (final ImmutableNode c : children)\n",
            "src/main/java/org/apache/commons/configuration2/tree/InMemoryNodeModel.java": "    public InMemoryNodeModel(final ImmutableNode root)\n    public void addProperty(final String key, final Iterable<?> values,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public void addProperty(final String key, final NodeSelector selector,\n                public boolean initTransaction(final ModelTransaction tx)\n    public void addNodes(final String key, final Collection<? extends ImmutableNode> nodes,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public void addNodes(final String key, final NodeSelector selector,\n                public boolean initTransaction(final ModelTransaction tx)\n                    final List<QueryResult<ImmutableNode>> results =\n                        final NodeAddData<ImmutableNode> addData =\n                        final ImmutableNode newNode =\n    public void setProperty(final String key, final Object value,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public void setProperty(final String key, final NodeSelector selector,\n            public boolean initTransaction(final ModelTransaction tx)\n                final NodeUpdateData<ImmutableNode> updateData =\n                final boolean cleared =\n                final boolean updated =\n    public List<QueryResult<ImmutableNode>> clearTree(final String key,\n            final NodeKeyResolver<ImmutableNode> resolver)\n            final NodeSelector selector, final NodeKeyResolver<ImmutableNode> resolver)\n            public boolean initTransaction(final ModelTransaction tx)\n                final TreeData currentStructure = tx.getCurrentData();\n                final List<QueryResult<ImmutableNode>> results = resolver.resolveKey(\n                for (final QueryResult<ImmutableNode> result : results)\n    public void clearProperty(final String key,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public void clearProperty(final String key, final NodeSelector selector,\n            public boolean initTransaction(final ModelTransaction tx)\n                final List<QueryResult<ImmutableNode>> results =\n    public void clear(final NodeKeyResolver<ImmutableNode> resolver)\n        final ImmutableNode newRoot =\n    public void setRootNode(final ImmutableNode newRoot)\n    public void replaceRoot(final ImmutableNode newRoot,\n            final NodeKeyResolver<ImmutableNode> resolver)\n        final TreeData current = structure.get();\n        final TreeData temp =\n            final NodeKeyResolver<ImmutableNode> resolver)\n            public boolean initTransaction(final ModelTransaction tx)\n                final TreeData current = tx.getCurrentData();\n                final String newRootName =\n    public void trackNode(final NodeSelector selector,\n            final NodeKeyResolver<ImmutableNode> resolver)\n            final TreeData current = structure.get();\n            final NodeTracker newTracker =\n    public Collection<NodeSelector> selectAndTrackNodes(final String key,\n            final NodeKeyResolver<ImmutableNode> resolver)\n        final Mutable<Collection<NodeSelector>> refSelectors =\n            final TreeData current = structure.get();\n            final List<ImmutableNode> nodes =\n    public Collection<NodeSelector> trackChildNodes(final String key,\n            final NodeKeyResolver<ImmutableNode> resolver)\n        final Mutable<Collection<NodeSelector>> refSelectors =\n            final TreeData current = structure.get();\n            final List<ImmutableNode> nodes =\n                final ImmutableNode node = nodes.get(0);\n    public NodeSelector trackChildNodeWithCreation(final String key,\n            final String childName, final NodeKeyResolver<ImmutableNode> resolver)\n        final MutableObject<NodeSelector> refSelector =\n            final TreeData current = structure.get();\n            final List<ImmutableNode> nodes =\n            final ImmutableNode parent = nodes.get(0);\n            final TreeData newData =\n    public ImmutableNode getTrackedNode(final NodeSelector selector)\n    public void replaceTrackedNode(final NodeSelector selector, final ImmutableNode newNode)\n            final TreeData currentData = structure.get();\n            final NodeSelector selector)\n        final TreeData currentData = structure.get();\n        final InMemoryNodeModel detachedNodeModel =\n    public boolean isTrackedNodeDetached(final NodeSelector selector)\n    public void untrackNode(final NodeSelector selector)\n            final TreeData current = structure.get();\n            final NodeTracker newTracker =\n            final ImmutableNode root)\n                    public void visitBeforeChildren(final ImmutableNode node,\n                            final NodeHandler<ImmutableNode> handler)\n                        for (final ImmutableNode c : node.getChildren())\n    static boolean checkIfNodeDefined(final ImmutableNode node)\n    private void initializeAddTransaction(final ModelTransaction tx, final String key,\n            final Iterable<?> values, final NodeKeyResolver<ImmutableNode> resolver)\n        final NodeAddData<ImmutableNode> addData =\n    private TreeData createTreeData(final ImmutableNode root, final TreeData current)\n        final NodeTracker newTracker =\n    private TreeData createTreeDataForRootAndTracker(final ImmutableNode root,\n            final NodeTracker newTracker)\n    private static void addNodeProperty(final ModelTransaction tx,\n            final NodeAddData<ImmutableNode> addData, final Iterable<?> values)\n        final Collection<ImmutableNode> newNodes =\n    private static void addNodesByAddData(final ModelTransaction tx,\n            final NodeAddData<ImmutableNode> addData,\n            final Collection<ImmutableNode> newNodes)\n            final ImmutableNode newChild = createNodeToAddWithPath(addData, newNodes);\n    private static void addAttributeProperty(final ModelTransaction tx,\n            final NodeAddData<ImmutableNode> addData, final Iterable<?> values)\n            final int pathNodeCount = addData.getPathNodes().size();\n            final ImmutableNode childWithAttribute =\n            final ImmutableNode newChild =\n            final String newNodeName, final Iterable<?> values)\n        final Collection<ImmutableNode> nodes = new LinkedList<>();\n        for (final Object value : values)\n            final NodeAddData<ImmutableNode> addData,\n            final Collection<ImmutableNode> newNodes)\n    private static ImmutableNode createNodeOnPath(final Iterator<String> it,\n            final Collection<ImmutableNode> newNodes)\n        final String nodeName = it.next();\n    private static boolean initializeClearTransaction(final ModelTransaction tx,\n            final Collection<QueryResult<ImmutableNode>> results)\n        for (final QueryResult<ImmutableNode> result : results)\n    private static boolean initializeUpdateTransaction(final ModelTransaction tx,\n            final Map<QueryResult<ImmutableNode>, Object> changedValues)\n        for (final Map.Entry<QueryResult<ImmutableNode>, Object> e : changedValues\n    private static ImmutableNode initialRootNode(final ImmutableNode providedRoot)\n    private static String determineRootName(final ImmutableNode rootNode,\n            final ImmutableNode node, final String rootName)\n            final ImmutableNode root)\n        final Map<ImmutableNode, ImmutableNode> parents =\n    private void updateModel(final TransactionInitializer txInit,\n            final NodeSelector selector, final NodeKeyResolver<ImmutableNode> resolver)\n            final TreeData currentData = getTreeData();\n            final TransactionInitializer txInit, final NodeSelector selector,\n            final TreeData currentData, final NodeKeyResolver<ImmutableNode> resolver)\n        final ModelTransaction tx =\n            final TreeData newData = tx.execute();\n            final TransactionInitializer txInit, final NodeSelector selector,\n            final TreeData currentData, final NodeKeyResolver<ImmutableNode> resolver)\n            final InMemoryNodeModel detachedNodeModel =\n    private boolean replaceDetachedTrackedNode(final TreeData currentData,\n            final NodeSelector selector, final ImmutableNode newNode)\n        final InMemoryNodeModel detachedNodeModel =\n    private boolean replaceActiveTrackedNode(final TreeData currentData,\n            final NodeSelector selector, final ImmutableNode newNode)\n        final NodeTracker newTracker =\n            final Mutable<Collection<NodeSelector>> refSelectors,\n            final List<ImmutableNode> nodes, final TreeData current,\n            final NodeKeyResolver<ImmutableNode> resolver)\n        final List<NodeSelector> selectors =\n        final Map<ImmutableNode, String> cache = new HashMap<>();\n        for (final ImmutableNode node : nodes)\n        final NodeTracker newTracker =\n    private static TreeData updateDataWithNewTrackedNode(final TreeData current,\n            final ImmutableNode node, final NodeKeyResolver<ImmutableNode> resolver,\n            final MutableObject<NodeSelector> refSelector)\n        final NodeSelector selector =\n        final NodeTracker newTracker =\n    private static TreeData createDataWithTrackedChildNode(final TreeData current,\n            final ImmutableNode parent, final String childName,\n            final NodeKeyResolver<ImmutableNode> resolver,\n            final MutableObject<NodeSelector> refSelector)\n        final List<ImmutableNode> namedChildren =\n            final ImmutableNode child =\n            final ModelTransaction tx = new ModelTransaction(current, null, resolver);\n    private static boolean valuesNotEmpty(final Iterable<?> values)\n    private static RuntimeException attributeKeyException(final String key)\n",
            "src/main/java/org/apache/commons/configuration2/tree/MergeCombiner.java": "    public ImmutableNode combine(final ImmutableNode node1, final ImmutableNode node2)\n        final ImmutableNode.Builder result = new ImmutableNode.Builder();\n        final List<ImmutableNode> children2 = new LinkedList<>(node2.getChildren());\n        for (final ImmutableNode child1 : node1.getChildren())\n            final ImmutableNode child2 = canCombine(node2, child1, children2);\n        for (final ImmutableNode c : children2)\n    protected void addAttributes(final ImmutableNode.Builder result, final ImmutableNode node1,\n            final ImmutableNode node2)\n        final Map<String, Object> attributes = new HashMap<>();\n        for (final Map.Entry<String, Object> e : node2.getAttributes().entrySet())\n    protected ImmutableNode canCombine(final ImmutableNode node2,\n            final ImmutableNode child, final List<ImmutableNode> children2)\n        final Map<String, Object> attrs1 = child.getAttributes();\n        final List<ImmutableNode> nodes = new ArrayList<>();\n        final List<ImmutableNode> children =\n        for (final ImmutableNode node : children)\n            for (final ImmutableNode node : nodes)\n    private static boolean matchAttributes(final Map<String, Object> attrs1,\n            final ImmutableNode node)\n        final Map<String, Object> attrs2 = node.getAttributes();\n        for (final Map.Entry<String, Object> e : attrs1.entrySet())\n",
            "src/main/java/org/apache/commons/configuration2/tree/ModelTransaction.java": "    public ModelTransaction(final TreeData treeData, final NodeSelector selector,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public void addAddNodesOperation(final ImmutableNode parent,\n            final Collection<? extends ImmutableNode> newNodes)\n        final ChildrenUpdateOperation op = new ChildrenUpdateOperation();\n    public void addAddNodeOperation(final ImmutableNode parent, final ImmutableNode newChild)\n        final ChildrenUpdateOperation op = new ChildrenUpdateOperation();\n    public void addAttributeOperation(final ImmutableNode target, final String name,\n            final Object value)\n    public void addAttributesOperation(final ImmutableNode target,\n            final Map<String, Object> attributes)\n    public void addRemoveNodeOperation(final ImmutableNode parent, final ImmutableNode node)\n        final ChildrenUpdateOperation op = new ChildrenUpdateOperation();\n    public void addRemoveAttributeOperation(final ImmutableNode target, final String name)\n    public void addClearNodeValueOperation(final ImmutableNode target)\n    public void addChangeNodeValueOperation(final ImmutableNode target,\n            final Object newValue)\n    public void addChangeNodeNameOperation(final ImmutableNode target, final String newName)\n    public void addNewReferences(final Map<ImmutableNode, ?> refs)\n    public void addNewReference(final ImmutableNode node, final Object ref)\n    ImmutableNode getParent(final ImmutableNode node)\n    Operations fetchOperations(final ImmutableNode target, final int level)\n        final Integer nodeLevel =\n    private ImmutableNode initQueryRoot(final TreeData treeData, final NodeSelector selector)\n    private int level(final ImmutableNode node)\n            final Integer level = operations.lastKey(); // start down in hierarchy\n            final Map<ImmutableNode, Operations> levelOps = operations.remove(level);\n            for (final Map.Entry<ImmutableNode, Operations> e : levelOps.entrySet())\n        for (final ImmutableNode node : addedNodes)\n        for (final ImmutableNode node : removedNodes)\n    private void removeNodesFromParentAndReplacementMapping(final ImmutableNode root)\n                    public void visitBeforeChildren(final ImmutableNode node,\n                            final NodeHandler<ImmutableNode> handler)\n    private void removeNodeFromReplacementMapping(final ImmutableNode node)\n    private static <E> Collection<E> concatenate(final Collection<E> col1,\n            final Collection<? extends E> col2)\n        final Collection<E> result =\n    private static <E> Set<E> concatenate(final Set<E> set1, final Set<? extends E> set2)\n        final Set<E> result = (set1 != null) ? set1 : new HashSet<>();\n    private static <K, V> Map<K, V> concatenate(final Map<K, V> map1,\n            final Map<? extends K, ? extends V> map2)\n        final Map<K, V> result = (map1 != null) ? map1 : new HashMap<>();\n    private static <E> Collection<E> append(final Collection<E> col, final E node)\n        final Collection<E> result = (col != null) ? col : new LinkedList<>();\n    private static <E> Set<E> append(final Set<E> col, final E elem)\n        final Set<E> result = (col != null) ? col : new HashSet<>();\n    private static <K, V> Map<K, V> append(final Map<K, V> map, final K key, final V value)\n        final Map<K, V> result = (map != null) ? map : new HashMap<>();\n        public void combine(final ChildrenUpdateOperation op)\n        public void addNewNode(final ImmutableNode node)\n        public void addNewNodes(final Collection<? extends ImmutableNode> nodes)\n        public void addNodeToReplace(final ImmutableNode org,\n                final ImmutableNode replacement)\n        public void addNodeToRemove(final ImmutableNode node)\n        protected ImmutableNode apply(final ImmutableNode target,\n                final Operations operations)\n            final Map<ImmutableNode, ImmutableNode> replacements =\n            final Set<ImmutableNode> removals = fetchRemovalSet();\n            final List<ImmutableNode> resultNodes = new LinkedList<>();\n            for (final ImmutableNode nd : target.getChildren())\n                final ImmutableNode repl = replacements.get(nd);\n        public AddAttributeOperation(final String name, final Object value)\n        protected ImmutableNode apply(final ImmutableNode target,\n                final Operations operations)\n        public AddAttributesOperation(final Map<String, Object> attrs)\n        protected ImmutableNode apply(final ImmutableNode target,\n                final Operations operations)\n        public RemoveAttributeOperation(final String name)\n        protected ImmutableNode apply(final ImmutableNode target,\n                final Operations operations)\n        public ChangeNodeValueOperation(final Object value)\n        protected ImmutableNode apply(final ImmutableNode target,\n                final Operations operations)\n        public ChangeNodeNameOperation(final String name)\n        protected ImmutableNode apply(final ImmutableNode target,\n                final Operations operations)\n        public void addChildrenOperation(final ChildrenUpdateOperation co)\n        public void addOperation(final Operation op)\n        public void newNodesAdded(final Collection<ImmutableNode> newNodes)\n        public void apply(final ImmutableNode target, final int level)\n                for (final Operation op : operations)\n        private void propagateChange(final ImmutableNode target, final ImmutableNode node,\n                final int level)\n            final ImmutableNode parent = getParent(target);\n            final ChildrenUpdateOperation co = new ChildrenUpdateOperation();\n        private void handleAddedNodes(final ImmutableNode node)\n                for (final ImmutableNode child : addedNodesInOperation)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeAddData.java": "    public NodeAddData(final T parentNode, final String newName, final boolean isAttr,\n            final Collection<String> intermediateNodes)\n            final Collection<String> intermediateNodes)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeCombiner.java": "    public void addListNode(final String nodeName)\n    public boolean isListNode(final ImmutableNode node)\n            public ImmutableNode getParent(final ImmutableNode node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeHandlerDecorator.java": "    public String nodeName(final T node)\n    public Object getValue(final T node)\n    public T getParent(final T node)\n    public List<T> getChildren(final T node)\n    public <C> List<T> getMatchingChildren(final T node, final NodeMatcher<C> matcher,\n            final C criterion)\n    public <C> int getMatchingChildrenCount(final T node, final NodeMatcher<C> matcher,\n            final C criterion)\n    public List<T> getChildren(final T node, final String name)\n    public T getChild(final T node, final int index)\n    public int indexOfChild(final T parent, final T child)\n    public int getChildrenCount(final T node, final String name)\n    public Set<String> getAttributes(final T node)\n    public boolean hasAttributes(final T node)\n    public Object getAttributeValue(final T node, final String name)\n    public boolean isDefined(final T node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeNameMatchers.java": "        public <T> boolean matches(final T node, final NodeHandler<T> handler,\n                final String criterion)\n        public <T> boolean matches(final T node, final NodeHandler<T> handler,\n                final String criterion)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeSelector.java": "    public NodeSelector(final String key)\n    private NodeSelector(final List<String> keys)\n    public ImmutableNode select(final ImmutableNode root,\n            final NodeKeyResolver<ImmutableNode> resolver,\n            final NodeHandler<ImmutableNode> handler)\n        final Iterator<String> itKeys = nodeKeys.iterator();\n            final String currentKey = itKeys.next();\n            final List<ImmutableNode> currentResults =\n            for (final ImmutableNode currentRoot : nodes)\n    public NodeSelector subSelector(final String subKey)\n        final List<String> keys = new ArrayList<>(nodeKeys.size() + 1);\n    public boolean equals(final Object obj)\n        final NodeSelector c = (NodeSelector) obj;\n    private void getFilteredResults(final ImmutableNode root,\n            final NodeKeyResolver<ImmutableNode> resolver,\n            final NodeHandler<ImmutableNode> handler, final String key,\n            final List<ImmutableNode> nodes)\n        final List<QueryResult<ImmutableNode>> results =\n        for (final QueryResult<ImmutableNode> result : results)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeTracker.java": "    private NodeTracker(final Map<NodeSelector, TrackedNodeData> map)\n    public NodeTracker trackNode(final ImmutableNode root, final NodeSelector selector,\n            final NodeKeyResolver<ImmutableNode> resolver,\n            final NodeHandler<ImmutableNode> handler)\n        final Map<NodeSelector, TrackedNodeData> newState =\n        final TrackedNodeData trackData = newState.get(selector);\n    public NodeTracker trackNodes(final Collection<NodeSelector> selectors,\n            final Collection<ImmutableNode> nodes)\n        final Map<NodeSelector, TrackedNodeData> newState =\n        final Iterator<ImmutableNode> itNodes = nodes.iterator();\n        for (final NodeSelector selector : selectors)\n            final ImmutableNode node = itNodes.next();\n    public NodeTracker untrackNode(final NodeSelector selector)\n        final TrackedNodeData trackData = getTrackedNodeData(selector);\n        final Map<NodeSelector, TrackedNodeData> newState =\n        final TrackedNodeData newTrackData = trackData.observerRemoved();\n    public ImmutableNode getTrackedNode(final NodeSelector selector)\n    public boolean isTrackedNodeDetached(final NodeSelector selector)\n    public InMemoryNodeModel getDetachedNodeModel(final NodeSelector selector)\n    public NodeTracker update(final ImmutableNode root, final NodeSelector txTarget,\n            final NodeKeyResolver<ImmutableNode> resolver,\n            final NodeHandler<ImmutableNode> handler)\n        final Map<NodeSelector, TrackedNodeData> newState =\n        for (final Map.Entry<NodeSelector, TrackedNodeData> e : trackedNodes\n        final Map<NodeSelector, TrackedNodeData> newState =\n        for (final Map.Entry<NodeSelector, TrackedNodeData> e : trackedNodes\n            final TrackedNodeData newData =\n    public NodeTracker replaceAndDetachTrackedNode(final NodeSelector selector,\n            final ImmutableNode newNode)\n        final Map<NodeSelector, TrackedNodeData> newState =\n    private TrackedNodeData getTrackedNodeData(final NodeSelector selector)\n        final TrackedNodeData trackData = trackedNodes.get(selector);\n            final ImmutableNode root, final NodeSelector txTarget,\n            final NodeKeyResolver<ImmutableNode> resolver,\n            final NodeHandler<ImmutableNode> handler,\n            final Map.Entry<NodeSelector, TrackedNodeData> e)\n        catch (final Exception ex)\n            final NodeSelector txTarget, final Map.Entry<NodeSelector, TrackedNodeData> e)\n        final ImmutableNode newNode =\n    private static ImmutableNode createEmptyTrackedNode(final TrackedNodeData data)\n            final ImmutableNode root, final NodeSelector selector,\n            final NodeKeyResolver<ImmutableNode> resolver,\n            final NodeHandler<ImmutableNode> handler, final TrackedNodeData trackData)\n        final ImmutableNode target = selector.select(root, resolver, handler);\n        public TrackedNodeData(final ImmutableNode nd)\n        private TrackedNodeData(final ImmutableNode nd, final int obsCount,\n                final InMemoryNodeModel detachedNodeModel)\n        public TrackedNodeData updateNode(final ImmutableNode newNode)\n        public TrackedNodeData detach(final ImmutableNode newNode)\n            final ImmutableNode newTrackedNode =\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeTreeWalker.java": "    public <T> void walkDFS(final T root, final ConfigurationNodeVisitor<T> visitor,\n            final NodeHandler<T> handler)\n    public <T> void walkBFS(final T root, final ConfigurationNodeVisitor<T> visitor,\n            final NodeHandler<T> handler)\n    private static <T> void dfs(final T node, final ConfigurationNodeVisitor<T> visitor,\n            final NodeHandler<T> handler)\n            for (final T c : handler.getChildren(node))\n    private static <T> void bfs(final T root, final ConfigurationNodeVisitor<T> visitor,\n            final NodeHandler<T> handler)\n        final List<T> pendingNodes = new LinkedList<>();\n            final T node = pendingNodes.remove(0);\n            for (final T c : handler.getChildren(node))\n    private static <T> boolean checkParameters(final T root,\n            final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeUpdateData.java": "    public NodeUpdateData(final Map<QueryResult<T>, Object> changedValues,\n            final Collection<Object> newValues,\n            final Collection<QueryResult<T>> removedNodes, final String key)\n    private static <K, V> Map<K, V> copyMap(final Map<? extends K, ? extends V> map)\n    private static <T> Collection<T> copyCollection(final Collection<? extends T> col)\n",
            "src/main/java/org/apache/commons/configuration2/tree/OverrideCombiner.java": "    public ImmutableNode combine(final ImmutableNode node1,\n            final ImmutableNode node2)\n        final ImmutableNode.Builder result = new ImmutableNode.Builder();\n        for (final ImmutableNode child : node1.getChildren())\n            final ImmutableNode child2 = canCombine(node1, node2, child);\n        for (final ImmutableNode child : node2.getChildren())\n    protected void addAttributes(final ImmutableNode.Builder result,\n            final ImmutableNode node1, final ImmutableNode node2)\n        for (final String attr : node2.getAttributes().keySet())\n    protected ImmutableNode canCombine(final ImmutableNode node1,\n            final ImmutableNode node2, final ImmutableNode child)\n",
            "src/main/java/org/apache/commons/configuration2/tree/QueryResult.java": "    private QueryResult(final T nd, final String attr)\n    public static <T> QueryResult<T> createNodeResult(final T resultNode)\n    public static <T> QueryResult<T> createAttributeResult(final T parentNode,\n                                                           final String attrName)\n    public Object getAttributeValue(final NodeHandler<T> handler)\n    public boolean equals(final Object obj)\n        final QueryResult<?> c = (QueryResult<?>) obj;\n        final ToStringBuilder sb = new ToStringBuilder(this);\n",
            "src/main/java/org/apache/commons/configuration2/tree/ReferenceTracker.java": "    private ReferenceTracker(final Map<ImmutableNode, Object> refs,\n            final List<Object> removedRefs)\n    public ReferenceTracker addReferences(final Map<ImmutableNode, ?> refs)\n        final Map<ImmutableNode, Object> newRefs =\n            final Map<ImmutableNode, ImmutableNode> replacedNodes,\n            final Collection<ImmutableNode> removedNodes)\n            for (final Map.Entry<ImmutableNode, ImmutableNode> e : replacedNodes\n                final Object ref = references.get(e.getKey());\n            for (final ImmutableNode node : removedNodes)\n                final Object ref = references.get(node);\n    public Object getReference(final ImmutableNode node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeHandler.java": "    public TrackedNodeHandler(final ImmutableNode root,\n            final NodeHandler<ImmutableNode> handler)\n    public ImmutableNode getParent(final ImmutableNode node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeModel.java": "    public TrackedNodeModel(final InMemoryNodeModelSupport modelSupport, final NodeSelector sel,\n            final boolean untrackOnFinalize)\n    public void setRootNode(final ImmutableNode newRoot)\n    public void addProperty(final String key, final Iterable<?> values,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public void addNodes(final String key, final Collection<? extends ImmutableNode> nodes,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public void setProperty(final String key, final Object value,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public List<QueryResult<ImmutableNode>> clearTree(final String key,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public void clearProperty(final String key,\n            final NodeKeyResolver<ImmutableNode> resolver)\n    public void clear(final NodeKeyResolver<ImmutableNode> resolver)\n",
            "src/main/java/org/apache/commons/configuration2/tree/TreeData.java": "    public TreeData(final ImmutableNode root,\n            final Map<ImmutableNode, ImmutableNode> parentMapping,\n            final Map<ImmutableNode, ImmutableNode> replacements,\n            final NodeTracker tracker, final ReferenceTracker refTracker)\n    public ImmutableNode getParent(final ImmutableNode node)\n        final ImmutableNode org = handleReplacements(node, inverseReplacementMapping);\n        final ImmutableNode parent = parentMapping.get(org);\n    public TreeData updateNodeTracker(final NodeTracker newTracker)\n    public TreeData updateReferenceTracker(final ReferenceTracker newTracker)\n    public Object getReference(final ImmutableNode node)\n    private static ImmutableNode handleReplacements(final ImmutableNode replace,\n            final Map<ImmutableNode, ImmutableNode> mapping)\n            final Map<ImmutableNode, ImmutableNode> replacements)\n        final Map<ImmutableNode, ImmutableNode> inverseMapping =\n        for (final Map.Entry<ImmutableNode, ImmutableNode> e : replacements\n",
            "src/main/java/org/apache/commons/configuration2/tree/TreeUtils.java": "    public static void printTree(final PrintStream stream, final ImmutableNode result)\n    private static void printTree(final PrintStream stream, final String indent, final ImmutableNode result)\n        final StringBuilder buffer = new StringBuilder(indent).append(\"<\").append(result.getNodeName());\n        for (final Map.Entry<String, Object> e : result.getAttributes().entrySet())\n            for (final ImmutableNode child : result.getChildren())\n",
            "src/main/java/org/apache/commons/configuration2/tree/UnionCombiner.java": "    public ImmutableNode combine(final ImmutableNode node1,\n            final ImmutableNode node2)\n        final ImmutableNode.Builder result = new ImmutableNode.Builder();\n        final List<ImmutableNode> children2 = new LinkedList<>(node2.getChildren());\n        for (final ImmutableNode child1 : node1.getChildren())\n            final ImmutableNode child2 = findCombineNode(node1, node2, child1\n        for (final ImmutableNode c : children2)\n    protected ImmutableNode findCombineNode(final ImmutableNode node1,\n            final ImmutableNode node2, final ImmutableNode child)\n            final ImmutableNode child2 =\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationAttributePointer.java": "    public ConfigurationAttributePointer(final ConfigurationNodePointer<T> parent,\n            final String attrName)\n        final\n    public int compareChildNodePointers(final NodePointer p1, final NodePointer p2)\n    public void setValue(final Object value)\n    public boolean testNode(final NodeTest test)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorAttribute.java": "            final ConfigurationNodePointer<T> parent, final QName name)\n    protected NodePointer createNodePointer(final int position)\n            final ConfigurationNodePointer<T> parent, final QName name)\n        final List<String> result = new ArrayList<>();\n            final Set<String> names =\n            final String prefix =\n            for (final String n : names)\n    private void addAttributeData(final ConfigurationNodePointer<T> parent,\n            final List<String> result, final String name)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorBase.java": "    protected ConfigurationNodeIteratorBase(final ConfigurationNodePointer<T> parent,\n            final boolean reverse)\n    public boolean setPosition(final int pos)\n    protected void setStartOffset(final int startOffset)\n    protected int positionToIndex(final int pos)\n    protected static String prefixName(final String prefix, final String name)\n    protected static String qualifiedName(final QName name)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorChildren.java": "            final ConfigurationNodePointer<T> parent, final NodeTest nodeTest,\n            final boolean reverse, final ConfigurationNodePointer<T> startsWith)\n        final T root = parent.getConfigurationNode();\n    protected NodePointer createNodePointer(final int position)\n    private List<T> createSubNodeList(final T node, final NodeTest test)\n            final NodeNameTest nameTest = (NodeNameTest) test;\n            final QName name = nameTest.getNodeName();\n            final NodeTypeTest typeTest = (NodeTypeTest) test;\n    private List<T> createSubNodeListForName(final T node, final QName name)\n        final String compareName = qualifiedName(name);\n        final List<T> result = new ArrayList<>();\n        for (final T child : getNodeHandler().getChildren(node))\n    private List<T> createSubNodeListForWildcardName(final T node, final QName name)\n        final List<T> children = getNodeHandler().getChildren(node);\n        final List<T> prefixChildren = new ArrayList<>(children.size());\n        final String prefix = prefixName(name.getPrefix(), null);\n        for (final T child : children)\n    private int findStartIndex(final List<T> children, final T startNode)\n        for (final T child : children)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointer.java": "    public ConfigurationNodePointer(final T node, final Locale locale,\n            final NodeHandler<T> handler)\n    public ConfigurationNodePointer(final ConfigurationNodePointer<T> parent, final T node,\n            final NodeHandler<T> handler)\n    public void setValue(final Object value)\n    public int compareChildNodePointers(final NodePointer pointer1,\n            final NodePointer pointer2)\n        final Object node1 = pointer1.getBaseValue();\n        final Object node2 = pointer2.getBaseValue();\n        for (final T child : getNodeHandler().getChildren(node))\n    public NodeIterator attributeIterator(final QName name)\n    public NodeIterator childIterator(final NodeTest test, final boolean reverse,\n            final NodePointer startWith)\n    public boolean testNode(final NodeTest test)\n    private ConfigurationNodePointer<T> castPointer(final NodePointer p)\n        final\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointerFactory.java": "    public NodePointer createNodePointer(final QName name, final Object bean, final Locale locale)\n            final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;\n    public NodePointer createNodePointer(final NodePointer parent, final QName name,\n            final Object bean)\n            final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;\n    public static <T> Object wrapNode(final T node, final NodeHandler<T> handler)\n        public NodeWrapper(final T nd, final NodeHandler<T> handler)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathContextFactory.java": "    public <T> JXPathContext createContext(final T root, final NodeHandler<T> handler)\n        final JXPathContext context =\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathExpressionEngine.java": "    XPathExpressionEngine(final XPathContextFactory factory)\n    public <T> List<QueryResult<T>> query(final T root, final String key,\n            final NodeHandler<T> handler)\n            final QueryResult<T> result = createResult(root);\n        final JXPathContext context = createContext(root, handler);\n    public <T> String nodeKey(final T node, final String parentKey, final NodeHandler<T> handler)\n            final StringBuilder buf =\n    public String attributeKey(final String parentKey, final String attributeName)\n        final StringBuilder buf =\n    public <T> String canonicalKey(final T node, final String parentKey,\n            final NodeHandler<T> handler)\n        final T parent = handler.getParent(node);\n        final StringBuilder buf = new StringBuilder(BUF_SIZE);\n    public <T> NodeAddData<T> prepareAdd(final T root, final String key,\n            final NodeHandler<T> handler)\n        final List<QueryResult<T>> nodes =\n    private <T> JXPathContext createContext(final T root, final NodeHandler<T> handler)\n    <T> NodeAddData<T> createNodeAddData(final String path,\n            final QueryResult<T> parentNodeResult)\n        final List<String> pathNodes = new LinkedList<>();\n        final StringTokenizer tok =\n            final String token = tok.nextToken();\n    private <T> String generateKeyForAdd(final T root, final String key,\n            final NodeHandler<T> handler)\n            final String keyExisting = key.substring(0, pos);\n                final StringBuilder buf = new StringBuilder(key.length() + 1);\n    private static <T> int determineIndex(final T parent, final T child,\n            final NodeHandler<T> handler)\n    private static void invalidPath(final String path, final String msg)\n    private static int findKeySeparator(final String key)\n    private static <T> List<QueryResult<T>> convertResults(final List<?> results)\n        final List<QueryResult<T>> queryResults =\n        for (final Object res : results)\n            final QueryResult<T> queryResult = createResult(res);\n    private static <T> QueryResult<T> createResult(final Object resObj)\n",
            "src/main/java/org/apache/commons/configuration2/web/AppletConfiguration.java": "    public AppletConfiguration(final Applet applet)\n    protected Object getPropertyInternal(final String key)\n        final String[][] paramsInfo = applet.getParameterInfo();\n        final String[] keys = new String[paramsInfo != null ? paramsInfo.length : 0];\n",
            "src/main/java/org/apache/commons/configuration2/web/BaseWebConfiguration.java": "    protected boolean containsKeyInternal(final String key)\n    protected void clearPropertyDirect(final String key)\n    protected void addPropertyDirect(final String key, final Object obj)\n            final Collection<String> values =\n",
            "src/main/java/org/apache/commons/configuration2/web/ServletConfiguration.java": "    public ServletConfiguration(final Servlet servlet)\n    public ServletConfiguration(final ServletConfig config)\n    protected Object getPropertyInternal(final String key)\n        final Enumeration<String> en = config.getInitParameterNames();\n",
            "src/main/java/org/apache/commons/configuration2/web/ServletContextConfiguration.java": "    public ServletContextConfiguration(final Servlet servlet)\n    public ServletContextConfiguration(final ServletContext context)\n    protected Object getPropertyInternal(final String key)\n        final Enumeration<String> en = context.getInitParameterNames();\n",
            "src/main/java/org/apache/commons/configuration2/web/ServletFilterConfiguration.java": "    public ServletFilterConfiguration(final FilterConfig config)\n    protected Object getPropertyInternal(final String key)\n        final Enumeration<String> en = config.getInitParameterNames();\n",
            "src/main/java/org/apache/commons/configuration2/web/ServletRequestConfiguration.java": "    public ServletRequestConfiguration(final ServletRequest request)\n    protected Object getPropertyInternal(final String key)\n        final String[] values = request.getParameterValues(key);\n            final List<Object> result = new ArrayList<>(values.length);\n            for (final String value : values)\n                final Object val = handleDelimiters(value);\n        final Map<String, ?> parameterMap = request.getParameterMap();\n",
            "src/test/java/org/apache/commons/configuration2/BaseNonStringProperties.java": "        final boolean booleanValue = conf.getBoolean(\"test.boolean\");\n        final byte testValue = 10;\n        final byte byteValue = conf.getByte(\"test.byte\");\n        final double testValue = 10.25;\n        final double doubleValue = conf.getDouble(\"test.double\");\n        final float testValue = (float) 20.25;\n        final float floatValue = conf.getFloat(\"test.float\");\n        final int intValue = conf.getInt(\"test.integer\");\n        final long longValue = conf.getLong(\"test.long\");\n        final short shortValue = conf.getShort(\"test.short\");\n",
            "src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java": "    public static void assertConfigurationEquals(final ImmutableConfiguration expected, final ImmutableConfiguration actual)\n        for (final Iterator<String> it = expected.getKeys(); it.hasNext();)\n            final String key = it.next();\n        for (final Iterator<String> it = actual.getKeys(); it.hasNext();)\n            final String key = it.next();\n    public static File getTestFile(final String name)\n    public static File getOutFile(final String name)\n    public static URL getTestURL(final String name)\n    public static URL getOutURL(final String name)\n    public static void checkEquals(final Object o1, final Object o2, final boolean expEquals)\n    public static List<String> keysToList(final ImmutableConfiguration config)\n        final List<String> keyList = new LinkedList<>();\n    public static Set<String> keysToSet(final ImmutableConfiguration config)\n        final Set<String> keySet = new HashSet<>();\n    public static void appendKeys(final ImmutableConfiguration config,\n            final Collection<String> collection)\n        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n    private static URL urlFromFile(final File file)\n        catch (final MalformedURLException mex)\n",
            "src/test/java/org/apache/commons/configuration2/DatabaseConfigurationTestHelper.java": "    public void setAutoCommit(final boolean autoCommit)\n        final File script = ConfigurationAssert.getTestFile(\"testdb.script\");\n    public DatabaseBuilderParameters setUpMultiParameters(final String configName)\n    public <T extends DatabaseConfiguration> T createConfig(final Class<T> configCls,\n            final DatabaseBuilderParameters params) throws ConfigurationException\n    public <T extends DatabaseConfiguration> T setUpConfig(final Class<T> configCls)\n            final Class<T> configCls, final String configName)\n            catch (final Exception ex)\n        final BasicDataSource ds = new BasicDataSource();\n        final Connection conn = ds.getConnection();\n        final IDatabaseConnection connection = new DatabaseConnection(conn);\n        final IDataSet dataSet = new XmlDataSet(new FileInputStream(\n",
            "src/test/java/org/apache/commons/configuration2/FileURLStreamHandler.java": "    protected URLConnection openConnection(final URL u) throws IOException\n",
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java": "    public static void testGetInterpolator(final AbstractConfiguration config)\n        final ConfigurationInterpolator interpol = config.getInterpolator();\n            public Object lookup(final String varName)\n            final AbstractConfiguration config)\n        final Configuration c = config.interpolatedConfiguration();\n        final List<?> lst = (List<?>) c.getProperty(\"inttest.list\");\n    public static void testInterpolation(final Configuration config)\n        final String unInterpolatedValue = \"${applicationRoot2}/db/hypersonic\";\n        final String dbProp = \"/home/applicationRoot/db/hypersonic\";\n        final String[] arrayInt = config.getStringArray(\"arrayInt\");\n    public static void testInterpolationConstants(final Configuration config)\n    public static void testInterpolationEnvironment(final Configuration config)\n        final Map<String, String> env = System.getenv();\n        for (final Map.Entry<String, String> e : env.entrySet())\n        for (final Map.Entry<String, String> e : env.entrySet())\n    public static void testInterpolationEscaped(final Configuration config)\n    public static void testInterpolationLoop(final Configuration config)\n        catch (final IllegalStateException e)\n    public static void testInterpolationSubset(final Configuration config)\n        final Configuration subset = config.subset(\"test\");\n    public static void testInterpolationSystemProperties(final Configuration config)\n        final String[] sysProperties =\n    public static void testInterpolationUnknownProperty(final Configuration config)\n    public static void testMultipleInterpolation(final Configuration config)\n        final String expectedValue = \"/base-level/first-level/second-level/third-level\";\n",
            "src/test/java/org/apache/commons/configuration2/Logging.java": "        catch (final Exception ex)\n        final String level = System.getProperty(\"LogLevel\");\n            final org.apache.log4j.Logger log = org.apache.log4j.Logger.getRootLogger();\n            final Appender appender = new ConsoleAppender(new PatternLayout(\"%p %l - %m%n\"), ConsoleAppender.SYSTEM_OUT);\n    public Logging(final String name)\n    public Logging(final org.apache.log4j.Logger logger)\n    public void trace(final Object message)\n    public void trace(final Object message, final Throwable t)\n    public void debug(final Object message)\n    public void debug(final Object message, final Throwable t)\n    public void info(final Object message)\n    public void info(final Object message, final Throwable t)\n    public void warn(final Object message)\n    public void warn(final Object message, final Throwable t)\n    public void error(final Object message)\n    public void error(final Object message, final Throwable t)\n    public void fatal(final Object message)\n    public void fatal(final Object message, final Throwable t)\n",
            "src/test/java/org/apache/commons/configuration2/MockInitialContextFactory.java": "    public Context getInitialContext(@SuppressWarnings(\"rawtypes\") final Hashtable env) throws NamingException\n        final boolean useCycles = env.containsKey(PROP_CYCLES);\n        final Mock mockTopCtx = createCtxMock(PREFIX);\n        final Mock mockCycleCtx = createCtxMock(\"\");\n        final Mock mockPrfxCtx = createCtxMock(\"\");\n        final Mock mockBaseCtx = new Mock(Context.class);\n            final Mock mockEnum = createEnumMock(mockCycleCtx, PROP_NAMES,\n    private Mock createCtxMock(final String prefix)\n        final Mock mockCtx = new Mock(Context.class);\n            final String errProp = (prefix.length() > 0) ? PROP_NAMES[i] : PREFIX\n        for (final String element : MISSING_NAMES) {\n    private void bind(final Mock mockCtx, final String name, final String value)\n    private void bindError(final Mock mockCtx, final String name)\n    private Mock createEnumMock(final Mock mockCtx, final String[] names, final Object[] values,\n            final boolean close)\n        final Mock mockEnum = new Mock(NamingEnumeration.class);\n    private Mock createEnumMock(final Mock mockCtx, final String[] names, final Object[] values)\n    private void addEnumPair(final Mock mockEnum, final String name, final Object value)\n        final NameClassPair ncp = new NameClassPair(name, value.getClass().getName());\n    private void closeEnum(final Mock mockEnum)\n",
            "src/test/java/org/apache/commons/configuration2/NonCloneableConfiguration.java": "    protected void addPropertyDirect(final String key, final Object value)\n    protected boolean containsKeyInternal(final String key)\n    protected Object getPropertyInternal(final String key)\n    protected void clearPropertyDirect(final String key)\n",
            "src/test/java/org/apache/commons/configuration2/NonStringTestHolder.java": "    public void setConfiguration(final Configuration configuration)\n        final boolean booleanValue = configuration.getBoolean(\"test.boolean\");\n        final boolean booleanValue = configuration.getBoolean(\"test.boolean.missing\", true);\n        final Boolean booleanObject = configuration.getBoolean(\"test.boolean.missing\", new Boolean(true));\n        final byte testValue = 10;\n        final byte byteValue = configuration.getByte(\"test.byte\");\n        final double testValue = 10.25;\n        final double doubleValue = configuration.getDouble(\"test.double\");\n        final double testValue = 10.25;\n        final double doubleValue = configuration.getDouble(\"test.double.missing\", 10.25);\n        final float testValue = (float) 20.25;\n        final float floatValue = configuration.getFloat(\"test.float\");\n        final float testValue = (float) 20.25;\n        final float floatValue = configuration.getFloat(\"test.float.missing\", testValue);\n        final int intValue = configuration.getInt(\"test.integer\");\n        final int intValue = configuration.getInt(\"test.integer.missing\", 10);\n        final long longValue = configuration.getLong(\"test.long\");\n        final long longValue = configuration.getLong(\"test.long.missing\", 1000000);\n        final short shortValue = configuration.getShort(\"test.short\");\n        final short shortValue = configuration.getShort(\"test.short.missing\", (short) 1);\n        final List<?> list = configuration.getList(\"missing.list\");\n        final Configuration subset = configuration.subset(\"test\");\n        final Iterator<String> it = subset.getKeys();\n            final String key = it.next();\n",
            "src/test/java/org/apache/commons/configuration2/SynchronizerTestImpl.java": "    public void verify(final Methods... expMethods)\n    public void verifyStart(final Methods... expMethods)\n    public void verifyEnd(final Methods... expMethods)\n    public void verifyContains(final Methods... expMethods)\n    private String constructExpectedMethods(final Methods... expMethods)\n        final StringBuilder buf = new StringBuilder();\n        for (final Methods m : expMethods)\n    private void append(final Methods m)\n",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfiguration.java": "        final Configuration config = getConfiguration();\n        final Configuration config = getConfiguration();\n        final List<?> list = config.getList(\"list\");\n        final AbstractConfiguration config = getConfiguration();\n        final List<Object> list = config.getList(\"key3\");\n        final List<Object> expected = new ArrayList<>();\n        final Configuration config = getConfiguration();\n        final Configuration config = getConfiguration();\n        final Configuration config = getConfiguration();\n        final Configuration config = getConfiguration();\n        final Iterator<String> keys = config.getKeys();\n        final List<String> expectedKeys = new ArrayList<>();\n        final List<String> actualKeys = new ArrayList<>();\n        final AbstractConfiguration config = getEmptyConfiguration();\n        final ConfigurationLogger log = new ConfigurationLogger(config.getClass());\n        final Configuration config = getConfiguration();\n        catch (final ConversionException cex)\n",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java": "        final AbstractConfiguration config = new TestConfigurationImpl(\n                final Collection<String> keyCol = new ArrayList<>();\n                final String[] keys = keyCol.toArray(new String[keyCol.size()]);\n        final AbstractConfiguration config = new TestConfigurationImpl(\n        final AbstractConfiguration config = new TestConfigurationImpl(\n    private void checkAddListProperty(final AbstractConfiguration config)\n        final Object[] lstValues1 = new Object[]\n        final Object[] lstValues2 = new Object[]\n        final List<Object> lst = config.getList(\"test\");\n        final AbstractConfiguration config = setUpDestConfig();\n        final Configuration srcConfig = setUpSourceConfig();\n            final String key = KEY_PREFIX + i;\n        final Configuration srcConfig = setUpSourceConfig();\n        final AbstractConfiguration config = setUpDestConfig();\n        final AbstractConfiguration config = setUpDestConfig();\n        final Configuration srcConfig = setUpSourceConfig();\n        final CollectingConfigurationListener l = new CollectingConfigurationListener();\n        final AbstractConfiguration config = setUpDestConfig();\n        final BaseConfiguration srcConfig = new BaseConfiguration();\n        final BaseConfiguration dstConfig = new BaseConfiguration();\n        final AbstractConfiguration config = setUpDestConfig();\n        final Configuration srcConfig = setUpSourceConfig();\n            final String key = KEY_PREFIX + i;\n                final List<Object> values = config.getList(key);\n        final AbstractConfiguration config = setUpDestConfig();\n        final AbstractConfiguration config = setUpDestConfig();\n        final Configuration srcConfig = setUpSourceConfig();\n        final CollectingConfigurationListener l = new CollectingConfigurationListener();\n        final AbstractConfiguration config = setUpDestConfig();\n        final BaseConfiguration srcConfig = new BaseConfiguration();\n        final BaseConfiguration dstConfig = new BaseConfiguration();\n        final AbstractConfiguration config = new TestConfigurationImpl(\n        final Lookup look = EasyMock.createMock(Lookup.class);\n        final AbstractConfiguration config =\n        final int count = config.getInterpolator().getLookups().size();\n        final Map<String, Lookup> lookups = new HashMap<>();\n        final Map<String, Lookup> lookups2 = config.getInterpolator().getLookups();\n        final Lookup look = EasyMock.createMock(Lookup.class);\n        final AbstractConfiguration config =\n        final Map<String, Lookup> lookups = config.getInterpolator().getLookups();\n        final Lookup look = EasyMock.createMock(Lookup.class);\n        final AbstractConfiguration config =\n        final List<Lookup> lookups = config.getInterpolator().getDefaultLookups();\n        final Lookup look = EasyMock.createMock(Lookup.class);\n        final AbstractConfiguration config =\n        final List<Lookup> lookups = config.getInterpolator().getDefaultLookups();\n        final AbstractConfiguration config =\n        final List<Lookup> defLookups = config.getInterpolator().getDefaultLookups();\n        final ConfigurationInterpolator parent =\n        final AbstractConfiguration config =\n        final ConfigurationInterpolator ci = config.getInterpolator();\n        final ConfigurationInterpolator parent =\n        final AbstractConfiguration config =\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final String[] values = {\"some\", \"test\", \"values\"};\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final List<String> values = Arrays.asList(\"some\", \"test\", \"values\");\n        final BaseConfiguration config = new BaseConfiguration();\n        final String[] array = config.getStringArray(KEY_PREFIX);\n    private void checkGetListScalar(final Object value)\n        final BaseConfiguration config = new BaseConfiguration();\n        final List<Object> lst = config.getList(KEY_PREFIX);\n    private void checkGetStringArrayScalar(final Object value)\n        final BaseConfiguration config = new BaseConfiguration();\n        final String[] array = config.getStringArray(KEY_PREFIX);\n        final BaseConfiguration config = new BaseConfiguration();\n        final BaseConfiguration config = new BaseConfiguration();\n        final BaseConfiguration config = new BaseConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config2 = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final ConversionHandler handler = new DefaultConversionHandler();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final Integer value = 20130816;\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final Integer defaultValue = 2121;\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final Integer defaultValue = 2121;\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final Integer[] expected = new Integer[PROP_COUNT];\n        final Integer[] result = config.get(Integer[].class, KEY_PREFIX);\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final short[] expected = new short[PROP_COUNT];\n        final short[] result =\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final int[] defValue = {\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n    private static List<Integer> prepareListTest(final PropertiesConfiguration config)\n        final List<Integer> expected = new ArrayList<>(PROP_COUNT);\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final List<Integer> expected = prepareListTest(config);\n        final List<Integer> result = config.getList(Integer.class, KEY_PREFIX);\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final List<Integer> defValue = Arrays.asList(1, 2, 3);\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final List<Integer> expected = prepareListTest(config);\n        final List<Integer> result = new ArrayList<>(PROP_COUNT);\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final List<Integer> expected = prepareListTest(config);\n        final Collection<Integer> result = config.getCollection(Integer.class, KEY_PREFIX, null, new ArrayList<Integer>());\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final List<Integer> result = new ArrayList<>(1);\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final List<Integer> result = new ArrayList<>();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final List<Integer> defValue = Arrays.asList(1, 2, 4, 8, 16, 32);\n        final Collection<Integer> result = config.getCollection(Integer.class, KEY_PREFIX, null, defValue);\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final ConfigurationDecoder decoder =\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final ConfigurationDecoder decoder =\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final ConfigurationDecoder decoder =\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final AbstractConfiguration config =\n        final BaseConfiguration config = new BaseConfiguration();\n        final AbstractConfiguration config = new TestConfigurationImpl(\n    private void checkListProperties(final Configuration config)\n    private void checkCopyEvents(final CollectingConfigurationListener l,\n            final Configuration src, final EventType<?> eventType)\n        final Map<String, ConfigurationEvent> events = new HashMap<>();\n        for (final ConfigurationEvent e : l.events)\n        for (final Iterator<String> it = src.getKeys(); it.hasNext();)\n            final String key = it.next();\n        public TestConfigurationImpl(final AbstractConfiguration wrappedConfig)\n        protected void addPropertyDirect(final String key, final Object value)\n        protected boolean containsKeyInternal(final String key)\n        protected Object getPropertyInternal(final String key)\n        protected void clearPropertyDirect(final String key)\n        public void onEvent(final ConfigurationEvent event)\n",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationSynchronization.java": "        final PropertiesConfiguration c = new PropertiesConfiguration();\n        final AbstractConfiguration subset =\n        final Configuration config2 = EasyMock.createStrictMock(Configuration.class);\n        final Configuration config2 = prepareConfigurationMockForCopy();\n        final Configuration config2 = prepareConfigurationMockForCopy();\n",
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java": "        final ImmutableNode root =\n        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder(1);\n        final ImmutableNode.Builder nodeBuilder = new ImmutableNode.Builder(1);\n    private static void checkGetProperty(final AbstractHierarchicalConfiguration<?> testConfig)\n            final String name = config.getString(\"indexList.index(\" + idx\n            final String name = config.getString(\"indexList.index(\" + idx\n        final List<String> keys = new ArrayList<>();\n        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n        final Iterator<String> it = config.getKeys(\"order\");\n        final Set<String> keys = new HashSet<>();\n        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n        final Iterator<String> itKeys = config.getKeys(\"tables.table[@type]\");\n        final Iterator<String> it = config.getKeys(\"order.key1\");\n        final Iterator<String> it = config.getKeys(\"order.key1\");\n        final List<?> list = (List<?>) prop;\n        final DefaultConfigurationKey key = createConfigurationKey();\n        final int maxIdx = config.getMaxIndex(\"tables.table(0).fields.field.name\");\n            final DefaultConfigurationKey key =\n        final Configuration copy = (Configuration) config.clone();\n        final EventListener<ConfigurationEvent> l = new EventListenerTestImpl(null);\n        final AbstractHierarchicalConfiguration<?> copy =\n        final Configuration clone = (Configuration) config.clone();\n        final Collection<ImmutableNode> nodes = new ArrayList<>();\n        final Collection<ImmutableNode> nodes = new ArrayList<>();\n        final ImmutableNode newNode =\n        final Collection<ImmutableNode> nodes = new ArrayList<>();\n        final AbstractHierarchicalConfigurationTestImpl configDest =\n        final Collection<ImmutableNode> nodes = getRootNode().getChildren();\n            final String keyTab = \"newNodes.tables.table(\" + i + \").\";\n        final Configuration sub = config.subset(\"test.absolute.dir\");\n        final Configuration sub1 = config.subset(\"prop2\");\n        final Configuration sub2 = sub1.subset(\"prop\");\n        final AbstractHierarchicalConfiguration<?> c = (AbstractHierarchicalConfiguration<?>) InterpolationTestHelper\n        final BaseHierarchicalConfiguration copy =\n        final List<ImmutableNode> nodes =\n        final String attrKey = \"tables.table(0)[@type]\";\n        final Map<ImmutableNode, String> cache = new HashMap<>();\n        final ImmutableNode nodeTabName =\n        final ImmutableNode nodeFldName =\n        final Map<ImmutableNode, String> cache = new HashMap<>();\n        final ImmutableNode nodeTabName =\n        final NodeHandler<ImmutableNode> handler = config.getModel().getNodeHandler();\n        final Map<ImmutableNode, String> cache = new HashMap<>();\n        final ImmutableNode nodeTabName =\n        final NodeHandler<ImmutableNode> handler = config.getModel().getNodeHandler();\n        final Map<ImmutableNode, String> cache = new HashMap<>();\n        final Map<ImmutableNode, String> cache = new HashMap<>();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final NodeModel<ImmutableNode> model = config.getNodeModel();\n        final ImmutableNode rootNode = model.getNodeHandler().getRootNode();\n    private void checkKeys(final String prefix, final String[] expected)\n        final Set<String> values = new HashSet<>();\n        for (final String anExpected : expected) {\n        final Iterator<String> itKeys = config.getKeys(prefix);\n            final String key = itKeys.next();\n        final Set<String> keys = ConfigurationAssert.keysToSet(config);\n    private static void checkContent(final Configuration c)\n        public AbstractHierarchicalConfigurationTestImpl(final InMemoryNodeModel model)\n        public SubnodeConfiguration configurationAt(final String key,\n                final boolean supportUpdates)\n        public SubnodeConfiguration configurationAt(final String key)\n        public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key)\n        public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key, final boolean supportUpdates) {\n        public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key)\n        public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key, final boolean supportUpdates) {\n                final String key, final boolean supportUpdates)\n                final String key)\n                final String key)\n                final String key)\n",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java": "        final byte oneB = 1;\n        final byte twoB = 2;\n        final short oneS = 1;\n        final short twoS = 2;\n        final long oneL = 1;\n        final long twoL = 2;\n        final float oneF = 1;\n        final float twoF = 2;\n        final double oneD = 1;\n        final double twoD = 2;\n        final BigDecimal number = new BigDecimal(\"123.456\");\n        final BigDecimal defaultValue = new BigDecimal(\"654.321\");\n        final BigInteger number = new BigInteger(\"1234567890\");\n        final BigInteger defaultValue = new BigInteger(\"654321\");\n        final String string = \"The quick brown fox\";\n        final String defaultValue = \"jumps over the lazy dog\";\n        final boolean boolT = true, boolF = false;\n        final List<Object> list = config.getList(\"number\");\n        final List<String> list = new ArrayList<>();\n        final String prop = \"hey, that's a test\";\n        final List<Object> list = config.getList(\"prop.string\");\n        final String prop2 = \"hey\\\\, that's a test\";\n        final Object[] data = new Object[] {\n        final Iterator<?> it = col.iterator();\n        final StringTokenizer tok = new StringTokenizer(\"The quick brown fox jumps over the lazy dog.\", \" \");\n        final Properties p = new Properties();\n        final String prop = \"hey, that's a test\";\n        final String prop2 = \"hey\\\\, that's a test\";\n        final ConfigurationInterpolator interpolator =\n        final Lookup prefixLookup = EasyMock.createMock(Lookup.class);\n        final Lookup defLookup = EasyMock.createMock(Lookup.class);\n        final Map<String, Lookup> prefixLookups = new HashMap<>();\n        final List<Lookup> defLookups = new ArrayList<>();\n        final ConfigurationInterpolator interpolator = config.getInterpolator();\n        final List<Lookup> defLookups2 = interpolator.getDefaultLookups();\n        final String var = \"testVariable\";\n        final Object value = 42;\n        final BaseConfiguration config2 = (BaseConfiguration) config.clone();\n        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n            final String key = it.next();\n        final EventListener<ConfigurationEvent> l = new EventListenerTestImpl(config);\n        final BaseConfiguration config2 = (BaseConfiguration) config.clone();\n        final BaseConfiguration config2 = (BaseConfiguration) config.clone();\n        final BaseConfiguration clone = (BaseConfiguration) config.clone();\n",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfigurationXMLReader.java": "        final BaseConfigurationXMLReader reader = new BaseConfigurationXMLReader();\n        final BaseConfigurationXMLReader reader = new BaseConfigurationXMLReader(config);\n    private void checkDocument(final BaseConfigurationXMLReader creader,\n    final String rootName) throws Exception\n        final SAXSource source = new SAXSource(creader, new InputSource());\n        final DOMResult result = new DOMResult();\n        final Transformer trans = TransformerFactory.newInstance().newTransformer();\n        final Node root = ((Document) result.getNode()).getDocumentElement();\n        final JXPathContext ctx = JXPathContext.newContext(root);\n    private void check(final JXPathContext ctx, final String path, final String[] values)\n        final Iterator<?> it = ctx.iterate(path);\n        for (final String value : values) {\n    private void check(final JXPathContext ctx, final String path, final String value)\n        public void characters(final char[] ch, final int start, final int length)\n",
            "src/test/java/org/apache/commons/configuration2/TestBaseHierarchicalConfigurationSynchronization.java": "        final XMLConfiguration c = new XMLConfiguration();\n        final BaseHierarchicalConfiguration clone =\n        final ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", \"true\");\n        final BaseHierarchicalConfiguration copy =\n        final HierarchicalConfiguration<ImmutableNode> sub = config.configurationAt(\"element2\");\n        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n    private static boolean isDetached(final HierarchicalConfiguration<ImmutableNode> c)\n        final InMemoryNodeModel nodeModel = ((SubnodeConfiguration) c).getRootNodeModel();\n        final HierarchicalConfiguration<ImmutableNode> sub =\n        final HierarchicalConfiguration<ImmutableNode> subsub =\n        final HierarchicalConfiguration<ImmutableNode> sub =\n        final HierarchicalConfiguration<ImmutableNode> subsub =\n        final HierarchicalConfiguration<ImmutableNode> sub2 =\n        final BaseHierarchicalConfiguration conf2 =\n        final HierarchicalConfiguration<ImmutableNode> sub =\n        final\n        final HierarchicalConfiguration<ImmutableNode> sub2 =\n        final Configuration subset = config.subset(\"test\");\n        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        final CountDownLatch startLatch = new CountDownLatch(1);\n        final Collection<SubNodeAccessThread> threads =\n            final SubNodeAccessThread t =\n            final SubNodeAccessThread t =\n        for (final SubNodeAccessThread t : threads)\n        public SubNodeAccessThread(final HierarchicalConfiguration<ImmutableNode> c,\n                final CountDownLatch startLatch, final String keySubConfig,\n                final String keyProperty)\n                final HierarchicalConfiguration<ImmutableNode> subConfig =\n            catch (final InterruptedException iex)\n            catch (final InterruptedException e)\n",
            "src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java": "        final byte oneB = 1;\n        final byte twoB = 2;\n        final short oneS = 1;\n        final short twoS = 2;\n        final long oneL = 1;\n        final long twoL = 2;\n        final float oneF = 1;\n        final float twoF = 2;\n        final double oneD = 1;\n        final double twoD = 2;\n        final BigDecimal number = new BigDecimal(\"123.456\");\n        final BigDecimal defaultValue = new BigDecimal(\"654.321\");\n        final BigInteger number = new BigInteger(\"1234567890\");\n        final BigInteger defaultValue = new BigInteger(\"654321\");\n        final String string = new String(\"The quick brown fox\");\n        final String defaultValue = new String(\"jumps over the lazy dog\");\n        final boolean boolT = true, boolF = false;\n        final List<Object> list = config.getList(\"number\");\n        final String prop = \"hey, that's a test\";\n        final List<Object> list = config.getList(\"prop.string\");\n        final String prop2 = \"hey\\\\, that's a test\";\n        final Properties p = new Properties();\n        final String prop = \"hey, that's a test\";\n        final String prop2 = \"hey\\\\, that's a test\";\n        final String unInterpolatedValue = \"${applicationRoot2}/db/hypersonic\";\n        final String dbProp = \"/home/applicationRoot/db/hypersonic\";\n        final BaseConfiguration superProp = config;\n        final String[] arrayInt = superProp.getStringArray(\"arrayInt\");\n        final String expectedValue =\n",
            "src/test/java/org/apache/commons/configuration2/TestCatalogResolver.java": "    private void load(final String fileName) throws ConfigurationException\n        final FileHandler handler = new FileHandler(config);\n        final ConfigurationLogger log = new ConfigurationLogger(this.getClass());\n",
            "src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java": "        final AbstractConfiguration c = setUpTestConfiguration();\n        final AbstractConfiguration c = setUpTestConfiguration();\n        final Set<String> names = config.getConfigurationNames();\n        final AbstractConfiguration c = setUpTestConfiguration();\n        final AbstractConfiguration c = setUpTestConfiguration();\n    private void checkAddConfig(final AbstractConfiguration c)\n        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n        final AbstractConfiguration c = setUpTestConfiguration();\n        final AbstractConfiguration c = setUpTestConfiguration();\n        final AbstractConfiguration c = setUpTestConfiguration();\n        final AbstractConfiguration c = setUpTestConfiguration();\n        final AbstractConfiguration c = setUpTestConfiguration();\n    private void checkRemoveConfig(final AbstractConfiguration c)\n        final AbstractConfiguration c = setUpTestConfiguration();\n        final NodeCombiner combiner = new UnionCombiner();\n        final CombinedConfiguration cc2 = (CombinedConfiguration) config.clone();\n        final StrictConfigurationComparator comp = new StrictConfigurationComparator();\n        final CombinedConfiguration cc2 = (CombinedConfiguration) config.clone();\n        final AbstractConfiguration child = setUpTestConfiguration();\n        for (final EventListener<?> listener : child\n        final BaseHierarchicalConfiguration c1 = new BaseHierarchicalConfiguration();\n        final PropertiesConfiguration c2 = new PropertiesConfiguration();\n        final CombinedConfiguration cc = new CombinedConfiguration();\n        final Set<Configuration> sources = config.getSources(key);\n        final PropertiesConfiguration sub = new PropertiesConfiguration();\n        final PropertiesConfiguration child = new PropertiesConfiguration();\n        final DefaultExpressionEngine engineQuery =\n        final DefaultExpressionEngine engineConvert =\n        final AbstractConfiguration pc = new PropertiesConfiguration();\n        final List<Configuration> list = config.getConfigurations();\n        final Configuration c = list.get(2);\n        final AbstractConfiguration pc = new PropertiesConfiguration();\n        final List<String> list = config.getConfigurationNameList();\n        final String name = list.get(1);\n        final XMLConfiguration x1 = new XMLConfiguration();\n        final XMLConfiguration x2 = new XMLConfiguration();\n        final StringWriter w = new StringWriter();\n        final String s = w.toString();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final SynchronizerTestImpl sync = setUpSynchronizerTest();\n        final BaseHierarchicalConfiguration childEx =\n        catch (final Exception ex)\n        final XMLConfiguration xmlConf = new XMLConfiguration();\n        final PropertiesConfiguration propConf = new PropertiesConfiguration();\n        final Synchronizer sync = new ReadWriteSynchronizer();\n        for (final Configuration c : config.getConfigurations())\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger errorCount = new AtomicInteger();\n        final Collection<Thread> threads = new ArrayList<>(numberOfReaders + 1);\n        final Thread writeThread =\n            final Thread readThread =\n        for (final Thread t : threads)\n        final AbstractConfiguration srcConfig = setUpTestConfiguration();\n        final AbstractConfiguration srcConfig = setUpSubConfigTest();\n        final HierarchicalConfiguration<ImmutableNode> sub =\n    private void checkConfigurationsAt(final boolean withUpdates)\n        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        public void onEvent(final ConfigurationEvent event)\n        public void checkEvent(final int expectedInvalidate, final int expectedOthers)\n        public ReadThread(final Configuration readConfig, final CountDownLatch latch,\n                final AtomicInteger errCnt, final int readCount)\n            catch (final Exception e)\n            final List<Object> values = config.getList(KEY_CONCURRENT);\n                for (final Object value : values)\n        public WriteThread(final CombinedConfiguration cc, final CountDownLatch latch,\n                final AtomicInteger errCnt, final int writeCount)\n            catch (final InterruptedException e)\n            final int newIdx = (currentChildConfigIdx + 1) % testConfigs.size();\n",
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java": "        final ListDelimiterHandler listHandler = new LegacyListDelimiterHandler(',');\n        final FileHandler handler1 = new FileHandler(conf1);\n        final FileHandler handler2 = new FileHandler(conf2);\n        final FileHandler handler3 = new FileHandler(xmlConf);\n        final List<Object> l = cc.getList(\"packages\");\n        final Configuration internal = cc.getConfiguration(0);\n        catch (final NoSuchElementException nsee)\n        final Configuration subset = cc.subset(\"subset\");\n        final List<Object> defaultList = new ArrayList<>();\n        final Configuration conf1 = new BaseConfiguration();\n        final Configuration conf2 = new BaseConfiguration();\n        final List<String> orderedList = new ArrayList<>();\n        for (final Iterator<String> keys = conf1.getKeys(); keys.hasNext();)\n        final List<String> iteratedList = new ArrayList<>();\n        for (final Iterator<String> keys = cc.getKeys(); keys.hasNext();)\n        final List<String> orderedList = new ArrayList<>();\n        for (final Iterator<String> keys = conf1.getKeys(\"test\"); keys.hasNext();)\n        final List<String> iteratedList = new ArrayList<>();\n        for (final Iterator<String> keys = cc.getKeys(\"test\"); keys.hasNext();)\n        final BaseConfiguration defaults = new BaseConfiguration();\n        final CompositeConfiguration c = new CompositeConfiguration(defaults);\n        catch (final NoSuchElementException e)\n        catch (final Exception e)\n        final String TEST_KEY = \"testKey\";\n        final Configuration defaults = new PropertiesConfiguration();\n        final Configuration testConfiguration = new CompositeConfiguration(defaults);\n        final Iterator<String> i = testConfiguration.getKeys();\n            final String key = i.next();\n        final CompositeConfiguration config = new CompositeConfiguration();\n        final String[] array = config.getStringArray(\"list\");\n        final PropertiesConfiguration c1 = new PropertiesConfiguration();\n        final PropertiesConfiguration c2 = new PropertiesConfiguration();\n        final List<Object> lst = cc.getList(\"c1.value\");\n        final Collection<Configuration> configs = new ArrayList<>();\n        final CompositeConfiguration config = new CompositeConfiguration(configs);\n        final CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();\n        final StrictConfigurationComparator comp = new StrictConfigurationComparator();\n        final CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();\n        final CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();\n        final EventListenerTestImpl listener = new EventListenerTestImpl(cc);\n        final EventListenerTestImpl listener = new EventListenerTestImpl(cc);\n        final String key = \"configuration.loaded\";\n        final EventListenerTestImpl listener = new EventListenerTestImpl(cc);\n        final AbstractConfiguration config =\n        final DefaultListDelimiterHandler listHandler =\n        final PropertiesConfiguration p = new PropertiesConfiguration();\n        final List<Object> lst = cc.getList(\"bar\");\n        final String[] values = cc.getStringArray(\"bar\");\n        final Configuration c1 = new PropertiesConfiguration();\n        final Configuration c2 = new PropertiesConfiguration();\n        final Configuration props = new PropertiesConfiguration();\n        final String[] values = { \"a\", \"property\", \"with\", \"multiple\", \"values\" };\n        final Configuration inMemoryConfig = EasyMock.createMock(Configuration.class);\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final SynchronizerTestImpl sync = installSynchronizer();\n        final SynchronizerTestImpl sync = installSynchronizer();\n        final SynchronizerTestImpl sync = installSynchronizer();\n        final SynchronizerTestImpl sync = installSynchronizer();\n        final SynchronizerTestImpl sync = installSynchronizer();\n",
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfigurationNonStringProperties.java": "        final CompositeConfiguration cc = new CompositeConfiguration();\n        final PropertiesConfiguration pc = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(pc);\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationConverter.java": "        final Properties props = new Properties();\n        final AbstractConfiguration config =\n        final List<Object> item1 = config.getList(\"list\");\n        final BaseConfiguration config = new BaseConfiguration();\n        final BaseConfiguration config = createTestConfiguration();\n        final Properties props = ConfigurationConverter.getProperties(config);\n        final BaseConfiguration config = createTestConfiguration();\n        final Properties props = ConfigurationConverter.getProperties(config);\n        final Configuration src = EasyMock.createMock(Configuration.class);\n                final String key = (String) EasyMock.getCurrentArguments()[0];\n        final Properties props = ConfigurationConverter.getProperties(src);\n        final BaseConfiguration config = new BaseConfiguration();\n        final Properties props = ConfigurationConverter.getProperties(config);\n        final Configuration config = new BaseConfiguration();\n        final Map<Object, Object> map = ConfigurationConverter.getMap(config);\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationLookup.java": "        final Configuration conf = new BaseConfiguration();\n        final ConfigurationLookup lookup = new ConfigurationLookup(conf);\n        final Configuration conf = new BaseConfiguration();\n        final ConfigurationLookup lookup = new ConfigurationLookup(conf);\n        final BaseConfiguration conf = new BaseConfiguration();\n        final ConfigurationLookup lookup = new ConfigurationLookup(conf);\n        final Configuration conf = new BaseConfiguration();\n        final ConfigurationLookup lookup = new ConfigurationLookup(conf);\n        final Collection<?> col = (Collection<?>) lookup.lookup(VAR);\n        final Iterator<?> it = col.iterator();\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationMap.java": "        final BaseConfiguration configuration = new BaseConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationSet.java": "        final BaseConfiguration configuration = new BaseConfiguration();\n        final Iterator<Map.Entry<Object, Object>> iterator = set.iterator();\n            final Map.Entry<Object, Object> entry = iterator.next();\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java": "        final Configuration config = new BaseConfiguration();\n        final String lineSeparator = System.getProperty(\"line.separator\");\n        final Configuration conf1 = new BaseConfiguration();\n        final Configuration conf2 = new BaseConfiguration();\n        final Configuration conf1 = new BaseConfiguration();\n        final Configuration conf2 = new BaseConfiguration();\n        final Configuration conf = new BaseConfiguration();\n        final BaseHierarchicalConfiguration hc =\n        for (final Iterator<String> it = conf.getKeys(); it.hasNext();)\n            final String key = it.next();\n        final Configuration conf = new BaseHierarchicalConfiguration();\n        final BaseConfiguration conf = new BaseConfiguration();\n        final HierarchicalConfiguration<?> hc = ConfigurationUtils\n        final Configuration conf = new BaseConfiguration();\n        final DefaultExpressionEngine engine =\n        final HierarchicalConfiguration<?> hc = ConfigurationUtils\n        final BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();\n        final ExpressionEngine engine =\n        final BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();\n        final ExpressionEngine engine =\n        final BaseConfiguration config = new BaseConfiguration();\n        final HierarchicalConfiguration<?> hc = ConfigurationUtils\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final\n        final ImmutableNode rootNode = hc.getNodeModel().getNodeHandler().getRootNode();\n        final ImmutableNode nodeX = rootNode.getChildren().get(0);\n        final BaseHierarchicalConfiguration conf = new BaseHierarchicalConfiguration();\n        final BaseHierarchicalConfiguration copy = (BaseHierarchicalConfiguration) ConfigurationUtils\n        final Configuration myNonCloneableConfig = new NonCloneableConfiguration();\n        final XMLBuilderParametersImpl params = new XMLBuilderParametersImpl();\n        final XMLBuilderParametersImpl clone =\n        final Map<String, Object> map = clone.getParameters();\n        for (final Map.Entry<String, Object> e : params.getParameters().entrySet())\n        final Long value = 20130116221714L;\n        final XMLBuilderParametersImpl params = new XMLBuilderParametersImpl()\n        final PropertiesConfiguration config = new PropertiesConfiguration()\n            protected void addPropertyDirect(final String key, final Object value)\n        final Configuration c = EasyMock.createMock(Configuration.class);\n            public Class<?> loadClass(final String name)\n        final XMLConfiguration src = new XMLConfiguration();\n        final\n        final EventSource source = ConfigurationUtils.asEventSource(this, true);\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final SynchronizerTestImpl sync2 =\n        final CloneableSynchronizer sync = new CloneableSynchronizer(false);\n        final CloneableSynchronizer sync2 =\n        public CloneableSynchronizer(final boolean clone)\n",
            "src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java": "        final BaseConfiguration baseConfig = new BaseConfiguration();\n        final List<Object> booleans = new ArrayList<>();\n        final List<Object> bytes = new ArrayList<>();\n        final List<Object> shorts = new ArrayList<>();\n        final List<Object> integers = new ArrayList<>();\n        final List<Object> longs = new ArrayList<>();\n        final List<Object> floats = new ArrayList<>();\n        final List<Object> doubles = new ArrayList<>();\n        final List<Object> bigintegers = new ArrayList<>();\n        final List<Object> bigdecimals = new ArrayList<>();\n        final String uri1 = \"http://jakarta.apache.org\";\n        final String uri2 = \"http://www.apache.org\";\n        final List<Object> uris = new ArrayList<>();\n        final String url1 = \"http://jakarta.apache.org\";\n        final String url2 = \"http://www.apache.org\";\n        final List<Object> urls = new ArrayList<>();\n        final List<Object> locales = new ArrayList<>();\n        final String color1 = \"FF0000\";\n        final String color2 = \"0000FF\";\n        final List<Object> colors = new ArrayList<>();\n        final String pattern = DATE_PATTERN;\n        final DateFormat format = new SimpleDateFormat(pattern);\n        final Date date1 = format.parse(\"2004-01-01\");\n        final Date date2 = format.parse(\"2004-12-31\");\n        final Calendar calendar1 = Calendar.getInstance();\n        final Calendar calendar2 = Calendar.getInstance();\n        final List<Object> dates = new ArrayList<>();\n        final List<Object> calendars = new ArrayList<>();\n        final Configuration baseconf = new BaseConfiguration();\n        final DataConfiguration conf = new DataConfiguration(baseconf);\n        final Configuration baseconf = new BaseConfiguration();\n        final DataConfiguration conf = new DataConfiguration(baseconf);\n        final Configuration baseconf = new BaseConfiguration();\n        final DataConfiguration conf = new DataConfiguration(baseconf);\n        final Configuration baseconf = new BaseConfiguration();\n        final DataConfiguration conf = new DataConfiguration(baseconf);\n        final Iterator<String> it = conf.getKeys();\n        final boolean[] defaultValue = new boolean[] { false, true };\n        final boolean[] expected = new boolean[] { true, false };\n        final byte[] defaultValue = new byte[] { 1, 2};\n        final byte[] expected = new byte[] { 1, 2 };\n        final short[] defaultValue = new short[] { 2, 1};\n        final short[] expected = new short[] { 1, 2 };\n        final int[] defaultValue = new int[] { 2, 1};\n        final int[] expected = new int[] { 1, 2 };\n        final long[] defaultValue = new long[] { 2, 1};\n        final long[] expected = new long[] { 1, 2 };\n        final float[] defaultValue = new float[] { 2, 1};\n        final float[] expected = new float[] { 1, 2 };\n        final double[] defaultValue = new double[] { 2, 1 };\n        final double[] expected = new double[] { 1, 2 };\n        final BigInteger[] defaultValue = new BigInteger[] { new BigInteger(\"2\"), new BigInteger(\"1\") };\n        final BigInteger[] expected = new BigInteger[] { new BigInteger(\"1\"), new BigInteger(\"2\") };\n        final List<BigInteger> bigIntegerList = conf.getBigIntegerList(\"biginteger.list\", null);\n        final BigDecimal[] defaultValue = new BigDecimal[] { new BigDecimal(\"2\"), new BigDecimal(\"1\") };\n        final BigDecimal[] expected = new BigDecimal[] { new BigDecimal(\"1\"), new BigDecimal(\"2\") };\n        final URI defaultValue = new URI(\"http://www.google.com\");\n        final URI expected = new URI(\"http://jakarta.apache.org\");\n        final URI[] defaultValue = new URI[] { new URI(\"http://www.apache.org\"), new URI(\"http://jakarta.apache.org\") };\n        final URI[] expected = new URI[] { new URI(\"http://jakarta.apache.org\"), new URI(\"http://www.apache.org\") };\n        final URL defaultValue = new URL(\"http://www.google.com\");\n        final URL expected = new URL(\"http://jakarta.apache.org\");\n        final URL[] defaultValue = new URL[] { new URL(\"http://www.apache.org\"), new URL(\"http://jakarta.apache.org\") };\n        final URL[] expected = new URL[] { new URL(\"http://jakarta.apache.org\"), new URL(\"http://www.apache.org\") };\n        final Locale[] defaultValue = new Locale[] { Locale.GERMAN, Locale.FRENCH };\n        final Locale[] expected = new Locale[] { Locale.FRENCH, Locale.GERMAN };\n        final Color color = conf.getColor(\"color\");\n        final Color[] defaultValue = new Color[] { Color.red, Color.blue };\n        final Color[] expected = new Color[] { Color.red, Color.blue };\n        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        final Date expected = expectedDate();\n        final Date defaultValue = new Date();\n        catch (final NoSuchElementException e)\n        final DefaultConversionHandler handler = new DefaultConversionHandler();\n        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        final Date date1 = format.parse(\"2004-01-01\");\n        final Date date2 = format.parse(\"2004-12-31\");\n        final Date[] defaultValue = new Date[] { date2, date1 };\n        final Date[] expected = new Date[] { date1, date2 };\n        final DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\n        final Date date1 = format.parse(\"01/01/2004\");\n        final Date date2 = format.parse(\"12/31/2004\");\n        final Date[] expected = new Date[] { date1, date2 };\n        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        final Date date1 = format.parse(\"2004-01-01\");\n        final Date date2 = format.parse(\"2004-12-31\");\n        final List<Date> nullList = null;\n        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        final Calendar defaultValue = Calendar.getInstance();\n        catch (final NoSuchElementException e)\n        final Calendar expected = Calendar.getInstance();\n        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        final Date date1 = format.parse(\"2004-01-01\");\n        final Date date2 = format.parse(\"2004-12-31\");\n        final Calendar calendar1 = Calendar.getInstance();\n        final Calendar calendar2 = Calendar.getInstance();\n        final Calendar[] defaultValue = new Calendar[] { calendar2, calendar1 };\n        final Calendar[] expected = new Calendar[] { calendar1, calendar2 };\n        final DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\n        final Date date1 = format.parse(\"01/01/2004\");\n        final Date date2 = format.parse(\"12/31/2004\");\n        final Calendar calendar1 = Calendar.getInstance();\n        final Calendar calendar2 = Calendar.getInstance();\n        final Calendar[] expected = new Calendar[] { calendar1, calendar2 };\n        final DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        final Date date1 = format.parse(\"2004-01-01\");\n        final Date date2 = format.parse(\"2004-12-31\");\n        final Calendar calendar1 = Calendar.getInstance();\n        final Calendar calendar2 = Calendar.getInstance();\n        final List<Calendar> nullList = null;\n        final InetAddress expected = InetAddress.getByName(\"127.0.0.1\");\n        final Object expected = createInternetAddress(\"ebourg@apache.org\");\n        catch (final ConversionException e)\n        final Object expected = createInternetAddress(\"ebourg@apache.org\");\n    private Object createInternetAddress(final String email) throws Exception\n        final Class<?> cls = Class.forName(\"javax.mail.internet.InternetAddress\");\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        catch (final ConversionException e)\n        final String key = \"test.str\";\n        final String value = \"someTestValue\";\n        final String key = \"test.property\";\n        final String key = \"test.property\";\n        final Configuration wrapped = EasyMock.createMock(Configuration.class);\n        final String key = \"test.property\";\n        catch (final ConversionException cex)\n",
            "src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java": "    private void setUpErrorListener(final PotentialErrorDatabaseConfiguration config)\n        final PotentialErrorDatabaseConfiguration config = setUpConfig();\n            final EventType<? extends ConfigurationErrorEvent> type,\n            final EventType<?> opType, final String key, final Object value)\n        final Throwable exception = listener.checkEvent(type, opType, key, value);\n        final DatabaseConfiguration config = helper.setUpConfig();\n        final DatabaseConfiguration config = helper.setUpConfig();\n        final DatabaseConfiguration config = helper.setUpMultiConfig();\n        final DatabaseConfiguration config = helper.setUpConfig();\n        final Configuration config = setUpConfig();\n        final Configuration config = helper.setUpMultiConfig();\n        final Configuration config = helper.setUpConfig();\n        final Configuration config = helper.setUpMultiConfig();\n        final DatabaseConfiguration config = helper.setUpMultiConfig();\n        final DatabaseConfiguration config2 =\n        final Configuration config = helper.setUpConfig();\n        final Configuration config = helper.setUpConfig();\n        final Configuration config = helper.setUpMultiConfig();\n        final Configuration config = helper.setUpConfig();\n        final Configuration config = setUpConfig();\n        final Iterator<String> it = config.getKeys();\n        final Configuration config = helper.setUpMultiConfig();\n        final Iterator<String> it = config.getKeys();\n        final Configuration config = setUpConfig();\n        final Configuration config = helper.setUpMultiConfig();\n        final Configuration config1 = setUpConfig();\n        final Configuration config1 = helper.setUpMultiConfig();\n        final Configuration config2 = helper.setUpMultiConfig(DatabaseConfiguration.class, \"testIsEmpty\");\n        final DatabaseBuilderParameters params = helper.setUpDefaultParameters().setTable(\"configurationList\");\n        final Configuration config1 = helper.createConfig(DatabaseConfiguration.class, params);\n        final List<Object> list = config1.getList(\"key3\");\n        final DatabaseBuilderParameters params = helper.setUpDefaultParameters().setTable(\"configurationList\");\n        final Configuration config1 = helper.createConfig(DatabaseConfiguration.class, params);\n        final Iterator<String> i = config1.getKeys();\n        final Object key = i.next();\n        final Configuration config = setUpConfig();\n        final Configuration subset = config.subset(\"key1\");\n        final DatabaseConfiguration config = helper.setUpConfig();\n        final Iterator<String> it = setUpErrorConfig().getKeys();\n        final DatabaseConfiguration config = setUpConfig();\n        final List<Object> values = config.getList(\"keyMulti\");\n        final DatabaseConfiguration config = setUpConfig();\n        final DatabaseConfiguration config = setUpConfig();\n        final String[] values = config.getStringArray(\"keyList\");\n        final DatabaseConfiguration config = helper.setUpMultiConfig();\n        final String[] values = config.getStringArray(\"keyList\");\n        final ResultSet rs = EasyMock.createMock(ResultSet.class);\n        final Clob clob = EasyMock.createMock(Clob.class);\n        final DatabaseConfiguration config = helper.setUpConfig();\n        final ResultSet rs = EasyMock.createMock(ResultSet.class);\n        final Clob clob = EasyMock.createMock(Clob.class);\n        final DatabaseConfiguration config = helper.setUpConfig();\n                final DataSource ds = EasyMock.createMock(DataSource.class);\n                catch (final SQLException e)\n",
            "src/test/java/org/apache/commons/configuration2/TestDynamicCombinedConfiguration.java": "        final DynamicCombinedConfiguration config = new DynamicCombinedConfiguration();\n        final DefaultListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final ConfigurationBuilder<XMLConfiguration> multiBuilder =\n        final BuilderConfigurationWrapperFactory wrapFactory =\n        final XMLConfiguration xml = new XMLConfiguration();\n        final FileHandler handler = new FileHandler(xml);\n        final CombinedConfigurationBuilder builder =\n        final CombinedConfiguration config = builder.getConfiguration();\n    private SynchronizerTestImpl prepareSynchronizerTest(final Configuration config)\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final DynamicCombinedConfiguration config =\n        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        final DynamicCombinedConfiguration config =\n        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        final DynamicCombinedConfiguration config =\n        final Configuration child = new PropertiesConfiguration();\n        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        final DynamicCombinedConfiguration config =\n        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        final DynamicCombinedConfiguration config =\n        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        final DynamicCombinedConfiguration config =\n        final String configName = \"testConfig\";\n        final SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        final CombinedConfiguration config = builder.getConfiguration();\n        final Thread testThreads[] = new Thread[THREAD_COUNT];\n        final int failures[] = new int[THREAD_COUNT];\n        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        final CombinedConfiguration config = builder.getConfiguration();\n        final Thread testThreads[] = new Thread[THREAD_COUNT];\n        final int failures[] = new int[THREAD_COUNT];\n        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        final CombinedConfiguration config = builder.getConfiguration();\n        final Thread testThreads[] = new Thread[THREAD_COUNT];\n        final int failures[] = new int[THREAD_COUNT];\n        final String[] ids = new String[] {null, \"2002\", \"3001\", \"3002\", \"3003\"};\n        final String[] expected = new String[] {\"50\", \"25\", \"15\", \"25\", \"50\"};\n        final File output = folder.newFile(\"testMultiDynamic_default.xml\");\n        final ReloadingCombinedConfigurationBuilder builder =\n        final ReaderThread testThreads[] = new ReaderThread[threadCount];\n        final String id = config.getString(\"Product/FIIndex/FI[@id='123456782']\");\n        final String rows = config.getString(\"rowsPerPage\");\n        for (final ReaderThread testThread : testThreads) {\n        for (final ReaderThread testThread : testThreads) {\n        ReloadThread(final CombinedConfigurationBuilder b, final int[] failures, final int index, final int count,\n                     final boolean useId, final String id, final String expected)\n                    final CombinedConfiguration combined = builder.getConfiguration();\n                    final String value = combined.getString(\"rowsPerPage\", null);\n                catch (final Exception ex)\n        public ReaderThread(final CombinedConfigurationBuilder b)\n                    final CombinedConfiguration combined = builder.getConfiguration();\n                    final String bcId =\n                    final int sleepTime = random.nextInt(75);\n            catch (final ConfigurationException cex)\n            catch(final InterruptedException iex)\n    private void verify(final String key, final DynamicCombinedConfiguration config, final int rows)\n    private void copyFile(final File input, final File output) throws IOException\n        final Reader reader = new FileReader(input);\n        final Writer writer = new FileWriter(output);\n        final char[] buffer = new char[4096];\n        public static void setId(final String value)\n        public String lookup(final String key)\n            final String value = System.getProperty(\"Id\");\n",
            "src/test/java/org/apache/commons/configuration2/TestEnvironmentConfiguration.java": "        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n            final String key = it.next();\n        final String key = config.getKeys().next();\n",
            "src/test/java/org/apache/commons/configuration2/TestEqualBehaviour.java": "        final String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testEqual.properties\").getAbsolutePath();\n        final PropertiesConfiguration c = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(c);\n        final CombinedConfigurationBuilder builder =\n    private void checkEquality(final String msg, final Configuration c1, final Configuration c2)\n        final Iterator<String> it1 = c1.getKeys();\n        final Iterator<String> it2 = c2.getKeys();\n            final String key1 = it1.next();\n            final String key2 = it2.next();\n    private void checkSameKey(final String msg, final String key, final Configuration c1, final Configuration c2)\n        final String [] s1 = c1.getStringArray(key);\n        final String [] s2 = c2.getStringArray(key);\n        final List<Object> list1 = c1.getList(key);\n        final List<Object> list2 = c2.getList(key);\n        final Iterator<Object> it1 = list1.iterator();\n        final Iterator<Object> it2 = list2.iterator();\n            final String val1 = (String) it1.next();\n            final String val2 = (String) it2.next();\n        final Configuration simple = setupSimpleConfiguration();\n        final Configuration composite = setupCompositeConfiguration();\n        final Configuration simple = setupSimpleConfiguration();\n        final Configuration composite = setupCompositeConfiguration();\n        final String key = \"clear.property\";\n        final Configuration simple = setupSimpleConfiguration();\n        final Configuration composite = setupCompositeConfiguration();\n        final String key = \"nonexisting.clear.property\";\n        final Configuration simple = setupSimpleConfiguration();\n        final Configuration composite = setupCompositeConfiguration();\n        final String key = \"nonexisting.property\";\n        final String value = \"new value\";\n        final Configuration simple = setupSimpleConfiguration();\n        final Configuration composite = setupCompositeConfiguration();\n        final String key = \"existing.property\";\n        final String value = \"new value\";\n        final Configuration simple = setupSimpleConfiguration();\n        final Configuration composite = setupCompositeConfiguration();\n        final String key = \"nonexisting.property\";\n        final String value = \"new value\";\n        final Configuration simple = setupSimpleConfiguration();\n        final Configuration composite = setupCompositeConfiguration();\n        final String key = \"existing.property\";\n        final String value = \"new value\";\n",
            "src/test/java/org/apache/commons/configuration2/TestEqualsProperty.java": "        final PropertiesConfiguration conf = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(conf);\n        final String equals = conf.getString(\"test.equals\");\n",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java": "        final ImmutableNode root =\n            final DefaultConfigurationKey key = createConfigurationKey();\n        final Configuration subset = config.subset(\"tables.table(0).fields\");\n        final String key = \"tables.table(0)[@type]\";\n        final BaseHierarchicalConfiguration subset =\n        final HierarchicalConfiguration<ImmutableNode> subConfig =\n        final List<Object> lstFlds = subConfig.getList(\"fields.field.name\");\n        final HierarchicalConfiguration<ImmutableNode> subConfig =\n        final HierarchicalConfiguration<ImmutableNode> subConfig =\n        final HierarchicalConfiguration<ImmutableNode> subConfig =\n        final HierarchicalConfiguration<ImmutableNode> subConfig =\n        final ImmutableHierarchicalConfiguration subConfig =\n        final List<Object> lstFlds = subConfig.getList(\"fields.field.name\");\n        final String newTableName = NodeStructureHelper.table(1) + \"_other\";\n        final ImmutableHierarchicalConfiguration subConfig =\n    private void checkConfigurationAtAttributeNode(final boolean withUpdates)\n        final HierarchicalConfiguration<ImmutableNode> sub =\n            final List<? extends ImmutableConfiguration> lstFlds)\n            final ImmutableConfiguration sub = lstFlds.get(i);\n    private void checkConfigurationsAtWithUpdate(final boolean withUpdates,\n            final String expName)\n        final String key = \"tables.table(1).fields.field\";\n        final List<HierarchicalConfiguration<ImmutableNode>> lstFlds =\n        final String key = \"tables.table\";\n        final List<HierarchicalConfiguration<ImmutableNode>> subs =\n        final BaseHierarchicalConfiguration sub =\n        final List<ImmutableHierarchicalConfiguration> lstFlds =\n        final String attrKey = \"tables.table(0)[@type]\";\n        final Configuration copy = (Configuration) config.clone();\n        final BaseHierarchicalConfiguration copy = new BaseHierarchicalConfiguration(config);\n        final BaseHierarchicalConfiguration copy = new BaseHierarchicalConfiguration(config);\n        final Configuration sub1 = config.subset(\"prop2\");\n        final Configuration sub2 = sub1.subset(\"prop\");\n        final BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration) InterpolationTestHelper\n        final BaseHierarchicalConfiguration copy =\n        final List<ImmutableHierarchicalConfiguration> children =\n        final ImmutableHierarchicalConfiguration c1 = children.get(0);\n        final ImmutableHierarchicalConfiguration c2 = children.get(1);\n    private void checkChildConfigurationsAtWithUpdates(final boolean withUpdates,\n            final String expectedName)\n        final String key = \"tables.table(0)\";\n        final List<HierarchicalConfiguration<ImmutableNode>> children =\n        final HierarchicalConfiguration<ImmutableNode> sub = children.get(0);\n    private void checkContent(final Configuration c)\n",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfigurationXMLReader.java": "        final XMLConfiguration config = new XMLConfiguration();\n        final FileHandler handler = new FileHandler(config);\n        final SAXSource source = new SAXSource(parser, new InputSource());\n        final DOMResult result = new DOMResult();\n        final Transformer trans = TransformerFactory.newInstance().newTransformer();\n        final Node root = ((Document) result.getNode()).getDocumentElement();\n        final JXPathContext ctx = JXPathContext.newContext(root);\n",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalXMLConfiguration.java": "    private void configTest(final XMLConfiguration config)\n        final FileHandler handler = new FileHandler(config);\n        final FileHandler handler = new FileHandler(config);\n        final FileHandler handler = new FileHandler(config);\n        final FileHandler handler = new FileHandler(config);\n        final FileHandler handler = new FileHandler(config);\n        final Iterator<String> iter = config.getKeys();\n        final FileHandler handler = new FileHandler(config);\n        final File saveFile = folder.newFile(TEST_SAVENAME);\n        final FileHandler handler2 = new FileHandler(config);\n        final File saveFile = folder.newFile(TEST_SAVENAME);\n        final File saveFile = folder.newFile(TEST_SAVENAME);\n        final FileHandler handler = new FileHandler(config);\n",
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java": "    private static INIConfiguration setUpConfig(final String data)\n        final INIConfiguration instance = new INIConfiguration();\n    private static void load(final INIConfiguration instance, final String data)\n        final StringReader reader = new StringReader(data);\n        catch (final IOException e)\n    private static String saveToString(final INIConfiguration config)\n        final StringWriter writer = new StringWriter();\n        catch (final IOException e)\n    private File writeTestFile(final String content) throws IOException\n        final File file = folder.newFile();\n        final PrintWriter out = new PrintWriter(new FileWriter(file));\n        final Writer writer = new StringWriter();\n        final INIConfiguration instance = new INIConfiguration();\n    \tfinal String input = MessageFormat.format(INI_DATA4, \"=\").trim();\n    \tfinal String expectedOutput = MessageFormat.format(INI_DATA4, outputSeparator).trim();\n    \tfinal INIConfiguration instance = new FileBasedConfigurationBuilder<>(\n        final Writer writer = new StringWriter();\n        final String result = writer.toString().trim();\n    private void checkSave(final String content) throws ConfigurationException\n        final INIConfiguration config = setUpConfig(content);\n        final String sOutput = saveToString(config);\n        final INIConfiguration config = new INIConfiguration();\n        final String data =\n        final String content = saveToString(config);\n        final INIConfiguration config2 = new INIConfiguration();\n        final File file = writeTestFile(INI_DATA);\n        final FileBasedConfigurationBuilder<INIConfiguration> builder =\n        final INIConfiguration config = builder.getConfiguration();\n    private void checkContent(final INIConfiguration instance)\n    private void checkLoad(final String data) throws ConfigurationException\n        final INIConfiguration instance = setUpConfig(data);\n        final INIConfiguration instance = new INIConfiguration();\n        final INIConfiguration instance = new INIConfiguration();\n        final INIConfiguration instance = new INIConfiguration();\n        final Set<String> expResult = new HashSet<>();\n        final Set<String> result = instance.getSections();\n        final INIConfiguration config = setUpConfig(INI_DATA2);\n        final INIConfiguration config = setUpConfig(INI_DATA2);\n        final INIConfiguration config = setUpConfig(INI_DATA2);\n        final INIConfiguration config = setUpConfig(INI_DATA2);\n        final INIConfiguration config = setUpConfig(INI_DATA2);\n        final INIConfiguration config = new INIConfiguration();\n        final StringWriter writer = new StringWriter();\n        final INIConfiguration config2 = new INIConfiguration();\n        final INIConfiguration config = setUpConfig(content);\n        final INIConfiguration config = setUpConfig(content);\n        final INIConfiguration config = setUpConfig(INI_DATA2);\n        final INIConfiguration config = setUpConfig(data);\n        final INIConfiguration config = setUpConfig(data);\n        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        final HierarchicalConfiguration<ImmutableNode> sub = config.getSection(null);\n    private void checkSectionNames(final INIConfiguration config,\n            final String[] expected)\n        final Set<String> sectionNames = config.getSections();\n        final Iterator<String> it = sectionNames.iterator();\n    private INIConfiguration checkSectionNames(final String data,\n            final String[] expected) throws ConfigurationException\n        final INIConfiguration config = setUpConfig(data);\n        final INIConfiguration config = checkSectionNames(data,\n        final INIConfiguration config = setUpConfig(INI_DATA2);\n        final INIConfiguration config = setUpConfig(INI_DATA);\n        final HierarchicalConfiguration<ImmutableNode> section =\n        final INIConfiguration config = setUpConfig(INI_DATA);\n        final HierarchicalConfiguration<ImmutableNode> section =\n        final INIConfiguration config = setUpConfig(data);\n        final HierarchicalConfiguration<ImmutableNode> section = config.getSection(\"section1\");\n        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        final HierarchicalConfiguration<ImmutableNode> section = config.getSection(null);\n        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        final GlobalSectionTestThread[] threads = new GlobalSectionTestThread[threadCount];\n        final INIConfiguration config = setUpConfig(INI_DATA);\n        final HierarchicalConfiguration<ImmutableNode> section = config.getSection(null);\n        final INIConfiguration config = setUpConfig(INI_DATA);\n        final HierarchicalConfiguration<ImmutableNode> section = config\n        final INIConfiguration config = setUpConfig(INI_DATA3);\n        final INIConfiguration config = setUpConfig(INI_DATA3);\n        final INIConfiguration config = setUpConfig(INI_DATA3);\n        final INIConfiguration config = setUpConfig(INI_DATA3);\n        final INIConfiguration config = setUpConfig(INI_DATA3);\n        final INIConfiguration config = setUpConfig(INI_DATA3);\n        final INIConfiguration config = setUpConfig(INI_DATA3);\n        final StringWriter writer = new StringWriter();\n        final String data = INI_DATA + \"key.dot = dotValue\";\n        final INIConfiguration conf = new INIConfiguration();\n        final String output = saveToString(conf);\n        final INIConfiguration config = setUpConfig(content);\n        final INIConfiguration config = setUpConfig(INI_DATA_SEPARATORS);\n        final INIConfiguration config = setUpConfig(INI_DATA_SEPARATORS);\n        final INIConfiguration config = setUpConfig(INI_DATA_SEPARATORS);\n        final INIConfiguration config = setUpConfig(data);\n        final StringWriter writer = new StringWriter();\n        final HierarchicalConfiguration<?> config2 = setUpConfig(writer.toString());\n        final INIConfiguration config = setUpConfig(data);\n        final HierarchicalConfiguration<ImmutableNode> sub = config.getSection(\"section\");\n        final StringWriter writer = new StringWriter();\n        final String content = writer.toString();\n        final int pos = content.indexOf(\"[section]\");\n        final INIConfiguration config = setUpConfig(INI_DATA);\n        final StringWriter writer = new StringWriter();\n        final INIConfiguration config2 = setUpConfig(writer.toString());\n        final INIConfiguration config =\n        final HierarchicalConfiguration<ImmutableNode> section = config.getSection(\"section\");\n        final Iterator<String> keys = section.getKeys();\n        final INIConfiguration config =\n        final List<Object> list = config.getList(\"test.list\");\n        final INIConfiguration config =\n        final INIConfiguration config = setUpConfig(INI_DATA);\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final INIConfiguration config = new INIConfiguration();\n        final String output = saveToString(config);\n        final INIConfiguration config2 = setUpConfig(output);\n        final String data =\n        final INIConfiguration config = setUpConfig(data);\n        final INIConfiguration config2 = setUpConfig(saveToString(config));\n        final List<Object> list = config2.getList(\"sectest.list\");\n        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        final HierarchicalConfiguration<ImmutableNode> sub = config.getSection(null);\n        final Iterator<String> keys = sub.getKeys();\n            final StringBuilder buf = new StringBuilder();\n        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        final SubnodeConfiguration sub = config.getSection(null);\n        final NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        final SubnodeConfiguration sub = config.getSection(null);\n        final NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        final SubnodeConfiguration sub = config.getSection(null);\n        final NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n        final ImmutableNode child = handler.getChild(handler.getRootNode(), 0);\n        catch (final IndexOutOfBoundsException iex)\n        final INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        final SubnodeConfiguration sub = config.getSection(null);\n        final NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n        final List<ImmutableNode> children = handler.getRootNode().getChildren();\n        final DefaultExpressionEngine engine =\n        final INIConfiguration config = new INIConfiguration();\n        final INIConfiguration config = setUpConfig(section);\n        final StringWriter writer = new StringWriter();\n        public GlobalSectionTestThread(final INIConfiguration conf)\n                catch (final IllegalStateException istex)\n",
            "src/test/java/org/apache/commons/configuration2/TestImmutableConfiguration.java": "        final Configuration confOrg = createTestConfig();\n        final ImmutableConfiguration conf =\n        for (final Iterator<String> it = confOrg.getKeys(); it.hasNext();)\n            final String key = it.next();\n        final ImmutableConfiguration conf =\n    private static Set<String> fetchKeys(final Iterator<String> it)\n        final Set<String> keys = new HashSet<>();\n        final Configuration confOrg = createTestConfig();\n        final ImmutableConfiguration conf =\n        final ImmutableConfiguration conf =\n        final Iterator<String> it = conf.getKeys();\n        final Configuration confOrg = createTestConfig();\n        final ImmutableConfiguration conf =\n        final String value = \"new value\";\n        final ImmutableConfiguration conf =\n        final Configuration mutableConf = (Configuration) conf;\n        final ImmutableConfiguration conf =\n        final ImmutableConfiguration subset = conf.immutableSubset(\"test\");\n        final HierarchicalConfiguration<?> conf = new BaseHierarchicalConfiguration();\n        final String key = \"test\";\n        final ImmutableHierarchicalConfiguration ihc =\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final ImmutableConfiguration ic =\n        catch (final NoSuchElementException e)\n",
            "src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java": "        final Properties props = new Properties();\n        final Context ctx = new InitialContext(props);\n        final Object o = conf.getProperty(\"test.boolean\");\n        final String key = \"test.boolean\";\n        final Iterator<EventListener<? super ConfigurationErrorEvent>> iterator =\n            final EventType<? extends ConfigurationErrorEvent> type,\n            final EventType<?> opEventType, final String propName, final Object propValue)\n        final Throwable exception =\n        final JNDIConfiguration c = new JNDIConfiguration();\n        final Hashtable<Object, Object> env = new Hashtable<>();\n        final InitialContext initCtx = new InitialContext(env);\n        final JNDIConfiguration c = new JNDIConfiguration(initCtx);\n        public PotentialErrorJNDIConfiguration(final Context ctx)\n        public void installException(final NamingException nex)\n",
            "src/test/java/org/apache/commons/configuration2/TestJNDIEnvironmentValues.java": "        final String s = conf.getString(\"test.key\");\n        final String s = conf.getString(\"test.key\");\n        final String result = conf.getString(\"test.imaginarykey\", \"bob\");\n        final Iterator<String> it = conf.getKeys();\n        final Iterator<String> it = conf.getKeys(\"foo.bar\");\n        final Iterator<String> it = conf.getKeys(\"test\");\n        final Iterator<String> it = conf.getKeys(\"test.boolean\");\n",
            "src/test/java/org/apache/commons/configuration2/TestJSONConfiguration.java": "    private final String testJson =\n        final Configuration subset = jsonConfiguration.subset(\"key4\");\n        final Object property =\n        final Object property = jsonConfiguration.getProperty(\"int1\");\n        final StringWriter sw = new StringWriter();\n        final String output = sw.toString();\n        final ObjectMapper mapper = new ObjectMapper();\n        final MapType type = mapper.getTypeFactory().constructMapType(Map.class,\n        final Map<String, Object> parsed = mapper.readValue(output, type);\n        final Map key2 = (Map) parsed.get(\"key2\");\n        final List<String> key5 =\n        final List<?> capitals = (List<?>) parsed.get(\"capitals\");\n        final Map<?, ?> capUk = (Map<?, ?>) capitals.get(1);\n        final BaseHierarchicalConfiguration c = new BaseHierarchicalConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/TestMapConfiguration.java": "        final Map<String, Object> map = new HashMap<>();\n        final MapConfiguration config = new MapConfiguration(map);\n        final Map<String, Object> map = new HashMap<>();\n        final MapConfiguration conf = new MapConfiguration(map);\n        final MapConfiguration config = (MapConfiguration) getConfiguration();\n        final MapConfiguration copy = (MapConfiguration) config.clone();\n        final StrictConfigurationComparator comp = new StrictConfigurationComparator();\n        final MapConfiguration config = (MapConfiguration) getConfiguration();\n        final MapConfiguration copy = (MapConfiguration) config.clone();\n        final MapConfiguration config = (MapConfiguration) getConfiguration();\n        final MapConfiguration clone = (MapConfiguration) config.clone();\n        final MapConfiguration config = (MapConfiguration) getConfiguration();\n        final List<Object> values = config.getList(KEY);\n        final MapConfiguration config = (MapConfiguration) getConfiguration();\n        final MapConfiguration config = (MapConfiguration) getConfiguration();\n        final MapConfiguration config = (MapConfiguration) getConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/TestNonStringProperties.java": "        final PropertiesConfiguration c = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(c);\n",
            "src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java": "        final ListDelimiterHandler listHandler = new LegacyListDelimiterHandler(',');\n        final FileHandler handler1 = new FileHandler(conf1);\n        final FileHandler handler2 = new FileHandler(conf2);\n        final FileHandler handler3 = new FileHandler(xmlConf);\n        final List<Object> l = cc.getList(\"packages\");\n        final Configuration internal = cc.getConfiguration(0);\n        final Configuration subset = cc.subset(\"subset\");\n        final List<Object> defaultList = new ArrayList<>();\n        final Configuration conf1 = new BaseConfiguration();\n        final Configuration conf2 = new BaseConfiguration();\n        final Configuration conf1 = new BaseConfiguration();\n        final Configuration conf2 = new BaseConfiguration();\n        final List<Object> list = cc.getList(\"array\");\n        final List<String> orderedList = new ArrayList<>();\n        for (final Iterator<String> keys = conf1.getKeys(); keys.hasNext();)\n        final List<String> iteratedList = new ArrayList<>();\n        for (final Iterator<String> keys = cc.getKeys(); keys.hasNext();)\n        final List<String> orderedList = new ArrayList<>();\n        for (final Iterator<String> keys = conf1.getKeys(\"test\"); keys.hasNext();)\n        final List<String> iteratedList = new ArrayList<>();\n        for (final Iterator<String> keys = cc.getKeys(\"test\"); keys.hasNext();)\n        final BaseConfiguration defaults = new BaseConfiguration();\n        final Configuration c = new CompositeConfiguration(defaults);\n        final String TEST_KEY = \"testKey\";\n        final Configuration defaults = new PropertiesConfiguration();\n        final Configuration testConfiguration = new CompositeConfiguration(defaults);\n        final Iterator<String> i = testConfiguration.getKeys();\n            final String key = i.next();\n",
            "src/test/java/org/apache/commons/configuration2/TestNullJNDIEnvironmentValues.java": "        final String s = conf.getString(\"test.key\");\n        final String s = conf.getString(\"test.key\");\n        final String result = conf.getString(\"test.imaginarykey\", \"bob\");\n        final Iterator<String> it = conf.getKeys();\n        final Iterator<String> it = conf.getKeys(\"foo.bar\");\n        final Iterator<String> it = conf.getKeys(\"test\");\n        final Iterator<String> it = conf.getKeys(\"test.boolean\");\n",
            "src/test/java/org/apache/commons/configuration2/TestPatternSubtreeConfiguration.java": "        final PatternSubtreeConfigurationWrapper config = new PatternSubtreeConfigurationWrapper(this.conf, PATTERN);\n        final HierarchicalConfiguration<ImmutableNode> hc = new BaseHierarchicalConfiguration();\n        final PatternSubtreeConfigurationWrapper config =\n        final HierarchicalConfiguration<ImmutableNode> hc = new BaseHierarchicalConfiguration();\n        final PatternSubtreeConfigurationWrapper config =\n",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java": "    private static FileHandler load(final PropertiesConfiguration pc, final String fileName)\n        final FileHandler handler = new FileHandler(pc);\n        final String loaded = conf.getString(\"configuration.loaded\");\n        final File file2 = ConfigurationAssert.getTestFile(\"threesome.properties\");\n        final FileHandler handler = new FileHandler(conf);\n    private void checkEmpty(final String key)\n        final String empty = conf.getString(key);\n        final String loaded = conf.getString(\"include.loaded\");\n        final String loaded = conf.getString(\"include.interpol.loaded\");\n        final StringReader in =\n        final FileHandler handler = new FileHandler(conf);\n        final String content =\n        final StringReader in = new StringReader(content);\n        final FileHandler handler = new FileHandler(conf);\n        final List<Object> packages = conf.getList(\"packages\");\n        final List<Object> list = new ArrayList<>();\n        final URL url = new URL(\"foo\", \"\", 0, folder.newFile(\"testsave-custom-url.properties\").getAbsolutePath(), new FileURLStreamHandler());\n        final FileHandler handlerSave = new FileHandler(conf);\n        final PropertiesConfiguration config2 = new PropertiesConfiguration();\n        final FileHandler handlerLoad = new FileHandler(config2);\n        final List<Object> list = new ArrayList<>();\n        final PropertiesConfiguration checkConfig = new PropertiesConfiguration();\n        final PropertiesConfiguration checkConfig = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(conf);\n        final FileHandler handler = new FileHandler(conf);\n        final List<Object> dirs = conf.getList(\"test.dirs\");\n        final PropertiesConfiguration pc = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(pc);\n        final PropertiesConfiguration pc = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(pc);\n        final File file = ConfigurationAssert.getTestFile(\"test.properties\");\n        final FileHandler handler = new FileHandler(conf);\n        final PropertiesConfiguration checkConfig = new PropertiesConfiguration();\n        final String property = conf.getString(\"test.unescape\");\n        final String property = conf.getString(\"test.unescape.list-separator\");\n        final FileHandler handler = new FileHandler(conf);\n        final String[] array = conf.getStringArray(\"test.mixed.array\");\n        final String property = \"This is a value spread out across several adjacent \"\n        final PropertiesConfiguration pc2 = new PropertiesConfiguration();\n        final PropertiesConfiguration pc2 = new PropertiesConfiguration();\n        final List<Object> list = conf.getList(\"test.path\");\n        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        final Configuration config = builder.getConfiguration();\n        final StringWriter out = new StringWriter();\n        final String content = out.toString();\n        final PropertiesConfigurationLayout layout = conf.getLayout();\n        final PropertiesConfigurationLayout layout2 = conf.getLayout();\n        final DummyLayout layout = new DummyLayout();\n        final DummyLayout layout = new DummyLayout();\n        final DummyLayout layout = new DummyLayout();\n        final PropertiesConfiguration copy = (PropertiesConfiguration) conf.clone();\n        final StringWriter outConf = new StringWriter();\n        final StringWriter outCopy = new StringWriter();\n        final PropertiesConfiguration copy = (PropertiesConfiguration) conf.clone();\n        final MockHttpURLStreamHandler handler = new MockHttpURLStreamHandler(\n        final URL url = new URL(null, \"http://jakarta.apache.org\", handler);\n        final MockHttpURLConnection con = handler.getMockConnection();\n        final MockHttpURLStreamHandler handler = new MockHttpURLStreamHandler(\n        final URL url = new URL(null, \"http://jakarta.apache.org\", handler);\n        catch (final ConfigurationException cex)\n        final File file = folder.newFile(\"sharp#1.properties\");\n        final PropertiesConfiguration conf = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(conf);\n        final FileHandler handler = new FileHandler(conf);\n        final Configuration copyConf = setUpCopyConfig();\n        final Configuration copyConf = setUpCopyConfig();\n        final FileHandler handler = new FileHandler(conf);\n        final DataConfiguration dataConfig = new DataConfiguration(conf);\n        final PropertiesConfiguration config2 = new PropertiesConfiguration();\n                    final Reader in)\n                    final Writer out, final ListDelimiterHandler handler)\n                    final Reader in)\n                    final Writer out, final ListDelimiterHandler handler)\n                    final PropertiesWriterTestImpl propWriter = new PropertiesWriterTestImpl(handler);\n                catch (final IOException e)\n        final Set<String> foundLines = new HashSet<>();\n        final BufferedReader in = new BufferedReader(new FileReader(\n                for (final String separatorTest : separatorTests) {\n        final StringWriter writer = new StringWriter();\n        final String s = writer.toString();\n        final String prop = \"delimiterListProp\";\n        final List<String> list = Arrays.asList(\"val\", \"val2\", \"val3\");\n        final StringWriter out = new StringWriter();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final String text = \"\\\"Hello World!\\\"\";\n        final StringWriter out = new StringWriter();\n        final PropertiesConfiguration c2 = new PropertiesConfiguration();\n        final FileSystem fs = new DefaultFileSystem()\n            public InputStream getInputStream(final URL url)\n                    catch (final UnsupportedEncodingException e)\n        final Parameters params = new Parameters();\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration configuration = builder.getConfiguration();\n        final Reader in = new FileReader(ConfigurationAssert.getTestFile(\"test.properties\"));\n        catch (final ConfigurationException e)\n    private void checkBackslashList(final String key)\n        final Object prop = conf.getProperty(\"test.\" + key);\n        final List<?> list = (List<?>) prop;\n        final Configuration result = new BaseConfiguration();\n    private void checkCopiedConfig(final Configuration copyConf)\n        final PropertiesConfiguration checkConf = new PropertiesConfiguration();\n        for (final Iterator<String> it = copyConf.getKeys(); it.hasNext();)\n            final String key = it.next();\n        final FileHandler handler = new FileHandler(conf);\n        public void load(final PropertiesConfiguration config, final Reader in)\n        protected MockHttpURLConnection(final URL u, final int respCode, final File outFile)\n        public MockHttpURLStreamHandler(final int respCode, final File outFile)\n        protected URLConnection openConnection(final URL u) throws IOException\n        public PropertiesReaderTestImpl(final Reader reader, final int maxProps)\n        public PropertiesWriterTestImpl(final ListDelimiterHandler handler) throws IOException\n",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java": "        final Iterator<EventListener<? super ConfigurationEvent>> it =\n        final String presetHeaderComment = \"preset\" + TEST_COMMENT + CRNORM + CRNORM + TEST_COMMENT;\n        final ConfigurationEvent event = new ConfigurationEvent(this,\n        final ConfigurationEvent event = new ConfigurationEvent(this,\n        final ConfigurationEvent event = new ConfigurationEvent(this,\n        final ConfigurationEvent event = new ConfigurationEvent(this,\n        final ConfigurationEvent event = new ConfigurationEvent(this,\n        final ConfigurationEvent event = new ConfigurationEvent(this,\n        final PropertiesBuilder b = new PropertiesBuilder();\n        final String output = getLayoutString();\n        final PropertiesConfigurationLayout l2 = new PropertiesConfigurationLayout(layout);\n        for (final String key : layout.getKeys())\n        final PropertiesConfigurationLayout l2 = new PropertiesConfigurationLayout(layout);\n        catch (final ConfigurationException cex)\n        final StringWriter out = new StringWriter();\n    private void checkLayoutString(final String expected)\n        public void addLine(final String s)\n        public void addProperty(final String key, final String value)\n        public void addComment(final String s)\n        boolean propertyLoaded(final String key, final String value)\n",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesSequence.java": "        final String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testSequence.properties\").getAbsolutePath();\n        final String compositeConfigurationFile = ConfigurationAssert.getTestFile(\"testSequenceDigester.xml\").getAbsolutePath();\n        final PropertiesConfiguration simpleConfiguration = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(simpleConfiguration);\n        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        final Configuration compositeConfiguration = builder.getConfiguration();\n        final Configuration a = simpleConfiguration.subset(\"prefix\");\n        final Configuration b = compositeConfiguration.subset(\"prefix\");\n        final List<String> keysSimpleConfiguration = ConfigurationAssert.keysToList(a);\n        final List<String> keysCompositeConfiguration = ConfigurationAssert.keysToList(b);\n        final String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testSequence.properties\").getAbsolutePath();\n        final String compositeConfigurationFile = ConfigurationAssert.getTestFile(\"testSequenceDigester.xml\").getAbsolutePath();\n        final PropertiesConfiguration simpleConfiguration = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(simpleConfiguration);\n        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        final Configuration compositeConfiguration = builder.getConfiguration();\n        final Configuration a = simpleConfiguration.subset(\"prefix\");\n        final Configuration b = compositeConfiguration.subset(\"prefix\");\n        final List<String> keysSimpleConfiguration = ConfigurationAssert.keysToList(a);\n        final List<String> keysCompositeConfiguration = ConfigurationAssert.keysToList(b);\n        final String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testSequence.properties\").getAbsolutePath();\n        final String compositeConfigurationFile = ConfigurationAssert.getTestFile(\"testSequenceDigester.xml\").getAbsolutePath();\n        final PropertiesConfiguration simpleConfiguration = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(simpleConfiguration);\n        final CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        final Configuration compositeConfiguration = builder.getConfiguration();\n        final Configuration mapping = new BaseConfiguration();\n        final Configuration mapping2 = new BaseConfiguration();\n        for (final Iterator<String> keys = simpleConfiguration.getKeys(); keys.hasNext();)\n            final String key = keys.next();\n            final String[] keyParts = StringUtils.split(key, \".\");\n                final String serviceKey = keyParts[1];\n        for (final Iterator<String> keys = compositeConfiguration.getKeys(); keys.hasNext();)\n            final String key = keys.next();\n            final String[] keyParts = StringUtils.split(key, \".\");\n                final String serviceKey = keyParts[1];\n",
            "src/test/java/org/apache/commons/configuration2/TestStrictConfigurationComparator.java": "        final Configuration other = new BaseConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/TestSubnodeConfiguration.java": "        final BaseHierarchicalConfiguration conf =\n    private static void appendTree(final BaseHierarchicalConfiguration configuration,\n            final ImmutableNode root)\n    private void setUpSubnodeConfig(final String key)\n    private TrackedNodeModel setUpTrackedModel(final NodeSelector selector)\n        final InMemoryNodeModel parentModel = (InMemoryNodeModel) parent.getModel();\n        final List<Object> fields = config.getList(\"fields.field.name\");\n        final List<Object> fields = config.getList(\"fields.field.name\");\n        final Set<String> keys = new HashSet<>();\n        final ListDelimiterHandler handler1 = new DefaultListDelimiterHandler('/');\n        final ListDelimiterHandler handler2 = new DefaultListDelimiterHandler(';');\n        final Set<String> keys = ConfigurationAssert.keysToSet(config);\n        final HierarchicalConfiguration<ImmutableNode> sub2 =\n        final SubnodeConfiguration sub2 =\n    private void checkInterpolationFromConfigurationAt(final boolean withUpdates)\n        final Configuration sub =\n        final Configuration sub = parent.configurationAt(\"test.absolute.dir\");\n        final ConfigurationInterpolator interpolator = parent.getInterpolator();\n            public String lookup(final String key) {\n        final SubnodeConfiguration copy = (SubnodeConfiguration) config.clone();\n        final TrackedNodeModel subModel = (TrackedNodeModel) copy.getModel();\n        final InMemoryNodeModel parentModel = (InMemoryNodeModel) parent.getModel();\n        final TrackedNodeModel model = EasyMock.createMock(TrackedNodeModel.class);\n        final SubnodeConfiguration config = new SubnodeConfiguration(parent, model);\n        final InMemoryNodeModel nodeModel = config.getNodeModel();\n",
            "src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java": "        final Configuration conf = new BaseConfiguration();\n        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        final Configuration conf = new BaseConfiguration();\n        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        final Configuration conf = new BaseConfiguration();\n        final Configuration conf = new BaseConfiguration();\n        final Configuration conf = new BaseConfiguration();\n        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        final Iterator<String> it = subset.getKeys();\n        final Configuration conf = new BaseConfiguration();\n        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        final Iterator<String> it = subset.getKeys(\"abc\");\n        final BaseConfiguration conf = new BaseConfiguration();\n        final Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        final List<Object> list = subset.getList(\"abc\", new ArrayList<>());\n        final Configuration conf = new BaseConfiguration();\n        final SubsetConfiguration subset = new SubsetConfiguration(conf, \"prefix\", \".\");\n        final Configuration conf = new BaseConfiguration();\n        final SubsetConfiguration subset = new SubsetConfiguration(conf, \"prefix\", \".\");\n        final Configuration conf = new BaseConfiguration();\n        final SubsetConfiguration subset = new SubsetConfiguration(conf, null, \".\");\n        final BaseConfiguration config = new BaseConfiguration();\n        final SubsetConfiguration subset = new SubsetConfiguration(config, \"prefix\");\n        catch (final NoSuchElementException e)\n        catch (final NoSuchElementException e)\n        final CombinedConfigurationBuilder builder =\n        final Configuration config = builder.getConfiguration();\n        final Configuration subConf = config.subset(\"tables.table(0)\");\n        final Configuration subSubConf = subConf.subset(\"fields.field(1)\");\n        final Iterator<String> itKeys = subSubConf.getKeys();\n        final Set<String> keys = new HashSet<>();\n            final String k = itKeys.next();\n        final Configuration config = new BaseConfiguration();\n        final Configuration subset = config.subset(\"test\");\n        final BaseConfiguration config = new BaseConfiguration();\n        final Configuration subset = config.subset(\"prefix\");\n        final BaseConfiguration config = new BaseConfiguration();\n        final AbstractConfiguration subset =\n        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n        final BaseConfiguration config = new BaseConfiguration();\n        final AbstractConfiguration subset =\n        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n        final Configuration config = EasyMock.createNiceMock(Configuration.class);\n        final SubsetConfiguration subset = new SubsetConfiguration(config, \"prefix\");\n        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n        final BaseConfiguration config = new BaseConfiguration();\n        final AbstractConfiguration subset = (AbstractConfiguration) config\n        final BaseConfiguration config = new BaseConfiguration();\n        final ConfigurationInterpolator interpolator = config.getInterpolator();\n            public String lookup(final String key) {\n        final AbstractConfiguration subset = (AbstractConfiguration) config\n        final BaseConfiguration config = new BaseConfiguration();\n        final AbstractConfiguration subset = (AbstractConfiguration) config\n",
            "src/test/java/org/apache/commons/configuration2/TestSystemConfiguration.java": "        final Properties props = System.getProperties();\n        final Configuration conf = new SystemConfiguration();\n        final PropertiesConfiguration props = new PropertiesConfiguration();\n        final File file = folder.newFile(\"sys.properties\");\n        final PropertiesConfiguration pconfig = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(pconfig);\n        final SystemConfiguration sconf = new SystemConfiguration();\n        final String testProperty = \"someTest\";\n        final SystemConfiguration config = new SystemConfiguration();\n        final Thread t = new Thread()\n            final SystemConfiguration config = new SystemConfiguration();\n            final PropertiesConfiguration props = new PropertiesConfiguration();\n            for (final Iterator<String> keys = config.getKeys(); keys.hasNext();)\n                final String key = keys.next();\n",
            "src/test/java/org/apache/commons/configuration2/TestThreesomeConfiguration.java": "        final PropertiesConfiguration c = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(c);\n        final List<Object> packages = conf.getList(\"test.threesome.one\");\n        final List<Object> packages = conf.getList(\"test.threesome.two\");\n        final List<Object> packages = conf.getList(\"test.threesome.three\");\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java": "    private static void load(final XMLConfiguration config, final String fileName)\n        final FileHandler handler = new FileHandler(config);\n    private static XMLConfiguration createFromFile(final String fileName)\n        final XMLConfiguration config = new XMLConfiguration();\n        final String key = \"clearly\";\n        final String key = \"clear.element\";\n        final String key = \"clear.comment\";\n        final String key = \"clear.cdata\";\n        final String key = \"list.item\";\n        final String key = \"clear[@id]\";\n        final List<Object> list = conf.getList(\"element3[@name]\");\n        final XMLConfiguration checkConf = checkSavedConfig();\n        final List<Object> list = conf.getList(\"test.array\");\n        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        final XMLConfiguration checkConfig =\n        final String xml = \"<?xml version=\\\"1.0\\\"?><config><test>1</test></config>\";\n        final String xml = \"<?xml version=\\\"1.0\\\"?><config><test>1</rest></config>\";\n        final FileHandler handler = new FileHandler(conf);\n        final XMLConfiguration config = new XMLConfiguration();\n        final FileHandler handler = new FileHandler(conf);\n        final FileHandler handler = new FileHandler(conf);\n        final FileHandler handler = new FileHandler(conf);\n        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        final DocumentBuilder builder = factory.newDocumentBuilder();\n            public void error(final SAXParseException ex) throws SAXException\n        final DocumentBuilder builder = createValidatingDocBuilder();\n        final DocumentBuilder builder = createValidatingDocBuilder();\n        final Configuration c = (Configuration) conf.clone();\n        final XMLConfiguration copy = (XMLConfiguration) c;\n        final XMLConfiguration c = (XMLConfiguration) conf.clone();\n        final XMLConfiguration c2 = new XMLConfiguration();\n        final XMLConfiguration conf2 = new XMLConfiguration();\n        final XMLConfiguration conf2 = new XMLConfiguration();\n        final XMLConfiguration checkConfig = new XMLConfiguration();\n        final File nonValidFile = ConfigurationAssert.getTestFile(\"testValidateInvalid.xml\");\n        final FileHandler handler = new FileHandler(conf);\n        final StringWriter out = new StringWriter();\n        final FileHandler handler = new FileHandler(conf);\n        final StringWriter out = new StringWriter();\n        final FileHandler handler = new FileHandler(conf);\n        final StringWriter out = new StringWriter();\n        final FileHandler handler = new FileHandler(conf);\n        final StringWriter out = new StringWriter();\n        final StringWriter out = new StringWriter();\n        final StringWriter out = new StringWriter();\n        catch (final TransformerFactoryConfigurationError cex)\n        final XMLConfiguration copy = new XMLConfiguration(conf);\n        final StringReader in = new StringReader(xml);\n        final FileHandler handler = new FileHandler(conf);\n            final String idxStr = String.format(\"(%d)\", Integer.valueOf(i + 3));\n            final String nodeKey = \"attrList.a\" + idxStr;\n        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        final Configuration sub = conf.configurationAt(\"element2.subelement\", true);\n        final XMLConfiguration conf2 = new XMLConfiguration();\n        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        final HierarchicalConfiguration<?> sub1 = conf.configurationAt(\"element2\", true);\n        final HierarchicalConfiguration<?> sub2 = sub1.configurationAt(\"subelement\", true);\n        final XMLConfiguration conf2 = new XMLConfiguration();\n    private void checkSaveDelimiterParsingDisabled(final String key)\n        final XMLConfiguration checkConf = new XMLConfiguration();\n        final List<Object> expr = conf.getList(\"expressions[@value]\");\n        final XMLConfiguration checkConfig = new XMLConfiguration();\n        final XMLConfiguration c2 = new XMLConfiguration();\n        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        final ImmutableNode node = NodeStructureHelper.createNode(\n        final Collection<ImmutableNode> nodes = new ArrayList<>(1);\n        final XMLConfiguration c2 = new XMLConfiguration();\n        final ImmutableNode.Builder bldrNode = new ImmutableNode.Builder(1);\n        final ImmutableNode node2 = NodeStructureHelper.createNode(\"test2\", null);\n        final XMLConfiguration c2 = new XMLConfiguration();\n        final HierarchicalConfiguration<ImmutableNode> hc =\n        final XMLConfiguration checkConfig = checkSavedConfig();\n        final XMLConfiguration copy = new XMLConfiguration(conf);\n        final CatalogResolver resolver = new CatalogResolver();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final CatalogResolver resolver = new CatalogResolver();\n        catch (final Exception e)\n            final Throwable cause = e.getCause();\n        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        final Thread testThreads[] = new Thread[THREAD_COUNT];\n        for (final Thread testThread : testThreads) {\n        final StringWriter writer = new StringWriter();\n        final String content = writer.toString();\n        final XMLConfiguration conf2 = new XMLConfiguration();\n        final String key = \"element3[@value]\";\n        final HierarchicalConfiguration<ImmutableNode> sub =\n        final String prop = \"delimiterListProp\";\n        final List<String> list = Arrays.asList(\"val\", \"val2\", \"val3\");\n        final XMLConfiguration conf2 = new XMLConfiguration();\n        final String prop = \"delimiterListProp\";\n        final List<String> list = Arrays.asList(\"val\", \"val2\", \"val3\");\n        final XMLConfiguration conf2 = new XMLConfiguration();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final String content = \"<configuration><test>1</test></configuration>\";\n        final ByteArrayInputStream bis = new ByteArrayInputStream(content.getBytes());\n        catch (final ConfigurationException e)\n        final FileHandler handler = new FileHandler(conf);\n    private XMLConfiguration checkSavedConfig(final File saveFile)\n        final XMLConfiguration config = createFromFile(saveFile.getAbsolutePath());\n        ReloadThread(final FileBasedConfigurationBuilder<?> confBulder)\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration_605.java": "    private static void checkConfiguration(final Configuration config)\n    private static Configuration create(final String content) throws ConfigurationException\n        final XMLConfiguration config = new XMLConfiguration();\n        final FileHandler handler = new FileHandler(config);\n    private static Configuration create(final String content, final ListDelimiterHandler delimiterHandler)\n        final XMLConfiguration config = new XMLConfiguration();\n        final FileHandler handler = new FileHandler(config);\n        final String source = \"<configuration><key0></key0><key1></key1><key2></key2><key3></key3></configuration>\";\n        final String source = \"<configuration><key0></key0><key1>,</key1><key2></key2><key3></key3></configuration>\";\n        final String source = \"<configuration><key0></key0><key1>a,b</key1><key2></key2><key3></key3></configuration>\";\n        final String source = \"<configuration><key0></key0><key1>,</key1> <key2></key2><key3></key3></configuration>\";\n        final String source = \"<configuration><key0></key0><key1>,</key1>A<key2></key2><key3></key3></configuration>\";\n        final String source = \"<configuration><key0></key0><key1>,</key1><key2></key2><key3></key3></configuration>\";\n        final StringBuilder sourceBuilder = new StringBuilder(\"<configuration>\");\n        final StringBuilder sourceBuilder = new StringBuilder(\"<configuration>\");\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLDocumentHelper.java": "    private static Document loadDocument(final String name) throws IOException,\n        final DocumentBuilder builder =\n    private static String documentToString(final XMLDocumentHelper helper)\n    private static String documentToString(final Document document)\n        final Transformer transformer = XMLDocumentHelper.createTransformer();\n        final StringWriter writer = new StringWriter();\n        final Result result = new StreamResult(writer);\n        final TransformerConfigurationException cause =\n        catch (final ConfigurationException cex)\n        final Transformer transformer = EasyMock.createMock(Transformer.class);\n        final Source src = EasyMock.createMock(Source.class);\n        final Result res = EasyMock.createMock(Result.class);\n        final TransformerException tex = new TransformerException(\"Test Exception\");\n        catch (final ConfigurationException cex)\n        final DocumentBuilderFactory factory =\n        final ParserConfigurationException pcex = new ParserConfigurationException();\n        catch (final ConfigurationException cex)\n        final XMLDocumentHelper helper = XMLDocumentHelper.forNewDocument(ELEMENT);\n        final Document doc = helper.getDocument();\n        final Element rootElement = doc.getDocumentElement();\n        final NodeList childNodes = rootElement.getChildNodes();\n        final XMLDocumentHelper helper = XMLDocumentHelper.forNewDocument(ELEMENT);\n        final Document doc = loadDocument();\n        final XMLDocumentHelper helper = XMLDocumentHelper.forSourceDocument(doc);\n        final Document doc = loadDocument();\n        final XMLDocumentHelper helper = XMLDocumentHelper.forSourceDocument(doc);\n        final XMLDocumentHelper helper =\n        final XMLDocumentHelper copy = helper.createCopy();\n        final String doc1 = documentToString(helper);\n        final String doc2 = documentToString(copy);\n    private void checkCopyElementMapping(final String file) throws Exception\n        final XMLDocumentHelper helper =\n        final XMLDocumentHelper copy = helper.createCopy();\n        final Collection<Node> texts = findTextElements(helper.getDocument());\n        for (final Node n : texts)\n            final Text txtSrc = (Text) n;\n            final Text txtCopy = (Text) copy.getElementMapping().get(n);\n    private static Collection<Node> findTextElements(final Document document)\n        final Collection<Node> texts = new HashSet<>();\n    private static void findTextElementsForNode(final Node node,\n            final Collection<Node> texts)\n        final NodeList childNodes = node.getChildNodes();\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLListHandling.java": "    private static XMLConfiguration readFromString(final String xml)\n        final XMLConfiguration config = new XMLConfiguration();\n        final FileHandler handler = new FileHandler(config);\n        final StringWriter writer = new StringWriter(4096);\n        final FileHandler handler = new FileHandler(config);\n    private static String element(final String key, final String value)\n    private static void checkCommaSeparated(final String xml, final String key,\n            final String... values)\n        final String strValues = StringUtils.join(values, ',');\n        final String element = element(key, strValues);\n    private static void checkSplit(final String xml, final String key, final String... values)\n        for (final String v : values)\n        final String xml = saveToString();\n        final String xml = saveToString();\n        final String xml = saveToString();\n        final List<String> expected = Arrays.asList(\"foo\", \"blah\", \"bar\", \"baz\");\n        final String xml = saveToString();\n        final XMLConfiguration c2 = readFromString(xml);\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java": "    private static XMLPropertiesConfiguration load(final String fileName)\n        final XMLPropertiesConfiguration conf = new XMLPropertiesConfiguration();\n        final FileHandler handler = new FileHandler(conf);\n        final XMLPropertiesConfiguration conf = load(TEST_PROPERTIES_FILE);\n        final URL location = ConfigurationAssert.getTestURL(TEST_PROPERTIES_FILE);\n        final DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n        final DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n            public InputSource resolveEntity(final String publicId, final String systemId)\n        final File file = new File(location.toURI());\n        final Document doc = dBuilder.parse(file);\n        final XMLPropertiesConfiguration conf = new XMLPropertiesConfiguration(doc.getDocumentElement());\n        final XMLPropertiesConfiguration conf = load(TEST_PROPERTIES_FILE);\n        final File saveFile = folder.newFile(\"test2.properties.xml\");\n        final FileHandler saveHandler = new FileHandler(conf);\n        final XMLPropertiesConfiguration conf2 = load(saveFile.getAbsolutePath());\n        final XMLPropertiesConfiguration conf = load(TEST_PROPERTIES_FILE);\n        final File saveFile = folder.newFile(\"test2.properties.xml\");\n        final DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n        final DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n        final Document document = dBuilder.newDocument();\n        final TransformerFactory tFactory = TransformerFactory.newInstance();\n        final Transformer transformer = tFactory.newTransformer();\n        final DOMSource source = new DOMSource(document);\n        final Result result = new StreamResult(saveFile);\n        final XMLPropertiesConfiguration conf2 = load(saveFile.getAbsolutePath());\n",
            "src/test/java/org/apache/commons/configuration2/TestYAMLConfiguration.java": "    private final String testYaml =\n        final Configuration subset = yamlConfiguration.subset(\"key4\");\n        final Object property =\n        final Object property = yamlConfiguration.getProperty(\"int1\");\n        final StringWriter sw = new StringWriter();\n        final String output = sw.toString();\n        final Map parsed = new Yaml().loadAs(output, Map.class);\n        final Map key2 = (Map) parsed.get(\"key2\");\n        final List<String> key5 =\n        final BaseHierarchicalConfiguration c = new BaseHierarchicalConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBean.java": "    public void setBuddy(final BeanCreationTestBean buddy)\n    public void setIntValue(final int intValue)\n    public void setStringValue(final String stringValue)\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBeanWithListChild.java": "    public void setChildren(final List<BeanCreationTestBean> buddies)\n    public void setIntValue(final int intValue)\n    public void setStringValue(final String stringValue)\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestCtorBean.java": "    public BeanCreationTestCtorBean(final BeanCreationTestBean buddy)\n    public BeanCreationTestCtorBean(final String s)\n    public BeanCreationTestCtorBean(final String s, final int i)\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanDeclarationTestImpl.java": "    public void setBeanClassName(final String beanClassName)\n    public void setBeanFactoryName(final String beanFactoryName)\n    public void setBeanFactoryParameter(final Object beanFactoryParameter)\n    public void setBeanProperties(final Map<String, Object> beanProperties)\n            final Map<String, Object> nestedBeanDeclarations)\n    public void setConstructorArgs(final Collection<ConstructorArg> args)\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestBeanHelper.java": "        final BeanFactory factory = EasyMock.createMock(BeanFactory.class);\n        final BeanFactory factory = new TestBeanFactory();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final BeanCreationTestBean bean = new BeanCreationTestBean();\n        final BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n        final BeanCreationTestBean bean = new BeanCreationTestBean();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final TestBeanFactory factory = new TestBeanFactory();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final TestBeanFactory factory = new TestBeanFactory();\n        final BeanDeclarationTestImpl data = setUpBeanDeclarationWithListChild();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final TestBeanFactory factory = new TestBeanFactory();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final TestBeanFactory factory = (TestBeanFactory) helper.getDefaultBeanFactory();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final Object param = new Integer(42);\n        final TestBeanFactory factory = new TestBeanFactory();\n        final BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final DynaBean bean = BeanHelper.createWrapDynaBean(config);\n        final String value = \"TestFooter\";\n        final PropertiesConfiguration src = new PropertiesConfiguration();\n        final LazyDynaBean dest = new LazyDynaBean();\n        final BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n        final Map<String, Object> properties = new HashMap<>();\n        final BeanDeclarationTestImpl buddyData = new BeanDeclarationTestImpl();\n        final Map<String, Object> properties2 = new HashMap<>();\n        final Map<String, Object> nested = new HashMap<>();\n        final BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n        final Map<String, Object> properties = new HashMap<>();\n        final List<BeanDeclaration> childData = new ArrayList<>();\n        final Map<String, Object> nested = new HashMap<>();\n    private BeanDeclarationTestImpl createChildBean(final String name)\n        final BeanDeclarationTestImpl childBean = new BeanDeclarationTestImpl();\n        final Map<String, Object> properties2 = new HashMap<>();\n    private void checkBean(final BeanCreationTestBean bean)\n        final BeanCreationTestBean buddy = bean.getBuddy();\n    private void checkBean(final BeanCreationTestBeanWithListChild bean)\n        final List<BeanCreationTestBean> children = bean.getChildren();\n        public Object createBean(final BeanCreationContext bcc) throws Exception\n                final BeanCreationTestBean bean = new BeanCreationTestBean();\n                final BeanCreationTestBeanWithListChild bean =\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestCombinedBeanDeclaration.java": "    private BeanDeclaration decl(final int idx)\n        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n        final String name = \"someTestBeanFactory\";\n        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration();\n        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n        final Object param = new Object();\n        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration();\n        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration();\n        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n        final Collection<ConstructorArg> args =\n        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n        final Map<String, Object> props1 = new HashMap<>();\n        final Map<String, Object> props2 = new HashMap<>();\n        final Map<String, Object> props3 = new HashMap<>();\n        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n        final Map<String, Object> props = cd.getBeanProperties();\n        final BeanDeclaration child = EasyMock.createMock(BeanDeclaration.class);\n        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration(child);\n        final Map<String, Object> decls1 = new HashMap<>();\n        final Map<String, Object> decls2 = new HashMap<>();\n        final Map<String, Object> decls3 = new HashMap<>();\n        final CombinedBeanDeclaration cd = createCombinedDeclaration();\n        final Map<String, Object> decls = cd.getNestedBeanDeclarations();\n        final BeanDeclaration child = EasyMock.createMock(BeanDeclaration.class);\n        final CombinedBeanDeclaration cd = new CombinedBeanDeclaration(child);\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java": "        final Configuration configuration = createConfiguration();\n        for (final int element : intArray) {\n        for (final String element : stringArray) {\n        final List<String> list = Arrays.asList(stringArray);\n        final DynaProperty descriptor = bean.getDynaClass().getDynaProperty(\"unknown\");\n        final DynaProperty pd[] = bean.getDynaClass().getDynaProperties();\n        final int count[] = new int[properties.length];\n        for (final DynaProperty element : pd) {\n            final String name = element.getName();\n            final Object value = bean.get(\"mappedProperty\", \"unknown\");\n        catch (final Throwable t)\n        final Object value = bean.get(\"booleanProperty\");\n        final Object value = bean.get(\"doubleProperty\");\n        final Object value = bean.get(\"floatProperty\");\n        final Object value = bean.get(\"intProperty\");\n        final Object value = bean.get(\"longProperty\");\n        final Object value = bean.get(\"shortProperty\");\n        final Object value = bean.get(\"stringProperty\");\n        final MapConfiguration configuration = new MapConfiguration(new HashMap<String, Object>());\n        final ConfigurationDynaBean bean = new ConfigurationDynaBean(configuration);\n        final Object value = bean.get(\"objectArray\", 1);\n        final boolean oldValue = ((Boolean) bean.get(\"booleanProperty\")).booleanValue();\n        final boolean newValue = !oldValue;\n        final double oldValue = ((Double) bean.get(\"doubleProperty\")).doubleValue();\n        final double newValue = oldValue + 1.0;\n        final float oldValue = ((Float) bean.get(\"floatProperty\")).floatValue();\n        final float newValue = oldValue + (float) 1.0;\n        final int oldValue = ((Integer) bean.get(\"intProperty\")).intValue();\n        final int newValue = oldValue + 1;\n        final long oldValue = ((Long) bean.get(\"longProperty\")).longValue();\n        final long newValue = oldValue + 1;\n        final short oldValue = ((Short) bean.get(\"shortProperty\")).shortValue();\n        final short newValue = (short) (oldValue + 1);\n        final String oldValue = (String) bean.get(\"stringProperty\");\n        final String newValue = oldValue + \" Extra Value\";\n    protected void testGetDescriptorBase(final String name, final Class<?> type)\n        final DynaProperty descriptor = bean.getDynaClass().getDynaProperty(name);\n        final ConfigurationDynaBean nested = (ConfigurationDynaBean) bean.get(\"mappedProperty\");\n        final String value = (String) nested.get(\"key1\");\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConstructorArg.java": "        final BeanDeclaration decl = EasyMock.createMock(BeanDeclaration.class);\n        final ConstructorArg arg = ConstructorArg.forBeanDeclaration(decl);\n        final ConstructorArg arg = ConstructorArg.forValue(\"test\");\n        final ConstructorArg arg = ConstructorArg.forValue(42);\n        final ConstructorArg arg = ConstructorArg.forValue(\"42\", int.class.getName());\n        final ConstructorArg arg = ConstructorArg.forValue(0);\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestDefaultBeanFactory.java": "            public void initBean(final Object bean, final BeanDeclaration data)\n            public Object createBean(final BeanDeclaration data)\n        final ConversionHandler handler =\n        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        final Map<String, Object> props = new HashMap<>();\n        final Object bean = factory.createBean(createBcc(PropertiesConfiguration.class, decl));\n        final PropertiesConfiguration config = (PropertiesConfiguration) bean;\n        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        final Collection<ConstructorArg> args = new ArrayList<>();\n        final BeanCreationTestCtorBean bean =\n        final BeanDeclarationTestImpl declNested = new BeanDeclarationTestImpl();\n        final Collection<ConstructorArg> args = new ArrayList<>();\n        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        final BeanCreationTestCtorBean bean =\n        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        final Constructor<BeanCreationTestBean> ctor =\n        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        final Collection<ConstructorArg> args = new ArrayList<>();\n        final Constructor<BeanCreationTestCtorBean> ctor =\n        final Class<?>[] paramTypes = ctor.getParameterTypes();\n        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        final Collection<ConstructorArg> args = new ArrayList<>();\n        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        final Collection<ConstructorArg> args = new ArrayList<>();\n        final Constructor<BeanCreationTestCtorBean> ctor =\n        final Class<?>[] paramTypes = ctor.getParameterTypes();\n        final BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n        final Map<String, Object> properties = new HashMap<>();\n        final BeanDeclarationTestImpl buddyData = new BeanDeclarationTestImpl();\n        final Map<String, Object> properties2 = new HashMap<>();\n        final Map<String, Object> nested = new HashMap<>();\n        final BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        final Collection<ConstructorArg> args = new ArrayList<>();\n        catch (final ConfigurationRuntimeException crex)\n            final String msg = crex.getMessage();\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestXMLBeanDeclaration.java": "        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n        final BaseHierarchicalConfiguration config =\n        final XMLBeanDeclaration decl =\n        final BaseHierarchicalConfiguration config =\n        final XMLBeanDeclaration decl =\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n        final Map<String, Object> props = decl.getBeanProperties();\n        final BaseHierarchicalConfiguration config =\n        final String keyCtorArg = KEY + \".config-constrarg\";\n        final BaseHierarchicalConfiguration config = prepareNestedBeanDeclarations();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final Map<String, Object> nested = decl.getNestedBeanDeclarations();\n            final XMLBeanDeclaration d = (XMLBeanDeclaration) nested\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final String key = KEY + \".address..private\";\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final Map<String, Object> nested = decl.getNestedBeanDeclarations();\n        final BaseHierarchicalConfiguration config = prepareNestedBeanDeclarations();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY)\n            BeanDeclaration createBeanDeclaration(final NodeData<?> node)\n        final Map<String, Object> nested = decl.getNestedBeanDeclarations();\n        for (final String element : COMPLEX_PROPS) {\n            final Object d = nested.get(element);\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final Map<String, Object> nested = decl.getNestedBeanDeclarations();\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final String[] varValues = new String[TEST_PROPS.length];\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, \"undefined_key\", true);\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final BaseHierarchicalConfiguration config = prepareNestedBeanDeclarations();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final Collection<ConstructorArg> args = decl.getConstructorArgs();\n        final Iterator<ConstructorArg> it = args.iterator();\n        final ConstructorArg arg1 = it.next();\n        final ConstructorArg arg2 = it.next();\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final Collection<ConstructorArg> args = decl.getConstructorArgs();\n        final ConstructorArg arg = args.iterator().next();\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final String expectedValue = \"ctorArg\";\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final Collection<ConstructorArg> args = decl.getConstructorArgs();\n        final ConstructorArg arg = args.iterator().next();\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final String value = \"${value}\";\n        final XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        final Collection<ConstructorArg> args = decl.getConstructorArgs();\n        final ConstructorArg arg = args.iterator().next();\n    private static void setupBeanDeclaration(final HierarchicalConfiguration<?> config,\n            final String key, final String[] names, final String[] values)\n    private static void checkProperties(final BeanDeclaration beanDecl, final String[] names,\n            final String[] values)\n        final Map<String, Object> props = beanDecl.getBeanProperties();\n        public XMLBeanDeclarationTestImpl(final HierarchicalConfiguration<?> config,\n                final NodeData<?> node)\n",
            "src/test/java/org/apache/commons/configuration2/builder/BuilderEventListenerImpl.java": "    public void onEvent(final ConfigurationBuilderEvent event)\n            final EventType<T> eventType)\n        final Iterator<ConfigurationBuilderEvent> it = initIterator();\n        final ConfigurationBuilderEvent nextEvent = it.next();\n        final\n",
            "src/test/java/org/apache/commons/configuration2/builder/ParametersBeanTestImpl.java": "    public void setIntProperty(final int intProperty)\n    public void setStringProperty(final String stringProperty)\n    public ParametersBeanTestImpl setFluentProperty(final String value)\n    public ParametersBeanTestImpl setFluentPropertyWithGet(final String s)\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestAutoSaveListener.java": "    private void fireChangeEvent(final boolean before)\n        final FileHandler handler = EasyMock.createMock(FileHandler.class);\n        final FileHandler handler2 = EasyMock.createMock(FileHandler.class);\n        final FileHandler handler = EasyMock.createMock(FileHandler.class);\n        final FileHandler handler = new FileHandler();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java": "        final Map<String, Object> paramMap = params.getParameters();\n        final Map<String, Object> map1 = params.getParameters();\n        final Map<String, Object> mapCopy = new HashMap<>(map1);\n        final Map<String, Object> map2 = params.getParameters();\n        final ConfigurationLogger log = EasyMock.createMock(ConfigurationLogger.class);\n        final ListDelimiterHandler handler =\n        final ConfigurationInterpolator ci =\n        final Lookup look = EasyMock.createMock(Lookup.class);\n        final Map<String, Lookup> lookups = Collections.singletonMap(\"test\", look);\n        final Map<?, ?> map = (Map<?, ?>) params.getParameters().get(\"prefixLookups\");\n        final Map<?, ?> map2 = (Map<?, ?>) params.getParameters().get(\"prefixLookups\");\n        final Lookup look = EasyMock.createMock(Lookup.class);\n        final Collection<Lookup> looks = Collections.singleton(look);\n        final Collection<?> col =\n        final Collection<?> col2 =\n        final ConfigurationInterpolator parent =\n        final Lookup look1 = EasyMock.createMock(Lookup.class);\n        final Lookup look2 = EasyMock.createMock(Lookup.class);\n        final ConfigurationInterpolator parent =\n        final ConfigurationInterpolator ci =\n        final Map<String, Object> map = params.getParameters();\n        final ListDelimiterHandler handler1 = EasyMock.createMock(ListDelimiterHandler.class);\n        final ListDelimiterHandler handler2 = EasyMock.createMock(ListDelimiterHandler.class);\n        final Map<String, Object> props = new HashMap<>();\n        final BuilderParameters p = EasyMock.createMock(BuilderParameters.class);\n        final Map<String, Object> map = params.getParameters();\n        final ConfigurationInterpolator parent =\n        final Lookup l1 = EasyMock.createMock(Lookup.class);\n        final Lookup l2 = EasyMock.createMock(Lookup.class);\n        final Lookup l3 = EasyMock.createMock(Lookup.class);\n        final Map<String, Lookup> prefixLookups = new HashMap<>();\n        final Collection<Lookup> defLookups = Collections.singleton(l3);\n        final Map<String, Object> map = params.getParameters();\n        final InterpolatorSpecification spec =\n        final ConfigurationInterpolator ci =\n        final InterpolatorSpecification spec =\n        final Map<String, Object> map = new HashMap<>();\n        final Map<String, Object> map = new HashMap<>();\n        final Map<Object, Object> prefix = new HashMap<>();\n        final Map<String, Object> map = new HashMap<>();\n        final Map<Object, Object> prefix = new HashMap<>();\n        final Map<String, Object> map = new HashMap<>();\n        final InterpolatorSpecification spec =\n        final ConfigurationLogger log = EasyMock.createMock(ConfigurationLogger.class);\n        final ConfigurationInterpolator ci =\n        final ListDelimiterHandler handler1 = EasyMock.createMock(ListDelimiterHandler.class);\n        final ListDelimiterHandler handler2 = EasyMock.createMock(ListDelimiterHandler.class);\n        final BasicBuilderParameters clone = params.clone();\n        final Map<String, Object> map = clone.getParameters();\n        final Lookup look = EasyMock.createMock(Lookup.class);\n        final Map<String, Lookup> lookups = Collections.singletonMap(\"test\", look);\n        final BasicBuilderParameters clone = params.clone();\n        final Lookup look = EasyMock.createMock(Lookup.class);\n        final Collection<Lookup> looks = Collections.singleton(look);\n        final BasicBuilderParameters clone = params.clone();\n        final Synchronizer sync = EasyMock.createMock(Synchronizer.class);\n        final ConversionHandler handler =\n        final BeanHelper helper = new BeanHelper();\n        final ConfigurationDecoder decoder =\n        final BeanHelper beanHelper = new BeanHelper();\n        final ConfigurationDecoder decoder =\n        final ConversionHandler conversionHandler = new DefaultConversionHandler();\n        final ListDelimiterHandler listDelimiterHandler =\n        final ConfigurationLogger logger = new ConfigurationLogger(\"test\");\n        final Synchronizer synchronizer = new ReadWriteSynchronizer();\n        final BasicBuilderParameters p2 = new BasicBuilderParameters();\n        final Map<String, Object> parameters = p2.getParameters();\n        final BasicBuilderParameters p2 =\n        final Map<String, Object> parameters = p2.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilder.java": "        final Map<String, Object> params = new HashMap<>();\n        final Map<String, Object> params = createTestParameters();\n        final BasicConfigurationBuilder<Configuration> builder =\n        final Map<String, Object> params2 =\n        final Map<String, Object> params = createTestParameters();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final Map<String, Object> params2 =\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final Map<String, Object> params2 =\n        final Map<String, Object> params1 = new HashMap<>();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final Map<String, Object> params2 =\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final Map<String, Object> params = createTestParameters();\n        final Map<String, Object> params2 = builder.getParameters();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final Map<String, Object> params = builder.getParameters();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config =\n        final CountDownLatch startLatch = new CountDownLatch(1);\n        final CountDownLatch endLatch = new CountDownLatch(threadCount);\n        final ConfigurationBuilder<?> builder =\n        final AccessBuilderThread[] threads = new AccessBuilderThread[threadCount];\n        final Set<Object> results = new HashSet<>();\n        for (final AccessBuilderThread t : threads)\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final PropertiesConfiguration config2 = builder.getConfiguration();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final PropertiesConfiguration config2 = builder.getConfiguration();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n                            final Map<String, Object> params)\n        final\n        final EventListener<ConfigurationEvent> l1 = createEventListener();\n        final EventListener<ConfigurationEvent> l2 = createEventListener();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n        final EventListener<ConfigurationEvent> l1 = createEventListener();\n        final EventListener<ConfigurationEvent> l2 = createEventListener();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final EventListener<ConfigurationEvent> l1 = createEventListener();\n        final EventListener<ConfigurationEvent> l2 = createEventListener();\n        final EventListener<ConfigurationErrorEvent> l3 = new ErrorListenerTestImpl(null);\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final BasicConfigurationBuilder<XMLConfiguration> builder2 =\n        final XMLConfiguration config = builder2.getConfiguration();\n        final Collection<EventListener<? super ConfigurationErrorEvent>> errListeners =\n        final EventListenerTestImpl listener1 = new EventListenerTestImpl(null);\n        final EventListenerRegistrationData<ConfigurationErrorEvent> regData =\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final EventListenerTestImpl listener = new EventListenerTestImpl(null);\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final Map<String, Object> params = new HashMap<>();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final BasicConfigurationBuilderInitFailImpl builder =\n        final BasicConfigurationBuilderInitFailImpl builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final BasicConfigurationBuilder<InitializableConfiguration> builder =\n        final InitializableConfiguration config = builder.getConfiguration();\n        final BeanFactory factory = new DefaultBeanFactory()\n            public Object createBean(final BeanCreationContext bcc) throws Exception\n        final BeanHelper helper = new BeanHelper(factory);\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final ReloadingDetector detector =\n        final ReloadingController controller = new ReloadingController(detector);\n        final BasicConfigurationBuilder<Configuration> builder =\n        final Configuration configuration = builder.getConfiguration();\n        final BasicConfigurationBuilder<Configuration> builder =\n        public AccessBuilderThread(final CountDownLatch lstart, final CountDownLatch lend,\n                final ConfigurationBuilder<?> bldr)\n            catch (final Exception ex)\n        public BasicConfigurationBuilderInitFailImpl(final boolean allowFailOnInit)\n        protected void initResultInstance(final PropertiesConfiguration obj)\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilderEvents.java": "        final EventType<ConfigurationBuilderEvent> builderEventType =\n        final EventType<ConfigurationBuilderEvent> builderResetType =\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        final EventType<ConfigurationBuilderEvent> eventType =\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        final ConfigurationBuilderEvent event =\n        final PropertiesConfiguration configuration = builder.getConfiguration();\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n                    public void onEvent(final ConfigurationBuilderEvent event)\n        final PropertiesConfiguration configuration2 = builder.getConfiguration();\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        final PropertiesConfiguration configuration = builder.getConfiguration();\n        final ConfigurationBuilderResultCreatedEvent event =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestBuilderConfigurationWrapperFactory.java": "        final BuilderConfigurationWrapperFactory factory =\n            final BaseHierarchicalConfiguration conf)\n        final\n        catch (final ConfigurationException e)\n        final BaseHierarchicalConfiguration conf =\n        final ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n        final BuilderConfigurationWrapperFactory factory =\n        final HierarchicalConfiguration<?> wrapper =\n        final BaseHierarchicalConfiguration conf =\n        final ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n        final BuilderConfigurationWrapperFactory factory =\n        final HierarchicalConfiguration<?> wrapper =\n        final BaseHierarchicalConfiguration conf =\n        final ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n        final BuilderConfigurationWrapperFactory factory =\n        final EventSource src =\n        final BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        final EventListener<ConfigurationEvent> l1 = new EventListenerTestImpl(null);\n        final EventListener<ConfigurationEvent> l2 = new EventListenerTestImpl(null);\n        final BuilderConfigurationWrapperFactory factory =\n        final EventSource src =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n        final BaseHierarchicalConfiguration conf =\n        final ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n        final EventListenerTestImpl listener = new EventListenerTestImpl(null);\n        final BuilderConfigurationWrapperFactory factory =\n        final EventSource src =\n        final BuilderConfigurationWrapperFactory factory =\n        final BuilderConfigurationWrapperFactory factory =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestCopyObjectDefaultHandler.java": "        final FileBasedBuilderParametersImpl source =\n        final CopyObjectDefaultHandler handler = new CopyObjectDefaultHandler(source);\n        final FileBasedBuilderParametersImpl copy =\n        final Map<String, Object> map = copy.getParameters();\n        final XMLBuilderParametersImpl paramsXml = new XMLBuilderParametersImpl();\n        final CopyObjectDefaultHandler handler =\n        final FileBasedBuilderParametersImpl paramsFb =\n        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        final XMLBuilderParametersImpl source = new XMLBuilderParametersImpl();\n        final XMLBuilderParametersImpl dest = new XMLBuilderParametersImpl()\n                    final ExpressionEngine engine)\n        final CopyObjectDefaultHandler handler = new CopyObjectDefaultHandler(source);\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestDatabaseBuilderParametersImpl.java": "        final DataSource src = EasyMock.createMock(DataSource.class);\n        final String table = \"TestTable\";\n        final String colName = \"KEY_COLUMN\";\n        final String colName = \"VALUE_COLUMN\";\n        final String colName = \"CONFIG_COLUMN\";\n        final String confName = \"TestConfiguration\";\n        final Map<String, Object> map = params.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultParametersManager.java": "    private static void checkDefaultValues(final Map<String, Object> map)\n        final FileBasedBuilderParametersImpl fbparams =\n    private static void checkNoDefaultValues(final Map<String, Object> map)\n        final FileBasedBuilderParametersImpl fbParams =\n        final FileBasedBuilderParameters params = parameters.fileBased();\n        final Map<String, Object> map = params.getParameters();\n        final XMLBuilderParameters params = parameters.xml();\n        final Map<String, Object> map = params.getParameters();\n        final XMLBuilderParameters paramsXml = parameters.xml();\n        final PropertiesBuilderParameters paramsProps = parameters.properties();\n                            final XMLBuilderParameters parameters)\n        final XMLBuilderParameters params = parameters.xml();\n        final Map<String, Object> map = params.getParameters();\n        final FileBasedDefaultsHandler handler = new FileBasedDefaultsHandler();\n        final XMLBuilderParameters paramsXml = parameters.xml();\n        final PropertiesBuilderParameters paramsProps = parameters.properties();\n        final FileBasedDefaultsHandler handler = new FileBasedDefaultsHandler();\n        final XMLBuilderParameters paramsXml = parameters.xml();\n        final PropertiesBuilderParameters paramsProps = parameters.properties();\n        public void initializeDefaults(final FileBasedBuilderParameters parameters)\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultReloadingDetectorFactory.java": "        final FileHandler handler = new FileHandler();\n        final FileBasedBuilderParametersImpl params =\n        final FileHandlerReloadingDetector detector =\n        final FileHandler handler = new FileHandler();\n        final FileBasedBuilderParametersImpl params =\n        final FileHandlerReloadingDetector detector =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestEventListenerParameters.java": "        final EventListenerParameters parameters = new EventListenerParameters();\n        final EventListenerParameters parameters = new EventListenerParameters();\n        final EventListenerTestImpl listener = new EventListenerTestImpl(null);\n        final EventListenerParameters parameters = new EventListenerParameters();\n        final EventListenerRegistrationData<?> reg =\n        final EventListenerRegistrationData<ConfigurationEvent> reg =\n        final EventListenerParameters parameters = new EventListenerParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java": "        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final FileHandler handler = new FileHandler();\n        final FileBasedBuilderParametersImpl params =\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final ReloadingDetectorFactory factory =\n        final FileBasedBuilderParametersImpl params =\n        final File file =\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final URL url = ConfigurationAssert.getTestURL(\"test.properties\");\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final String path =\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final String name = \"testConfig.xml\";\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final String path =\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final FileLocationStrategy strat =\n        final FileBasedBuilderParametersImpl params =\n        final String enc = \"ISO-8859-1\";\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final FileBasedBuilderParametersImpl params =\n        final Map<String, Object> map = params.getParameters();\n        final FileBasedBuilderParametersImpl params =\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final Map<String, Object> map = params.getParameters();\n        final FileBasedBuilderParametersImpl params =\n        final Map<String, Object> map = params.getParameters();\n        final FileBased content = EasyMock.createMock(FileBased.class);\n        final FileHandler fh = new FileHandler(content);\n        final FileBasedBuilderParametersImpl params =\n        final FileBasedBuilderParametersImpl clone = params.clone();\n        final ReloadingDetectorFactory factory =\n        final Map<String, Object> map = new HashMap<>();\n        final FileBasedBuilderParametersImpl params =\n        final FileBasedBuilderParametersImpl params =\n        final FileBasedBuilderParametersImpl params =\n        final FileBasedBuilderParametersImpl params2 =\n        final String encoding = \"UTF-16\";\n        final ReloadingDetectorFactory factory =\n        final Long refreshDelay = 20160213172611L;\n        final FileBasedBuilderParametersImpl params =\n        final FileBasedBuilderParametersImpl params =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedConfigurationBuilder.java": "    private File createTestFile(final int value)\n        catch (final IOException ioex)\n                catch (final IOException ioex)\n        final Map<String, Object> params = new HashMap<>();\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration conf = builder.getConfiguration();\n        final File file = createTestFile(1);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final File file = createTestFile(1);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final PropertiesConfiguration config2 = builder.getConfiguration();\n        final File file = createTestFile(1);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final FileLocator locator = builder.getFileHandler().getFileLocator();\n        final File file1 = createTestFile(1);\n        final File file2 = createTestFile(2);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final File file = createTestFile(1);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final File file1 = createTestFile(1);\n        final File file2 = createTestFile(2);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final File file = createTestFile(1);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n    private static void checkSavedConfig(final File file, final int expValue)\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final FileHandler handler = new FileHandler(config);\n        final File file = createTestFile(1);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final File file = folder.newFile();\n        final File outFile = ConfigurationAssert.getOutFile(\"save.properties\");\n        final Parameters parameters = new Parameters();\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder = new FileBasedConfigurationBuilder<>(\n        final Configuration config = builder.getConfiguration();\n        final File file = createTestFile(0);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final File file = createTestFile(0);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config1 = builder.getConfiguration();\n        final PropertiesConfiguration config2 = builder.getConfiguration();\n        final File file = createTestFile(0);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final File file = folder.newFile();\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n        final PropertiesConfiguration conf = new PropertiesConfiguration()\n        final String encoding = \"testEncoding\";\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final FileHandler handler = new FileHandler();\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final FileHandler handler = new FileHandler();\n        final String encoding = \"testEncoding\";\n        final String folderName = \"test\";\n        final String fileName = \"sample.properties\";\n        final FileBasedConfigurationBuilder<FileBasedConfiguration> homeDirConfigurationBuilder =\n        final PropertiesBuilderParameters homeDirProperties =\n        final HomeDirectoryLocationStrategy strategy =\n        final FileBasedConfigurationBuilder<FileBasedConfiguration> builder =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestHierarchicalBuilderParametersImpl.java": "        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        final Map<String, Object> map = params.getParameters();\n        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        final HierarchicalBuilderParametersImpl params =\n        final HierarchicalBuilderParametersImpl params2 =\n        final Map<String, Object> parameters = params2.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestJndiBuilderParametersImpl.java": "        final Context ctx = EasyMock.createMock(Context.class);\n        final Map<String, Object> paramsMap = params.getParameters();\n        final String prefix = \"testJndiPrefix\";\n        final Map<String, Object> paramsMap = params.getParameters();\n        final Map<String, Object> paramsMap = params.getParameters();\n        final Context ctx = EasyMock.createMock(Context.class);\n        final String prefix = \"testJndiPrefix\";\n        final Map<String, Object> paramsMap = params.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestPropertiesBuilderParametersImpl.java": "        final PropertiesConfigurationLayout layout =\n        final PropertiesConfiguration.IOFactory factory =\n        final PropertiesConfiguration.IOFactory factory =\n        final Map<String, Object> paramsMap = params.getParameters();\n        final PropertiesConfiguration.IOFactory factory =\n        final PropertiesBuilderParametersImpl params2 =\n        final Map<String, Object> parameters = params2.getParameters();\n        final PropertiesConfiguration.IOFactory factory =\n        final ConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration config = builder.getConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingBuilderSupportListener.java": "        final ReloadingDetector detector =\n        final ReloadingController controller = new ReloadingController(detector);\n        final BasicConfigurationBuilder<Configuration> builder =\n        final BuilderEventListenerImpl builderListener =\n        final ReloadingBuilderSupportListener listener =\n        final ReloadingController controller =\n        final BasicConfigurationBuilder<Configuration> builder =\n        final ReloadingBuilderSupportListener listener =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingFileBasedConfigurationBuilder.java": "        final Map<String, Object> params = new HashMap<>();\n        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final PropertiesConfiguration conf = builder.getConfiguration();\n        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final FileHandler handler = new FileHandler();\n        final FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        final long refreshDelay = 60000L;\n        final FileHandlerReloadingDetector detector =\n        final ReloadingDetector detector =\n        final ReloadingDetectorFactory factory =\n        final FileHandler handler = new FileHandler();\n        final FileBasedBuilderParametersImpl params =\n        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final ReloadingDetector detector =\n        final ReloadingFileBasedConfigurationBuilderTestImpl builder =\n        final ReloadingDetector ctrlDetector =\n        final ReloadingDetector detector =\n        final ReloadingFileBasedConfigurationBuilderTestImpl builder =\n        final ReloadingDetector ctrlDetector =\n        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final ReloadingDetector ctrlDetector =\n        final ReloadingDetector detector =\n        final ReloadingFileBasedConfigurationBuilderTestImpl builder =\n        final PropertiesConfiguration config1 = builder.getConfiguration();\n        final PropertiesConfiguration config2 = builder.getConfiguration();\n        final ReloadingDetector detector =\n        final ReloadingFileBasedConfigurationBuilderTestImpl builder =\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        final ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n                final ReloadingDetector detector)\n                final FileHandler handler, final FileBasedBuilderParametersImpl fbparams)\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestXMLBuilderParametersImpl.java": "        final EntityResolver resolver = EasyMock.createMock(EntityResolver.class);\n        final DocumentBuilder builder = EasyMock.createMock(DocumentBuilder.class);\n        final String pubID = \"testPublicID\";\n        final String sysID = \"testSystemID\";\n        final EntityResolver resolver = EasyMock.createMock(EntityResolver.class);\n        final DocumentBuilder builder = EasyMock.createMock(DocumentBuilder.class);\n        final Map<String, Object> paramsMap = params.getParameters();\n        final EntityResolver resolver = EasyMock.createMock(EntityResolver.class);\n        final DocumentBuilder builder = EasyMock.createMock(DocumentBuilder.class);\n        final XMLBuilderParametersImpl params2 = new XMLBuilderParametersImpl();\n        final Map<String, Object> parameters = params2.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/AbstractMultiFileConfigurationBuilderTest.java": "    protected static void switchToConfig(final String id)\n    protected static void switchToConfig(final int index)\n        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n            final BuilderParameters managedParams)\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestBaseConfigurationBuilderProvider.java": "    private HierarchicalConfiguration<?> setUpConfig(final boolean reload)\n        final HierarchicalConfiguration<?> config = new BaseHierarchicalConfiguration();\n            final HierarchicalConfiguration<?> declConfig)\n        final CombinedConfigurationBuilder parentBuilder =\n                            final BuilderParameters params)\n        final ConfigurationDeclaration decl =\n                    protected Object interpolate(final Object value)\n            final boolean reload) throws ConfigurationException\n        final HierarchicalConfiguration<?> declConfig = setUpConfig(reload);\n        final ConfigurationDeclaration decl = createDeclaration(declConfig);\n        final ConfigurationBuilder<? extends Configuration> builder =\n        final Configuration config = builder.getConfiguration();\n        final PropertiesConfiguration pconfig = (PropertiesConfiguration) config;\n        final DefaultListDelimiterHandler listHandler =\n        final ConfigurationBuilder<? extends Configuration> builder =\n        final ConfigurationBuilder<? extends Configuration> builder =\n        final BaseConfigurationBuilderProvider provider =\n        final HierarchicalConfiguration<?> declConfig = setUpConfig(true);\n        final ConfigurationDeclaration decl = createDeclaration(declConfig);\n    private void checkAllowFailOnInit(final boolean expFlag, final String... props)\n        final HierarchicalConfiguration<?> declConfig = setUpConfig(false);\n        for (final String key : props)\n        final ConfigurationDeclaration decl = createDeclaration(declConfig);\n        final BasicConfigurationBuilder<? extends Configuration> builder =\n        final BaseConfigurationBuilderProvider provider =\n        final BaseConfigurationBuilderProvider provider =\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedBuilderParametersImpl.java": "        final CombinedBuilderParametersImpl params =\n        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        final Map<String, Object> map = params.getParameters();\n        final CombinedBuilderParametersImpl params =\n        final Map<String, Object> map = params.getParameters();\n        final CombinedBuilderParametersImpl params =\n        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        final ConfigurationBuilder<XMLConfiguration> builder =\n        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        final ConfigurationBuilderProvider provider =\n        final String tagName = \"testTag\";\n        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        final Map<String, ConfigurationBuilderProvider> providers =\n        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        final ConfigurationBuilderProvider provider1 =\n        final ConfigurationBuilderProvider provider2 =\n        final ConfigurationBuilderProvider provider3 =\n        final String tagPrefix = \"testTag\";\n        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        final Map<String, ConfigurationBuilderProvider> map =\n        final Map<String, ConfigurationBuilderProvider> map = null;\n        final Map<String, ConfigurationBuilderProvider> map =\n        final ConfigurationBuilderProvider provider1 =\n        final ConfigurationBuilderProvider provider2 =\n        final ConfigurationBuilderProvider provider3 =\n        final String tagPrefix = \"testTag\";\n        final CombinedBuilderParametersImpl params =\n        final CombinedBuilderParametersImpl params2 =\n        final CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        final CombinedBuilderParametersImpl params =\n        final String basePath = ConfigurationAssert.OUT_DIR.getAbsolutePath();\n        final BuilderParameters defparams =\n        final CombinedBuilderParametersImpl params =\n        final BuilderParameters defparams =\n        final CombinedBuilderParametersImpl params =\n        final CombinedBuilderParametersImpl params =\n        final XMLBuilderParametersImpl defParams = new XMLBuilderParametersImpl();\n        final CombinedBuilderParametersImpl clone = params.clone();\n        final CombinedBuilderParametersImpl params =\n        final DefaultParametersManager manager =\n        final CombinedBuilderParametersImpl params =\n        final\n        final DefaultParametersManager manager =\n        final DefaultParametersHandler<BuilderParameters> handler =\n        final CombinedBuilderParametersImpl params =\n        final DefaultParametersManager manager =\n        final DefaultParametersHandler<BuilderParameters> handler =\n        final CombinedBuilderParametersImpl params =\n        final DefaultParametersManager manager =\n        final CombinedBuilderParametersImpl params =\n        final CombinedBuilderParametersImpl params2 =\n        final Map<String, Object> parameters = params2.getParameters();\n        final BasicBuilderParameters params =\n        final CombinedBuilderParametersImpl params2 =\n        final Map<String, Object> parameters = params2.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilder.java": "            final BaseHierarchicalConfiguration defConfig)\n    protected static BaseHierarchicalConfiguration createDefinitionConfig(final String tag,\n            final Map<String, Object> attrs)\n        final BaseHierarchicalConfiguration defConfig =\n        final String prefix = \"override.\" + tag;\n        for (final Map.Entry<String, Object> e : attrs.entrySet())\n        final CombinedConfiguration compositeConfiguration =\n        final PropertiesConfiguration pc =\n    private void checkProperties(final Configuration compositeConfiguration)\n        final CombinedConfigurationBuilder configuredBuilder =\n        final File additonalFile =\n        final CombinedConfiguration compositeConfiguration =\n        final File optionalFile =\n        final Configuration config = builder.getConfiguration();\n        final File optionalExFile =\n        final String name = \"optionalConfig\";\n        final Map<String, Object> attrs = new HashMap<>();\n        final BaseHierarchicalConfiguration defConfig =\n        final BasicConfigurationBuilder<? extends BaseHierarchicalConfiguration> defBuilder =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final Set<String> names = builder.builderNames();\n        final List<String> expected = Arrays.asList(\"props\", \"xml\");\n        final Set<String> names = builder.builderNames();\n        final ConfigurationBuilder<? extends Configuration> propBuilder =\n            final Map<String, Object> attrs)\n        final BaseHierarchicalConfiguration defConfig =\n        final BasicConfigurationBuilder<? extends HierarchicalConfiguration<ImmutableNode>> defBuilder =\n        final Map<String, Object> attrs = new HashMap<>();\n        final BasicConfigurationBuilder<? extends HierarchicalConfiguration<ImmutableNode>> defBuilder =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final ConfigurationBuilder<? extends Configuration> subBuilder =\n        final CombinedConfiguration cc2 = builder.getConfiguration();\n        final ConfigurationBuilder<? extends Configuration> subBuilder2 =\n        final Map<String, Object> attrs = new HashMap<>();\n        final Map<String, Object> attrs = new HashMap<>();\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final BasicConfigurationBuilder<?> subBuilder =\n        final Map<String, Object> attrs = new HashMap<>();\n        final BasicConfigurationBuilder<?> subBuilder =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final BasicConfigurationBuilder<?> subBuilder2 =\n    private static void checkCombinedConfigAttrs(final CombinedConfiguration cc)\n        final ListDelimiterHandler handler = cc.getListDelimiterHandler();\n        final File initFile =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final CombinedConfiguration cc2 =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final File initFile =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final CombinedConfiguration cca =\n        final String tagName = \"myTestTag\";\n        final Map<String, Object> attrs = new HashMap<>();\n                                    final ConfigurationDeclaration decl)\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final File systemFile =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final File envFile =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        for (final Map.Entry<String, String> e : System.getenv().entrySet())\n        final File multiFile =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final File multiFile =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final File resolverFile =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final XMLConfiguration xmlConf =\n        final EntityResolverWithPropertiesTestImpl resolver =\n        final HierarchicalConfiguration<ImmutableNode> config = new BaseHierarchicalConfiguration();\n        final XMLBuilderParametersImpl xmlParams = new XMLBuilderParametersImpl();\n        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final String baseDir = ConfigurationAssert.OUT_DIR_NAME;\n        final EntityResolverWithPropertiesTestImpl resolver =\n    private void checkFileSystem(final File fsFile) throws ConfigurationException\n        final\n        final File testFile =\n        final String basePath = ConfigurationAssert.OUT_DIR.getAbsolutePath();\n        final XMLBuilderParametersImpl xmlParams = new XMLBuilderParametersImpl();\n        final String testFile = \"testCCSystemProperties.xml\";\n        final XMLBuilderParametersImpl xmlParams = new XMLBuilderParametersImpl();\n        final File basePathFile =\n        final BaseHierarchicalConfiguration defConfig =\n        final File deepDir = new File(ConfigurationAssert.TEST_DIR, \"config/deep\");\n        final CombinedConfiguration config = builder.getConfiguration();\n        final File testFile =\n        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler('.');\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final BaseHierarchicalConfiguration defConfig =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final File testFile =\n        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler('*');\n        final ConfigurationDecoder decoder = EasyMock.createMock(ConfigurationDecoder.class);\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final CombinedConfiguration cc2 =\n        final\n        final\n        final File testFile =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final CombinedConfiguration cc2 =\n        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n        final Collection<EventListener<? super Event>> eventListeners =\n        final CombinedBuilderParametersImpl ccparams =\n        final File envFile =\n        final String basePath = ConfigurationAssert.OUT_DIR.getAbsolutePath();\n        final CombinedBuilderParametersImpl params =\n        final XMLBuilderParametersImpl params = new XMLBuilderParametersImpl();\n        final PropertiesBuilderParametersImpl params2 =\n        final File testFile = ConfigurationAssert.getTestFile(\"testCCLookup.xml\");\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final Configuration xmlConf = cc.getConfiguration(\"xml\");\n        final File testFile =\n        final CombinedConfiguration combConfig = builder.getConfiguration();\n        final XMLConfiguration xmlConfig =\n        final HierarchicalConfiguration<ImmutableNode> subConfig =\n        final Collection<ConfigurationBuilder<? extends Configuration>> childBuilders =\n        final Collection<ConfigurationBuilder<? extends Configuration>> childBuilders =\n    private CombinedConfiguration createMultiFileConfig(final String fileName)\n        final File testFile = ConfigurationAssert.getTestFile(fileName);\n        final CombinedConfiguration config = builder.getConfiguration();\n        final CombinedConfiguration config = createMultiFileConfig(\"testCCMultiTenent.xml\");\n        final CombinedConfiguration config = createMultiFileConfig(\"testCCMultiTenent.xml\");\n        final HierarchicalConfiguration<?> multiConf =\n    private void checkMultiFile(final String key, final CombinedConfiguration config,\n            final int rows)\n    private static void switchToMultiFile(final String key)\n        final CombinedConfiguration config =\n        final File outFile =\n        final XMLConfiguration reloadConfig = new XMLConfiguration();\n        final FileHandler handler = new FileHandler(reloadConfig);\n            final ConfigurationBuilder<? extends Configuration> childBuilder =\n            final ReloadingController ctrl =\n            final BuilderEventListenerImpl l = new BuilderEventListenerImpl();\n            final ConfigurationBuilderEvent event = l.nextEvent(ConfigurationBuilderEvent.RESET);\n            final BasicConfigurationBuilder<? extends Configuration> multiBuilder =\n        final CombinedConfiguration cc = builder.getConfiguration();\n        final CombinedConfiguration config = builder.getConfiguration();\n        final CountDownLatch startLatch = new CountDownLatch(1);\n        final ReadThread[] threads = new ReadThread[threadCount];\n        for (final ReadThread t : threads)\n    private static XMLBuilderParameters prepareParamsForInheritanceTest(final Parameters params) {\n        final DefaultExpressionEngineSymbols symbols = new DefaultExpressionEngineSymbols.Builder(\n        final DefaultExpressionEngine engine = new DefaultExpressionEngine(symbols);\n        final DefaultListDelimiterHandler listDelimiterHandler = new DefaultListDelimiterHandler(',');\n        final Parameters params = new Parameters();\n        final XMLBuilderParameters xmlParams =\n        final CombinedConfiguration config = builder.getConfiguration();\n        final String[] stringArray = config.getStringArray(\"test/mixed/array\");\n        final XMLConfiguration xmlConfig =\n        final Parameters params = new Parameters();\n        final CombinedBuilderParameters combinedParams =\n        final CombinedConfiguration config = builder.getConfiguration();\n        final XMLConfiguration xmlConfig =\n        final List<String> list = xmlConfig.getList(String.class, \"split.list1\");\n        public void setPropertyKey(final String propertyKey)\n                final ConfigurationDeclaration decl) throws ConfigurationException\n            final BaseHierarchicalConfiguration config =\n        public ConstantConfigurationBuilder(final BaseHierarchicalConfiguration conf)\n        public void setFileSystem(final FileSystem fileSystem)\n        public void setBaseDir(final String baseDir)\n        public void setInterpolator(final ConfigurationInterpolator interpolator)\n        public String lookup(final String key)\n        public ReadThread(final CombinedConfiguration cc, final CountDownLatch latch)\n            catch (final InterruptedException iex)\n            catch (final InterruptedException iex)\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilderVFS.java": "        final FileBasedBuilderParameters params = super.createParameters();\n        final File deepDir = new File(ConfigurationAssert.TEST_DIR, \"config/deep\");\n        final Map<String, Object> params = new HashMap<>();\n        final BaseHierarchicalConfiguration defConfig =\n        final BasicConfigurationBuilder<? extends HierarchicalConfiguration<ImmutableNode>> defBuilder =\n        final Configuration config = builder.getConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestConfigurationDeclaration.java": "            final HierarchicalConfiguration<?> conf)\n        final HierarchicalConfiguration<?> config =\n        final ConfigurationDeclaration decl = createDeclaration(null);\n    private void checkOldReservedAttribute(final String name)\n        final String prefixName = \"config-\" + name;\n        final BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        final ConfigurationDeclaration decl = createDeclaration(config);\n        final HierarchicalConfiguration<?> config = new BaseHierarchicalConfiguration();\n        final HierarchicalConfiguration<?> factory = new BaseHierarchicalConfiguration();\n        final ConfigurationDeclaration decl =\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestFileExtensionConfigurationBuilderProvider.java": "        final FileExtensionConfigurationBuilderProvider provider =\n        final ConfigurationDeclaration decl =\n        final FileExtensionConfigurationBuilderProvider provider =\n        final ConfigurationDeclaration decl = setUpDecl();\n        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        final ConfigurationDeclaration decl = setUpDecl();\n        final BuilderParameters params =\n        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        final ConfigurationDeclaration decl = setUpDecl();\n        final BuilderParameters params =\n        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        final ConfigurationDeclaration decl = setUpDecl();\n        final BuilderParameters params = new FileBasedBuilderParametersImpl();\n        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        final ConfigurationDeclaration decl = setUpDecl();\n        final BuilderParameters params =\n        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        final ConfigurationDeclaration decl = setUpDecl();\n        final BuilderParameters params =\n        final FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileBuilderParametersImpl.java": "        final Map<String, Object> map = params.getParameters();\n        final String pattern = \"somePattern\";\n        final BuilderParameters bp = EasyMock.createMock(BuilderParameters.class);\n        final BuilderParameters bp = EasyMock.createMock(BuilderParameters.class);\n        final String pattern = \"testPattern\";\n        final Map<String, Object> map = params.getParameters();\n        final FileBasedBuilderParametersImpl managedParams =\n        final MultiFileBuilderParametersImpl clone = params.clone();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileConfigurationBuilder.java": "            final BuilderParameters managedParams)\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n                            final String fileName,\n                            final java.util.Map<String, Object> params)\n                        final FileBasedConfigurationBuilder<XMLConfiguration> result =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final String key = \"rowsPerPage\";\n        final BasicBuilderParameters params =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final ExpressionEngine engine = new XPathExpressionEngine();\n        final BuilderParameters xmlParams =\n        final MultiFileBuilderParametersImpl params =\n        final ConfigurationInterpolator ci = createInterpolator();\n        final XMLConfiguration config = builder.getConfiguration();\n        final DefaultListDelimiterHandler listHandler =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        catch (final ConfigurationException ex)\n        final BasicBuilderParameters params = createTestBuilderParameters(null);\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final XMLConfiguration config = builder.getConfiguration();\n        final BasicBuilderParameters params =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final EventListener<ConfigurationEvent> l1 = new EventListenerTestImpl(null);\n        final\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final XMLConfiguration config = builder.getConfiguration();\n        final XMLConfiguration config2 = builder.getConfiguration();\n        final Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final BasicBuilderParameters params =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final ConfigurationInterpolator interpolator = builder.getInterpolator();\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        final Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final XMLConfiguration configuration = builder.getConfiguration();\n        final ConfigurationBuilderEvent event =\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        final Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final ConfigurationBuilderEvent event =\n        final ConfigurationBuilderResultCreatedEvent createdEvent =\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder1 =\n        final FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder2 =\n        final DynamicCombinedConfiguration config =\n        final BasicBuilderParameters params = createTestBuilderParameters(null);\n        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n        final MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final BuilderConfigurationWrapperFactory wrapFactory =\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiWrapDynaBean.java": "    private MultiWrapDynaBean createBean(final boolean withDynaBean)\n        final Collection<Object> beans = new ArrayList<>();\n        final MultiWrapDynaBean bean = createBean(false);\n        final String text = \"testText\";\n        final MultiWrapDynaBean bean = createBean(false);\n        final MultiWrapDynaBean bean = createBean(true);\n        final String key = \"testKey\";\n        final String text = \"Hello World\";\n        final MultiWrapDynaBean bean = createBean(true);\n        final String key = \"testKey\";\n        final String value = \"Hello World\";\n        final DynaClass cls = createBean(false).getDynaClass();\n        final Collection<Object> beans = new ArrayList<>();\n        final MultiWrapDynaBean bean = new MultiWrapDynaBean(beans);\n        final ListDelimiterHandler listHandler = new DefaultListDelimiterHandler('+');\n        final Map<String, Object> map = params.getParameters();\n        public String getMapProperty(final String key)\n        public void setMapProperty(final String key, final String value)\n        public int getIndexedProperty(final int idx)\n        public void setIndexedProperty(final int idx, final int value)\n        public void setText(final String text)\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilder.java": "        final File testFile =\n        final CombinedReloadingController rc =\n        final File testFile =\n        final ReloadingCombinedConfigurationBuilder confBuilder =\n        final CombinedReloadingController rc =\n        final Collection<ReloadingController> subControllers = rc.getSubControllers();\n        final ReloadingController subctrl =\n        final File testFile =\n        final CombinedReloadingController rc =\n        final Collection<ReloadingController> subControllers = rc.getSubControllers();\n        final ReloadingControllerSupport ccBuilder =\n        final CombinedReloadingController rc2 =\n        final FileBasedBuilderParametersImpl params =\n        final CombinedConfiguration cc = builder.getConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilderFileBased.java": "    private static void addReloadSource(final Configuration config, final String fileName)\n    private static void writeFile(final File file, final String content) throws IOException\n    private File writeReloadFile(final File f, final String content) throws IOException\n        final File file = (f != null) ? f : folder.newFile();\n    private File writeReloadFile(final File f, final int tagIdx, final int value)\n    private static String testProperty(final int idx)\n        final File xmlConf1 = writeReloadFile(null, 1, 0);\n        final File xmlConf2 = writeReloadFile(null, 2, 0);\n        final ReloadingDetectorFactory detectorFactory =\n                            final FileHandler handler,\n                            final FileBasedBuilderParametersImpl params)\n        final BaseHierarchicalConfiguration defConf = new BaseHierarchicalConfiguration();\n        final ReloadingDetectorFactory detectorFactory =\n                            final FileHandler handler,\n                            final FileBasedBuilderParametersImpl params)\n        final BaseHierarchicalConfiguration defConf = new BaseHierarchicalConfiguration();\n        final Synchronizer sync = new ReadWriteSynchronizer();\n        final Thread testThreads[] = new Thread[threadCount];\n        final int failures[] = new int[threadCount];\n    private void checkReloadDefinitionFile(final File defFile) throws IOException,\n        final File src1 = writeReloadFile(null, 1, 0);\n        final File src2 = writeReloadFile(null, 1, 1);\n        final File defFile = folder.newFile();\n        final File defFile = folder.newFile();\n    private void writeDefinitionFile(final File defFile, final File src)\n        final XMLConfiguration defConf = new XMLConfiguration();\n        public ConstantConfigurationBuilder(final BaseHierarchicalConfiguration conf)\n        ReloadThread(final ReloadingCombinedConfigurationBuilder bldr,\n                final int[] failures, final int index, final int count)\n                    final String value =\n                catch (final Exception ex)\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingMultiFileConfigurationBuilder.java": "        final ExpressionEngine engine = new XPathExpressionEngine();\n        final BasicBuilderParameters params =\n        final ReloadingMultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final XMLConfiguration config = builder.getConfiguration();\n        final ReloadingMultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder =\n        final ReloadingMultiFileConfigurationBuilder<XMLConfiguration> builder =\n        final FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder =\n        final ReloadingMultiFileConfigurationBuilderTestImpl builder =\n        final List<ReloadingController> controllers =\n        for (final ReloadingController c : controllers)\n        final ReloadingMultiFileConfigurationBuilderTestImpl builder =\n        final List<ReloadingController> controllers =\n        final ReloadingMultiFileConfigurationBuilderTestImpl builder =\n        final List<ReloadingController> controllers =\n        for (final ReloadingController c : controllers)\n                final String fileName, final Map<String, Object> params)\n",
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestConfigurations.java": "    private static String filePath(final String name)\n        final Configurations configs = new Configurations();\n        final Parameters params = new Parameters();\n        final Configurations configs = new Configurations(params);\n        final Configurations configs = new Configurations();\n        final File file = ConfigurationAssert.getTestFile(TEST_PROPERTIES);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final URL url = ConfigurationAssert.getTestURL(\"test.properties\");\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final String filePath = filePath(TEST_PROPERTIES);\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n    private static void checkPList(final Configuration config)\n        final Configurations configs = new Configurations();\n        final PropertyListConfiguration config =\n        final Configurations configs = new Configurations();\n        final PropertyListConfiguration config =\n        final Configurations configs = new Configurations();\n        final PropertyListConfiguration config =\n    private static void checkProperties(final Configuration config)\n        final Configurations configs = new Configurations();\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final PropertiesConfiguration config =\n        final Configurations configs = new Configurations();\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final PropertiesConfiguration config =\n        final Configurations configs = new Configurations();\n        final FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final PropertiesConfiguration config =\n    private static void checkXML(final Configuration config)\n        final Configurations configs = new Configurations();\n        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final XMLConfiguration config =\n        final Configurations configs = new Configurations();\n        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final XMLConfiguration config =\n        final Configurations configs = new Configurations();\n        final FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final XMLConfiguration config = configs.xml(filePath(TEST_XML));\n    private static void checkINI(final INIConfiguration config)\n        final Configurations configs = new Configurations();\n        final FileBasedConfigurationBuilder<INIConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final INIConfiguration config =\n        final Configurations configs = new Configurations();\n        final FileBasedConfigurationBuilder<INIConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final INIConfiguration config =\n        final Configurations configs = new Configurations();\n        final FileBasedConfigurationBuilder<INIConfiguration> builder =\n        final Configurations configs = new Configurations();\n        final INIConfiguration config = configs.ini(filePath(TEST_INI));\n    private static void checkCombined(final Configuration config)\n        final Configurations configs = new Configurations();\n        final CombinedConfigurationBuilder builder =\n        final Configurations configs = new Configurations();\n        final CombinedConfiguration config =\n        final Configurations configs = new Configurations();\n        final CombinedConfigurationBuilder builder =\n        final Configurations configs = new Configurations();\n        final CombinedConfiguration config =\n        final Configurations configs = new Configurations();\n        final CombinedConfigurationBuilder builder =\n        final Configurations configs = new Configurations();\n        final CombinedConfiguration config =\n",
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestParameters.java": "        final Parameters parameters = new Parameters();\n        final BasicBuilderParameters basic = new Parameters().basic();\n    private static void checkBasicProperties(final Map<String, Object> map)\n        final Map<String, Object> map =\n        final FileBasedBuilderParametersImpl fbparams =\n    private static void checkInstanceOf(final Object obj, final Class<?> cls)\n    private static void checkInheritance(final Object params, final Class<?>... ifcClasses)\n        for (final Class<?> c : ifcClasses)\n        final FileBasedBuilderParameters params = new Parameters().fileBased();\n        final String s = params.toString();\n        final Map<String, Object> map =\n        final CombinedBuilderParametersImpl cparams =\n        final Map<String, Object> map =\n        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        final Map<String, Object> map =\n        final FileBasedBuilderParametersImpl fbp =\n        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        final Map<String, Object> map =\n        final FileBasedBuilderParametersImpl fbp =\n        final PropertiesConfiguration.IOFactory factory =\n        final Map<String, Object> map =\n        final FileBasedBuilderParametersImpl fbp =\n        final BuilderParameters bp = EasyMock.createMock(BuilderParameters.class);\n        final String pattern = \"a pattern\";\n        final Map<String, Object> map =\n        final MultiFileBuilderParametersImpl params =\n        final Map<String, Object> map =\n        final Object params = new Parameters().xml();\n        final FileBasedBuilderParameters fbParams =\n        final ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        final Map<String, Object> map = fbParams.getParameters();\n        final DefaultParametersManager manager =\n        final Parameters params = new Parameters(manager);\n        final XMLBuilderParameters xmlParams = params.xml();\n        final\n        final DefaultParametersManager manager =\n        final DefaultParametersHandler<XMLBuilderParameters> handler =\n        final Parameters params = new Parameters(manager);\n        final DefaultParametersManager manager =\n        final DefaultParametersHandler<XMLBuilderParameters> handler =\n        final Parameters params = new Parameters(manager);\n",
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultConversionHandler.java": "            public Object interpolate(final Object value)\n    private void checkSingleValue(final Integer expResult)\n        final Integer result = handler.to(VAR, Integer.class, createInterpolator());\n        final Integer result = handler.to(REPLACEMENT, Integer.class, null);\n        final Object[] src = {\n        final Collection<String> src = Arrays.asList(VAR, \"true\", \"1000\");\n        final Iterator<String> src = Arrays.asList(VAR, \"true\", \"1000\").iterator();\n        final ArrayList<Integer> col = new ArrayList<>();\n        final Object[] src = new Object[] {\n        final List<Integer> col = new ArrayList<>(src.length);\n        final List<Integer> col = new ArrayList<>(1);\n        final List<String> src = Arrays.asList(VAR, \"100\");\n        final Integer[] array =\n        final int[] src = new int[] {\n        final int[] array =\n        final Integer[] src = new Integer[] {\n        final int[] array =\n        final List<String> src = Arrays.asList(VAR, \"100\");\n        final int[] array =\n        final int[] array = (int[]) handler.toArray(\"\", Integer.TYPE, null);\n        final String dateFormat = \"dd.MM.yyyy\";\n        final Date dt = handler.to(\"19.08.2013\", Date.class, null);\n        final Calendar cal = Calendar.getInstance();\n        final Calendar cal = handler.to(\"2013-08-19 21:17:22\", Calendar.class, null);\n        final Long value = 20130819214935L;\n        final Object result = handler.to(value.toString(), Long.TYPE, null);\n",
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultListDelimiterHandler.java": "        final ValueTransformer trans = EasyMock.createMock(ValueTransformer.class);\n        final ValueTransformer trans = new ValueTransformer()\n            public Object transformValue(final Object value)\n        final List<String> data =\n    private void checkSplit(final String value, final boolean trim,\n            final String... expectedElements)\n        final Collection<String> elems = handler.split(value, trim);\n        for (final String elem : elems)\n",
            "src/test/java/org/apache/commons/configuration2/convert/TestDisabledListDelimiterHandler.java": "    private static void checkIterator(final Iterable<?> container)\n        final Iterator<?> it = container.iterator();\n        for (final Object o : VALUES)\n        final Iterator<?> it = handler.parse(STR_VALUE).iterator();\n        final ValueTransformer trans = EasyMock.createMock(ValueTransformer.class);\n        final String testStr = \"Some other string\";\n        final Object value = 42;\n        final ValueTransformer trans = EasyMock.createMock(ValueTransformer.class);\n        final Object value = 42;\n        final Collection<?> res = handler.flatten(VALUES, 1);\n        final Collection<Object> src = Arrays.asList(VALUES);\n        final Collection<?> res = handler.flatten(src, 1);\n        final Collection<Object> src = new ArrayList<>(2);\n        final Collection<?> res = handler.flatten(src, 2);\n        final Iterator<?> it = res.iterator();\n",
            "src/test/java/org/apache/commons/configuration2/convert/TestPropertyConverter.java": "        final File f = new File(\"dir\", \"file\");\n        final Path p = Paths.get(\"dir\", \"file\");\n        final Path p = Paths.get(\"dir\", \"file\");\n        final File f =  new File(\"dir\", \"file\");\n        final Integer i = new Integer(42);\n        final BigDecimal d = new BigDecimal(\"3.1415\");\n        final Number n = PropertyConverter.toNumber(\"0x10\", Integer.class);\n        final Number n = PropertyConverter.toNumber(\"0b1111\", Integer.class);\n        final Pattern p = Pattern.compile(\".+\");\n        final Pattern p = Pattern.compile(\".+\");\n        final String value = \"testValue\";\n        final Object value = new Object()\n        final Integer src = 42;\n        final Object result =\n",
            "src/test/java/org/apache/commons/configuration2/event/AbstractEventListenerTestImpl.java": "    protected AbstractEventListenerTestImpl(final Object source)\n    public void onEvent(final T event)\n    public void checkEventCount(final int minEvents)\n    public T nextEvent(final EventType<?> expectedType)\n        final T e = events.remove(0);\n    public void skipToLast(final EventType<?> type)\n            final T e = events.remove(0);\n",
            "src/test/java/org/apache/commons/configuration2/event/ErrorListenerTestImpl.java": "    public ErrorListenerTestImpl(final Object source)\n    public Throwable checkEvent(final EventType<?> type, final EventType<?> opType,\n            final String propName, final Object propValue)\n        final ConfigurationErrorEvent e = nextEvent(type);\n",
            "src/test/java/org/apache/commons/configuration2/event/EventListenerTestImpl.java": "    public EventListenerTestImpl(final Object source)\n    public void checkEvent(final EventType<?> type, final String propName, final Object propValue,\n            final boolean before)\n        final ConfigurationEvent e = nextEvent(type);\n",
            "src/test/java/org/apache/commons/configuration2/event/TestConfigurationEventTypes.java": "        final Set<EventType<?>> superTypes = EventType.fetchSuperEventTypes(null);\n        final Set<EventType<?>> superTypes =\n        final Set<EventType<?>> superTypes =\n        final List<EventType<? extends Event>> expected =\n    private void checkUpdateEvent(final EventType<ConfigurationEvent> eventType)\n    private void checkHierarchicalEvent(final EventType<ConfigurationEvent> eventType)\n    private void checkErrorEvent(final EventType<ConfigurationErrorEvent> type)\n",
            "src/test/java/org/apache/commons/configuration2/event/TestDatabaseConfigurationEvents.java": "        catch (final ConfigurationException e)\n",
            "src/test/java/org/apache/commons/configuration2/event/TestEvent.java": "        final Event event = new Event(this, Event.ANY);\n        final String s = event.toString();\n",
            "src/test/java/org/apache/commons/configuration2/event/TestEventListenerList.java": "        final ListenerTestImpl listener = new ListenerTestImpl();\n        final ListenerTestImpl listener1 = new ListenerTestImpl();\n        final ListenerTestImpl listener2 = new ListenerTestImpl();\n        final ListenerTestImpl listener1 = new ListenerTestImpl();\n        final ListenerTestImpl listener2 = new ListenerTestImpl();\n        final ListenerTestImpl listener = new ListenerTestImpl();\n        final ListenerTestImpl listener = new ListenerTestImpl();\n        final ListenerTestImpl listener = new ListenerTestImpl();\n        final EventListenerRegistrationData<EventSub1> regData =\n        final ListenerTestImpl listener = new ListenerTestImpl();\n        final ListenerTestImpl listener = new ListenerTestImpl();\n        final ListenerTestImpl listener = new ListenerTestImpl();\n    private static <T> List<T> fetchElements(final Iterable<? extends T> iterable)\n        final List<T> elems = new LinkedList<>();\n        for (final T listener : iterable)\n            final EventType<? extends Event> eventType,\n            final EventListener<?>... expListeners)\n        final List<?> listeners = fetchElements(list.getEventListeners(eventType));\n        final ListenerTestImpl listener1 = new ListenerTestImpl();\n        final ListenerTestImpl listener2 = new ListenerTestImpl();\n        final ListenerTestImpl listener1 = new ListenerTestImpl();\n        final ListenerTestImpl listener2 = new ListenerTestImpl();\n        final ListenerTestImpl listener1 = new ListenerTestImpl();\n        final ListenerTestImpl listener2 = new ListenerTestImpl();\n        final Iterator<EventListener<? super EventBase>> iterator =\n        final Iterator<EventListener<? super EventBase>> iterator =\n        final EventListener<EventSub2> listener = new EventListener<EventSub2>()\n            public void onEvent(final EventSub2 event)\n        final EventListenerList.EventListenerIterator<EventSub2> iterator =\n        final EventListenerList.EventListenerIterator<EventBase> iterator =\n        final EventListenerRegistrationData<EventSub1> reg1 =\n        final EventListenerRegistrationData<EventSub2> reg2 =\n        final List<EventListenerRegistrationData<?>> registrations =\n        final EventListener<EventBase> l1 = new ListenerTestImpl();\n        final EventListener<EventBase> l2 = new ListenerTestImpl();\n        final EventListener<EventBase> l3 = new ListenerTestImpl();\n        final EventListenerList list2 = new EventListenerList();\n        final Iterator<EventListenerRegistrationData<?>> it =\n        final ListenerTestImpl l1 = new ListenerTestImpl();\n        final ListenerTestImpl l2 = new ListenerTestImpl();\n        final\n        final List<EventListenerRegistrationData<? extends EventBase>> regs =\n        final Iterator<EventListenerRegistrationData<? extends EventBase>> iterator =\n        public EventBase(final Object source, final EventType<? extends EventBase> type,\n                final String msg)\n        public EventSub1(final Object source, final EventType<? extends EventSub1> type,\n                final String msg)\n        public EventSub2(final Object source, final EventType<? extends EventSub2> type,\n                final String msg)\n        public void onEvent(final EventBase event)\n        public void assertEvent(final Object expSource, final EventType<?> expType,\n                final String expMessage)\n",
            "src/test/java/org/apache/commons/configuration2/event/TestEventSource.java": "        final EventListenerTestImpl l = new EventListenerTestImpl(this);\n        final Collection<EventListener<? super ConfigurationEvent>> listeners =\n        final EventListenerTestImpl l = new EventListenerTestImpl(this);\n        final Collection<EventListener<? super ConfigurationEvent>> list =\n        final Collection<EventListener<? super ConfigurationEvent>> list =\n        final EventListenerTestImpl l = new EventListenerTestImpl(source);\n        final EventListenerTestImpl l = new EventListenerTestImpl(source);\n        final EventListener<ConfigurationEvent> lstRemove = new EventListener<ConfigurationEvent>()\n            public void onEvent(final ConfigurationEvent event)\n        final EventListenerTestImpl l = new EventListenerTestImpl(source);\n        final ErrorListenerTestImpl lstRead = new ErrorListenerTestImpl(source);\n        final ErrorListenerTestImpl lstWrite = new ErrorListenerTestImpl(source);\n        final ErrorListenerTestImpl lstAll = new ErrorListenerTestImpl(source);\n        final Exception testException = new Exception(\"A test\");\n        final BaseEventSource copy = (BaseEventSource) source.clone();\n        final EventListenerTestImpl l1 = new EventListenerTestImpl(source);\n        final EventListenerTestImpl l2 = new EventListenerTestImpl(source);\n        final BaseEventSource source2 = new BaseEventSource();\n        final EventListener<ConfigurationEvent> cl = new EventListenerTestImpl(null);\n        final ErrorListenerTestImpl el1 = new ErrorListenerTestImpl(null);\n        final ErrorListenerTestImpl el2 = new ErrorListenerTestImpl(null);\n        final ErrorListenerTestImpl el3 = new ErrorListenerTestImpl(null);\n        final List<EventListenerRegistrationData<?>> regs =\n                final EventType<T> eventType, final String propName, final Object propValue,\n                final boolean before)\n                final EventType<? extends ConfigurationErrorEvent> type,\n                final EventType<?> opType, final String propName, final Object propValue,\n                final Throwable ex)\n",
            "src/test/java/org/apache/commons/configuration2/event/TestEventType.java": "        final String s = eventType.toString();\n",
            "src/test/java/org/apache/commons/configuration2/event/TestHierarchicalConfigurationEvents.java": "        final BaseHierarchicalConfiguration hc = (BaseHierarchicalConfiguration) config;\n        final String key = EXIST_PROPERTY.substring(0, EXIST_PROPERTY.indexOf('.'));\n        final NodeHandler<ImmutableNode> nodeHandler = hc.getNodeModel().getNodeHandler();\n        final Collection<QueryResult<ImmutableNode>> nodes = hc.getExpressionEngine()\n        final BaseHierarchicalConfiguration hc = (BaseHierarchicalConfiguration) config;\n        final Collection<ImmutableNode> nodes = new ArrayList<>(1);\n        final HierarchicalConfiguration<ImmutableNode> sub =\n        final HierarchicalConfiguration<ImmutableNode> sub =\n    private void checkSubnodeEvent(final ConfigurationEvent event, final boolean before)\n        final ConfigurationEvent evSub = (ConfigurationEvent) event\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestConfigurationInterpolator.java": "        final Lookup lookup = EasyMock.createMock(Lookup.class);\n        final Lookup lookup = EasyMock.createMock(Lookup.class);\n        final Lookup lookup = EasyMock.createMock(Lookup.class);\n        final Lookup l1 = EasyMock.createMock(Lookup.class);\n        final Lookup l2 = EasyMock.createMock(Lookup.class);\n        final Lookup l3 = EasyMock.createMock(Lookup.class);\n        final Lookup l1 = setUpTestLookup();\n        final Lookup l2 = setUpTestLookup(\"someVar\", \"someValue\");\n        final Map<String, Lookup> lookups = new HashMap<>();\n        final String prefix2 = TEST_PREFIX + \"_other\";\n        final Map<String, Lookup> lookups2 = interpolator.getLookups();\n        final Map<String, Lookup> lookups = interpolator.getLookups();\n        final List<Lookup> lookups = new ArrayList<>();\n        final List<Lookup> lookups2 = interpolator.getDefaultLookups();\n        final List<Lookup> lookups = interpolator.getDefaultLookups();\n        final List<Lookup> lookups = new ArrayList<>();\n        final Iterator<String> it = interpolator.prefixSet().iterator();\n        final ConfigurationInterpolator parent =\n        final ConfigurationInterpolator parent =\n        final Object value = 42;\n        final String value = \"${\" + TEST_PREFIX + ':' + TEST_NAME + \"}\";\n        final String value = \"${unknownVariable}\";\n        final String var = \"${jre-${java.version}}\";\n        final String value = \"The ${subject} jumps over ${object}.\";\n        final Object value = 42;\n        final String value = \"${\" + TEST_NAME;\n        final String value = \"${}\";\n        final ConfigurationInterpolator ci =\n        final InterpolatorSpecification spec =\n        final Lookup defLookup = EasyMock.createMock(Lookup.class);\n        final Lookup preLookup = EasyMock.createMock(Lookup.class);\n        final InterpolatorSpecification spec =\n        final ConfigurationInterpolator ci =\n        final Map<String, Lookup> lookups =\n        for (final DefaultLookups l : DefaultLookups.values())\n        final Lookup look = EasyMock.createMock(Lookup.class);\n        final Lookup lookup = ConfigurationInterpolator.nullSafeLookup(null);\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestConstantLookup.java": "    private String variable(final String field)\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestEnvironmentLookup.java": "        final EnvironmentConfiguration envConf = new EnvironmentConfiguration();\n        for (final Iterator<String> it = envConf.getKeys(); it.hasNext();)\n            final String var = it.next();\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestExprLookup.java": "        final XMLConfiguration config = new XMLConfiguration();\n        final FileHandler handler = new FileHandler(config);\n        final ConsoleAppender app = new ConsoleAppender(new SimpleLayout());\n        final Log log = LogFactory.getLog(\"TestLogger\");\n        final Logger logger = ((Log4JLogger)log).getLogger();\n        final ExprLookup.Variables vars = new ExprLookup.Variables();\n        final XMLConfiguration config = loadConfig();\n        final ConfigurationLogger testLogger = new ConfigurationLogger(\"TestLogger\");\n        final ExprLookup lookup = new ExprLookup(vars);\n        final ExprLookup.Variables vars = new ExprLookup.Variables();\n        final ExprLookup lookup = new ExprLookup(vars);\n        final String value = \"test\";\n        final ExprLookup.Variables vars = new ExprLookup.Variables();\n        final ExprLookup lookup = new ExprLookup(vars);\n        final ExprLookup.Variables vars = new ExprLookup.Variables();\n        final ExprLookup lookup = new ExprLookup(vars);\n        final ExprLookup.Variables vars2 = lookup.getVariables();\n        final ExprLookup.Variables vars = new ExprLookup.Variables();\n        final ExprLookup lookup = new ExprLookup(vars);\n        final XMLConfiguration config = loadConfig();\n        final String pattern = \"System.currentTimeMillis()\";\n        final String result = lookup.lookup(pattern);\n        final ExprLookup.Variables vars = new ExprLookup.Variables();\n        final ExprLookup lookup = new ExprLookup(vars);\n        final XMLConfiguration config = loadConfig();\n        public Utility(final String msg)\n        public String str(final String str)\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestInterpolatorSpecification.java": "    private static <T> T createMock(final Class<T> cls)\n        final T mock = EasyMock.createMock(cls);\n    private static void checkPrefixLookups(final InterpolatorSpecification spec,\n            final Lookup prefLook1, final Lookup prefLook2)\n    private static void checkDefaultLookups(final InterpolatorSpecification spec,\n            final Lookup defLook1, final Lookup defLook2)\n        final Lookup prefLook1 = createLookup();\n        final Lookup prefLook2 = createLookup();\n        final Lookup defLook1 = createLookup();\n        final Lookup defLook2 = createLookup();\n        final ConfigurationInterpolator interpolator =\n        final ConfigurationInterpolator parent =\n        final InterpolatorSpecification spec =\n        final Lookup prefLook1 = createLookup();\n        final Lookup prefLook2 = createLookup();\n        final Lookup defLook1 = createLookup();\n        final Lookup defLook2 = createLookup();\n        final Map<String, Lookup> prefixLookups = new HashMap<>();\n        final InterpolatorSpecification spec =\n        final InterpolatorSpecification spec =\n        final InterpolatorSpecification spec =\n        final InterpolatorSpecification spec =\n        final InterpolatorSpecification spec =\n        final Lookup prefLook1 = createLookup();\n        final Lookup prefLook2 = createLookup();\n        final Lookup defLook1 = createLookup();\n        final Lookup defLook2 = createLookup();\n        final ConfigurationInterpolator parent =\n        final InterpolatorSpecification spec =\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestSystemPropertiesLookup.java": "        for(final Map.Entry<Object, Object> e : System.getProperties().entrySet())\n",
            "src/test/java/org/apache/commons/configuration2/io/TestAbsoluteNameLocationStrategy.java": "        final FileLocator locator = FileLocatorUtils.fileLocator().create();\n        final FileLocator locator =\n        final File file = ConfigurationAssert.getOutFile(\"NotExistingFile.tst\");\n        final FileLocator locator =\n        final File file = ConfigurationAssert.getTestFile(\"test.xml\");\n        final FileLocator locator =\n        final URL url = strategy.locate(fileSystem, locator);\n",
            "src/test/java/org/apache/commons/configuration2/io/TestBasePathLocationStrategy.java": "    private static void checkURL(final URL url)\n        final File path = ConfigurationAssert.TEST_DIR;\n        final FileLocator locator =\n        final File path = ConfigurationAssert.TEST_DIR;\n        final FileLocator locator =\n        final FileLocator locator =\n        final FileLocator locator =\n",
            "src/test/java/org/apache/commons/configuration2/io/TestClasspathLocationStrategy.java": "        final FileLocator locator =\n        final URL url = strategy.locate(fileSystem, locator);\n        final Configurations configurations = new Configurations();\n        final XMLConfiguration config1 = configurations.xml(url);\n        final XMLConfiguration config2 = configurations.xml(ConfigurationAssert.getTestURL(FILE_NAME));\n        final FileLocator locator =\n        final FileLocator locator =\n",
            "src/test/java/org/apache/commons/configuration2/io/TestCombinedLocationStrategy.java": "    private void checkSubStrategies(final CombinedLocationStrategy strategy)\n        final Collection<FileLocationStrategy> subs = strategy.getSubStrategies();\n        for (final FileLocationStrategy strat : subs)\n        final Collection<FileLocationStrategy> col =\n        final Collection<FileLocationStrategy> col =\n        final CombinedLocationStrategy strategy = new CombinedLocationStrategy(col);\n        final CombinedLocationStrategy strategy = createCombinedStrategy();\n        final CombinedLocationStrategy strategy = createCombinedStrategy();\n        final CombinedLocationStrategy strategy = createCombinedStrategy();\n        final CombinedLocationStrategy strategy = createCombinedStrategy();\n",
            "src/test/java/org/apache/commons/configuration2/io/TestConfigurationLogger.java": "        final ConfigurationLogger logger1 =\n        final ConfigurationLogger logger2 = new ConfigurationLogger(getClass());\n        final Log log = EasyMock.createMock(Log.class);\n        final ConfigurationLogger logger = new ConfigurationLogger(log);\n        final Log log = EasyMock.createMock(Log.class);\n        final ConfigurationLogger logger = new ConfigurationLogger(log);\n        final Log log = EasyMock.createMock(Log.class);\n        final ConfigurationLogger logger = new ConfigurationLogger(log);\n        final Log log = EasyMock.createMock(Log.class);\n        final ConfigurationLogger logger = new ConfigurationLogger(log);\n        final Log log = EasyMock.createMock(Log.class);\n        final ConfigurationLogger logger = new ConfigurationLogger(log);\n        final Log log = EasyMock.createMock(Log.class);\n        final Throwable ex = new Exception(\"Test exception\");\n        final ConfigurationLogger logger = new ConfigurationLogger(log);\n        final Log log = EasyMock.createMock(Log.class);\n        final ConfigurationLogger logger = new ConfigurationLogger(log);\n        final Log log = EasyMock.createMock(Log.class);\n        final Throwable ex = new Exception(\"Test exception\");\n        final ConfigurationLogger logger = new ConfigurationLogger(log);\n        final ConfigurationLogger logger = ConfigurationLogger.newDummyLogger();\n        final ConfigurationLogger logger = new ConfigurationLogger()\n            public void info(final String msg)\n        final AbstractConfiguration config = new BaseConfiguration();\n        final ConfigurationLogger logger = new ConfigurationLogger(getClass());\n        final AbstractConfiguration config = new BaseConfiguration();\n        final AbstractConfiguration config = new BaseConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/io/TestDefaultFileSystem.java": "        final ConfigurationLogger log = new ConfigurationLogger(getClass());\n",
            "src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java": "    private File createTestFile(final File f)\n        catch (final IOException ioex)\n                catch (final IOException ioex)\n    private static String readReader(final Reader in) throws IOException\n        final StringBuilder buf = new StringBuilder();\n    private static String readFile(final File f)\n        catch (final IOException ioex)\n                catch (final IOException ioex)\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileSystem sys = EasyMock.createMock(FileSystem.class);\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileSystem sys = EasyMock.createMock(FileSystem.class);\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileHandler handler = new FileHandler();\n        final FileLocationStrategy strategy =\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final URL url =\n        final FileHandler handler = new FileHandler();\n        final FileLocator locator = handler.getFileLocator();\n        final FileHandler handler = new FileHandler();\n        final File directory = ConfigurationAssert.TEST_DIR;\n        final File file = ConfigurationAssert.getTestFile(TEST_FILENAME);\n        final FileHandler handler = new FileHandler();\n        final File file = ConfigurationAssert.getTestFile(TEST_FILENAME);\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final String basePath = ConfigurationAssert.TEST_DIR_NAME;\n        final FileLocator locator = handler.getFileLocator();\n        final FileHandler handler = new FileHandler();\n        final String testProperties =\n        final String testBasePath = ConfigurationAssert.TEST_DIR.getAbsolutePath();\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final StringReader reader = new StringReader(CONTENT);\n        final FileBased content = EasyMock.createMock(FileBased.class);\n        final Reader in = new StringReader(CONTENT);\n        final IOException ioex = new IOException(\"Test exception\");\n        final FileHandler handler = new FileHandler(content);\n        catch (final ConfigurationException cex)\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final File file = createTestFile();\n        final FileHandler handler = new FileHandler(content);\n        final FileHandler handler = new FileHandler();\n        final File file = createTestFile();\n        catch (final ConfigurationException cex)\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler config1 = new FileHandler(content);\n        final File file = createTestFile();\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final File file = createTestFile();\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final File file = createTestFile();\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final File file = createTestFile();\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final FileInputStream in = new FileInputStream(file);\n        final File file = createTestFile();\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final Reader in = new FileReader(file);\n        final File file = createTestFile();\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final File file = createTestFile();\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final StringWriter out = new StringWriter();\n        final FileBased content = EasyMock.createMock(FileBased.class);\n        final StringWriter out = new StringWriter();\n        final IOException ioex = new IOException(\"Test exception!\");\n        final FileHandler handler = new FileHandler(content);\n        catch (final ConfigurationException cex)\n        final FileHandler handler = new FileHandler();\n        final File file = folder.newFile();\n        final FileOutputStream out = new FileOutputStream(file);\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final File file = folder.newFile();\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final File file = folder.newFile();\n        final URL url = file.toURI().toURL();\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final File file = folder.newFile();\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final File file = folder.newFile();\n        final String basePath = \"some base path\";\n        final MalformedURLException urlex =\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        catch (final ConfigurationException cex)\n        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final File file = folder.newFile();\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        catch (final ConfigurationException cex)\n        final File file = folder.newFile();\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final File file = folder.newFile();\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final File path = folder.newFolder(\"path with spaces\");\n        final File confFile = new File(path, \"config-test.properties\");\n        final File testFile = createTestFile(confFile);\n        final URL url = testFile.toURI().toURL();\n        final FileBasedTestImpl content = new FileBasedTestImpl();\n        final FileHandler handler = new FileHandler(content);\n        final File out = new File(path, \"out.txt\");\n        final File saveFile = folder.newFile(\"test+config.properties\");\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileHandler h1 = new FileHandler();\n        final File f = new File(\"testfile.txt\");\n        final FileBased content = new FileBasedTestImpl();\n        final FileHandler h2 = new FileHandler(content, h1);\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final File file = createTestFile();\n        final FileBasedFileLocatorAwareTestImpl content =\n        final FileHandler handler = new FileHandler(content);\n            final FileBasedFileLocatorAwareTestImpl content)\n        final FileBasedFileLocatorAwareTestImpl content =\n        final FileHandler handler = new FileHandler(content);\n        final ByteArrayInputStream bos = new ByteArrayInputStream(CONTENT.getBytes());\n        final FileBasedFileLocatorAwareTestImpl content =\n        final FileHandler handler = new FileHandler(content);\n        final File file = folder.newFile();\n        final FileBasedFileLocatorAwareTestImpl content =\n        final FileHandler handler = new FileHandler(content);\n        final FileBasedFileLocatorAwareTestImpl content =\n        final FileHandler handler = new FileHandler(content);\n        final FileBasedFileLocatorAwareTestImpl content =\n        final FileHandler handler = new FileHandler(content);\n        final FileBasedFileLocatorAwareTestImpl content =\n        final FileHandler handler = new FileHandler(content);\n        final String encoding = \"testEncoding\";\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileHandlerListenerTestImpl listener =\n        final FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        final FileHandlerListenerTestImpl listener =\n        final File f = folder.newFile();\n        final FileHandler handler = new FileHandler();\n        final FileHandlerListenerTestImpl listener =\n        final FileHandler handler = new FileHandler();\n        final FileHandlerListenerTestImpl listener =\n        final FileHandler handler = new FileHandler();\n        final FileHandlerListenerTestImpl listener =\n        final FileHandler handler = new FileHandler();\n        final FileHandlerListenerTestImpl listener =\n        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final FileHandler handler = new FileHandler();\n        final FileHandlerListenerTestImpl listener =\n        final FileHandler handler = new FileHandler();\n        final FileHandlerListenerTestImpl listener =\n        final URL url = folder.newFile().toURI().toURL();\n        final FileHandler handler = new FileHandler();\n        final FileHandlerListenerTestImpl listener =\n        final FileHandler handler = new FileHandler();\n        final FileHandlerListenerTestImpl listener =\n        final FileBasedInputStreamSupportTestImpl content =\n        final FileHandler handler = new FileHandler(content);\n        final ByteArrayInputStream bin = new ByteArrayInputStream(CONTENT.getBytes());\n        final FileBasedInputStreamSupportTestImpl content =\n        final ByteArrayInputStream bin = new ByteArrayInputStream(CONTENT.getBytes());\n        final IOException ioex = new IOException();\n        final FileHandler handler = new FileHandler(content);\n        catch (final ConfigurationException cex)\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final FileHandler handler = new FileHandler(config);\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        final FileHandler handler = new FileHandler(config);\n        final File f = folder.newFile();\n            final Thread t1 = new Thread()\n            final Thread t2 = new Thread()\n            final Thread t3 = new Thread()\n            final Thread t4 = new Thread()\n            final List<Thread> threads = Arrays.asList(t1, t2, t3, t4);\n            for (final Thread t : threads)\n            for (final Thread t : threads)\n            final FileLocator locator = handler.getFileLocator();\n        final FileHandler handler = new FileHandler();\n        final FileLocator locator =\n        final FileHandler handler = new FileHandler();\n        final FileHandler handler = new FileHandler();\n        final FileLocator locator = handler.getFileLocator();\n        final PropertiesConfiguration config = new PropertiesConfiguration();\n        final FileHandler h2 = new FileHandler(config);\n        final FileHandler handler = new FileHandler();\n        final FileLocator locator = handler.getFileLocator();\n        final FileHandler handler = new FileHandler();\n        final FileLocator locator = handler.getFileLocator();\n        final FileLocator locator =\n        final Map<String, Object> map = new HashMap<>();\n        final FileHandler handler = FileHandler.fromMap(map);\n        public void setContent(final String content)\n        public void read(final Reader in) throws ConfigurationException, IOException\n        public void write(final Writer out) throws ConfigurationException,\n        public void read(final InputStream in) throws ConfigurationException,\n            final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        public void initFileLocator(final FileLocator loc)\n        public void read(final Reader in) throws ConfigurationException, IOException\n        public void write(final Writer out) throws ConfigurationException,\n        public FileHandlerListenerTestImpl(final FileHandler fh)\n        public void checkMethods(final String expMethods)\n        public void loading(final FileHandler handler)\n        public void loaded(final FileHandler handler)\n        public void saving(final FileHandler handler)\n        public void saved(final FileHandler handler)\n        public void locationChanged(final FileHandler handler)\n        private void methodCalled(final FileHandler handler, final String method)\n",
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocator.java": "        final FileLocator locator = FileLocatorUtils.fileLocator().create();\n    private static void checkLocator(final FileLocator locator)\n        final FileLocator locator =\n        final FileLocator locatorSrc =\n        final FileLocator locator =\n        final FileLocator loc1 =\n        final FileLocator loc =\n        final FileLocator loc =\n        final FileLocator loc =\n        final String s = loc.toString();\n",
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocatorUtils.java": "        final File file = new File(\"https%3A%2F%2Fwww.apache.org%2F.url\").getAbsoluteFile();\n        final URL fileURL = file.toURI().toURL();\n        final File file2 = FileLocatorUtils.fileFromURL(fileURL);\n        final File file = new File(new File(\"target\"), \"foo+bar.txt\")\n        final URL fileURL = file.toURI().toURL();\n        final File file2 = FileLocatorUtils.fileFromURL(fileURL);\n        final File directory = new File(\"target\");\n        final File reference = new File(directory, \"test.txt\").getAbsoluteFile();\n        final ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final FileLocator locator =\n        final FileLocator locator =\n        final FileLocator locator =\n        final FileLocator locator =\n    private static void checkTestConfiguration(final FileHandler handler)\n        final XMLConfiguration config = new XMLConfiguration();\n        final FileHandler h2 = new FileHandler(config, handler);\n    private static void checkFullyInitializedLocator(final FileLocator locator)\n        final FileLocator locator =\n        final FileLocator locator =\n        final FileLocator locator =\n        final FileLocator fullLocator =\n        final FileLocator locator =\n        final FileLocator locator =\n        final URI uri = new URI(\"test://test/path/file.tst\");\n        final File file = ConfigurationAssert.getTestFile(FILE_NAME);\n        final FileHandler handler = new FileHandler();\n        final CombinedLocationStrategy strategy =\n        final Iterator<FileLocationStrategy> it =\n        final FileLocationStrategy strategy =\n        final FileLocator locator =\n        final FileLocator locator = FileLocatorUtils.fileLocator().create();\n        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final FileLocationStrategy strategy =\n        final FileLocator locator =\n        final FileLocationStrategy strategy =\n        final FileLocator locator =\n        final FileLocator locator =\n        final FileLocationStrategy strategy =\n        final FileLocator locator =\n        final FileLocationStrategy strategy =\n        final FileLocator locator =\n        final Map<String, Object> map = new HashMap<>();\n        final FileLocator locator2 = FileLocatorUtils.fromMap(map);\n        final Map<String, Object> map = new HashMap<>();\n        final FileLocator fileLocator = FileLocatorUtils.fromMap(null);\n",
            "src/test/java/org/apache/commons/configuration2/io/TestFileSystemLocationStrategy.java": "        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final URL url = ConfigurationAssert.getTestURL(\"test.xml\");\n        final FileLocator locator =\n",
            "src/test/java/org/apache/commons/configuration2/io/TestHomeDirectoryLocationStrategy.java": "    private HomeDirectoryLocationStrategy setUpStrategy(final boolean withBasePath)\n        final HomeDirectoryLocationStrategy strategy =\n        final File file = folder.newFile(FILE_NAME);\n        final FileLocator locator =\n        final HomeDirectoryLocationStrategy strategy = setUpStrategy(false);\n        final URL url = strategy.locate(fileSystem, locator);\n        final FileLocator locator =\n        final HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n        final File sub = folder.newFolder(BASE_PATH);\n        final File file = new File(sub, FILE_NAME);\n        final FileLocator locator =\n        final HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n        final URL url = strategy.locate(fileSystem, locator);\n        final File file = folder.newFile(FILE_NAME);\n        final FileLocator locator =\n        final HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n        final URL url = strategy.locate(fileSystem, locator);\n        final FileLocator locator =\n        final HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n",
            "src/test/java/org/apache/commons/configuration2/io/TestProvidedURLLocationStrategy.java": "        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final URL url = ConfigurationAssert.getTestURL(\"test.xml\");\n        final FileLocator locator =\n        final FileSystem fs = EasyMock.createMock(FileSystem.class);\n        final FileLocator locator =\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java": "    private static void load(final PropertyListConfiguration c, final File f)\n        } catch (final ConfigurationException e) {\n        final String key = \"empty-array\";\n        final List<?> list = (List<?>) config.getProperty(key);\n        final String key = \"array\";\n        final List<?> list = (List<?>) config.getProperty(key);\n        final String key = \"nested-arrays\";\n        final Object array = config.getProperty(key);\n        final List<?> list = config.getList(key);\n        final List<?> list1 = (List<?>) list.get(0);\n        final List<?> list2 = (List<?>) list.get(1);\n        final String key = \"dictionary-array\";\n        final Object array = config.getProperty(key);\n        final List<?> list = config.getList(key);\n        final Configuration conf1 = (Configuration) list.get(0);\n        final Configuration conf2 = (Configuration) list.get(1);\n        final Calendar cal = Calendar.getInstance();\n        final Date date = cal.getTime();\n    private void saveConfig(final File file) throws ConfigurationException\n        final File savedFile = folder.newFile(\"testsave.plist\");\n        final PropertyListConfiguration checkConfig = new PropertyListConfiguration();\n        final Iterator<String> it = config.getKeys();\n            final String key = it.next();\n            final Object value = checkConfig.getProperty(key);\n                final byte[] array = (byte[]) value;\n                final List<?> list1 = (List<?>) config.getProperty(key);\n                final List<?> list2 = (List<?>) value;\n                    final Object value1 = list1.get(i);\n                    final Object value2 = list2.get(i);\n                        final ConfigurationComparator comparator = new StrictConfigurationComparator();\n        final File savedFile = folder.newFile(\"testsave.plist\");\n        final PropertyListConfiguration checkConfig = new PropertyListConfiguration();\n            final HierarchicalConfiguration<ImmutableNode> config, final String name)\n        final NodeHandler<ImmutableNode> handler =\n        final File saveFile = folder.newFile();\n        final byte[] expected = new byte[]{1, 2, 3, 4};\n        final PropertyListConfiguration config2 = new PropertyListConfiguration();\n        final Object array = config2.getProperty(\"foo\");\n        final File saveFile = folder.newFile();\n        final byte[] expected = new byte[]{1, 2, 3, 4};\n        final PropertyListConfiguration config2 = new PropertyListConfiguration();\n        final Object array = config2.getProperty(\"foo\");\n        final PropertyListConfiguration copy = new PropertyListConfiguration(config);\n        final Calendar cal = Calendar.getInstance();\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfigurationEvents.java": "            final PropertyListConfiguration c = new PropertyListConfiguration();\n        catch (final ConfigurationException cex)\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListParser.java": "        final Calendar calendar = Calendar.getInstance();\n        final byte[] expected = new byte[] {0x20, 0x20};\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java": "    private static void load(final XMLPropertyListConfiguration c, final File file)\n    private void save(final File file) throws ConfigurationException\n        final Calendar calendar = Calendar.getInstance();\n        final Configuration subset = config.subset(\"dictionary\");\n        final Iterator<String> keys = subset.getKeys();\n        final Object array = config.getProperty(\"array\");\n        final List<?> list = config.getList(\"array\");\n        final String key = \"nested-array\";\n        final Object array = config.getProperty(key);\n        final List<?> list = config.getList(key);\n        final List<?> list1 = (List<?>) list.get(0);\n        final List<?> list2 = (List<?>) list.get(1);\n        final String key = \"dictionary-array\";\n        final Object array = config.getProperty(key);\n        final List<?> list = config.getList(key);\n        final Configuration conf1 = (Configuration) list.get(0);\n        final Configuration conf2 = (Configuration) list.get(1);\n        final File savedFile = folder.newFile();\n        final XMLPropertyListConfiguration checkConfig = new XMLPropertyListConfiguration();\n        final Iterator<String> it = config.getKeys();\n            final String key = it.next();\n            final Object value = checkConfig.getProperty(key);\n                final byte[] array = (byte[]) value;\n                final List<?> list1 = (List<?>) config.getProperty(key);\n                final List<?> list2 = (List<?>) value;\n                    final Object value1 = list1.get(i);\n                    final Object value2 = list2.get(i);\n                        final ConfigurationComparator comparator = new StrictConfigurationComparator();\n        final File savedFile = folder.newFile();\n        final XMLPropertyListConfiguration checkConfig = new XMLPropertyListConfiguration();\n        final File savedFile = folder.newFile();\n        final byte[] expected = new byte[]{1, 2, 3, 4};\n        final XMLPropertyListConfiguration config2 = new XMLPropertyListConfiguration();\n        final Object array = config2.getProperty(\"foo\");\n        final File savedFile = folder.newFile();\n        final byte[] expected = new byte[]{1, 2, 3, 4};\n        final XMLPropertyListConfiguration config2 = new XMLPropertyListConfiguration();\n        final Object array = config2.getProperty(\"foo\");\n        final XMLPropertyListConfiguration copy = new XMLPropertyListConfiguration(config);\n        final StrictConfigurationComparator comp = new StrictConfigurationComparator();\n        final XMLPropertyListConfiguration plist = new XMLPropertyListConfiguration();\n        final XMLPropertyListConfiguration plist = new XMLPropertyListConfiguration();\n        final StringWriter writer = new StringWriter();\n        final String encoding = \"UTF-8\";\n        final FileHandler handler = new FileHandler(config);\n        final StringWriter writer = new StringWriter();\n    private void checkArrayProperty(final List<?> expectedValues)\n        final StringWriter out = new StringWriter();\n        final StringBuilder values = new StringBuilder();\n        for (final Object v : expectedValues)\n        final String content = out.toString().replaceAll(\"[ \\n\\r]\", \"\");\n        final List<String> elems =\n        final Object[] elems = {\n        final Writer out = new FileWriter(folder.newFile());\n        catch (final ConfigurationException e)\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfigurationEvents.java": "            final XMLPropertyListConfiguration c = new XMLPropertyListConfiguration();\n        catch (final ConfigurationException cex)\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java": "        final List<ReloadingController> lstCtrls =\n        final CombinedReloadingController result =\n        final Collection<ReloadingController> ctrls =\n        final CombinedReloadingController ctrl = setUpController();\n        final CombinedReloadingController ctrl = setUpController();\n        for (final ReloadingController rc : subControllers)\n        final CombinedReloadingController ctrl = setUpController();\n        for (final ReloadingController rc : subControllers)\n        final CombinedReloadingController ctrl = setUpController();\n        for (final ReloadingController rc : subControllers)\n        final CombinedReloadingController ctrl = setUpController();\n        final Collection<ReloadingController> subs = ctrl.getSubControllers();\n        final Collection<ReloadingController> subs =\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java": "\t\tfinal FileHandler handler = new FileHandler();\n\t\tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector(\n    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n        final File f = EasyMock.createMock(File.class);\n        final FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n        final File f = EasyMock.createMock(File.class);\n        final FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n        final File f = EasyMock.createMock(File.class);\n        final FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n        final File f = EasyMock.createMock(File.class);\n        final FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n        final File f = EasyMock.createMock(File.class);\n\t\tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(\n    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n    \tfinal FileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n        final URL url =\n        final File file = detector.getFile();\n\t\tpublic FileHandlerReloadingDetectorTestImpl(final File file) {\n\t\tpublic FileHandlerReloadingDetectorTestImpl(final File file, final long delay)\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestPeriodicReloadingTrigger.java": "        final PeriodicReloadingTrigger trigger =\n        final\n    private void expectSchedule(final ScheduledFuture<Void> future)\n        final PeriodicReloadingTrigger trigger = createTrigger();\n        final ScheduledFuture<Void> future = createFutureMock();\n        final PeriodicReloadingTrigger trigger = createTrigger();\n        final ScheduledFuture<Void> future = createFutureMock();\n        final PeriodicReloadingTrigger trigger = createTrigger();\n        final ScheduledFuture<Void> future = createFutureMock();\n        final PeriodicReloadingTrigger trigger = createTrigger();\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestReloadingController.java": "        final\n    private void expectEvent(final EventListener<ReloadingEvent> l,\n        final EventListener<ReloadingEvent> l = createListenerMock();\n        final EventListener<ReloadingEvent> lRemoved = createListenerMock();\n        final MutableObject<ReloadingEvent> evRef = new MutableObject<>();\n        final ReloadingController ctrl = createController();\n        final Object testData = \"Some test data\";\n        final EventListener<ReloadingEvent> l = createListenerMock();\n        final ReloadingController ctrl = createController();\n        final EventListener<ReloadingEvent> l = createListenerMock();\n        final ReloadingController ctrl = createController();\n        final ReloadingController ctrl = createController();\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestVFSFileHandlerReloadingDetector.java": "    private void writeTestFile(final File file, final String value) throws IOException\n        final FileWriter out = new FileWriter(file);\n        final File file = folder.newFile();\n        final VFSFileHandlerReloadingDetector strategy =\n        final long modificationDate = strategy.getLastModificationDate();\n        final File file = ConfigurationAssert.getOutFile(\"NonExistingFile.xml\");\n        final FileHandler handler = new FileHandler();\n        final VFSFileHandlerReloadingDetector strategy =\n        final VFSFileHandlerReloadingDetector strategy =\n        final FileName name = EasyMock.createMock(FileName.class);\n        final VFSFileHandlerReloadingDetector strategy =\n        final VFSFileHandlerReloadingDetector strategy =\n        final VFSFileHandlerReloadingDetector strategy =\n",
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertiesFactoryBean.java": "        final Configuration one = new BaseConfiguration();\n        final String properties =\n        final PropertiesConfiguration two = new PropertiesConfiguration();\n        final PropertiesConfigurationLayout layout =\n        final Properties props = configurationFactory.getObject();\n        final Properties props = configurationFactory.getObject();\n        final Resource[] locations = {\n        final Resource[] locationsUpdate = locations.clone();\n        final Resource[] locations = {\n        final Resource[] locationsGet = configurationFactory.getLocations();\n        final Configuration[] configs = {\n        final Configuration[] configsUpdate = configs.clone();\n        final Configuration[] configs = {\n        final Configuration[] configsGet = configurationFactory.getConfigurations();\n",
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertySource.java": "                final ConfigurableEnvironment env)\n            final PropertySourcesPlaceholderConfigurer configurer =\n            final MutablePropertySources sources = new MutablePropertySources();\n        final PropertiesConfiguration propertiesConfiguration =\n",
            "src/test/java/org/apache/commons/configuration2/sync/TestReadWriteSynchronizer.java": "        final ReadWriteLock lock = EasyMock.createMock(ReadWriteLock.class);\n        final Lock readLock = EasyMock.createMock(Lock.class);\n        final ReadWriteSynchronizer sync = new ReadWriteSynchronizer(lock);\n        final Synchronizer sync = new ReadWriteSynchronizer();\n        final Synchronizer sync = new ReadWriteSynchronizer();\n        final Account account1 = new Account();\n        final Account account2 = new Account();\n        final UpdateThread[] updateThreads = new UpdateThread[updateThreadCount];\n        final ReaderThread[] readerThreads = new ReaderThread[readThreadCount];\n        for (final UpdateThread t : updateThreads)\n        for (final ReaderThread t : readerThreads)\n    private static long sumUpAccounts(final Account... accounts)\n        for (final Account acc : accounts)\n        public void change(final long delta)\n        public ReaderThread(final Synchronizer s, final int readCount, final Account... accs)\n                final long sum = sumUpAccounts(accounts);\n        public UpdateThread(final Synchronizer s, final int updateCount, final Account ac1,\n                final Account ac2)\n                final long x =\n",
            "src/test/java/org/apache/commons/configuration2/test/HsqlDB.java": "    public HsqlDB(final String uri, final String databaseDriver, final String loadFile)\n        catch (final Exception e)\n    private void loadSqlFile(final String fileName)\n                final String cmd = commands.substring(0, targetPos + 1);\n                catch (final SQLException sqle)\n    private String getFileContents(final String fileName)\n        final FileReader fr = new FileReader(fileName);\n        final char fileBuf[]  = new char[1024];\n        final StringBuffer sb = new StringBuffer(1000);\n",
            "src/test/java/org/apache/commons/configuration2/tree/AbstractCombinerTest.java": "        final XMLConfiguration conf1 = new XMLConfiguration();\n        final XMLConfiguration conf2 = new XMLConfiguration();\n        final ImmutableNode cn =\n        final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandlerTest.java": "        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n            final ImmutableNode authorNode =\n                final String workKey =\n                final ImmutableNode workNode =\n                    final String personKey =\n                    final ImmutableNode personNode =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final ImmutableNode author =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final int year = 1611;\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final ImmutableNode node =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final String name = \"Achilles\";\n        final Set<ImmutableNode> children =\n        for (final ImmutableNode c : children)\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final List<ImmutableNode> children =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final ImmutableNode node =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final String key = \"Simmons/Hyperion\";\n        final ImmutableNode parent = nodeForKey(handler, key);\n        final ImmutableNode child = nodeForKey(handler, key + \"/Weintraub\");\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final ImmutableNode parent = nodeForKey(handler, \"Homer/Ilias\");\n        final ImmutableNode child =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final ImmutableNode node =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final ImmutableNode node = nodeForKey(handler, \"Puck\");\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final ImmutableNode node = nodeForKey(handler, \"Puck\");\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final ImmutableNode node = nodeForKey(handler, \"Puck\");\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final ImmutableNode node = nodeForKey(handler, \"Prospero\");\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final ImmutableNode node =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final ImmutableNode node =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final ImmutableNode node = new ImmutableNode.Builder().value(42).create();\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        final ImmutableNode node =\n        final NodeMatcher<ImmutableNode> matcher = new NodeMatcher<ImmutableNode>()\n            public <T> boolean matches(final T node, final NodeHandler<T> paramHandler,\n                    final ImmutableNode criterion)\n        final List<ImmutableNode> result =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        final List<ImmutableNode> result =\n        final NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        public <T> boolean matches(final T node, final NodeHandler<T> handler, final Object criterion) {\n",
            "src/test/java/org/apache/commons/configuration2/tree/NodeStructureHelper.java": "    public static String author(final int idx)\n    public static int worksLength(final int authorIdx)\n    public static String work(final int authorIdx, final int idx)\n    public static int personaeLength(final int authorIdx, final int workIdx)\n    public static String persona(final int authorIdx, final int workIdx, final int personaIdx)\n    public static String table(final int idx)\n    public static int fieldsLength(final int tabIdx)\n    public static String field(final int tabIdx, final int fldIdx)\n    public static String appendPath(final String path, final String component)\n        final StringBuilder buf =\n    public static ImmutableNode nodeForKey(final ImmutableNode root, final String key)\n        final String[] components = key.split(PATH_SEPARATOR);\n    public static ImmutableNode nodeForKey(final InMemoryNodeModel model, final String key)\n    public static ImmutableNode nodeForKey(final NodeHandler<ImmutableNode> handler,\n            final String key)\n    public static String nodePath(final String... path)\n    public static String nodePathWithEndNode(final String endNode, final String... path)\n    public static ImmutableNode createNode(final String name, final Object value)\n    public static ImmutableNode createFieldNode(final String name)\n        final ImmutableNode.Builder fldBuilder = new ImmutableNode.Builder(1);\n        final\n            final NodeKeyResolver<ImmutableNode> resolver)\n                        final ImmutableNode root =\n                        final String key = (String) EasyMock.getCurrentArguments()[1];\n                        final NodeHandler<ImmutableNode> handler =\n            final NodeKeyResolver<ImmutableNode> resolver)\n                        final ImmutableNode root =\n                        final String key = (String) EasyMock.getCurrentArguments()[1];\n                        final TreeData handler =\n    public static ImmutableNode createTablesTree(final String[] tables,\n                                                 final String[][] fields)\n        final ImmutableNode.Builder bldTables =\n            final ImmutableNode.Builder bldTable = new ImmutableNode.Builder(2);\n            final ImmutableNode.Builder bldFields =\n        final String[][] fieldNamesNew = new String[FIELDS.length][];\n        final ImmutableNode.Builder rootBuilder =\n            final ImmutableNode.Builder authorBuilder = new ImmutableNode.Builder();\n                final ImmutableNode.Builder workBuilder = new ImmutableNode.Builder();\n                for (final String person : PERSONAE[author][work])\n        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n                for (final String person : PERSONAE[author][work])\n                    final ImmutableNode orgValue =\n                    final ImmutableNode workNode =\n                    final ImmutableNode personNode =\n    private static ImmutableNode findNode(final ImmutableNode parent,\n            final String[] components, final int currentIdx)\n        final Matcher m = PAT_KEY_WITH_INDEX.matcher(components[currentIdx]);\n        for (final ImmutableNode node : parent.getChildren())\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java": "    private DefaultConfigurationKey key(final String k)\n        final DefaultExpressionEngineSymbols symbols =\n        final DefaultExpressionEngineSymbols symbols =\n        final DefaultConfigurationKey k1 = key(TESTKEY);\n        final DefaultConfigurationKey k2 = key(TESTKEY);\n        final DefaultConfigurationKey.KeyIterator it = key.iterator();\n        catch (final NoSuchElementException nex)\n        final DefaultConfigurationKey.KeyIterator it = key.iterator();\n        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        final DefaultConfigurationKey.KeyIterator it = key.iterator();\n        final DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        final DefaultConfigurationKey k1 = key(TESTKEY);\n        final DefaultConfigurationKey k1 = key(TESTKEY);\n        final DefaultConfigurationKey kd = k1.differenceKey(k1);\n        final DefaultConfigurationKey k1 = key(TESTKEY);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java": "        final DefaultExpressionEngineSymbols symbols =\n    private void checkQueryRootNode(final String key)\n        final List<QueryResult<ImmutableNode>> results = checkKey(key, null, 1);\n        final QueryResult<ImmutableNode> result = results.get(0);\n        final ImmutableNode node = root.getChildren().get(0);\n        final ImmutableNode node = root.getChildren().get(1);\n        final DefaultExpressionEngineSymbols symbols =\n        final ImmutableNode nd = data.getParent().getChildren().get(0);\n        final ImmutableNode node = data.getParent().getChildren().get(0);\n        final NodeAddData<ImmutableNode> data = engine.prepareAdd(root,\n        final NodeAddData<ImmutableNode> data = engine.prepareAdd(root, \"[@newAttr]\", handler);\n        final DefaultExpressionEngineSymbols symbols =\n        final ImmutableNode node = fetchNode(\"tables.table(0).name\");\n        final ImmutableNode tab1 = fetchNode(\"tables.table(0)\");\n        final ImmutableNode tab2 = fetchNode(\"tables.table(1)\");\n        final ImmutableNode node = fetchNode(\"tables.table(0).fields.field(1).name\");\n        final NodeAddData<ImmutableNode> data =\n        final ImmutableNode.Builder nodeTablesBuilder =\n            final ImmutableNode.Builder nodeTableBuilder =\n            final ImmutableNode.Builder nodeFieldsBuilder =\n        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n        final ImmutableNode.Builder nodeConnBuilder = new ImmutableNode.Builder();\n        final DefaultExpressionEngineSymbols symbols =\n        final NodeMatcher<String> matcher = new NodeMatcher<String>()\n            public <T> boolean matches(final T node, final NodeHandler<T> handler,\n                    final String criterion)\n    private List<QueryResult<ImmutableNode>> checkKey(final String key, final String name,\n            final int count)\n        final List<QueryResult<ImmutableNode>> nodes = query(key, count);\n        for (final QueryResult<ImmutableNode> result : nodes)\n    private List<QueryResult<ImmutableNode>> query(final String key, final int expCount)\n        final List<QueryResult<ImmutableNode>> nodes = engine.query(root, key, handler);\n    private ImmutableNode fetchNode(final String key)\n        final QueryResult<ImmutableNode> result = query(key, 1).get(0);\n    private void checkKeyValue(final String key, final String name, final String value)\n        final List<QueryResult<ImmutableNode>> results = checkKey(key, name, 1);\n        final QueryResult<ImmutableNode> result = results.get(0);\n    private void checkAttributeValue(final String key, final String attr, final Object expValue)\n        final List<QueryResult<ImmutableNode>> results = checkKey(key, attr, 1);\n        final QueryResult<ImmutableNode> result = results.get(0);\n    private void checkNodePath(final NodeAddData<ImmutableNode> data,\n            final String... expected)\n        final Iterator<String> it = data.getPathNodes().iterator();\n    private static ImmutableNode createFieldNode(final String name)\n        final ImmutableNode.Builder nodeFieldBuilder = new ImmutableNode.Builder(1);\n    private static ImmutableNode createNode(final String name, final Object value)\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngineSymbols.java": "    private static void expEqual(final Object o1, final Object o2)\n    private static void expNE(final Object o1, final Object o2)\n        final DefaultExpressionEngineSymbols s2 =\n        final DefaultExpressionEngineSymbols s1 =\n        final DefaultExpressionEngineSymbols symbols = builder().create();\n        final String s = symbols.toString();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestImmutableNode.java": "        final ImmutableNode.Builder builder = new ImmutableNode.Builder();\n        final ImmutableNode node = setUpBuilder().create();\n        final ImmutableNode node = setUpBuilder().create();\n        final ImmutableNode node = setUpBuilder().create();\n    private static void checkChildNodes(final ImmutableNode node,\n            final Collection<ImmutableNode> expChildren)\n        final Iterator<ImmutableNode> itExp = expChildren.iterator();\n        for(final ImmutableNode c : node.getChildren())\n    private static void checkChildNodes(final ImmutableNode parent,\n            final ImmutableNode... children)\n        final List<ImmutableNode> childNodes = new ArrayList<>(childCount);\n        final ImmutableNode.Builder builder = new ImmutableNode.Builder(childCount);\n            final ImmutableNode.Builder childBuilder = new ImmutableNode.Builder();\n            final ImmutableNode child = childBuilder.name(NAME + i).value(i).create();\n        final ImmutableNode node = builder.name(NAME).create();\n        final List<ImmutableNode> childNodes =\n            final ImmutableNode.Builder childBuilder = new ImmutableNode.Builder();\n            final ImmutableNode child = childBuilder.name(NAME + i).value(i).create();\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final ImmutableNode node = builder.addChildren(childNodes).create();\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final ImmutableNode node = builder.create();\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final ImmutableNode child =\n        final ImmutableNode node = builder.addChild(child).create();\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final ImmutableNode node = builder.create();\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final List<ImmutableNode> children = Arrays.asList(createChild(), null, createChild());\n        final ImmutableNode node = builder.create();\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final Map<String, Object> attrs = new HashMap<>();\n            final String attrName = NAME + i;\n        final ImmutableNode node = builder.create();\n    private static void checkAttributes(final ImmutableNode node,\n            final Map<String, ?> expAttrs)\n        for (final Map.Entry<String, ?> e : expAttrs.entrySet())\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final ImmutableNode node = builder.create();\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final Map<String, Object> attrs = new HashMap<>();\n            final String attrName = NAME + i;\n        final ImmutableNode node = builder.addAttributes(attrs).create();\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final ImmutableNode node = builder.create();\n    private ImmutableNode createDefaultNode(final Object value)\n    private ImmutableNode createDefaultNode(final String name, final Object value)\n        final ImmutableNode.Builder builder = new ImmutableNode.Builder(1);\n        final int idx = childCounter++;\n    private static void checkUpdatedNode(final ImmutableNode org,\n            final ImmutableNode updated)\n        final ImmutableNode node = createDefaultNode(\"test\");\n        final ImmutableNode node2 = node.setValue(VALUE);\n        final ImmutableNode node = createDefaultNode(\"anotherName\", VALUE);\n        final ImmutableNode node2 = node.setName(NAME);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode child2 =\n        final ImmutableNode node2 = node.addChild(child2);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode child2 =\n        final ImmutableNode node2 = node.addChild(child2);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode child2 =\n        final ImmutableNode node2 = node.addChild(child2);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode child2 =\n        final ImmutableNode node2 = node.addChild(child2);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode child = node.getChildren().get(0);\n        final ImmutableNode node2 = node.removeChild(child);\n        final ImmutableNode childRemove = createChild();\n        final ImmutableNode node =\n        final ImmutableNode node2 = node.removeChild(childRemove);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode childRemove = createChild();\n        final ImmutableNode childReplace = createChild();\n        final ImmutableNode node = createDefaultNode(VALUE).addChild(childRemove);\n        final ImmutableNode node2 = node.replaceChild(childRemove, childReplace);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode node2 = node.setAttribute(\"attr\", ATTR_VALUE);\n        final Map<String, Object> newAttrs =\n        final ImmutableNode.Builder builder = setUpBuilder();\n        final Map<String, Object> attrs = new HashMap<>();\n        final ImmutableNode node = builder.addAttributes(attrs).create();\n        final ImmutableNode node2 = node.setAttribute(attr2, VALUE);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final Map<String, Object> attributes = new HashMap<>();\n        final ImmutableNode node2 = node.setAttributes(attributes);\n    private static void checkAttributesContained(final ImmutableNode node,\n            final Map<String, Object> attributes)\n        for (final Map.Entry<String, Object> e : attributes.entrySet())\n    private void checkSetAttributesNoOp(final Map<String, Object> attributes)\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final String attrName = node.getAttributes().keySet().iterator().next();\n        final ImmutableNode node2 = node.removeAttribute(attrName);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final Collection<ImmutableNode> newChildren =\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode node2 = node.replaceChildren(newChildren);\n        final ImmutableNode node = createDefaultNode(VALUE);\n        final ImmutableNode node2 = node.replaceChildren(null);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java": "        final InMemoryNodeModel model = new InMemoryNodeModel();\n        final ImmutableNode root = model.getRootNode();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n        final\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeAddData<ImmutableNode> addData =\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final String[] locations = {\n        final ImmutableNode nodeLocs = nodeForKey(model, \"Homer/Ilias/locations\");\n        for (final ImmutableNode c : nodeLocs.getChildren())\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeAddData<ImmutableNode> addData =\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final ImmutableNode node = nodeForKey(model, \"Homer/work\");\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeAddData<ImmutableNode> addData =\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final String[] locations = {\n        final String[] path = {\n        final ImmutableNode node =\n    private static void checkPathToRoot(final InMemoryNodeModel model,\n            ImmutableNode node, final String... path)\n        final NodeHandler<ImmutableNode> handler = model.getNodeHandler();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeAddData<ImmutableNode> addData =\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final ImmutableNode node = nodeForKey(model, \"Homer/Ilias/scenes/scene\");\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeAddData<ImmutableNode> addData =\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final ImmutableNode node = nodeForKey(model, \"Shakespeare/dateOfBirth\");\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeAddData<ImmutableNode> addData =\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final ImmutableNode node = nodeForKey(model, \"Shakespeare/The Tempest\");\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final QueryResult<ImmutableNode> result =\n        final List<QueryResult<ImmutableNode>> removed = model.clearTree(KEY, resolver);\n        final ImmutableNode node = nodeForKey(model, \"Homer/Ilias\");\n        for (final ImmutableNode c : node.getChildren())\n    private void checkClearTreeUpdatedParentMapping(final String pathToRemove,\n            final ImmutableNode nodeToCheck)\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final QueryResult<ImmutableNode> result =\n        catch (final IllegalArgumentException iaex)\n        final String path = \"Homer/Ilias/Achilles\";\n        final String path = \"Homer/Ilias\";\n        final String[] path = {\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final QueryResult<ImmutableNode> result =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final ImmutableNode node = nodeForKey(model, \"Homer/Ilias\");\n        final List<QueryResult<ImmutableNode>> results =\n        for (final ImmutableNode child : node.getChildren())\n        for (final ImmutableNode child : model.getRootNode().getChildren())\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final ImmutableNode child =\n        final ImmutableNode root =\n        final InMemoryNodeModel model = new InMemoryNodeModel(root);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n        final QueryResult<ImmutableNode> result = QueryResult.createAttributeResult(\n        final List<QueryResult<ImmutableNode>> removed = model.clearTree(KEY, resolver);\n        final ImmutableNode node = nodeForKey(model, nodeName);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n        final ImmutableNode orgNode = nodeForKey(model, nodeName);\n        final List<QueryResult<ImmutableNode>> results =\n        catch (final NoSuchElementException nex)\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n        final TreeData treeDataOld = model.getTreeData();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final List<QueryResult<ImmutableNode>> results =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n                            final ImmutableNode addParent = nodeForKey(model, key);\n        final ImmutableNode orgNode = nodeForKey(ROOT_AUTHORS_TREE, key);\n        final ImmutableNode changedNode = nodeForKey(model, key);\n        final Map<ImmutableNode, ImmutableNode> replacementMapping =\n                        final ImmutableNode addParent =\n        final Thread[] threads = new Thread[threadCount];\n                    catch (final InterruptedException iex)\n        for (final Thread t : threads)\n        final Pattern patternAuthorName =\n        final Set<Integer> indices = new HashSet<>();\n            final ImmutableNode node = nodeForKey(model, \"author(\" + i + \")/name\");\n            final Matcher m =\n            final int idx = Integer.parseInt(m.group(1));\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final ImmutableNode node = nodeForKey(model, nodeKey);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final ImmutableNode node = nodeForKey(model, nodeKey);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final TreeData treeDataOld = model.getTreeData();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeAddData<ImmutableNode> addData =\n        final NodeUpdateData<ImmutableNode> updateData =\n        final InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        final ImmutableNode node = nodeForKey(model, \"Homer/work\");\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final NodeUpdateData<ImmutableNode> updateData =\n        final ImmutableNode node = nodeForKey(model, nodeKey);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final Map<QueryResult<ImmutableNode>, Object> changedValues =\n        final ImmutableNode changedNode = nodeForKey(model, nodeKey);\n        final NodeUpdateData<ImmutableNode> updateData =\n        final ImmutableNode node = nodeForKey(model, nodeKey);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final ImmutableNode newWork1 =\n        final ImmutableNode newWork2 =\n        final ImmutableNode node = nodeForKey(model, key);\n        final int size = node.getChildren().size();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final ImmutableNode personaNode =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final ImmutableNode newNode =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final ImmutableNode newNode =\n    private void checkAddNodesNoNodes(final Collection<ImmutableNode> newNodes)\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final InMemoryNodeModel model =\n        final InMemoryNodeModel model =\n        final ImmutableNode node = nodeForKey(model, \"Homer/Ilias\");\n        final InMemoryNodeModel model =\n        final ImmutableNode rootNode = model.getRootNode();\n        final InMemoryNodeModel model =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelReferences.java": "        final Map<ImmutableNode, String> references = createReferences();\n        final Collection<ImmutableNode> nodes =\n        final Map<ImmutableNode, String> refs = new HashMap<>();\n        for (final ImmutableNode node : nodes)\n    private Collection<ImmutableNode> collectNodes(final ImmutableNode root)\n                    public void visitBeforeChildren(final ImmutableNode node,\n                            final NodeHandler<ImmutableNode> handler)\n        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        final Collection<ImmutableNode> nodes = collectNodes(handler.getRootNode());\n        for (final ImmutableNode node : nodes)\n        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        final List<Object> removedRefs = handler.removedReferences();\n        final int authorIdx = 2;\n        final ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        final List<Object> removedRefs = handler.removedReferences();\n        final ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", \"test\");\n        final ImmutableNode root = model.getNodeHandler().getRootNode();\n        final ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", null);\n        final ImmutableNode root = model.getNodeHandler().getRootNode();\n        final ImmutableNode node =\n        final ImmutableNode root = model.getNodeHandler().getRootNode();\n        final ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", null);\n        final ReferenceNodeHandler refHandler = model.getReferenceNodeHandler();\n        final ImmutableNode checkNode =\n        final NodeSelector selector = new NodeSelector(\"Simmons.Hyperion\");\n        final ImmutableNode trackedNode = model.getTrackedNode(selector);\n        final ImmutableNode node = model.getTrackedNode(selector);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java": "    private static NodeKeyResolver<ImmutableNode> createResolver(final boolean replay)\n        final NodeKeyResolver<ImmutableNode> resolver =\n        final ImmutableNode node =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final ImmutableNode node = model.getTrackedNode(selector);\n        final ImmutableNode node =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n    private void initDetachedNode(final NodeKeyResolver<ImmutableNode> resolver)\n        final ImmutableNode node =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final ImmutableNode node =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        catch (final ConfigurationRuntimeException crex)\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n    private static void checkForRemovedField(final ImmutableNode nodeFields, final int idx)\n        final Set<String> expectedNames = new HashSet<>();\n        final Set<String> actualNames = new HashSet<>();\n        for (final ImmutableNode field : nodeFields.getChildren())\n            final ImmutableNode nodeName = field.getChildren().get(0);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final ImmutableNode nodeFields = fieldsNodeFromModel();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final ImmutableNode rootNode = model.getRootNode();\n        final ImmutableNode nodeFields = fieldsNodeFromTrackedNode();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final ImmutableNode nodeFields = fieldsNodeFromModel();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final ImmutableNode rootNode = model.getRootNode();\n        final ImmutableNode nodeFields = fieldsNodeFromTrackedNode();\n    private static void checkForAddedField(final ImmutableNode nodeFields)\n        final ImmutableNode nodeField =\n    private static void checkFieldNode(final ImmutableNode nodeField, final String name)\n        final ImmutableNode nodeName = nodeField.getChildren().get(0);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final ImmutableNode rootNode = model.getRootNode();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final ImmutableNode rootNode = model.getRootNode();\n            final NodeKeyResolver<ImmutableNode> resolver)\n                        final ImmutableNode root =\n                        final String key = (String) EasyMock.getCurrentArguments()[1];\n                        final TreeData handler =\n                        final List<QueryResult<ImmutableNode>> results =\n    private static void checkedForChangedField(final ImmutableNode nodeFields, final int idx)\n        for (final ImmutableNode field : nodeFields.getChildren())\n            final String expName =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final ImmutableNode rootNode = model.getRootNode();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final ImmutableNode node = model.getTrackedNode(selector);\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeHandler<ImmutableNode> handler =\n        final TrackedNodeHandler tnh = (TrackedNodeHandler) handler;\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeHandler<ImmutableNode> handler =\n        final ImmutableNode newNode =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver();\n    private void expectNodeKey(final NodeKeyResolver<ImmutableNode> resolver,\n            final ImmutableNode node, final String key)\n        final Map<ImmutableNode, String> cache = new HashMap<>();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final String nodeKey1 = \"tables/table(0)\";\n        final String nodeKey2 = \"tables/table(1)\";\n        final ImmutableNode node1 = NodeStructureHelper.nodeForKey(root, nodeKey1);\n        final ImmutableNode node2 = NodeStructureHelper.nodeForKey(root, nodeKey2);\n        final Collection<NodeSelector> selectors =\n        final Iterator<NodeSelector> it = selectors.iterator();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final ImmutableNode node = model.getTrackedNode(selector);\n        final Collection<NodeSelector> selectors =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final ImmutableNode node = NodeStructureHelper.nodeForKey(root, \"tables\");\n        final String[] keys = new String[node.getChildren().size()];\n            final ImmutableNode child = node.getChildren().get(i);\n        final Collection<NodeSelector> selectors =\n        for (final NodeSelector sel : selectors)\n    private void checkTrackChildNodesNoResult(final List<ImmutableNode> queryResult)\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final TreeData oldData = model.getTreeData();\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final String childName = \"name\";\n        final String parentKey = \"tables/table(0)\";\n        final String childKey = parentKey + \"/\" + childName;\n        final ImmutableNode node = NodeStructureHelper.nodeForKey(model, parentKey);\n        final ImmutableNode child = NodeStructureHelper.nodeForKey(node, childName);\n        final NodeSelector childSelector =\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final String childName = \"space\";\n        final String parentKey = \"tables/table(0)\";\n        final String childKey = parentKey + \"/\" + childName;\n        final ImmutableNode node = NodeStructureHelper.nodeForKey(model, parentKey);\n        final NodeSelector childSelector =\n        final ImmutableNode child = model.getTrackedNode(childSelector);\n        final ImmutableNode parent = model.getNodeHandler().getParent(child);\n            final List<ImmutableNode> queryResult)\n        final NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        final List<ImmutableNode> nodes =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestMergeCombiner.java": "        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n            final HierarchicalConfiguration<ImmutableNode> config)\n        final HierarchicalConfiguration<ImmutableNode> c =\n        final NodeHandler<ImmutableNode> nodeHandler = config.getNodeModel().getNodeHandler();\n        final List<QueryResult<ImmutableNode>> nds =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeAddData.java": "        final NodeAddData<ImmutableNode> data =\n        final NodeAddData<ImmutableNode> data =\n        final List<String> pathNodes = new ArrayList<>();\n        final NodeAddData<ImmutableNode> data =\n        final NodeAddData<ImmutableNode> data =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeHandlerDecorator.java": "    protected NodeHandler<ImmutableNode> createHandler(final ImmutableNode root)\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeNameMatchers.java": "        final InMemoryNodeModel model = new InMemoryNodeModel();\n    private static ImmutableNode createNode(final String name)\n        final ImmutableNode node = createNode(NODE_NAME);\n        final ImmutableNode node = createNode(NODE_NAME);\n    private void checkMatcherWithNullInput(final NodeMatcher<String> matcher)\n        final ImmutableNode node = createNode(NODE_NAME);\n        final ImmutableNode node = createNode(NODE_NAME);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeSelector.java": "        final NodeKeyResolver<ImmutableNode> resolver =\n        final NodeSelector selector = new NodeSelector(\"tables.table(0).name\");\n        final ImmutableNode target = selector.select(root, resolver, handler);\n        final NodeKeyResolver<ImmutableNode> resolverMock =\n        final NodeSelector selector = new NodeSelector(KEY);\n        final NodeKeyResolver<ImmutableNode> resolverMock =\n        final List<QueryResult<ImmutableNode>> results =\n        final ImmutableNode target =\n        final NodeSelector selector = new NodeSelector(KEY);\n        final NodeSelector selector = new NodeSelector(\"tables.table.name\");\n        final NodeSelector selectorParent = new NodeSelector(\"tables.table(0)\");\n        final NodeSelector selector =\n        final ImmutableNode target = selector.select(root, resolver, handler);\n        final NodeSelector selectorParent = new NodeSelector(\"tables.unknown\");\n        final NodeSelector selector =\n        final NodeSelector selectorParent = new NodeSelector(\"tables.table\");\n        final NodeSelector selector =\n        final NodeSelector first = new NodeSelector(\"tables.table\");\n        final NodeSelector second = first.subSelector(\"fields\");\n        final int fldIdx = NodeStructureHelper.fieldsLength(1) - 1;\n        final NodeSelector selector =\n        final ImmutableNode target = selector.select(root, resolver, handler);\n        final NodeSelector selector = new NodeSelector(KEY);\n        final NodeSelector sel2 = new NodeSelector(KEY);\n        final NodeSelector sub1 = selector.subSelector(\"k2\");\n        final NodeSelector sub2 = sel2.subSelector(\"k2\");\n        final NodeSelector selector = new NodeSelector(KEY);\n        final NodeSelector selector = new NodeSelector(KEY);\n        final NodeSelector selector = new NodeSelector(KEY).subSelector(key2);\n        final String s = selector.toString();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeTreeWalker.java": "    private static String visitAfterName(final String name)\n        final\n        final\n        final ConfigurationNodeVisitor<ImmutableNode> visitor = visitorMock();\n        final NodeHandler<ImmutableNode> handler = handlerMock();\n        final List<String> expected = expectDFS();\n        final TestVisitor visitor = new TestVisitor();\n        final List<String> expected = new LinkedList<>();\n                    final String persona =\n        final TestVisitor visitor = new TestVisitor();\n        final ConfigurationNodeVisitor<ImmutableNode> visitor = visitorMock();\n        final NodeHandler<ImmutableNode> handler = handlerMock();\n        final List<String> expected = expectBFS();\n        final TestVisitor visitor = new TestVisitor();\n        final List<String> expected = new LinkedList<>();\n        final List<String> works = new LinkedList<>();\n        final List<String> personae = new LinkedList<>();\n        final TestVisitor visitor = new TestVisitor();\n        public void setMaxNodeCount(final int maxNodeCount)\n        public void visitBeforeChildren(final ImmutableNode node,\n                final NodeHandler<ImmutableNode> handler)\n        public void visitAfterChildren(final ImmutableNode node,\n                final NodeHandler<ImmutableNode> handler)\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeUpdateData.java": "        final NodeUpdateData<Object> data =\n    private static QueryResult<Object> result(final Object value)\n        final Map<QueryResult<Object>, Object> map =\n        final NodeUpdateData<Object> data =\n        final Map<QueryResult<Object>, Object> changedValues =\n        final Collection<Object> col = new LinkedList<>();\n        final NodeUpdateData<Object> data =\n        final Collection<Object> newValues = data.getNewValues();\n        final Collection<QueryResult<Object>> col =\n        final NodeUpdateData<Object> data =\n        final Collection<QueryResult<Object>> removedNodes = data.getRemovedNodes();\n        final Map<QueryResult<Object>, Object> map =\n        final NodeUpdateData<Object> data =\n        final Collection<Object> col = new LinkedList<>();\n        final NodeUpdateData<Object> data =\n        final Collection<QueryResult<Object>> col =\n        final NodeUpdateData<Object> data =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java": "        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n    private ImmutableNode checkTable(final BaseHierarchicalConfiguration config)\n        final HierarchicalConfiguration<ImmutableNode> c = config\n        final NodeHandler<ImmutableNode> nodeHandler = config.getNodeModel().getNodeHandler();\n        final List<QueryResult<ImmutableNode>> nds =\n        final PropertiesConfiguration c1 = new PropertiesConfiguration();\n        final PropertiesConfiguration c2 = new PropertiesConfiguration();\n        final CombinedConfiguration config = new CombinedConfiguration(new OverrideCombiner());\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestQueryResult.java": "        final QueryResult<ImmutableNode> result =\n        final QueryResult<ImmutableNode> result =\n        final QueryResult<ImmutableNode> result =\n        final QueryResult<ImmutableNode> result =\n        final QueryResult<ImmutableNode> nodeRes =\n        final QueryResult<ImmutableNode> attrRes =\n        final QueryResult<ImmutableNode> result =\n        final QueryResult<ImmutableNode> result =\n        final QueryResult<ImmutableNode> result =\n        final String s = result.toString();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeHandler.java": "        final\n        final ImmutableNode node = new ImmutableNode.Builder().name(\"node\").create();\n        final ImmutableNode parent = new ImmutableNode.Builder().name(\"parent\").create();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeModel.java": "        final\n        final ImmutableNode root = NodeStructureHelper.createNode(\"root\", null);\n        final TrackedNodeModel model = setUpModel();\n        final\n        final NodeHandler<ImmutableNode> handler = expectGetNodeHandler();\n        final Iterable<?> values = EasyMock.createMock(Iterable.class);\n        final List<ImmutableNode> nodes =\n        final QueryResult<ImmutableNode> result =\n        final List<QueryResult<ImmutableNode>> removed =\n        final TrackedNodeModel model = setUpModel();\n        final NodeHandler<ImmutableNode> handler = expectGetNodeHandler();\n        final ImmutableNode root = NodeStructureHelper.createNode(\"Root\", null);\n        final TrackedNodeModel model = setUpModel();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestTreeData.java": "    protected NodeHandler<ImmutableNode> createHandler(final ImmutableNode root)\n        final InMemoryNodeModel model = new InMemoryNodeModel(root);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestUnionCombiner.java": "        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        final BaseHierarchicalConfiguration config = createCombinedConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/AbstractXPathTest.java": "    protected ImmutableNode constructHierarchy(final int levels)\n        final ImmutableNode.Builder resultBuilder = new ImmutableNode.Builder();\n    protected int iteratorSize(final NodeIterator iterator)\n    protected List<NodePointer> iterationElements(final NodeIterator iterator)\n        final List<NodePointer> result = new ArrayList<>();\n    private void createLevel(final ImmutableNode.Builder parentBuilder, final String value,\n            final int level)\n            final String prefix = (value == null) ? \"\" : value + \".\";\n                final ImmutableNode.Builder childBuilder =\n                final String currentValue = prefix + i;\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationAttributePointer.java": "        final ImmutableNode.Builder ndBuilder = new ImmutableNode.Builder();\n        final ImmutableNode nd = ndBuilder.create();\n        final Object node = pointer.getImmediateNode();\n        final QueryResult<?> proxy = (QueryResult<?>) node;\n        final QName name = pointer.getName();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationIteratorAttributes.java": "        final ImmutableNode orgNode = root.getChildren().get(1);\n        final ImmutableNode testNode =\n        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        final List<NodePointer> attrs = iterationElements(it);\n        final Set<String> attrNames = new HashSet<>();\n        for (final NodePointer np : attrs)\n        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        final ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodeIteratorChildren.java": "            final ImmutableNode node)\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        final NodeNameTest test = new NodeNameTest(new QName(null, \"*\"));\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        final NodeNameTest test = new NodeNameTest(new QName(\"prefix\", \"*\"));\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        final NodeNameTest test = new NodeNameTest(new QName(null, CHILD_NAME2));\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        for (final NodePointer nd : iterationElements(it))\n        final NodeTest test = new ProcessingInstructionTest(\"test\");\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        final NodeTypeTest test = new NodeTypeTest(Compiler.NODE_TYPE_NODE);\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        final NodeTypeTest test = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        final ConfigurationNodePointer<ImmutableNode> childPointer =\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        final List<NodePointer> nodes = iterationElements(it);\n        for (final NodePointer np : nodes)\n            final ImmutableNode node = (ImmutableNode) np.getImmediateNode();\n        final ConfigurationNodePointer<ImmutableNode> childPointer =\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n            final ImmutableNode node = (ImmutableNode) it.getNodePointer().getNode();\n        final ConfigurationNodePointer<ImmutableNode> childPointer =\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        final ImmutableNode node = (ImmutableNode) it.getNodePointer().getNode();\n        final ImmutableNode node =\n        final NodeNameTest test = new NodeNameTest(new QName(PREFIX, \"*\"));\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        for (final NodePointer p : iterationElements(it))\n        final NodeNameTest test = new NodeNameTest(new QName(PREFIX, PREFIX_NODE));\n        final ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        for (final NodePointer p : iterationElements(it))\n    private void checkValues(final NodeIterator iterator, final int... expectedIndices)\n        final List<NodePointer> nodes = iterationElements(iterator);\n            final ImmutableNode child = (ImmutableNode) nodes.get(i).getImmediateNode();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointer.java": "        final NodePointer p1 = new ConfigurationNodePointer<>(\n        final NodePointer p2 = new ConfigurationNodePointer<>(\n        final ImmutableNode n1 = new ImmutableNode.Builder().name(\"n1\").create();\n        final ImmutableNode n2 = new ImmutableNode.Builder().name(\"n2\").create();\n        final NodePointer p1 =\n        final NodePointer p2 =\n        final ImmutableNode leafNode =\n    private void checkIterators(final NodePointer p)\n        final ImmutableNode node = (ImmutableNode) p.getNode();\n            final NodePointer pchild = it.getNodePointer();\n            final NodePointer pattr = it.getNodePointer();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointerFactory.java": "        for (final Object result : results) {\n            final ImmutableNode node = (ImmutableNode) result;\n        final List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME1 + \"[1]/*\");\n        for (final Iterator<?> it = nodes.iterator(); it.hasNext(); index++)\n            final ImmutableNode node = (ImmutableNode) it.next();\n        final List<?> nodes = context.selectNodes(\"//\" + CHILD_NAME2\n        final List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME2 + \"/parent::*\");\n        final List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME1\n        final ImmutableNode node = (ImmutableNode) nodes.get(0);\n        final List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME1\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathContextFactory.java": "        final ImmutableNode node =\n        final NodeHandler<ImmutableNode> handler =\n        final JXPathContext context = factory.createContext(node, handler);\n        final ConfigurationNodePointerFactory.NodeWrapper<?> wrapper =\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngine.java": "    private JXPathContext expectSelect(final Object... results)\n        final JXPathContext ctx = EasyMock.createMock(JXPathContext.class);\n    private XPathExpressionEngine setUpEngine(final JXPathContext ctx)\n        final XPathContextFactory factory =\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final JXPathContext ctx = expectSelect(root);\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n        final List<QueryResult<ImmutableNode>> result =\n        final QueryResult<ImmutableNode> attrResult =\n        final JXPathContext ctx = expectSelect(attrResult);\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n        final List<QueryResult<ImmutableNode>> result =\n        final JXPathContext ctx = expectSelect();\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n    private void checkEmptyKey(final String key)\n        final XPathContextFactory factory =\n        final XPathExpressionEngine engine = new XPathExpressionEngine(factory);\n        final List<QueryResult<ImmutableNode>> results =\n        final NodePointerFactory[] factories =\n        for (final NodePointerFactory factory : factories)\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final JXPathContext ctx = expectSelect(root);\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n        final NodeAddData<ImmutableNode> data =\n        final JXPathContext ctx = expectSelect(root);\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n        final NodeAddData<ImmutableNode> data =\n        final JXPathContext ctx = expectSelect(root);\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n        final NodeAddData<ImmutableNode> data =\n        final JXPathContext ctx = expectSelect(root);\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n        final NodeAddData<ImmutableNode> data =\n        final JXPathContext ctx = expectSelect(root);\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n        final NodeAddData<ImmutableNode> data =\n        final JXPathContext ctx = expectSelect(root);\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n        final NodeAddData<ImmutableNode> data =\n        final JXPathContext ctx = expectSelect();\n        final XPathExpressionEngine engine = setUpEngine(ctx);\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n    private void checkInvalidAddPath(final String path)\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final QueryResult<ImmutableNode> res = QueryResult.createNodeResult(root);\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final QueryResult<ImmutableNode> result =\n    private static void checkAddPath(final NodeAddData<ImmutableNode> data,\n            final boolean attr, final String... expected)\n        final List<String> path = data.getPathNodes();\n        final Iterator<String> it = path.iterator();\n        final ImmutableNode.Builder parentBuilder = new ImmutableNode.Builder(2);\n        final ImmutableNode c1 = new ImmutableNode.Builder().name(\"child\").create();\n        final ImmutableNode c2 =\n        final ImmutableNode parent = parentBuilder.create();\n        final NodeHandler<ImmutableNode> testHandler =\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final ImmutableNode.Builder parentBuilder = new ImmutableNode.Builder(3);\n        final ImmutableNode c1 = new ImmutableNode.Builder().name(\"child\").create();\n        final ImmutableNode c2 = new ImmutableNode.Builder().name(\"child\").create();\n        final ImmutableNode c3 =\n        final ImmutableNode parent = parentBuilder.create();\n        final NodeHandler<ImmutableNode> testHandler =\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final ImmutableNode.Builder parentBuilder = new ImmutableNode.Builder(1);\n        final ImmutableNode c1 = new ImmutableNode.Builder().name(\"child\").create();\n        final ImmutableNode parent = parentBuilder.addChild(c1).create();\n        final NodeHandler<ImmutableNode> testHandler =\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n        final XPathExpressionEngine engine = new XPathExpressionEngine();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngineInConfig.java": "        final String xml =\n        final FileHandler handler = new FileHandler(config);\n        for (final Iterator<String> it = config.getKeys(); it.hasNext();)\n            final String key = it.next();\n",
            "src/test/java/org/apache/commons/configuration2/web/TestAppletConfiguration.java": "        catch (final Exception ex)\n            final Applet applet = new Applet()\n                public String getParameter(final String key)\n            catch (final UnsupportedOperationException e)\n            catch (final UnsupportedOperationException e)\n",
            "src/test/java/org/apache/commons/configuration2/web/TestServletConfiguration.java": "        final Servlet servlet = new HttpServlet() {\n        final ServletConfiguration servletConfiguration = new ServletConfiguration(servlet);\n",
            "src/test/java/org/apache/commons/configuration2/web/TestServletContextConfiguration.java": "        final ServletContext context = new MockServletContext()\n            public String getInitParameter(final String key)\n        final Servlet servlet = new HttpServlet()\n        final ServletContextConfiguration resultConfig = new ServletContextConfiguration(servlet);\n        final ServletContext context = new MockServletContext()\n",
            "src/test/java/org/apache/commons/configuration2/web/TestServletFilterConfiguration.java": "        final MockFilterConfig config = new MockFilterConfig();\n        final ServletFilterConfiguration resultConfig = new ServletFilterConfiguration(config);\n        public String getInitParameter(final String key)\n        public void setInitParameter(final String key, final String value)\n",
            "src/test/java/org/apache/commons/configuration2/web/TestServletRequestConfiguration.java": "        final ServletRequest request = new MockHttpServletRequest()\n            public String getParameter(final String key)\n        final ServletRequest request = new MockHttpServletRequest()\n            public String[] getParameterValues(final String key)\n        final ServletRequestConfiguration config = new ServletRequestConfiguration(request);\n        final String[] values = { \"test1\", \"test2\\\\,test3\", \"test4\\\\,test5\" };\n        final String listKey = \"test.list\";\n        final BaseConfiguration config = new BaseConfiguration();\n        final Configuration c = createConfiguration(config);\n        final List<?> v = c.getList(listKey);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java": [
                177,
                213,
                234,
                271,
                286,
                287,
                289,
                313,
                320,
                321,
                345,
                350,
                351,
                379,
                384,
                385,
                400,
                435,
                438,
                439,
                440,
                470,
                484,
                485,
                487,
                522,
                541,
                562,
                576,
                591,
                615,
                649,
                682,
                703,
                728,
                730,
                752,
                754,
                767,
                769,
                774,
                780,
                786,
                812,
                834,
                887,
                890,
                897,
                951,
                986,
                997,
                1079,
                1091,
                1117,
                1137,
                1142,
                1147,
                1148,
                1150,
                1153,
                1154,
                1172,
                1174,
                1179,
                1196,
                1202,
                1204,
                1209,
                1215,
                1221,
                1223,
                1228,
                1234,
                1240,
                1242,
                1247,
                1253,
                1259,
                1261,
                1266,
                1272,
                1278,
                1280,
                1285,
                1291,
                1297,
                1299,
                1304,
                1310,
                1320,
                1326,
                1336,
                1342,
                1352,
                1358,
                1360,
                1372,
                1380,
                1394,
                1396,
                1422,
                1424,
                1433,
                1439,
                1441,
                1452,
                1455,
                1464,
                1485,
                1495,
                1501,
                1517,
                1523,
                1534,
                1536,
                1545,
                1546,
                1557,
                1558,
                1560,
                1566,
                1586,
                1606,
                1613,
                1615,
                1616,
                1644,
                1651,
                1653,
                1654,
                1683,
                1688,
                1690,
                1705,
                1719,
                1737,
                1739,
                1740,
                1758,
                1760,
                1767,
                1788,
                1789,
                1796,
                1824,
                1840,
                1863,
                1864,
                1895,
                1910
            ],
            "src/main/java/org/apache/commons/configuration2/AbstractHierarchicalConfiguration.java": [
                191,
                224,
                271,
                284,
                286,
                292,
                293,
                294,
                296,
                319,
                333,
                344,
                367,
                397,
                425,
                437,
                446,
                447,
                457,
                459,
                460,
                461,
                475,
                476,
                488,
                489,
                491,
                492,
                493,
                534,
                536,
                546,
                548,
                575,
                581,
                602,
                616,
                653,
                654,
                672,
                674,
                681,
                682,
                684,
                688,
                710,
                732,
                752,
                762,
                788,
                790,
                800,
                802,
                828,
                865,
                911,
                932,
                942,
                944,
                946,
                962,
                963,
                965
            ],
            "src/main/java/org/apache/commons/configuration2/AbstractYAMLBasedConfiguration.java": [
                61,
                74,
                76,
                87,
                89,
                90,
                92,
                108,
                109,
                111,
                120,
                126,
                143,
                144,
                169,
                171,
                172,
                174,
                176,
                192,
                194,
                195,
                208
            ],
            "src/main/java/org/apache/commons/configuration2/BaseConfiguration.java": [
                65,
                67,
                77,
                85,
                101,
                127,
                138,
                184,
                190,
                203,
                208,
                213,
                219
            ],
            "src/main/java/org/apache/commons/configuration2/BaseConfigurationXMLReader.java": [
                52,
                73,
                117,
                132
            ],
            "src/main/java/org/apache/commons/configuration2/BaseHierarchicalConfiguration.java": [
                77,
                88,
                124,
                129,
                136,
                141,
                177,
                179,
                183,
                227,
                228,
                268,
                284,
                286,
                302,
                318,
                320,
                334,
                335,
                337,
                340,
                357,
                359,
                360,
                366,
                382,
                384,
                396,
                398,
                409,
                421,
                434,
                446,
                459,
                462,
                464,
                478,
                496,
                509,
                521,
                539,
                540,
                543,
                559,
                566,
                579,
                593,
                605,
                626,
                646,
                647,
                651,
                676,
                678,
                680,
                698,
                700,
                712,
                735,
                737,
                784,
                785,
                787,
                800,
                801,
                803,
                805,
                822,
                839,
                841,
                888,
                889,
                897,
                909,
                910,
                914,
                924,
                957,
                958,
                972,
                973,
                975,
                976,
                978,
                980,
                995,
                1016,
                1017,
                1018,
                1021,
                1023,
                1042,
                1043,
                1045,
                1057
            ],
            "src/main/java/org/apache/commons/configuration2/CombinedConfiguration.java": [
                232,
                277,
                333,
                362,
                363,
                382,
                412,
                424,
                456,
                461,
                477,
                500,
                502,
                526,
                527,
                545,
                565,
                567,
                584,
                586,
                644,
                678,
                680,
                717,
                724,
                729,
                730,
                757,
                762,
                763,
                765,
                767,
                793,
                825,
                843,
                899,
                908,
                909,
                923,
                925,
                926,
                929,
                949,
                964,
                981,
                1029,
                1087,
                1097,
                1099,
                1100,
                1117,
                1118,
                1119,
                1124,
                1150,
                1170,
                1177,
                1178
            ],
            "src/main/java/org/apache/commons/configuration2/CompositeConfiguration.java": [
                109,
                122,
                135,
                136,
                142,
                154,
                174,
                222,
                241,
                273,
                333,
                346,
                349,
                368,
                369,
                371,
                381,
                383,
                384,
                386,
                398,
                410,
                412,
                419,
                421,
                432,
                434,
                437,
                440,
                454,
                459,
                469,
                471,
                474,
                490,
                537,
                544,
                556,
                569,
                602,
                610,
                631,
                650,
                651,
                653,
                658
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java": [
                54,
                69,
                71,
                86,
                88,
                89,
                100,
                128,
                139,
                151
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationLookup.java": [
                49,
                75
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationMap.java": [
                52,
                90,
                92,
                93,
                107,
                128,
                146,
                148,
                186,
                199
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java": [
                78,
                79,
                85,
                109,
                121,
                133,
                135,
                137,
                138,
                159,
                172,
                174,
                187,
                206,
                208,
                210,
                229,
                248,
                250,
                252,
                271,
                287,
                316,
                325,
                333,
                358,
                369,
                387,
                393,
                412,
                418,
                421,
                427,
                431,
                459,
                474,
                483,
                503,
                514,
                533,
                541,
                549,
                569,
                575,
                600,
                620,
                636,
                659,
                660
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationXMLReader.java": [
                83,
                97,
                109,
                121,
                143,
                166,
                188,
                210,
                222,
                235,
                254,
                265,
                271,
                274,
                286,
                294,
                306,
                312,
                315
            ],
            "src/main/java/org/apache/commons/configuration2/DataConfiguration.java": [
                124,
                151,
                157,
                163,
                182,
                188,
                194,
                216,
                233,
                249,
                266,
                281,
                298,
                314,
                331,
                346,
                363,
                379,
                396,
                412,
                429,
                445,
                462,
                477,
                494,
                510,
                527,
                542,
                559,
                575,
                592,
                608,
                625,
                641,
                658,
                673,
                690,
                706,
                723,
                738,
                755,
                771,
                788,
                802,
                819,
                834,
                850,
                865,
                882,
                896,
                913,
                928,
                945,
                960,
                976,
                993,
                1009,
                1011,
                1040,
                1059,
                1072,
                1090,
                1110,
                1129,
                1155,
                1173,
                1192,
                1211,
                1236,
                1253,
                1255,
                1284,
                1303,
                1329,
                1347,
                1367,
                1386,
                1412,
                1430,
                1449,
                1468,
                1501,
                1518,
                1533,
                1550,
                1566,
                1583,
                1597,
                1614,
                1629,
                1646,
                1662,
                1679,
                1692,
                1729
            ],
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": [
                184,
                204,
                225,
                245,
                265,
                285,
                307,
                325,
                332,
                336,
                339,
                341,
                378,
                393,
                420,
                422,
                446,
                453,
                460,
                477,
                484,
                491,
                513,
                566,
                600,
                609,
                621,
                633,
                651,
                668,
                670,
                714,
                715,
                746,
                780,
                786,
                812,
                813,
                815,
                818,
                841,
                842
            ],
            "src/main/java/org/apache/commons/configuration2/DynamicCombinedConfiguration.java": [
                104,
                125,
                139,
                166,
                193,
                194,
                199,
                243,
                248,
                265,
                308,
                310,
                325,
                354,
                359,
                373,
                388,
                394,
                400,
                406,
                412,
                418,
                424,
                430,
                436,
                442,
                448,
                454,
                460,
                466,
                472,
                478,
                484,
                490,
                496,
                502,
                508,
                520,
                526,
                532,
                538,
                544,
                550,
                556,
                562,
                568,
                574,
                580,
                586,
                592,
                598,
                616,
                625,
                637,
                643,
                649,
                655,
                661,
                667,
                674,
                709,
                721,
                729,
                730,
                732,
                741,
                743,
                753,
                791,
                802,
                804,
                823,
                825,
                866,
                920,
                930,
                951,
                974,
                1004,
                1067,
                1088
            ],
            "src/main/java/org/apache/commons/configuration2/EnvironmentConfiguration.java": [
                64,
                76
            ],
            "src/main/java/org/apache/commons/configuration2/FindNodeVisitor.java": [
                45,
                51
            ],
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationConverter.java": [
                60,
                64,
                65,
                68,
                70,
                72,
                78,
                81,
                122,
                124,
                125,
                146,
                148,
                149,
                170,
                171,
                173,
                174,
                193,
                197,
                198
            ],
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationXMLReader.java": [
                68,
                89,
                111,
                133,
                145,
                150,
                176,
                178,
                180,
                182,
                202,
                204
            ],
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java": [
                274,
                306,
                328,
                330,
                337,
                351,
                383,
                385,
                386,
                387,
                390,
                403,
                404,
                406,
                424,
                425,
                426,
                438,
                451,
                484,
                485,
                487,
                490,
                504,
                533,
                535,
                541,
                545,
                549,
                553,
                630,
                632,
                648,
                675,
                690,
                711,
                717,
                718,
                742,
                765,
                777,
                783,
                804,
                820,
                837,
                844,
                896,
                906,
                910,
                911,
                924,
                925,
                927,
                929,
                940,
                961,
                962,
                973,
                975,
                980,
                981,
                983,
                989,
                991,
                998,
                1000,
                1006,
                1007,
                1009,
                1031,
                1038
            ],
            "src/main/java/org/apache/commons/configuration2/ImmutableConfigurationInvocationHandler.java": [
                62,
                77,
                84,
                99,
                123
            ],
            "src/main/java/org/apache/commons/configuration2/JNDIConfiguration.java": [
                80,
                91,
                103,
                122,
                123,
                135,
                136,
                137,
                140,
                151,
                194,
                197,
                199,
                204,
                207,
                220,
                225,
                243,
                251,
                261,
                262,
                263,
                267,
                311,
                328,
                339,
                364,
                369,
                391,
                418,
                423,
                428,
                445,
                482
            ],
            "src/main/java/org/apache/commons/configuration2/JSONConfiguration.java": [
                69,
                75,
                79,
                82,
                89,
                102,
                106,
                109
            ],
            "src/main/java/org/apache/commons/configuration2/MapConfiguration.java": [
                106,
                124,
                160,
                166,
                168,
                171,
                178,
                180,
                195,
                210,
                216,
                245,
                248,
                254,
                271,
                274
            ],
            "src/main/java/org/apache/commons/configuration2/PatternSubtreeConfigurationWrapper.java": [
                70,
                79,
                91,
                97,
                103,
                109,
                115,
                121,
                127,
                133,
                139,
                145,
                151,
                157,
                163,
                169,
                175,
                181,
                187,
                193,
                199,
                205,
                211,
                223,
                229,
                235,
                241,
                247,
                253,
                259,
                265,
                271,
                277,
                283,
                289,
                295,
                301,
                313,
                319,
                331,
                344,
                350,
                356,
                362,
                368,
                375,
                387,
                388,
                395,
                402,
                420,
                426,
                438,
                446,
                471
            ],
            "src/main/java/org/apache/commons/configuration2/PrefixedKeysIterator.java": [
                54,
                118
            ],
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java": [
                301,
                312,
                352,
                392,
                423,
                435,
                492,
                511,
                526,
                539,
                552,
                576,
                586,
                588,
                613,
                615,
                627,
                678,
                698,
                744,
                817,
                819,
                834,
                848,
                862,
                874,
                885,
                887,
                889,
                941,
                943,
                967,
                1004,
                1030,
                1054,
                1067,
                1080,
                1100,
                1101,
                1108,
                1116,
                1146,
                1161,
                1163,
                1167,
                1192,
                1216,
                1290,
                1296,
                1297,
                1313,
                1319,
                1320,
                1321,
                1326,
                1338,
                1344,
                1422,
                1437,
                1449,
                1462,
                1464,
                1484,
                1486
            ],
            "src/main/java/org/apache/commons/configuration2/PropertiesConfigurationLayout.java": [
                156,
                181,
                195,
                210,
                223,
                236,
                250,
                274,
                289,
                315,
                327,
                343,
                368,
                380,
                401,
                431,
                455,
                478,
                482,
                492,
                502,
                504,
                523,
                541,
                545,
                560,
                575,
                585,
                598,
                604,
                606,
                634,
                669,
                684,
                686,
                695,
                717,
                756,
                762,
                782,
                807,
                809,
                811,
                828,
                847,
                848,
                895,
                915,
                926,
                946,
                984,
                999,
                1007
            ],
            "src/main/java/org/apache/commons/configuration2/StrictConfigurationComparator.java": [
                50,
                61,
                63,
                64,
                71,
                73,
                74
            ],
            "src/main/java/org/apache/commons/configuration2/SubnodeConfiguration.java": [
                126,
                127,
                187,
                223,
                234,
                255
            ],
            "src/main/java/org/apache/commons/configuration2/SubsetConfiguration.java": [
                53,
                66,
                87,
                103,
                116,
                148,
                154,
                166,
                172,
                178,
                184,
                190,
                207,
                253,
                293
            ],
            "src/main/java/org/apache/commons/configuration2/SystemConfiguration.java": [
                57,
                74,
                77,
                81,
                93,
                95,
                98,
                99
            ],
            "src/main/java/org/apache/commons/configuration2/XMLConfiguration.java": [
                260,
                279,
                299,
                341,
                375,
                417,
                449,
                479,
                494,
                518,
                529,
                549,
                551,
                555,
                556,
                557,
                559,
                563,
                587,
                588,
                589,
                591,
                592,
                594,
                595,
                600,
                603,
                604,
                606,
                608,
                611,
                613,
                625,
                635,
                655,
                656,
                658,
                670,
                672,
                673,
                677,
                680,
                704,
                705,
                706,
                707,
                723,
                724,
                734,
                738,
                767,
                769,
                781,
                783,
                787,
                810,
                812,
                841,
                853,
                862,
                883,
                912,
                913,
                915,
                920,
                935,
                937,
                938,
                943,
                961,
                977,
                994,
                1005,
                1016,
                1022,
                1023,
                1024,
                1028,
                1032,
                1047,
                1049,
                1050,
                1051,
                1064,
                1065,
                1066,
                1067,
                1069,
                1070,
                1073,
                1077,
                1081,
                1116,
                1117,
                1131,
                1144,
                1146,
                1150,
                1161,
                1162,
                1163,
                1170,
                1175,
                1203,
                1204,
                1210,
                1216,
                1222,
                1223,
                1225,
                1236,
                1249,
                1273,
                1275,
                1289,
                1290,
                1292,
                1299,
                1326,
                1331,
                1347,
                1349,
                1365,
                1369,
                1370,
                1374,
                1396
            ],
            "src/main/java/org/apache/commons/configuration2/XMLDocumentHelper.java": [
                91,
                92,
                111,
                114,
                117,
                140,
                226,
                227,
                233,
                249,
                272,
                279,
                293,
                300,
                313,
                316,
                317,
                318,
                353,
                354,
                356,
                370,
                371,
                374,
                375,
                376
            ],
            "src/main/java/org/apache/commons/configuration2/XMLListReference.java": [
                54,
                78,
                79,
                99,
                100,
                107,
                112,
                134,
                135,
                137,
                142,
                166,
                167,
                168,
                171,
                172,
                174,
                175,
                184,
                202,
                203,
                215
            ],
            "src/main/java/org/apache/commons/configuration2/XMLPropertiesConfiguration.java": [
                112,
                133,
                139,
                141,
                147,
                149,
                153,
                161,
                178,
                184,
                187,
                196,
                208,
                210,
                226,
                229,
                230,
                253,
                256,
                260,
                276,
                278,
                291,
                293,
                297,
                302,
                305,
                306,
                326,
                331,
                333,
                337,
                342,
                347,
                349,
                361,
                363,
                389,
                404,
                425
            ],
            "src/main/java/org/apache/commons/configuration2/YAMLConfiguration.java": [
                58,
                64,
                68,
                69,
                72,
                78,
                83,
                84,
                87,
                94,
                96,
                101,
                104,
                116,
                120,
                121,
                124,
                130,
                135,
                136,
                139
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/BeanHelper.java": [
                117,
                132,
                155,
                190,
                194,
                202,
                206,
                207,
                208,
                214,
                216,
                223,
                230,
                232,
                233,
                235,
                239,
                242,
                267,
                269,
                272,
                274,
                288,
                294,
                316,
                329,
                333,
                342,
                357,
                369,
                373,
                389,
                390,
                421,
                447,
                448,
                456,
                457,
                463,
                479,
                492,
                507,
                521,
                539,
                540,
                542,
                549,
                560,
                578,
                580,
                583,
                609,
                610,
                626,
                653,
                654,
                663,
                687
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/CombinedBeanDeclaration.java": [
                64,
                78,
                80,
                98,
                100,
                118,
                120,
                138,
                141,
                160,
                163,
                183,
                185
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java": [
                70,
                80,
                94,
                95,
                102,
                115,
                127,
                147,
                149,
                159,
                167,
                172,
                174,
                190,
                192,
                197,
                205,
                212,
                228,
                242,
                244
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaClass.java": [
                53,
                64,
                76,
                127,
                128,
                131,
                132,
                136
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/ConstructorArg.java": [
                57,
                74,
                91,
                92,
                108,
                123,
                199,
                218
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/DefaultBeanFactory.java": [
                83,
                113,
                115,
                141,
                144,
                147,
                160,
                181,
                183,
                198,
                199,
                201,
                204,
                207,
                209,
                227,
                246,
                248,
                249,
                250,
                257,
                274,
                275,
                277,
                284,
                303,
                323,
                324,
                348
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/XMLBeanDeclaration.java": [
                173,
                191,
                192,
                221,
                222,
                235,
                258,
                271,
                272,
                348,
                349,
                370,
                371,
                377,
                383,
                415,
                416,
                432,
                434,
                450,
                466,
                480,
                519,
                521,
                539,
                551,
                553,
                571,
                573,
                584,
                598,
                600,
                624,
                649,
                673,
                695,
                707,
                719,
                721,
                722
            ],
            "src/main/java/org/apache/commons/configuration2/builder/AutoSaveListener.java": [
                72,
                84,
                92,
                104,
                114,
                127,
                159
            ],
            "src/main/java/org/apache/commons/configuration2/builder/BasicBuilderParameters.java": [
                112,
                135,
                152,
                170,
                180,
                192,
                210,
                227,
                237,
                247,
                260,
                271,
                287,
                295,
                323,
                348,
                373,
                397,
                402,
                418,
                438,
                450,
                452,
                454,
                469,
                482,
                484,
                491,
                505,
                511,
                529,
                531,
                538,
                558,
                564,
                581,
                583,
                590,
                613,
                614,
                616,
                637
            ],
            "src/main/java/org/apache/commons/configuration2/builder/BasicConfigurationBuilder.java": [
                138,
                153,
                171,
                172,
                216,
                231,
                233,
                252,
                254,
                255,
                309,
                320,
                387,
                417,
                423,
                447,
                464,
                517,
                591,
                606,
                607,
                623,
                634,
                644,
                646,
                660,
                662,
                663,
                677,
                679,
                680,
                706,
                724,
                741,
                743,
                746,
                763,
                778,
                779,
                791,
                792
            ],
            "src/main/java/org/apache/commons/configuration2/builder/BuilderConfigurationWrapperFactory.java": [
                63,
                95,
                132,
                133,
                161,
                162,
                171,
                242,
                243,
                266,
                285,
                286,
                301,
                304
            ],
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderEvent.java": [
                74,
                75
            ],
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderResultCreatedEvent.java": [
                69,
                70,
                71
            ],
            "src/main/java/org/apache/commons/configuration2/builder/CopyObjectDefaultHandler.java": [
                63,
                96,
                104
            ],
            "src/main/java/org/apache/commons/configuration2/builder/DatabaseBuilderParametersImpl.java": [
                64,
                71,
                78,
                85,
                92,
                99,
                106
            ],
            "src/main/java/org/apache/commons/configuration2/builder/DefaultParametersManager.java": [
                80,
                81,
                129,
                130,
                153,
                169,
                170,
                172,
                174,
                194,
                198,
                229,
                230,
                247,
                253,
                268,
                269
            ],
            "src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java": [
                40,
                41,
                44,
                46
            ],
            "src/main/java/org/apache/commons/configuration2/builder/EventListenerParameters.java": [
                84,
                99
            ],
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedBuilderParametersImpl.java": [
                90,
                104,
                123,
                153,
                155,
                171,
                175,
                221,
                240,
                247,
                254,
                261,
                268,
                275,
                282,
                290,
                297,
                313,
                325
            ],
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedConfigurationBuilder.java": [
                83,
                97,
                98,
                113,
                114,
                127,
                135,
                137,
                146,
                147,
                171,
                194,
                223,
                261,
                279,
                282,
                305,
                373,
                377,
                393
            ],
            "src/main/java/org/apache/commons/configuration2/builder/HierarchicalBuilderParametersImpl.java": [
                48,
                60
            ],
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java": [
                45,
                52
            ],
            "src/main/java/org/apache/commons/configuration2/builder/JndiBuilderParametersImpl.java": [
                52,
                59
            ],
            "src/main/java/org/apache/commons/configuration2/builder/PropertiesBuilderParametersImpl.java": [
                58,
                69,
                77,
                84
            ],
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingBuilderSupportListener.java": [
                63,
                64,
                82,
                83,
                85,
                101
            ],
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingFileBasedConfigurationBuilder.java": [
                90,
                91,
                107,
                108,
                121,
                146,
                166,
                167,
                182,
                206,
                207,
                226,
                236,
                250,
                252
            ],
            "src/main/java/org/apache/commons/configuration2/builder/XMLBuilderParametersImpl.java": [
                65,
                74,
                81,
                99,
                106,
                113,
                120
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/BaseConfigurationBuilderProvider.java": [
                101,
                102,
                172,
                176,
                178,
                183,
                187,
                203,
                220,
                223,
                243,
                244,
                247,
                263,
                265,
                284,
                287,
                289,
                292,
                295,
                314,
                315,
                332,
                360,
                361,
                373,
                376,
                377,
                389
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedBuilderParametersImpl.java": [
                100,
                119,
                135,
                139,
                163,
                190,
                209,
                210,
                241,
                249,
                273,
                303,
                331,
                363,
                409,
                422,
                436,
                437,
                452,
                464
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilder.java": [
                517,
                529,
                556,
                581,
                588,
                662,
                664,
                668,
                682,
                705,
                755,
                758,
                759,
                775,
                781,
                798,
                799,
                800,
                809,
                812,
                839,
                841,
                859,
                862,
                864,
                866,
                868,
                869,
                870,
                876,
                895,
                900,
                917,
                918,
                920,
                927,
                944,
                945,
                949,
                951,
                954,
                959,
                964,
                983,
                999,
                1029,
                1055,
                1095,
                1096,
                1101,
                1125,
                1130,
                1133,
                1154,
                1168,
                1186,
                1199,
                1213,
                1253,
                1275,
                1278,
                1280,
                1282,
                1283,
                1304,
                1324,
                1336,
                1338,
                1340,
                1357,
                1358,
                1360,
                1361,
                1374,
                1436,
                1455,
                1456,
                1457,
                1460,
                1495,
                1545,
                1569,
                1571,
                1580,
                1601,
                1602,
                1603,
                1612,
                1631,
                1650,
                1653,
                1655,
                1658,
                1659
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilderProvider.java": [
                84,
                105,
                106,
                110,
                126,
                127
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/ConfigurationDeclaration.java": [
                53,
                54,
                77,
                181,
                188
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/FileExtensionConfigurationBuilderProvider.java": [
                83,
                84,
                85,
                132,
                133,
                135,
                148,
                150,
                154,
                168,
                175
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileBuilderParametersImpl.java": [
                80,
                100,
                123,
                141,
                154,
                166
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilder.java": [
                117,
                134,
                135,
                148,
                149,
                161,
                170,
                203,
                204,
                210,
                219,
                242,
                247,
                262,
                264,
                267,
                284,
                338,
                354,
                356,
                375,
                395,
                398,
                426,
                443,
                446,
                473,
                496,
                507,
                525,
                526,
                528,
                530,
                535,
                553
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilderProvider.java": [
                81,
                82,
                94,
                96,
                98,
                114,
                116,
                118,
                139,
                140,
                169,
                170,
                184,
                191,
                216,
                217
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaBean.java": [
                61,
                64,
                67,
                69,
                70,
                71,
                91,
                98,
                104,
                110,
                131,
                138,
                144,
                150,
                163,
                179
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaClass.java": [
                54,
                71,
                99,
                101,
                103,
                104
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java": [
                82,
                83,
                94,
                103,
                135,
                146,
                159,
                181,
                183,
                187,
                192,
                206
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingMultiFileConfigurationBuilder.java": [
                84,
                85,
                98,
                99,
                111,
                133,
                149,
                155,
                157,
                159
            ],
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Configurations.java": [
                105,
                130,
                146,
                162,
                181,
                182,
                201,
                202,
                222,
                223,
                236,
                249,
                262,
                279,
                297,
                315,
                328,
                340,
                353,
                369,
                385,
                401,
                413,
                425,
                438,
                454,
                470,
                486,
                498,
                510,
                522,
                538,
                555,
                572,
                588,
                612,
                624,
                636
            ],
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Parameters.java": [
                110,
                139,
                140,
                160,
                161,
                300,
                301,
                303,
                306,
                336,
                346,
                349,
                361,
                363
            ],
            "src/main/java/org/apache/commons/configuration2/convert/AbstractListDelimiterHandler.java": [
                62,
                73,
                89,
                91,
                136,
                143,
                180,
                193
            ],
            "src/main/java/org/apache/commons/configuration2/convert/DefaultConversionHandler.java": [
                77,
                93,
                107,
                113,
                115,
                127,
                128,
                139,
                153,
                154,
                164,
                185,
                202,
                230,
                231,
                233,
                249,
                262,
                278,
                279,
                281,
                300,
                301,
                311,
                326,
                327,
                329,
                333,
                350,
                351,
                365,
                366,
                376,
                377,
                378,
                380,
                399,
                400,
                402,
                416
            ],
            "src/main/java/org/apache/commons/configuration2/convert/DefaultListDelimiterHandler.java": [
                89,
                105,
                107,
                109,
                117,
                119,
                122,
                140,
                142,
                148
            ],
            "src/main/java/org/apache/commons/configuration2/convert/DisabledListDelimiterHandler.java": [
                59,
                73,
                75,
                85
            ],
            "src/main/java/org/apache/commons/configuration2/convert/LegacyListDelimiterHandler.java": [
                75,
                95,
                106,
                110,
                112,
                138,
                145,
                150,
                154,
                216,
                233,
                256,
                257,
                279
            ],
            "src/main/java/org/apache/commons/configuration2/convert/ListDelimiterHandler.java": [
                68
            ],
            "src/main/java/org/apache/commons/configuration2/convert/PropertyConverter.java": [
                97,
                98,
                218,
                226,
                249,
                251,
                269,
                271,
                286,
                288,
                303,
                305,
                320,
                322,
                337,
                339,
                354,
                356,
                371,
                373,
                388,
                390,
                410,
                416,
                423,
                437,
                447,
                450,
                456,
                473,
                501,
                528,
                540,
                558,
                570,
                588,
                600,
                618,
                626,
                627,
                631,
                632,
                633,
                659,
                669,
                672,
                705,
                725,
                737,
                757,
                767,
                771,
                785,
                800,
                812,
                821,
                824,
                843,
                859,
                878,
                886,
                894,
                898,
                919
            ],
            "src/main/java/org/apache/commons/configuration2/event/BaseEventSource.java": [
                97,
                99,
                101,
                140,
                156,
                157,
                164,
                184,
                200,
                222,
                223,
                227,
                231,
                254,
                273,
                274,
                276,
                280,
                303,
                304,
                323,
                344
            ],
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationErrorEvent.java": [
                112,
                113,
                114,
                115
            ],
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationEvent.java": [
                174,
                175,
                176
            ],
            "src/main/java/org/apache/commons/configuration2/event/Event.java": [
                67,
                96,
                116,
                117
            ],
            "src/main/java/org/apache/commons/configuration2/event/EventListenerList.java": [
                79,
                80,
                96,
                120,
                138,
                149,
                157,
                195,
                225,
                227,
                229,
                232,
                243,
                269,
                277,
                294,
                297,
                326,
                348,
                360,
                385,
                402,
                420,
                422,
                436,
                439
            ],
            "src/main/java/org/apache/commons/configuration2/event/EventListenerRegistrationData.java": [
                56,
                57,
                110,
                121
            ],
            "src/main/java/org/apache/commons/configuration2/event/EventType.java": [
                69,
                121,
                123,
                144,
                145
            ],
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationException.java": [
                50,
                61,
                73
            ],
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationRuntimeException.java": [
                51,
                64,
                75,
                87
            ],
            "src/main/java/org/apache/commons/configuration2/ex/ConversionException.java": [
                51,
                62,
                74
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": [
                146,
                216,
                240,
                256,
                298,
                312,
                328,
                342,
                375,
                389,
                393,
                396,
                425,
                432,
                435,
                436,
                437,
                444,
                446,
                453,
                470,
                488,
                490,
                502,
                517,
                529,
                543,
                545,
                554,
                555
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/ConstantLookup.java": [
                78,
                95,
                102,
                116,
                147,
                150,
                151,
                167
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java": [
                62
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/DummyLookup.java": [
                46
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/EnvironmentLookup.java": [
                56
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/ExprLookup.java": [
                111,
                122,
                134,
                144,
                153,
                188,
                211,
                223,
                233,
                234,
                237,
                239,
                263,
                266,
                268,
                286,
                297,
                299,
                330,
                358,
                369,
                379,
                388,
                389,
                390,
                400
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/InterpolatorSpecification.java": [
                78,
                171,
                192,
                196,
                211,
                228,
                232,
                249,
                264,
                279,
                304
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/SystemPropertiesLookup.java": [
                48
            ],
            "src/main/java/org/apache/commons/configuration2/io/AbsoluteNameLocationStrategy.java": [
                46,
                50
            ],
            "src/main/java/org/apache/commons/configuration2/io/BasePathLocationStrategy.java": [
                48,
                52
            ],
            "src/main/java/org/apache/commons/configuration2/io/ClasspathLocationStrategy.java": [
                44
            ],
            "src/main/java/org/apache/commons/configuration2/io/CombinedLocationStrategy.java": [
                66,
                100,
                102,
                104
            ],
            "src/main/java/org/apache/commons/configuration2/io/ConfigurationLogger.java": [
                66,
                79,
                102,
                133,
                153,
                163,
                174,
                184,
                195,
                218,
                235
            ],
            "src/main/java/org/apache/commons/configuration2/io/DefaultFileSystem.java": [
                41,
                44,
                54,
                61,
                65,
                74,
                80,
                93,
                100,
                108,
                115,
                137,
                154,
                162,
                169,
                177,
                185,
                187,
                199,
                202,
                210,
                220,
                238,
                254,
                261,
                286,
                293,
                299,
                317
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileHandler.java": [
                138,
                143,
                148,
                186,
                204,
                216,
                231,
                254,
                268,
                281,
                304,
                310,
                327,
                357,
                363,
                393,
                402,
                420,
                421,
                436,
                451,
                470,
                503,
                533,
                564,
                596,
                640,
                674,
                714,
                725,
                732,
                748,
                761,
                776,
                789,
                817,
                830,
                844,
                857,
                872,
                885,
                917,
                929,
                939,
                970,
                972,
                983,
                992,
                996,
                1014,
                1017,
                1018,
                1029,
                1043,
                1047,
                1075,
                1082,
                1096,
                1107,
                1129,
                1136,
                1154,
                1179,
                1188,
                1209,
                1222,
                1242,
                1251,
                1269,
                1283,
                1287,
                1300,
                1327,
                1334,
                1352,
                1353,
                1394,
                1405,
                1416,
                1427,
                1438,
                1469,
                1478,
                1492,
                1526,
                1555,
                1556
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileHandlerListenerAdapter.java": [
                37,
                42,
                47,
                52,
                57
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileLocator.java": [
                84,
                185,
                196,
                270,
                284,
                296,
                308,
                320,
                332,
                345,
                368
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileLocatorUtils.java": [
                128,
                166,
                182,
                184,
                208,
                236,
                261,
                291,
                299,
                319,
                340,
                343,
                358,
                384,
                391,
                425,
                428,
                440,
                446,
                470,
                482,
                488,
                501,
                513,
                517,
                550,
                554,
                575,
                577,
                612,
                629,
                644,
                645,
                647,
                672
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileSystem.java": [
                52,
                66,
                75
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileSystemLocationStrategy.java": [
                43
            ],
            "src/main/java/org/apache/commons/configuration2/io/HomeDirectoryLocationStrategy.java": [
                66,
                79,
                124,
                128,
                129,
                147,
                166
            ],
            "src/main/java/org/apache/commons/configuration2/io/ProvidedURLLocationStrategy.java": [
                44
            ],
            "src/main/java/org/apache/commons/configuration2/io/VFSFileSystem.java": [
                62,
                67,
                74,
                77,
                82,
                84,
                90,
                94,
                95,
                96,
                103,
                111,
                118,
                126,
                129,
                142,
                147,
                148,
                152,
                160,
                168,
                169,
                172,
                180,
                188,
                189,
                192,
                200,
                209,
                214,
                222,
                225,
                233,
                235,
                244,
                250,
                251,
                263,
                272,
                273,
                276,
                280,
                286,
                288,
                294,
                298,
                301,
                307,
                319,
                334,
                335,
                337,
                338,
                344,
                345,
                350,
                365,
                371
            ],
            "src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java": [
                148,
                159,
                165,
                188,
                201,
                203,
                206,
                210,
                217,
                219,
                220,
                228,
                229,
                231,
                238,
                250,
                253,
                258,
                293,
                301,
                303,
                308,
                321,
                332,
                333,
                336,
                337,
                340,
                349,
                418,
                420,
                424,
                439,
                441,
                443,
                457,
                459,
                472,
                474,
                475,
                525,
                528,
                544,
                573,
                586,
                594,
                600,
                611,
                634,
                640,
                646,
                666,
                668,
                679,
                680,
                686,
                690
            ],
            "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java": [
                158,
                169,
                175,
                198,
                221,
                227,
                230,
                233,
                241,
                244,
                247,
                255,
                263,
                271,
                294,
                296,
                303,
                308,
                311,
                328,
                336,
                338,
                376,
                386,
                397,
                398,
                402,
                403,
                420,
                430,
                455,
                457,
                458,
                519,
                542,
                548,
                565,
                570,
                578,
                583,
                586,
                622,
                630,
                646,
                694,
                704,
                710,
                723,
                744,
                757,
                763,
                775,
                785,
                811,
                821,
                831,
                843,
                845,
                880
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java": [
                78,
                130,
                137,
                139,
                168,
                184,
                201
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java": [
                87,
                101,
                153,
                158,
                208,
                219,
                235,
                262,
                266,
                272
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/PeriodicReloadingTrigger.java": [
                90,
                91,
                118,
                119,
                176,
                231
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingController.java": [
                86,
                113,
                120,
                155
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingEvent.java": [
                56
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/VFSFileHandlerReloadingDetector.java": [
                73,
                74,
                85,
                97,
                107,
                130,
                131,
                138,
                140,
                154,
                155
            ],
            "src/main/java/org/apache/commons/configuration2/resolver/CatalogResolver.java": [
                100,
                109,
                119,
                128,
                137,
                175,
                182,
                183,
                193,
                199,
                200,
                205,
                235,
                245,
                268,
                270,
                297,
                315,
                332,
                365,
                412,
                416,
                422,
                435,
                437,
                444,
                453,
                477,
                488,
                495,
                507,
                524,
                545,
                547,
                548
            ],
            "src/main/java/org/apache/commons/configuration2/resolver/DefaultEntityResolver.java": [
                66,
                87,
                103,
                105,
                106,
                110
            ],
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertiesFactoryBean.java": [
                66,
                119,
                127,
                129,
                130,
                146,
                163,
                179,
                197
            ],
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertySource.java": [
                33,
                38,
                56
            ],
            "src/main/java/org/apache/commons/configuration2/sync/ReadWriteSynchronizer.java": [
                55
            ],
            "src/main/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandler.java": [
                43,
                49,
                55,
                61,
                62,
                72,
                73,
                75,
                77,
                92,
                98,
                104,
                110,
                120,
                126,
                132,
                142,
                154
            ],
            "src/main/java/org/apache/commons/configuration2/tree/ConfigurationNodeVisitorAdapter.java": [
                40,
                48
            ],
            "src/main/java/org/apache/commons/configuration2/tree/DefaultConfigurationKey.java": [
                72,
                85,
                123,
                154,
                165,
                179,
                203,
                214,
                221,
                222,
                223,
                254,
                256,
                257,
                261,
                290,
                301,
                335,
                355,
                365,
                381,
                392,
                413,
                436,
                459,
                473,
                486,
                503,
                527,
                543,
                596,
                605,
                668,
                737,
                804,
                817,
                841,
                848,
                855,
                897,
                914,
                920,
                923,
                934
            ],
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngine.java": [
                139,
                155,
                156,
                186,
                187,
                189,
                203,
                210,
                217,
                219,
                233,
                234,
                236,
                237,
                238,
                332,
                334,
                342,
                343,
                373,
                374,
                383,
                410,
                411,
                413,
                424,
                452,
                453,
                465,
                483,
                484,
                500,
                501
            ],
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngineSymbols.java": [
                93,
                186,
                197,
                282,
                298,
                314,
                328,
                340,
                354,
                367
            ],
            "src/main/java/org/apache/commons/configuration2/tree/ImmutableNode.java": [
                65,
                146,
                159,
                173,
                176,
                189,
                192,
                194,
                219,
                220,
                223,
                225,
                252,
                254,
                269,
                271,
                286,
                293,
                306,
                308,
                324,
                336,
                350,
                414,
                432,
                433,
                450,
                462,
                474,
                487,
                506,
                525,
                540,
                558,
                635,
                651,
                653,
                655
            ],
            "src/main/java/org/apache/commons/configuration2/tree/InMemoryNodeModel.java": [
                83,
                119,
                120,
                139,
                148,
                158,
                159,
                178,
                187,
                189,
                202,
                209,
                223,
                224,
                243,
                249,
                252,
                261,
                264,
                279,
                280,
                300,
                307,
                310,
                311,
                315,
                348,
                349,
                367,
                373,
                375,
                391,
                393,
                419,
                438,
                439,
                447,
                449,
                472,
                477,
                479,
                480,
                524,
                525,
                530,
                531,
                552,
                553,
                555,
                560,
                561,
                589,
                590,
                592,
                598,
                599,
                603,
                634,
                635,
                637,
                643,
                644,
                652,
                653,
                673,
                691,
                702,
                724,
                726,
                727,
                750,
                766,
                771,
                772,
                813,
                819,
                820,
                822,
                837,
                851,
                852,
                854,
                874,
                876,
                890,
                891,
                905,
                906,
                908,
                923,
                924,
                925,
                933,
                946,
                947,
                956,
                957,
                962,
                981,
                983,
                984,
                1001,
                1002,
                1016,
                1017,
                1019,
                1043,
                1044,
                1046,
                1070,
                1071,
                1073,
                1098,
                1115,
                1116,
                1139,
                1141,
                1158,
                1159,
                1165,
                1186,
                1187,
                1190,
                1198,
                1219,
                1220,
                1224,
                1244,
                1245,
                1247,
                1266,
                1267,
                1269,
                1287,
                1288,
                1289,
                1291,
                1293,
                1294,
                1300,
                1316,
                1317,
                1318,
                1320,
                1324,
                1344,
                1345,
                1346,
                1347,
                1350,
                1360,
                1362,
                1377,
                1390
            ],
            "src/main/java/org/apache/commons/configuration2/tree/MergeCombiner.java": [
                55,
                57,
                63,
                64,
                66,
                79,
                96,
                97,
                99,
                101,
                121,
                122,
                124,
                125,
                127,
                129,
                143,
                160,
                161,
                163,
                164
            ],
            "src/main/java/org/apache/commons/configuration2/tree/ModelTransaction.java": [
                137,
                138,
                183,
                184,
                186,
                197,
                199,
                211,
                212,
                224,
                225,
                237,
                239,
                250,
                261,
                272,
                273,
                285,
                297,
                308,
                345,
                359,
                361,
                389,
                403,
                422,
                423,
                424,
                468,
                480,
                492,
                498,
                499,
                514,
                561,
                562,
                569,
                583,
                590,
                604,
                605,
                612,
                626,
                628,
                642,
                644,
                660,
                662,
                713,
                725,
                736,
                748,
                749,
                760,
                772,
                773,
                775,
                777,
                778,
                780,
                782,
                848,
                855,
                856,
                876,
                882,
                883,
                903,
                909,
                910,
                930,
                936,
                937,
                957,
                963,
                964,
                993,
                1010,
                1022,
                1038,
                1048,
                1077,
                1078,
                1080,
                1081,
                1099,
                1103
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeAddData.java": [
                78,
                79,
                144
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeCombiner.java": [
                78,
                101,
                129
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeHandlerDecorator.java": [
                41,
                47,
                53,
                59,
                65,
                66,
                73,
                74,
                81,
                87,
                93,
                99,
                105,
                111,
                117,
                123
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeNameMatchers.java": [
                46,
                47,
                60,
                61
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeSelector.java": [
                60,
                71,
                87,
                88,
                89,
                92,
                97,
                98,
                100,
                120,
                122,
                137,
                148,
                184,
                185,
                186,
                187,
                189,
                191
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeTracker.java": [
                85,
                103,
                104,
                105,
                107,
                109,
                125,
                126,
                128,
                130,
                131,
                133,
                159,
                161,
                163,
                165,
                186,
                199,
                216,
                241,
                242,
                243,
                251,
                253,
                280,
                282,
                285,
                303,
                304,
                306,
                320,
                322,
                345,
                346,
                347,
                348,
                360,
                389,
                391,
                405,
                425,
                426,
                427,
                433,
                462,
                475,
                476,
                548,
                563,
                565
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeTreeWalker.java": [
                66,
                67,
                94,
                95,
                111,
                112,
                117,
                140,
                141,
                143,
                149,
                152,
                172,
                173
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeUpdateData.java": [
                71,
                72,
                73,
                136,
                153
            ],
            "src/main/java/org/apache/commons/configuration2/tree/OverrideCombiner.java": [
                63,
                64,
                66,
                70,
                72,
                85,
                110,
                111,
                114,
                136,
                137
            ],
            "src/main/java/org/apache/commons/configuration2/tree/QueryResult.java": [
                59,
                73,
                88,
                89,
                137,
                163,
                174,
                189
            ],
            "src/main/java/org/apache/commons/configuration2/tree/ReferenceTracker.java": [
                72,
                73,
                97,
                99,
                116,
                117,
                122,
                125,
                141,
                143,
                176
            ],
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeHandler.java": [
                57,
                58,
                80
            ],
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeModel.java": [
                99,
                100,
                168,
                180,
                181,
                187,
                188,
                194,
                195,
                201,
                202,
                208,
                209,
                222
            ],
            "src/main/java/org/apache/commons/configuration2/tree/TreeData.java": [
                66,
                67,
                68,
                69,
                115,
                121,
                123,
                160,
                174,
                184,
                211,
                212,
                234,
                236,
                238
            ],
            "src/main/java/org/apache/commons/configuration2/tree/TreeUtils.java": [
                40,
                48,
                50,
                51,
                65
            ],
            "src/main/java/org/apache/commons/configuration2/tree/UnionCombiner.java": [
                126,
                127,
                129,
                137,
                138,
                140,
                154,
                192,
                193,
                199
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationAttributePointer.java": [
                53,
                54,
                72,
                87,
                192,
                206
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorAttribute.java": [
                52,
                66,
                92,
                94,
                101,
                104,
                107,
                127,
                128
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorBase.java": [
                66,
                67,
                91,
                150,
                180,
                209,
                223
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorChildren.java": [
                56,
                57,
                60,
                84,
                111,
                119,
                120,
                127,
                146,
                148,
                149,
                150,
                169,
                171,
                176,
                177,
                178,
                197,
                200
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointer.java": [
                62,
                63,
                78,
                79,
                184,
                197,
                198,
                200,
                201,
                204,
                225,
                239,
                240,
                254,
                293,
                296
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointerFactory.java": [
                77,
                81,
                102,
                103,
                107,
                124,
                149
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathContextFactory.java": [
                42,
                44
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathExpressionEngine.java": [
                185,
                195,
                196,
                200,
                203,
                222,
                237,
                252,
                254,
                271,
                272,
                274,
                281,
                298,
                299,
                319,
                338,
                352,
                353,
                359,
                364,
                368,
                443,
                444,
                450,
                453,
                474,
                475,
                487,
                500,
                518,
                520,
                522,
                524,
                546
            ],
            "src/main/java/org/apache/commons/configuration2/web/AppletConfiguration.java": [
                44,
                50,
                58,
                59
            ],
            "src/main/java/org/apache/commons/configuration2/web/BaseWebConfiguration.java": [
                61,
                75,
                90,
                107
            ],
            "src/main/java/org/apache/commons/configuration2/web/ServletConfiguration.java": [
                47,
                57,
                63,
                73
            ],
            "src/main/java/org/apache/commons/configuration2/web/ServletContextConfiguration.java": [
                47,
                58,
                64,
                74
            ],
            "src/main/java/org/apache/commons/configuration2/web/ServletFilterConfiguration.java": [
                45,
                51,
                61
            ],
            "src/main/java/org/apache/commons/configuration2/web/ServletRequestConfiguration.java": [
                46,
                52,
                54,
                67,
                68,
                70,
                88
            ],
            "src/test/java/org/apache/commons/configuration2/BaseNonStringProperties.java": [
                51,
                65,
                66,
                86,
                87,
                108,
                109,
                129,
                149,
                169
            ],
            "src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java": [
                62,
                65,
                67,
                73,
                75,
                86,
                97,
                109,
                121,
                134,
                153,
                155,
                166,
                168,
                179,
                180,
                182,
                195,
                201
            ],
            "src/test/java/org/apache/commons/configuration2/DatabaseConfigurationTestHelper.java": [
                107,
                121,
                160,
                179,
                180,
                195,
                224,
                256,
                274,
                282,
                283,
                284
            ],
            "src/test/java/org/apache/commons/configuration2/FileURLStreamHandler.java": [
                40
            ],
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java": [
                47,
                50,
                54,
                71,
                84,
                93,
                110,
                114,
                116,
                124,
                139,
                154,
                156,
                157,
                162,
                175,
                189,
                199,
                211,
                217,
                228,
                230,
                250,
                263,
                274
            ],
            "src/test/java/org/apache/commons/configuration2/Logging.java": [
                53,
                59,
                62,
                64,
                78,
                86,
                118,
                134,
                147,
                160,
                173,
                187,
                200,
                214,
                227,
                241,
                254,
                268
            ],
            "src/test/java/org/apache/commons/configuration2/MockInitialContextFactory.java": [
                86,
                88,
                90,
                91,
                92,
                93,
                110,
                135,
                137,
                141,
                145,
                160,
                172,
                187,
                188,
                190,
                212,
                224,
                226,
                236
            ],
            "src/test/java/org/apache/commons/configuration2/NonCloneableConfiguration.java": [
                35,
                52,
                70,
                76
            ],
            "src/test/java/org/apache/commons/configuration2/NonStringTestHolder.java": [
                35,
                42,
                49,
                52,
                58,
                59,
                66,
                67,
                74,
                75,
                82,
                83,
                90,
                91,
                97,
                104,
                110,
                116,
                122,
                129,
                135,
                141,
                145,
                148
            ],
            "src/test/java/org/apache/commons/configuration2/SynchronizerTestImpl.java": [
                76,
                88,
                100,
                112,
                132,
                134,
                135,
                148
            ],
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfiguration.java": [
                65,
                74,
                76,
                97,
                103,
                106,
                117,
                137,
                145,
                153,
                154,
                156,
                165,
                180,
                182,
                194,
                200
            ],
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java": [
                71,
                78,
                80,
                99,
                129,
                139,
                142,
                144,
                148,
                163,
                164,
                168,
                189,
                190,
                201,
                202,
                203,
                215,
                227,
                228,
                242,
                243,
                247,
                250,
                272,
                283,
                284,
                285,
                297,
                309,
                310,
                324,
                336,
                338,
                340,
                341,
                344,
                356,
                358,
                362,
                374,
                376,
                381,
                395,
                397,
                401,
                415,
                420,
                433,
                436,
                438,
                452,
                455,
                470,
                471,
                486,
                487,
                531,
                532,
                540,
                542,
                544,
                555,
                557,
                559,
                570,
                585,
                595,
                607,
                623,
                641,
                656,
                671,
                686,
                699,
                700,
                711,
                712,
                732,
                733,
                744,
                754,
                755,
                767,
                780,
                782,
                793,
                794,
                800,
                810,
                811,
                817,
                828,
                838,
                839,
                852,
                863,
                875,
                877,
                892,
                893,
                894,
                905,
                916,
                917,
                927,
                928,
                929,
                940,
                941,
                942,
                952,
                954,
                967,
                968,
                980,
                981,
                982,
                992,
                1002,
                1005,
                1015,
                1022,
                1035,
                1045,
                1052,
                1065,
                1083,
                1103,
                1118,
                1135,
                1136,
                1138,
                1139,
                1155,
                1157,
                1180,
                1186,
                1192,
                1204,
                1216,
                1232
            ],
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationSynchronization.java": [
                56,
                233,
                247,
                262,
                273
            ],
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java": [
                66,
                108,
                109,
                118,
                249,
                272,
                318,
                319,
                339,
                352,
                353,
                367,
                403,
                419,
                448,
                471,
                507,
                510,
                521,
                533,
                535,
                551,
                562,
                580,
                581,
                600,
                611,
                615,
                620,
                661,
                717,
                718,
                774,
                787,
                824,
                842,
                857,
                858,
                861,
                879,
                880,
                883,
                901,
                902,
                905,
                917,
                929,
                942,
                944,
                948,
                963,
                965,
                966,
                970,
                973,
                1014,
                1042,
                1074,
                1086,
                1087,
                1093,
                1099,
                1105,
                1110,
                1116,
                1122,
                1129,
                1136,
                1143
            ],
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java": [
                97,
                98,
                122,
                123,
                147,
                148,
                172,
                173,
                197,
                198,
                222,
                223,
                247,
                248,
                272,
                273,
                290,
                315,
                340,
                381,
                383,
                391,
                415,
                422,
                423,
                447,
                465,
                466,
                585,
                600,
                601,
                603,
                605,
                608,
                611,
                614,
                615,
                703,
                705,
                707,
                720,
                723,
                744,
                759
            ],
            "src/test/java/org/apache/commons/configuration2/TestBaseConfigurationXMLReader.java": [
                92,
                99,
                104,
                105,
                107,
                108,
                109,
                111,
                112,
                134,
                136,
                137,
                144,
                154
            ],
            "src/test/java/org/apache/commons/configuration2/TestBaseHierarchicalConfigurationSynchronization.java": [
                65,
                100,
                113,
                134,
                147,
                161,
                173,
                185,
                188,
                201,
                203,
                217,
                219,
                221,
                235,
                238,
                241,
                244,
                258,
                271,
                277,
                278,
                282,
                290,
                298,
                332,
                333,
                334,
                348,
                352,
                367
            ],
            "src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java": [
                78,
                79,
                103,
                104,
                128,
                129,
                153,
                154,
                178,
                179,
                203,
                204,
                228,
                229,
                254,
                255,
                272,
                297,
                315,
                317,
                325,
                343,
                361,
                362,
                388,
                390,
                393,
                404,
                423
            ],
            "src/test/java/org/apache/commons/configuration2/TestCatalogResolver.java": [
                69,
                71,
                109
            ],
            "src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java": [
                125,
                143,
                151,
                176,
                189,
                201,
                203,
                253,
                266,
                278,
                291,
                303,
                336,
                354,
                368,
                394,
                409,
                430,
                466,
                470,
                482,
                483,
                584,
                599,
                624,
                655,
                659,
                665,
                681,
                683,
                686,
                695,
                697,
                700,
                712,
                717,
                727,
                729,
                747,
                758,
                770,
                782,
                795,
                808,
                821,
                834,
                857,
                871,
                885,
                898,
                909,
                922,
                938,
                953,
                956,
                970,
                990,
                994,
                1004,
                1006,
                1015,
                1016,
                1017,
                1018,
                1024,
                1032,
                1047,
                1061,
                1062,
                1075,
                1078,
                1111,
                1128,
                1146,
                1182,
                1183,
                1205,
                1217,
                1225,
                1273,
                1274,
                1293,
                1304
            ],
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java": [
                75,
                78,
                83,
                87,
                134,
                163,
                179,
                313,
                330,
                361,
                365,
                398,
                399,
                403,
                404,
                422,
                423,
                427,
                428,
                442,
                445,
                455,
                459,
                474,
                475,
                477,
                481,
                487,
                501,
                507,
                520,
                524,
                527,
                536,
                541,
                549,
                553,
                586,
                597,
                608,
                622,
                637,
                640,
                684,
                686,
                765,
                784,
                796,
                808,
                811,
                826,
                827,
                843,
                897,
                908,
                919,
                930,
                941,
                953
            ],
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfigurationNonStringProperties.java": [
                37,
                38,
                39
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationConverter.java": [
                44,
                49,
                54,
                66,
                83,
                84,
                100,
                102,
                114,
                123,
                128,
                140,
                142,
                149,
                152
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationLookup.java": [
                55,
                57,
                67,
                68,
                79,
                81,
                92,
                97,
                98,
                100
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationMap.java": [
                61
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationSet.java": [
                63,
                89,
                91
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java": [
                81,
                82,
                103,
                108,
                123,
                128,
                152,
                159,
                162,
                164,
                177,
                201,
                206,
                219,
                222,
                227,
                240,
                241,
                257,
                258,
                275,
                278,
                293,
                297,
                301,
                302,
                312,
                314,
                327,
                347,
                350,
                354,
                355,
                371,
                382,
                409,
                412,
                432,
                479,
                523,
                543,
                546,
                577,
                578,
                591,
                592,
                629
            ],
            "src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java": [
                69,
                84,
                100,
                116,
                132,
                148,
                164,
                180,
                195,
                210,
                219,
                220,
                230,
                237,
                238,
                248,
                264,
                271,
                272,
                282,
                289,
                290,
                293,
                294,
                295,
                297,
                310,
                327,
                348,
                349,
                357,
                358,
                370,
                371,
                383,
                384,
                388,
                429,
                432,
                508,
                511,
                587,
                590,
                666,
                669,
                745,
                748,
                824,
                827,
                903,
                906,
                982,
                985,
                1017,
                1056,
                1059,
                1129,
                1132,
                1148,
                1151,
                1221,
                1224,
                1240,
                1243,
                1349,
                1352,
                1431,
                1449,
                1452,
                1526,
                1533,
                1536,
                1547,
                1586,
                1595,
                1596,
                1597,
                1600,
                1603,
                1637,
                1638,
                1639,
                1640,
                1650,
                1651,
                1652,
                1655,
                1700,
                1703,
                1715,
                1720,
                1740,
                1741,
                1742,
                1743,
                1745,
                1749,
                1752,
                1786,
                1787,
                1788,
                1790,
                1792,
                1794,
                1804,
                1805,
                1806,
                1807,
                1809,
                1813,
                1858,
                1880,
                1897,
                1906,
                1916,
                1918,
                1933,
                1943,
                1953,
                1963,
                1973,
                1983,
                1993,
                2003,
                2013,
                2023,
                2033,
                2043,
                2053,
                2063,
                2073,
                2083,
                2093,
                2103,
                2113,
                2123,
                2133,
                2143,
                2153,
                2163,
                2173,
                2183,
                2193,
                2203,
                2213,
                2223,
                2233,
                2243,
                2253,
                2263,
                2273,
                2283,
                2293,
                2303,
                2313,
                2323,
                2333,
                2343,
                2353,
                2363,
                2373,
                2383,
                2393,
                2403,
                2413,
                2423,
                2433,
                2443,
                2453,
                2463,
                2473,
                2483,
                2493,
                2503,
                2513,
                2523,
                2533,
                2543,
                2556,
                2557,
                2568,
                2580,
                2593,
                2594,
                2613
            ],
            "src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java": [
                104,
                123,
                138,
                139,
                141,
                149,
                162,
                170,
                179,
                188,
                198,
                208,
                217,
                230,
                231,
                248,
                256,
                265,
                278,
                286,
                287,
                296,
                297,
                306,
                314,
                322,
                329,
                332,
                339,
                340,
                341,
                348,
                349,
                350,
                352,
                360,
                362,
                376,
                453,
                466,
                468,
                481,
                492,
                495,
                506,
                509,
                521,
                522,
                531,
                545,
                546,
                551,
                572,
                578
            ],
            "src/test/java/org/apache/commons/configuration2/TestDynamicCombinedConfiguration.java": [
                90,
                91,
                93,
                96,
                107,
                111,
                113,
                140,
                144,
                156,
                158,
                172,
                174,
                185,
                187,
                198,
                200,
                202,
                213,
                215,
                226,
                228,
                239,
                241,
                243,
                252,
                255,
                258,
                259,
                280,
                283,
                287,
                288,
                311,
                314,
                318,
                319,
                320,
                321,
                354,
                359,
                376,
                393,
                395,
                398,
                402,
                421,
                422,
                452,
                453,
                459,
                474,
                487,
                488,
                502,
                506,
                510,
                529,
                535,
                537,
                538,
                539,
                557,
                563,
                569
            ],
            "src/test/java/org/apache/commons/configuration2/TestEnvironmentConfiguration.java": [
                57,
                59,
                73
            ],
            "src/test/java/org/apache/commons/configuration2/TestEqualBehaviour.java": [
                44,
                45,
                46,
                55,
                67,
                69,
                70,
                74,
                75,
                85,
                87,
                88,
                97,
                98,
                102,
                103,
                107,
                108,
                120,
                121,
                133,
                134,
                136,
                153,
                154,
                156,
                177,
                178,
                180,
                181,
                199,
                200,
                202,
                203,
                226,
                227,
                229,
                230,
                248,
                249,
                251,
                252
            ],
            "src/test/java/org/apache/commons/configuration2/TestEqualsProperty.java": [
                38,
                39,
                43
            ],
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java": [
                52,
                83,
                119,
                148,
                150,
                165,
                169,
                186,
                202,
                217,
                231,
                244,
                248,
                265,
                266,
                316,
                351,
                367,
                373,
                386,
                387,
                389,
                390,
                425,
                428,
                430,
                443,
                465,
                473,
                485,
                496,
                520,
                521,
                532,
                555,
                568,
                571,
                574,
                586,
                587,
                589,
                590,
                594,
                649
            ],
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfigurationXMLReader.java": [
                51,
                52,
                60,
                61,
                62,
                64,
                65
            ],
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalXMLConfiguration.java": [
                80,
                105,
                115,
                123,
                133,
                150,
                174,
                187,
                190,
                194,
                225,
                265,
                302
            ],
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java": [
                136,
                139,
                152,
                155,
                160,
                175,
                178,
                183,
                197,
                199,
                200,
                218,
                219,
                240,
                241,
                243,
                249,
                251,
                264,
                266,
                267,
                297,
                298,
                304,
                305,
                337,
                338,
                343,
                353,
                377,
                379,
                390,
                404,
                417,
                420,
                423,
                430,
                437,
                445,
                452,
                459,
                467,
                470,
                473,
                486,
                498,
                509,
                522,
                535,
                546,
                558,
                559,
                572,
                573,
                575,
                576,
                591,
                592,
                594,
                641,
                655,
                668,
                669,
                682,
                683,
                699,
                700,
                712,
                713,
                725,
                728,
                747,
                748,
                758,
                759,
                770,
                783,
                795,
                807,
                820,
                831,
                842,
                858,
                874,
                875,
                879,
                898,
                911,
                925,
                939,
                954,
                961,
                963,
                976,
                979,
                982,
                984,
                985,
                999,
                1004,
                1006,
                1017,
                1021,
                1022,
                1033,
                1036,
                1049,
                1062,
                1063,
                1075,
                1079,
                1080,
                1094,
                1097,
                1098,
                1099,
                1112,
                1113,
                1114,
                1118,
                1135,
                1136,
                1137,
                1153,
                1154,
                1155,
                1168,
                1169,
                1170,
                1171,
                1178,
                1192,
                1193,
                1194,
                1195,
                1209,
                1213,
                1235,
                1241,
                1264,
                1284
            ],
            "src/test/java/org/apache/commons/configuration2/TestImmutableConfiguration.java": [
                77,
                78,
                81,
                83,
                97,
                115,
                117,
                132,
                133,
                146,
                149,
                162,
                163,
                166,
                178,
                181,
                191,
                194,
                205,
                206,
                208,
                221,
                224,
                231
            ],
            "src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java": [
                62,
                64,
                164,
                172,
                228,
                243,
                244,
                246,
                259,
                317,
                319,
                320,
                347,
                358
            ],
            "src/test/java/org/apache/commons/configuration2/TestJNDIEnvironmentValues.java": [
                54,
                61,
                76,
                105,
                121,
                129,
                143
            ],
            "src/test/java/org/apache/commons/configuration2/TestJSONConfiguration.java": [
                43,
                77,
                84,
                92,
                102,
                104,
                107,
                108,
                110,
                114,
                117,
                123,
                124,
                147
            ],
            "src/test/java/org/apache/commons/configuration2/TestMapConfiguration.java": [
                54,
                60,
                74,
                76,
                83,
                84,
                85,
                95,
                97,
                116,
                119,
                133,
                136,
                146,
                157,
                171
            ],
            "src/test/java/org/apache/commons/configuration2/TestNonStringProperties.java": [
                36,
                37
            ],
            "src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java": [
                58,
                61,
                66,
                70,
                102,
                125,
                266,
                283,
                313,
                317,
                346,
                350,
                360,
                374,
                375,
                379,
                380,
                398,
                399,
                403,
                404,
                418,
                421,
                445,
                446,
                448,
                452,
                455
            ],
            "src/test/java/org/apache/commons/configuration2/TestNullJNDIEnvironmentValues.java": [
                53,
                60,
                75,
                104,
                120,
                128,
                142
            ],
            "src/test/java/org/apache/commons/configuration2/TestPatternSubtreeConfiguration.java": [
                56,
                76,
                77,
                89,
                90
            ],
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java": [
                108,
                111,
                120,
                131,
                132,
                143,
                145,
                185,
                196,
                207,
                211,
                224,
                228,
                242,
                274,
                284,
                303,
                304,
                308,
                309,
                320,
                347,
                363,
                372,
                383,
                400,
                409,
                410,
                421,
                422,
                433,
                435,
                458,
                468,
                475,
                489,
                498,
                510,
                526,
                540,
                551,
                608,
                610,
                627,
                629,
                641,
                645,
                656,
                669,
                683,
                711,
                722,
                724,
                736,
                746,
                748,
                750,
                763,
                765,
                771,
                784,
                786,
                787,
                805,
                820,
                832,
                845,
                847,
                852,
                887,
                894,
                918,
                925,
                929,
                933,
                957,
                958,
                965,
                989,
                991,
                1015,
                1017,
                1049,
                1072,
                1084,
                1096,
                1108,
                1122,
                1124,
                1129,
                1145,
                1148,
                1158,
                1167,
                1168,
                1174,
                1198,
                1204,
                1220,
                1222,
                1224,
                1239,
                1254,
                1258,
                1260,
                1262,
                1275,
                1289,
                1308,
                1358,
                1370,
                1391,
                1425
            ],
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java": [
                91,
                239,
                291,
                309,
                327,
                343,
                376,
                389,
                403,
                570,
                591,
                594,
                611,
                714,
                729,
                740,
                762,
                773,
                784,
                838
            ],
            "src/test/java/org/apache/commons/configuration2/TestPropertiesSequence.java": [
                43,
                44,
                46,
                47,
                51,
                53,
                55,
                56,
                58,
                59,
                73,
                74,
                76,
                77,
                81,
                83,
                91,
                92,
                94,
                95,
                109,
                110,
                112,
                113,
                117,
                119,
                121,
                122,
                124,
                126,
                127,
                131,
                140,
                142,
                143,
                147
            ],
            "src/test/java/org/apache/commons/configuration2/TestStrictConfigurationComparator.java": [
                63
            ],
            "src/test/java/org/apache/commons/configuration2/TestSubnodeConfiguration.java": [
                78,
                90,
                91,
                109,
                120,
                122,
                181,
                223,
                237,
                279,
                280,
                304,
                320,
                336,
                368,
                375,
                417,
                444,
                448,
                492,
                494,
                496,
                513,
                518,
                531
            ],
            "src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java": [
                65,
                69,
                78,
                79,
                95,
                110,
                125,
                130,
                132,
                141,
                146,
                148,
                157,
                162,
                163,
                170,
                171,
                179,
                180,
                188,
                189,
                198,
                201,
                208,
                223,
                232,
                236,
                237,
                239,
                240,
                241,
                246,
                256,
                260,
                273,
                274,
                294,
                295,
                297,
                310,
                311,
                313,
                326,
                328,
                329,
                341,
                342,
                349,
                350,
                354,
                360,
                368,
                371
            ],
            "src/test/java/org/apache/commons/configuration2/TestSystemConfiguration.java": [
                50,
                53,
                60,
                73,
                74,
                75,
                81,
                91,
                92,
                109,
                133,
                134,
                139,
                141
            ],
            "src/test/java/org/apache/commons/configuration2/TestThreesomeConfiguration.java": [
                43,
                45,
                54,
                62,
                70
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java": [
                127,
                130,
                142,
                145,
                172,
                181,
                202,
                211,
                232,
                313,
                366,
                408,
                420,
                442,
                452,
                463,
                481,
                483,
                500,
                542,
                554,
                577,
                645,
                647,
                650,
                679,
                692,
                706,
                708,
                725,
                729,
                774,
                792,
                841,
                868,
                960,
                963,
                975,
                977,
                990,
                992,
                1008,
                1010,
                1027,
                1044,
                1063,
                1092,
                1120,
                1121,
                1176,
                1177,
                1194,
                1203,
                1207,
                1220,
                1229,
                1230,
                1234,
                1258,
                1267,
                1281,
                1296,
                1308,
                1322,
                1330,
                1332,
                1335,
                1348,
                1351,
                1360,
                1380,
                1384,
                1422,
                1495,
                1502,
                1518,
                1530,
                1532,
                1542,
                1551,
                1564,
                1579,
                1581,
                1585,
                1598,
                1617,
                1632,
                1633,
                1636,
                1650,
                1652,
                1655,
                1666,
                1680,
                1697,
                1698,
                1704,
                1729,
                1740,
                1743,
                1767
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration_605.java": [
                42,
                58,
                60,
                62,
                75,
                78,
                80,
                88,
                95,
                102,
                109,
                116,
                123,
                130,
                142
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLDocumentHelper.java": [
                83,
                86,
                98,
                111,
                114,
                115,
                116,
                142,
                151,
                163,
                164,
                165,
                166,
                176,
                190,
                192,
                201,
                213,
                214,
                215,
                218,
                231,
                242,
                243,
                255,
                256,
                267,
                269,
                272,
                273,
                282,
                284,
                286,
                287,
                289,
                291,
                292,
                304,
                306,
                317,
                318,
                324
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLListHandling.java": [
                72,
                75,
                77,
                89,
                90,
                102,
                115,
                116,
                118,
                119,
                131,
                133,
                145,
                159,
                173,
                186,
                189,
                191
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java": [
                64,
                67,
                68,
                76,
                88,
                89,
                90,
                94,
                100,
                101,
                102,
                116,
                124,
                125,
                129,
                144,
                152,
                155,
                156,
                157,
                159,
                160,
                161,
                162,
                166
            ],
            "src/test/java/org/apache/commons/configuration2/TestYAMLConfiguration.java": [
                41,
                75,
                82,
                90,
                100,
                102,
                105,
                109,
                112,
                131
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBean.java": [
                37,
                47,
                57
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBeanWithListChild.java": [
                41,
                52,
                62
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestCtorBean.java": [
                30,
                35,
                40
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanDeclarationTestImpl.java": [
                50,
                61,
                72,
                83,
                95,
                106
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestBeanHelper.java": [
                85,
                152,
                185,
                186,
                198,
                199,
                213,
                225,
                227,
                241,
                243,
                269,
                281,
                284,
                298,
                311,
                323,
                326,
                336,
                349,
                361,
                362,
                364,
                377,
                378,
                379,
                399,
                402,
                415,
                416,
                420,
                421,
                427,
                442,
                443,
                448,
                451,
                464,
                466,
                467,
                482,
                487,
                500,
                505,
                527,
                533,
                540
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestCombinedBeanDeclaration.java": [
                71,
                98,
                99,
                114,
                125,
                126,
                141,
                152,
                169,
                180,
                181,
                197,
                214,
                215,
                216,
                223,
                228,
                244,
                247,
                257,
                258,
                259,
                266,
                271,
                288,
                291
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java": [
                111,
                118,
                122,
                126,
                158,
                243,
                245,
                246,
                247,
                328,
                331,
                368,
                380,
                392,
                404,
                416,
                428,
                440,
                532,
                535,
                538,
                564,
                565,
                576,
                577,
                588,
                589,
                600,
                601,
                612,
                613,
                624,
                625,
                636,
                637,
                666,
                668,
                680,
                682
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConstructorArg.java": [
                47,
                49,
                59,
                69,
                80,
                92
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestDefaultBeanFactory.java": [
                82,
                106,
                140,
                154,
                155,
                158,
                162,
                173,
                174,
                178,
                192,
                193,
                197,
                201,
                215,
                216,
                229,
                230,
                234,
                236,
                248,
                249,
                262,
                263,
                267,
                269,
                281,
                282,
                286,
                287,
                293,
                305,
                306,
                314,
                316
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestXMLBeanDeclaration.java": [
                119,
                121,
                132,
                142,
                144,
                154,
                157,
                170,
                173,
                186,
                188,
                199,
                209,
                211,
                221,
                225,
                236,
                246,
                248,
                259,
                261,
                272,
                276,
                286,
                287,
                299,
                302,
                325,
                326,
                329,
                334,
                350,
                351,
                353,
                355,
                366,
                367,
                370,
                376,
                377,
                378,
                390,
                392,
                393,
                404,
                405,
                412,
                423,
                437,
                439,
                450,
                462,
                463,
                464,
                466,
                467,
                474,
                486,
                489,
                490,
                492,
                503,
                504,
                508,
                509,
                510,
                520,
                523,
                526,
                527,
                528,
                541,
                542,
                557,
                558,
                560,
                577,
                578
            ],
            "src/test/java/org/apache/commons/configuration2/builder/BuilderEventListenerImpl.java": [
                51,
                66,
                68,
                70,
                74
            ],
            "src/test/java/org/apache/commons/configuration2/builder/ParametersBeanTestImpl.java": [
                37,
                47,
                52,
                63
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestAutoSaveListener.java": [
                51,
                65,
                66,
                83,
                153
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java": [
                70,
                81,
                82,
                84,
                95,
                120,
                135,
                149,
                150,
                152,
                156,
                178,
                179,
                181,
                186,
                209,
                224,
                225,
                226,
                228,
                234,
                256,
                257,
                258,
                264,
                269,
                287,
                289,
                290,
                291,
                292,
                295,
                299,
                300,
                318,
                321,
                335,
                347,
                348,
                361,
                362,
                375,
                386,
                409,
                410,
                412,
                413,
                418,
                421,
                436,
                437,
                439,
                453,
                454,
                456,
                471,
                484,
                498,
                529,
                553,
                554,
                556,
                557,
                559,
                560,
                565,
                568,
                590,
                594
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilder.java": [
                93,
                105,
                106,
                109,
                120,
                121,
                125,
                136,
                148,
                160,
                166,
                177,
                179,
                184,
                195,
                198,
                201,
                214,
                217,
                228,
                242,
                261,
                262,
                263,
                266,
                274,
                275,
                288,
                291,
                293,
                304,
                307,
                309,
                321,
                327,
                345,
                357,
                358,
                360,
                364,
                366,
                378,
                379,
                381,
                389,
                408,
                409,
                410,
                411,
                417,
                421,
                432,
                445,
                446,
                450,
                456,
                473,
                474,
                480,
                493,
                496,
                499,
                511,
                523,
                525,
                536,
                541,
                553,
                556,
                562,
                563,
                567,
                579,
                583,
                584,
                587,
                603,
                634,
                635,
                650,
                668,
                677
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilderEvents.java": [
                47,
                59,
                71,
                72,
                93,
                94,
                113,
                116,
                129,
                141,
                145,
                149,
                166,
                167,
                174,
                180,
                216,
                219,
                222,
                224
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestBuilderConfigurationWrapperFactory.java": [
                53,
                66,
                69,
                77,
                91,
                93,
                98,
                100,
                116,
                118,
                121,
                123,
                135,
                137,
                140,
                142,
                154,
                157,
                158,
                159,
                162,
                174,
                175,
                188,
                190,
                192,
                196,
                198,
                211,
                224
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestCopyObjectDefaultHandler.java": [
                52,
                56,
                57,
                60,
                74,
                80,
                82,
                96,
                97,
                99,
                103,
                109
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestDatabaseBuilderParametersImpl.java": [
                53,
                66,
                78,
                90,
                102,
                115,
                141
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultParametersManager.java": [
                93,
                99,
                110,
                114,
                128,
                130,
                143,
                145,
                158,
                162,
                182,
                193,
                195,
                219,
                226,
                229,
                240,
                247,
                250,
                264
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultReloadingDetectorFactory.java": [
                51,
                52,
                56,
                71,
                72,
                74
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestEventListenerParameters.java": [
                41,
                52,
                63,
                64,
                69,
                82,
                86
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java": [
                54,
                66,
                67,
                78,
                91,
                94,
                109,
                112,
                123,
                124,
                136,
                139,
                150,
                151,
                162,
                165,
                176,
                178,
                190,
                193,
                206,
                207,
                218,
                222,
                246,
                259,
                260,
                281,
                288,
                299,
                301,
                302,
                306,
                323,
                326,
                335,
                353,
                365,
                375,
                404,
                405,
                407,
                408,
                429
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedConfigurationBuilder.java": [
                72,
                82,
                95,
                110,
                112,
                115,
                128,
                129,
                134,
                147,
                148,
                153,
                155,
                167,
                168,
                174,
                186,
                187,
                188,
                196,
                207,
                208,
                215,
                228,
                229,
                230,
                253,
                266,
                267,
                271,
                282,
                285,
                286,
                298,
                299,
                304,
                316,
                319,
                321,
                334,
                335,
                336,
                339,
                352,
                353,
                362,
                374,
                375,
                380,
                383,
                396,
                397,
                402,
                419,
                420,
                426,
                472,
                488,
                509,
                512,
                526,
                529,
                530,
                549,
                550,
                553,
                556,
                558,
                561
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestHierarchicalBuilderParametersImpl.java": [
                52,
                65,
                69,
                82,
                83,
                87,
                91
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestJndiBuilderParametersImpl.java": [
                53,
                56,
                66,
                68,
                80,
                91,
                93,
                96
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestPropertiesBuilderParametersImpl.java": [
                66,
                79,
                93,
                102,
                115,
                120,
                124,
                140,
                142,
                147
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingBuilderSupportListener.java": [
                43,
                47,
                48,
                51,
                55,
                72,
                78,
                82
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingFileBasedConfigurationBuilder.java": [
                50,
                52,
                55,
                67,
                70,
                71,
                72,
                74,
                89,
                91,
                93,
                94,
                100,
                116,
                122,
                125,
                142,
                146,
                149,
                162,
                165,
                179,
                184,
                186,
                188,
                202,
                205,
                208,
                223,
                250,
                272
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestXMLBuilderParametersImpl.java": [
                53,
                67,
                80,
                92,
                126,
                127,
                136,
                149,
                150,
                154,
                157
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/AbstractMultiFileConfigurationBuilderTest.java": [
                52,
                76,
                89,
                103
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestBaseConfigurationBuilderProvider.java": [
                54,
                56,
                77,
                79,
                84,
                95,
                99,
                130,
                132,
                133,
                134,
                136,
                139,
                142,
                176,
                188,
                203,
                209,
                210,
                223,
                226,
                227,
                231,
                232,
                277,
                291
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedBuilderParametersImpl.java": [
                69,
                82,
                83,
                94,
                97,
                108,
                121,
                123,
                137,
                147,
                150,
                151,
                154,
                187,
                198,
                200,
                202,
                204,
                205,
                207,
                226,
                236,
                248,
                250,
                252,
                254,
                255,
                257,
                288,
                298,
                300,
                311,
                314,
                328,
                331,
                349,
                352,
                355,
                376,
                388,
                391,
                407,
                419,
                421,
                425,
                440,
                442,
                447,
                462,
                464,
                468,
                472,
                487,
                489,
                493
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilder.java": [
                143,
                157,
                158,
                160,
                162,
                163,
                198,
                211,
                226,
                243,
                265,
                270,
                314,
                319,
                332,
                346,
                347,
                352,
                354,
                358,
                387,
                388,
                403,
                416,
                460,
                464,
                466,
                480,
                481,
                483,
                484,
                487,
                489,
                500,
                516,
                518,
                519,
                534,
                537,
                542,
                543,
                557,
                559,
                574,
                579,
                581,
                597,
                610,
                615,
                621,
                635,
                639,
                650,
                657,
                673,
                685,
                689,
                702,
                705,
                707,
                721,
                727,
                738,
                744,
                755,
                759,
                760,
                762,
                777,
                780,
                781,
                782,
                786,
                800,
                805,
                843,
                845,
                850,
                864,
                871,
                873,
                888,
                891,
                895,
                906,
                908,
                914,
                930,
                937,
                951,
                954,
                955,
                961,
                962,
                979,
                982,
                986,
                992,
                993,
                995,
                999,
                1018,
                1033,
                1035,
                1040,
                1075,
                1087,
                1101,
                1104,
                1107,
                1120,
                1123,
                1126,
                1130,
                1146,
                1163,
                1176,
                1179,
                1182,
                1195,
                1210,
                1212,
                1232,
                1233,
                1245,
                1257,
                1259,
                1262,
                1263,
                1271,
                1275,
                1279,
                1298,
                1300,
                1322,
                1337,
                1339,
                1340,
                1348,
                1359,
                1360,
                1363,
                1364,
                1376,
                1377,
                1380,
                1384,
                1386,
                1399,
                1400,
                1404,
                1406,
                1408,
                1427,
                1434,
                1436,
                1451,
                1487,
                1499,
                1511,
                1552,
                1573,
                1587,
                1602
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilderVFS.java": [
                52,
                62,
                63,
                65,
                69,
                74
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestConfigurationDeclaration.java": [
                44,
                46,
                57,
                92,
                94,
                95,
                97,
                114,
                149,
                152
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestFileExtensionConfigurationBuilderProvider.java": [
                60,
                74,
                119,
                142,
                143,
                157,
                158,
                161,
                177,
                178,
                181,
                197,
                198,
                199,
                215,
                216,
                219,
                234,
                235,
                239
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileBuilderParametersImpl.java": [
                69,
                93,
                104,
                117,
                119,
                124,
                140,
                145
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileConfigurationBuilder.java": [
                71,
                90,
                96,
                97,
                100,
                117,
                119,
                138,
                146,
                162,
                165,
                166,
                170,
                173,
                178,
                181,
                193,
                202,
                230,
                231,
                235,
                245,
                248,
                261,
                263,
                267,
                271,
                283,
                294,
                296,
                318,
                320,
                337,
                339,
                343,
                356,
                357,
                359,
                363,
                365,
                380,
                381,
                383,
                399,
                400,
                405,
                409,
                424,
                427,
                430,
                446,
                449,
                450,
                453,
                457
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiWrapDynaBean.java": [
                63,
                67,
                97,
                98,
                121,
                133,
                134,
                135,
                147,
                148,
                149,
                170,
                220,
                228,
                229,
                234,
                256,
                261,
                266,
                271,
                281
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilder.java": [
                61,
                71,
                84,
                87,
                92,
                94,
                97,
                111,
                116,
                118,
                121,
                125,
                138,
                145
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilderFileBased.java": [
                97,
                110,
                137,
                139,
                153,
                166,
                177,
                178,
                179,
                184,
                185,
                191,
                233,
                238,
                239,
                245,
                252,
                271,
                272,
                299,
                302,
                303,
                333,
                349,
                363,
                366,
                379,
                410,
                411,
                428,
                436
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingMultiFileConfigurationBuilder.java": [
                55,
                56,
                59,
                63,
                74,
                77,
                94,
                97,
                109,
                115,
                120,
                137,
                144,
                167,
                173,
                176,
                226
            ],
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestConfigurations.java": [
                66,
                78,
                88,
                89,
                100,
                101,
                102,
                115,
                116,
                117,
                129,
                130,
                131,
                143,
                154,
                155,
                167,
                168,
                180,
                181,
                192,
                204,
                205,
                217,
                218,
                231,
                232,
                244,
                245,
                258,
                259,
                270,
                271,
                281,
                293,
                294,
                305,
                306,
                318,
                319,
                330,
                331,
                343,
                344,
                355,
                356,
                365,
                377,
                378,
                389,
                390,
                402,
                403,
                414,
                415,
                427,
                428,
                439,
                440,
                449,
                462,
                463,
                475,
                476,
                488,
                489,
                501,
                502,
                514,
                515,
                526,
                527
            ],
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestParameters.java": [
                70,
                81,
                91,
                105,
                109,
                125,
                137,
                140,
                162,
                163,
                176,
                180,
                192,
                207,
                208,
                213,
                238,
                239,
                245,
                274,
                276,
                282,
                307,
                308,
                309,
                314,
                328,
                348,
                353,
                357,
                359,
                371,
                387,
                388,
                403,
                415,
                417,
                423,
                436,
                438,
                443
            ],
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultConversionHandler.java": [
                71,
                87,
                99,
                109,
                128,
                140,
                150,
                180,
                200,
                203,
                219,
                239,
                240,
                256,
                259,
                272,
                275,
                292,
                293,
                309,
                330,
                344,
                345,
                358,
                373,
                374
            ],
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultListDelimiterHandler.java": [
                93,
                106,
                109,
                114,
                130,
                131,
                133,
                137
            ],
            "src/test/java/org/apache/commons/configuration2/convert/TestDisabledListDelimiterHandler.java": [
                61,
                63,
                64,
                104,
                136,
                137,
                152,
                164,
                165,
                189,
                201,
                202,
                214,
                217,
                219
            ],
            "src/test/java/org/apache/commons/configuration2/convert/TestPropertyConverter.java": [
                51,
                71,
                82,
                102,
                113,
                115,
                137,
                158,
                199,
                210,
                252,
                275,
                304,
                305
            ],
            "src/test/java/org/apache/commons/configuration2/event/AbstractEventListenerTestImpl.java": [
                49,
                56,
                66,
                77,
                80,
                96,
                100
            ],
            "src/test/java/org/apache/commons/configuration2/event/ErrorListenerTestImpl.java": [
                36,
                50,
                51,
                53
            ],
            "src/test/java/org/apache/commons/configuration2/event/EventListenerTestImpl.java": [
                36,
                49,
                50,
                52
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestConfigurationEventTypes.java": [
                45,
                56,
                68,
                70,
                144,
                201,
                250
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestDatabaseConfigurationEvents.java": [
                59
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestEvent.java": [
                54,
                55
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestEventListenerList.java": [
                105,
                118,
                119,
                135,
                136,
                151,
                165,
                179,
                180,
                215,
                228,
                271,
                287,
                289,
                290,
                305,
                306,
                308,
                342,
                343,
                356,
                357,
                370,
                371,
                374,
                390,
                403,
                406,
                411,
                424,
                435,
                438,
                444,
                481,
                482,
                483,
                485,
                490,
                519,
                520,
                522,
                528,
                530,
                549,
                550,
                569,
                570,
                583,
                584,
                601,
                624,
                625
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestEventSource.java": [
                71,
                73,
                95,
                129,
                141,
                169,
                195,
                210,
                213,
                220,
                236,
                237,
                238,
                242,
                279,
                309,
                310,
                314,
                341,
                342,
                343,
                344,
                351,
                372,
                373,
                381,
                382,
                383
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestEventType.java": [
                46
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestHierarchicalConfigurationEvents.java": [
                54,
                55,
                56,
                57,
                73,
                74,
                103,
                122,
                135,
                141
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestConfigurationInterpolator.java": [
                82,
                117,
                153,
                206,
                207,
                208,
                291,
                292,
                293,
                295,
                298,
                320,
                331,
                335,
                358,
                370,
                399,
                411,
                427,
                442,
                452,
                464,
                480,
                495,
                509,
                521,
                532,
                551,
                554,
                569,
                570,
                572,
                577,
                595,
                599,
                622,
                634
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestConstantLookup.java": [
                58
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestEnvironmentLookup.java": [
                53,
                54,
                56
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestExprLookup.java": [
                62,
                63,
                71,
                72,
                73,
                77,
                81,
                82,
                84,
                100,
                102,
                103,
                113,
                115,
                125,
                127,
                128,
                139,
                141,
                142,
                144,
                145,
                155,
                157,
                158,
                168,
                178
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestInterpolatorSpecification.java": [
                61,
                63,
                86,
                87,
                105,
                106,
                120,
                121,
                122,
                123,
                124,
                126,
                128,
                148,
                149,
                150,
                151,
                152,
                155,
                169,
                181,
                220,
                231,
                247,
                248,
                249,
                250,
                251,
                253
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestSystemPropertiesLookup.java": [
                49
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestAbsoluteNameLocationStrategy.java": [
                57,
                67,
                79,
                80,
                92,
                93,
                96
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestBasePathLocationStrategy.java": [
                59,
                73,
                74,
                86,
                87,
                99,
                114
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestClasspathLocationStrategy.java": [
                61,
                64,
                65,
                66,
                67,
                77,
                89
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestCombinedLocationStrategy.java": [
                117,
                119,
                123,
                156,
                170,
                173,
                184,
                198,
                216,
                233
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestConfigurationLogger.java": [
                70,
                72,
                85,
                88,
                100,
                103,
                115,
                118,
                130,
                133,
                145,
                148,
                160,
                161,
                164,
                176,
                179,
                191,
                192,
                195,
                207,
                220,
                223,
                240,
                250,
                251,
                263
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestDefaultFileSystem.java": [
                61
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java": [
                81,
                94,
                107,
                133,
                135,
                150,
                158,
                171,
                185,
                196,
                198,
                212,
                214,
                228,
                242,
                245,
                258,
                275,
                289,
                290,
                307,
                310,
                322,
                323,
                324,
                338,
                345,
                357,
                373,
                395,
                397,
                399,
                411,
                433,
                435,
                437,
                461,
                462,
                473,
                474,
                475,
                479,
                485,
                498,
                499,
                500,
                511,
                512,
                518,
                531,
                542,
                552,
                553,
                565,
                566,
                567,
                578,
                579,
                580,
                593,
                594,
                595,
                607,
                608,
                609,
                610,
                628,
                629,
                630,
                631,
                649,
                650,
                651,
                663,
                664,
                665,
                678,
                679,
                689,
                690,
                691,
                704,
                705,
                706,
                710,
                716,
                729,
                739,
                740,
                741,
                759,
                760,
                771,
                772,
                773,
                784,
                785,
                797,
                798,
                799,
                800,
                804,
                812,
                826,
                827,
                830,
                837,
                851,
                852,
                865,
                866,
                878,
                889,
                890,
                891,
                892,
                893,
                894,
                898,
                910,
                911,
                924,
                925,
                927,
                928,
                949,
                960,
                971,
                982,
                993,
                1003,
                1014,
                1032,
                1033,
                1035,
                1048,
                1062,
                1064,
                1065,
                1077,
                1079,
                1091,
                1092,
                1094,
                1108,
                1110,
                1123,
                1125,
                1137,
                1139,
                1140,
                1162,
                1163,
                1176,
                1177,
                1180,
                1191,
                1192,
                1205,
                1206,
                1219,
                1220,
                1233,
                1234,
                1247,
                1248,
                1249,
                1262,
                1263,
                1266,
                1277,
                1278,
                1291,
                1292,
                1306,
                1308,
                1309,
                1323,
                1325,
                1326,
                1330,
                1336,
                1349,
                1350,
                1352,
                1364,
                1366,
                1368,
                1369,
                1390,
                1398,
                1406,
                1414,
                1422,
                1423,
                1427,
                1431,
                1448,
                1458,
                1460,
                1472,
                1475,
                1481,
                1482,
                1495,
                1497,
                1508,
                1510,
                1522,
                1526,
                1528,
                1555,
                1561,
                1567,
                1583,
                1586,
                1618,
                1624,
                1631,
                1651,
                1662,
                1669,
                1676,
                1683,
                1690,
                1697,
                1709
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocator.java": [
                73,
                87,
                105,
                119,
                124,
                161,
                206,
                217,
                228,
                233
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocatorUtils.java": [
                79,
                80,
                81,
                92,
                94,
                95,
                143,
                144,
                159,
                201,
                202,
                223,
                237,
                248,
                274,
                277,
                278,
                290,
                315,
                328,
                341,
                343,
                355,
                378,
                392,
                402,
                403,
                414,
                416,
                447,
                450,
                464,
                499,
                500,
                502,
                520,
                522,
                541,
                552,
                558,
                571,
                574,
                579,
                581,
                591,
                611
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestFileSystemLocationStrategy.java": [
                50,
                51,
                56
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestHomeDirectoryLocationStrategy.java": [
                68,
                80,
                93,
                94,
                97,
                98,
                110,
                113,
                123,
                124,
                126,
                129,
                130,
                142,
                143,
                145,
                146,
                157,
                159
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestProvidedURLLocationStrategy.java": [
                51,
                53,
                54,
                65,
                67
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java": [
                80,
                99,
                122,
                125,
                132,
                135,
                146,
                148,
                153,
                160,
                168,
                185,
                187,
                192,
                199,
                205,
                226,
                230,
                241,
                249,
                256,
                259,
                262,
                265,
                268,
                273,
                274,
                280,
                281,
                285,
                307,
                314,
                330,
                332,
                354,
                355,
                360,
                362,
                375,
                376,
                381,
                383,
                393,
                441
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfigurationEvents.java": [
                43,
                47
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListParser.java": [
                58,
                74
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java": [
                81,
                93,
                134,
                150,
                151,
                171,
                175,
                187,
                189,
                194,
                201,
                209,
                219,
                221,
                226,
                233,
                239,
                253,
                280,
                283,
                286,
                289,
                292,
                297,
                298,
                304,
                305,
                309,
                331,
                338,
                352,
                353,
                358,
                360,
                373,
                374,
                379,
                381,
                391,
                392,
                404,
                417,
                441,
                453,
                454,
                456,
                471,
                474,
                476,
                477,
                481,
                493,
                508,
                527,
                533
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfigurationEvents.java": [
                43,
                47
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java": [
                77,
                80,
                103,
                116,
                134,
                135,
                151,
                158,
                175,
                176,
                191,
                193,
                206
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java": [
                49,
                50,
                61,
                71,
                82,
                92,
                97,
                109,
                115,
                131,
                136,
                148,
                154,
                170,
                174,
                188,
                200,
                201,
                206,
                227,
                239
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestPeriodicReloadingTrigger.java": [
                79,
                110,
                121,
                154,
                167,
                170,
                192,
                196,
                209,
                214
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestReloadingController.java": [
                85,
                98,
                119,
                120,
                121,
                125,
                130,
                145,
                149,
                163,
                167,
                183
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestVFSFileHandlerReloadingDetector.java": [
                66,
                68,
                80,
                82,
                86,
                97,
                98,
                101,
                113,
                128,
                135,
                155,
                176
            ],
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertiesFactoryBean.java": [
                70,
                72,
                75,
                76,
                84,
                100,
                116,
                119,
                137,
                142,
                151,
                154,
                165,
                170
            ],
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertySource.java": [
                59,
                61,
                65,
                75
            ],
            "src/test/java/org/apache/commons/configuration2/sync/TestReadWriteSynchronizer.java": [
                44,
                45,
                49,
                61,
                85,
                86,
                87,
                91,
                98,
                106,
                110,
                127,
                130,
                160,
                191,
                207,
                258,
                259,
                289
            ],
            "src/test/java/org/apache/commons/configuration2/test/HsqlDB.java": [
                42,
                67,
                72,
                83,
                88,
                105,
                108,
                110,
                111
            ],
            "src/test/java/org/apache/commons/configuration2/tree/AbstractCombinerTest.java": [
                74,
                76,
                78,
                83
            ],
            "src/test/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandlerTest.java": [
                60,
                63,
                72,
                76,
                83,
                87,
                102,
                113,
                123,
                124,
                136,
                138,
                149,
                150,
                162,
                163,
                164,
                168,
                180,
                181,
                192,
                193,
                205,
                206,
                207,
                208,
                219,
                220,
                221,
                234,
                235,
                249,
                260,
                261,
                272,
                273,
                283,
                284,
                294,
                305,
                306,
                317,
                318,
                329,
                330,
                343,
                344,
                354,
                355,
                374,
                377,
                378,
                385,
                405,
                406,
                418,
                430
            ],
            "src/test/java/org/apache/commons/configuration2/tree/NodeStructureHelper.java": [
                138,
                149,
                161,
                173,
                186,
                207,
                218,
                230,
                243,
                245,
                263,
                265,
                280,
                296,
                297,
                309,
                321,
                333,
                346,
                348,
                361,
                375,
                386,
                388,
                389,
                405,
                414,
                416,
                417,
                434,
                435,
                437,
                442,
                444,
                477,
                494,
                498,
                502,
                504,
                526,
                531,
                533,
                538,
                542,
                580,
                581,
                588,
                603
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java": [
                66,
                112,
                237,
                329,
                331,
                362,
                384,
                399,
                441,
                462,
                482,
                499,
                523,
                548,
                567,
                603,
                604,
                614
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java": [
                165,
                183,
                185,
                186,
                238,
                296,
                337,
                363,
                381,
                398,
                414,
                452,
                532,
                544,
                545,
                559,
                602,
                628,
                633,
                640,
                651,
                653,
                668,
                682,
                685,
                686,
                703,
                704,
                706,
                707,
                730,
                732,
                744,
                746,
                760,
                762,
                763,
                777,
                779,
                780,
                792,
                793,
                797,
                811,
                813,
                825
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngineSymbols.java": [
                64,
                77,
                94,
                119,
                160,
                161
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestImmutableNode.java": [
                64,
                75,
                87,
                97,
                107,
                108,
                112,
                114,
                127,
                128,
                140,
                141,
                144,
                145,
                149,
                160,
                164,
                165,
                168,
                169,
                179,
                181,
                192,
                193,
                195,
                207,
                209,
                219,
                220,
                222,
                232,
                234,
                237,
                241,
                251,
                252,
                256,
                270,
                272,
                285,
                287,
                290,
                293,
                303,
                305,
                316,
                329,
                331,
                343,
                354,
                355,
                368,
                369,
                383,
                384,
                398,
                399,
                401,
                412,
                413,
                415,
                427,
                428,
                430,
                441,
                442,
                444,
                464,
                465,
                466,
                477,
                478,
                481,
                493,
                503,
                504,
                505,
                506,
                517,
                537,
                538,
                541,
                553,
                555,
                558,
                559,
                570,
                571,
                574,
                588,
                589,
                591,
                604,
                606,
                634,
                635,
                636,
                648,
                659,
                665,
                666,
                677,
                678
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java": [
                67,
                68,
                82,
                92,
                104,
                117,
                118,
                122,
                126,
                131,
                135,
                154,
                155,
                158,
                165,
                178,
                179,
                183,
                188,
                193,
                196,
                209,
                210,
                212,
                228,
                229,
                233,
                240,
                251,
                252,
                256,
                264,
                276,
                277,
                280,
                287,
                298,
                300,
                314,
                315,
                316,
                325,
                326,
                328,
                344,
                345,
                347,
                348,
                349,
                363,
                375,
                387,
                399,
                402,
                403,
                404,
                425,
                426,
                427,
                428,
                431,
                444,
                456,
                457,
                460,
                462,
                480,
                481,
                483,
                492,
                493,
                507,
                508,
                510,
                511,
                527,
                539,
                540,
                547,
                559,
                573,
                574,
                575,
                597,
                615,
                627,
                628,
                631,
                656,
                667,
                682,
                691,
                696,
                698,
                701,
                702,
                705,
                719,
                720,
                732,
                742,
                743,
                756,
                766,
                767,
                775,
                787,
                788,
                791,
                794,
                804,
                816,
                817,
                821,
                833,
                843,
                844,
                848,
                851,
                855,
                865,
                877,
                878,
                898,
                899,
                902,
                904,
                915,
                916,
                929,
                930,
                947,
                960,
                961,
                971,
                982,
                983,
                997,
                1008,
                1010,
                1011,
                1044,
                1049,
                1060,
                1063,
                1074
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelReferences.java": [
                61,
                73,
                76,
                77,
                91,
                98,
                99,
                113,
                114,
                115,
                128,
                141,
                156,
                168,
                169,
                170,
                193,
                194,
                204,
                206,
                220,
                224,
                234,
                238,
                253,
                256,
                257,
                271,
                273,
                278
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java": [
                106,
                108,
                143,
                164,
                167,
                179,
                181,
                192,
                205,
                207,
                220,
                222,
                250,
                262,
                275,
                286,
                298,
                310,
                323,
                358,
                363,
                364,
                372,
                374,
                386,
                389,
                399,
                401,
                404,
                414,
                417,
                427,
                429,
                432,
                441,
                446,
                458,
                463,
                474,
                490,
                495,
                508,
                525,
                530,
                545,
                556,
                558,
                559,
                561,
                581,
                587,
                589,
                603,
                618,
                623,
                639,
                643,
                655,
                657,
                663,
                674,
                677,
                690,
                703,
                714,
                737,
                738,
                740,
                751,
                752,
                753,
                754,
                755,
                763,
                765,
                781,
                801,
                808,
                822,
                823,
                824,
                827,
                838,
                843,
                858,
                860,
                865,
                909,
                910,
                911,
                912,
                913,
                914,
                921,
                935,
                936,
                937,
                938,
                939,
                950,
                954,
                957,
                970,
                972,
                997
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestMergeCombiner.java": [
                55,
                71,
                88,
                105,
                121,
                142,
                169,
                173,
                181,
                182
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeAddData.java": [
                57,
                70,
                83,
                85,
                102
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeHandlerDecorator.java": [
                33
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeNameMatchers.java": [
                43,
                53,
                64,
                75,
                91,
                114,
                129
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeSelector.java": [
                73,
                86,
                87,
                99,
                106,
                116,
                118,
                122,
                131,
                142,
                152,
                153,
                155,
                166,
                167,
                178,
                179,
                192,
                193,
                194,
                195,
                197,
                208,
                210,
                212,
                213,
                223,
                236,
                248,
                249
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeTreeWalker.java": [
                41,
                54,
                68,
                110,
                111,
                122,
                123,
                136,
                148,
                170,
                185,
                186,
                197,
                198,
                211,
                212,
                213,
                241,
                291,
                297,
                298,
                304,
                305
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeUpdateData.java": [
                43,
                56,
                67,
                70,
                73,
                86,
                88,
                91,
                102,
                105,
                108,
                120,
                123,
                134,
                136,
                147,
                150
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java": [
                56,
                72,
                89,
                107,
                123,
                161,
                165,
                173,
                174,
                190,
                195,
                203
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestQueryResult.java": [
                65,
                76,
                87,
                100,
                128,
                130,
                148,
                160,
                172,
                174
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeHandler.java": [
                52,
                73,
                74
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeModel.java": [
                57,
                108,
                112,
                126,
                140,
                153,
                167,
                197,
                200,
                260,
                272,
                273,
                277
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestTreeData.java": [
                31,
                33
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestUnionCombiner.java": [
                50,
                68,
                89,
                102,
                124
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/AbstractXPathTest.java": [
                90,
                92,
                104,
                128,
                130,
                145,
                146,
                150,
                153,
                156
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationAttributePointer.java": [
                59,
                61,
                95,
                97,
                120
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationIteratorAttributes.java": [
                59,
                60,
                74,
                78,
                79,
                80,
                95,
                109,
                121,
                133,
                147
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodeIteratorChildren.java": [
                70,
                82,
                95,
                108,
                109,
                122,
                123,
                136,
                137,
                141,
                154,
                155,
                167,
                168,
                181,
                182,
                194,
                197,
                201,
                204,
                206,
                219,
                222,
                228,
                242,
                246,
                251,
                263,
                279,
                280,
                284,
                297,
                298,
                302,
                318,
                320,
                323
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointer.java": [
                58,
                60,
                75,
                76,
                77,
                80,
                113,
                135,
                137,
                144,
                155
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointerFactory.java": [
                66,
                67,
                92,
                95,
                97,
                129,
                140,
                150,
                153,
                165
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathContextFactory.java": [
                51,
                53,
                55,
                58
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngine.java": [
                74,
                76,
                90,
                92,
                105,
                115,
                116,
                117,
                130,
                132,
                133,
                134,
                146,
                147,
                176,
                178,
                181,
                182,
                196,
                199,
                215,
                226,
                237,
                248,
                259,
                270,
                281,
                282,
                283,
                294,
                295,
                296,
                307,
                308,
                309,
                321,
                322,
                323,
                334,
                335,
                336,
                347,
                348,
                349,
                360,
                361,
                371,
                381,
                391,
                402,
                404,
                405,
                463,
                464,
                476,
                477,
                480,
                483,
                501,
                502,
                503,
                506,
                507,
                509,
                521,
                522,
                523,
                524,
                527,
                528,
                530,
                544,
                545,
                546,
                547,
                549,
                561,
                572
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngineInConfig.java": [
                128,
                136,
                139,
                141
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestAppletConfiguration.java": [
                59,
                78,
                86,
                135,
                153
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestServletConfiguration.java": [
                48,
                61
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestServletContextConfiguration.java": [
                54,
                57,
                74,
                88,
                97
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestServletFilterConfiguration.java": [
                42,
                48,
                76,
                87
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestServletRequestConfiguration.java": [
                62,
                65,
                89,
                92,
                104,
                129,
                130,
                132,
                137,
                138
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java": "            ListDelimiterHandler listDelimiterHandler)\n    public void setConversionHandler(ConversionHandler conversionHandler)\n    public void setThrowExceptionOnMissing(boolean throwExceptionOnMissing)\n    public final void setInterpolator(ConfigurationInterpolator ci)\n            Map<String, ? extends Lookup> prefixLookups,\n            Collection<? extends Lookup> defLookups)\n        InterpolatorSpecification spec =\n    public void setPrefixLookups(Map<String, ? extends Lookup> lookups)\n            ConfigurationInterpolator ciOld = getInterpolator();\n            ConfigurationInterpolator ciNew =\n    public void setDefaultLookups(Collection<? extends Lookup> lookups)\n            ConfigurationInterpolator ciOld = getInterpolator();\n            ConfigurationInterpolator ciNew =\n    public void setParentInterpolator(ConfigurationInterpolator parent)\n            ConfigurationInterpolator ciOld = getInterpolator();\n            ConfigurationInterpolator ciNew =\n            ConfigurationDecoder configurationDecoder)\n    protected void cloneInterpolator(AbstractConfiguration orgConfig)\n        ConfigurationInterpolator orgInterpolator = orgConfig.getInterpolator();\n        List<Lookup> defaultLookups = orgInterpolator.getDefaultLookups();\n        Lookup lookup = findConfigurationLookup(orgInterpolator, orgConfig);\n    private Lookup findConfigurationLookup(ConfigurationInterpolator ci)\n    private static Lookup findConfigurationLookup(ConfigurationInterpolator ci,\n            ImmutableConfiguration targetConf)\n        for (Lookup l : ci.getDefaultLookups())\n    public void setLogger(ConfigurationLogger log)\n                    public void onEvent(ConfigurationErrorEvent event)\n        Synchronizer sync = synchronizer;\n    public final void setSynchronizer(Synchronizer synchronizer)\n    public final void lock(LockMode mode)\n    public final void unlock(LockMode mode)\n    protected void beginRead(boolean optimize)\n    protected void beginWrite(boolean optimize)\n    public final void addProperty(String key, Object value)\n    protected void addPropertyInternal(String key, Object value)\n        for (Object obj : getListDelimiterHandler().parse(value))\n    protected String interpolate(String base)\n        Object result = interpolate((Object) base);\n    protected Object interpolate(Object value)\n        ConfigurationInterpolator ci = getInterpolator();\n    public Configuration subset(String prefix)\n    public ImmutableConfiguration immutableSubset(String prefix)\n    public final void setProperty(String key, Object value)\n    protected void setPropertyInternal(String key, Object value)\n    public final void clearProperty(String key)\n            Iterator<String> it = getKeys();\n                String key = it.next();\n                    catch (UnsupportedOperationException usoex)\n    public final Iterator<String> getKeys(String prefix)\n    protected Iterator<String> getKeysInternal(String prefix)\n    public final Object getProperty(String key)\n        for (Iterator<String> keyIt = getKeysInternal(); keyIt.hasNext(); size++)\n    public final boolean containsKey(String key)\n    public Properties getProperties(String key)\n    public Properties getProperties(String key, Properties defaults)\n        String[] tokens = getStringArray(key);\n        Properties props = defaults == null ? new Properties() : new Properties(defaults);\n        for (String token : tokens)\n            int equalSign = token.indexOf('=');\n                String pkey = token.substring(0, equalSign).trim();\n                String pvalue = token.substring(equalSign + 1).trim();\n    public boolean getBoolean(String key)\n        Boolean b = convert(Boolean.class, key, null, true);\n    public boolean getBoolean(String key, boolean defaultValue)\n    public Boolean getBoolean(String key, Boolean defaultValue)\n    public byte getByte(String key)\n        Byte b = convert(Byte.class, key, null, true);\n    public byte getByte(String key, byte defaultValue)\n    public Byte getByte(String key, Byte defaultValue)\n    public double getDouble(String key)\n        Double d = convert(Double.class, key, null, true);\n    public double getDouble(String key, double defaultValue)\n    public Double getDouble(String key, Double defaultValue)\n    public float getFloat(String key)\n        Float f = convert(Float.class, key, null, true);\n    public float getFloat(String key, float defaultValue)\n    public Float getFloat(String key, Float defaultValue)\n    public int getInt(String key)\n        Integer i = convert(Integer.class, key, null, true);\n    public int getInt(String key, int defaultValue)\n    public Integer getInteger(String key, Integer defaultValue)\n    public long getLong(String key)\n        Long l = convert(Long.class, key, null, true);\n    public long getLong(String key, long defaultValue)\n    public Long getLong(String key, Long defaultValue)\n    public short getShort(String key)\n        Short s = convert(Short.class, key, null, true);\n    public short getShort(String key, short defaultValue)\n    public Short getShort(String key, Short defaultValue)\n    public BigDecimal getBigDecimal(String key)\n    public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)\n    public BigInteger getBigInteger(String key)\n    public BigInteger getBigInteger(String key, BigInteger defaultValue)\n    public String getString(String key)\n    public String getString(String key, String defaultValue)\n        String result = convert(String.class, key, null, false);\n    public String getEncodedString(String key, ConfigurationDecoder decoder)\n        String value = getString(key);\n    public String getEncodedString(String key)\n        ConfigurationDecoder decoder = getConfigurationDecoder();\n    public String[] getStringArray(String key)\n        String[] result = (String[]) getArray(String.class, key);\n    public List<Object> getList(String key)\n    public List<Object> getList(String key, List<?> defaultValue)\n        Object value = getProperty(key);\n            List<?> l = (List<?>) value;\n            for (Object elem : l)\n    public <T> T get(Class<T> cls, String key)\n    public <T> T get(Class<T> cls, String key, T defaultValue)\n    public Object getArray(Class<?> cls, String key)\n    public Object getArray(Class<?> cls, String key, Object defaultValue)\n    public <T> List<T> getList(Class<T> cls, String key)\n    public <T> List<T> getList(Class<T> cls, String key, List<T> defaultValue)\n        List<T> result = new ArrayList<>();\n    public <T> Collection<T> getCollection(Class<T> cls, String key,\n            Collection<T> target)\n    public <T> Collection<T> getCollection(Class<T> cls, String key,\n            Collection<T> target, Collection<T> defaultValue)\n        Object src = getProperty(key);\n        Collection<T> targetCol =\n    protected boolean isScalarValue(Object value)\n    public void copy(Configuration c)\n                for (Iterator<String> it = c.getKeys(); it.hasNext();)\n                    String key = it.next();\n                    Object value = encodeForCopy(c.getProperty(key));\n    public void append(Configuration c)\n                for (Iterator<String> it = c.getKeys(); it.hasNext();)\n                    String key = it.next();\n                    Object value = encodeForCopy(c.getProperty(key));\n        AbstractConfiguration c = (AbstractConfiguration) ConfigurationUtils\n        for (Iterator<String> it = getKeys(); it.hasNext();)\n            String key = it.next();\n    protected final void initLogger(ConfigurationLogger log)\n    private Object encodeForCopy(Object value)\n    private Object encodeListForCopy(Collection<?> values)\n        List<Object> result = new ArrayList<>(values.size());\n        for (Object value : values)\n    private <T> T getAndConvertProperty(Class<T> cls, String key, T defaultValue)\n        Object value = getProperty(key);\n        catch (ConversionException cex)\n    private <T> T convert(Class<T> cls, String key, T defValue,\n            boolean throwOnMissing)\n        T result = getAndConvertProperty(cls, key, defValue);\n    private Object convertToArray(Class<?> cls, String key, Object defaultValue)\n    private static void checkDefaultValueArray(Class<?> cls, Object defaultValue)\n    private static <T> Collection<T> handleDefaultCollection(Collection<T> target,\n            Collection<T> defaultValue)\n    private static <T> T checkNonNullValue(String key, T value)\n    private static void throwMissingPropertyException(String key)\n",
            "src/main/java/org/apache/commons/configuration2/AbstractHierarchicalConfiguration.java": "    protected AbstractHierarchicalConfiguration(NodeModel<T> nodeModel)\n        NodeHandler<T> nodeHandler = getModel().getNodeHandler();\n    public void setExpressionEngine(ExpressionEngine expressionEngine)\n    protected Object getPropertyInternal(String key)\n        List<QueryResult<T>> results = fetchNodeList(key);\n        NodeHandler<T> handler = getModel().getNodeHandler();\n        List<Object> list = new ArrayList<>();\n        for (QueryResult<T> result : results)\n            Object value = valueFromResult(result, handler);\n    protected void addPropertyInternal(String key, Object obj)\n    protected void addPropertyDirect(String key, Object value)\n    private void addPropertyToModel(String key, Iterable<?> values)\n    public final void addNodes(String key, Collection<? extends T> nodes)\n    protected void addNodesInternal(String key, Collection<? extends T> nodes)\n    protected boolean containsKeyInternal(String key)\n    protected void setPropertyInternal(String key, Object value)\n    public List<QueryResult<T>> resolveKey(T root, String key,\n            NodeHandler<T> handler)\n    public List<T> resolveNodeKey(T root, String key, NodeHandler<T> handler)\n        List<QueryResult<T>> results = resolveKey(root, key, handler);\n        List<T> targetNodes = new LinkedList<>();\n        for (QueryResult<T> result : results)\n    public NodeAddData<T> resolveAddKey(T root, String key,\n            NodeHandler<T> handler)\n    public NodeUpdateData<T> resolveUpdateKey(T root, String key,\n            Object newValue, NodeHandler<T> handler)\n        Iterator<QueryResult<T>> itNodes = fetchNodeList(key).iterator();\n        Iterator<?> itValues = getListDelimiterHandler().parse(newValue).iterator();\n        Map<QueryResult<T>, Object> changedValues =\n    public String nodeKey(T node, Map<T, String> cache, NodeHandler<T> handler)\n        List<T> path = new LinkedList<>();\n        for (T n : path)\n            String currentKey = getExpressionEngine().canonicalKey(n, key, handler);\n    public final void clearTree(String key)\n            Object nodes = clearTreeInternal(key);\n    protected Object clearTreeInternal(String key)\n    protected void clearPropertyDirect(String key)\n        DefinedKeysVisitor visitor = new DefinedKeysVisitor();\n        NodeHandler<T> nodeHandler = getModel().getNodeHandler();\n    protected Iterator<String> getKeysInternal(String prefix)\n        DefinedKeysVisitor visitor = new DefinedKeysVisitor(prefix);\n        List<QueryResult<T>> results = fetchNodeList(prefix);\n        NodeHandler<T> handler = getModel().getNodeHandler();\n        for (QueryResult<T> result : results)\n                for (T c : handler.getChildren(result.getNode()))\n    public final int getMaxIndex(String key)\n    protected int getMaxIndexInternal(String key)\n        catch (CloneNotSupportedException cex)\n    protected List<QueryResult<T>> fetchNodeList(String key)\n        NodeHandler<T> nodeHandler = getModel().getNodeHandler();\n    protected boolean nodeDefined(T node)\n        DefinedVisitor<T> visitor = new DefinedVisitor<>();\n    private Object valueFromResult(QueryResult<T> result, NodeHandler<T> handler)\n        public void visitBeforeChildren(T node, NodeHandler<T> handler)\n        public DefinedKeysVisitor(String prefix)\n        public void visitAfterChildren(T node, NodeHandler<T> handler)\n        public void visitBeforeChildren(T node, NodeHandler<T> handler)\n            String parentKey = parentKeys.isEmpty() ? null\n            String key = getExpressionEngine().nodeKey(node, parentKey, handler);\n        public void handleAttributeKeys(String parentKey, T node,\n                NodeHandler<T> handler)\n            for (String attr : handler.getAttributes(node))\n",
            "src/main/java/org/apache/commons/configuration2/AbstractYAMLBasedConfiguration.java": "            HierarchicalConfiguration<ImmutableNode> c)\n    protected void load(Map<String, Object> map)\n        List<ImmutableNode> roots = constructHierarchy(\"\", map);\n    protected Map<String, Object> constructMap(ImmutableNode node)\n        Map<String, Object> map = new HashMap<>(node.getChildren().size());\n        for (ImmutableNode cNode : node.getChildren())\n            Object value = cNode.getChildren().isEmpty() ? cNode.getValue()\n    private static void addEntry(Map<String, Object> map, String key,\n            Object value)\n        Object oldValue = map.get(key);\n            Collection<Object> values = new ArrayList<>();\n    private static List<ImmutableNode> constructHierarchy(String key,\n            Object elem)\n    private static List<ImmutableNode> parseMap(Map<String, Object> map, String key)\n        ImmutableNode.Builder subtree = new ImmutableNode.Builder().name(key);\n        for (Map.Entry<String, Object> entry : map.entrySet())\n            List<ImmutableNode> children =\n            for (ImmutableNode child : children)\n    private static List<ImmutableNode> parseCollection(Collection<Object> col, String key)\n        List<ImmutableNode> nodes = new ArrayList<>(col.size());\n        for (Object elem : col)\n    static void rethrowException(Exception e) throws ConfigurationException\n",
            "src/main/java/org/apache/commons/configuration2/BaseConfiguration.java": "    protected void addPropertyDirect(String key, Object value)\n        Object previousValue = getPropertyInternal(key);\n            List<Object> list = new ArrayList<>();\n    protected Object getPropertyInternal(String key)\n    protected boolean containsKeyInternal(String key)\n    protected void clearPropertyDirect(String key)\n            BaseConfiguration copy = (BaseConfiguration) super.clone();\n        catch (CloneNotSupportedException cex)\n    private void cloneStore(BaseConfiguration copy)\n        for (Map.Entry<String, Object> e : store.entrySet())\n",
            "src/main/java/org/apache/commons/configuration2/BaseConfigurationXMLReader.java": "    public BaseConfigurationXMLReader(Configuration conf)\n    public void setConfiguration(Configuration conf)\n        protected void elementStart(String name, Object value)\n        protected void elementEnd(String name)\n",
            "src/main/java/org/apache/commons/configuration2/BaseHierarchicalConfiguration.java": "    public BaseHierarchicalConfiguration(HierarchicalConfiguration<ImmutableNode> c)\n    protected BaseHierarchicalConfiguration(NodeModel<ImmutableNode> model)\n    public Configuration subset(String prefix)\n            List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);\n            BaseHierarchicalConfiguration result =\n                        protected Object interpolate(Object value)\n            Collection<QueryResult<ImmutableNode>> results)\n        ImmutableNode.Builder builder = new ImmutableNode.Builder();\n        for (QueryResult<ImmutableNode> result : results)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(String key,\n            boolean supportUpdates)\n    protected NodeSelector getSubConfigurationNodeSelector(String key)\n            NodeSelector selector, InMemoryNodeModelSupport parentModelSupport)\n        SubnodeConfiguration subConfig =\n    protected void initSubConfigurationForThisParent(SubnodeConfiguration subConfig)\n            String key)\n        NodeSelector selector = getSubConfigurationNodeSelector(key);\n            InMemoryNodeModelSupport parentModelSupport,\n            Collection<NodeSelector> selectors)\n        List<HierarchicalConfiguration<ImmutableNode>> configs =\n        for (NodeSelector selector : selectors)\n            String key)\n        List<ImmutableNode> targetNodes = fetchFilteredNodeResults(key);\n        int size = targetNodes.size();\n        BaseHierarchicalConfiguration sub =\n            ImmutableNode node)\n        BaseHierarchicalConfiguration sub =\n    private List<ImmutableNode> fetchFilteredNodeResults(String key)\n        NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();\n            String key, boolean supportUpdates)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(String key)\n            String key)\n            String key)\n        List<HierarchicalConfiguration<ImmutableNode>> results =\n        for (ImmutableNode node : nodes)\n            BaseHierarchicalConfiguration sub =\n            String key, boolean supportUpdates)\n        Collection<NodeSelector> selectors =\n            String key)\n            String key)\n        ImmutableNode parent = nodes.get(0);\n        List<HierarchicalConfiguration<ImmutableNode>> subs =\n        for (ImmutableNode node : parent.getChildren())\n            String key, boolean supportUpdates)\n        InMemoryNodeModel parentModel = getSubConfigurationParentModel();\n            String key)\n    protected void subnodeConfigurationChanged(ConfigurationEvent event)\n    private void initSubConfiguration(BaseHierarchicalConfiguration sub)\n            public void onEvent(ConfigurationEvent event)\n        InterpolatedVisitor visitor = new InterpolatedVisitor();\n        NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();\n        BaseHierarchicalConfiguration c =\n            List<? extends HierarchicalConfiguration<?>> subs)\n        List<ImmutableHierarchicalConfiguration> res =\n        for (HierarchicalConfiguration<?> sub : subs)\n            HierarchicalConfiguration<ImmutableNode> c)\n        ImmutableNode root = (c != null) ? obtainRootNode(c) : null;\n            HierarchicalConfiguration<ImmutableNode> c)\n        public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler)\n            ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;\n        private void updateNode(ImmutableNode node,\n                ReferenceNodeHandler refHandler)\n            Object reference = refHandler.getReference(node);\n        private void insertNewChildNodes(ImmutableNode node,\n                ReferenceNodeHandler refHandler)\n            Collection<ImmutableNode> subNodes =\n            Iterator<ImmutableNode> children = subNodes.iterator();\n                    List<ImmutableNode> newNodes =\n                    ImmutableNode sibling2 =\n                    for (ImmutableNode insertNode : newNodes)\n        public void visitBeforeChildren(ImmutableNode node,\n                NodeHandler<ImmutableNode> handler)\n                ImmutableNode.Builder builder =\n        public void visitAfterChildren(ImmutableNode node,\n                NodeHandler<ImmutableNode> handler)\n                ImmutableNode newNode = pop().create();\n        private void push(ImmutableNode.Builder builder)\n        private boolean isLeafNode(ImmutableNode node,\n                NodeHandler<ImmutableNode> handler)\n        private void handleLeafNode(ImmutableNode node,\n                NodeHandler<ImmutableNode> handler)\n            Object value = interpolate(node.getValue());\n            Map<String, Object> interpolatedAttributes =\n            boolean attributeChanged =\n            ImmutableNode newNode =\n        private void storeInterpolatedNode(ImmutableNode node)\n        private boolean interpolateAttributes(ImmutableNode node,\n                NodeHandler<ImmutableNode> handler,\n                Map<String, Object> interpolatedAttributes)\n            for (String attr : handler.getAttributes(node))\n                Object attrValue =\n        private Map<String, Object> interpolateAttributes(ImmutableNode node,\n                NodeHandler<ImmutableNode> handler)\n            Map<String, Object> attributes = new HashMap<>();\n        private boolean valueChanged(Object interpolatedValue, Object value)\n",
            "src/main/java/org/apache/commons/configuration2/CombinedConfiguration.java": "    public CombinedConfiguration(NodeCombiner comb)\n    public void setNodeCombiner(NodeCombiner nodeCombiner)\n            ExpressionEngine conversionExpressionEngine)\n    public void addConfiguration(Configuration config, String name,\n            String at)\n            ConfigData cd = new ConfigData(config, name, at);\n    public void addConfiguration(Configuration config, String name)\n    public void addConfiguration(Configuration config)\n    public Configuration getConfiguration(int index)\n            ConfigData cd = configurations.get(index);\n    public Configuration getConfiguration(String name)\n            List<Configuration> list =\n            for (ConfigData cd : configurations)\n            List<String> list = new ArrayList<>(getNumberOfConfigurationsInternal());\n            for (ConfigData cd : configurations)\n    public boolean removeConfiguration(Configuration config)\n    public Configuration removeConfigurationAt(int index)\n        ConfigData cd = configurations.remove(index);\n    public Configuration removeConfiguration(String name)\n        Configuration conf = getConfiguration(name);\n    public void onEvent(ConfigurationEvent event)\n            CombinedConfiguration copy = (CombinedConfiguration) super.clone();\n            for (ConfigData cd : configurations)\n    public Configuration getSource(String key)\n        Set<Configuration> sources = getSources(key);\n        Iterator<Configuration> iterator = sources.iterator();\n        Configuration source = iterator.next();\n    public Set<Configuration> getSources(String key)\n            List<QueryResult<ImmutableNode>> results = fetchNodeList(key);\n            Set<Configuration> sources = new HashSet<>();\n            for (QueryResult<ImmutableNode> result : results)\n                Set<Configuration> resultSources =\n    protected void beginRead(boolean optimize)\n    protected void beginWrite(boolean optimize)\n        catch (RuntimeException rex)\n        Iterator<ConfigData> it = configurations.iterator();\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            PrintStream stream = new PrintStream(os);\n    private Set<Configuration> findSourceConfigurations(ImmutableNode node)\n        Set<Configuration> result = new HashSet<>();\n        FindNodeVisitor<ImmutableNode> visitor =\n        for (ConfigData cd : configurations)\n    private void registerListenerAt(Configuration configuration)\n    private void unregisterListenerAt(Configuration configuration)\n            for (ConfigData child : configurations)\n        public ConfigData(Configuration config, String n, String at)\n            ImmutableNode configRoot = getRootNodeOfConfiguration();\n        private ImmutableNode prependAtPath(ImmutableNode node)\n            ImmutableNode.Builder pathBuilder = new ImmutableNode.Builder();\n            Iterator<String> pathIterator = atPath.iterator();\n        private void prependAtPathComponent(ImmutableNode.Builder builder,\n                String currentComponent, Iterator<String> components,\n                ImmutableNode orgRoot)\n                ImmutableNode.Builder childBuilder =\n                ImmutableNode root =\n        private Collection<String> parseAt(String at)\n            Collection<String> result = new ArrayList<>();\n            DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(\n",
            "src/main/java/org/apache/commons/configuration2/CompositeConfiguration.java": "    public CompositeConfiguration(Configuration inMemoryConfiguration)\n    public CompositeConfiguration(Collection<? extends Configuration> configurations)\n    public CompositeConfiguration(Configuration inMemoryConfiguration,\n            Collection<? extends Configuration> configurations)\n            for (Configuration c : configurations)\n    public void addConfiguration(Configuration config)\n    public void addConfiguration(Configuration config, boolean asInMemory)\n    public void addConfigurationFirst(Configuration config)\n    public void addConfigurationFirst(Configuration config, boolean asInMemory)\n    public void removeConfiguration(Configuration config)\n    protected void addPropertyDirect(String key, Object token)\n    protected Object getPropertyInternal(String key)\n        for (Configuration config : configList)\n        Set<String> keys = new LinkedHashSet<>();\n        for (Configuration config : configList)\n            for (Iterator<String> it = config.getKeys(); it.hasNext();)\n    protected Iterator<String> getKeysInternal(String key)\n        Set<String> keys = new LinkedHashSet<>();\n        for (Configuration config : configList)\n            for (Iterator<String> it = config.getKeys(key); it.hasNext();)\n        for (Configuration config : configList)\n    protected void clearPropertyDirect(String key)\n        for (Configuration config : configList)\n    protected boolean containsKeyInternal(String key)\n        for (Configuration config : configList)\n    public List<Object> getList(String key, List<?> defaultValue)\n        List<Object> list = new ArrayList<>();\n        Iterator<Configuration> it = configList.iterator();\n            Configuration config = it.next();\n        ListIterator<Object> lit = list.listIterator();\n    public String[] getStringArray(String key)\n        List<Object> list = getList(key);\n        String[] tokens = new String[list.size()];\n    public Configuration getConfiguration(int index)\n            CompositeConfiguration copy = (CompositeConfiguration) super\n            for (Configuration config : configList)\n        catch (CloneNotSupportedException cnex)\n            ListDelimiterHandler listDelimiterHandler)\n    public Configuration getSource(String key)\n        for (Configuration conf : configList)\n    private void replaceInMemoryConfiguration(Configuration config)\n    private  void appendListProperty(List<Object> dest, Configuration config,\n            String key)\n        Object value = interpolate(config.getProperty(key));\n                Collection<?> col = (Collection<?>) value;\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java": "    public static Configuration getConfiguration(Properties props)\n    public static Properties getProperties(ImmutableConfiguration config)\n        Properties props = new Properties();\n        for (Iterator<String> keys = config.getKeys(); keys.hasNext();)\n            String key = keys.next();\n            List<Object> list = config.getList(key);\n                catch (Exception ex)\n    public static Properties getProperties(Configuration config)\n    public static Map<Object, Object> getMap(Configuration config)\n    private static String listToString(List<?> list)\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationLookup.java": "    public ConfigurationLookup(ImmutableConfiguration config)\n    public Object lookup(String variable)\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationMap.java": "    public ConfigurationMap(Configuration configuration)\n    public Object put(Object key, Object value)\n        String strKey = String.valueOf(key);\n        Object old = configuration.getProperty(strKey);\n    public Object get(Object key)\n            private Entry(Object key)\n            public Object setValue(Object value)\n                Object old = getValue();\n        ConfigurationSet(Configuration configuration)\n            for (Iterator<String> iterator = configuration.getKeys(); iterator.hasNext();)\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java": "        public <T extends Event> void addEventListener(EventType<T> eventType,\n                EventListener<? super T> listener)\n                EventType<T> eventType, EventListener<? super T> listener)\n    public static void dump(ImmutableConfiguration configuration, PrintStream out)\n    public static void dump(Configuration configuration, PrintStream out)\n    public static void dump(ImmutableConfiguration configuration, PrintWriter out)\n        for (Iterator<String> keys = configuration.getKeys(); keys.hasNext();)\n            String key = keys.next();\n            Object value = configuration.getProperty(key);\n    public static void dump(Configuration configuration, PrintWriter out)\n    public static String toString(ImmutableConfiguration configuration)\n        StringWriter writer = new StringWriter();\n    public static String toString(Configuration configuration)\n    public static void copy(ImmutableConfiguration source, Configuration target)\n        for (Iterator<String> keys = source.getKeys(); keys.hasNext();)\n            String key = keys.next();\n    public static void copy(Configuration source, Configuration target)\n    public static void append(ImmutableConfiguration source, Configuration target)\n        for (Iterator<String> keys = source.getKeys(); keys.hasNext();)\n            String key = keys.next();\n    public static void append(Configuration source, Configuration target)\n            Configuration conf)\n            Configuration conf, ExpressionEngine engine)\n            HierarchicalConfiguration<?> hc = (HierarchicalConfiguration<?>) conf;\n        BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();\n    public static Configuration cloneConfiguration(Configuration config)\n        catch (CloneNotSupportedException cnex)\n    public static Object cloneIfPossible(Object obj)\n        catch (Exception ex)\n    static Object clone(Object obj) throws CloneNotSupportedException\n                Method m = obj.getClass().getMethod(METHOD_CLONE);\n            catch (NoSuchMethodException nmex)\n            catch (IllegalAccessException iaex)\n            catch (InvocationTargetException itex)\n    public static Synchronizer cloneSynchronizer(Synchronizer sync)\n        catch (Exception ex)\n        catch (CloneNotSupportedException cnex)\n    public static void enableRuntimeExceptions(Configuration src)\n                    public void onEvent(ConfigurationErrorEvent event)\n    public static Class<?> loadClass(String clsName)\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        catch (ClassNotFoundException cnfex)\n    public static Class<?> loadClassNoEx(String clsName)\n        catch (ClassNotFoundException cnfex)\n            Configuration c)\n            HierarchicalConfiguration<?> c)\n            Class<?>[] ifcs, Configuration c)\n    public static EventSource asEventSource(Object obj,\n            boolean mockIfUnsupported)\n",
            "src/main/java/org/apache/commons/configuration2/ConfigurationXMLReader.java": "    public void parse(String systemId) throws IOException, SAXException\n    public void parse(InputSource input) throws IOException, SAXException\n    public boolean getFeature(String name)\n    public void setFeature(String name, boolean value)\n    public void setContentHandler(ContentHandler handler)\n    public void setDTDHandler(DTDHandler handler)\n    public void setEntityResolver(EntityResolver resolver)\n    public void setErrorHandler(ErrorHandler handler)\n    public Object getProperty(String name)\n    public void setProperty(String name, Object value)\n    public void setRootName(String string)\n    protected void fireElementStart(String name, Attributes attribs)\n                Attributes at = (attribs == null) ? EMPTY_ATTRS : attribs;\n            catch (SAXException ex)\n    protected void fireElementEnd(String name)\n            catch (SAXException ex)\n    protected void fireCharacters(String text)\n                char[] ch = text.toCharArray();\n            catch (SAXException ex)\n",
            "src/main/java/org/apache/commons/configuration2/DataConfiguration.java": "    public DataConfiguration(Configuration configuration)\n    protected Object getPropertyInternal(String key)\n    protected void addPropertyInternal(String key, Object obj)\n    protected void addPropertyDirect(String key, Object value)\n    protected boolean containsKeyInternal(String key)\n    protected void clearPropertyDirect(String key)\n    protected void setPropertyInternal(String key, Object value)\n    public List<Boolean> getBooleanList(String key)\n    public List<Boolean> getBooleanList(String key, List<Boolean> defaultValue)\n    public boolean[] getBooleanArray(String key)\n    public boolean[] getBooleanArray(String key, boolean[] defaultValue)\n    public List<Byte> getByteList(String key)\n    public List<Byte> getByteList(String key, List<Byte> defaultValue)\n    public byte[] getByteArray(String key)\n    public byte[] getByteArray(String key, byte[] defaultValue)\n    public List<Short> getShortList(String key)\n    public List<Short> getShortList(String key, List<Short> defaultValue)\n    public short[] getShortArray(String key)\n    public short[] getShortArray(String key, short[] defaultValue)\n    public List<Integer> getIntegerList(String key)\n    public List<Integer> getIntegerList(String key, List<Integer> defaultValue)\n    public int[] getIntArray(String key)\n    public int[] getIntArray(String key, int[] defaultValue)\n    public List<Long> getLongList(String key)\n    public List<Long> getLongList(String key, List<Long> defaultValue)\n    public long[] getLongArray(String key)\n    public long[] getLongArray(String key, long[] defaultValue)\n    public List<Float> getFloatList(String key)\n    public List<Float> getFloatList(String key, List<Float> defaultValue)\n    public float[] getFloatArray(String key)\n    public float[] getFloatArray(String key, float[] defaultValue)\n    public List<Double> getDoubleList(String key)\n    public List<Double> getDoubleList(String key, List<Double> defaultValue)\n    public double[] getDoubleArray(String key)\n    public double[] getDoubleArray(String key, double[] defaultValue)\n    public List<BigInteger> getBigIntegerList(String key)\n    public List<BigInteger> getBigIntegerList(String key, List<BigInteger> defaultValue)\n    public BigInteger[] getBigIntegerArray(String key)\n    public BigInteger[] getBigIntegerArray(String key, BigInteger[] defaultValue)\n    public List<BigDecimal> getBigDecimalList(String key)\n    public List<BigDecimal> getBigDecimalList(String key, List<BigDecimal> defaultValue)\n    public BigDecimal[] getBigDecimalArray(String key)\n    public BigDecimal[] getBigDecimalArray(String key, BigDecimal[] defaultValue)\n    public URI getURI(String key)\n    public URI getURI(String key, URI defaultValue)\n    public URI[] getURIArray(String key)\n    public URI[] getURIArray(String key, URI[] defaultValue)\n    public List<URI> getURIList(String key)\n    public List<URI> getURIList(String key, List<URI> defaultValue)\n    public URL getURL(String key)\n    public URL getURL(String key, URL defaultValue)\n    public List<URL> getURLList(String key)\n    public List<URL> getURLList(String key, List<URL> defaultValue)\n    public URL[] getURLArray(String key)\n    public URL[] getURLArray(String key, URL[] defaultValue)\n    public Date getDate(String key)\n    public Date getDate(String key, String format)\n        Date value = getDate(key, null, format);\n    public Date getDate(String key, Date defaultValue)\n    public Date getDate(String key, Date defaultValue, String format)\n    public List<Date> getDateList(String key)\n    public List<Date> getDateList(String key, String format)\n    public List<Date> getDateList(String key, List<Date> defaultValue)\n    public List<Date> getDateList(String key, List<Date> defaultValue, String format)\n    public Date[] getDateArray(String key)\n    public Date[] getDateArray(String key, String format)\n    public Date[] getDateArray(String key, Date[] defaultValue)\n    public Date[] getDateArray(String key, Date[] defaultValue, String format)\n    public Calendar getCalendar(String key)\n    public Calendar getCalendar(String key, String format)\n        Calendar value = getCalendar(key, null, format);\n    public Calendar getCalendar(String key, Calendar defaultValue)\n    public Calendar getCalendar(String key, Calendar defaultValue, String format)\n    public List<Calendar> getCalendarList(String key)\n    public List<Calendar> getCalendarList(String key, String format)\n    public List<Calendar> getCalendarList(String key, List<Calendar> defaultValue)\n    public List<Calendar> getCalendarList(String key, List<Calendar> defaultValue, String format)\n    public Calendar[] getCalendarArray(String key)\n    public Calendar[] getCalendarArray(String key, String format)\n    public Calendar[] getCalendarArray(String key, Calendar[] defaultValue)\n    public Calendar[] getCalendarArray(String key, Calendar[] defaultValue, String format)\n    public Locale getLocale(String key)\n    public Locale getLocale(String key, Locale defaultValue)\n    public List<Locale> getLocaleList(String key)\n    public List<Locale> getLocaleList(String key, List<Locale> defaultValue)\n    public Locale[] getLocaleArray(String key)\n    public Locale[] getLocaleArray(String key, Locale[] defaultValue)\n    public Color getColor(String key)\n    public Color getColor(String key, Color defaultValue)\n    public List<Color> getColorList(String key)\n    public List<Color> getColorList(String key, List<Color> defaultValue)\n    public Color[] getColorArray(String key)\n    public Color[] getColorArray(String key, Color[] defaultValue)\n        ConversionHandler handler = super.getConversionHandler();\n            DefaultConversionHandler orgHandler =\n",
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": "    public void setDataSource(DataSource dataSource)\n    public void setTable(String table)\n    public void setConfigurationNameColumn(String configurationNameColumn)\n    public void setKeyColumn(String keyColumn)\n    public void setValueColumn(String valueColumn)\n    public void setConfigurationName(String configurationName)\n    public void setAutoCommit(boolean autoCommit)\n        JdbcOperation<Object> op =\n                ResultSet rs =\n                List<Object> results = new ArrayList<>();\n                    Object value = extractPropertyValue(rs);\n                    for (Object o : getListDelimiterHandler().parse(value))\n                StringBuilder query = new StringBuilder(\"INSERT INTO \");\n                PreparedStatement pstmt = initStatement(query.toString(),\n    protected void addPropertyInternal(String key, Object value)\n        ListDelimiterHandler oldHandler = getListDelimiterHandler();\n        JdbcOperation<Integer> op =\n                ResultSet rs = openResultSet(String.format(\n        Integer count = op.execute();\n        JdbcOperation<Boolean> op =\n                ResultSet rs = openResultSet(\n        Boolean result = op.execute();\n                PreparedStatement ps = initStatement(String.format(\n                ResultSet rs = openResultSet(String.format(\n    protected void close(Connection conn, Statement stmt, ResultSet rs)\n        catch (SQLException e)\n        catch (SQLException e)\n        catch (SQLException e)\n    protected Object extractPropertyValue(ResultSet rs) throws SQLException\n    private static Object convertClob(Clob clob) throws SQLException\n        int len = (int) clob.length();\n                EventType<? extends ConfigurationErrorEvent> errEvType,\n                EventType<?> opType, String errPropName, Object errPropVal)\n            catch (SQLException e)\n        protected PreparedStatement createStatement(String sql, boolean nameCol)\n                StringBuilder buf = new StringBuilder(sql);\n        protected PreparedStatement initStatement(String sql, boolean nameCol,\n                Object... params) throws SQLException\n            PreparedStatement ps = createStatement(sql, nameCol);\n            for (Object param : params)\n        protected ResultSet openResultSet(String sql, boolean nameCol,\n                Object... params) throws SQLException\n",
            "src/main/java/org/apache/commons/configuration2/DynamicCombinedConfiguration.java": "    public DynamicCombinedConfiguration(NodeCombiner comb)\n    public void setKeyPattern(String pattern)\n    public void setLoggerName(String name)\n    public void setNodeCombiner(NodeCombiner nodeCombiner)\n    public void addConfiguration(Configuration config, String name,\n            String at)\n            ConfigData cd = new ConfigData(config, name, at);\n    public Configuration getConfiguration(int index)\n            ConfigData cd = configurations.get(index);\n    public Configuration getConfiguration(String name)\n    public Configuration removeConfiguration(String name)\n        Configuration conf = getConfiguration(name);\n    public boolean removeConfiguration(Configuration config)\n    public Configuration removeConfigurationAt(int index)\n            ConfigData cd = configurations.remove(index);\n    protected void addPropertyInternal(String key, Object value)\n    protected void clearPropertyDirect(String key)\n    protected boolean containsKeyInternal(String key)\n    public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)\n    public BigDecimal getBigDecimal(String key)\n    public BigInteger getBigInteger(String key, BigInteger defaultValue)\n    public BigInteger getBigInteger(String key)\n    public boolean getBoolean(String key, boolean defaultValue)\n    public Boolean getBoolean(String key, Boolean defaultValue)\n    public boolean getBoolean(String key)\n    public byte getByte(String key, byte defaultValue)\n    public Byte getByte(String key, Byte defaultValue)\n    public byte getByte(String key)\n    public double getDouble(String key, double defaultValue)\n    public Double getDouble(String key, Double defaultValue)\n    public double getDouble(String key)\n    public float getFloat(String key, float defaultValue)\n    public Float getFloat(String key, Float defaultValue)\n    public float getFloat(String key)\n    public int getInt(String key, int defaultValue)\n    public int getInt(String key)\n    public Integer getInteger(String key, Integer defaultValue)\n    protected Iterator<String> getKeysInternal(String prefix)\n    public List<Object> getList(String key, List<?> defaultValue)\n    public List<Object> getList(String key)\n    public long getLong(String key, long defaultValue)\n    public Long getLong(String key, Long defaultValue)\n    public long getLong(String key)\n    public Properties getProperties(String key)\n    protected Object getPropertyInternal(String key)\n    public short getShort(String key, short defaultValue)\n    public Short getShort(String key, Short defaultValue)\n    public short getShort(String key)\n    public String getString(String key, String defaultValue)\n    public String getString(String key)\n    public String[] getStringArray(String key)\n    protected void setPropertyInternal(String key, Object value)\n    public Configuration subset(String prefix)\n    public void setExpressionEngine(ExpressionEngine expressionEngine)\n    protected void addNodesInternal(String key, Collection<? extends ImmutableNode> nodes)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(String key, boolean supportUpdates)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(String key)\n    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(String key)\n    protected Object clearTreeInternal(String key)\n    protected int getMaxIndexInternal(String key)\n    public Configuration getSource(String key)\n        for (CombinedConfiguration cc : configs.values())\n    public <T extends Event> void addEventListener(EventType<T> eventType,\n            EventListener<? super T> listener)\n        for (CombinedConfiguration cc : configs.values())\n            EventType<T> eventType, EventListener<? super T> listener)\n        for (CombinedConfiguration cc : configs.values())\n        for (CombinedConfiguration cc : configs.values())\n        for (CombinedConfiguration cc : configs.values())\n    protected void beginRead(boolean optimize)\n        CurrentConfigHolder cch = ensureCurrentConfiguration();\n    protected void beginWrite(boolean optimize)\n        CurrentConfigHolder cch = ensureCurrentConfiguration();\n        CurrentConfigHolder cch = CURRENT_CONFIG.get();\n    private void initChildConfiguration(CombinedConfiguration config)\n        for (ConfigData data : configurations)\n            protected Lookup fetchLookupForPrefix(String prefix)\n            String key = String.valueOf(localSubst.interpolate(keyPattern));\n        public ConfigData(Configuration config, String n, String at)\n        public CurrentConfigHolder(String curKey)\n                CombinedConfiguration currentConfiguration)\n",
            "src/main/java/org/apache/commons/configuration2/EnvironmentConfiguration.java": "    protected void addPropertyDirect(String key, Object value)\n    protected void clearPropertyDirect(String key)\n",
            "src/main/java/org/apache/commons/configuration2/FindNodeVisitor.java": "    public FindNodeVisitor(T node)\n    public void visitBeforeChildren(T node, NodeHandler<T> handler)\n",
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationConverter.java": "    public void process(Configuration config)\n            DefaultExpressionEngine exprEngine = DefaultExpressionEngine.INSTANCE;\n            DefaultConfigurationKey keyEmpty =\n            Set<String> keySet = new HashSet<>();\n            for (Iterator<String> it = config.getKeys(); it.hasNext();)\n                String key = it.next();\n                DefaultConfigurationKey keyAct =\n                String elem = openElements(keyLast, keyAct, config, keySet);\n    protected void closeElements(DefaultConfigurationKey keyLast, DefaultConfigurationKey keyAct)\n        DefaultConfigurationKey keyDiff = keyAct.differenceKey(keyLast);\n        Iterator<String> it = reverseIterator(keyDiff);\n    protected Iterator<String> reverseIterator(DefaultConfigurationKey key)\n        List<String> list = new ArrayList<>();\n        for (DefaultConfigurationKey.KeyIterator it = key.iterator(); it.hasNext();)\n    protected String openElements(DefaultConfigurationKey keyLast, DefaultConfigurationKey keyAct,\n            Configuration config, Set<String> keySet)\n        DefaultConfigurationKey.KeyIterator it = keyLast.differenceKey(keyAct).iterator();\n        DefaultConfigurationKey k = keyLast.commonKey(keyAct);\n    protected void fireValue(String name, Object value)\n            Collection<?> valueCol = (Collection<?>) value;\n            for (Object v : valueCol)\n",
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationXMLReader.java": "            HierarchicalConfiguration<T> config)\n    public void setConfiguration(HierarchicalConfiguration<T> config)\n        NodeHandler<T> nodeHandler =\n        public void visitAfterChildren(T node, NodeHandler<T> handler)\n        public void visitBeforeChildren(T node, NodeHandler<T> handler)\n            Object value = handler.getValue(node);\n        protected Attributes fetchAttributes(T node, NodeHandler<T> handler)\n            AttributesImpl attrs = new AttributesImpl();\n            for (String attr : handler.getAttributes(node))\n                Object value = handler.getAttributeValue(node, attr);\n        private String nodeName(T node, NodeHandler<T> handler)\n            String nodeName = handler.nodeName(node);\n",
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java": "    public INIConfiguration(HierarchicalConfiguration<ImmutableNode> c)\n    public void setSeparatorUsedInOutput(String separator)\n    public void write(Writer writer) throws ConfigurationException, IOException\n        PrintWriter out = new PrintWriter(writer);\n            for (ImmutableNode node : getModel().getNodeHandler().getRootNode()\n                    for (ImmutableNode child : node.getChildren())\n    public void read(Reader in) throws ConfigurationException, IOException\n        BufferedReader bufferedReader = new BufferedReader(in);\n        Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();\n        ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n        ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);\n            ImmutableNode.Builder rootBuilder,\n            Map<String, ImmutableNode.Builder> sectionBuilders)\n        for (Map.Entry<String, ImmutableNode.Builder> e : sectionBuilders\n    private void createNodeBuilders(BufferedReader in,\n            ImmutableNode.Builder rootBuilder,\n            Map<String, ImmutableNode.Builder> sectionBuilders)\n                    String section = line.substring(1, line.length() - 1);\n                    int index = findSeparator(line);\n    private void createValueNodes(ImmutableNode.Builder sectionBuilder,\n            String key, String value)\n        Collection<String> values =\n        for (String v : values)\n    private void writeProperty(PrintWriter out, String key, Object value, String separator)\n    private static String parseValue(String val, BufferedReader reader) throws IOException\n        StringBuilder propertyValue = new StringBuilder();\n            boolean quoted = value.startsWith(\"\\\"\") || value.startsWith(\"'\");\n            char quote = quoted ? value.charAt(0) : 0;\n            StringBuilder result = new StringBuilder();\n                char c = value.charAt(i);\n    private static boolean lineContinues(String line)\n        String s = line.trim();\n    private static boolean lineContinues(String line, int pos)\n    private static boolean isCommentChar(char c)\n    private static int findSeparator(String line)\n    private static int findFirstOccurrence(String line, String separators)\n            char sep = separators.charAt(i);\n            int pos = line.indexOf(sep);\n    private static int findSeparatorBeforeQuote(String line, int quoteIndex)\n    private String escapeValue(String value)\n    private static String escapeComments(String value)\n            char c = COMMENT_CHARS.charAt(i);\n    protected boolean isCommentLine(String line)\n    protected boolean isSectionLine(String line)\n        Set<String> sections = new LinkedHashSet<>();\n            for (ImmutableNode node : getModel().getNodeHandler().getRootNode()\n    public SubnodeConfiguration getSection(String name)\n        catch (ConfigurationRuntimeException iex)\n            InMemoryNodeModel parentModel = getSubConfigurationParentModel();\n            NodeSelector selector = parentModel.trackChildNodeWithCreation(null, name, this);\n        InMemoryNodeModel parentModel = getSubConfigurationParentModel();\n        NodeSelector selector = new NodeSelector(null); // selects parent\n        GlobalSectionNodeModel model =\n        SubnodeConfiguration sub = new SubnodeConfiguration(this, model);\n    private static boolean isSectionNode(ImmutableNode node)\n        public GlobalSectionNodeModel(InMemoryNodeModelSupport modelSupport,\n                NodeSelector selector)\n                public List<ImmutableNode> getChildren(ImmutableNode node)\n                    List<ImmutableNode> children = super.getChildren(node);\n                public List<ImmutableNode> getChildren(ImmutableNode node,\n                        String name)\n                    List<ImmutableNode> children =\n                public int getChildrenCount(ImmutableNode node, String name)\n                    List<ImmutableNode> children =\n                public ImmutableNode getChild(ImmutableNode node, int index)\n                    List<ImmutableNode> children = super.getChildren(node);\n                public int indexOfChild(ImmutableNode parent,\n                        ImmutableNode child)\n                    List<ImmutableNode> children = super.getChildren(parent);\n                        ImmutableNode node, List<ImmutableNode> children)\n                        for (ImmutableNode child : children)\n",
            "src/main/java/org/apache/commons/configuration2/ImmutableConfigurationInvocationHandler.java": "    public ImmutableConfigurationInvocationHandler(Configuration conf)\n    public Object invoke(Object proxy, Method method, Object[] args)\n        catch (InvocationTargetException e)\n    private static Object handleResult(Object result)\n        public ImmutableIterator(Iterator<?> it)\n",
            "src/main/java/org/apache/commons/configuration2/JNDIConfiguration.java": "    public JNDIConfiguration(String prefix) throws NamingException\n    public JNDIConfiguration(Context context)\n    public JNDIConfiguration(Context context, String prefix)\n    private void recursiveGetKeys(Set<String> keys, Context context, String prefix,\n            Set<Context> processedCtx) throws NamingException\n                NameClassPair nameClassPair = elements.next();\n                String name = nameClassPair.getName();\n                Object object = context.lookup(name);\n                StringBuilder key = new StringBuilder();\n                    Context subcontext = (Context) object;\n    protected Iterator<String> getKeysInternal(String prefix)\n        String[] splitPath = StringUtils.split(prefix, \".\");\n        List<String> path = Arrays.asList(splitPath);\n            Context context = getContext(path, getBaseContext());\n            Set<String> keys = new HashSet<>();\n        catch (NameNotFoundException e)\n        catch (NamingException e)\n    private Context getContext(List<String> path, Context context) throws NamingException\n        String key = path.get(0);\n                NameClassPair nameClassPair = elements.next();\n                String name = nameClassPair.getName();\n                Object object = context.lookup(name);\n                    Context subcontext = (Context) object;\n        catch (NamingException e)\n    protected void setPropertyInternal(String key, Object value)\n    protected void clearPropertyDirect(String key)\n        catch (NameNotFoundException e)\n        catch (NamingException e)\n    public void setPrefix(String prefix)\n        catch (NameNotFoundException e)\n        catch (NotContextException nctxex)\n        catch (NamingException e)\n    protected void addPropertyDirect(String key, Object obj)\n    public void setContext(Context context)\n",
            "src/main/java/org/apache/commons/configuration2/JSONConfiguration.java": "    public JSONConfiguration(HierarchicalConfiguration<ImmutableNode> c)\n    public void read(Reader in) throws ConfigurationException\n            Map<String, Object> map = mapper.readValue(in, this.type);\n        catch (Exception e)\n    public void write(Writer out) throws ConfigurationException, IOException\n    public void read(InputStream in) throws ConfigurationException\n            Map<String, Object> map = mapper.readValue(in, this.type);\n        catch (Exception e)\n",
            "src/main/java/org/apache/commons/configuration2/MapConfiguration.java": "    public MapConfiguration(Map<String, ?> map)\n    public MapConfiguration(Properties props)\n    public void setTrimmingDisabled(boolean trimmingDisabled)\n    protected Object getPropertyInternal(String key)\n        Object value = map.get(key);\n            Collection<String> list = getListDelimiterHandler().split((String) value, !isTrimmingDisabled());\n    protected void addPropertyDirect(String key, Object value)\n        Object previousValue = getProperty(key);\n            List<Object> list = new ArrayList<>();\n    protected boolean containsKeyInternal(String key)\n    protected void clearPropertyDirect(String key)\n            MapConfiguration copy = (MapConfiguration) super.clone();\n        catch (CloneNotSupportedException cex)\n    private static Map<String, Object> convertPropertiesToMap(Properties props)\n",
            "src/main/java/org/apache/commons/configuration2/PatternSubtreeConfigurationWrapper.java": "            HierarchicalConfiguration<ImmutableNode> config, String path)\n    protected void addPropertyInternal(String key, Object value)\n    protected void clearPropertyDirect(String key)\n    protected boolean containsKeyInternal(String key)\n    public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)\n    public BigDecimal getBigDecimal(String key)\n    public BigInteger getBigInteger(String key, BigInteger defaultValue)\n    public BigInteger getBigInteger(String key)\n    public boolean getBoolean(String key, boolean defaultValue)\n    public Boolean getBoolean(String key, Boolean defaultValue)\n    public boolean getBoolean(String key)\n    public byte getByte(String key, byte defaultValue)\n    public Byte getByte(String key, Byte defaultValue)\n    public byte getByte(String key)\n    public double getDouble(String key, double defaultValue)\n    public Double getDouble(String key, Double defaultValue)\n    public double getDouble(String key)\n    public float getFloat(String key, float defaultValue)\n    public Float getFloat(String key, Float defaultValue)\n    public float getFloat(String key)\n    public int getInt(String key, int defaultValue)\n    public int getInt(String key)\n    public Integer getInteger(String key, Integer defaultValue)\n    protected Iterator<String> getKeysInternal(String prefix)\n    public List<Object> getList(String key, List<?> defaultValue)\n    public List<Object> getList(String key)\n    public long getLong(String key, long defaultValue)\n    public Long getLong(String key, Long defaultValue)\n    public long getLong(String key)\n    public Properties getProperties(String key)\n    protected Object getPropertyInternal(String key)\n    public short getShort(String key, short defaultValue)\n    public Short getShort(String key, Short defaultValue)\n    public short getShort(String key)\n    public String getString(String key, String defaultValue)\n    public String getString(String key)\n    public String[] getStringArray(String key)\n    protected void setPropertyInternal(String key, Object value)\n    public Configuration subset(String prefix)\n    public void setExpressionEngine(ExpressionEngine expressionEngine)\n    protected void addNodesInternal(String key, Collection<? extends ImmutableNode> nodes)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(String key, boolean supportUpdates)\n    public HierarchicalConfiguration<ImmutableNode> configurationAt(String key)\n    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(String key)\n    protected Object clearTreeInternal(String key)\n    protected int getMaxIndexInternal(String key)\n    public <T extends Event> void addEventListener(EventType<T> eventType,\n            EventListener<? super T> listener)\n            EventType<T> eventType, EventListener<? super T> listener)\n            EventType<T> eventType)\n    public void write(Writer writer) throws ConfigurationException, IOException\n    public void read(Reader reader) throws ConfigurationException, IOException\n        String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;\n    private String makePath(String item)\n    private String substitute(String pattern)\n",
            "src/main/java/org/apache/commons/configuration2/PrefixedKeysIterator.java": "    public PrefixedKeysIterator(Iterator<String> wrappedIterator, String keyPrefix)\n            String key = iterator.next();\n",
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java": "    public static void setInclude(String inc)\n    public void setIncludesAllowed(boolean includesAllowed)\n    public void setHeader(String header)\n    public void setFooter(String footer)\n    public void setLayout(PropertiesConfigurationLayout layout)\n    private void installLayout(PropertiesConfigurationLayout layout)\n    public void setIOFactory(IOFactory ioFactory)\n    public void initFileLocator(FileLocator locator)\n    public void read(Reader in) throws ConfigurationException, IOException\n    public void write(Writer out) throws ConfigurationException, IOException\n        PropertiesConfiguration copy = (PropertiesConfiguration) super.clone();\n    boolean propertyLoaded(String key, String value)\n                Collection<String> files =\n                for (String f : files)\n    static boolean isCommentLine(String line)\n        String s = line.trim();\n    private static int countTrailingBS(String line)\n        public PropertiesReader(Reader reader)\n            StringBuilder buffer = new StringBuilder();\n            String line = readProperty();\n        protected void parseProperty(String line)\n            String[] property = doParseProperty(line);\n        protected void initPropertyName(String name)\n        protected void initPropertyValue(String value)\n        protected void initPropertySeparator(String value)\n        private static boolean checkCombineLines(String line)\n        private static String[] doParseProperty(String line)\n            Matcher matcher = PROPERTY_PATTERN.matcher(line);\n            String[] result = {\"\", \"\", \"\"};\n                    public Object transformValue(Object value)\n                        String strVal = String.valueOf(value);\n        public PropertiesWriter(Writer writer, ListDelimiterHandler delHandler)\n        public void setCurrentSeparator(String currentSeparator)\n        public void setGlobalSeparator(String globalSeparator)\n        public void setLineSeparator(String lineSeparator)\n        public void writeProperty(String key, Object value) throws IOException\n        public void writeProperty(String key, List<?> values) throws IOException\n        public void writeProperty(String key, Object value,\n                boolean forceSingleLine) throws IOException\n                List<?> values = (List<?>) value;\n                    catch (UnsupportedOperationException uoex)\n        public void writeComment(String comment) throws IOException\n        protected String escapeKey(String key)\n            StringBuilder newkey = new StringBuilder();\n                char c = key.charAt(i);\n        public void writeln(String s) throws IOException\n        protected String fetchSeparator(String key, Object value)\n        public PropertiesReader createPropertiesReader(Reader in)\n        public PropertiesWriter createPropertiesWriter(Writer out,\n                ListDelimiterHandler handler)\n    protected static String unescapeJava(String str)\n        int sz = str.length();\n        StringBuilder out = new StringBuilder(sz);\n        StringBuilder unicode = new StringBuilder(UNICODE_LEN);\n            char ch = str.charAt(i);\n                        int value = Integer.parseInt(unicode.toString(), HEX_RADIX);\n                    catch (NumberFormatException nfe)\n    private static boolean needsUnescape(char ch)\n    private void loadIncludeFile(String fileName) throws ConfigurationException\n            URL baseURL = locator.getSourceURL();\n        FileHandler fh = new FileHandler(this);\n        FileLocator orgLocator = locator;\n    private URL locateIncludeFile(String basePath, String fileName)\n        FileLocator includeLocator =\n",
            "src/main/java/org/apache/commons/configuration2/PropertiesConfigurationLayout.java": "    public PropertiesConfigurationLayout(PropertiesConfigurationLayout c)\n    public String getCanonicalComment(String key, boolean commentChar)\n    public String getComment(String key)\n    public void setComment(String key, String comment)\n    public int getBlancLinesBefore(String key)\n    public void setBlancLinesBefore(String key, int number)\n    public String getCanonicalHeaderComment(boolean commentChar)\n    public void setHeaderComment(String comment)\n    public String getCanonicalFooterCooment(boolean commentChar)\n    public void setFooterComment(String footerComment)\n    public boolean isSingleLine(String key)\n    public void setSingleLine(String key, boolean f)\n    public void setForceSingleLine(boolean f)\n    public String getSeparator(String key)\n    public void setSeparator(String key, String sep)\n    public void setGlobalSeparator(String globalSeparator)\n    public void setLineSeparator(String lineSeparator)\n    public void load(PropertiesConfiguration config, Reader in)\n        PropertiesConfiguration.PropertiesReader reader =\n                    boolean contained = layoutData.containsKey(reader\n                    String comment = extractComment(reader.getCommentLines(),\n                    PropertyLayoutData data = fetchLayoutData(reader\n        catch (IOException ioex)\n    public void save(PropertiesConfiguration config, Writer out) throws ConfigurationException\n            PropertiesConfiguration.PropertiesWriter writer =\n            for (String key : getKeys())\n                    boolean singleLine = isForceSingleLine() || isSingleLine(key);\n        catch (IOException ioex)\n    public void onEvent(ConfigurationEvent event)\n                boolean contained =\n                PropertyLayoutData data =\n    private PropertyLayoutData fetchLayoutData(String key)\n    static boolean isCommentLine(String line)\n    static String trimComment(String s, boolean comment)\n        StringBuilder buf = new StringBuilder(s.length());\n                String line = s.substring(lastPos, pos);\n    static String stripCommentChar(String s, boolean comment)\n    private String extractComment(List<String> commentLines, int from, int to)\n        StringBuilder buf = new StringBuilder(commentLines.get(from));\n    private int checkHeaderComment(List<String> commentLines)\n    private void copyFrom(PropertiesConfigurationLayout c)\n        for (String key : c.getKeys())\n            PropertyLayoutData data = c.layoutData.get(key);\n            PropertiesConfiguration.PropertiesWriter writer, String comment)\n    private static String constructCanonicalComment(String comment,\n            boolean commentChar)\n        public void setBlancLines(int blancLines)\n        public void setSingleLine(boolean singleLine)\n        public void addComment(String s)\n        public void setComment(String s)\n        public void setSeparator(String separator)\n                PropertyLayoutData copy = (PropertyLayoutData) super.clone();\n            catch (CloneNotSupportedException cnex)\n",
            "src/main/java/org/apache/commons/configuration2/StrictConfigurationComparator.java": "    public boolean compare(Configuration a, Configuration b)\n        for (Iterator<String> keys = a.getKeys(); keys.hasNext();)\n            String key = keys.next();\n            Object value = a.getProperty(key);\n        for (Iterator<String> keys = b.getKeys(); keys.hasNext();)\n            String key = keys.next();\n            Object value = b.getProperty(key);\n",
            "src/main/java/org/apache/commons/configuration2/SubnodeConfiguration.java": "    public SubnodeConfiguration(BaseHierarchicalConfiguration parent,\n                                TrackedNodeModel model)\n        ImmutableNode root =\n        InMemoryNodeModel parentModel =\n    protected NodeSelector getSubConfigurationNodeSelector(String key)\n            NodeSelector selector, InMemoryNodeModelSupport parentModelSupport)\n",
            "src/main/java/org/apache/commons/configuration2/SubsetConfiguration.java": "    public SubsetConfiguration(Configuration parent, String prefix)\n    public SubsetConfiguration(Configuration parent, String prefix, String delimiter)\n    protected String getParentKey(String key)\n    protected String getChildKey(String key)\n            int i = prefix.length() + (delimiter != null ? delimiter.length() : 0);\n    public void setPrefix(String prefix)\n    public Configuration subset(String prefix)\n    protected boolean containsKeyInternal(String key)\n    public void addPropertyDirect(String key, Object value)\n    protected void clearPropertyDirect(String key)\n    protected Object getPropertyInternal(String key)\n    protected Iterator<String> getKeysInternal(String prefix)\n    public void setThrowExceptionOnMissing(boolean throwExceptionOnMissing)\n            ListDelimiterHandler listDelimiterHandler)\n        public SubsetIterator(Iterator<String> it)\n",
            "src/main/java/org/apache/commons/configuration2/SystemConfiguration.java": "    public static void setSystemProperties(String fileName)\n    public static void setSystemProperties(String basePath, String fileName)\n        FileBasedConfiguration config =\n        FileHandler handler = new FileHandler(config);\n    public static void setSystemProperties(Configuration systemConfig)\n        Iterator<String> iter = systemConfig.getKeys();\n            String key = iter.next();\n            String value = (String) systemConfig.getProperty(key);\n",
            "src/main/java/org/apache/commons/configuration2/XMLConfiguration.java": "    public XMLConfiguration(HierarchicalConfiguration<ImmutableNode> c)\n        Document doc = getDocument();\n    public void setRootElementName(String name)\n    public void setDocumentBuilder(DocumentBuilder documentBuilder)\n    public void setPublicID(String publicID)\n    public void setSystemID(String systemID)\n    public void setValidating(boolean validating)\n    public void setSchemaValidation(boolean schemaValidation)\n    public void setEntityResolver(EntityResolver resolver)\n        XMLDocumentHelper docHelper = getDocumentHelper();\n        ReferenceNodeHandler handler = getReferenceHandler();\n    private void initProperties(XMLDocumentHelper docHelper, boolean elemRefs)\n        Document document = docHelper.getDocument();\n        ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n        MutableObject<String> rootValue = new MutableObject<>();\n        Map<ImmutableNode, Object> elemRefMap =\n        Map<String, String> attributes =\n        ImmutableNode top =\n    private Map<String, String> constructHierarchy(ImmutableNode.Builder node,\n            MutableObject<String> refValue, Element element,\n            Map<ImmutableNode, Object> elemRefs, boolean trim, int level)\n        boolean trimFlag = shouldTrim(element, trim);\n        Map<String, String> attributes = processAttributes(element);\n        StringBuilder buffer = new StringBuilder();\n        NodeList list = element.getChildNodes();\n            org.w3c.dom.Node w3cNode = list.item(i);\n                Element child = (Element) w3cNode;\n                ImmutableNode.Builder childNode = new ImmutableNode.Builder();\n                MutableObject<String> refChildValue =\n                Map<String, String> attrmap =\n                Boolean childTrim = Boolean.valueOf(attrmap.remove(ATTR_SPACE_INTERNAL));\n                ImmutableNode newChild =\n                Text data = (Text) w3cNode;\n        String text = determineValue(buffer.toString(), childrenFlag, trimFlag);\n    private static String determineValue(String content, boolean hasChildren,\n            boolean trimFlag)\n        boolean shouldTrim =\n    private static Map<String, String> processAttributes(Element element)\n        NamedNodeMap attributes = element.getAttributes();\n        Map<String, String> attrmap = new HashMap<>();\n            org.w3c.dom.Node w3cNode = attributes.item(i);\n                Attr attr = (Attr) w3cNode;\n    private ImmutableNode createChildNodeWithValue(ImmutableNode.Builder parent,\n            ImmutableNode.Builder child, Element elem, String value,\n            boolean trim, Map<String, String> attrmap,\n            Map<ImmutableNode, Object> elemRefs)\n            Map<ImmutableNode, Object> refs = isSingleElementList(elem) ? elemRefs : null;\n            Iterator<String> it = values.iterator();\n                ImmutableNode.Builder c = new ImmutableNode.Builder();\n                ImmutableNode newChild = c.create();\n    private static boolean isSingleElementList(Element element)\n        Node parentNode = element.getParentNode();\n    private static int countChildElements(Node parent, String name)\n        NodeList childNodes = parent.getChildNodes();\n            Node item = childNodes.item(i);\n    private static boolean shouldTrim(Element element, boolean currentTrim)\n        Attr attr = element.getAttributeNode(ATTR_SPACE);\n        DocumentBuilderFactory factory = DocumentBuilderFactory\n        DocumentBuilder result = factory.newDocumentBuilder();\n                public void error(SAXParseException ex) throws SAXException\n        Transformer transformer = XMLDocumentHelper.createTransformer();\n        ReferenceNodeHandler handler = getReferenceHandler();\n        XMLDocumentHelper docHelper =\n        XMLDocumentHelper newHelper =\n        XMLBuilderVisitor builder =\n    private void initRootElementText(Document doc, Object value)\n        Element elem = doc.getDocumentElement();\n        NodeList children = elem.getChildNodes();\n            org.w3c.dom.Node nd = children.item(i);\n    public void initFileLocator(FileLocator loc)\n    public void read(Reader in) throws ConfigurationException, IOException\n    public void read(InputStream in) throws ConfigurationException, IOException\n    private void load(InputSource source) throws ConfigurationException\n            URL sourceURL = locator.getSourceURL();\n            DocumentBuilder builder = createDocumentBuilder();\n            Document newDocument = builder.parse(source);\n            Document oldDocument = getDocument();\n        catch (SAXParseException spe)\n        catch (Exception e)\n    public void write(Writer writer) throws ConfigurationException, IOException\n        Transformer transformer = createTransformer();\n        Source source = new DOMSource(createDocument());\n        Result result = new StreamResult(writer);\n            Transformer transformer = createTransformer();\n            Source source = new DOMSource(createDocument());\n            StringWriter writer = new StringWriter();\n            Result result = new StreamResult(writer);\n            Reader reader = new StringReader(writer.getBuffer().toString());\n            DocumentBuilder builder = createDocumentBuilder();\n        catch (SAXException e)\n        catch (IOException e)\n        catch (ParserConfigurationException pce)\n        public XMLBuilderVisitor(XMLDocumentHelper docHelper,\n                ListDelimiterHandler handler)\n        public void processDocument(ReferenceNodeHandler refHandler)\n        public void handleRemovedNodes(ReferenceNodeHandler refHandler)\n            for (Object ref : refHandler.removedReferences())\n                    Node removedElem = (Node) ref;\n        protected void insert(ImmutableNode newNode, ImmutableNode parent,\n                ImmutableNode sibling1, ImmutableNode sibling2,\n                ReferenceNodeHandler refHandler)\n            Element elem = document.createElement(newNode.getNodeName());\n                String txt =\n        protected void update(ImmutableNode node, Object reference,\n                ReferenceNodeHandler refHandler)\n                    String value = XMLListReference.listValue(node, refHandler, listDelimiterHandler);\n                Object value = listDelimiterHandler.escape(refHandler.getValue(node),\n        private void updateElement(ImmutableNode node, ReferenceNodeHandler refHandler,\n                                   Object value)\n            Element element = getElement(node, refHandler);\n        private void updateElement(Element element, Object value)\n                String newValue = String.valueOf(value);\n        private void removeReference(Element element)\n            org.w3c.dom.Node parentElem = element.getParentNode();\n        private Element getElement(ImmutableNode node,\n                ReferenceNodeHandler refHandler)\n            Element elementNew = newElements.get(node);\n            Object reference = refHandler.getReference(node);\n        private static void updateAttributes(ImmutableNode node, Element elem)\n                for (Map.Entry<String, Object> e : node.getAttributes()\n        private static void clearAttributes(Element elem)\n            NamedNodeMap attributes = elem.getAttributes();\n        private static Text findTextNodeForUpdate(Element elem)\n            NodeList children = elem.getChildNodes();\n            Collection<org.w3c.dom.Node> textNodes =\n                org.w3c.dom.Node nd = children.item(i);\n            for (org.w3c.dom.Node tn : textNodes)\n",
            "src/main/java/org/apache/commons/configuration2/XMLDocumentHelper.java": "    XMLDocumentHelper(Document doc, Map<Node, Node> elemMap, String pubID,\n            String sysID)\n    public static XMLDocumentHelper forNewDocument(String rootElementName)\n        Document doc =\n        Element rootElem = doc.createElement(rootElementName);\n    public static XMLDocumentHelper forSourceDocument(Document srcDoc)\n    public static void transform(Transformer transformer, Source source,\n            Result result) throws ConfigurationException\n        catch (TransformerException tex)\n        Document docCopy = copyDocument(getDocument());\n    static Transformer createTransformer(TransformerFactory factory)\n        catch (TransformerConfigurationException tex)\n    static DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory)\n        catch (ParserConfigurationException pcex)\n    private static Document copyDocument(Document doc)\n        Transformer transformer = createTransformer();\n        DOMSource source = new DOMSource(doc);\n        DOMResult result = new DOMResult();\n    private static Map<Node, Node> createElementMapping(Document doc1,\n            Document doc2)\n        Map<Node, Node> mapping = new HashMap<>();\n    private static void createElementMappingForNodes(Node n1, Node n2,\n            Map<Node, Node> mapping)\n        NodeList childNodes1 = n1.getChildNodes();\n        NodeList childNodes2 = n2.getChildNodes();\n        int count = Math.min(childNodes1.getLength(), childNodes2.getLength());\n",
            "src/main/java/org/apache/commons/configuration2/XMLListReference.java": "    private XMLListReference(Element e)\n    public static void assignListReference(Map<ImmutableNode, Object> refs,\n            ImmutableNode node, Element elem)\n    public static boolean isListNode(ImmutableNode node,\n            ReferenceNodeHandler handler)\n        ImmutableNode parent = handler.getParent(node);\n                ImmutableNode child = handler.getChild(parent, i);\n    public static boolean isFirstListItem(ImmutableNode node,\n            ReferenceNodeHandler handler)\n        ImmutableNode parent = handler.getParent(node);\n            ImmutableNode child = handler.getChild(parent, idx);\n    public static String listValue(ImmutableNode node,\n            ReferenceNodeHandler nodeHandler,\n            ListDelimiterHandler delimiterHandler)\n        ImmutableNode parent = nodeHandler.getParent(node);\n        List<ImmutableNode> items =\n        List<Object> values = new ArrayList<>(items.size());\n        for (ImmutableNode n : items)\n        catch (UnsupportedOperationException e)\n    private static boolean hasListReference(ImmutableNode node,\n            ReferenceNodeHandler handler)\n    private static boolean nameEquals(ImmutableNode n1, ImmutableNode n2)\n",
            "src/main/java/org/apache/commons/configuration2/XMLPropertiesConfiguration.java": "    public XMLPropertiesConfiguration(Element element) throws ConfigurationException\n    public void setHeader(String header)\n    public void read(Reader in) throws ConfigurationException\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n            SAXParser parser = factory.newSAXParser();\n            XMLReader xmlReader = parser.getXMLReader();\n                public InputSource resolveEntity(String publicId, String systemId)\n        catch (Exception e)\n    public void load(Element element) throws ConfigurationException\n        NodeList childNodes = element.getChildNodes();\n            Node item = childNodes.item(i);\n                    String key = ((Element) item).getAttribute(\"key\");\n    public void write(Writer out) throws ConfigurationException\n        PrintWriter writer = new PrintWriter(out);\n        Iterator<String> keys = getKeys();\n            String key = keys.next();\n            Object value = getProperty(key);\n    private void writeProperty(PrintWriter out, String key, Object value)\n        String k = StringEscapeUtils.escapeXml10(key);\n            String v = escapeValue(value);\n    private void writeProperty(PrintWriter out, String key, List<?> values)\n        for (Object value : values)\n    public void save(Document document, Node parent)\n        Element properties = document.createElement(\"properties\");\n            Element comment = document.createElement(\"comment\");\n        Iterator<String> keys = getKeys();\n            String key = keys.next();\n            Object value = getProperty(key);\n    public void initFileLocator(FileLocator locator)\n    private void writeProperty(Document document, Node properties, String key, Object value)\n        Element entry = document.createElement(\"entry\");\n        String k = StringEscapeUtils.escapeXml10(key);\n            String v = escapeValue(value);\n    private void writeProperty(Document document, Node properties, String key, List<?> values)\n        for (Object value : values)\n    private String escapeValue(Object value)\n        String v = StringEscapeUtils.escapeXml10(String.valueOf(value));\n        public void startElement(String uri, String localName, String qName, Attributes attrs)\n        public void endElement(String uri, String localName, String qName)\n        public void characters(char[] chars, int start, int length)\n",
            "src/main/java/org/apache/commons/configuration2/YAMLConfiguration.java": "    public YAMLConfiguration(HierarchicalConfiguration<ImmutableNode> c)\n    public void read(Reader in) throws ConfigurationException\n            Yaml yaml = new Yaml();\n            Map<String, Object> map = (Map) yaml.load(in);\n        catch (Exception e)\n    public void read(Reader in, LoaderOptions options)\n            Yaml yaml = new Yaml(options);\n            Map<String, Object> map = (Map) yaml.load(in);\n        catch (Exception e)\n    public void write(Writer out) throws ConfigurationException, IOException\n        DumperOptions options = new DumperOptions();\n    public void dump(Writer out, DumperOptions options)\n        Yaml yaml = new Yaml(options);\n    public void read(InputStream in) throws ConfigurationException\n            Yaml yaml = new Yaml();\n            Map<String, Object> map = (Map) yaml.load(in);\n        catch (Exception e)\n    public void read(InputStream in, LoaderOptions options)\n            Yaml yaml = new Yaml(options);\n            Map<String, Object> map = (Map) yaml.load(in);\n        catch (Exception e)\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/BeanHelper.java": "    public BeanHelper(BeanFactory defFactory)\n    public void registerBeanFactory(String name, BeanFactory factory)\n    public BeanFactory deregisterBeanFactory(String name)\n    public void initBean(Object bean, BeanDeclaration data)\n        Map<String, Object> nestedBeans = data.getNestedBeanDeclarations();\n                    Map.Entry<String, Object> e = nestedBeans.entrySet().iterator().next();\n                    String propName = e.getKey();\n                    Class<?> defaultClass = getDefaultClass(bean, propName);\n                        for (BeanDeclaration decl : decls)\n                        BeanDeclaration decl = (BeanDeclaration) e.getValue();\n                for (Map.Entry<String, Object> e : nestedBeans.entrySet())\n                    String propName = e.getKey();\n                    Class<?> defaultClass = getDefaultClass(bean, propName);\n                    Object prop = e.getValue();\n                        Collection<Object> beanCollection =\n                        for (Object elemDef : (Collection<?>) prop)\n    public static void initBeanProperties(Object bean, BeanDeclaration data)\n        Map<String, Object> properties = data.getBeanProperties();\n            for (Map.Entry<String, Object> e : properties.entrySet())\n                String propName = e.getKey();\n    public static DynaBean createWrapDynaBean(Object bean)\n        WrapDynaClass dynaClass =\n    public static void copyProperties(Object dest, Object orig)\n    private static Class<?> getDefaultClass(Object bean, String propName)\n            PropertyDescriptor desc =\n        catch (Exception ex)\n    private static void initProperty(Object bean, String propName, Object value)\n        catch (IllegalAccessException iaex)\n        catch (InvocationTargetException itex)\n    private static Collection<Object> createPropertyCollection(String propName,\n            Class<?> propertyClass)\n    public static void setProperty(Object bean, String propName, Object value)\n    public Object createBean(BeanDeclaration data, Class<?> defaultClass,\n            Object param)\n        BeanFactory factory = fetchBeanFactory(data);\n        BeanCreationContext bcc =\n        catch (Exception ex)\n    public Object createBean(BeanDeclaration data, Class<?> defaultClass)\n    public Object createBean(BeanDeclaration data)\n    static Class<?> loadClass(String name) throws ClassNotFoundException\n    private static boolean isPropertyWriteable(Object bean, String propName)\n    private static Class<?> fetchBeanClass(BeanDeclaration data,\n            Class<?> defaultClass, BeanFactory factory)\n        String clsName = data.getBeanClassName();\n            catch (ClassNotFoundException cex)\n        Class<?> clazz = factory.getDefaultBeanClass();\n    private BeanFactory fetchBeanFactory(BeanDeclaration data)\n        String factoryName = data.getBeanFactoryName();\n            BeanFactory factory = beanFactories.get(factoryName);\n            final BeanDeclaration data, Class<?> defaultClass,\n            final Object param, BeanFactory factory)\n        PropertyUtilsBean propUtilsBean = new PropertyUtilsBean();\n        private BeanCreationContextImpl(BeanHelper helper, Class<?> beanClass,\n                BeanDeclaration data, Object param)\n        public void initBean(Object bean, BeanDeclaration data)\n        public Object createBean(BeanDeclaration data)\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/CombinedBeanDeclaration.java": "    public CombinedBeanDeclaration(BeanDeclaration... decl)\n        for (BeanDeclaration d : childDeclarations)\n            String factoryName = d.getBeanFactoryName();\n        for (BeanDeclaration d : childDeclarations)\n            Object factoryParam = d.getBeanFactoryParameter();\n        for (BeanDeclaration d : childDeclarations)\n            String beanClassName = d.getBeanClassName();\n        Map<String, Object> result = new HashMap<>();\n            Map<String, Object> props =\n        Map<String, Object> result = new HashMap<>();\n            Map<String, Object> decls =\n        for (BeanDeclaration d : childDeclarations)\n            Collection<ConstructorArg> args = d.getConstructorArgs();\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java": "    public ConfigurationDynaBean(Configuration configuration)\n    public void set(String name, Object value)\n            Collection<?> collection = (Collection<?>) value;\n            for (Object v : collection)\n            int length = Array.getLength(value);\n    public Object get(String name)\n            Configuration subset = new SubsetConfiguration(getConfiguration(), name, PROPERTY_DELIMITER);\n    public boolean contains(String name, String key)\n        Configuration subset = getConfiguration().subset(name);\n    public Object get(String name, int index)\n        List<Object> list = getConfiguration().getList(name);\n    public Object get(String name, String key)\n        Configuration subset = getConfiguration().subset(name);\n    public void remove(String name, String key)\n        Configuration subset = new SubsetConfiguration(getConfiguration(), name, PROPERTY_DELIMITER);\n    public void set(String name, int index, Object value)\n        Object property = getConfiguration().getProperty(name);\n    public void set(String name, String key, Object value)\n    private boolean checkIndexedProperty(String name)\n        Object property = getConfiguration().getProperty(name);\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaClass.java": "    public ConfigurationDynaClass(Configuration configuration)\n    public DynaProperty getDynaProperty(String name)\n        Object value = configuration.getProperty(name);\n        Iterator<String> keys = configuration.getKeys();\n        List<DynaProperty> properties = new ArrayList<>();\n            String key = keys.next();\n            DynaProperty property = getDynaProperty(key);\n        DynaProperty[] propertyArray = new DynaProperty[properties.size()];\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/ConstructorArg.java": "    private ConstructorArg(BeanDeclaration decl, Object val, String type)\n    public static ConstructorArg forBeanDeclaration(BeanDeclaration decl)\n    public static ConstructorArg forBeanDeclaration(BeanDeclaration decl,\n            String typeName)\n    public static ConstructorArg forValue(Object value)\n    public static ConstructorArg forValue(Object value, String typeName)\n    public boolean matches(Class<?> argCls)\n        StringBuilder buf = new StringBuilder();\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/DefaultBeanFactory.java": "    public DefaultBeanFactory(ConversionHandler convHandler)\n    public Object createBean(BeanCreationContext bcc) throws Exception\n        Object result = createBeanInstance(bcc);\n    protected Object createBeanInstance(BeanCreationContext bcc)\n        Constructor<?> ctor =\n        Object[] args = fetchConstructorArgs(ctor, bcc);\n    protected void initBeanInstance(Object bean, BeanCreationContext bcc) throws Exception\n            Class<T> beanClass, BeanDeclaration data)\n        List<Constructor<T>> matchingConstructors =\n    private Object[] fetchConstructorArgs(Constructor<?> ctor,\n            BeanCreationContext bcc)\n        Class<?>[] types = ctor.getParameterTypes();\n        Object[] args = new Object[types.length];\n        for (ConstructorArg arg : nullSafeConstructorArgs(bcc.getBeanDeclaration()))\n            Object val =\n            BeanDeclaration data)\n            Class<T> beanClass, BeanDeclaration data)\n        List<Constructor<T>> result = new LinkedList<>();\n        Collection<ConstructorArg> args = getConstructorArgs(data);\n        for (Constructor<?> ctor : beanClass.getConstructors())\n    private static boolean matchesConstructor(Constructor<?> ctor,\n            Collection<ConstructorArg> args)\n        Class<?>[] types = ctor.getParameterTypes();\n        for (ConstructorArg arg : args)\n            BeanDeclaration data)\n    private static <T> void checkSingleMatchingConstructor(Class<T> beanClass,\n            BeanDeclaration data, List<Constructor<T>> matchingConstructors)\n            Class<?> beanClass, BeanDeclaration data, String msg)\n",
            "src/main/java/org/apache/commons/configuration2/beanutils/XMLBeanDeclaration.java": "    public <T> XMLBeanDeclaration(HierarchicalConfiguration<T> config, String key)\n    public <T> XMLBeanDeclaration(HierarchicalConfiguration<T> config, String key,\n            boolean optional)\n    public <T> XMLBeanDeclaration(HierarchicalConfiguration<T> config, String key,\n            boolean optional, String defBeanClsName)\n        catch (ConfigurationRuntimeException iex)\n    public <T> XMLBeanDeclaration(HierarchicalConfiguration<T> config)\n    XMLBeanDeclaration(HierarchicalConfiguration<?> config,\n            NodeData<?> node)\n        Map<String, Object> props = new HashMap<>();\n        for (String key : getAttributeNames())\n        Map<String, Object> nested = new HashMap<>();\n        for (NodeData<?> child : getNode().getChildren())\n                    Object obj = nested.get(child.nodeName());\n        Collection<ConstructorArg> args = new LinkedList<>();\n        for (NodeData<?> child : getNode().getChildren(ELEM_CTOR_ARG))\n    protected Object interpolate(Object value)\n        ConfigurationInterpolator interpolator =\n    protected boolean isReservedChildName(String name)\n    protected boolean isReservedAttributeName(String name)\n    protected boolean isReservedName(String name)\n    BeanDeclaration createBeanDeclaration(NodeData<?> node)\n        for (HierarchicalConfiguration<?> config : getConfiguration()\n    private void initSubnodeConfiguration(HierarchicalConfiguration<?> conf)\n    private ConstructorArg createConstructorArg(NodeData<?> child)\n        String type = getAttribute(child, ATTR_CTOR_TYPE);\n    private String getAttribute(NodeData<?> nd, String attr)\n        Object value = nd.getAttribute(attr);\n    private static boolean isBeanDeclarationArgument(NodeData<?> nd)\n            HierarchicalConfiguration<T> config)\n        NodeHandler<T> handler = config.getNodeModel().getNodeHandler();\n        public NodeData(T nd, NodeHandler<T> hndlr)\n        public String escapedNodeName(HierarchicalConfiguration<?> config)\n        public List<NodeData<T>> getChildren(String name)\n        public Object getAttribute(String key)\n        public boolean matchesConfigRootNode(HierarchicalConfiguration<?> config)\n        private List<NodeData<T>> wrapInNodeData(List<T> nodes)\n            List<NodeData<T>> result = new ArrayList<>(nodes.size());\n            for (T node : nodes)\n",
            "src/main/java/org/apache/commons/configuration2/builder/AutoSaveListener.java": "    public AutoSaveListener(FileBasedConfigurationBuilder<?> bldr)\n    public void onEvent(ConfigurationEvent event)\n            catch (ConfigurationException ce)\n    public synchronized void loading(FileHandler handler)\n    public synchronized void loaded(FileHandler handler)\n    public synchronized void updateFileHandler(FileHandler fh)\n    private boolean autoSaveRequired(ConfigurationEvent event)\n",
            "src/main/java/org/apache/commons/configuration2/builder/BasicBuilderParameters.java": "        HashMap<String, Object> result =\n    public BasicBuilderParameters setLogger(ConfigurationLogger log)\n    public BasicBuilderParameters setThrowExceptionOnMissing(boolean b)\n            ListDelimiterHandler handler)\n    public BasicBuilderParameters setInterpolator(ConfigurationInterpolator ci)\n            Map<String, ? extends Lookup> lookups)\n            Collection<? extends Lookup> lookups)\n            ConfigurationInterpolator parent)\n    public BasicBuilderParameters setSynchronizer(Synchronizer sync)\n    public BasicBuilderParameters setConversionHandler(ConversionHandler handler)\n    public BasicBuilderParameters setBeanHelper(BeanHelper beanHelper)\n            ConfigurationDecoder decoder)\n    public void merge(BuilderParameters p)\n        for (Map.Entry<String, Object> e : p.getParameters().entrySet())\n    public void inheritFrom(Map<String, ?> source)\n            Map<String, Object> params)\n    public static BeanHelper fetchBeanHelper(Map<String, Object> params)\n            BasicBuilderParameters copy =\n        catch (CloneNotSupportedException cnex)\n    protected void storeProperty(String key, Object value)\n    protected Object fetchProperty(String key)\n    protected void copyPropertiesFrom(Map<String, ?> source, String... keys)\n        for (String key : keys)\n            Object value = source.get(key);\n    private BasicBuilderParameters setProperty(String key, Object value)\n    private static void createDefensiveCopies(HashMap<String, Object> params)\n        Map<String, ? extends Lookup> prefixLookups =\n        Collection<? extends Lookup> defLookups = fetchDefaultLookups(params);\n            Map<String, Object> params)\n            Map<String, Object> params)\n        Map<?, ?> prefixes =\n        for (Map.Entry<?, ?> e : prefixes.entrySet())\n            Map<String, Object> params)\n            Map<String, Object> params)\n        Collection<?> col =\n        for (Object o : col)\n    private static <T> T fetchParameter(Map<String, Object> params, String key,\n            Class<T> expClass)\n        Object value = params.get(key);\n    private static void checkParameters(Map<String, Object> params)\n",
            "src/main/java/org/apache/commons/configuration2/builder/BasicConfigurationBuilder.java": "    public BasicConfigurationBuilder(Class<? extends T> resCls)\n    public BasicConfigurationBuilder(Class<? extends T> resCls, Map<String, Object> params)\n    public BasicConfigurationBuilder(Class<? extends T> resCls,\n            Map<String, Object> params, boolean allowFailOnInit)\n            Map<String, Object> params)\n            Map<String, Object> params)\n        Map<String, Object> newParams =\n    public BasicConfigurationBuilder<T> configure(BuilderParameters... params)\n        Map<String, Object> newParams = new HashMap<>();\n        for (BuilderParameters p : params)\n            EventType<E> eventType, EventListener<? super E> listener)\n            EventType<E> eventType, EventListener<? super E> listener)\n            ReloadingController controller)\n        T resObj = createResultInstance();\n        catch (ConfigurationException cex)\n        Object bean = fetchBeanHelper().createBean(getResultDeclaration());\n    protected void initResultInstance(T obj) throws ConfigurationException\n        BeanHelper helper =\n            BasicConfigurationBuilder<?> target)\n    protected void copyEventListeners(BasicConfigurationBuilder<?> target,\n            EventListenerList listeners)\n            EventType<E> eventType, EventListener<? super E> listener)\n    protected void fireBuilderEvent(ConfigurationBuilderEvent event)\n    private void updateParameters(Map<String, Object> newParams)\n        Map<String, Object> map = new HashMap<>();\n    private void registerEventListeners(T obj)\n        EventSource evSrc = ConfigurationUtils.asEventSource(obj, true);\n        for (EventListenerRegistrationData<?> regData : eventListeners\n    private void removeEventListeners(T obj)\n        EventSource evSrc = ConfigurationUtils.asEventSource(obj, true);\n        for (EventListenerRegistrationData<?> regData : eventListeners\n    private void handleEventListenerProviders(BuilderParameters params)\n    private void checkResultInstance(Object inst)\n        Map<String, Object> filteredMap =\n        for (Iterator<String> it = filteredMap.keySet().iterator(); it\n            String key = it.next();\n    private void handleInitializable(T obj)\n    private static <E extends Event> void registerListener(EventSource evSrc,\n            EventListenerRegistrationData<E> regData)\n    private static <E extends Event> void removeListener(EventSource evSrc,\n            EventListenerRegistrationData<E> regData)\n",
            "src/main/java/org/apache/commons/configuration2/builder/BuilderConfigurationWrapperFactory.java": "    public BuilderConfigurationWrapperFactory(EventSourceSupport evSrcSupport)\n            Class<T> ifcClass, ConfigurationBuilder<? extends T> builder)\n            Class<T> ifcClass, ConfigurationBuilder<? extends T> builder,\n            EventSourceSupport evSrcSupport)\n    private static Class<?>[] fetchSupportedInterfaces(Class<?> ifcClass,\n            EventSourceSupport evSrcSupport)\n        Class<?>[] result = new Class<?>[2];\n                ConfigurationBuilder<? extends ImmutableConfiguration> wrappedBuilder,\n                EventSourceSupport evSrcSupport)\n        public Object invoke(Object proxy, Method method, Object[] args)\n        private Object handleConfigurationInvocation(Method method,\n                Object[] args) throws Exception\n        private Object handleEventSourceInvocation(Method method, Object[] args)\n            Object target =\n",
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderEvent.java": "    public ConfigurationBuilderEvent(ConfigurationBuilder<?> source,\n            EventType<? extends ConfigurationBuilderEvent> evType)\n",
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderResultCreatedEvent.java": "            ConfigurationBuilder<?> source,\n            EventType<? extends ConfigurationBuilderResultCreatedEvent> evType,\n            ImmutableConfiguration createdConfiguration)\n",
            "src/main/java/org/apache/commons/configuration2/builder/CopyObjectDefaultHandler.java": "    public CopyObjectDefaultHandler(BuilderParameters src)\n    public void initializeDefaults(Object parameters)\n        catch (Exception e)\n",
            "src/main/java/org/apache/commons/configuration2/builder/DatabaseBuilderParametersImpl.java": "    public DatabaseBuilderParametersImpl setDataSource(DataSource src)\n    public DatabaseBuilderParametersImpl setTable(String tname)\n    public DatabaseBuilderParametersImpl setKeyColumn(String name)\n    public DatabaseBuilderParametersImpl setValueColumn(String name)\n    public DatabaseBuilderParametersImpl setConfigurationNameColumn(String name)\n    public DatabaseBuilderParametersImpl setConfigurationName(String name)\n    public DatabaseBuilderParametersImpl setAutoCommit(boolean f)\n",
            "src/main/java/org/apache/commons/configuration2/builder/DefaultParametersManager.java": "    public <T> void registerDefaultsHandler(Class<T> paramsClass,\n            DefaultParametersHandler<? super T> handler)\n    public <T> void registerDefaultsHandler(Class<T> paramsClass,\n            DefaultParametersHandler<? super T> handler, Class<?> startClass)\n    public void unregisterDefaultsHandler(DefaultParametersHandler<?> handler)\n    public void unregisterDefaultsHandler(DefaultParametersHandler<?> handler,\n            Class<?> startClass)\n        Collection<DefaultHandlerData> toRemove =\n        for (DefaultHandlerData dhd : defaultHandlers)\n    public void initializeParameters(BuilderParameters params)\n            for (DefaultHandlerData dhd : defaultHandlers)\n        public DefaultHandlerData(DefaultParametersHandler<?> h, Class<?> cls,\n                Class<?> startCls)\n        public void applyHandlerIfMatching(BuilderParameters obj)\n        public boolean isOccurrence(DefaultParametersHandler<?> h,\n                Class<?> startCls)\n",
            "src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java": "    public ReloadingDetector createReloadingDetector(FileHandler handler,\n            FileBasedBuilderParametersImpl params)\n        Long refreshDelay = params.getReloadingRefreshDelay();\n        FileHandlerReloadingDetector fileHandlerReloadingDetector =\n",
            "src/main/java/org/apache/commons/configuration2/builder/EventListenerParameters.java": "            EventType<T> eventType, EventListener<? super T> listener)\n            EventListenerRegistrationData<T> registrationData)\n",
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedBuilderParametersImpl.java": "    public FileBasedBuilderParametersImpl(FileHandler handler)\n            Map<String, ?> params)\n            Map<String, ?> params, boolean createIfMissing)\n    public static FileBasedBuilderParametersImpl fromMap(Map<String, ?> map)\n        FileBasedBuilderParametersImpl params =\n    public void inheritFrom(Map<String, ?> source)\n        FileBasedBuilderParametersImpl srcParams = fromParameters(source);\n            Long reloadingRefreshDelay)\n            ReloadingDetectorFactory reloadingDetectorFactory)\n    public FileBasedBuilderParametersImpl setFile(File file)\n    public FileBasedBuilderParametersImpl setURL(URL url)\n    public FileBasedBuilderParametersImpl setPath(String path)\n    public FileBasedBuilderParametersImpl setFileName(String name)\n    public FileBasedBuilderParametersImpl setBasePath(String path)\n    public FileBasedBuilderParametersImpl setFileSystem(FileSystem fs)\n            FileLocationStrategy strategy)\n    public FileBasedBuilderParametersImpl setEncoding(String enc)\n        Map<String, Object> params = super.getParameters();\n        FileBasedBuilderParametersImpl copy =\n",
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedConfigurationBuilder.java": "    public FileBasedConfigurationBuilder(Class<? extends T> resCls)\n    public FileBasedConfigurationBuilder(Class<? extends T> resCls,\n            Map<String, Object> params)\n    public FileBasedConfigurationBuilder(Class<? extends T> resCls,\n            Map<String, Object> params, boolean allowFailOnInit)\n    public static String getDefaultEncoding(Class<?> configClass)\n        List<Class<?>> superclasses =\n        for (Class<?> cls : superclasses)\n        List<Class<?>> interfaces = ClassUtils.getAllInterfaces(configClass);\n        for (Class<?> cls : interfaces)\n    public static void setDefaultEncoding(Class<?> configClass, String encoding)\n            BuilderParameters... params)\n            Map<String, Object> params)\n    public synchronized void setAutoSave(boolean enabled)\n    protected void initResultInstance(T obj) throws ConfigurationException\n        FileHandler srcHandler =\n    protected void initFileHandler(FileHandler handler)\n    private void initEncoding(FileHandler handler)\n            String encoding = getDefaultEncoding(getResultClass());\n        Map<Class<?>, String> enc = new ConcurrentHashMap<>();\n",
            "src/main/java/org/apache/commons/configuration2/builder/HierarchicalBuilderParametersImpl.java": "    public void inheritFrom(Map<String, ?> source)\n            ExpressionEngine engine)\n",
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java": "    public void inheritFrom(Map<String, ?> source)\n    public INIBuilderParametersImpl setSeparatorUsedInOutput(String separator)\n",
            "src/main/java/org/apache/commons/configuration2/builder/JndiBuilderParametersImpl.java": "    public JndiBuilderParametersImpl setContext(Context ctx)\n    public JndiBuilderParametersImpl setPrefix(String p)\n",
            "src/main/java/org/apache/commons/configuration2/builder/PropertiesBuilderParametersImpl.java": "    public PropertiesBuilderParametersImpl setIncludesAllowed(boolean f)\n    public void inheritFrom(Map<String, ?> source)\n            PropertiesConfigurationLayout layout)\n    public PropertiesBuilderParametersImpl setIOFactory(IOFactory factory)\n",
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingBuilderSupportListener.java": "            BasicConfigurationBuilder<?> configBuilder,\n            ReloadingController controller)\n            BasicConfigurationBuilder<?> configBuilder,\n            ReloadingController controller)\n        ReloadingBuilderSupportListener listener =\n    public void onEvent(Event event)\n",
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingFileBasedConfigurationBuilder.java": "    public ReloadingFileBasedConfigurationBuilder(Class<? extends T> resCls,\n            Map<String, Object> params)\n    public ReloadingFileBasedConfigurationBuilder(Class<? extends T> resCls,\n            Map<String, Object> params, boolean allowFailOnInit)\n    public ReloadingFileBasedConfigurationBuilder(Class<? extends T> resCls)\n            BuilderParameters... params)\n    protected ReloadingDetector createReloadingDetector(FileHandler handler,\n            FileBasedBuilderParametersImpl fbparams)\n    protected void initFileHandler(FileHandler handler)\n        ReloadingDetector ctrlDetector = createReloadingDetectorForController();\n        ReloadingController ctrl = new ReloadingController(ctrlDetector);\n                ReloadingDetector detector = resultReloadingDetector;\n                ReloadingDetector detector = resultReloadingDetector;\n            FileBasedBuilderParametersImpl params)\n        ReloadingDetectorFactory factory = params.getReloadingDetectorFactory();\n",
            "src/main/java/org/apache/commons/configuration2/builder/XMLBuilderParametersImpl.java": "    public void inheritFrom(Map<String, ?> source)\n            DocumentBuilder docBuilder)\n    public XMLBuilderParametersImpl setEntityResolver(EntityResolver resolver)\n    public XMLBuilderParametersImpl setPublicID(String pubID)\n    public XMLBuilderParametersImpl setSystemID(String sysID)\n    public XMLBuilderParametersImpl setValidating(boolean f)\n    public XMLBuilderParametersImpl setSchemaValidation(boolean f)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/BaseConfigurationBuilderProvider.java": "    public BaseConfigurationBuilderProvider(String bldrCls,\n            String reloadBldrCls, String configCls, Collection<String> paramCls)\n            ConfigurationDeclaration decl) throws ConfigurationException\n            Collection<BuilderParameters> params = createParameterObjects();\n            BasicConfigurationBuilder<? extends Configuration> builder =\n        catch (ConfigurationException cex)\n        catch (Exception ex)\n    protected boolean isAllowFailOnInit(ConfigurationDeclaration decl)\n        Collection<BuilderParameters> params =\n        for (String paramcls : getParameterClasses())\n    protected void initializeParameterObjects(ConfigurationDeclaration decl,\n            Collection<BuilderParameters> params) throws Exception\n        MultiWrapDynaBean wrapBean = new MultiWrapDynaBean(params);\n            ConfigurationDeclaration decl, Collection<BuilderParameters> params)\n        for (BuilderParameters p : params)\n            ConfigurationDeclaration decl, Collection<BuilderParameters> params)\n        Class<?> bldCls =\n        Class<?> configCls =\n        Constructor<?> ctor = bldCls.getConstructor(CTOR_PARAM_TYPES);\n            BasicConfigurationBuilder<? extends Configuration> builder,\n            ConfigurationDeclaration decl, Collection<BuilderParameters> params)\n    protected String determineBuilderClass(ConfigurationDeclaration decl)\n    protected String determineConfigurationClass(ConfigurationDeclaration decl,\n            Collection<BuilderParameters> params) throws ConfigurationException\n    private static BuilderParameters createParameterObject(String paramcls)\n        Class<?> cls = ConfigurationUtils.loadClass(paramcls);\n        BuilderParameters p = (BuilderParameters) cls.newInstance();\n            Collection<String> paramCls)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedBuilderParametersImpl.java": "            Map<String, ?> params)\n            Map<String, ?> params, boolean createIfMissing)\n    public void inheritFrom(Map<String, ?> source)\n        CombinedBuilderParametersImpl srcParams = fromParameters(source);\n            boolean inheritSettings)\n            ConfigurationBuilder<? extends HierarchicalConfiguration<?>> builder)\n    public CombinedBuilderParametersImpl registerProvider(String tagName,\n            ConfigurationBuilderProvider provider)\n            Map<String, ConfigurationBuilderProvider> providers)\n        for (Map.Entry<String, ConfigurationBuilderProvider> e : providers\n            CombinedBuilderParametersImpl params)\n    public ConfigurationBuilderProvider providerForTag(String tagName)\n    public CombinedBuilderParametersImpl setBasePath(String path)\n            BuilderParameters params)\n            DefaultParametersManager manager)\n            Class<D> paramClass, DefaultParametersHandler<? super D> handler)\n            Class<D> paramClass, DefaultParametersHandler<? super D> handler,\n            Class<?> startClass)\n        Map<String, Object> params = super.getParameters();\n        CombinedBuilderParametersImpl copy =\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilder.java": "    public CombinedConfigurationBuilder(Map<String, Object> params)\n    public CombinedConfigurationBuilder(Map<String, Object> params, boolean allowFailOnInit)\n    public CombinedConfigurationBuilder configure(BuilderParameters... params)\n            String name) throws ConfigurationException\n        ConfigurationBuilder<? extends Configuration> builder =\n            Map<String, Object> params) throws ConfigurationException\n        CombinedBuilderParametersImpl cbParams =\n            ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder =\n        BuilderParameters fileParams =\n            BuilderParameters builderParams)\n    protected BeanDeclaration createResultDeclaration(Map<String, Object> params)\n        BeanDeclaration paramsDecl = super.createResultDeclaration(params);\n        XMLBeanDeclaration resultDecl =\n    protected void initResultInstance(CombinedConfiguration result)\n        HierarchicalConfiguration<?> config = getDefinitionConfiguration();\n        ConfigurationSourceData data = getSourceData();\n        boolean createBuilders = data.getChildBuilders().isEmpty();\n        List<ConfigurationBuilder<? extends Configuration>> overrideBuilders =\n            CombinedConfiguration addConfig = createAdditionalsConfiguration(result);\n            List<ConfigurationBuilder<? extends Configuration>> unionBuilders =\n            CombinedConfiguration resultConfig)\n        CombinedConfiguration addConfig =\n            HierarchicalConfiguration<?> defConfig, Configuration resultConfig)\n        Map<String, Lookup> lookups = new HashMap<>();\n        List<? extends HierarchicalConfiguration<?>> nodes =\n        for (HierarchicalConfiguration<?> config : nodes)\n            XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n            String key = config.getString(KEY_LOOKUP_KEY);\n            Lookup lookup = (Lookup) fetchBeanHelper().createBean(decl);\n            ConfigurationInterpolator defCI = defConfig.getInterpolator();\n    protected FileSystem initFileSystem(HierarchicalConfiguration<?> config)\n            XMLBeanDeclaration decl =\n    protected void initSystemProperties(HierarchicalConfiguration<?> config,\n            String basePath) throws ConfigurationException\n        String fileName = config.getString(KEY_SYSTEM_PROPS);\n            catch (Exception ex)\n    protected void configureEntityResolver(HierarchicalConfiguration<?> config,\n            XMLBuilderParametersImpl xmlParams) throws ConfigurationException\n            XMLBeanDeclaration decl =\n            EntityResolver resolver =\n            FileSystem fileSystem = xmlParams.getFileHandler().getFileSystem();\n            String basePath = xmlParams.getFileHandler().getBasePath();\n            ConfigurationInterpolator ci = new ConfigurationInterpolator();\n    protected ConfigurationBuilderProvider providerForTag(String tagName)\n    protected void initChildBuilderParameters(BuilderParameters params)\n            BasicConfigurationBuilder<? extends Configuration> dest)\n    void initBean(Object bean, BeanDeclaration decl)\n    private void setUpParentInterpolator(Configuration resultConfig,\n            Configuration defConfig)\n        ConfigurationInterpolator defInterpolator = defConfig.getInterpolator();\n            ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder =\n                URL url = fileBuilder.getFileHandler().getURL();\n    private void initDefaultChildParameters(BuilderParameters params)\n    private void initChildBasicParameters(BasicBuilderParameters params)\n            FileBasedBuilderProperties<?> params)\n    private void initChildXMLParameters(XMLBuilderProperties<?> params)\n            CombinedBuilderParametersImpl params)\n        ConfigurationSourceData result = new ConfigurationSourceData();\n    private void registerConfiguredProviders(HierarchicalConfiguration<?> defConfig)\n        List<? extends HierarchicalConfiguration<?>> nodes =\n        for (HierarchicalConfiguration<?> config : nodes)\n            XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n            String key = config.getString(KEY_PROVIDER_KEY);\n            public void onEvent(ConfigurationBuilderEvent event)\n        CombinedConfiguration cc = getConfigurationUnderConstruction();\n            Collection<? extends HierarchicalConfiguration<?>> configs)\n        Collection<ConfigurationDeclaration> declarations =\n        for (HierarchicalConfiguration<?> c : configs)\n    private static void initNodeCombinerListNodes(CombinedConfiguration cc,\n            HierarchicalConfiguration<?> defConfig, String key)\n        List<Object> listNodes = defConfig.getList(key);\n        for (Object listNode : listNodes)\n        Map<String, ConfigurationBuilderProvider> providers =\n                HierarchicalConfiguration<?> config) throws ConfigurationException\n                CombinedConfiguration ccResult,\n                List<ConfigurationDeclaration> srcDecl,\n                List<ConfigurationBuilder<? extends Configuration>> builders)\n            boolean createBuilders = builders.isEmpty();\n            for (ConfigurationBuilder<?> b : getChildBuilders())\n                String name)\n                ConfigurationDeclaration decl) throws ConfigurationException\n            ConfigurationBuilderProvider provider =\n            ConfigurationBuilder<? extends Configuration> builder =\n        private void addChildConfiguration(CombinedConfiguration ccResult,\n                ConfigurationDeclaration decl,\n                ConfigurationBuilder<? extends Configuration> builder)\n            catch (ConfigurationException cex)\n                public void onEvent(ConfigurationBuilderEvent event)\n                HierarchicalConfiguration<?> config)\n            List<? extends HierarchicalConfiguration<?>> configs =\n            for (Iterator<? extends HierarchicalConfiguration<?>> it =\n                String nodeName = it.next().getRootElementName();\n                for (String element : CONFIG_SECTIONS)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilderProvider.java": "            ConfigurationDeclaration decl, Collection<BuilderParameters> params)\n    protected void initializeParameterObjects(ConfigurationDeclaration decl,\n            Collection<BuilderParameters> params) throws Exception\n        BasicBuilderParameters basicParams =\n    private static void setUpBasicParameters(CombinedConfiguration config,\n            BasicBuilderParameters params)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ConfigurationDeclaration.java": "    public ConfigurationDeclaration(CombinedConfigurationBuilder builder,\n            HierarchicalConfiguration<?> config)\n        String result =\n    protected boolean isReservedAttributeName(String name)\n        Set<String> attributes = getAttributeNames();\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/FileExtensionConfigurationBuilderProvider.java": "    public FileExtensionConfigurationBuilderProvider(String bldrCls,\n            String reloadBldrCls, String matchingConfigCls,\n            String defConfigClass, String ext, Collection<String> paramCls)\n    protected String determineConfigurationClass(ConfigurationDeclaration decl,\n            Collection<BuilderParameters> params) throws ConfigurationException\n        String currentExt = extractExtension(fetchCurrentFileName(params));\n            Collection<BuilderParameters> params)\n        for (BuilderParameters p : params)\n                FileBasedBuilderParametersImpl fp = (FileBasedBuilderParametersImpl) p;\n    private static String extractExtension(String fileName)\n        int pos = fileName.lastIndexOf(EXT_SEPARATOR);\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileBuilderParametersImpl.java": "            Map<String, Object> params)\n            Map<String, Object> params, boolean createIfMissing)\n    public MultiFileBuilderParametersImpl setFilePattern(String p)\n            BuilderParameters p)\n        Map<String, Object> params = super.getParameters();\n        MultiFileBuilderParametersImpl copy =\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilder.java": "                public void onEvent(ConfigurationBuilderEvent event)\n    public MultiFileConfigurationBuilder(Class<? extends T> resCls,\n            Map<String, Object> params, boolean allowFailOnInit)\n    public MultiFileConfigurationBuilder(Class<? extends T> resCls,\n            Map<String, Object> params)\n    public MultiFileConfigurationBuilder(Class<? extends T> resCls)\n    public MultiFileConfigurationBuilder<T> configure(BuilderParameters... params)\n        Map<String, Object> params = getParameters();\n        MultiFileBuilderParametersImpl multiParams =\n        String fileName = fetchFileName(multiParams);\n            FileBasedConfigurationBuilder<T> newBuilder =\n            EventType<E> eventType, EventListener<? super E> l)\n            for (FileBasedConfigurationBuilder<T> b : getManagedBuilders()\n            EventType<E> eventType, EventListener<? super E> l)\n        boolean result = super.removeEventListener(eventType, l);\n            for (FileBasedConfigurationBuilder<T> b : getManagedBuilders()\n        for (FileBasedConfigurationBuilder<T> b : getManagedBuilders().values())\n        InterpolatorSpecification spec =\n            MultiFileBuilderParametersImpl multiParams)\n        ConfigurationInterpolator ci = getInterpolator();\n            String fileName, Map<String, Object> params)\n            String fileName, Map<String, Object> params)\n        FileBasedConfigurationBuilder<T> managedBuilder =\n    private void initListeners(FileBasedConfigurationBuilder<T> newBuilder)\n    private String fetchFileName(MultiFileBuilderParametersImpl multiParams)\n        Boolean reentrant = inInterpolation.get();\n    private void handleManagedBuilderEvent(ConfigurationBuilderEvent event)\n            ConfigurationBuilderEvent event)\n            Map<String, Object> params,\n            MultiFileBuilderParametersImpl multiParams)\n        Map<String, Object> newParams = new HashMap<>(params);\n        BuilderParameters managedBuilderParameters =\n            BuilderParameters copy =\n    private static boolean isEventTypeForManagedBuilders(EventType<?> eventType)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilderProvider.java": "    public MultiFileConfigurationBuilderProvider(String configCls,\n            String paramCls)\n            ConfigurationDeclaration decl) throws ConfigurationException\n        ConfigurationBuilder<? extends Configuration> multiBuilder =\n        Configuration wrapConfig = createWrapperConfiguration(multiBuilder);\n            ConfigurationBuilder builder)\n        Class<?> configClass =\n        Class ifcClass =\n            ConfigurationBuilder<? extends Configuration> multiBuilder,\n            Configuration wrapConfig)\n        public WrapperBuilder(Configuration conf,\n                ConfigurationBuilder<? extends Configuration> bldr)\n                EventType<T> eventType, EventListener<? super T> listener)\n                EventType<T> eventType, EventListener<? super T> listener)\n        public ReloadableWrapperBuilder(Configuration conf,\n                ConfigurationBuilder<? extends Configuration> bldr)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaBean.java": "    public MultiWrapDynaBean(Collection<?> beans)\n        Collection<DynaClass> beanClasses =\n        for (Object bean : beans)\n            DynaBean dynaBean = createDynaBean(bean);\n            DynaClass beanClass = dynaBean.getDynaClass();\n            for (DynaProperty prop : beanClass.getDynaProperties())\n    public boolean contains(String name, String key)\n    public Object get(String name)\n    public Object get(String name, int index)\n    public Object get(String name, String key)\n    public void remove(String name, String key)\n    public void set(String name, Object value)\n    public void set(String name, int index, Object value)\n    public void set(String name, String key, Object value)\n    private DynaBean fetchBean(String property)\n    private static DynaBean createDynaBean(Object bean)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaClass.java": "    public MultiWrapDynaClass(Collection<? extends DynaClass> wrappedCls)\n    public DynaProperty getDynaProperty(String name)\n    private void initProperties(Collection<? extends DynaClass> wrappedCls)\n        for (DynaClass cls : wrappedCls)\n            DynaProperty[] props = cls.getDynaProperties();\n            for (DynaProperty p : props)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java": "    public ReloadingCombinedConfigurationBuilder(Map<String, Object> params,\n            boolean allowFailOnInit)\n    public ReloadingCombinedConfigurationBuilder(Map<String, Object> params)\n    public ReloadingCombinedConfigurationBuilder configure(BuilderParameters... params)\n        CombinedConfiguration result = super.getConfiguration();\n            BuilderParameters builderParams)\n    protected void initResultInstance(CombinedConfiguration result)\n        Collection<ReloadingController> subControllers =\n        ConfigurationBuilder<? extends HierarchicalConfiguration<?>> defBuilder =\n        for (ConfigurationBuilder<? extends Configuration> b : getChildBuilders())\n        CombinedReloadingController ctrl =\n            Collection<ReloadingController> subControllers, Object builder)\n",
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingMultiFileConfigurationBuilder.java": "    public ReloadingMultiFileConfigurationBuilder(Class<T> resCls,\n            Map<String, Object> params, boolean allowFailOnInit)\n    public ReloadingMultiFileConfigurationBuilder(Class<T> resCls,\n            Map<String, Object> params)\n    public ReloadingMultiFileConfigurationBuilder(Class<T> resCls)\n            String fileName, Map<String, Object> params)\n        Set<ReloadingController> empty = Collections.emptySet();\n                Collection<FileBasedConfigurationBuilder<T>> builders =\n                Collection<ReloadingController> controllers =\n                for (FileBasedConfigurationBuilder<T> b : builders)\n",
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Configurations.java": "    public Configurations(Parameters params)\n            Class<T> configClass, File file)\n            Class<T> configClass, URL url)\n            Class<T> configClass, String path)\n    public <T extends FileBasedConfiguration> T fileBased(Class<T> configClass,\n            File file) throws ConfigurationException\n    public <T extends FileBasedConfiguration> T fileBased(Class<T> configClass,\n            URL url) throws ConfigurationException\n    public <T extends FileBasedConfiguration> T fileBased(Class<T> configClass,\n            String path) throws ConfigurationException\n            File file)\n            URL url)\n            String path)\n    public PropertiesConfiguration properties(File file)\n    public PropertiesConfiguration properties(URL url)\n    public PropertiesConfiguration properties(String path)\n    public FileBasedConfigurationBuilder<XMLConfiguration> xmlBuilder(File file)\n    public FileBasedConfigurationBuilder<XMLConfiguration> xmlBuilder(URL url)\n            String path)\n    public XMLConfiguration xml(File file) throws ConfigurationException\n    public XMLConfiguration xml(URL url) throws ConfigurationException\n    public XMLConfiguration xml(String path) throws ConfigurationException\n    public FileBasedConfigurationBuilder<INIConfiguration> iniBuilder(File file)\n    public FileBasedConfigurationBuilder<INIConfiguration> iniBuilder(URL url)\n            String path)\n    public INIConfiguration ini(File file) throws ConfigurationException\n    public INIConfiguration ini(URL url) throws ConfigurationException\n    public INIConfiguration ini(String path) throws ConfigurationException\n    public CombinedConfigurationBuilder combinedBuilder(File file)\n    public CombinedConfigurationBuilder combinedBuilder(URL url)\n    public CombinedConfigurationBuilder combinedBuilder(String path)\n    public CombinedConfiguration combined(File file)\n    public CombinedConfiguration combined(URL url)\n    public CombinedConfiguration combined(String path)\n            Class<T> configClass, FileBasedBuilderParameters params)\n    private FileBasedBuilderParameters fileParams(File file)\n    private FileBasedBuilderParameters fileParams(URL url)\n    private FileBasedBuilderParameters fileParams(String path)\n",
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Parameters.java": "    public Parameters(DefaultParametersManager manager)\n    public <T> void registerDefaultsHandler(Class<T> paramsClass,\n            DefaultParametersHandler<? super T> handler)\n    public <T> void registerDefaultsHandler(Class<T> paramsClass,\n            DefaultParametersHandler<? super T> handler, Class<?> startClass)\n    private <T> T createParametersProxy(Object target, Class<T> ifcClass,\n            Class<?>... superIfcs)\n        Class<?>[] ifcClasses = new Class<?>[1 + superIfcs.length];\n        Object obj =\n        public ParametersIfcInvocationHandler(Object targetObj)\n        public Object invoke(Object proxy, Method method, Object[] args)\n            Object result = method.invoke(target, args);\n        private static boolean isFluentResult(Method method)\n            Class<?> declaringClass = method.getDeclaringClass();\n",
            "src/main/java/org/apache/commons/configuration2/convert/AbstractListDelimiterHandler.java": "    public Iterable<?> parse(Object value)\n    public Collection<String> split(String s, boolean trim)\n    public Object escape(Object value, ValueTransformer transformer)\n        Object escValue =\n    Collection<?> flatten(Object value, int limit)\n        Collection<Object> result = new LinkedList<>();\n    private Collection<?> flatten(Object value)\n    private void flattenIterator(Collection<Object> target, Iterator<?> it, int limit)\n",
            "src/main/java/org/apache/commons/configuration2/convert/DefaultConversionHandler.java": "                public Object interpolate(Object value)\n        String fmt = dateFormat;\n    public void setDateFormat(String dateFormat)\n    public <T> T to(Object src, Class<T> targetCls, ConfigurationInterpolator ci)\n        ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n    public Object toArray(Object src, Class<?> elemClass,\n            ConfigurationInterpolator ci)\n        ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n    public <T> void toCollection(Object src, Class<T> elemClass,\n            ConfigurationInterpolator ci, Collection<T> dest)\n            ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n    protected boolean isComplexObject(Object src)\n    protected boolean isEmptyElement(Object src)\n    protected <T> T convert(Object src, Class<T> targetCls,\n            ConfigurationInterpolator ci)\n        Object conversionSrc =\n    protected Collection<?> extractValues(Object source, int limit)\n    protected Collection<?> extractValues(Object source)\n    protected Object extractConversionValue(Object container,\n            Class<?> targetCls, ConfigurationInterpolator ci)\n        Collection<?> values = extractValues(container, 1);\n    protected <T> T convertValue(Object src, Class<T> targetCls,\n            ConfigurationInterpolator ci)\n    private <T> T[] toObjectArray(Object src, Class<T> elemClass,\n            ConfigurationInterpolator ci)\n        Collection<T> convertedCol = new LinkedList<>();\n    private Object toPrimitiveArray(Object src, Class<?> elemClass,\n            ConfigurationInterpolator ci)\n                int length = Array.getLength(src);\n                Object array = Array.newInstance(elemClass, length);\n        Collection<?> values = extractValues(src);\n        Class<?> targetClass = ClassUtils.primitiveToWrapper(elemClass);\n        Object array = Array.newInstance(elemClass, values.size());\n        for (Object value : values)\n    private <T> void convertToCollection(Object src, Class<T> elemClass,\n            ConfigurationInterpolator ci, Collection<T> dest)\n        for (Object o : extractValues(ci.interpolate(src)))\n            ConfigurationInterpolator ci)\n",
            "src/main/java/org/apache/commons/configuration2/convert/DefaultListDelimiterHandler.java": "    public DefaultListDelimiterHandler(char listDelimiter)\n    public Object escapeList(List<?> values, ValueTransformer transformer)\n        Object[] escapedValues = new String[values.size()];\n        for (Object v : values)\n    protected String escapeString(String s)\n        StringBuilder buf = new StringBuilder(s.length() + BUF_SIZE);\n            char c = s.charAt(i);\n    protected Collection<String> splitString(String s, boolean trim)\n        List<String> list = new LinkedList<>();\n            char c = s.charAt(i);\n",
            "src/main/java/org/apache/commons/configuration2/convert/DisabledListDelimiterHandler.java": "    public Object escapeList(List<?> values, ValueTransformer transformer)\n    protected Collection<String> splitString(String s, boolean trim)\n        Collection<String> result = new ArrayList<>(1);\n    protected String escapeString(String s)\n",
            "src/main/java/org/apache/commons/configuration2/convert/LegacyListDelimiterHandler.java": "    public LegacyListDelimiterHandler(char listDelimiter)\n    public Object escape(Object value, ValueTransformer transformer)\n    public Object escapeList(List<?> values, ValueTransformer transformer)\n            Iterator<?> it = values.iterator();\n            StringBuilder buf = new StringBuilder(lastValue);\n    protected Collection<String> splitString(String s, boolean trim)\n        List<String> list = new ArrayList<>();\n        char esc = ESCAPE.charAt(0);\n            char c = s.charAt(begin);\n    protected String escapeString(String s)\n    protected String escapeBackslashs(Object value, boolean inList)\n    protected String escapeValue(Object value, boolean inList,\n            ValueTransformer transformer)\n    private static int countTrailingBS(String line)\n",
            "src/main/java/org/apache/commons/configuration2/convert/ListDelimiterHandler.java": "        public Object transformValue(Object value)\n",
            "src/main/java/org/apache/commons/configuration2/convert/PropertyConverter.java": "    public static Object to(Class<?> cls, Object value,\n            DefaultConversionHandler convHandler) throws ConversionException\n    public static Boolean toBoolean(Object value) throws ConversionException\n            Boolean b = BooleanUtils.toBooleanObject((String) value);\n    public static Character toCharacter(Object value) throws ConversionException\n        String strValue = String.valueOf(value);\n    public static Byte toByte(Object value) throws ConversionException\n        Number n = toNumber(value, Byte.class);\n    public static Short toShort(Object value) throws ConversionException\n        Number n = toNumber(value, Short.class);\n    public static Integer toInteger(Object value) throws ConversionException\n        Number n = toNumber(value, Integer.class);\n    public static Long toLong(Object value) throws ConversionException\n        Number n = toNumber(value, Long.class);\n    public static Float toFloat(Object value) throws ConversionException\n        Number n = toNumber(value, Float.class);\n    public static Double toDouble(Object value) throws ConversionException\n        Number n = toNumber(value, Double.class);\n    public static BigInteger toBigInteger(Object value) throws ConversionException\n        Number n = toNumber(value, BigInteger.class);\n    public static BigDecimal toBigDecimal(Object value) throws ConversionException\n        Number n = toNumber(value, BigDecimal.class);\n    static Number toNumber(Object value, Class<?> targetClass) throws ConversionException\n        String str = value.toString();\n            catch (NumberFormatException nex)\n            catch (NumberFormatException nex)\n            Constructor<?> constr = targetClass.getConstructor(CONSTR_ARGS);\n        catch (InvocationTargetException itex)\n        catch (Exception ex)\n    public static File toFile(Object value) throws ConversionException\n    public static Path toPath(Object value) throws ConversionException\n    public static URI toURI(Object value) throws ConversionException\n            catch (URISyntaxException e)\n    public static URL toURL(Object value) throws ConversionException\n            catch (MalformedURLException e)\n    public static Pattern toPattern(Object value) throws ConversionException\n            catch (PatternSyntaxException e)\n    public static Locale toLocale(Object value) throws ConversionException\n            String[] elements = ((String) value).split(\"_\");\n            int size = elements.length;\n                String language = elements[0];\n                String country = (size >= 2) ? elements[1] : \"\";\n                String variant = (size >= 3) ? elements[2] : \"\";\n    public static Color toColor(Object value) throws ConversionException\n            int[] components = new int[3];\n            int minlength = components.length * 2;\n            catch (Exception e)\n    static InetAddress toInetAddress(Object value) throws ConversionException\n            catch (UnknownHostException e)\n    static Object toInternetAddress(Object value) throws ConversionException\n                Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME)\n            catch (Exception e)\n    static boolean isEnum(Class<?> cls)\n    static <E extends Enum<E>> E toEnum(Object value, Class<E> cls) throws ConversionException\n            catch (Exception e)\n                E[] enumConstants = cls.getEnumConstants();\n            catch (Exception e)\n    public static Date toDate(Object value, String format) throws ConversionException\n            catch (ParseException e)\n    public static Calendar toCalendar(Object value, String format) throws ConversionException\n            Calendar calendar = Calendar.getInstance();\n                Calendar calendar = Calendar.getInstance();\n            catch (ParseException e)\n    private static Object convertToEnum(Class<?> enumClass, Object value)\n",
            "src/main/java/org/apache/commons/configuration2/event/BaseEventSource.java": "            EventType<T> eventType)\n        List<EventListener<? super T>> result =\n        for (EventListener<? super T> l : eventListeners\n    public void setDetailEvents(boolean enable)\n    public <T extends Event> void addEventListener(EventType<T> eventType,\n            EventListener<? super T> listener)\n            EventType<T> eventType, EventListener<? super T> listener)\n        for (EventListenerRegistrationData<? extends ConfigurationErrorEvent> reg : eventListeners\n    public void copyEventListeners(BaseEventSource source)\n    protected <T extends ConfigurationEvent> void fireEvent(EventType<T> type,\n            String propName, Object propValue, boolean before)\n            EventListenerList.EventListenerIterator<T> it =\n                ConfigurationEvent event =\n            EventType<T> type, String propName, Object propValue, boolean before)\n            EventType<T> eventType, EventType<?> operationType,\n            String propertyName, Object propertyValue, Throwable cause)\n        EventListenerList.EventListenerIterator<T> iterator =\n            ConfigurationErrorEvent event =\n            EventType<? extends ConfigurationErrorEvent> type,\n            EventType<?> opType, String propName, Object propValue, Throwable ex)\n        BaseEventSource copy = (BaseEventSource) super.clone();\n    private boolean checkDetailEvents(int limit)\n",
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationErrorEvent.java": "    public ConfigurationErrorEvent(Object source,\n            EventType<? extends ConfigurationErrorEvent> eventType,\n            EventType<?> operationType, String propName, Object propValue,\n            Throwable cause)\n",
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationEvent.java": "    public ConfigurationEvent(Object source,\n            EventType<? extends ConfigurationEvent> type, String propertyName,\n            Object propertyValue, boolean beforeUpdate)\n",
            "src/main/java/org/apache/commons/configuration2/event/Event.java": "    public Event(Object source, EventType<? extends Event> evType)\n        StringBuilder buf = new StringBuilder(BUF_SIZE);\n    protected void appendPropertyRepresentation(StringBuilder buf,\n            String property, Object value)\n",
            "src/main/java/org/apache/commons/configuration2/event/EventListenerList.java": "    public <T extends Event> void addEventListener(EventType<T> type,\n            EventListener<? super T> listener)\n            EventListenerRegistrationData<T> regData)\n            EventType<T> eventType, EventListener<? super T> listener)\n            EventListenerRegistrationData<T> regData)\n    public void fire(Event event)\n        for (EventListenerIterator<? extends Event> iterator =\n            EventType<T> eventType)\n            EventType<T> eventType)\n        Map<EventType<?>, Set<EventType<?>>> superTypes =\n        List<EventListenerRegistrationData<? extends T>> results =\n        for (EventListenerRegistrationData<?> reg : listeners)\n    public void addAll(EventListenerList c)\n        for (EventListenerRegistrationData<?> regData : c.getRegistrations())\n    private static void callListener(EventListener<?> listener, Event event)\n                Iterator<EventListenerRegistrationData<?>> it, EventType<T> base)\n            EventListener<? super T> result = nextElement;\n        public void invokeNext(Event event)\n                EventListenerRegistrationData<?> regData =\n        private void validateEvent(Event event)\n        private void invokeNextListenerUnchecked(Event event)\n            EventListener<? super T> listener = next();\n                EventListenerRegistrationData<?> regData)\n",
            "src/main/java/org/apache/commons/configuration2/event/EventListenerRegistrationData.java": "    public EventListenerRegistrationData(EventType<T> type,\n            EventListener<? super T> lstnr)\n    public boolean equals(Object obj)\n        EventListenerRegistrationData<?> c =\n",
            "src/main/java/org/apache/commons/configuration2/event/EventType.java": "    public EventType(EventType<? super T> superEventType, String typeName)\n    public static Set<EventType<?>> fetchSuperEventTypes(EventType<?> eventType)\n        Set<EventType<?>> types = new HashSet<>();\n    public static boolean isInstanceOf(EventType<?> derivedType,\n            EventType<?> baseType)\n",
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationException.java": "    public ConfigurationException(String message)\n    public ConfigurationException(Throwable cause)\n    public ConfigurationException(String message, Throwable cause)\n",
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationRuntimeException.java": "    public ConfigurationRuntimeException(String message)\n    public ConfigurationRuntimeException(String message, Object... args)\n    public ConfigurationRuntimeException(Throwable cause)\n    public ConfigurationRuntimeException(String message, Throwable cause)\n",
            "src/main/java/org/apache/commons/configuration2/ex/ConversionException.java": "    public ConversionException(String message)\n    public ConversionException(Throwable cause)\n    public ConversionException(String message, Throwable cause)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": "            InterpolatorSpecification spec)\n    public void registerLookup(String prefix, Lookup lookup)\n    public void registerLookups(Map<String, ? extends Lookup> lookups)\n    public boolean deregisterLookup(String prefix)\n    public void addDefaultLookup(Lookup defaultLookup)\n    public void addDefaultLookups(Collection<? extends Lookup> lookups)\n    public boolean removeDefaultLookup(Lookup lookup)\n            ConfigurationInterpolator parentInterpolator)\n    public void setEnableSubstitutionInVariables(boolean f)\n    public Object interpolate(Object value)\n            String strValue = (String) value;\n                Object resolvedValue = resolveSingleVariable(strValue);\n    public Object resolve(String var)\n        int prefixPos = var.indexOf(PREFIX_SEPARATOR);\n            String prefix = var.substring(0, prefixPos);\n            String name = var.substring(prefixPos + 1);\n            Object value = fetchLookupForPrefix(prefix).lookup(name);\n        for (Lookup lookup : defaultLookups)\n            Object value = lookup.lookup(var);\n        ConfigurationInterpolator parent = getParentInterpolator();\n    protected Lookup fetchLookupForPrefix(String prefix)\n            public String lookup(String key)\n                Object result = resolve(key);\n    private Object resolveSingleVariable(String strValue)\n    private static boolean looksLikeSingleVariable(String strValue)\n    private static String extractVariableName(String strValue)\n            InterpolatorSpecification spec)\n        ConfigurationInterpolator ci = new ConfigurationInterpolator();\n        Map<String, Lookup> lookups = new HashMap<>();\n        for (DefaultLookups l : DefaultLookups.values())\n",
            "src/main/java/org/apache/commons/configuration2/interpol/ConstantLookup.java": "    public Object lookup(String var)\n        int fieldPos = var.lastIndexOf(FIELD_SEPRATOR);\n            Object value = resolveField(var.substring(0, fieldPos), var\n        catch (Exception ex)\n    protected Object resolveField(String className, String fieldName)\n        Class<?> clazz = fetchClass(className);\n        Field field = clazz.getField(fieldName);\n    protected Class<?> fetchClass(String className) throws ClassNotFoundException\n",
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java": "    private DefaultLookups(String prfx, Lookup look)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/DummyLookup.java": "    public Object lookup(String variable)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/EnvironmentLookup.java": "    public String lookup(String key)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/ExprLookup.java": "    public ExprLookup(Variables list)\n    public ExprLookup(Variables list, String prefix, String suffix)\n    public void setVariablePrefixMatcher(String prefix)\n    public void setVariableSuffixMatcher(String suffix)\n    public void setVariables(Variables list)\n    public void setLogger(ConfigurationLogger logger)\n    public void setInterpolator(ConfigurationInterpolator interpolator)\n    public String lookup(String var)\n            Expression exp = engine.createExpression(result);\n            Object exprResult = exp.evaluate(createContext());\n        catch (Exception e)\n            ConfigurationLogger l = getLogger();\n            StringLookup variableResolver = new StringLookup()\n                public String lookup(String key)\n                    Object value = ip.resolve(key);\n        JexlContext ctx = new MapContext();\n    private void initializeContext(JexlContext ctx)\n        for (Variable var : variables)\n        public Variables(Variables vars)\n        public Variable(String name, Object value)\n        public void setName(String name)\n        public void setValue(Object value) throws ConfigurationRuntimeException\n                String val = (String) value;\n                String name = StringUtils.removeStartIgnoreCase(val, CLASS);\n                Class<?> clazz = ClassUtils.getClass(name);\n            catch (Exception e)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/InterpolatorSpecification.java": "    private InterpolatorSpecification(Builder builder)\n        public Builder withPrefixLookup(String prefix, Lookup lookup)\n        public Builder withPrefixLookups(Map<String, ? extends Lookup> lookups)\n                for (Map.Entry<String, ? extends Lookup> e : lookups.entrySet())\n        public Builder withDefaultLookup(Lookup lookup)\n        public Builder withDefaultLookups(Collection<? extends Lookup> lookups)\n                for (Lookup l : lookups)\n        public Builder withInterpolator(ConfigurationInterpolator ci)\n        public Builder withParentInterpolator(ConfigurationInterpolator parent)\n            InterpolatorSpecification spec =\n        private static void checkLookup(Lookup lookup)\n",
            "src/main/java/org/apache/commons/configuration2/interpol/SystemPropertiesLookup.java": "    public Object lookup(String variable)\n",
            "src/main/java/org/apache/commons/configuration2/io/AbsoluteNameLocationStrategy.java": "    public URL locate(FileSystem fileSystem, FileLocator locator)\n            File file = new File(locator.getFileName());\n",
            "src/main/java/org/apache/commons/configuration2/io/BasePathLocationStrategy.java": "    public URL locate(FileSystem fileSystem, FileLocator locator)\n            File file =\n",
            "src/main/java/org/apache/commons/configuration2/io/ClasspathLocationStrategy.java": "    public URL locate(FileSystem fileSystem, FileLocator locator)\n",
            "src/main/java/org/apache/commons/configuration2/io/CombinedLocationStrategy.java": "            Collection<? extends FileLocationStrategy> subs)\n    public URL locate(FileSystem fileSystem, FileLocator locator)\n        for (FileLocationStrategy sub : getSubStrategies())\n            URL url = sub.locate(fileSystem, locator);\n",
            "src/main/java/org/apache/commons/configuration2/io/ConfigurationLogger.java": "    public ConfigurationLogger(String loggerName)\n    public ConfigurationLogger(Class<?> logCls)\n    ConfigurationLogger(Log wrapped)\n    public void debug(String msg)\n    public void info(String msg)\n    public void warn(String msg)\n    public void warn(String msg, Throwable ex)\n    public void error(String msg)\n    public void error(String msg, Throwable ex)\n    private static Log createLoggerForName(String name)\n    private static Log createLoggerForClass(Class<?> cls)\n",
            "src/main/java/org/apache/commons/configuration2/io/DefaultFileSystem.java": "    public InputStream getInputStream(URL url) throws ConfigurationException\n        File file = FileLocatorUtils.fileFromURL(url);\n        catch (Exception e)\n    public OutputStream getOutputStream(URL url) throws ConfigurationException\n        File file = FileLocatorUtils.fileFromURL(url);\n            URLConnection connection = url.openConnection();\n                HttpURLConnection conn = (HttpURLConnection) connection;\n        catch (IOException e)\n    public OutputStream getOutputStream(File file) throws ConfigurationException\n        catch (FileNotFoundException e)\n    public String getPath(File file, URL url, String basePath, String fileName)\n                catch (Exception e)\n    public String getBasePath(String path)\n        catch (Exception e)\n    public String getFileName(String path)\n        catch (Exception e)\n    public URL getURL(String basePath, String file) throws MalformedURLException\n        File f = new File(file);\n            URL base = new URL(basePath);\n        catch (MalformedURLException uex)\n    public URL locateFromURL(String basePath, String fileName)\n            URL baseURL = new URL(basePath);\n        catch (IOException e)\n    private void createPath(File file) throws ConfigurationException\n                File parent = file.getParentFile();\n        public HttpOutputStream(OutputStream stream, HttpURLConnection connection)\n        public void write(byte[] bytes) throws IOException\n        public void write(byte[] bytes, int i, int i1) throws IOException\n        public void write(int i) throws IOException\n",
            "src/main/java/org/apache/commons/configuration2/io/FileHandler.java": "                public void unlock(LockMode mode)\n                public void setSynchronizer(Synchronizer sync)\n                public void lock(LockMode mode)\n    public FileHandler(FileBased obj)\n    public FileHandler(FileBased obj, FileHandler c)\n    private FileHandler(FileBased obj, FileLocator locator)\n    public static FileHandler fromMap(Map<String, ?> map)\n    public void addFileHandlerListener(FileHandlerListener l)\n    public void removeFileHandlerListener(FileHandlerListener l)\n        FileLocator locator = getFileLocator();\n    public void setFileName(String fileName)\n            protected void updateBuilder(FileLocatorBuilder builder)\n        FileLocator locator = getFileLocator();\n    public void setBasePath(String basePath)\n            protected void updateBuilder(FileLocatorBuilder builder)\n    public void setFile(File file)\n            protected void updateBuilder(FileLocatorBuilder builder)\n        FileLocator locator = getFileLocator();\n        File file = createFile(locator);\n    public void setPath(String path)\n        FileLocator locator = getFileLocator();\n            protected void updateBuilder(FileLocatorBuilder builder)\n    public void setFileLocator(FileLocator locator)\n            protected void updateBuilder(FileLocatorBuilder builder)\n            protected void updateBuilder(FileLocatorBuilder builder)\n            protected void updateBuilder(FileLocatorBuilder builder)\n            protected void updateBuilder(FileLocatorBuilder builder)\n            FileLocator locator = getFileLocator();\n    public void load(String fileName) throws ConfigurationException\n    public void load(File file) throws ConfigurationException\n        catch (MalformedURLException e1)\n    public void load(URL url) throws ConfigurationException\n    public void load(InputStream in) throws ConfigurationException\n    public void load(InputStream in, String encoding)\n    public void load(Reader in) throws ConfigurationException\n    public void save(String fileName) throws ConfigurationException\n    public void save(URL url) throws ConfigurationException\n    public void save(File file) throws ConfigurationException\n    public void save(OutputStream out) throws ConfigurationException\n    public void save(OutputStream out, String encoding)\n    public void save(Writer out) throws ConfigurationException\n            FileLocator locator = prepareNullLocatorBuilder().create();\n    private void injectFileLocator(URL url)\n                FileLocator locator =\n    private void load(FileLocator locator) throws ConfigurationException\n        URL url = FileLocatorUtils.locateOrThrow(locator);\n    private void load(URL url, FileLocator locator) throws ConfigurationException\n        catch (ConfigurationException e)\n        catch (Exception e)\n    private void load(String fileName, FileLocator locator)\n        FileLocator locFileName = createLocatorWithFileName(fileName, locator);\n        URL url = FileLocatorUtils.locateOrThrow(locFileName);\n    private void load(InputStream in, FileLocator locator)\n    private void loadFromStream(InputStream in, String encoding, URL url)\n        SynchronizerSupport syncSupport = fetchSynchronizerSupport();\n    private void loadFromStreamDirectly(InputStream in)\n        catch (IOException e)\n    private void loadFromTransformedStream(InputStream in, String encoding)\n            catch (UnsupportedEncodingException e)\n    private void loadFromReader(Reader in) throws ConfigurationException\n        catch (IOException ioex)\n    private void save(FileLocator locator) throws ConfigurationException\n    private void save(String fileName, FileLocator locator)\n        catch (MalformedURLException e)\n    private void save(URL url, FileLocator locator) throws ConfigurationException\n                catch (IOException e)\n    private void save(File file, FileLocator locator) throws ConfigurationException\n        catch (MalformedURLException muex)\n    private void save(OutputStream out, FileLocator locator)\n    private void saveToStream(OutputStream out, String encoding, URL url)\n        SynchronizerSupport syncSupport = fetchSynchronizerSupport();\n                catch (UnsupportedEncodingException e)\n    private void saveToWriter(Writer out) throws ConfigurationException\n        catch (IOException ioex)\n    private FileLocator createLocatorWithFileName(String fileName,\n            FileLocator locator)\n        for (FileHandlerListener l : listeners)\n        for (FileHandlerListener l : listeners)\n        for (FileHandlerListener l : listeners)\n        for (FileHandlerListener l : listeners)\n        for (FileHandlerListener l : listeners)\n    private static void closeSilent(Closeable cl)\n        catch (IOException e)\n    private static File createFile(FileLocator loc)\n    private static FileHandler checkSourceHandler(FileHandler c)\n                FileLocator oldLocator = fileLocator.get();\n                FileLocatorBuilder builder =\n",
            "src/main/java/org/apache/commons/configuration2/io/FileHandlerListenerAdapter.java": "    public void loading(FileHandler handler)\n    public void loaded(FileHandler handler)\n    public void saving(FileHandler handler)\n    public void saved(FileHandler handler)\n    public void locationChanged(FileHandler handler)\n",
            "src/main/java/org/apache/commons/configuration2/io/FileLocator.java": "    public FileLocator(FileLocatorBuilder builder)\n    public boolean equals(Object obj)\n        FileLocator c = (FileLocator) obj;\n        FileLocatorBuilder(FileLocator src)\n        public FileLocatorBuilder encoding(String enc)\n        public FileLocatorBuilder fileSystem(FileSystem fs)\n        public FileLocatorBuilder basePath(String path)\n        public FileLocatorBuilder fileName(String name)\n        public FileLocatorBuilder sourceURL(URL url)\n        public FileLocatorBuilder locationStrategy(FileLocationStrategy strategy)\n        private void initBuilder(FileLocator src)\n",
            "src/main/java/org/apache/commons/configuration2/io/FileLocatorUtils.java": "    public static File fileFromURL(URL url)\n    public static FileLocator.FileLocatorBuilder fileLocator(FileLocator src)\n    public static FileLocator fromMap(Map<String, ?> map)\n        FileLocator.FileLocatorBuilder builder = fileLocator();\n    public static void put(FileLocator locator, Map<String, Object> map)\n    public static boolean isLocationDefined(FileLocator locator)\n    public static boolean isFullyInitialized(FileLocator locator)\n    public static FileLocator fullyInitializedLocator(FileLocator locator)\n        URL url = locate(locator);\n    public static URL locate(FileLocator locator)\n    public static URL locateOrThrow(FileLocator locator)\n        URL url = locate(locator);\n    static String getBasePath(URL url)\n    static String getFileName(URL url)\n        String path = url.getPath();\n    static File getFile(String basePath, String fileName)\n        File f = new File(fileName);\n        catch (MalformedURLException mex1)\n            catch (MalformedURLException mex2)\n    static URL toURL(File file) throws MalformedURLException\n    static URL convertURIToURL(URI uri)\n        catch (MalformedURLException e)\n    static URL convertFileToURL(File file)\n    static URL locateFromClasspath(String resourceName)\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n    static File constructFile(String basePath, String fileName)\n        File absolute = new File(fileName);\n    static String appendPath(String path, String ext)\n        StringBuilder fName = new StringBuilder();\n    static FileSystem obtainFileSystem(FileLocator locator)\n    static FileLocationStrategy obtainLocationStrategy(FileLocator locator)\n    private static FileLocator createFullyInitializedLocatorFromURL(FileLocator src,\n            URL url)\n        FileLocator.FileLocatorBuilder fileLocatorBuilder = fileLocator(src);\n        FileLocationStrategy[] subStrategies =\n",
            "src/main/java/org/apache/commons/configuration2/io/FileSystem.java": "        ConfigurationLogger result = log;\n    public void setLogger(ConfigurationLogger log)\n    public void setFileOptionsProvider(FileOptionsProvider provider)\n",
            "src/main/java/org/apache/commons/configuration2/io/FileSystemLocationStrategy.java": "    public URL locate(FileSystem fileSystem, FileLocator locator)\n",
            "src/main/java/org/apache/commons/configuration2/io/HomeDirectoryLocationStrategy.java": "    public HomeDirectoryLocationStrategy(String homeDir, boolean withBasePath)\n    public HomeDirectoryLocationStrategy(boolean withBasePath)\n    public URL locate(FileSystem fileSystem, FileLocator locator)\n            String basePath = fetchBasePath(locator);\n            File file =\n    private String fetchBasePath(FileLocator locator)\n    private static String fetchHomeDirectory(String homeDir)\n",
            "src/main/java/org/apache/commons/configuration2/io/ProvidedURLLocationStrategy.java": "    public URL locate(FileSystem fileSystem, FileLocator locator)\n",
            "src/main/java/org/apache/commons/configuration2/io/VFSFileSystem.java": "    public InputStream getInputStream(URL url) throws ConfigurationException\n            FileSystemOptions opts = getOptions(url.getProtocol());\n            FileContent content = file.getContent();\n                String msg = \"Cannot access content of \" + file.getName().getFriendlyURI();\n        catch (FileSystemException fse)\n            String msg = \"Unable to access \" + url.toString();\n    public OutputStream getOutputStream(URL url) throws ConfigurationException\n            FileSystemOptions opts = getOptions(url.getProtocol());\n            FileSystemManager fsManager = VFS.getManager();\n            FileObject file = (opts == null) ? fsManager.resolveFile(url.toString())\n            FileContent content = file.getContent();\n        catch (FileSystemException fse)\n    public String getPath(File file, URL url, String basePath, String fileName)\n            FileSystemManager fsManager = VFS.getManager();\n                FileName name = fsManager.resolveURI(url.toString());\n                FileName base = fsManager.resolveURI(basePath);\n                FileName name = fsManager.resolveURI(fileName);\n                FileName base = name.getParent();\n        catch (FileSystemException fse)\n    public String getBasePath(String path)\n            FileSystemManager fsManager = VFS.getManager();\n            FileName name = fsManager.resolveURI(path);\n        catch (FileSystemException fse)\n    public String getFileName(String path)\n            FileSystemManager fsManager = VFS.getManager();\n            FileName name = fsManager.resolveURI(path);\n        catch (FileSystemException fse)\n    public URL getURL(String basePath, String file) throws MalformedURLException\n            FileSystemManager fsManager = VFS.getManager();\n                FileName base = fsManager.resolveURI(basePath);\n            URLStreamHandler handler = new VFSURLStreamHandler(path);\n        catch (FileSystemException fse)\n    public URL locateFromURL(String basePath, String fileName)\n        String fileScheme = UriParser.extractScheme(fileName);\n            FileSystemManager fsManager = VFS.getManager();\n                String scheme = UriParser.extractScheme(basePath);\n                FileSystemOptions opts = (scheme != null) ? getOptions(scheme) : null;\n                FileSystemOptions opts = (fileScheme != null) ? getOptions(fileScheme) : null;\n            FileName path = file.getName();\n            URLStreamHandler handler = new VFSURLStreamHandler(path);\n        catch (FileSystemException fse)\n        catch (MalformedURLException ex)\n    private FileSystemOptions getOptions(String scheme)\n        FileSystemOptions opts = new FileSystemOptions();\n        catch (Exception ex)\n        FileOptionsProvider provider = getFileOptionsProvider();\n            Map<String, Object> map = provider.getOptions();\n            for (Map.Entry<String, Object> entry : map.entrySet())\n                catch (Exception ex)\n    private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options,\n                             String key, Object value)\n        String methodName = \"set\" + key.substring(0, 1).toUpperCase() + key.substring(1);\n        Class<?>[] paramTypes = new Class<?>[2];\n            Method method = builder.getClass().getMethod(methodName, paramTypes);\n            Object[] params = new Object[2];\n        catch (Exception ex)\n        public VFSURLStreamHandler(FileName file)\n        protected URLConnection openConnection(URL url) throws IOException\n",
            "src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java": "    public PropertyListConfiguration(HierarchicalConfiguration<ImmutableNode> c)\n    PropertyListConfiguration(ImmutableNode root)\n    protected void setPropertyInternal(String key, Object value)\n    protected void addPropertyInternal(String key, Object value)\n    public void read(Reader in) throws ConfigurationException\n        PropertyListParser parser = new PropertyListParser(in);\n            PropertyListConfiguration config = parser.parse();\n        catch (ParseException e)\n    public void write(Writer out) throws ConfigurationException\n        PrintWriter writer = new PrintWriter(out);\n        NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();\n    private void printNode(PrintWriter out, int indentLevel,\n            ImmutableNode node, NodeHandler<ImmutableNode> handler)\n        String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n        List<ImmutableNode> children = new ArrayList<>(node.getChildren());\n            Iterator<ImmutableNode> it = children.iterator();\n                ImmutableNode child = it.next();\n                Object value = child.getValue();\n            Object value = node.getValue();\n    private void printValue(PrintWriter out, int indentLevel, Object value)\n        String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n            Iterator<?> it = ((List<?>) value).iterator();\n            NodeHandler<ImmutableNode> handler =\n            ImmutableConfiguration config = (ImmutableConfiguration) value;\n            Iterator<String> it = config.getKeys();\n                String key = it.next();\n                ImmutableNode node =\n                InMemoryNodeModel tempModel = new InMemoryNodeModel(node);\n            Map<String, Object> map = transformMap((Map<?, ?>) value);\n    static Date parseDate(String s) throws ParseException\n        Calendar cal = Calendar.getInstance();\n        for (DateComponentParser parser : DATE_PARSERS)\n    static String formatDate(Calendar cal)\n        StringBuilder buf = new StringBuilder();\n        for (DateComponentParser element : DATE_PARSERS)\n    static String formatDate(Date date)\n        Calendar cal = Calendar.getInstance();\n    private static Map<String, Object> transformMap(Map<?, ?> src)\n        Map<String, Object> dest = new HashMap<>();\n        for (Map.Entry<?, ?> e : src.entrySet())\n        protected void checkLength(String s, int index, int length)\n            int len = (s == null) ? 0 : s.length();\n        protected void padNum(StringBuilder buf, int num, int length)\n        public DateFieldParser(int calFld, int len)\n        public DateFieldParser(int calFld, int len, int ofs)\n        public void formatComponent(StringBuilder buf, Calendar cal)\n        public int parseComponent(String s, int index, Calendar cal)\n            catch (NumberFormatException nfex)\n        public DateSeparatorParser(String sep)\n        public void formatComponent(StringBuilder buf, Calendar cal)\n        public int parseComponent(String s, int index, Calendar cal)\n        public void formatComponent(StringBuilder buf, Calendar cal)\n            TimeZone tz = cal.getTimeZone();\n            int hour = ofs / MINUTES_PER_HOUR;\n            int min = ofs % MINUTES_PER_HOUR;\n        public int parseComponent(String s, int index, Calendar cal)\n            TimeZone tz = TimeZone.getTimeZone(TIME_ZONE_PREFIX\n",
            "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java": "    public XMLPropertyListConfiguration(HierarchicalConfiguration<ImmutableNode> configuration)\n    XMLPropertyListConfiguration(ImmutableNode root)\n    protected void setPropertyInternal(String key, Object value)\n    protected void addPropertyInternal(String key, Object value)\n    public void initFileLocator(FileLocator locator)\n    public void read(Reader in) throws ConfigurationException\n        EntityResolver resolver = new EntityResolver()\n            public InputSource resolveEntity(String publicId, String systemId)\n        XMLPropertyListHandler handler = new XMLPropertyListHandler();\n            SAXParserFactory factory = SAXParserFactory.newInstance();\n            SAXParser parser = factory.newSAXParser();\n        catch (Exception e)\n    public void write(Writer out) throws ConfigurationException\n        PrintWriter writer = new PrintWriter(out);\n    private void printNode(PrintWriter out, int indentLevel, ImmutableNode node)\n        String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n        List<ImmutableNode> children = node.getChildren();\n            Iterator<ImmutableNode> it = children.iterator();\n                ImmutableNode child = it.next();\n            Object value = node.getValue();\n    private void printValue(PrintWriter out, int indentLevel, Object value)\n        String padding = StringUtils.repeat(\" \", indentLevel * INDENT_SIZE);\n            for (Object o : (List<?>) value)\n            ImmutableConfiguration config = (ImmutableConfiguration) value;\n            Iterator<String> it = config.getKeys();\n                String key = it.next();\n                ImmutableNode node =\n            Map<String, Object> map = transformMap((Map<?, ?>) value);\n            catch (UnsupportedEncodingException e)\n    private static Map<String, Object> transformMap(Map<?, ?> src)\n        Map<String, Object> dest = new HashMap<>();\n        for (Map.Entry<?, ?> e : src.entrySet())\n            PListNodeBuilder result = peek();\n        private void push(PListNodeBuilder node)\n        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException\n        public void endElement(String uri, String localName, String qName) throws SAXException\n                PListNodeBuilder node = new PListNodeBuilder();\n                PListNodeBuilder builder = pop();\n                    XMLPropertyListConfiguration config = new XMLPropertyListConfiguration(builder.createNode());\n                    ArrayNodeBuilder node = (ArrayNodeBuilder) peekNE();\n                    catch (IllegalArgumentException iex)\n                    ArrayNodeBuilder array = (ArrayNodeBuilder) pop();\n        public void characters(char[] ch, int start, int length) throws SAXException\n        public void addValue(Object v)\n                List<Object> list = new ArrayList<>();\n        public void addDateValue(String value)\n            catch (ParseException e)\n        public void addDataValue(String value)\n            catch (UnsupportedEncodingException e)\n        public void addIntegerValue(String value)\n        public void addRealValue(String value)\n        public void addList(ArrayNodeBuilder node)\n        public void setName(String nodeName)\n        public void addChild(PListNodeBuilder child)\n            ImmutableNode.Builder nodeBuilder =\n            for (PListNodeBuilder child : childBuilders)\n        public void addValue(Object value)\n",
            "src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java": "            Collection<? extends ReloadingController> subCtrls)\n            Collection<? extends ReloadingController> subCtrls)\n        Collection<ReloadingController> ctrls =\n        for (ReloadingController rc : ctrls)\n        public MultiReloadingControllerDetector(CombinedReloadingController o)\n            for (ReloadingController rc : owner.getSubControllers())\n            for (ReloadingController rc : owner.getSubControllers())\n",
            "src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java": "    public FileHandlerReloadingDetector(FileHandler handler, long refreshDelay)\n    public FileHandlerReloadingDetector(FileHandler handler)\n        long now = System.currentTimeMillis();\n            long modified = getLastModificationDate();\n        File file = getExistingFile();\n    protected void updateLastModified(long time)\n        URL url = getFileHandler().getURL();\n    private static File fileFromURL(URL url)\n            String path = url.getPath();\n            catch (MalformedURLException mex)\n",
            "src/main/java/org/apache/commons/configuration2/reloading/PeriodicReloadingTrigger.java": "    public PeriodicReloadingTrigger(ReloadingController ctrl, Object ctrlParam,\n            long triggerPeriod, TimeUnit unit, ScheduledExecutorService exec)\n    public PeriodicReloadingTrigger(ReloadingController ctrl, Object ctrlParam,\n            long triggerPeriod, TimeUnit unit)\n    public void shutdown(boolean shutdownExecutor)\n        ThreadFactory factory =\n",
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingController.java": "    public ReloadingController(ReloadingDetector detect)\n            EventType<T> eventType, EventListener<? super T> listener)\n            EventType<T> eventType, EventListener<? super T> listener)\n    public boolean checkForReloading(Object data)\n",
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingEvent.java": "    public ReloadingEvent(ReloadingController source, Object addData)\n",
            "src/main/java/org/apache/commons/configuration2/reloading/VFSFileHandlerReloadingDetector.java": "    public VFSFileHandlerReloadingDetector(FileHandler handler,\n            long refreshDelay)\n    public VFSFileHandlerReloadingDetector(FileHandler handler)\n        FileObject file = getFileObject();\n        catch (FileSystemException ex)\n            FileSystemManager fsManager = VFS.getManager();\n            String uri = resolveFileURI();\n        catch (FileSystemException fse)\n            String msg = \"Unable to monitor \" + getFileHandler().getURL().toString();\n        FileSystem fs = getFileHandler().getFileSystem();\n        String uri =\n",
            "src/main/java/org/apache/commons/configuration2/resolver/CatalogResolver.java": "    public void setCatalogFiles(String catalogs)\n    public void setFileSystem(FileSystem fileSystem)\n    public void setBaseDir(String baseDir)\n    public void setInterpolator(ConfigurationInterpolator ci)\n    public void setDebug(boolean debug)\n    public InputSource resolveEntity(String publicId, String systemId)\n            String badFilePrefix = \"file://\";\n            String correctFilePrefix = \"file:///\";\n                URL url = locate(fs, null, resolved);\n                InputStream is = fs.getInputStream(url);\n                InputSource iSource = new InputSource(resolved);\n            catch (Exception e)\n    public void setLogger(ConfigurationLogger log)\n    private void initLogger(ConfigurationLogger log)\n    private static URL locate(FileSystem fs, String basePath, String name)\n        FileLocator locator =\n        public void setFileSystem(FileSystem fileSystem)\n        public void setBaseDir(String baseDir)\n        public void setInterpolator(ConfigurationInterpolator ci)\n                catch (Exception ex)\n            String base = ((CatalogManager) catalogManager).getBaseDir();\n                    String fileName = catalogs.elementAt(count);\n                    catch (ConfigurationException ce)\n                        String name = url.toString();\n                        String mimeType = fileNameMap.getContentTypeFor(fileName);\n                        catch (Exception ex)\n        public void parseCatalog(String baseDir, String fileName) throws IOException\n                CatalogReader reader = (CatalogReader) readerArr.get(count);\n                catch (Exception ex)\n                catch (CatalogException ce)\n                    catch (IOException ioe)\n        protected String normalizeURI(String uriref)\n            ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();\n            String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;\n",
            "src/main/java/org/apache/commons/configuration2/resolver/DefaultEntityResolver.java": "    public void registerEntityId(String publicId, URL entityURL)\n    public InputSource resolveEntity(String publicId, String systemId)\n                URLConnection connection = entityURL.openConnection();\n                InputStream stream = connection.getInputStream();\n                InputSource source = new InputSource(stream);\n            catch (IOException e)\n",
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertiesFactoryBean.java": "    public ConfigurationPropertiesFactoryBean(Configuration configuration)\n            for (Configuration configuration : configurations)\n            for (Resource location : locations)\n                URL url = location.getURL();\n                Configuration props = new Configurations().properties(url);\n    public void setConfigurations(Configuration[] configurations)\n    public void setLocations(Resource[] locations)\n    public void setThrowExceptionOnMissing(boolean throwExceptionOnMissing)\n    private static <T> T[] defensiveCopy(T[] src)\n",
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertySource.java": "    public ConfigurationPropertySource(String name, Configuration source)\n    protected ConfigurationPropertySource(String name)\n    public Object getProperty(String name)\n",
            "src/main/java/org/apache/commons/configuration2/sync/ReadWriteSynchronizer.java": "    public ReadWriteSynchronizer(ReadWriteLock l)\n",
            "src/main/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandler.java": "    public String nodeName(ImmutableNode node)\n    public Object getValue(ImmutableNode node)\n    public List<ImmutableNode> getChildren(ImmutableNode node)\n    public <C> int getMatchingChildrenCount(ImmutableNode node,\n            NodeMatcher<C> matcher, C criterion)\n    public <C> List<ImmutableNode> getMatchingChildren(ImmutableNode node,\n            NodeMatcher<C> matcher, C criterion)\n        List<ImmutableNode> result =\n        for (ImmutableNode c : node.getChildren())\n    public List<ImmutableNode> getChildren(ImmutableNode node, String name)\n    public ImmutableNode getChild(ImmutableNode node, int index)\n    public int indexOfChild(ImmutableNode parent, ImmutableNode child)\n    public int getChildrenCount(ImmutableNode node, String name)\n    public Set<String> getAttributes(ImmutableNode node)\n    public boolean hasAttributes(ImmutableNode node)\n    public Object getAttributeValue(ImmutableNode node, String name)\n    public boolean isDefined(ImmutableNode node)\n    static boolean checkIfNodeDefined(ImmutableNode node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/ConfigurationNodeVisitorAdapter.java": "    public void visitBeforeChildren(T node, NodeHandler<T> handler)\n    public void visitAfterChildren(T node, NodeHandler<T> handler)\n",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultConfigurationKey.java": "    public DefaultConfigurationKey(DefaultExpressionEngine engine)\n    public DefaultConfigurationKey(DefaultExpressionEngine engine, String key)\n    public DefaultConfigurationKey append(String property, boolean escape)\n    public DefaultConfigurationKey append(String property)\n    public DefaultConfigurationKey appendIndex(int index)\n    public DefaultConfigurationKey appendAttribute(String attr)\n    public void setLength(int len)\n    public DefaultConfigurationKey commonKey(DefaultConfigurationKey other)\n        DefaultConfigurationKey result = new DefaultConfigurationKey(getExpressionEngine());\n        KeyIterator it1 = iterator();\n        KeyIterator it2 = other.iterator();\n    public DefaultConfigurationKey differenceKey(DefaultConfigurationKey other)\n        DefaultConfigurationKey common = commonKey(other);\n        DefaultConfigurationKey result = new DefaultConfigurationKey(getExpressionEngine());\n            String k = other.toString().substring(common.length());\n    public boolean equals(Object obj)\n        DefaultConfigurationKey c = (DefaultConfigurationKey) obj;\n    public boolean isAttributeKey(String key)\n    public String constructAttributeKey(String key)\n        StringBuilder buf = new StringBuilder();\n    public String attributeName(String key)\n    public String trimLeft(String key)\n    public String trimRight(String key)\n    public String trim(String key)\n    private boolean hasTrailingDelimiter(String key)\n    private boolean hasLeadingDelimiter(String key)\n    private String removeAttributeMarkers(String key)\n    private String unescapeDelimiters(String key)\n    private String escapeDelimiters(String key)\n    private static boolean partsEqual(KeyIterator it1, KeyIterator it2)\n        public String nextKey(boolean decorated)\n            String key = findNextIndices();\n        public String currentKey(boolean decorated)\n            catch (CloneNotSupportedException cex)\n        private int nextDelimiterPos(String key, int pos, int endPos)\n                int escapePos = escapedPosition(key, delimiterPos);\n        private int escapedPosition(String key, int pos)\n            int escapeOffset = escapeOffset();\n            int escapePos = key.indexOf(getSymbols()\n        private boolean checkAttribute(String key)\n        private boolean checkIndex(String key)\n                int idx = key.lastIndexOf(getSymbols().getIndexStart());\n                    int endidx = key.indexOf(getSymbols().getIndexEnd(),\n            catch (NumberFormatException nfe)\n",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngine.java": "    public DefaultExpressionEngine(DefaultExpressionEngineSymbols syms)\n    public DefaultExpressionEngine(DefaultExpressionEngineSymbols syms,\n            NodeMatcher<String> nodeNameMatcher)\n    public <T> List<QueryResult<T>> query(T root, String key,\n            NodeHandler<T> handler)\n        List<QueryResult<T>> results = new LinkedList<>();\n    public <T> String nodeKey(T node, String parentKey, NodeHandler<T> handler)\n        DefaultConfigurationKey key = new DefaultConfigurationKey(this,\n    public String attributeKey(String parentKey, String attributeName)\n        DefaultConfigurationKey key =\n    public <T> String canonicalKey(T node, String parentKey,\n            NodeHandler<T> handler)\n        String nodeName = handler.nodeName(node);\n        T parent = handler.getParent(node);\n        DefaultConfigurationKey key =\n    public <T> NodeAddData<T> prepareAdd(T root, String key, NodeHandler<T> handler)\n        DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(\n        T parent = findLastPathNode(it, root, handler);\n        List<String> pathNodes = new LinkedList<>();\n            DefaultConfigurationKey.KeyIterator keyPart, T node,\n            Collection<QueryResult<T>> results, NodeHandler<T> handler)\n            String key = keyPart.nextKey(false);\n    protected <T> T findLastPathNode(DefaultConfigurationKey.KeyIterator keyIt,\n            T node, NodeHandler<T> handler)\n        String keyPart = keyIt.nextKey(false);\n            int idx =\n    private <T> void processSubNodes(DefaultConfigurationKey.KeyIterator keyPart,\n            List<T> subNodes, Collection<QueryResult<T>> nodes, NodeHandler<T> handler)\n            for (T node : subNodes)\n    private <T> int determineIndex(T node, T parent, String nodeName,\n                                          NodeHandler<T> handler)\n    private <T> List<T> findChildNodesByName(NodeHandler<T> handler, T parent,\n            String nodeName)\n",
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngineSymbols.java": "    private DefaultExpressionEngineSymbols(Builder b)\n    public boolean equals(Object obj)\n        DefaultExpressionEngineSymbols c = (DefaultExpressionEngineSymbols) obj;\n        public Builder(DefaultExpressionEngineSymbols c)\n        public Builder setPropertyDelimiter(String d)\n        public Builder setEscapedDelimiter(String ed)\n        public Builder setIndexStart(String is)\n        public Builder setIndexEnd(String ie)\n        public Builder setAttributeStart(String as)\n        public Builder setAttributeEnd(String ae)\n",
            "src/main/java/org/apache/commons/configuration2/tree/ImmutableNode.java": "    private ImmutableNode(Builder b)\n    public ImmutableNode setName(String name)\n    public ImmutableNode setValue(Object newValue)\n    public ImmutableNode addChild(ImmutableNode child)\n        Builder builder = new Builder(children.size() + 1, attributes);\n    public ImmutableNode removeChild(ImmutableNode child)\n        Builder builder = new Builder(children.size(), attributes);\n        for (ImmutableNode c : children)\n    public ImmutableNode replaceChild(ImmutableNode oldChild,\n            ImmutableNode newChild)\n        Builder builder = new Builder(children.size(), attributes);\n        for (ImmutableNode c : children)\n    public ImmutableNode replaceChildren(Collection<ImmutableNode> newChildren)\n        Builder builder = new Builder(null, attributes);\n    public ImmutableNode setAttribute(String name, Object value)\n        Map<String, Object> newAttrs = new HashMap<>(attributes);\n    public ImmutableNode setAttributes(Map<String, ?> newAttributes)\n        Map<String, Object> newAttrs = new HashMap<>(attributes);\n    public ImmutableNode removeAttribute(String name)\n        Map<String, Object> newAttrs = new HashMap<>(attributes);\n    private ImmutableNode createWithBasicProperties(Builder builder)\n    private ImmutableNode createWithNewAttributes(Map<String, Object> newAttrs)\n    private static void checkChildNode(ImmutableNode child)\n        public Builder(int childCount)\n        private Builder(List<ImmutableNode> dirChildren,\n                Map<String, Object> dirAttrs)\n        private Builder(int childCount, Map<String, Object> dirAttrs)\n        public Builder name(String n)\n        public Builder value(Object v)\n        public Builder addChild(ImmutableNode c)\n        public Builder addChildren(Collection<? extends ImmutableNode> children)\n        public Builder addAttribute(String name, Object value)\n        public Builder addAttributes(Map<String, ?> attrs)\n            ImmutableNode newNode = new ImmutableNode(this);\n        private void initChildrenCollection(int childCount)\n                Collection<? extends ImmutableNode> children)\n            List<ImmutableNode> result =\n            for (ImmutableNode c : children)\n",
            "src/main/java/org/apache/commons/configuration2/tree/InMemoryNodeModel.java": "    public InMemoryNodeModel(ImmutableNode root)\n    public void addProperty(String key, Iterable<?> values,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public void addProperty(final String key, NodeSelector selector,\n                public boolean initTransaction(ModelTransaction tx)\n    public void addNodes(String key, Collection<? extends ImmutableNode> nodes,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public void addNodes(final String key, NodeSelector selector,\n                public boolean initTransaction(ModelTransaction tx)\n                    List<QueryResult<ImmutableNode>> results =\n                        NodeAddData<ImmutableNode> addData =\n                        ImmutableNode newNode =\n    public void setProperty(String key, Object value,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public void setProperty(final String key, NodeSelector selector,\n            public boolean initTransaction(ModelTransaction tx)\n                NodeUpdateData<ImmutableNode> updateData =\n                boolean cleared =\n                boolean updated =\n    public List<QueryResult<ImmutableNode>> clearTree(String key,\n            NodeKeyResolver<ImmutableNode> resolver)\n            NodeSelector selector, final NodeKeyResolver<ImmutableNode> resolver)\n            public boolean initTransaction(ModelTransaction tx)\n                TreeData currentStructure = tx.getCurrentData();\n                List<QueryResult<ImmutableNode>> results = resolver.resolveKey(\n                for (QueryResult<ImmutableNode> result : results)\n    public void clearProperty(String key,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public void clearProperty(final String key, NodeSelector selector,\n            public boolean initTransaction(ModelTransaction tx)\n                List<QueryResult<ImmutableNode>> results =\n    public void clear(NodeKeyResolver<ImmutableNode> resolver)\n        ImmutableNode newRoot =\n    public void setRootNode(ImmutableNode newRoot)\n    public void replaceRoot(ImmutableNode newRoot,\n            NodeKeyResolver<ImmutableNode> resolver)\n        TreeData current = structure.get();\n        TreeData temp =\n            NodeKeyResolver<ImmutableNode> resolver)\n            public boolean initTransaction(ModelTransaction tx)\n                TreeData current = tx.getCurrentData();\n                String newRootName =\n    public void trackNode(NodeSelector selector,\n            NodeKeyResolver<ImmutableNode> resolver)\n            TreeData current = structure.get();\n            NodeTracker newTracker =\n    public Collection<NodeSelector> selectAndTrackNodes(String key,\n            NodeKeyResolver<ImmutableNode> resolver)\n        Mutable<Collection<NodeSelector>> refSelectors =\n            TreeData current = structure.get();\n            List<ImmutableNode> nodes =\n    public Collection<NodeSelector> trackChildNodes(String key,\n            NodeKeyResolver<ImmutableNode> resolver)\n        Mutable<Collection<NodeSelector>> refSelectors =\n            TreeData current = structure.get();\n            List<ImmutableNode> nodes =\n                ImmutableNode node = nodes.get(0);\n    public NodeSelector trackChildNodeWithCreation(String key,\n            String childName, NodeKeyResolver<ImmutableNode> resolver)\n        MutableObject<NodeSelector> refSelector =\n            TreeData current = structure.get();\n            List<ImmutableNode> nodes =\n            ImmutableNode parent = nodes.get(0);\n            TreeData newData =\n    public ImmutableNode getTrackedNode(NodeSelector selector)\n    public void replaceTrackedNode(NodeSelector selector, ImmutableNode newNode)\n            TreeData currentData = structure.get();\n            NodeSelector selector)\n        TreeData currentData = structure.get();\n        InMemoryNodeModel detachedNodeModel =\n    public boolean isTrackedNodeDetached(NodeSelector selector)\n    public void untrackNode(NodeSelector selector)\n            TreeData current = structure.get();\n            NodeTracker newTracker =\n            ImmutableNode root)\n                    public void visitBeforeChildren(ImmutableNode node,\n                            NodeHandler<ImmutableNode> handler)\n                        for (ImmutableNode c : node.getChildren())\n    static boolean checkIfNodeDefined(ImmutableNode node)\n    private void initializeAddTransaction(ModelTransaction tx, String key,\n            Iterable<?> values, NodeKeyResolver<ImmutableNode> resolver)\n        NodeAddData<ImmutableNode> addData =\n    private TreeData createTreeData(ImmutableNode root, TreeData current)\n        NodeTracker newTracker =\n    private TreeData createTreeDataForRootAndTracker(ImmutableNode root,\n            NodeTracker newTracker)\n    private static void addNodeProperty(ModelTransaction tx,\n            NodeAddData<ImmutableNode> addData, Iterable<?> values)\n        Collection<ImmutableNode> newNodes =\n    private static void addNodesByAddData(ModelTransaction tx,\n            NodeAddData<ImmutableNode> addData,\n            Collection<ImmutableNode> newNodes)\n            ImmutableNode newChild = createNodeToAddWithPath(addData, newNodes);\n    private static void addAttributeProperty(ModelTransaction tx,\n            NodeAddData<ImmutableNode> addData, Iterable<?> values)\n            int pathNodeCount = addData.getPathNodes().size();\n            ImmutableNode childWithAttribute =\n            ImmutableNode newChild =\n            String newNodeName, Iterable<?> values)\n        Collection<ImmutableNode> nodes = new LinkedList<>();\n        for (Object value : values)\n            NodeAddData<ImmutableNode> addData,\n            Collection<ImmutableNode> newNodes)\n    private static ImmutableNode createNodeOnPath(Iterator<String> it,\n            Collection<ImmutableNode> newNodes)\n        String nodeName = it.next();\n    private static boolean initializeClearTransaction(ModelTransaction tx,\n            Collection<QueryResult<ImmutableNode>> results)\n        for (QueryResult<ImmutableNode> result : results)\n    private static boolean initializeUpdateTransaction(ModelTransaction tx,\n            Map<QueryResult<ImmutableNode>, Object> changedValues)\n        for (Map.Entry<QueryResult<ImmutableNode>, Object> e : changedValues\n    private static ImmutableNode initialRootNode(ImmutableNode providedRoot)\n    private static String determineRootName(ImmutableNode rootNode,\n            ImmutableNode node, String rootName)\n            ImmutableNode root)\n        Map<ImmutableNode, ImmutableNode> parents =\n    private void updateModel(TransactionInitializer txInit,\n            NodeSelector selector, NodeKeyResolver<ImmutableNode> resolver)\n            TreeData currentData = getTreeData();\n            TransactionInitializer txInit, NodeSelector selector,\n            TreeData currentData, NodeKeyResolver<ImmutableNode> resolver)\n        ModelTransaction tx =\n            TreeData newData = tx.execute();\n            TransactionInitializer txInit, NodeSelector selector,\n            TreeData currentData, NodeKeyResolver<ImmutableNode> resolver)\n            InMemoryNodeModel detachedNodeModel =\n    private boolean replaceDetachedTrackedNode(TreeData currentData,\n            NodeSelector selector, ImmutableNode newNode)\n        InMemoryNodeModel detachedNodeModel =\n    private boolean replaceActiveTrackedNode(TreeData currentData,\n            NodeSelector selector, ImmutableNode newNode)\n        NodeTracker newTracker =\n            Mutable<Collection<NodeSelector>> refSelectors,\n            List<ImmutableNode> nodes, TreeData current,\n            NodeKeyResolver<ImmutableNode> resolver)\n        List<NodeSelector> selectors =\n        Map<ImmutableNode, String> cache = new HashMap<>();\n        for (ImmutableNode node : nodes)\n        NodeTracker newTracker =\n    private static TreeData updateDataWithNewTrackedNode(TreeData current,\n            ImmutableNode node, NodeKeyResolver<ImmutableNode> resolver,\n            MutableObject<NodeSelector> refSelector)\n        NodeSelector selector =\n        NodeTracker newTracker =\n    private static TreeData createDataWithTrackedChildNode(TreeData current,\n            ImmutableNode parent, String childName,\n            NodeKeyResolver<ImmutableNode> resolver,\n            MutableObject<NodeSelector> refSelector)\n        List<ImmutableNode> namedChildren =\n            ImmutableNode child =\n            ModelTransaction tx = new ModelTransaction(current, null, resolver);\n    private static boolean valuesNotEmpty(Iterable<?> values)\n    private static RuntimeException attributeKeyException(String key)\n",
            "src/main/java/org/apache/commons/configuration2/tree/MergeCombiner.java": "    public ImmutableNode combine(ImmutableNode node1, ImmutableNode node2)\n        ImmutableNode.Builder result = new ImmutableNode.Builder();\n        List<ImmutableNode> children2 = new LinkedList<>(node2.getChildren());\n        for (ImmutableNode child1 : node1.getChildren())\n            ImmutableNode child2 = canCombine(node2, child1, children2);\n        for (ImmutableNode c : children2)\n    protected void addAttributes(ImmutableNode.Builder result, ImmutableNode node1,\n            ImmutableNode node2)\n        Map<String, Object> attributes = new HashMap<>();\n        for (Map.Entry<String, Object> e : node2.getAttributes().entrySet())\n    protected ImmutableNode canCombine(ImmutableNode node2,\n            ImmutableNode child, List<ImmutableNode> children2)\n        Map<String, Object> attrs1 = child.getAttributes();\n        List<ImmutableNode> nodes = new ArrayList<>();\n        List<ImmutableNode> children =\n        for (ImmutableNode node : children)\n            for (ImmutableNode node : nodes)\n    private static boolean matchAttributes(Map<String, Object> attrs1,\n            ImmutableNode node)\n        Map<String, Object> attrs2 = node.getAttributes();\n        for (Map.Entry<String, Object> e : attrs1.entrySet())\n",
            "src/main/java/org/apache/commons/configuration2/tree/ModelTransaction.java": "    public ModelTransaction(TreeData treeData, NodeSelector selector,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public void addAddNodesOperation(ImmutableNode parent,\n            Collection<? extends ImmutableNode> newNodes)\n        ChildrenUpdateOperation op = new ChildrenUpdateOperation();\n    public void addAddNodeOperation(ImmutableNode parent, ImmutableNode newChild)\n        ChildrenUpdateOperation op = new ChildrenUpdateOperation();\n    public void addAttributeOperation(ImmutableNode target, String name,\n            Object value)\n    public void addAttributesOperation(ImmutableNode target,\n            Map<String, Object> attributes)\n    public void addRemoveNodeOperation(ImmutableNode parent, ImmutableNode node)\n        ChildrenUpdateOperation op = new ChildrenUpdateOperation();\n    public void addRemoveAttributeOperation(ImmutableNode target, String name)\n    public void addClearNodeValueOperation(ImmutableNode target)\n    public void addChangeNodeValueOperation(ImmutableNode target,\n            Object newValue)\n    public void addChangeNodeNameOperation(ImmutableNode target, String newName)\n    public void addNewReferences(Map<ImmutableNode, ?> refs)\n    public void addNewReference(ImmutableNode node, Object ref)\n    ImmutableNode getParent(ImmutableNode node)\n    Operations fetchOperations(ImmutableNode target, int level)\n        Integer nodeLevel =\n    private ImmutableNode initQueryRoot(TreeData treeData, NodeSelector selector)\n    private int level(ImmutableNode node)\n            Integer level = operations.lastKey(); // start down in hierarchy\n            Map<ImmutableNode, Operations> levelOps = operations.remove(level);\n            for (Map.Entry<ImmutableNode, Operations> e : levelOps.entrySet())\n        for (ImmutableNode node : addedNodes)\n        for (ImmutableNode node : removedNodes)\n    private void removeNodesFromParentAndReplacementMapping(ImmutableNode root)\n                    public void visitBeforeChildren(ImmutableNode node,\n                            NodeHandler<ImmutableNode> handler)\n    private void removeNodeFromReplacementMapping(ImmutableNode node)\n    private static <E> Collection<E> concatenate(Collection<E> col1,\n            Collection<? extends E> col2)\n        Collection<E> result =\n    private static <E> Set<E> concatenate(Set<E> set1, Set<? extends E> set2)\n        Set<E> result = (set1 != null) ? set1 : new HashSet<>();\n    private static <K, V> Map<K, V> concatenate(Map<K, V> map1,\n            Map<? extends K, ? extends V> map2)\n        Map<K, V> result = (map1 != null) ? map1 : new HashMap<>();\n    private static <E> Collection<E> append(Collection<E> col, E node)\n        Collection<E> result = (col != null) ? col : new LinkedList<>();\n    private static <E> Set<E> append(Set<E> col, E elem)\n        Set<E> result = (col != null) ? col : new HashSet<>();\n    private static <K, V> Map<K, V> append(Map<K, V> map, K key, V value)\n        Map<K, V> result = (map != null) ? map : new HashMap<>();\n        public void combine(ChildrenUpdateOperation op)\n        public void addNewNode(ImmutableNode node)\n        public void addNewNodes(Collection<? extends ImmutableNode> nodes)\n        public void addNodeToReplace(ImmutableNode org,\n                ImmutableNode replacement)\n        public void addNodeToRemove(ImmutableNode node)\n        protected ImmutableNode apply(ImmutableNode target,\n                Operations operations)\n            Map<ImmutableNode, ImmutableNode> replacements =\n            Set<ImmutableNode> removals = fetchRemovalSet();\n            List<ImmutableNode> resultNodes = new LinkedList<>();\n            for (ImmutableNode nd : target.getChildren())\n                ImmutableNode repl = replacements.get(nd);\n        public AddAttributeOperation(String name, Object value)\n        protected ImmutableNode apply(ImmutableNode target,\n                Operations operations)\n        public AddAttributesOperation(Map<String, Object> attrs)\n        protected ImmutableNode apply(ImmutableNode target,\n                Operations operations)\n        public RemoveAttributeOperation(String name)\n        protected ImmutableNode apply(ImmutableNode target,\n                Operations operations)\n        public ChangeNodeValueOperation(Object value)\n        protected ImmutableNode apply(ImmutableNode target,\n                Operations operations)\n        public ChangeNodeNameOperation(String name)\n        protected ImmutableNode apply(ImmutableNode target,\n                Operations operations)\n        public void addChildrenOperation(ChildrenUpdateOperation co)\n        public void addOperation(Operation op)\n        public void newNodesAdded(Collection<ImmutableNode> newNodes)\n        public void apply(ImmutableNode target, int level)\n                for (Operation op : operations)\n        private void propagateChange(ImmutableNode target, ImmutableNode node,\n                int level)\n            ImmutableNode parent = getParent(target);\n            ChildrenUpdateOperation co = new ChildrenUpdateOperation();\n        private void handleAddedNodes(ImmutableNode node)\n                for (ImmutableNode child : addedNodesInOperation)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeAddData.java": "    public NodeAddData(T parentNode, String newName, boolean isAttr,\n            Collection<String> intermediateNodes)\n            Collection<String> intermediateNodes)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeCombiner.java": "    public void addListNode(String nodeName)\n    public boolean isListNode(ImmutableNode node)\n            public ImmutableNode getParent(ImmutableNode node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeHandlerDecorator.java": "    public String nodeName(T node)\n    public Object getValue(T node)\n    public T getParent(T node)\n    public List<T> getChildren(T node)\n    public <C> List<T> getMatchingChildren(T node, NodeMatcher<C> matcher,\n            C criterion)\n    public <C> int getMatchingChildrenCount(T node, NodeMatcher<C> matcher,\n            C criterion)\n    public List<T> getChildren(T node, String name)\n    public T getChild(T node, int index)\n    public int indexOfChild(T parent, T child)\n    public int getChildrenCount(T node, String name)\n    public Set<String> getAttributes(T node)\n    public boolean hasAttributes(T node)\n    public Object getAttributeValue(T node, String name)\n    public boolean isDefined(T node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeNameMatchers.java": "        public <T> boolean matches(T node, NodeHandler<T> handler,\n                String criterion)\n        public <T> boolean matches(T node, NodeHandler<T> handler,\n                String criterion)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeSelector.java": "    public NodeSelector(String key)\n    private NodeSelector(List<String> keys)\n    public ImmutableNode select(ImmutableNode root,\n            NodeKeyResolver<ImmutableNode> resolver,\n            NodeHandler<ImmutableNode> handler)\n        Iterator<String> itKeys = nodeKeys.iterator();\n            String currentKey = itKeys.next();\n            List<ImmutableNode> currentResults =\n            for (ImmutableNode currentRoot : nodes)\n    public NodeSelector subSelector(String subKey)\n        List<String> keys = new ArrayList<>(nodeKeys.size() + 1);\n    public boolean equals(Object obj)\n        NodeSelector c = (NodeSelector) obj;\n    private void getFilteredResults(ImmutableNode root,\n            NodeKeyResolver<ImmutableNode> resolver,\n            NodeHandler<ImmutableNode> handler, String key,\n            List<ImmutableNode> nodes)\n        List<QueryResult<ImmutableNode>> results =\n        for (QueryResult<ImmutableNode> result : results)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeTracker.java": "    private NodeTracker(Map<NodeSelector, TrackedNodeData> map)\n    public NodeTracker trackNode(ImmutableNode root, NodeSelector selector,\n            NodeKeyResolver<ImmutableNode> resolver,\n            NodeHandler<ImmutableNode> handler)\n        Map<NodeSelector, TrackedNodeData> newState =\n        TrackedNodeData trackData = newState.get(selector);\n    public NodeTracker trackNodes(Collection<NodeSelector> selectors,\n            Collection<ImmutableNode> nodes)\n        Map<NodeSelector, TrackedNodeData> newState =\n        Iterator<ImmutableNode> itNodes = nodes.iterator();\n        for (NodeSelector selector : selectors)\n            ImmutableNode node = itNodes.next();\n    public NodeTracker untrackNode(NodeSelector selector)\n        TrackedNodeData trackData = getTrackedNodeData(selector);\n        Map<NodeSelector, TrackedNodeData> newState =\n        TrackedNodeData newTrackData = trackData.observerRemoved();\n    public ImmutableNode getTrackedNode(NodeSelector selector)\n    public boolean isTrackedNodeDetached(NodeSelector selector)\n    public InMemoryNodeModel getDetachedNodeModel(NodeSelector selector)\n    public NodeTracker update(ImmutableNode root, NodeSelector txTarget,\n            NodeKeyResolver<ImmutableNode> resolver,\n            NodeHandler<ImmutableNode> handler)\n        Map<NodeSelector, TrackedNodeData> newState =\n        for (Map.Entry<NodeSelector, TrackedNodeData> e : trackedNodes\n        Map<NodeSelector, TrackedNodeData> newState =\n        for (Map.Entry<NodeSelector, TrackedNodeData> e : trackedNodes\n            TrackedNodeData newData =\n    public NodeTracker replaceAndDetachTrackedNode(NodeSelector selector,\n            ImmutableNode newNode)\n        Map<NodeSelector, TrackedNodeData> newState =\n    private TrackedNodeData getTrackedNodeData(NodeSelector selector)\n        TrackedNodeData trackData = trackedNodes.get(selector);\n            ImmutableNode root, NodeSelector txTarget,\n            NodeKeyResolver<ImmutableNode> resolver,\n            NodeHandler<ImmutableNode> handler,\n            Map.Entry<NodeSelector, TrackedNodeData> e)\n        catch (Exception ex)\n            NodeSelector txTarget, Map.Entry<NodeSelector, TrackedNodeData> e)\n        ImmutableNode newNode =\n    private static ImmutableNode createEmptyTrackedNode(TrackedNodeData data)\n            ImmutableNode root, NodeSelector selector,\n            NodeKeyResolver<ImmutableNode> resolver,\n            NodeHandler<ImmutableNode> handler, TrackedNodeData trackData)\n        ImmutableNode target = selector.select(root, resolver, handler);\n        public TrackedNodeData(ImmutableNode nd)\n        private TrackedNodeData(ImmutableNode nd, int obsCount,\n                InMemoryNodeModel detachedNodeModel)\n        public TrackedNodeData updateNode(ImmutableNode newNode)\n        public TrackedNodeData detach(ImmutableNode newNode)\n            ImmutableNode newTrackedNode =\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeTreeWalker.java": "    public <T> void walkDFS(T root, ConfigurationNodeVisitor<T> visitor,\n            NodeHandler<T> handler)\n    public <T> void walkBFS(T root, ConfigurationNodeVisitor<T> visitor,\n            NodeHandler<T> handler)\n    private static <T> void dfs(T node, ConfigurationNodeVisitor<T> visitor,\n            NodeHandler<T> handler)\n            for (T c : handler.getChildren(node))\n    private static <T> void bfs(T root, ConfigurationNodeVisitor<T> visitor,\n            NodeHandler<T> handler)\n        List<T> pendingNodes = new LinkedList<>();\n            T node = pendingNodes.remove(0);\n            for (T c : handler.getChildren(node))\n    private static <T> boolean checkParameters(T root,\n            ConfigurationNodeVisitor<T> visitor, NodeHandler<T> handler)\n",
            "src/main/java/org/apache/commons/configuration2/tree/NodeUpdateData.java": "    public NodeUpdateData(Map<QueryResult<T>, Object> changedValues,\n            Collection<Object> newValues,\n            Collection<QueryResult<T>> removedNodes, String key)\n    private static <K, V> Map<K, V> copyMap(Map<? extends K, ? extends V> map)\n    private static <T> Collection<T> copyCollection(Collection<? extends T> col)\n",
            "src/main/java/org/apache/commons/configuration2/tree/OverrideCombiner.java": "    public ImmutableNode combine(ImmutableNode node1,\n            ImmutableNode node2)\n        ImmutableNode.Builder result = new ImmutableNode.Builder();\n        for (ImmutableNode child : node1.getChildren())\n            ImmutableNode child2 = canCombine(node1, node2, child);\n        for (ImmutableNode child : node2.getChildren())\n    protected void addAttributes(ImmutableNode.Builder result,\n            ImmutableNode node1, ImmutableNode node2)\n        for (String attr : node2.getAttributes().keySet())\n    protected ImmutableNode canCombine(ImmutableNode node1,\n            ImmutableNode node2, ImmutableNode child)\n",
            "src/main/java/org/apache/commons/configuration2/tree/QueryResult.java": "    private QueryResult(T nd, String attr)\n    public static <T> QueryResult<T> createNodeResult(T resultNode)\n    public static <T> QueryResult<T> createAttributeResult(T parentNode,\n                                                           String attrName)\n    public Object getAttributeValue(NodeHandler<T> handler)\n    public boolean equals(Object obj)\n        QueryResult<?> c = (QueryResult<?>) obj;\n        ToStringBuilder sb = new ToStringBuilder(this);\n",
            "src/main/java/org/apache/commons/configuration2/tree/ReferenceTracker.java": "    private ReferenceTracker(Map<ImmutableNode, Object> refs,\n            List<Object> removedRefs)\n    public ReferenceTracker addReferences(Map<ImmutableNode, ?> refs)\n        Map<ImmutableNode, Object> newRefs =\n            Map<ImmutableNode, ImmutableNode> replacedNodes,\n            Collection<ImmutableNode> removedNodes)\n            for (Map.Entry<ImmutableNode, ImmutableNode> e : replacedNodes\n                Object ref = references.get(e.getKey());\n            for (ImmutableNode node : removedNodes)\n                Object ref = references.get(node);\n    public Object getReference(ImmutableNode node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeHandler.java": "    public TrackedNodeHandler(ImmutableNode root,\n            NodeHandler<ImmutableNode> handler)\n    public ImmutableNode getParent(ImmutableNode node)\n",
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeModel.java": "    public TrackedNodeModel(InMemoryNodeModelSupport modelSupport, NodeSelector sel,\n            boolean untrackOnFinalize)\n    public void setRootNode(ImmutableNode newRoot)\n    public void addProperty(String key, Iterable<?> values,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public void addNodes(String key, Collection<? extends ImmutableNode> nodes,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public void setProperty(String key, Object value,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public List<QueryResult<ImmutableNode>> clearTree(String key,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public void clearProperty(String key,\n            NodeKeyResolver<ImmutableNode> resolver)\n    public void clear(NodeKeyResolver<ImmutableNode> resolver)\n",
            "src/main/java/org/apache/commons/configuration2/tree/TreeData.java": "    public TreeData(ImmutableNode root,\n            Map<ImmutableNode, ImmutableNode> parentMapping,\n            Map<ImmutableNode, ImmutableNode> replacements,\n            NodeTracker tracker, ReferenceTracker refTracker)\n    public ImmutableNode getParent(ImmutableNode node)\n        ImmutableNode org = handleReplacements(node, inverseReplacementMapping);\n        ImmutableNode parent = parentMapping.get(org);\n    public TreeData updateNodeTracker(NodeTracker newTracker)\n    public TreeData updateReferenceTracker(ReferenceTracker newTracker)\n    public Object getReference(ImmutableNode node)\n    private static ImmutableNode handleReplacements(ImmutableNode replace,\n            Map<ImmutableNode, ImmutableNode> mapping)\n            Map<ImmutableNode, ImmutableNode> replacements)\n        Map<ImmutableNode, ImmutableNode> inverseMapping =\n        for (Map.Entry<ImmutableNode, ImmutableNode> e : replacements\n",
            "src/main/java/org/apache/commons/configuration2/tree/TreeUtils.java": "    public static void printTree(PrintStream stream, ImmutableNode result)\n    private static void printTree(PrintStream stream, String indent, ImmutableNode result)\n        StringBuilder buffer = new StringBuilder(indent).append(\"<\").append(result.getNodeName());\n        for (Map.Entry<String, Object> e : result.getAttributes().entrySet())\n            for (ImmutableNode child : result.getChildren())\n",
            "src/main/java/org/apache/commons/configuration2/tree/UnionCombiner.java": "    public ImmutableNode combine(ImmutableNode node1,\n            ImmutableNode node2)\n        ImmutableNode.Builder result = new ImmutableNode.Builder();\n        List<ImmutableNode> children2 = new LinkedList<>(node2.getChildren());\n        for (ImmutableNode child1 : node1.getChildren())\n            ImmutableNode child2 = findCombineNode(node1, node2, child1\n        for (ImmutableNode c : children2)\n    protected ImmutableNode findCombineNode(ImmutableNode node1,\n            ImmutableNode node2, ImmutableNode child)\n            ImmutableNode child2 =\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationAttributePointer.java": "    public ConfigurationAttributePointer(ConfigurationNodePointer<T> parent,\n            String attrName)\n    public int compareChildNodePointers(NodePointer p1, NodePointer p2)\n    public void setValue(Object value)\n    public boolean testNode(NodeTest test)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorAttribute.java": "            ConfigurationNodePointer<T> parent, QName name)\n    protected NodePointer createNodePointer(int position)\n            ConfigurationNodePointer<T> parent, QName name)\n        List<String> result = new ArrayList<>();\n            Set<String> names =\n            String prefix =\n            for (String n : names)\n    private void addAttributeData(ConfigurationNodePointer<T> parent,\n            List<String> result, String name)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorBase.java": "    protected ConfigurationNodeIteratorBase(ConfigurationNodePointer<T> parent,\n            boolean reverse)\n    public boolean setPosition(int pos)\n    protected void setStartOffset(int startOffset)\n    protected int positionToIndex(int pos)\n    protected static String prefixName(String prefix, String name)\n    protected static String qualifiedName(QName name)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorChildren.java": "            ConfigurationNodePointer<T> parent, NodeTest nodeTest,\n            boolean reverse, ConfigurationNodePointer<T> startsWith)\n        T root = parent.getConfigurationNode();\n    protected NodePointer createNodePointer(int position)\n    private List<T> createSubNodeList(T node, NodeTest test)\n            NodeNameTest nameTest = (NodeNameTest) test;\n            QName name = nameTest.getNodeName();\n            NodeTypeTest typeTest = (NodeTypeTest) test;\n    private List<T> createSubNodeListForName(T node, QName name)\n        String compareName = qualifiedName(name);\n        List<T> result = new ArrayList<>();\n        for (T child : getNodeHandler().getChildren(node))\n    private List<T> createSubNodeListForWildcardName(T node, QName name)\n        List<T> children = getNodeHandler().getChildren(node);\n        List<T> prefixChildren = new ArrayList<>(children.size());\n        String prefix = prefixName(name.getPrefix(), null);\n        for (T child : children)\n    private int findStartIndex(List<T> children, T startNode)\n        for (T child : children)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointer.java": "    public ConfigurationNodePointer(T node, Locale locale,\n            NodeHandler<T> handler)\n    public ConfigurationNodePointer(ConfigurationNodePointer<T> parent, T node,\n            NodeHandler<T> handler)\n    public void setValue(Object value)\n    public int compareChildNodePointers(NodePointer pointer1,\n            NodePointer pointer2)\n        Object node1 = pointer1.getBaseValue();\n        Object node2 = pointer2.getBaseValue();\n        for (T child : getNodeHandler().getChildren(node))\n    public NodeIterator attributeIterator(QName name)\n    public NodeIterator childIterator(NodeTest test, boolean reverse,\n            NodePointer startWith)\n    public boolean testNode(NodeTest test)\n    private ConfigurationNodePointer<T> castPointer(NodePointer p)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointerFactory.java": "    public NodePointer createNodePointer(QName name, Object bean, Locale locale)\n            NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;\n    public NodePointer createNodePointer(NodePointer parent, QName name,\n            Object bean)\n            NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;\n    public static <T> Object wrapNode(T node, NodeHandler<T> handler)\n        public NodeWrapper(T nd, NodeHandler<T> handler)\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathContextFactory.java": "    public <T> JXPathContext createContext(T root, NodeHandler<T> handler)\n        JXPathContext context =\n",
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathExpressionEngine.java": "    XPathExpressionEngine(XPathContextFactory factory)\n    public <T> List<QueryResult<T>> query(T root, String key,\n            NodeHandler<T> handler)\n            QueryResult<T> result = createResult(root);\n        JXPathContext context = createContext(root, handler);\n    public <T> String nodeKey(T node, String parentKey, NodeHandler<T> handler)\n            StringBuilder buf =\n    public String attributeKey(String parentKey, String attributeName)\n        StringBuilder buf =\n    public <T> String canonicalKey(T node, String parentKey,\n            NodeHandler<T> handler)\n        T parent = handler.getParent(node);\n        StringBuilder buf = new StringBuilder(BUF_SIZE);\n    public <T> NodeAddData<T> prepareAdd(T root, String key,\n            NodeHandler<T> handler)\n        List<QueryResult<T>> nodes =\n    private <T> JXPathContext createContext(T root, NodeHandler<T> handler)\n    <T> NodeAddData<T> createNodeAddData(String path,\n            QueryResult<T> parentNodeResult)\n        List<String> pathNodes = new LinkedList<>();\n        StringTokenizer tok =\n            String token = tok.nextToken();\n    private <T> String generateKeyForAdd(T root, String key,\n            NodeHandler<T> handler)\n            String keyExisting = key.substring(0, pos);\n                StringBuilder buf = new StringBuilder(key.length() + 1);\n    private static <T> int determineIndex(T parent, T child,\n            NodeHandler<T> handler)\n    private static void invalidPath(String path, String msg)\n    private static int findKeySeparator(String key)\n    private static <T> List<QueryResult<T>> convertResults(List<?> results)\n        List<QueryResult<T>> queryResults =\n        for (Object res : results)\n            QueryResult<T> queryResult = createResult(res);\n    private static <T> QueryResult<T> createResult(Object resObj)\n",
            "src/main/java/org/apache/commons/configuration2/web/AppletConfiguration.java": "    public AppletConfiguration(Applet applet)\n    protected Object getPropertyInternal(String key)\n        String[][] paramsInfo = applet.getParameterInfo();\n        String[] keys = new String[paramsInfo != null ? paramsInfo.length : 0];\n",
            "src/main/java/org/apache/commons/configuration2/web/BaseWebConfiguration.java": "    protected boolean containsKeyInternal(String key)\n    protected void clearPropertyDirect(String key)\n    protected void addPropertyDirect(String key, Object obj)\n            Collection<String> values =\n",
            "src/main/java/org/apache/commons/configuration2/web/ServletConfiguration.java": "    public ServletConfiguration(Servlet servlet)\n    public ServletConfiguration(ServletConfig config)\n    protected Object getPropertyInternal(String key)\n        Enumeration<String> en = config.getInitParameterNames();\n",
            "src/main/java/org/apache/commons/configuration2/web/ServletContextConfiguration.java": "    public ServletContextConfiguration(Servlet servlet)\n    public ServletContextConfiguration(ServletContext context)\n    protected Object getPropertyInternal(String key)\n        Enumeration<String> en = context.getInitParameterNames();\n",
            "src/main/java/org/apache/commons/configuration2/web/ServletFilterConfiguration.java": "    public ServletFilterConfiguration(FilterConfig config)\n    protected Object getPropertyInternal(String key)\n        Enumeration<String> en = config.getInitParameterNames();\n",
            "src/main/java/org/apache/commons/configuration2/web/ServletRequestConfiguration.java": "    public ServletRequestConfiguration(ServletRequest request)\n    protected Object getPropertyInternal(String key)\n        String[] values = request.getParameterValues(key);\n            List<Object> result = new ArrayList<>(values.length);\n            for (String value : values)\n                Object val = handleDelimiters(value);\n        Map<String, ?> parameterMap = request.getParameterMap();\n",
            "src/test/java/org/apache/commons/configuration2/BaseNonStringProperties.java": "        boolean booleanValue = conf.getBoolean(\"test.boolean\");\n        byte testValue = 10;\n        byte byteValue = conf.getByte(\"test.byte\");\n        double testValue = 10.25;\n        double doubleValue = conf.getDouble(\"test.double\");\n        float testValue = (float) 20.25;\n        float floatValue = conf.getFloat(\"test.float\");\n        int intValue = conf.getInt(\"test.integer\");\n        long longValue = conf.getLong(\"test.long\");\n        short shortValue = conf.getShort(\"test.short\");\n",
            "src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java": "    public static void assertConfigurationEquals(ImmutableConfiguration expected, ImmutableConfiguration actual)\n        for (Iterator<String> it = expected.getKeys(); it.hasNext();)\n            String key = it.next();\n        for (Iterator<String> it = actual.getKeys(); it.hasNext();)\n            String key = it.next();\n    public static File getTestFile(String name)\n    public static File getOutFile(String name)\n    public static URL getTestURL(String name)\n    public static URL getOutURL(String name)\n    public static void checkEquals(Object o1, Object o2, boolean expEquals)\n    public static List<String> keysToList(ImmutableConfiguration config)\n        List<String> keyList = new LinkedList<>();\n    public static Set<String> keysToSet(ImmutableConfiguration config)\n        Set<String> keySet = new HashSet<>();\n    public static void appendKeys(ImmutableConfiguration config,\n            Collection<String> collection)\n        for (Iterator<String> it = config.getKeys(); it.hasNext();)\n    private static URL urlFromFile(File file)\n        catch (MalformedURLException mex)\n",
            "src/test/java/org/apache/commons/configuration2/DatabaseConfigurationTestHelper.java": "    public void setAutoCommit(boolean autoCommit)\n        File script = ConfigurationAssert.getTestFile(\"testdb.script\");\n    public DatabaseBuilderParameters setUpMultiParameters(String configName)\n    public <T extends DatabaseConfiguration> T createConfig(Class<T> configCls,\n            DatabaseBuilderParameters params) throws ConfigurationException\n    public <T extends DatabaseConfiguration> T setUpConfig(Class<T> configCls)\n            Class<T> configCls, String configName)\n            catch (Exception ex)\n        BasicDataSource ds = new BasicDataSource();\n        Connection conn = ds.getConnection();\n        IDatabaseConnection connection = new DatabaseConnection(conn);\n        IDataSet dataSet = new XmlDataSet(new FileInputStream(\n",
            "src/test/java/org/apache/commons/configuration2/FileURLStreamHandler.java": "    protected URLConnection openConnection(URL u) throws IOException\n",
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java": "    public static void testGetInterpolator(AbstractConfiguration config)\n        ConfigurationInterpolator interpol = config.getInterpolator();\n            public Object lookup(String varName)\n            AbstractConfiguration config)\n        Configuration c = config.interpolatedConfiguration();\n        List<?> lst = (List<?>) c.getProperty(\"inttest.list\");\n    public static void testInterpolation(Configuration config)\n        String unInterpolatedValue = \"${applicationRoot2}/db/hypersonic\";\n        String dbProp = \"/home/applicationRoot/db/hypersonic\";\n        String[] arrayInt = config.getStringArray(\"arrayInt\");\n    public static void testInterpolationConstants(Configuration config)\n    public static void testInterpolationEnvironment(Configuration config)\n        Map<String, String> env = System.getenv();\n        for (Map.Entry<String, String> e : env.entrySet())\n        for (Map.Entry<String, String> e : env.entrySet())\n    public static void testInterpolationEscaped(Configuration config)\n    public static void testInterpolationLoop(Configuration config)\n        catch (IllegalStateException e)\n    public static void testInterpolationSubset(Configuration config)\n        Configuration subset = config.subset(\"test\");\n    public static void testInterpolationSystemProperties(Configuration config)\n        String[] sysProperties =\n    public static void testInterpolationUnknownProperty(Configuration config)\n    public static void testMultipleInterpolation(Configuration config)\n        String expectedValue = \"/base-level/first-level/second-level/third-level\";\n",
            "src/test/java/org/apache/commons/configuration2/Logging.java": "        catch (Exception ex)\n        String level = System.getProperty(\"LogLevel\");\n            org.apache.log4j.Logger log = org.apache.log4j.Logger.getRootLogger();\n            Appender appender = new ConsoleAppender(new PatternLayout(\"%p %l - %m%n\"), ConsoleAppender.SYSTEM_OUT);\n    public Logging(String name)\n    public Logging(org.apache.log4j.Logger logger)\n    public void trace(Object message)\n    public void trace(Object message, Throwable t)\n    public void debug(Object message)\n    public void debug(Object message, Throwable t)\n    public void info(Object message)\n    public void info(Object message, Throwable t)\n    public void warn(Object message)\n    public void warn(Object message, Throwable t)\n    public void error(Object message)\n    public void error(Object message, Throwable t)\n    public void fatal(Object message)\n    public void fatal(Object message, Throwable t)\n",
            "src/test/java/org/apache/commons/configuration2/MockInitialContextFactory.java": "    public Context getInitialContext(@SuppressWarnings(\"rawtypes\") Hashtable env) throws NamingException\n        boolean useCycles = env.containsKey(PROP_CYCLES);\n        Mock mockTopCtx = createCtxMock(PREFIX);\n        Mock mockCycleCtx = createCtxMock(\"\");\n        Mock mockPrfxCtx = createCtxMock(\"\");\n        Mock mockBaseCtx = new Mock(Context.class);\n            Mock mockEnum = createEnumMock(mockCycleCtx, PROP_NAMES,\n    private Mock createCtxMock(String prefix)\n        Mock mockCtx = new Mock(Context.class);\n            String errProp = (prefix.length() > 0) ? PROP_NAMES[i] : PREFIX\n        for (String element : MISSING_NAMES) {\n    private void bind(Mock mockCtx, String name, String value)\n    private void bindError(Mock mockCtx, String name)\n    private Mock createEnumMock(Mock mockCtx, String[] names, Object[] values,\n            boolean close)\n        Mock mockEnum = new Mock(NamingEnumeration.class);\n    private Mock createEnumMock(Mock mockCtx, String[] names, Object[] values)\n    private void addEnumPair(Mock mockEnum, String name, Object value)\n        NameClassPair ncp = new NameClassPair(name, value.getClass().getName());\n    private void closeEnum(Mock mockEnum)\n",
            "src/test/java/org/apache/commons/configuration2/NonCloneableConfiguration.java": "    protected void addPropertyDirect(String key, Object value)\n    protected boolean containsKeyInternal(String key)\n    protected Object getPropertyInternal(String key)\n    protected void clearPropertyDirect(String key)\n",
            "src/test/java/org/apache/commons/configuration2/NonStringTestHolder.java": "    public void setConfiguration(Configuration configuration)\n        boolean booleanValue = configuration.getBoolean(\"test.boolean\");\n        boolean booleanValue = configuration.getBoolean(\"test.boolean.missing\", true);\n        Boolean booleanObject = configuration.getBoolean(\"test.boolean.missing\", new Boolean(true));\n        byte testValue = 10;\n        byte byteValue = configuration.getByte(\"test.byte\");\n        double testValue = 10.25;\n        double doubleValue = configuration.getDouble(\"test.double\");\n        double testValue = 10.25;\n        double doubleValue = configuration.getDouble(\"test.double.missing\", 10.25);\n        float testValue = (float) 20.25;\n        float floatValue = configuration.getFloat(\"test.float\");\n        float testValue = (float) 20.25;\n        float floatValue = configuration.getFloat(\"test.float.missing\", testValue);\n        int intValue = configuration.getInt(\"test.integer\");\n        int intValue = configuration.getInt(\"test.integer.missing\", 10);\n        long longValue = configuration.getLong(\"test.long\");\n        long longValue = configuration.getLong(\"test.long.missing\", 1000000);\n        short shortValue = configuration.getShort(\"test.short\");\n        short shortValue = configuration.getShort(\"test.short.missing\", (short) 1);\n        List<?> list = configuration.getList(\"missing.list\");\n        Configuration subset = configuration.subset(\"test\");\n        Iterator<String> it = subset.getKeys();\n            String key = it.next();\n",
            "src/test/java/org/apache/commons/configuration2/SynchronizerTestImpl.java": "    public void verify(Methods... expMethods)\n    public void verifyStart(Methods... expMethods)\n    public void verifyEnd(Methods... expMethods)\n    public void verifyContains(Methods... expMethods)\n    private String constructExpectedMethods(Methods... expMethods)\n        StringBuilder buf = new StringBuilder();\n        for (Methods m : expMethods)\n    private void append(Methods m)\n",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfiguration.java": "        Configuration config = getConfiguration();\n        Configuration config = getConfiguration();\n        List<?> list = config.getList(\"list\");\n        AbstractConfiguration config = getConfiguration();\n        List<Object> list = config.getList(\"key3\");\n        List<Object> expected = new ArrayList<>();\n        Configuration config = getConfiguration();\n        Configuration config = getConfiguration();\n        Configuration config = getConfiguration();\n        Configuration config = getConfiguration();\n        Iterator<String> keys = config.getKeys();\n        List<String> expectedKeys = new ArrayList<>();\n        List<String> actualKeys = new ArrayList<>();\n        AbstractConfiguration config = getEmptyConfiguration();\n        ConfigurationLogger log = new ConfigurationLogger(config.getClass());\n        Configuration config = getConfiguration();\n        catch (ConversionException cex)\n",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java": "        AbstractConfiguration config = new TestConfigurationImpl(\n                Collection<String> keyCol = new ArrayList<>();\n                String[] keys = keyCol.toArray(new String[keyCol.size()]);\n        AbstractConfiguration config = new TestConfigurationImpl(\n        AbstractConfiguration config = new TestConfigurationImpl(\n    private void checkAddListProperty(AbstractConfiguration config)\n        Object[] lstValues1 = new Object[]\n        Object[] lstValues2 = new Object[]\n        List<Object> lst = config.getList(\"test\");\n        AbstractConfiguration config = setUpDestConfig();\n        Configuration srcConfig = setUpSourceConfig();\n            String key = KEY_PREFIX + i;\n        Configuration srcConfig = setUpSourceConfig();\n        AbstractConfiguration config = setUpDestConfig();\n        AbstractConfiguration config = setUpDestConfig();\n        Configuration srcConfig = setUpSourceConfig();\n        CollectingConfigurationListener l = new CollectingConfigurationListener();\n        AbstractConfiguration config = setUpDestConfig();\n        BaseConfiguration srcConfig = new BaseConfiguration();\n        BaseConfiguration dstConfig = new BaseConfiguration();\n        AbstractConfiguration config = setUpDestConfig();\n        Configuration srcConfig = setUpSourceConfig();\n            String key = KEY_PREFIX + i;\n                List<Object> values = config.getList(key);\n        AbstractConfiguration config = setUpDestConfig();\n        AbstractConfiguration config = setUpDestConfig();\n        Configuration srcConfig = setUpSourceConfig();\n        CollectingConfigurationListener l = new CollectingConfigurationListener();\n        AbstractConfiguration config = setUpDestConfig();\n        BaseConfiguration srcConfig = new BaseConfiguration();\n        BaseConfiguration dstConfig = new BaseConfiguration();\n        AbstractConfiguration config = new TestConfigurationImpl(\n        Lookup look = EasyMock.createMock(Lookup.class);\n        AbstractConfiguration config =\n        int count = config.getInterpolator().getLookups().size();\n        Map<String, Lookup> lookups = new HashMap<>();\n        Map<String, Lookup> lookups2 = config.getInterpolator().getLookups();\n        Lookup look = EasyMock.createMock(Lookup.class);\n        AbstractConfiguration config =\n        Map<String, Lookup> lookups = config.getInterpolator().getLookups();\n        Lookup look = EasyMock.createMock(Lookup.class);\n        AbstractConfiguration config =\n        List<Lookup> lookups = config.getInterpolator().getDefaultLookups();\n        Lookup look = EasyMock.createMock(Lookup.class);\n        AbstractConfiguration config =\n        List<Lookup> lookups = config.getInterpolator().getDefaultLookups();\n        AbstractConfiguration config =\n        List<Lookup> defLookups = config.getInterpolator().getDefaultLookups();\n        ConfigurationInterpolator parent =\n        AbstractConfiguration config =\n        ConfigurationInterpolator ci = config.getInterpolator();\n        ConfigurationInterpolator parent =\n        AbstractConfiguration config =\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        String[] values = {\"some\", \"test\", \"values\"};\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        List<String> values = Arrays.asList(\"some\", \"test\", \"values\");\n        BaseConfiguration config = new BaseConfiguration();\n        String[] array = config.getStringArray(KEY_PREFIX);\n    private void checkGetListScalar(Object value)\n        BaseConfiguration config = new BaseConfiguration();\n        List<Object> lst = config.getList(KEY_PREFIX);\n    private void checkGetStringArrayScalar(Object value)\n        BaseConfiguration config = new BaseConfiguration();\n        String[] array = config.getStringArray(KEY_PREFIX);\n        BaseConfiguration config = new BaseConfiguration();\n        BaseConfiguration config = new BaseConfiguration();\n        BaseConfiguration config = new BaseConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config2 = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        ConversionHandler handler = new DefaultConversionHandler();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        Integer value = 20130816;\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        Integer defaultValue = 2121;\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        Integer defaultValue = 2121;\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        Integer[] expected = new Integer[PROP_COUNT];\n        Integer[] result = config.get(Integer[].class, KEY_PREFIX);\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        short[] expected = new short[PROP_COUNT];\n        short[] result =\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        int[] defValue = {\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n    private static List<Integer> prepareListTest(PropertiesConfiguration config)\n        List<Integer> expected = new ArrayList<>(PROP_COUNT);\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        List<Integer> expected = prepareListTest(config);\n        List<Integer> result = config.getList(Integer.class, KEY_PREFIX);\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        List<Integer> defValue = Arrays.asList(1, 2, 3);\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        List<Integer> expected = prepareListTest(config);\n        List<Integer> result = new ArrayList<>(PROP_COUNT);\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        List<Integer> expected = prepareListTest(config);\n        Collection<Integer> result = config.getCollection(Integer.class, KEY_PREFIX, null, new ArrayList<Integer>());\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        List<Integer> result = new ArrayList<>(1);\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        List<Integer> result = new ArrayList<>();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        List<Integer> defValue = Arrays.asList(1, 2, 4, 8, 16, 32);\n        Collection<Integer> result = config.getCollection(Integer.class, KEY_PREFIX, null, defValue);\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        ConfigurationDecoder decoder =\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        ConfigurationDecoder decoder =\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        ConfigurationDecoder decoder =\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        AbstractConfiguration config =\n        BaseConfiguration config = new BaseConfiguration();\n        AbstractConfiguration config = new TestConfigurationImpl(\n    private void checkListProperties(Configuration config)\n    private void checkCopyEvents(CollectingConfigurationListener l,\n            Configuration src, EventType<?> eventType)\n        Map<String, ConfigurationEvent> events = new HashMap<>();\n        for (ConfigurationEvent e : l.events)\n        for (Iterator<String> it = src.getKeys(); it.hasNext();)\n            String key = it.next();\n        public TestConfigurationImpl(AbstractConfiguration wrappedConfig)\n        protected void addPropertyDirect(String key, Object value)\n        protected boolean containsKeyInternal(String key)\n        protected Object getPropertyInternal(String key)\n        protected void clearPropertyDirect(String key)\n        public void onEvent(ConfigurationEvent event)\n",
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationSynchronization.java": "        PropertiesConfiguration c = new PropertiesConfiguration();\n        AbstractConfiguration subset =\n        Configuration config2 = EasyMock.createStrictMock(Configuration.class);\n        Configuration config2 = prepareConfigurationMockForCopy();\n        Configuration config2 = prepareConfigurationMockForCopy();\n",
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java": "        ImmutableNode root =\n        ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder(1);\n        ImmutableNode.Builder nodeBuilder = new ImmutableNode.Builder(1);\n    private static void checkGetProperty(AbstractHierarchicalConfiguration<?> testConfig)\n            String name = config.getString(\"indexList.index(\" + idx\n            String name = config.getString(\"indexList.index(\" + idx\n        List<String> keys = new ArrayList<>();\n        for (Iterator<String> it = config.getKeys(); it.hasNext();)\n        Iterator<String> it = config.getKeys(\"order\");\n        Set<String> keys = new HashSet<>();\n        for (Iterator<String> it = config.getKeys(); it.hasNext();)\n        Iterator<String> itKeys = config.getKeys(\"tables.table[@type]\");\n        Iterator<String> it = config.getKeys(\"order.key1\");\n        Iterator<String> it = config.getKeys(\"order.key1\");\n        List<?> list = (List<?>) prop;\n        DefaultConfigurationKey key = createConfigurationKey();\n        int maxIdx = config.getMaxIndex(\"tables.table(0).fields.field.name\");\n            DefaultConfigurationKey key =\n        Configuration copy = (Configuration) config.clone();\n        EventListener<ConfigurationEvent> l = new EventListenerTestImpl(null);\n        AbstractHierarchicalConfiguration<?> copy =\n        Configuration clone = (Configuration) config.clone();\n        Collection<ImmutableNode> nodes = new ArrayList<>();\n        Collection<ImmutableNode> nodes = new ArrayList<>();\n        ImmutableNode newNode =\n        Collection<ImmutableNode> nodes = new ArrayList<>();\n        AbstractHierarchicalConfigurationTestImpl configDest =\n        Collection<ImmutableNode> nodes = getRootNode().getChildren();\n            String keyTab = \"newNodes.tables.table(\" + i + \").\";\n        Configuration sub = config.subset(\"test.absolute.dir\");\n        Configuration sub1 = config.subset(\"prop2\");\n        Configuration sub2 = sub1.subset(\"prop\");\n        AbstractHierarchicalConfiguration<?> c = (AbstractHierarchicalConfiguration<?>) InterpolationTestHelper\n        BaseHierarchicalConfiguration copy =\n        List<ImmutableNode> nodes =\n        String attrKey = \"tables.table(0)[@type]\";\n        Map<ImmutableNode, String> cache = new HashMap<>();\n        ImmutableNode nodeTabName =\n        ImmutableNode nodeFldName =\n        Map<ImmutableNode, String> cache = new HashMap<>();\n        ImmutableNode nodeTabName =\n        NodeHandler<ImmutableNode> handler = config.getModel().getNodeHandler();\n        Map<ImmutableNode, String> cache = new HashMap<>();\n        ImmutableNode nodeTabName =\n        NodeHandler<ImmutableNode> handler = config.getModel().getNodeHandler();\n        Map<ImmutableNode, String> cache = new HashMap<>();\n        Map<ImmutableNode, String> cache = new HashMap<>();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        NodeModel<ImmutableNode> model = config.getNodeModel();\n        ImmutableNode rootNode = model.getNodeHandler().getRootNode();\n    private void checkKeys(String prefix, String[] expected)\n        Set<String> values = new HashSet<>();\n        for (String anExpected : expected) {\n        Iterator<String> itKeys = config.getKeys(prefix);\n            String key = itKeys.next();\n        Set<String> keys = ConfigurationAssert.keysToSet(config);\n    private static void checkContent(Configuration c)\n        public AbstractHierarchicalConfigurationTestImpl(InMemoryNodeModel model)\n        public SubnodeConfiguration configurationAt(String key,\n                boolean supportUpdates)\n        public SubnodeConfiguration configurationAt(String key)\n        public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(String key)\n        public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(String key, boolean supportUpdates) {\n        public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(String key)\n        public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(String key, boolean supportUpdates) {\n                String key, boolean supportUpdates)\n                String key)\n                String key)\n                String key)\n",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java": "        byte oneB = 1;\n        byte twoB = 2;\n        short oneS = 1;\n        short twoS = 2;\n        long oneL = 1;\n        long twoL = 2;\n        float oneF = 1;\n        float twoF = 2;\n        double oneD = 1;\n        double twoD = 2;\n        BigDecimal number = new BigDecimal(\"123.456\");\n        BigDecimal defaultValue = new BigDecimal(\"654.321\");\n        BigInteger number = new BigInteger(\"1234567890\");\n        BigInteger defaultValue = new BigInteger(\"654321\");\n        String string = \"The quick brown fox\";\n        String defaultValue = \"jumps over the lazy dog\";\n        boolean boolT = true, boolF = false;\n        List<Object> list = config.getList(\"number\");\n        List<String> list = new ArrayList<>();\n        String prop = \"hey, that's a test\";\n        List<Object> list = config.getList(\"prop.string\");\n        String prop2 = \"hey\\\\, that's a test\";\n        Object[] data = new Object[] {\n        Iterator<?> it = col.iterator();\n        StringTokenizer tok = new StringTokenizer(\"The quick brown fox jumps over the lazy dog.\", \" \");\n        Properties p = new Properties();\n        String prop = \"hey, that's a test\";\n        String prop2 = \"hey\\\\, that's a test\";\n        ConfigurationInterpolator interpolator =\n        Lookup prefixLookup = EasyMock.createMock(Lookup.class);\n        Lookup defLookup = EasyMock.createMock(Lookup.class);\n        Map<String, Lookup> prefixLookups = new HashMap<>();\n        List<Lookup> defLookups = new ArrayList<>();\n        ConfigurationInterpolator interpolator = config.getInterpolator();\n        List<Lookup> defLookups2 = interpolator.getDefaultLookups();\n        String var = \"testVariable\";\n        Object value = 42;\n        BaseConfiguration config2 = (BaseConfiguration) config.clone();\n        for (Iterator<String> it = config.getKeys(); it.hasNext();)\n            String key = it.next();\n        EventListener<ConfigurationEvent> l = new EventListenerTestImpl(config);\n        BaseConfiguration config2 = (BaseConfiguration) config.clone();\n        BaseConfiguration config2 = (BaseConfiguration) config.clone();\n        BaseConfiguration clone = (BaseConfiguration) config.clone();\n",
            "src/test/java/org/apache/commons/configuration2/TestBaseConfigurationXMLReader.java": "        BaseConfigurationXMLReader reader = new BaseConfigurationXMLReader();\n        BaseConfigurationXMLReader reader = new BaseConfigurationXMLReader(config);\n    private void checkDocument(BaseConfigurationXMLReader creader,\n    String rootName) throws Exception\n        SAXSource source = new SAXSource(creader, new InputSource());\n        DOMResult result = new DOMResult();\n        Transformer trans = TransformerFactory.newInstance().newTransformer();\n        Node root = ((Document) result.getNode()).getDocumentElement();\n        JXPathContext ctx = JXPathContext.newContext(root);\n    private void check(JXPathContext ctx, String path, String[] values)\n        Iterator<?> it = ctx.iterate(path);\n        for (String value : values) {\n    private void check(JXPathContext ctx, String path, String value)\n        public void characters(char[] ch, int start, int length)\n",
            "src/test/java/org/apache/commons/configuration2/TestBaseHierarchicalConfigurationSynchronization.java": "        XMLConfiguration c = new XMLConfiguration();\n        BaseHierarchicalConfiguration clone =\n        ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", \"true\");\n        BaseHierarchicalConfiguration copy =\n        HierarchicalConfiguration<ImmutableNode> sub = config.configurationAt(\"element2\");\n        List<HierarchicalConfiguration<ImmutableNode>> subs =\n        List<HierarchicalConfiguration<ImmutableNode>> subs =\n    private static boolean isDetached(HierarchicalConfiguration<ImmutableNode> c)\n        InMemoryNodeModel nodeModel = ((SubnodeConfiguration) c).getRootNodeModel();\n        HierarchicalConfiguration<ImmutableNode> sub =\n        HierarchicalConfiguration<ImmutableNode> subsub =\n        HierarchicalConfiguration<ImmutableNode> sub =\n        HierarchicalConfiguration<ImmutableNode> subsub =\n        HierarchicalConfiguration<ImmutableNode> sub2 =\n        BaseHierarchicalConfiguration conf2 =\n        HierarchicalConfiguration<ImmutableNode> sub =\n        HierarchicalConfiguration<ImmutableNode> sub2 =\n        Configuration subset = config.subset(\"test\");\n        FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        CountDownLatch startLatch = new CountDownLatch(1);\n        Collection<SubNodeAccessThread> threads =\n            SubNodeAccessThread t =\n            SubNodeAccessThread t =\n        for (SubNodeAccessThread t : threads)\n        public SubNodeAccessThread(HierarchicalConfiguration<ImmutableNode> c,\n                CountDownLatch startLatch, String keySubConfig,\n                String keyProperty)\n                HierarchicalConfiguration<ImmutableNode> subConfig =\n            catch (InterruptedException iex)\n            catch (InterruptedException e)\n",
            "src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java": "        byte oneB = 1;\n        byte twoB = 2;\n        short oneS = 1;\n        short twoS = 2;\n        long oneL = 1;\n        long twoL = 2;\n        float oneF = 1;\n        float twoF = 2;\n        double oneD = 1;\n        double twoD = 2;\n        BigDecimal number = new BigDecimal(\"123.456\");\n        BigDecimal defaultValue = new BigDecimal(\"654.321\");\n        BigInteger number = new BigInteger(\"1234567890\");\n        BigInteger defaultValue = new BigInteger(\"654321\");\n        String string = new String(\"The quick brown fox\");\n        String defaultValue = new String(\"jumps over the lazy dog\");\n        boolean boolT = true, boolF = false;\n        List<Object> list = config.getList(\"number\");\n        String prop = \"hey, that's a test\";\n        List<Object> list = config.getList(\"prop.string\");\n        String prop2 = \"hey\\\\, that's a test\";\n        Properties p = new Properties();\n        String prop = \"hey, that's a test\";\n        String prop2 = \"hey\\\\, that's a test\";\n        String unInterpolatedValue = \"${applicationRoot2}/db/hypersonic\";\n        String dbProp = \"/home/applicationRoot/db/hypersonic\";\n        BaseConfiguration superProp = config;\n        String[] arrayInt = superProp.getStringArray(\"arrayInt\");\n        String expectedValue =\n",
            "src/test/java/org/apache/commons/configuration2/TestCatalogResolver.java": "    private void load(String fileName) throws ConfigurationException\n        FileHandler handler = new FileHandler(config);\n        ConfigurationLogger log = new ConfigurationLogger(this.getClass());\n",
            "src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java": "        AbstractConfiguration c = setUpTestConfiguration();\n        AbstractConfiguration c = setUpTestConfiguration();\n        Set<String> names = config.getConfigurationNames();\n        AbstractConfiguration c = setUpTestConfiguration();\n        AbstractConfiguration c = setUpTestConfiguration();\n    private void checkAddConfig(AbstractConfiguration c)\n        Collection<EventListener<? super ConfigurationEvent>> listeners =\n        AbstractConfiguration c = setUpTestConfiguration();\n        AbstractConfiguration c = setUpTestConfiguration();\n        AbstractConfiguration c = setUpTestConfiguration();\n        AbstractConfiguration c = setUpTestConfiguration();\n        AbstractConfiguration c = setUpTestConfiguration();\n    private void checkRemoveConfig(AbstractConfiguration c)\n        AbstractConfiguration c = setUpTestConfiguration();\n        NodeCombiner combiner = new UnionCombiner();\n        CombinedConfiguration cc2 = (CombinedConfiguration) config.clone();\n        StrictConfigurationComparator comp = new StrictConfigurationComparator();\n        CombinedConfiguration cc2 = (CombinedConfiguration) config.clone();\n        AbstractConfiguration child = setUpTestConfiguration();\n        for (EventListener<?> listener : child\n        BaseHierarchicalConfiguration c1 = new BaseHierarchicalConfiguration();\n        PropertiesConfiguration c2 = new PropertiesConfiguration();\n        CombinedConfiguration cc = new CombinedConfiguration();\n        Set<Configuration> sources = config.getSources(key);\n        PropertiesConfiguration sub = new PropertiesConfiguration();\n        PropertiesConfiguration child = new PropertiesConfiguration();\n        DefaultExpressionEngine engineQuery =\n        DefaultExpressionEngine engineConvert =\n        AbstractConfiguration pc = new PropertiesConfiguration();\n        List<Configuration> list = config.getConfigurations();\n        Configuration c = list.get(2);\n        AbstractConfiguration pc = new PropertiesConfiguration();\n        List<String> list = config.getConfigurationNameList();\n        String name = list.get(1);\n        XMLConfiguration x1 = new XMLConfiguration();\n        XMLConfiguration x2 = new XMLConfiguration();\n        StringWriter w = new StringWriter();\n        String s = w.toString();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        SynchronizerTestImpl sync = setUpSynchronizerTest();\n        BaseHierarchicalConfiguration childEx =\n        catch (Exception ex)\n        XMLConfiguration xmlConf = new XMLConfiguration();\n        PropertiesConfiguration propConf = new PropertiesConfiguration();\n        Synchronizer sync = new ReadWriteSynchronizer();\n        for (Configuration c : config.getConfigurations())\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger errorCount = new AtomicInteger();\n        Collection<Thread> threads = new ArrayList<>(numberOfReaders + 1);\n        Thread writeThread =\n            Thread readThread =\n        for (Thread t : threads)\n        AbstractConfiguration srcConfig = setUpTestConfiguration();\n        AbstractConfiguration srcConfig = setUpSubConfigTest();\n        HierarchicalConfiguration<ImmutableNode> sub =\n    private void checkConfigurationsAt(boolean withUpdates)\n        List<HierarchicalConfiguration<ImmutableNode>> subs =\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        public void onEvent(ConfigurationEvent event)\n        public void checkEvent(int expectedInvalidate, int expectedOthers)\n        public ReadThread(Configuration readConfig, CountDownLatch latch,\n                AtomicInteger errCnt, int readCount)\n            catch (Exception e)\n            List<Object> values = config.getList(KEY_CONCURRENT);\n                for (Object value : values)\n        public WriteThread(CombinedConfiguration cc, CountDownLatch latch,\n                AtomicInteger errCnt, int writeCount)\n            catch (InterruptedException e)\n            int newIdx = (currentChildConfigIdx + 1) % testConfigs.size();\n",
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java": "        ListDelimiterHandler listHandler = new LegacyListDelimiterHandler(',');\n        FileHandler handler1 = new FileHandler(conf1);\n        FileHandler handler2 = new FileHandler(conf2);\n        FileHandler handler3 = new FileHandler(xmlConf);\n        List<Object> l = cc.getList(\"packages\");\n        Configuration internal = cc.getConfiguration(0);\n        catch (NoSuchElementException nsee)\n        Configuration subset = cc.subset(\"subset\");\n        List<Object> defaultList = new ArrayList<>();\n        Configuration conf1 = new BaseConfiguration();\n        Configuration conf2 = new BaseConfiguration();\n        List<String> orderedList = new ArrayList<>();\n        for (Iterator<String> keys = conf1.getKeys(); keys.hasNext();)\n        List<String> iteratedList = new ArrayList<>();\n        for (Iterator<String> keys = cc.getKeys(); keys.hasNext();)\n        List<String> orderedList = new ArrayList<>();\n        for (Iterator<String> keys = conf1.getKeys(\"test\"); keys.hasNext();)\n        List<String> iteratedList = new ArrayList<>();\n        for (Iterator<String> keys = cc.getKeys(\"test\"); keys.hasNext();)\n        BaseConfiguration defaults = new BaseConfiguration();\n        CompositeConfiguration c = new CompositeConfiguration(defaults);\n        catch (NoSuchElementException e)\n        catch (Exception e)\n        String TEST_KEY = \"testKey\";\n        Configuration defaults = new PropertiesConfiguration();\n        Configuration testConfiguration = new CompositeConfiguration(defaults);\n        Iterator<String> i = testConfiguration.getKeys();\n            String key = i.next();\n        CompositeConfiguration config = new CompositeConfiguration();\n        String[] array = config.getStringArray(\"list\");\n        PropertiesConfiguration c1 = new PropertiesConfiguration();\n        PropertiesConfiguration c2 = new PropertiesConfiguration();\n        List<Object> lst = cc.getList(\"c1.value\");\n        Collection<Configuration> configs = new ArrayList<>();\n        CompositeConfiguration config = new CompositeConfiguration(configs);\n        CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();\n        StrictConfigurationComparator comp = new StrictConfigurationComparator();\n        CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();\n        CompositeConfiguration cc2 = (CompositeConfiguration) cc.clone();\n        EventListenerTestImpl listener = new EventListenerTestImpl(cc);\n        EventListenerTestImpl listener = new EventListenerTestImpl(cc);\n        String key = \"configuration.loaded\";\n        EventListenerTestImpl listener = new EventListenerTestImpl(cc);\n        AbstractConfiguration config =\n        DefaultListDelimiterHandler listHandler =\n        PropertiesConfiguration p = new PropertiesConfiguration();\n        List<Object> lst = cc.getList(\"bar\");\n        String[] values = cc.getStringArray(\"bar\");\n        Configuration c1 = new PropertiesConfiguration();\n        Configuration c2 = new PropertiesConfiguration();\n        Configuration props = new PropertiesConfiguration();\n        String[] values = { \"a\", \"property\", \"with\", \"multiple\", \"values\" };\n        Configuration inMemoryConfig = EasyMock.createMock(Configuration.class);\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        SynchronizerTestImpl sync = installSynchronizer();\n        SynchronizerTestImpl sync = installSynchronizer();\n        SynchronizerTestImpl sync = installSynchronizer();\n        SynchronizerTestImpl sync = installSynchronizer();\n        SynchronizerTestImpl sync = installSynchronizer();\n",
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfigurationNonStringProperties.java": "        CompositeConfiguration cc = new CompositeConfiguration();\n        PropertiesConfiguration pc = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(pc);\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationConverter.java": "        Properties props = new Properties();\n        AbstractConfiguration config =\n        List<Object> item1 = config.getList(\"list\");\n        BaseConfiguration config = new BaseConfiguration();\n        BaseConfiguration config = createTestConfiguration();\n        Properties props = ConfigurationConverter.getProperties(config);\n        BaseConfiguration config = createTestConfiguration();\n        Properties props = ConfigurationConverter.getProperties(config);\n        Configuration src = EasyMock.createMock(Configuration.class);\n                String key = (String) EasyMock.getCurrentArguments()[0];\n        Properties props = ConfigurationConverter.getProperties(src);\n        BaseConfiguration config = new BaseConfiguration();\n        Properties props = ConfigurationConverter.getProperties(config);\n        Configuration config = new BaseConfiguration();\n        Map<Object, Object> map = ConfigurationConverter.getMap(config);\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationLookup.java": "        Configuration conf = new BaseConfiguration();\n        ConfigurationLookup lookup = new ConfigurationLookup(conf);\n        Configuration conf = new BaseConfiguration();\n        ConfigurationLookup lookup = new ConfigurationLookup(conf);\n        BaseConfiguration conf = new BaseConfiguration();\n        ConfigurationLookup lookup = new ConfigurationLookup(conf);\n        Configuration conf = new BaseConfiguration();\n        ConfigurationLookup lookup = new ConfigurationLookup(conf);\n        Collection<?> col = (Collection<?>) lookup.lookup(VAR);\n        Iterator<?> it = col.iterator();\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationMap.java": "        BaseConfiguration configuration = new BaseConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationSet.java": "        BaseConfiguration configuration = new BaseConfiguration();\n        Iterator<Map.Entry<Object, Object>> iterator = set.iterator();\n            Map.Entry<Object, Object> entry = iterator.next();\n",
            "src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java": "        Configuration config = new BaseConfiguration();\n        String lineSeparator = System.getProperty(\"line.separator\");\n        Configuration conf1 = new BaseConfiguration();\n        Configuration conf2 = new BaseConfiguration();\n        Configuration conf1 = new BaseConfiguration();\n        Configuration conf2 = new BaseConfiguration();\n        Configuration conf = new BaseConfiguration();\n        BaseHierarchicalConfiguration hc =\n        for (Iterator<String> it = conf.getKeys(); it.hasNext();)\n            String key = it.next();\n        Configuration conf = new BaseHierarchicalConfiguration();\n        BaseConfiguration conf = new BaseConfiguration();\n        HierarchicalConfiguration<?> hc = ConfigurationUtils\n        Configuration conf = new BaseConfiguration();\n        DefaultExpressionEngine engine =\n        HierarchicalConfiguration<?> hc = ConfigurationUtils\n        BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();\n        ExpressionEngine engine =\n        BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();\n        ExpressionEngine engine =\n        BaseConfiguration config = new BaseConfiguration();\n        HierarchicalConfiguration<?> hc = ConfigurationUtils\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        ImmutableNode rootNode = hc.getNodeModel().getNodeHandler().getRootNode();\n        ImmutableNode nodeX = rootNode.getChildren().get(0);\n        BaseHierarchicalConfiguration conf = new BaseHierarchicalConfiguration();\n        BaseHierarchicalConfiguration copy = (BaseHierarchicalConfiguration) ConfigurationUtils\n        Configuration myNonCloneableConfig = new NonCloneableConfiguration();\n        XMLBuilderParametersImpl params = new XMLBuilderParametersImpl();\n        XMLBuilderParametersImpl clone =\n        Map<String, Object> map = clone.getParameters();\n        for (Map.Entry<String, Object> e : params.getParameters().entrySet())\n        Long value = 20130116221714L;\n        XMLBuilderParametersImpl params = new XMLBuilderParametersImpl()\n        PropertiesConfiguration config = new PropertiesConfiguration()\n            protected void addPropertyDirect(String key, Object value)\n        Configuration c = EasyMock.createMock(Configuration.class);\n            public Class<?> loadClass(String name)\n        XMLConfiguration src = new XMLConfiguration();\n        EventSource source = ConfigurationUtils.asEventSource(this, true);\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        SynchronizerTestImpl sync2 =\n        CloneableSynchronizer sync = new CloneableSynchronizer(false);\n        CloneableSynchronizer sync2 =\n        public CloneableSynchronizer(boolean clone)\n",
            "src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java": "        BaseConfiguration baseConfig = new BaseConfiguration();\n        List<Object> booleans = new ArrayList<>();\n        List<Object> bytes = new ArrayList<>();\n        List<Object> shorts = new ArrayList<>();\n        List<Object> integers = new ArrayList<>();\n        List<Object> longs = new ArrayList<>();\n        List<Object> floats = new ArrayList<>();\n        List<Object> doubles = new ArrayList<>();\n        List<Object> bigintegers = new ArrayList<>();\n        List<Object> bigdecimals = new ArrayList<>();\n        String uri1 = \"http://jakarta.apache.org\";\n        String uri2 = \"http://www.apache.org\";\n        List<Object> uris = new ArrayList<>();\n        String url1 = \"http://jakarta.apache.org\";\n        String url2 = \"http://www.apache.org\";\n        List<Object> urls = new ArrayList<>();\n        List<Object> locales = new ArrayList<>();\n        String color1 = \"FF0000\";\n        String color2 = \"0000FF\";\n        List<Object> colors = new ArrayList<>();\n        String pattern = DATE_PATTERN;\n        DateFormat format = new SimpleDateFormat(pattern);\n        Date date1 = format.parse(\"2004-01-01\");\n        Date date2 = format.parse(\"2004-12-31\");\n        Calendar calendar1 = Calendar.getInstance();\n        Calendar calendar2 = Calendar.getInstance();\n        List<Object> dates = new ArrayList<>();\n        List<Object> calendars = new ArrayList<>();\n        Configuration baseconf = new BaseConfiguration();\n        DataConfiguration conf = new DataConfiguration(baseconf);\n        Configuration baseconf = new BaseConfiguration();\n        DataConfiguration conf = new DataConfiguration(baseconf);\n        Configuration baseconf = new BaseConfiguration();\n        DataConfiguration conf = new DataConfiguration(baseconf);\n        Configuration baseconf = new BaseConfiguration();\n        DataConfiguration conf = new DataConfiguration(baseconf);\n        Iterator<String> it = conf.getKeys();\n        boolean[] defaultValue = new boolean[] { false, true };\n        boolean[] expected = new boolean[] { true, false };\n        byte[] defaultValue = new byte[] { 1, 2};\n        byte[] expected = new byte[] { 1, 2 };\n        short[] defaultValue = new short[] { 2, 1};\n        short[] expected = new short[] { 1, 2 };\n        int[] defaultValue = new int[] { 2, 1};\n        int[] expected = new int[] { 1, 2 };\n        long[] defaultValue = new long[] { 2, 1};\n        long[] expected = new long[] { 1, 2 };\n        float[] defaultValue = new float[] { 2, 1};\n        float[] expected = new float[] { 1, 2 };\n        double[] defaultValue = new double[] { 2, 1 };\n        double[] expected = new double[] { 1, 2 };\n        BigInteger[] defaultValue = new BigInteger[] { new BigInteger(\"2\"), new BigInteger(\"1\") };\n        BigInteger[] expected = new BigInteger[] { new BigInteger(\"1\"), new BigInteger(\"2\") };\n        List<BigInteger> bigIntegerList = conf.getBigIntegerList(\"biginteger.list\", null);\n        BigDecimal[] defaultValue = new BigDecimal[] { new BigDecimal(\"2\"), new BigDecimal(\"1\") };\n        BigDecimal[] expected = new BigDecimal[] { new BigDecimal(\"1\"), new BigDecimal(\"2\") };\n        URI defaultValue = new URI(\"http://www.google.com\");\n        URI expected = new URI(\"http://jakarta.apache.org\");\n        URI[] defaultValue = new URI[] { new URI(\"http://www.apache.org\"), new URI(\"http://jakarta.apache.org\") };\n        URI[] expected = new URI[] { new URI(\"http://jakarta.apache.org\"), new URI(\"http://www.apache.org\") };\n        URL defaultValue = new URL(\"http://www.google.com\");\n        URL expected = new URL(\"http://jakarta.apache.org\");\n        URL[] defaultValue = new URL[] { new URL(\"http://www.apache.org\"), new URL(\"http://jakarta.apache.org\") };\n        URL[] expected = new URL[] { new URL(\"http://jakarta.apache.org\"), new URL(\"http://www.apache.org\") };\n        Locale[] defaultValue = new Locale[] { Locale.GERMAN, Locale.FRENCH };\n        Locale[] expected = new Locale[] { Locale.FRENCH, Locale.GERMAN };\n        Color color = conf.getColor(\"color\");\n        Color[] defaultValue = new Color[] { Color.red, Color.blue };\n        Color[] expected = new Color[] { Color.red, Color.blue };\n        DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        Date expected = expectedDate();\n        Date defaultValue = new Date();\n        catch (NoSuchElementException e)\n        DefaultConversionHandler handler = new DefaultConversionHandler();\n        DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        Date date1 = format.parse(\"2004-01-01\");\n        Date date2 = format.parse(\"2004-12-31\");\n        Date[] defaultValue = new Date[] { date2, date1 };\n        Date[] expected = new Date[] { date1, date2 };\n        DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\n        Date date1 = format.parse(\"01/01/2004\");\n        Date date2 = format.parse(\"12/31/2004\");\n        Date[] expected = new Date[] { date1, date2 };\n        DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        Date date1 = format.parse(\"2004-01-01\");\n        Date date2 = format.parse(\"2004-12-31\");\n        List<Date> nullList = null;\n        DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        Calendar defaultValue = Calendar.getInstance();\n        catch (NoSuchElementException e)\n        Calendar expected = Calendar.getInstance();\n        DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        Date date1 = format.parse(\"2004-01-01\");\n        Date date2 = format.parse(\"2004-12-31\");\n        Calendar calendar1 = Calendar.getInstance();\n        Calendar calendar2 = Calendar.getInstance();\n        Calendar[] defaultValue = new Calendar[] { calendar2, calendar1 };\n        Calendar[] expected = new Calendar[] { calendar1, calendar2 };\n        DateFormat format = new SimpleDateFormat(\"MM/dd/yyyy\");\n        Date date1 = format.parse(\"01/01/2004\");\n        Date date2 = format.parse(\"12/31/2004\");\n        Calendar calendar1 = Calendar.getInstance();\n        Calendar calendar2 = Calendar.getInstance();\n        Calendar[] expected = new Calendar[] { calendar1, calendar2 };\n        DateFormat format = new SimpleDateFormat(DATE_PATTERN);\n        Date date1 = format.parse(\"2004-01-01\");\n        Date date2 = format.parse(\"2004-12-31\");\n        Calendar calendar1 = Calendar.getInstance();\n        Calendar calendar2 = Calendar.getInstance();\n        List<Calendar> nullList = null;\n        InetAddress expected = InetAddress.getByName(\"127.0.0.1\");\n        Object expected = createInternetAddress(\"ebourg@apache.org\");\n        catch (ConversionException e)\n        Object expected = createInternetAddress(\"ebourg@apache.org\");\n    private Object createInternetAddress(String email) throws Exception\n        Class<?> cls = Class.forName(\"javax.mail.internet.InternetAddress\");\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        catch (ConversionException e)\n        String key = \"test.str\";\n        String value = \"someTestValue\";\n        String key = \"test.property\";\n        String key = \"test.property\";\n        Configuration wrapped = EasyMock.createMock(Configuration.class);\n        String key = \"test.property\";\n        catch (ConversionException cex)\n",
            "src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java": "    private void setUpErrorListener(PotentialErrorDatabaseConfiguration config)\n        PotentialErrorDatabaseConfiguration config = setUpConfig();\n            EventType<? extends ConfigurationErrorEvent> type,\n            EventType<?> opType, String key, Object value)\n        Throwable exception = listener.checkEvent(type, opType, key, value);\n        DatabaseConfiguration config = helper.setUpConfig();\n        DatabaseConfiguration config = helper.setUpConfig();\n        DatabaseConfiguration config = helper.setUpMultiConfig();\n        DatabaseConfiguration config = helper.setUpConfig();\n        Configuration config = setUpConfig();\n        Configuration config = helper.setUpMultiConfig();\n        Configuration config = helper.setUpConfig();\n        Configuration config = helper.setUpMultiConfig();\n        DatabaseConfiguration config = helper.setUpMultiConfig();\n        DatabaseConfiguration config2 =\n        Configuration config = helper.setUpConfig();\n        Configuration config = helper.setUpConfig();\n        Configuration config = helper.setUpMultiConfig();\n        Configuration config = helper.setUpConfig();\n        Configuration config = setUpConfig();\n        Iterator<String> it = config.getKeys();\n        Configuration config = helper.setUpMultiConfig();\n        Iterator<String> it = config.getKeys();\n        Configuration config = setUpConfig();\n        Configuration config = helper.setUpMultiConfig();\n        Configuration config1 = setUpConfig();\n        Configuration config1 = helper.setUpMultiConfig();\n        Configuration config2 = helper.setUpMultiConfig(DatabaseConfiguration.class, \"testIsEmpty\");\n        DatabaseBuilderParameters params = helper.setUpDefaultParameters().setTable(\"configurationList\");\n        Configuration config1 = helper.createConfig(DatabaseConfiguration.class, params);\n        List<Object> list = config1.getList(\"key3\");\n        DatabaseBuilderParameters params = helper.setUpDefaultParameters().setTable(\"configurationList\");\n        Configuration config1 = helper.createConfig(DatabaseConfiguration.class, params);\n        Iterator<String> i = config1.getKeys();\n        Object key = i.next();\n        Configuration config = setUpConfig();\n        Configuration subset = config.subset(\"key1\");\n        DatabaseConfiguration config = helper.setUpConfig();\n        Iterator<String> it = setUpErrorConfig().getKeys();\n        DatabaseConfiguration config = setUpConfig();\n        List<Object> values = config.getList(\"keyMulti\");\n        DatabaseConfiguration config = setUpConfig();\n        DatabaseConfiguration config = setUpConfig();\n        String[] values = config.getStringArray(\"keyList\");\n        DatabaseConfiguration config = helper.setUpMultiConfig();\n        String[] values = config.getStringArray(\"keyList\");\n        ResultSet rs = EasyMock.createMock(ResultSet.class);\n        Clob clob = EasyMock.createMock(Clob.class);\n        DatabaseConfiguration config = helper.setUpConfig();\n        ResultSet rs = EasyMock.createMock(ResultSet.class);\n        Clob clob = EasyMock.createMock(Clob.class);\n        DatabaseConfiguration config = helper.setUpConfig();\n                DataSource ds = EasyMock.createMock(DataSource.class);\n                catch (SQLException e)\n",
            "src/test/java/org/apache/commons/configuration2/TestDynamicCombinedConfiguration.java": "        DynamicCombinedConfiguration config = new DynamicCombinedConfiguration();\n        DefaultListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        ConfigurationBuilder<XMLConfiguration> multiBuilder =\n        BuilderConfigurationWrapperFactory wrapFactory =\n        XMLConfiguration xml = new XMLConfiguration();\n        FileHandler handler = new FileHandler(xml);\n        CombinedConfigurationBuilder builder =\n        CombinedConfiguration config = builder.getConfiguration();\n    private SynchronizerTestImpl prepareSynchronizerTest(Configuration config)\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        DynamicCombinedConfiguration config =\n        SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        DynamicCombinedConfiguration config =\n        SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        DynamicCombinedConfiguration config =\n        Configuration child = new PropertiesConfiguration();\n        SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        DynamicCombinedConfiguration config =\n        SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        DynamicCombinedConfiguration config =\n        SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        DynamicCombinedConfiguration config =\n        String configName = \"testConfig\";\n        SynchronizerTestImpl sync = prepareSynchronizerTest(config);\n        CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        CombinedConfiguration config = builder.getConfiguration();\n        Thread testThreads[] = new Thread[THREAD_COUNT];\n        int failures[] = new int[THREAD_COUNT];\n        CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        CombinedConfiguration config = builder.getConfiguration();\n        Thread testThreads[] = new Thread[THREAD_COUNT];\n        int failures[] = new int[THREAD_COUNT];\n        CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        CombinedConfiguration config = builder.getConfiguration();\n        Thread testThreads[] = new Thread[THREAD_COUNT];\n        int failures[] = new int[THREAD_COUNT];\n        String[] ids = new String[] {null, \"2002\", \"3001\", \"3002\", \"3003\"};\n        String[] expected = new String[] {\"50\", \"25\", \"15\", \"25\", \"50\"};\n        File output = folder.newFile(\"testMultiDynamic_default.xml\");\n        ReloadingCombinedConfigurationBuilder builder =\n        ReaderThread testThreads[] = new ReaderThread[threadCount];\n        String id = config.getString(\"Product/FIIndex/FI[@id='123456782']\");\n        String rows = config.getString(\"rowsPerPage\");\n        for (ReaderThread testThread : testThreads) {\n        for (ReaderThread testThread : testThreads) {\n        ReloadThread(CombinedConfigurationBuilder b, int[] failures, int index, int count,\n                     boolean useId, String id, String expected)\n                    CombinedConfiguration combined = builder.getConfiguration();\n                    String value = combined.getString(\"rowsPerPage\", null);\n                catch (Exception ex)\n        public ReaderThread(CombinedConfigurationBuilder b)\n                    CombinedConfiguration combined = builder.getConfiguration();\n                    String bcId =\n                    int sleepTime = random.nextInt(75);\n            catch (ConfigurationException cex)\n            catch(InterruptedException iex)\n    private void verify(String key, DynamicCombinedConfiguration config, int rows)\n    private void copyFile(File input, File output) throws IOException\n        Reader reader = new FileReader(input);\n        Writer writer = new FileWriter(output);\n        char[] buffer = new char[4096];\n        public static void setId(String value)\n        public String lookup(String key)\n            String value = System.getProperty(\"Id\");\n",
            "src/test/java/org/apache/commons/configuration2/TestEnvironmentConfiguration.java": "        for (Iterator<String> it = config.getKeys(); it.hasNext();)\n            String key = it.next();\n        String key = config.getKeys().next();\n",
            "src/test/java/org/apache/commons/configuration2/TestEqualBehaviour.java": "        String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testEqual.properties\").getAbsolutePath();\n        PropertiesConfiguration c = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(c);\n        CombinedConfigurationBuilder builder =\n    private void checkEquality(String msg, Configuration c1, Configuration c2)\n        Iterator<String> it1 = c1.getKeys();\n        Iterator<String> it2 = c2.getKeys();\n            String key1 = it1.next();\n            String key2 = it2.next();\n    private void checkSameKey(String msg, String key, Configuration c1, Configuration c2)\n        String [] s1 = c1.getStringArray(key);\n        String [] s2 = c2.getStringArray(key);\n        List<Object> list1 = c1.getList(key);\n        List<Object> list2 = c2.getList(key);\n        Iterator<Object> it1 = list1.iterator();\n        Iterator<Object> it2 = list2.iterator();\n            String val1 = (String) it1.next();\n            String val2 = (String) it2.next();\n        Configuration simple = setupSimpleConfiguration();\n        Configuration composite = setupCompositeConfiguration();\n        Configuration simple = setupSimpleConfiguration();\n        Configuration composite = setupCompositeConfiguration();\n        String key = \"clear.property\";\n        Configuration simple = setupSimpleConfiguration();\n        Configuration composite = setupCompositeConfiguration();\n        String key = \"nonexisting.clear.property\";\n        Configuration simple = setupSimpleConfiguration();\n        Configuration composite = setupCompositeConfiguration();\n        String key = \"nonexisting.property\";\n        String value = \"new value\";\n        Configuration simple = setupSimpleConfiguration();\n        Configuration composite = setupCompositeConfiguration();\n        String key = \"existing.property\";\n        String value = \"new value\";\n        Configuration simple = setupSimpleConfiguration();\n        Configuration composite = setupCompositeConfiguration();\n        String key = \"nonexisting.property\";\n        String value = \"new value\";\n        Configuration simple = setupSimpleConfiguration();\n        Configuration composite = setupCompositeConfiguration();\n        String key = \"existing.property\";\n        String value = \"new value\";\n",
            "src/test/java/org/apache/commons/configuration2/TestEqualsProperty.java": "        PropertiesConfiguration conf = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(conf);\n        String equals = conf.getString(\"test.equals\");\n",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java": "        ImmutableNode root =\n            DefaultConfigurationKey key = createConfigurationKey();\n        Configuration subset = config.subset(\"tables.table(0).fields\");\n        String key = \"tables.table(0)[@type]\";\n        BaseHierarchicalConfiguration subset =\n        HierarchicalConfiguration<ImmutableNode> subConfig =\n        List<Object> lstFlds = subConfig.getList(\"fields.field.name\");\n        HierarchicalConfiguration<ImmutableNode> subConfig =\n        HierarchicalConfiguration<ImmutableNode> subConfig =\n        HierarchicalConfiguration<ImmutableNode> subConfig =\n        HierarchicalConfiguration<ImmutableNode> subConfig =\n        ImmutableHierarchicalConfiguration subConfig =\n        List<Object> lstFlds = subConfig.getList(\"fields.field.name\");\n        String newTableName = NodeStructureHelper.table(1) + \"_other\";\n        ImmutableHierarchicalConfiguration subConfig =\n    private void checkConfigurationAtAttributeNode(boolean withUpdates)\n        HierarchicalConfiguration<ImmutableNode> sub =\n            List<? extends ImmutableConfiguration> lstFlds)\n            ImmutableConfiguration sub = lstFlds.get(i);\n    private void checkConfigurationsAtWithUpdate(boolean withUpdates,\n            String expName)\n        String key = \"tables.table(1).fields.field\";\n        List<HierarchicalConfiguration<ImmutableNode>> lstFlds =\n        String key = \"tables.table\";\n        List<HierarchicalConfiguration<ImmutableNode>> subs =\n        BaseHierarchicalConfiguration sub =\n        List<ImmutableHierarchicalConfiguration> lstFlds =\n        String attrKey = \"tables.table(0)[@type]\";\n        Configuration copy = (Configuration) config.clone();\n        BaseHierarchicalConfiguration copy = new BaseHierarchicalConfiguration(config);\n        BaseHierarchicalConfiguration copy = new BaseHierarchicalConfiguration(config);\n        Configuration sub1 = config.subset(\"prop2\");\n        Configuration sub2 = sub1.subset(\"prop\");\n        BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration) InterpolationTestHelper\n        BaseHierarchicalConfiguration copy =\n        List<ImmutableHierarchicalConfiguration> children =\n        ImmutableHierarchicalConfiguration c1 = children.get(0);\n        ImmutableHierarchicalConfiguration c2 = children.get(1);\n    private void checkChildConfigurationsAtWithUpdates(boolean withUpdates,\n            String expectedName)\n        String key = \"tables.table(0)\";\n        List<HierarchicalConfiguration<ImmutableNode>> children =\n        HierarchicalConfiguration<ImmutableNode> sub = children.get(0);\n    private void checkContent(Configuration c)\n",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfigurationXMLReader.java": "        XMLConfiguration config = new XMLConfiguration();\n        FileHandler handler = new FileHandler(config);\n        SAXSource source = new SAXSource(parser, new InputSource());\n        DOMResult result = new DOMResult();\n        Transformer trans = TransformerFactory.newInstance().newTransformer();\n        Node root = ((Document) result.getNode()).getDocumentElement();\n        JXPathContext ctx = JXPathContext.newContext(root);\n",
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalXMLConfiguration.java": "    private void configTest(XMLConfiguration config)\n        FileHandler handler = new FileHandler(config);\n        FileHandler handler = new FileHandler(config);\n        FileHandler handler = new FileHandler(config);\n        FileHandler handler = new FileHandler(config);\n        FileHandler handler = new FileHandler(config);\n        Iterator<String> iter = config.getKeys();\n        FileHandler handler = new FileHandler(config);\n        File saveFile = folder.newFile(TEST_SAVENAME);\n        FileHandler handler2 = new FileHandler(config);\n        File saveFile = folder.newFile(TEST_SAVENAME);\n        File saveFile = folder.newFile(TEST_SAVENAME);\n        FileHandler handler = new FileHandler(config);\n",
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java": "    private static INIConfiguration setUpConfig(String data)\n        INIConfiguration instance = new INIConfiguration();\n    private static void load(INIConfiguration instance, String data)\n        StringReader reader = new StringReader(data);\n        catch (IOException e)\n    private static String saveToString(INIConfiguration config)\n        StringWriter writer = new StringWriter();\n        catch (IOException e)\n    private File writeTestFile(String content) throws IOException\n        File file = folder.newFile();\n        PrintWriter out = new PrintWriter(new FileWriter(file));\n        Writer writer = new StringWriter();\n        INIConfiguration instance = new INIConfiguration();\n    \tString input = MessageFormat.format(INI_DATA4, \"=\").trim();\n    \tString expectedOutput = MessageFormat.format(INI_DATA4, outputSeparator).trim();\n    \tINIConfiguration instance = new FileBasedConfigurationBuilder<>(\n        Writer writer = new StringWriter();\n        String result = writer.toString().trim();\n    private void checkSave(String content) throws ConfigurationException\n        INIConfiguration config = setUpConfig(content);\n        String sOutput = saveToString(config);\n        INIConfiguration config = new INIConfiguration();\n        String data =\n        String content = saveToString(config);\n        INIConfiguration config2 = new INIConfiguration();\n        File file = writeTestFile(INI_DATA);\n        FileBasedConfigurationBuilder<INIConfiguration> builder =\n        INIConfiguration config = builder.getConfiguration();\n    private void checkContent(INIConfiguration instance)\n    private void checkLoad(String data) throws ConfigurationException\n        INIConfiguration instance = setUpConfig(data);\n        INIConfiguration instance = new INIConfiguration();\n        INIConfiguration instance = new INIConfiguration();\n        INIConfiguration instance = new INIConfiguration();\n        Set<String> expResult = new HashSet<>();\n        Set<String> result = instance.getSections();\n        INIConfiguration config = setUpConfig(INI_DATA2);\n        INIConfiguration config = setUpConfig(INI_DATA2);\n        INIConfiguration config = setUpConfig(INI_DATA2);\n        INIConfiguration config = setUpConfig(INI_DATA2);\n        INIConfiguration config = setUpConfig(INI_DATA2);\n        INIConfiguration config = new INIConfiguration();\n        StringWriter writer = new StringWriter();\n        INIConfiguration config2 = new INIConfiguration();\n        INIConfiguration config = setUpConfig(content);\n        INIConfiguration config = setUpConfig(content);\n        INIConfiguration config = setUpConfig(INI_DATA2);\n        INIConfiguration config = setUpConfig(data);\n        INIConfiguration config = setUpConfig(data);\n        INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        HierarchicalConfiguration<ImmutableNode> sub = config.getSection(null);\n    private void checkSectionNames(INIConfiguration config,\n            String[] expected)\n        Set<String> sectionNames = config.getSections();\n        Iterator<String> it = sectionNames.iterator();\n    private INIConfiguration checkSectionNames(String data,\n            String[] expected) throws ConfigurationException\n        INIConfiguration config = setUpConfig(data);\n        INIConfiguration config = checkSectionNames(data,\n        INIConfiguration config = setUpConfig(INI_DATA2);\n        INIConfiguration config = setUpConfig(INI_DATA);\n        HierarchicalConfiguration<ImmutableNode> section =\n        INIConfiguration config = setUpConfig(INI_DATA);\n        HierarchicalConfiguration<ImmutableNode> section =\n        INIConfiguration config = setUpConfig(data);\n        HierarchicalConfiguration<ImmutableNode> section = config.getSection(\"section1\");\n        INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        HierarchicalConfiguration<ImmutableNode> section = config.getSection(null);\n        INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        GlobalSectionTestThread[] threads = new GlobalSectionTestThread[threadCount];\n        INIConfiguration config = setUpConfig(INI_DATA);\n        HierarchicalConfiguration<ImmutableNode> section = config.getSection(null);\n        INIConfiguration config = setUpConfig(INI_DATA);\n        HierarchicalConfiguration<ImmutableNode> section = config\n        INIConfiguration config = setUpConfig(INI_DATA3);\n        INIConfiguration config = setUpConfig(INI_DATA3);\n        INIConfiguration config = setUpConfig(INI_DATA3);\n        INIConfiguration config = setUpConfig(INI_DATA3);\n        INIConfiguration config = setUpConfig(INI_DATA3);\n        INIConfiguration config = setUpConfig(INI_DATA3);\n        INIConfiguration config = setUpConfig(INI_DATA3);\n        StringWriter writer = new StringWriter();\n        String data = INI_DATA + \"key.dot = dotValue\";\n        INIConfiguration conf = new INIConfiguration();\n        String output = saveToString(conf);\n        INIConfiguration config = setUpConfig(content);\n        INIConfiguration config = setUpConfig(INI_DATA_SEPARATORS);\n        INIConfiguration config = setUpConfig(INI_DATA_SEPARATORS);\n        INIConfiguration config = setUpConfig(INI_DATA_SEPARATORS);\n        INIConfiguration config = setUpConfig(data);\n        StringWriter writer = new StringWriter();\n        HierarchicalConfiguration<?> config2 = setUpConfig(writer.toString());\n        INIConfiguration config = setUpConfig(data);\n        HierarchicalConfiguration<ImmutableNode> sub = config.getSection(\"section\");\n        StringWriter writer = new StringWriter();\n        String content = writer.toString();\n        int pos = content.indexOf(\"[section]\");\n        INIConfiguration config = setUpConfig(INI_DATA);\n        StringWriter writer = new StringWriter();\n        INIConfiguration config2 = setUpConfig(writer.toString());\n        INIConfiguration config =\n        HierarchicalConfiguration<ImmutableNode> section = config.getSection(\"section\");\n        Iterator<String> keys = section.getKeys();\n        INIConfiguration config =\n        List<Object> list = config.getList(\"test.list\");\n        INIConfiguration config =\n        INIConfiguration config = setUpConfig(INI_DATA);\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        INIConfiguration config = new INIConfiguration();\n        String output = saveToString(config);\n        INIConfiguration config2 = setUpConfig(output);\n        String data =\n        INIConfiguration config = setUpConfig(data);\n        INIConfiguration config2 = setUpConfig(saveToString(config));\n        List<Object> list = config2.getList(\"sectest.list\");\n        INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        HierarchicalConfiguration<ImmutableNode> sub = config.getSection(null);\n        Iterator<String> keys = sub.getKeys();\n            StringBuilder buf = new StringBuilder();\n        INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        SubnodeConfiguration sub = config.getSection(null);\n        NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n        INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        SubnodeConfiguration sub = config.getSection(null);\n        NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n        INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        SubnodeConfiguration sub = config.getSection(null);\n        NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n        ImmutableNode child = handler.getChild(handler.getRootNode(), 0);\n        catch (IndexOutOfBoundsException iex)\n        INIConfiguration config = setUpConfig(INI_DATA_GLOBAL);\n        SubnodeConfiguration sub = config.getSection(null);\n        NodeHandler<ImmutableNode> handler = sub.getModel().getNodeHandler();\n        List<ImmutableNode> children = handler.getRootNode().getChildren();\n        DefaultExpressionEngine engine =\n        INIConfiguration config = new INIConfiguration();\n        INIConfiguration config = setUpConfig(section);\n        StringWriter writer = new StringWriter();\n        public GlobalSectionTestThread(INIConfiguration conf)\n                catch (IllegalStateException istex)\n",
            "src/test/java/org/apache/commons/configuration2/TestImmutableConfiguration.java": "        Configuration confOrg = createTestConfig();\n        ImmutableConfiguration conf =\n        for (Iterator<String> it = confOrg.getKeys(); it.hasNext();)\n            String key = it.next();\n        ImmutableConfiguration conf =\n    private static Set<String> fetchKeys(Iterator<String> it)\n        Set<String> keys = new HashSet<>();\n        Configuration confOrg = createTestConfig();\n        ImmutableConfiguration conf =\n        ImmutableConfiguration conf =\n        Iterator<String> it = conf.getKeys();\n        Configuration confOrg = createTestConfig();\n        ImmutableConfiguration conf =\n        String value = \"new value\";\n        ImmutableConfiguration conf =\n        Configuration mutableConf = (Configuration) conf;\n        ImmutableConfiguration conf =\n        ImmutableConfiguration subset = conf.immutableSubset(\"test\");\n        HierarchicalConfiguration<?> conf = new BaseHierarchicalConfiguration();\n        String key = \"test\";\n        ImmutableHierarchicalConfiguration ihc =\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        ImmutableConfiguration ic =\n        catch (NoSuchElementException e)\n",
            "src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java": "        Properties props = new Properties();\n        Context ctx = new InitialContext(props);\n        Object o = conf.getProperty(\"test.boolean\");\n        String key = \"test.boolean\";\n        Iterator<EventListener<? super ConfigurationErrorEvent>> iterator =\n            EventType<? extends ConfigurationErrorEvent> type,\n            EventType<?> opEventType, String propName, Object propValue)\n        Throwable exception =\n        JNDIConfiguration c = new JNDIConfiguration();\n        Hashtable<Object, Object> env = new Hashtable<>();\n        InitialContext initCtx = new InitialContext(env);\n        JNDIConfiguration c = new JNDIConfiguration(initCtx);\n        public PotentialErrorJNDIConfiguration(Context ctx)\n        public void installException(NamingException nex)\n",
            "src/test/java/org/apache/commons/configuration2/TestJNDIEnvironmentValues.java": "        String s = conf.getString(\"test.key\");\n        String s = conf.getString(\"test.key\");\n        String result = conf.getString(\"test.imaginarykey\", \"bob\");\n        Iterator<String> it = conf.getKeys();\n        Iterator<String> it = conf.getKeys(\"foo.bar\");\n        Iterator<String> it = conf.getKeys(\"test\");\n        Iterator<String> it = conf.getKeys(\"test.boolean\");\n",
            "src/test/java/org/apache/commons/configuration2/TestJSONConfiguration.java": "    private String testJson =\n        Configuration subset = jsonConfiguration.subset(\"key4\");\n        Object property =\n        Object property = jsonConfiguration.getProperty(\"int1\");\n        StringWriter sw = new StringWriter();\n        String output = sw.toString();\n        ObjectMapper mapper = new ObjectMapper();\n        MapType type = mapper.getTypeFactory().constructMapType(Map.class,\n        Map<String, Object> parsed = mapper.readValue(output, type);\n        Map key2 = (Map) parsed.get(\"key2\");\n        List<String> key5 =\n        List<?> capitals = (List<?>) parsed.get(\"capitals\");\n        Map<?, ?> capUk = (Map<?, ?>) capitals.get(1);\n        BaseHierarchicalConfiguration c = new BaseHierarchicalConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/TestMapConfiguration.java": "        Map<String, Object> map = new HashMap<>();\n        MapConfiguration config = new MapConfiguration(map);\n        Map<String, Object> map = new HashMap<>();\n        MapConfiguration conf = new MapConfiguration(map);\n        MapConfiguration config = (MapConfiguration) getConfiguration();\n        MapConfiguration copy = (MapConfiguration) config.clone();\n        StrictConfigurationComparator comp = new StrictConfigurationComparator();\n        MapConfiguration config = (MapConfiguration) getConfiguration();\n        MapConfiguration copy = (MapConfiguration) config.clone();\n        MapConfiguration config = (MapConfiguration) getConfiguration();\n        MapConfiguration clone = (MapConfiguration) config.clone();\n        MapConfiguration config = (MapConfiguration) getConfiguration();\n        List<Object> values = config.getList(KEY);\n        MapConfiguration config = (MapConfiguration) getConfiguration();\n        MapConfiguration config = (MapConfiguration) getConfiguration();\n        MapConfiguration config = (MapConfiguration) getConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/TestNonStringProperties.java": "        PropertiesConfiguration c = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(c);\n",
            "src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java": "        ListDelimiterHandler listHandler = new LegacyListDelimiterHandler(',');\n        FileHandler handler1 = new FileHandler(conf1);\n        FileHandler handler2 = new FileHandler(conf2);\n        FileHandler handler3 = new FileHandler(xmlConf);\n        List<Object> l = cc.getList(\"packages\");\n        Configuration internal = cc.getConfiguration(0);\n        Configuration subset = cc.subset(\"subset\");\n        List<Object> defaultList = new ArrayList<>();\n        Configuration conf1 = new BaseConfiguration();\n        Configuration conf2 = new BaseConfiguration();\n        Configuration conf1 = new BaseConfiguration();\n        Configuration conf2 = new BaseConfiguration();\n        List<Object> list = cc.getList(\"array\");\n        List<String> orderedList = new ArrayList<>();\n        for (Iterator<String> keys = conf1.getKeys(); keys.hasNext();)\n        List<String> iteratedList = new ArrayList<>();\n        for (Iterator<String> keys = cc.getKeys(); keys.hasNext();)\n        List<String> orderedList = new ArrayList<>();\n        for (Iterator<String> keys = conf1.getKeys(\"test\"); keys.hasNext();)\n        List<String> iteratedList = new ArrayList<>();\n        for (Iterator<String> keys = cc.getKeys(\"test\"); keys.hasNext();)\n        BaseConfiguration defaults = new BaseConfiguration();\n        Configuration c = new CompositeConfiguration(defaults);\n        String TEST_KEY = \"testKey\";\n        Configuration defaults = new PropertiesConfiguration();\n        Configuration testConfiguration = new CompositeConfiguration(defaults);\n        Iterator<String> i = testConfiguration.getKeys();\n            String key = i.next();\n",
            "src/test/java/org/apache/commons/configuration2/TestNullJNDIEnvironmentValues.java": "        String s = conf.getString(\"test.key\");\n        String s = conf.getString(\"test.key\");\n        String result = conf.getString(\"test.imaginarykey\", \"bob\");\n        Iterator<String> it = conf.getKeys();\n        Iterator<String> it = conf.getKeys(\"foo.bar\");\n        Iterator<String> it = conf.getKeys(\"test\");\n        Iterator<String> it = conf.getKeys(\"test.boolean\");\n",
            "src/test/java/org/apache/commons/configuration2/TestPatternSubtreeConfiguration.java": "        PatternSubtreeConfigurationWrapper config = new PatternSubtreeConfigurationWrapper(this.conf, PATTERN);\n        HierarchicalConfiguration<ImmutableNode> hc = new BaseHierarchicalConfiguration();\n        PatternSubtreeConfigurationWrapper config =\n        HierarchicalConfiguration<ImmutableNode> hc = new BaseHierarchicalConfiguration();\n        PatternSubtreeConfigurationWrapper config =\n",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java": "    private static FileHandler load(PropertiesConfiguration pc, String fileName)\n        FileHandler handler = new FileHandler(pc);\n        String loaded = conf.getString(\"configuration.loaded\");\n        File file2 = ConfigurationAssert.getTestFile(\"threesome.properties\");\n        FileHandler handler = new FileHandler(conf);\n    private void checkEmpty(String key)\n        String empty = conf.getString(key);\n        String loaded = conf.getString(\"include.loaded\");\n        String loaded = conf.getString(\"include.interpol.loaded\");\n        StringReader in =\n        FileHandler handler = new FileHandler(conf);\n        String content =\n        StringReader in = new StringReader(content);\n        FileHandler handler = new FileHandler(conf);\n        List<Object> packages = conf.getList(\"packages\");\n        List<Object> list = new ArrayList<>();\n        URL url = new URL(\"foo\", \"\", 0, folder.newFile(\"testsave-custom-url.properties\").getAbsolutePath(), new FileURLStreamHandler());\n        FileHandler handlerSave = new FileHandler(conf);\n        PropertiesConfiguration config2 = new PropertiesConfiguration();\n        FileHandler handlerLoad = new FileHandler(config2);\n        List<Object> list = new ArrayList<>();\n        PropertiesConfiguration checkConfig = new PropertiesConfiguration();\n        PropertiesConfiguration checkConfig = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(conf);\n        FileHandler handler = new FileHandler(conf);\n        List<Object> dirs = conf.getList(\"test.dirs\");\n        PropertiesConfiguration pc = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(pc);\n        PropertiesConfiguration pc = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(pc);\n        File file = ConfigurationAssert.getTestFile(\"test.properties\");\n        FileHandler handler = new FileHandler(conf);\n        PropertiesConfiguration checkConfig = new PropertiesConfiguration();\n        String property = conf.getString(\"test.unescape\");\n        String property = conf.getString(\"test.unescape.list-separator\");\n        FileHandler handler = new FileHandler(conf);\n        String[] array = conf.getStringArray(\"test.mixed.array\");\n        String property = \"This is a value spread out across several adjacent \"\n        PropertiesConfiguration pc2 = new PropertiesConfiguration();\n        PropertiesConfiguration pc2 = new PropertiesConfiguration();\n        List<Object> list = conf.getList(\"test.path\");\n        CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        Configuration config = builder.getConfiguration();\n        StringWriter out = new StringWriter();\n        String content = out.toString();\n        PropertiesConfigurationLayout layout = conf.getLayout();\n        PropertiesConfigurationLayout layout2 = conf.getLayout();\n        DummyLayout layout = new DummyLayout();\n        DummyLayout layout = new DummyLayout();\n        DummyLayout layout = new DummyLayout();\n        PropertiesConfiguration copy = (PropertiesConfiguration) conf.clone();\n        StringWriter outConf = new StringWriter();\n        StringWriter outCopy = new StringWriter();\n        PropertiesConfiguration copy = (PropertiesConfiguration) conf.clone();\n        MockHttpURLStreamHandler handler = new MockHttpURLStreamHandler(\n        URL url = new URL(null, \"http://jakarta.apache.org\", handler);\n        MockHttpURLConnection con = handler.getMockConnection();\n        MockHttpURLStreamHandler handler = new MockHttpURLStreamHandler(\n        URL url = new URL(null, \"http://jakarta.apache.org\", handler);\n        catch (ConfigurationException cex)\n        File file = folder.newFile(\"sharp#1.properties\");\n        PropertiesConfiguration conf = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(conf);\n        FileHandler handler = new FileHandler(conf);\n        Configuration copyConf = setUpCopyConfig();\n        Configuration copyConf = setUpCopyConfig();\n        FileHandler handler = new FileHandler(conf);\n        DataConfiguration dataConfig = new DataConfiguration(conf);\n        PropertiesConfiguration config2 = new PropertiesConfiguration();\n                    Reader in)\n                    Writer out, ListDelimiterHandler handler)\n                    Reader in)\n                    Writer out, ListDelimiterHandler handler)\n                    PropertiesWriterTestImpl propWriter = new PropertiesWriterTestImpl(handler);\n                catch (IOException e)\n        Set<String> foundLines = new HashSet<>();\n        BufferedReader in = new BufferedReader(new FileReader(\n                for (String separatorTest : separatorTests) {\n        StringWriter writer = new StringWriter();\n        String s = writer.toString();\n        String prop = \"delimiterListProp\";\n        List<String> list = Arrays.asList(\"val\", \"val2\", \"val3\");\n        StringWriter out = new StringWriter();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        String text = \"\\\"Hello World!\\\"\";\n        StringWriter out = new StringWriter();\n        PropertiesConfiguration c2 = new PropertiesConfiguration();\n        FileSystem fs = new DefaultFileSystem()\n            public InputStream getInputStream(URL url)\n                    catch (UnsupportedEncodingException e)\n        Parameters params = new Parameters();\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration configuration = builder.getConfiguration();\n        Reader in = new FileReader(ConfigurationAssert.getTestFile(\"test.properties\"));\n        catch (ConfigurationException e)\n    private void checkBackslashList(String key)\n        Object prop = conf.getProperty(\"test.\" + key);\n        List<?> list = (List<?>) prop;\n        Configuration result = new BaseConfiguration();\n    private void checkCopiedConfig(Configuration copyConf)\n        PropertiesConfiguration checkConf = new PropertiesConfiguration();\n        for (Iterator<String> it = copyConf.getKeys(); it.hasNext();)\n            String key = it.next();\n        FileHandler handler = new FileHandler(conf);\n        public void load(PropertiesConfiguration config, Reader in)\n        protected MockHttpURLConnection(URL u, int respCode, File outFile)\n        public MockHttpURLStreamHandler(int respCode, File outFile)\n        protected URLConnection openConnection(URL u) throws IOException\n        public PropertiesReaderTestImpl(Reader reader, int maxProps)\n        public PropertiesWriterTestImpl(ListDelimiterHandler handler) throws IOException\n",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java": "        Iterator<EventListener<? super ConfigurationEvent>> it =\n        String presetHeaderComment = \"preset\" + TEST_COMMENT + CRNORM + CRNORM + TEST_COMMENT;\n        ConfigurationEvent event = new ConfigurationEvent(this,\n        ConfigurationEvent event = new ConfigurationEvent(this,\n        ConfigurationEvent event = new ConfigurationEvent(this,\n        ConfigurationEvent event = new ConfigurationEvent(this,\n        ConfigurationEvent event = new ConfigurationEvent(this,\n        ConfigurationEvent event = new ConfigurationEvent(this,\n        PropertiesBuilder b = new PropertiesBuilder();\n        String output = getLayoutString();\n        PropertiesConfigurationLayout l2 = new PropertiesConfigurationLayout(layout);\n        for (String key : layout.getKeys())\n        PropertiesConfigurationLayout l2 = new PropertiesConfigurationLayout(layout);\n        catch (ConfigurationException cex)\n        StringWriter out = new StringWriter();\n    private void checkLayoutString(String expected)\n        public void addLine(String s)\n        public void addProperty(String key, String value)\n        public void addComment(String s)\n        boolean propertyLoaded(String key, String value)\n",
            "src/test/java/org/apache/commons/configuration2/TestPropertiesSequence.java": "        String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testSequence.properties\").getAbsolutePath();\n        String compositeConfigurationFile = ConfigurationAssert.getTestFile(\"testSequenceDigester.xml\").getAbsolutePath();\n        PropertiesConfiguration simpleConfiguration = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(simpleConfiguration);\n        CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        Configuration compositeConfiguration = builder.getConfiguration();\n        Configuration a = simpleConfiguration.subset(\"prefix\");\n        Configuration b = compositeConfiguration.subset(\"prefix\");\n        List<String> keysSimpleConfiguration = ConfigurationAssert.keysToList(a);\n        List<String> keysCompositeConfiguration = ConfigurationAssert.keysToList(b);\n        String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testSequence.properties\").getAbsolutePath();\n        String compositeConfigurationFile = ConfigurationAssert.getTestFile(\"testSequenceDigester.xml\").getAbsolutePath();\n        PropertiesConfiguration simpleConfiguration = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(simpleConfiguration);\n        CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        Configuration compositeConfiguration = builder.getConfiguration();\n        Configuration a = simpleConfiguration.subset(\"prefix\");\n        Configuration b = compositeConfiguration.subset(\"prefix\");\n        List<String> keysSimpleConfiguration = ConfigurationAssert.keysToList(a);\n        List<String> keysCompositeConfiguration = ConfigurationAssert.keysToList(b);\n        String simpleConfigurationFile = ConfigurationAssert.getTestFile(\"testSequence.properties\").getAbsolutePath();\n        String compositeConfigurationFile = ConfigurationAssert.getTestFile(\"testSequenceDigester.xml\").getAbsolutePath();\n        PropertiesConfiguration simpleConfiguration = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(simpleConfiguration);\n        CombinedConfigurationBuilder builder = new CombinedConfigurationBuilder();\n        Configuration compositeConfiguration = builder.getConfiguration();\n        Configuration mapping = new BaseConfiguration();\n        Configuration mapping2 = new BaseConfiguration();\n        for (Iterator<String> keys = simpleConfiguration.getKeys(); keys.hasNext();)\n            String key = keys.next();\n            String[] keyParts = StringUtils.split(key, \".\");\n                String serviceKey = keyParts[1];\n        for (Iterator<String> keys = compositeConfiguration.getKeys(); keys.hasNext();)\n            String key = keys.next();\n            String[] keyParts = StringUtils.split(key, \".\");\n                String serviceKey = keyParts[1];\n",
            "src/test/java/org/apache/commons/configuration2/TestStrictConfigurationComparator.java": "        Configuration other = new BaseConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/TestSubnodeConfiguration.java": "        BaseHierarchicalConfiguration conf =\n    private static void appendTree(BaseHierarchicalConfiguration configuration,\n            ImmutableNode root)\n    private void setUpSubnodeConfig(String key)\n    private TrackedNodeModel setUpTrackedModel(NodeSelector selector)\n        InMemoryNodeModel parentModel = (InMemoryNodeModel) parent.getModel();\n        List<Object> fields = config.getList(\"fields.field.name\");\n        List<Object> fields = config.getList(\"fields.field.name\");\n        Set<String> keys = new HashSet<>();\n        ListDelimiterHandler handler1 = new DefaultListDelimiterHandler('/');\n        ListDelimiterHandler handler2 = new DefaultListDelimiterHandler(';');\n        Set<String> keys = ConfigurationAssert.keysToSet(config);\n        HierarchicalConfiguration<ImmutableNode> sub2 =\n        SubnodeConfiguration sub2 =\n    private void checkInterpolationFromConfigurationAt(boolean withUpdates)\n        Configuration sub =\n        Configuration sub = parent.configurationAt(\"test.absolute.dir\");\n        ConfigurationInterpolator interpolator = parent.getInterpolator();\n            public String lookup(String key) {\n        SubnodeConfiguration copy = (SubnodeConfiguration) config.clone();\n        TrackedNodeModel subModel = (TrackedNodeModel) copy.getModel();\n        InMemoryNodeModel parentModel = (InMemoryNodeModel) parent.getModel();\n        TrackedNodeModel model = EasyMock.createMock(TrackedNodeModel.class);\n        SubnodeConfiguration config = new SubnodeConfiguration(parent, model);\n        InMemoryNodeModel nodeModel = config.getNodeModel();\n",
            "src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java": "        Configuration conf = new BaseConfiguration();\n        Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        Configuration conf = new BaseConfiguration();\n        Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        Configuration conf = new BaseConfiguration();\n        Configuration conf = new BaseConfiguration();\n        Configuration conf = new BaseConfiguration();\n        Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        Iterator<String> it = subset.getKeys();\n        Configuration conf = new BaseConfiguration();\n        Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        Iterator<String> it = subset.getKeys(\"abc\");\n        BaseConfiguration conf = new BaseConfiguration();\n        Configuration subset = new SubsetConfiguration(conf, \"test\", \".\");\n        List<Object> list = subset.getList(\"abc\", new ArrayList<>());\n        Configuration conf = new BaseConfiguration();\n        SubsetConfiguration subset = new SubsetConfiguration(conf, \"prefix\", \".\");\n        Configuration conf = new BaseConfiguration();\n        SubsetConfiguration subset = new SubsetConfiguration(conf, \"prefix\", \".\");\n        Configuration conf = new BaseConfiguration();\n        SubsetConfiguration subset = new SubsetConfiguration(conf, null, \".\");\n        BaseConfiguration config = new BaseConfiguration();\n        SubsetConfiguration subset = new SubsetConfiguration(config, \"prefix\");\n        catch (NoSuchElementException e)\n        catch (NoSuchElementException e)\n        CombinedConfigurationBuilder builder =\n        Configuration config = builder.getConfiguration();\n        Configuration subConf = config.subset(\"tables.table(0)\");\n        Configuration subSubConf = subConf.subset(\"fields.field(1)\");\n        Iterator<String> itKeys = subSubConf.getKeys();\n        Set<String> keys = new HashSet<>();\n            String k = itKeys.next();\n        Configuration config = new BaseConfiguration();\n        Configuration subset = config.subset(\"test\");\n        BaseConfiguration config = new BaseConfiguration();\n        Configuration subset = config.subset(\"prefix\");\n        BaseConfiguration config = new BaseConfiguration();\n        AbstractConfiguration subset =\n        ListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n        BaseConfiguration config = new BaseConfiguration();\n        AbstractConfiguration subset =\n        ListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n        Configuration config = EasyMock.createNiceMock(Configuration.class);\n        SubsetConfiguration subset = new SubsetConfiguration(config, \"prefix\");\n        ListDelimiterHandler listHandler = new DefaultListDelimiterHandler(',');\n        BaseConfiguration config = new BaseConfiguration();\n        AbstractConfiguration subset = (AbstractConfiguration) config\n        BaseConfiguration config = new BaseConfiguration();\n        ConfigurationInterpolator interpolator = config.getInterpolator();\n            public String lookup(String key) {\n        AbstractConfiguration subset = (AbstractConfiguration) config\n        BaseConfiguration config = new BaseConfiguration();\n        AbstractConfiguration subset = (AbstractConfiguration) config\n",
            "src/test/java/org/apache/commons/configuration2/TestSystemConfiguration.java": "        Properties props = System.getProperties();\n        Configuration conf = new SystemConfiguration();\n        PropertiesConfiguration props = new PropertiesConfiguration();\n        File file = folder.newFile(\"sys.properties\");\n        PropertiesConfiguration pconfig = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(pconfig);\n        SystemConfiguration sconf = new SystemConfiguration();\n        String testProperty = \"someTest\";\n        SystemConfiguration config = new SystemConfiguration();\n        Thread t = new Thread()\n            SystemConfiguration config = new SystemConfiguration();\n            PropertiesConfiguration props = new PropertiesConfiguration();\n            for (Iterator<String> keys = config.getKeys(); keys.hasNext();)\n                String key = keys.next();\n",
            "src/test/java/org/apache/commons/configuration2/TestThreesomeConfiguration.java": "        PropertiesConfiguration c = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(c);\n        List<Object> packages = conf.getList(\"test.threesome.one\");\n        List<Object> packages = conf.getList(\"test.threesome.two\");\n        List<Object> packages = conf.getList(\"test.threesome.three\");\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java": "    private static void load(XMLConfiguration config, String fileName)\n        FileHandler handler = new FileHandler(config);\n    private static XMLConfiguration createFromFile(String fileName)\n        XMLConfiguration config = new XMLConfiguration();\n        String key = \"clearly\";\n        String key = \"clear.element\";\n        String key = \"clear.comment\";\n        String key = \"clear.cdata\";\n        String key = \"list.item\";\n        String key = \"clear[@id]\";\n        List<Object> list = conf.getList(\"element3[@name]\");\n        XMLConfiguration checkConf = checkSavedConfig();\n        List<Object> list = conf.getList(\"test.array\");\n        FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        XMLConfiguration checkConfig =\n        String xml = \"<?xml version=\\\"1.0\\\"?><config><test>1</test></config>\";\n        String xml = \"<?xml version=\\\"1.0\\\"?><config><test>1</rest></config>\";\n        FileHandler handler = new FileHandler(conf);\n        XMLConfiguration config = new XMLConfiguration();\n        FileHandler handler = new FileHandler(conf);\n        FileHandler handler = new FileHandler(conf);\n        FileHandler handler = new FileHandler(conf);\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder builder = factory.newDocumentBuilder();\n            public void error(SAXParseException ex) throws SAXException\n        DocumentBuilder builder = createValidatingDocBuilder();\n        DocumentBuilder builder = createValidatingDocBuilder();\n        Configuration c = (Configuration) conf.clone();\n        XMLConfiguration copy = (XMLConfiguration) c;\n        XMLConfiguration c = (XMLConfiguration) conf.clone();\n        XMLConfiguration c2 = new XMLConfiguration();\n        XMLConfiguration conf2 = new XMLConfiguration();\n        XMLConfiguration conf2 = new XMLConfiguration();\n        XMLConfiguration checkConfig = new XMLConfiguration();\n        File nonValidFile = ConfigurationAssert.getTestFile(\"testValidateInvalid.xml\");\n        FileHandler handler = new FileHandler(conf);\n        StringWriter out = new StringWriter();\n        FileHandler handler = new FileHandler(conf);\n        StringWriter out = new StringWriter();\n        FileHandler handler = new FileHandler(conf);\n        StringWriter out = new StringWriter();\n        FileHandler handler = new FileHandler(conf);\n        StringWriter out = new StringWriter();\n        StringWriter out = new StringWriter();\n        StringWriter out = new StringWriter();\n        catch (TransformerFactoryConfigurationError cex)\n        XMLConfiguration copy = new XMLConfiguration(conf);\n        StringReader in = new StringReader(xml);\n        FileHandler handler = new FileHandler(conf);\n            String idxStr = String.format(\"(%d)\", Integer.valueOf(i + 3));\n            String nodeKey = \"attrList.a\" + idxStr;\n        FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        Configuration sub = conf.configurationAt(\"element2.subelement\", true);\n        XMLConfiguration conf2 = new XMLConfiguration();\n        FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        HierarchicalConfiguration<?> sub1 = conf.configurationAt(\"element2\", true);\n        HierarchicalConfiguration<?> sub2 = sub1.configurationAt(\"subelement\", true);\n        XMLConfiguration conf2 = new XMLConfiguration();\n    private void checkSaveDelimiterParsingDisabled(String key)\n        XMLConfiguration checkConf = new XMLConfiguration();\n        List<Object> expr = conf.getList(\"expressions[@value]\");\n        XMLConfiguration checkConfig = new XMLConfiguration();\n        XMLConfiguration c2 = new XMLConfiguration();\n        FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        ImmutableNode node = NodeStructureHelper.createNode(\n        Collection<ImmutableNode> nodes = new ArrayList<>(1);\n        XMLConfiguration c2 = new XMLConfiguration();\n        ImmutableNode.Builder bldrNode = new ImmutableNode.Builder(1);\n        ImmutableNode node2 = NodeStructureHelper.createNode(\"test2\", null);\n        XMLConfiguration c2 = new XMLConfiguration();\n        HierarchicalConfiguration<ImmutableNode> hc =\n        XMLConfiguration checkConfig = checkSavedConfig();\n        XMLConfiguration copy = new XMLConfiguration(conf);\n        CatalogResolver resolver = new CatalogResolver();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        CatalogResolver resolver = new CatalogResolver();\n        catch (Exception e)\n            Throwable cause = e.getCause();\n        FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        Thread testThreads[] = new Thread[THREAD_COUNT];\n        for (Thread testThread : testThreads) {\n        StringWriter writer = new StringWriter();\n        String content = writer.toString();\n        XMLConfiguration conf2 = new XMLConfiguration();\n        String key = \"element3[@value]\";\n        HierarchicalConfiguration<ImmutableNode> sub =\n        String prop = \"delimiterListProp\";\n        List<String> list = Arrays.asList(\"val\", \"val2\", \"val3\");\n        XMLConfiguration conf2 = new XMLConfiguration();\n        String prop = \"delimiterListProp\";\n        List<String> list = Arrays.asList(\"val\", \"val2\", \"val3\");\n        XMLConfiguration conf2 = new XMLConfiguration();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        String content = \"<configuration><test>1</test></configuration>\";\n        ByteArrayInputStream bis = new ByteArrayInputStream(content.getBytes());\n        catch (ConfigurationException e)\n        FileHandler handler = new FileHandler(conf);\n    private XMLConfiguration checkSavedConfig(File saveFile)\n        XMLConfiguration config = createFromFile(saveFile.getAbsolutePath());\n        ReloadThread(FileBasedConfigurationBuilder<?> confBulder)\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration_605.java": "    private static void checkConfiguration(Configuration config)\n    private static Configuration create(String content) throws ConfigurationException\n        XMLConfiguration config = new XMLConfiguration();\n        FileHandler handler = new FileHandler(config);\n    private static Configuration create(String content, ListDelimiterHandler delimiterHandler)\n        XMLConfiguration config = new XMLConfiguration();\n        FileHandler handler = new FileHandler(config);\n        String source = \"<configuration><key0></key0><key1></key1><key2></key2><key3></key3></configuration>\";\n        String source = \"<configuration><key0></key0><key1>,</key1><key2></key2><key3></key3></configuration>\";\n        String source = \"<configuration><key0></key0><key1>a,b</key1><key2></key2><key3></key3></configuration>\";\n        String source = \"<configuration><key0></key0><key1>,</key1> <key2></key2><key3></key3></configuration>\";\n        String source = \"<configuration><key0></key0><key1>,</key1>A<key2></key2><key3></key3></configuration>\";\n        String source = \"<configuration><key0></key0><key1>,</key1><key2></key2><key3></key3></configuration>\";\n        StringBuilder sourceBuilder = new StringBuilder(\"<configuration>\");\n        StringBuilder sourceBuilder = new StringBuilder(\"<configuration>\");\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLDocumentHelper.java": "    private static Document loadDocument(String name) throws IOException,\n        DocumentBuilder builder =\n    private static String documentToString(XMLDocumentHelper helper)\n    private static String documentToString(Document document)\n        Transformer transformer = XMLDocumentHelper.createTransformer();\n        StringWriter writer = new StringWriter();\n        Result result = new StreamResult(writer);\n        TransformerConfigurationException cause =\n        catch (ConfigurationException cex)\n        Transformer transformer = EasyMock.createMock(Transformer.class);\n        Source src = EasyMock.createMock(Source.class);\n        Result res = EasyMock.createMock(Result.class);\n        TransformerException tex = new TransformerException(\"Test Exception\");\n        catch (ConfigurationException cex)\n        DocumentBuilderFactory factory =\n        ParserConfigurationException pcex = new ParserConfigurationException();\n        catch (ConfigurationException cex)\n        XMLDocumentHelper helper = XMLDocumentHelper.forNewDocument(ELEMENT);\n        Document doc = helper.getDocument();\n        Element rootElement = doc.getDocumentElement();\n        NodeList childNodes = rootElement.getChildNodes();\n        XMLDocumentHelper helper = XMLDocumentHelper.forNewDocument(ELEMENT);\n        Document doc = loadDocument();\n        XMLDocumentHelper helper = XMLDocumentHelper.forSourceDocument(doc);\n        Document doc = loadDocument();\n        XMLDocumentHelper helper = XMLDocumentHelper.forSourceDocument(doc);\n        XMLDocumentHelper helper =\n        XMLDocumentHelper copy = helper.createCopy();\n        String doc1 = documentToString(helper);\n        String doc2 = documentToString(copy);\n    private void checkCopyElementMapping(String file) throws Exception\n        XMLDocumentHelper helper =\n        XMLDocumentHelper copy = helper.createCopy();\n        Collection<Node> texts = findTextElements(helper.getDocument());\n        for (Node n : texts)\n            Text txtSrc = (Text) n;\n            Text txtCopy = (Text) copy.getElementMapping().get(n);\n    private static Collection<Node> findTextElements(Document document)\n        Collection<Node> texts = new HashSet<>();\n    private static void findTextElementsForNode(Node node,\n            Collection<Node> texts)\n        NodeList childNodes = node.getChildNodes();\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLListHandling.java": "    private static XMLConfiguration readFromString(String xml)\n        XMLConfiguration config = new XMLConfiguration();\n        FileHandler handler = new FileHandler(config);\n        StringWriter writer = new StringWriter(4096);\n        FileHandler handler = new FileHandler(config);\n    private static String element(String key, String value)\n    private static void checkCommaSeparated(String xml, String key,\n            String... values)\n        String strValues = StringUtils.join(values, ',');\n        String element = element(key, strValues);\n    private static void checkSplit(String xml, String key, String... values)\n        for (String v : values)\n        String xml = saveToString();\n        String xml = saveToString();\n        String xml = saveToString();\n        List<String> expected = Arrays.asList(\"foo\", \"blah\", \"bar\", \"baz\");\n        String xml = saveToString();\n        XMLConfiguration c2 = readFromString(xml);\n",
            "src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java": "    private static XMLPropertiesConfiguration load(String fileName)\n        XMLPropertiesConfiguration conf = new XMLPropertiesConfiguration();\n        FileHandler handler = new FileHandler(conf);\n        XMLPropertiesConfiguration conf = load(TEST_PROPERTIES_FILE);\n        URL location = ConfigurationAssert.getTestURL(TEST_PROPERTIES_FILE);\n        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n            public InputSource resolveEntity(String publicId, String systemId)\n        File file = new File(location.toURI());\n        Document doc = dBuilder.parse(file);\n        XMLPropertiesConfiguration conf = new XMLPropertiesConfiguration(doc.getDocumentElement());\n        XMLPropertiesConfiguration conf = load(TEST_PROPERTIES_FILE);\n        File saveFile = folder.newFile(\"test2.properties.xml\");\n        FileHandler saveHandler = new FileHandler(conf);\n        XMLPropertiesConfiguration conf2 = load(saveFile.getAbsolutePath());\n        XMLPropertiesConfiguration conf = load(TEST_PROPERTIES_FILE);\n        File saveFile = folder.newFile(\"test2.properties.xml\");\n        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n        Document document = dBuilder.newDocument();\n        TransformerFactory tFactory = TransformerFactory.newInstance();\n        Transformer transformer = tFactory.newTransformer();\n        DOMSource source = new DOMSource(document);\n        Result result = new StreamResult(saveFile);\n        XMLPropertiesConfiguration conf2 = load(saveFile.getAbsolutePath());\n",
            "src/test/java/org/apache/commons/configuration2/TestYAMLConfiguration.java": "    private String testYaml =\n        Configuration subset = yamlConfiguration.subset(\"key4\");\n        Object property =\n        Object property = yamlConfiguration.getProperty(\"int1\");\n        StringWriter sw = new StringWriter();\n        String output = sw.toString();\n        Map parsed = new Yaml().loadAs(output, Map.class);\n        Map key2 = (Map) parsed.get(\"key2\");\n        List<String> key5 =\n        BaseHierarchicalConfiguration c = new BaseHierarchicalConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBean.java": "    public void setBuddy(BeanCreationTestBean buddy)\n    public void setIntValue(int intValue)\n    public void setStringValue(String stringValue)\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBeanWithListChild.java": "    public void setChildren(List<BeanCreationTestBean> buddies)\n    public void setIntValue(int intValue)\n    public void setStringValue(String stringValue)\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestCtorBean.java": "    public BeanCreationTestCtorBean(BeanCreationTestBean buddy)\n    public BeanCreationTestCtorBean(String s)\n    public BeanCreationTestCtorBean(String s, int i)\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanDeclarationTestImpl.java": "    public void setBeanClassName(String beanClassName)\n    public void setBeanFactoryName(String beanFactoryName)\n    public void setBeanFactoryParameter(Object beanFactoryParameter)\n    public void setBeanProperties(Map<String, Object> beanProperties)\n            Map<String, Object> nestedBeanDeclarations)\n    public void setConstructorArgs(Collection<ConstructorArg> args)\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestBeanHelper.java": "        BeanFactory factory = EasyMock.createMock(BeanFactory.class);\n        BeanFactory factory = new TestBeanFactory();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        BeanCreationTestBean bean = new BeanCreationTestBean();\n        BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n        BeanCreationTestBean bean = new BeanCreationTestBean();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        TestBeanFactory factory = new TestBeanFactory();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        TestBeanFactory factory = new TestBeanFactory();\n        BeanDeclarationTestImpl data = setUpBeanDeclarationWithListChild();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        TestBeanFactory factory = new TestBeanFactory();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        TestBeanFactory factory = (TestBeanFactory) helper.getDefaultBeanFactory();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        Object param = new Integer(42);\n        TestBeanFactory factory = new TestBeanFactory();\n        BeanDeclarationTestImpl data = setUpBeanDeclaration();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        DynaBean bean = BeanHelper.createWrapDynaBean(config);\n        String value = \"TestFooter\";\n        PropertiesConfiguration src = new PropertiesConfiguration();\n        LazyDynaBean dest = new LazyDynaBean();\n        BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n        Map<String, Object> properties = new HashMap<>();\n        BeanDeclarationTestImpl buddyData = new BeanDeclarationTestImpl();\n        Map<String, Object> properties2 = new HashMap<>();\n        Map<String, Object> nested = new HashMap<>();\n        BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n        Map<String, Object> properties = new HashMap<>();\n        List<BeanDeclaration> childData = new ArrayList<>();\n        Map<String, Object> nested = new HashMap<>();\n    private BeanDeclarationTestImpl createChildBean(String name)\n        BeanDeclarationTestImpl childBean = new BeanDeclarationTestImpl();\n        Map<String, Object> properties2 = new HashMap<>();\n    private void checkBean(BeanCreationTestBean bean)\n        BeanCreationTestBean buddy = bean.getBuddy();\n    private void checkBean(BeanCreationTestBeanWithListChild bean)\n        List<BeanCreationTestBean> children = bean.getChildren();\n        public Object createBean(BeanCreationContext bcc) throws Exception\n                BeanCreationTestBean bean = new BeanCreationTestBean();\n                BeanCreationTestBeanWithListChild bean =\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestCombinedBeanDeclaration.java": "    private BeanDeclaration decl(int idx)\n        CombinedBeanDeclaration cd = createCombinedDeclaration();\n        String name = \"someTestBeanFactory\";\n        CombinedBeanDeclaration cd = new CombinedBeanDeclaration();\n        CombinedBeanDeclaration cd = createCombinedDeclaration();\n        Object param = new Object();\n        CombinedBeanDeclaration cd = new CombinedBeanDeclaration();\n        CombinedBeanDeclaration cd = createCombinedDeclaration();\n        CombinedBeanDeclaration cd = new CombinedBeanDeclaration();\n        CombinedBeanDeclaration cd = createCombinedDeclaration();\n        Collection<ConstructorArg> args =\n        CombinedBeanDeclaration cd = createCombinedDeclaration();\n        Map<String, Object> props1 = new HashMap<>();\n        Map<String, Object> props2 = new HashMap<>();\n        Map<String, Object> props3 = new HashMap<>();\n        CombinedBeanDeclaration cd = createCombinedDeclaration();\n        Map<String, Object> props = cd.getBeanProperties();\n        BeanDeclaration child = EasyMock.createMock(BeanDeclaration.class);\n        CombinedBeanDeclaration cd = new CombinedBeanDeclaration(child);\n        Map<String, Object> decls1 = new HashMap<>();\n        Map<String, Object> decls2 = new HashMap<>();\n        Map<String, Object> decls3 = new HashMap<>();\n        CombinedBeanDeclaration cd = createCombinedDeclaration();\n        Map<String, Object> decls = cd.getNestedBeanDeclarations();\n        BeanDeclaration child = EasyMock.createMock(BeanDeclaration.class);\n        CombinedBeanDeclaration cd = new CombinedBeanDeclaration(child);\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java": "        Configuration configuration = createConfiguration();\n        for (int element : intArray) {\n        for (String element : stringArray) {\n        List<String> list = Arrays.asList(stringArray);\n        DynaProperty descriptor = bean.getDynaClass().getDynaProperty(\"unknown\");\n        DynaProperty pd[] = bean.getDynaClass().getDynaProperties();\n        int count[] = new int[properties.length];\n        for (DynaProperty element : pd) {\n            String name = element.getName();\n            Object value = bean.get(\"mappedProperty\", \"unknown\");\n        catch (Throwable t)\n        Object value = bean.get(\"booleanProperty\");\n        Object value = bean.get(\"doubleProperty\");\n        Object value = bean.get(\"floatProperty\");\n        Object value = bean.get(\"intProperty\");\n        Object value = bean.get(\"longProperty\");\n        Object value = bean.get(\"shortProperty\");\n        Object value = bean.get(\"stringProperty\");\n        MapConfiguration configuration = new MapConfiguration(new HashMap<String, Object>());\n        ConfigurationDynaBean bean = new ConfigurationDynaBean(configuration);\n        Object value = bean.get(\"objectArray\", 1);\n        boolean oldValue = ((Boolean) bean.get(\"booleanProperty\")).booleanValue();\n        boolean newValue = !oldValue;\n        double oldValue = ((Double) bean.get(\"doubleProperty\")).doubleValue();\n        double newValue = oldValue + 1.0;\n        float oldValue = ((Float) bean.get(\"floatProperty\")).floatValue();\n        float newValue = oldValue + (float) 1.0;\n        int oldValue = ((Integer) bean.get(\"intProperty\")).intValue();\n        int newValue = oldValue + 1;\n        long oldValue = ((Long) bean.get(\"longProperty\")).longValue();\n        long newValue = oldValue + 1;\n        short oldValue = ((Short) bean.get(\"shortProperty\")).shortValue();\n        short newValue = (short) (oldValue + 1);\n        String oldValue = (String) bean.get(\"stringProperty\");\n        String newValue = oldValue + \" Extra Value\";\n    protected void testGetDescriptorBase(String name, Class<?> type)\n        DynaProperty descriptor = bean.getDynaClass().getDynaProperty(name);\n        ConfigurationDynaBean nested = (ConfigurationDynaBean) bean.get(\"mappedProperty\");\n        String value = (String) nested.get(\"key1\");\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConstructorArg.java": "        BeanDeclaration decl = EasyMock.createMock(BeanDeclaration.class);\n        ConstructorArg arg = ConstructorArg.forBeanDeclaration(decl);\n        ConstructorArg arg = ConstructorArg.forValue(\"test\");\n        ConstructorArg arg = ConstructorArg.forValue(42);\n        ConstructorArg arg = ConstructorArg.forValue(\"42\", int.class.getName());\n        ConstructorArg arg = ConstructorArg.forValue(0);\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestDefaultBeanFactory.java": "            public void initBean(Object bean, BeanDeclaration data)\n            public Object createBean(BeanDeclaration data)\n        ConversionHandler handler =\n        BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        Map<String, Object> props = new HashMap<>();\n        Object bean = factory.createBean(createBcc(PropertiesConfiguration.class, decl));\n        PropertiesConfiguration config = (PropertiesConfiguration) bean;\n        BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        Collection<ConstructorArg> args = new ArrayList<>();\n        BeanCreationTestCtorBean bean =\n        BeanDeclarationTestImpl declNested = new BeanDeclarationTestImpl();\n        Collection<ConstructorArg> args = new ArrayList<>();\n        BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        BeanCreationTestCtorBean bean =\n        BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        Constructor<BeanCreationTestBean> ctor =\n        BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        Collection<ConstructorArg> args = new ArrayList<>();\n        Constructor<BeanCreationTestCtorBean> ctor =\n        Class<?>[] paramTypes = ctor.getParameterTypes();\n        BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        Collection<ConstructorArg> args = new ArrayList<>();\n        BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        Collection<ConstructorArg> args = new ArrayList<>();\n        Constructor<BeanCreationTestCtorBean> ctor =\n        Class<?>[] paramTypes = ctor.getParameterTypes();\n        BeanDeclarationTestImpl data = new BeanDeclarationTestImpl();\n        Map<String, Object> properties = new HashMap<>();\n        BeanDeclarationTestImpl buddyData = new BeanDeclarationTestImpl();\n        Map<String, Object> properties2 = new HashMap<>();\n        Map<String, Object> nested = new HashMap<>();\n        BeanDeclarationTestImpl decl = new BeanDeclarationTestImpl();\n        Collection<ConstructorArg> args = new ArrayList<>();\n        catch (ConfigurationRuntimeException crex)\n            String msg = crex.getMessage();\n",
            "src/test/java/org/apache/commons/configuration2/beanutils/TestXMLBeanDeclaration.java": "        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n        BaseHierarchicalConfiguration config =\n        XMLBeanDeclaration decl =\n        BaseHierarchicalConfiguration config =\n        XMLBeanDeclaration decl =\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config);\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(new BaseHierarchicalConfiguration());\n        Map<String, Object> props = decl.getBeanProperties();\n        BaseHierarchicalConfiguration config =\n        String keyCtorArg = KEY + \".config-constrarg\";\n        BaseHierarchicalConfiguration config = prepareNestedBeanDeclarations();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        Map<String, Object> nested = decl.getNestedBeanDeclarations();\n            XMLBeanDeclaration d = (XMLBeanDeclaration) nested\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        String key = KEY + \".address..private\";\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        Map<String, Object> nested = decl.getNestedBeanDeclarations();\n        BaseHierarchicalConfiguration config = prepareNestedBeanDeclarations();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY)\n            BeanDeclaration createBeanDeclaration(NodeData<?> node)\n        Map<String, Object> nested = decl.getNestedBeanDeclarations();\n        for (String element : COMPLEX_PROPS) {\n            Object d = nested.get(element);\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        Map<String, Object> nested = decl.getNestedBeanDeclarations();\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        String[] varValues = new String[TEST_PROPS.length];\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, \"undefined_key\", true);\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        BaseHierarchicalConfiguration config = prepareNestedBeanDeclarations();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        Collection<ConstructorArg> args = decl.getConstructorArgs();\n        Iterator<ConstructorArg> it = args.iterator();\n        ConstructorArg arg1 = it.next();\n        ConstructorArg arg2 = it.next();\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        Collection<ConstructorArg> args = decl.getConstructorArgs();\n        ConstructorArg arg = args.iterator().next();\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        String expectedValue = \"ctorArg\";\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        Collection<ConstructorArg> args = decl.getConstructorArgs();\n        ConstructorArg arg = args.iterator().next();\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        String value = \"${value}\";\n        XMLBeanDeclaration decl = new XMLBeanDeclaration(config, KEY);\n        Collection<ConstructorArg> args = decl.getConstructorArgs();\n        ConstructorArg arg = args.iterator().next();\n    private static void setupBeanDeclaration(HierarchicalConfiguration<?> config,\n            String key, String[] names, String[] values)\n    private static void checkProperties(BeanDeclaration beanDecl, String[] names,\n            String[] values)\n        Map<String, Object> props = beanDecl.getBeanProperties();\n        public XMLBeanDeclarationTestImpl(HierarchicalConfiguration<?> config,\n                NodeData<?> node)\n",
            "src/test/java/org/apache/commons/configuration2/builder/BuilderEventListenerImpl.java": "    public void onEvent(ConfigurationBuilderEvent event)\n            EventType<T> eventType)\n        Iterator<ConfigurationBuilderEvent> it = initIterator();\n        ConfigurationBuilderEvent nextEvent = it.next();\n",
            "src/test/java/org/apache/commons/configuration2/builder/ParametersBeanTestImpl.java": "    public void setIntProperty(int intProperty)\n    public void setStringProperty(String stringProperty)\n    public ParametersBeanTestImpl setFluentProperty(String value)\n    public ParametersBeanTestImpl setFluentPropertyWithGet(String s)\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestAutoSaveListener.java": "    private void fireChangeEvent(boolean before)\n        FileHandler handler = EasyMock.createMock(FileHandler.class);\n        FileHandler handler2 = EasyMock.createMock(FileHandler.class);\n        FileHandler handler = EasyMock.createMock(FileHandler.class);\n        FileHandler handler = new FileHandler();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java": "        Map<String, Object> paramMap = params.getParameters();\n        Map<String, Object> map1 = params.getParameters();\n        Map<String, Object> mapCopy = new HashMap<>(map1);\n        Map<String, Object> map2 = params.getParameters();\n        ConfigurationLogger log = EasyMock.createMock(ConfigurationLogger.class);\n        ListDelimiterHandler handler =\n        ConfigurationInterpolator ci =\n        Lookup look = EasyMock.createMock(Lookup.class);\n        Map<String, Lookup> lookups = Collections.singletonMap(\"test\", look);\n        Map<?, ?> map = (Map<?, ?>) params.getParameters().get(\"prefixLookups\");\n        Map<?, ?> map2 = (Map<?, ?>) params.getParameters().get(\"prefixLookups\");\n        Lookup look = EasyMock.createMock(Lookup.class);\n        Collection<Lookup> looks = Collections.singleton(look);\n        Collection<?> col =\n        Collection<?> col2 =\n        ConfigurationInterpolator parent =\n        Lookup look1 = EasyMock.createMock(Lookup.class);\n        Lookup look2 = EasyMock.createMock(Lookup.class);\n        ConfigurationInterpolator parent =\n        ConfigurationInterpolator ci =\n        Map<String, Object> map = params.getParameters();\n        ListDelimiterHandler handler1 = EasyMock.createMock(ListDelimiterHandler.class);\n        ListDelimiterHandler handler2 = EasyMock.createMock(ListDelimiterHandler.class);\n        Map<String, Object> props = new HashMap<>();\n        BuilderParameters p = EasyMock.createMock(BuilderParameters.class);\n        Map<String, Object> map = params.getParameters();\n        ConfigurationInterpolator parent =\n        Lookup l1 = EasyMock.createMock(Lookup.class);\n        Lookup l2 = EasyMock.createMock(Lookup.class);\n        Lookup l3 = EasyMock.createMock(Lookup.class);\n        Map<String, Lookup> prefixLookups = new HashMap<>();\n        Collection<Lookup> defLookups = Collections.singleton(l3);\n        Map<String, Object> map = params.getParameters();\n        InterpolatorSpecification spec =\n        ConfigurationInterpolator ci =\n        InterpolatorSpecification spec =\n        Map<String, Object> map = new HashMap<>();\n        Map<String, Object> map = new HashMap<>();\n        Map<Object, Object> prefix = new HashMap<>();\n        Map<String, Object> map = new HashMap<>();\n        Map<Object, Object> prefix = new HashMap<>();\n        Map<String, Object> map = new HashMap<>();\n        InterpolatorSpecification spec =\n        ConfigurationLogger log = EasyMock.createMock(ConfigurationLogger.class);\n        ConfigurationInterpolator ci =\n        ListDelimiterHandler handler1 = EasyMock.createMock(ListDelimiterHandler.class);\n        ListDelimiterHandler handler2 = EasyMock.createMock(ListDelimiterHandler.class);\n        BasicBuilderParameters clone = params.clone();\n        Map<String, Object> map = clone.getParameters();\n        Lookup look = EasyMock.createMock(Lookup.class);\n        Map<String, Lookup> lookups = Collections.singletonMap(\"test\", look);\n        BasicBuilderParameters clone = params.clone();\n        Lookup look = EasyMock.createMock(Lookup.class);\n        Collection<Lookup> looks = Collections.singleton(look);\n        BasicBuilderParameters clone = params.clone();\n        Synchronizer sync = EasyMock.createMock(Synchronizer.class);\n        ConversionHandler handler =\n        BeanHelper helper = new BeanHelper();\n        ConfigurationDecoder decoder =\n        BeanHelper beanHelper = new BeanHelper();\n        ConfigurationDecoder decoder =\n        ConversionHandler conversionHandler = new DefaultConversionHandler();\n        ListDelimiterHandler listDelimiterHandler =\n        ConfigurationLogger logger = new ConfigurationLogger(\"test\");\n        Synchronizer synchronizer = new ReadWriteSynchronizer();\n        BasicBuilderParameters p2 = new BasicBuilderParameters();\n        Map<String, Object> parameters = p2.getParameters();\n        BasicBuilderParameters p2 =\n        Map<String, Object> parameters = p2.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilder.java": "        Map<String, Object> params = new HashMap<>();\n        Map<String, Object> params = createTestParameters();\n        BasicConfigurationBuilder<Configuration> builder =\n        Map<String, Object> params2 =\n        Map<String, Object> params = createTestParameters();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        Map<String, Object> params2 =\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        Map<String, Object> params2 =\n        Map<String, Object> params1 = new HashMap<>();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        Map<String, Object> params2 =\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        Map<String, Object> params = createTestParameters();\n        Map<String, Object> params2 = builder.getParameters();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        Map<String, Object> params = builder.getParameters();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config =\n        CountDownLatch startLatch = new CountDownLatch(1);\n        CountDownLatch endLatch = new CountDownLatch(threadCount);\n        ConfigurationBuilder<?> builder =\n        AccessBuilderThread[] threads = new AccessBuilderThread[threadCount];\n        Set<Object> results = new HashSet<>();\n        for (AccessBuilderThread t : threads)\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        PropertiesConfiguration config2 = builder.getConfiguration();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        PropertiesConfiguration config2 = builder.getConfiguration();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n                            Map<String, Object> params)\n        EventListener<ConfigurationEvent> l1 = createEventListener();\n        EventListener<ConfigurationEvent> l2 = createEventListener();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        Collection<EventListener<? super ConfigurationEvent>> listeners =\n        EventListener<ConfigurationEvent> l1 = createEventListener();\n        EventListener<ConfigurationEvent> l2 = createEventListener();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        EventListener<ConfigurationEvent> l1 = createEventListener();\n        EventListener<ConfigurationEvent> l2 = createEventListener();\n        EventListener<ConfigurationErrorEvent> l3 = new ErrorListenerTestImpl(null);\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        BasicConfigurationBuilder<XMLConfiguration> builder2 =\n        XMLConfiguration config = builder2.getConfiguration();\n        Collection<EventListener<? super ConfigurationErrorEvent>> errListeners =\n        EventListenerTestImpl listener1 = new EventListenerTestImpl(null);\n        EventListenerRegistrationData<ConfigurationErrorEvent> regData =\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        EventListenerTestImpl listener = new EventListenerTestImpl(null);\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        Map<String, Object> params = new HashMap<>();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        BasicConfigurationBuilderInitFailImpl builder =\n        BasicConfigurationBuilderInitFailImpl builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        BasicConfigurationBuilder<InitializableConfiguration> builder =\n        InitializableConfiguration config = builder.getConfiguration();\n        BeanFactory factory = new DefaultBeanFactory()\n            public Object createBean(BeanCreationContext bcc) throws Exception\n        BeanHelper helper = new BeanHelper(factory);\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        ReloadingDetector detector =\n        ReloadingController controller = new ReloadingController(detector);\n        BasicConfigurationBuilder<Configuration> builder =\n        Configuration configuration = builder.getConfiguration();\n        BasicConfigurationBuilder<Configuration> builder =\n        public AccessBuilderThread(CountDownLatch lstart, CountDownLatch lend,\n                ConfigurationBuilder<?> bldr)\n            catch (Exception ex)\n        public BasicConfigurationBuilderInitFailImpl(boolean allowFailOnInit)\n        protected void initResultInstance(PropertiesConfiguration obj)\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilderEvents.java": "        EventType<ConfigurationBuilderEvent> builderEventType =\n        EventType<ConfigurationBuilderEvent> builderResetType =\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        EventType<ConfigurationBuilderEvent> eventType =\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        ConfigurationBuilderEvent event =\n        PropertiesConfiguration configuration = builder.getConfiguration();\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n                    public void onEvent(ConfigurationBuilderEvent event)\n        PropertiesConfiguration configuration2 = builder.getConfiguration();\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        PropertiesConfiguration configuration = builder.getConfiguration();\n        ConfigurationBuilderResultCreatedEvent event =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestBuilderConfigurationWrapperFactory.java": "        BuilderConfigurationWrapperFactory factory =\n            BaseHierarchicalConfiguration conf)\n        catch (ConfigurationException e)\n        BaseHierarchicalConfiguration conf =\n        ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n        BuilderConfigurationWrapperFactory factory =\n        HierarchicalConfiguration<?> wrapper =\n        BaseHierarchicalConfiguration conf =\n        ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n        BuilderConfigurationWrapperFactory factory =\n        HierarchicalConfiguration<?> wrapper =\n        BaseHierarchicalConfiguration conf =\n        ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n        BuilderConfigurationWrapperFactory factory =\n        EventSource src =\n        BasicConfigurationBuilder<PropertiesConfiguration> builder =\n        EventListener<ConfigurationEvent> l1 = new EventListenerTestImpl(null);\n        EventListener<ConfigurationEvent> l2 = new EventListenerTestImpl(null);\n        BuilderConfigurationWrapperFactory factory =\n        EventSource src =\n        PropertiesConfiguration config = builder.getConfiguration();\n        Collection<EventListener<? super ConfigurationEvent>> listeners =\n        BaseHierarchicalConfiguration conf =\n        ConfigurationBuilder<BaseHierarchicalConfiguration> builder =\n        EventListenerTestImpl listener = new EventListenerTestImpl(null);\n        BuilderConfigurationWrapperFactory factory =\n        EventSource src =\n        BuilderConfigurationWrapperFactory factory =\n        BuilderConfigurationWrapperFactory factory =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestCopyObjectDefaultHandler.java": "        FileBasedBuilderParametersImpl source =\n        CopyObjectDefaultHandler handler = new CopyObjectDefaultHandler(source);\n        FileBasedBuilderParametersImpl copy =\n        Map<String, Object> map = copy.getParameters();\n        XMLBuilderParametersImpl paramsXml = new XMLBuilderParametersImpl();\n        CopyObjectDefaultHandler handler =\n        FileBasedBuilderParametersImpl paramsFb =\n        ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        XMLBuilderParametersImpl source = new XMLBuilderParametersImpl();\n        XMLBuilderParametersImpl dest = new XMLBuilderParametersImpl()\n                    ExpressionEngine engine)\n        CopyObjectDefaultHandler handler = new CopyObjectDefaultHandler(source);\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestDatabaseBuilderParametersImpl.java": "        DataSource src = EasyMock.createMock(DataSource.class);\n        String table = \"TestTable\";\n        String colName = \"KEY_COLUMN\";\n        String colName = \"VALUE_COLUMN\";\n        String colName = \"CONFIG_COLUMN\";\n        String confName = \"TestConfiguration\";\n        Map<String, Object> map = params.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultParametersManager.java": "    private static void checkDefaultValues(Map<String, Object> map)\n        FileBasedBuilderParametersImpl fbparams =\n    private static void checkNoDefaultValues(Map<String, Object> map)\n        FileBasedBuilderParametersImpl fbParams =\n        FileBasedBuilderParameters params = parameters.fileBased();\n        Map<String, Object> map = params.getParameters();\n        XMLBuilderParameters params = parameters.xml();\n        Map<String, Object> map = params.getParameters();\n        XMLBuilderParameters paramsXml = parameters.xml();\n        PropertiesBuilderParameters paramsProps = parameters.properties();\n                            XMLBuilderParameters parameters)\n        XMLBuilderParameters params = parameters.xml();\n        Map<String, Object> map = params.getParameters();\n        FileBasedDefaultsHandler handler = new FileBasedDefaultsHandler();\n        XMLBuilderParameters paramsXml = parameters.xml();\n        PropertiesBuilderParameters paramsProps = parameters.properties();\n        FileBasedDefaultsHandler handler = new FileBasedDefaultsHandler();\n        XMLBuilderParameters paramsXml = parameters.xml();\n        PropertiesBuilderParameters paramsProps = parameters.properties();\n        public void initializeDefaults(FileBasedBuilderParameters parameters)\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultReloadingDetectorFactory.java": "        FileHandler handler = new FileHandler();\n        FileBasedBuilderParametersImpl params =\n        FileHandlerReloadingDetector detector =\n        FileHandler handler = new FileHandler();\n        FileBasedBuilderParametersImpl params =\n        FileHandlerReloadingDetector detector =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestEventListenerParameters.java": "        EventListenerParameters parameters = new EventListenerParameters();\n        EventListenerParameters parameters = new EventListenerParameters();\n        EventListenerTestImpl listener = new EventListenerTestImpl(null);\n        EventListenerParameters parameters = new EventListenerParameters();\n        EventListenerRegistrationData<?> reg =\n        EventListenerRegistrationData<ConfigurationEvent> reg =\n        EventListenerParameters parameters = new EventListenerParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java": "        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        FileHandler handler = new FileHandler();\n        FileBasedBuilderParametersImpl params =\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        ReloadingDetectorFactory factory =\n        FileBasedBuilderParametersImpl params =\n        File file =\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        URL url = ConfigurationAssert.getTestURL(\"test.properties\");\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        String path =\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        String name = \"testConfig.xml\";\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        String path =\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        FileLocationStrategy strat =\n        FileBasedBuilderParametersImpl params =\n        String enc = \"ISO-8859-1\";\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        FileBasedBuilderParametersImpl params =\n        Map<String, Object> map = params.getParameters();\n        FileBasedBuilderParametersImpl params =\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        Map<String, Object> map = params.getParameters();\n        FileBasedBuilderParametersImpl params =\n        Map<String, Object> map = params.getParameters();\n        FileBased content = EasyMock.createMock(FileBased.class);\n        FileHandler fh = new FileHandler(content);\n        FileBasedBuilderParametersImpl params =\n        FileBasedBuilderParametersImpl clone = params.clone();\n        ReloadingDetectorFactory factory =\n        Map<String, Object> map = new HashMap<>();\n        FileBasedBuilderParametersImpl params =\n        FileBasedBuilderParametersImpl params =\n        FileBasedBuilderParametersImpl params =\n        FileBasedBuilderParametersImpl params2 =\n        String encoding = \"UTF-16\";\n        ReloadingDetectorFactory factory =\n        Long refreshDelay = 20160213172611L;\n        FileBasedBuilderParametersImpl params =\n        FileBasedBuilderParametersImpl params =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedConfigurationBuilder.java": "    private File createTestFile(int value)\n        catch (IOException ioex)\n                catch (IOException ioex)\n        Map<String, Object> params = new HashMap<>();\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration conf = builder.getConfiguration();\n        File file = createTestFile(1);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        File file = createTestFile(1);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        PropertiesConfiguration config2 = builder.getConfiguration();\n        File file = createTestFile(1);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        FileLocator locator = builder.getFileHandler().getFileLocator();\n        File file1 = createTestFile(1);\n        File file2 = createTestFile(2);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        File file = createTestFile(1);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        File file1 = createTestFile(1);\n        File file2 = createTestFile(2);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        File file = createTestFile(1);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n    private static void checkSavedConfig(File file, int expValue)\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        FileHandler handler = new FileHandler(config);\n        File file = createTestFile(1);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        File file = folder.newFile();\n        File outFile = ConfigurationAssert.getOutFile(\"save.properties\");\n        Parameters parameters = new Parameters();\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder = new FileBasedConfigurationBuilder<>(\n        Configuration config = builder.getConfiguration();\n        File file = createTestFile(0);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        File file = createTestFile(0);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config1 = builder.getConfiguration();\n        PropertiesConfiguration config2 = builder.getConfiguration();\n        File file = createTestFile(0);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        File file = folder.newFile();\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n        PropertiesConfiguration conf = new PropertiesConfiguration()\n        String encoding = \"testEncoding\";\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        FileHandler handler = new FileHandler();\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        FileHandler handler = new FileHandler();\n        String encoding = \"testEncoding\";\n        String folderName = \"test\";\n        String fileName = \"sample.properties\";\n        FileBasedConfigurationBuilder<FileBasedConfiguration> homeDirConfigurationBuilder =\n        PropertiesBuilderParameters homeDirProperties =\n        HomeDirectoryLocationStrategy strategy =\n        FileBasedConfigurationBuilder<FileBasedConfiguration> builder =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestHierarchicalBuilderParametersImpl.java": "        ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        Map<String, Object> map = params.getParameters();\n        ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        HierarchicalBuilderParametersImpl params =\n        HierarchicalBuilderParametersImpl params2 =\n        Map<String, Object> parameters = params2.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestJndiBuilderParametersImpl.java": "        Context ctx = EasyMock.createMock(Context.class);\n        Map<String, Object> paramsMap = params.getParameters();\n        String prefix = \"testJndiPrefix\";\n        Map<String, Object> paramsMap = params.getParameters();\n        Map<String, Object> paramsMap = params.getParameters();\n        Context ctx = EasyMock.createMock(Context.class);\n        String prefix = \"testJndiPrefix\";\n        Map<String, Object> paramsMap = params.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestPropertiesBuilderParametersImpl.java": "        PropertiesConfigurationLayout layout =\n        PropertiesConfiguration.IOFactory factory =\n        PropertiesConfiguration.IOFactory factory =\n        Map<String, Object> paramsMap = params.getParameters();\n        PropertiesConfiguration.IOFactory factory =\n        PropertiesBuilderParametersImpl params2 =\n        Map<String, Object> parameters = params2.getParameters();\n        PropertiesConfiguration.IOFactory factory =\n        ConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration config = builder.getConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingBuilderSupportListener.java": "        ReloadingDetector detector =\n        ReloadingController controller = new ReloadingController(detector);\n        BasicConfigurationBuilder<Configuration> builder =\n        BuilderEventListenerImpl builderListener =\n        ReloadingBuilderSupportListener listener =\n        ReloadingController controller =\n        BasicConfigurationBuilder<Configuration> builder =\n        ReloadingBuilderSupportListener listener =\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingFileBasedConfigurationBuilder.java": "        Map<String, Object> params = new HashMap<>();\n        ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        PropertiesConfiguration conf = builder.getConfiguration();\n        ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        FileHandler handler = new FileHandler();\n        FileBasedBuilderParametersImpl params = new FileBasedBuilderParametersImpl();\n        long refreshDelay = 60000L;\n        FileHandlerReloadingDetector detector =\n        ReloadingDetector detector =\n        ReloadingDetectorFactory factory =\n        FileHandler handler = new FileHandler();\n        FileBasedBuilderParametersImpl params =\n        ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        ReloadingDetector detector =\n        ReloadingFileBasedConfigurationBuilderTestImpl builder =\n        ReloadingDetector ctrlDetector =\n        ReloadingDetector detector =\n        ReloadingFileBasedConfigurationBuilderTestImpl builder =\n        ReloadingDetector ctrlDetector =\n        ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        ReloadingDetector ctrlDetector =\n        ReloadingDetector detector =\n        ReloadingFileBasedConfigurationBuilderTestImpl builder =\n        PropertiesConfiguration config1 = builder.getConfiguration();\n        PropertiesConfiguration config2 = builder.getConfiguration();\n        ReloadingDetector detector =\n        ReloadingFileBasedConfigurationBuilderTestImpl builder =\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        ReloadingFileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n                ReloadingDetector detector)\n                FileHandler handler, FileBasedBuilderParametersImpl fbparams)\n",
            "src/test/java/org/apache/commons/configuration2/builder/TestXMLBuilderParametersImpl.java": "        EntityResolver resolver = EasyMock.createMock(EntityResolver.class);\n        DocumentBuilder builder = EasyMock.createMock(DocumentBuilder.class);\n        String pubID = \"testPublicID\";\n        String sysID = \"testSystemID\";\n        EntityResolver resolver = EasyMock.createMock(EntityResolver.class);\n        DocumentBuilder builder = EasyMock.createMock(DocumentBuilder.class);\n        Map<String, Object> paramsMap = params.getParameters();\n        EntityResolver resolver = EasyMock.createMock(EntityResolver.class);\n        DocumentBuilder builder = EasyMock.createMock(DocumentBuilder.class);\n        XMLBuilderParametersImpl params2 = new XMLBuilderParametersImpl();\n        Map<String, Object> parameters = params2.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/AbstractMultiFileConfigurationBuilderTest.java": "    protected static void switchToConfig(String id)\n    protected static void switchToConfig(int index)\n        ConfigurationInterpolator ci = new ConfigurationInterpolator();\n            BuilderParameters managedParams)\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestBaseConfigurationBuilderProvider.java": "    private HierarchicalConfiguration<?> setUpConfig(boolean reload)\n        HierarchicalConfiguration<?> config = new BaseHierarchicalConfiguration();\n            HierarchicalConfiguration<?> declConfig)\n        CombinedConfigurationBuilder parentBuilder =\n                            BuilderParameters params)\n        ConfigurationDeclaration decl =\n                    protected Object interpolate(Object value)\n            boolean reload) throws ConfigurationException\n        HierarchicalConfiguration<?> declConfig = setUpConfig(reload);\n        ConfigurationDeclaration decl = createDeclaration(declConfig);\n        ConfigurationBuilder<? extends Configuration> builder =\n        Configuration config = builder.getConfiguration();\n        PropertiesConfiguration pconfig = (PropertiesConfiguration) config;\n        DefaultListDelimiterHandler listHandler =\n        ConfigurationBuilder<? extends Configuration> builder =\n        ConfigurationBuilder<? extends Configuration> builder =\n        BaseConfigurationBuilderProvider provider =\n        HierarchicalConfiguration<?> declConfig = setUpConfig(true);\n        ConfigurationDeclaration decl = createDeclaration(declConfig);\n    private void checkAllowFailOnInit(boolean expFlag, String... props)\n        HierarchicalConfiguration<?> declConfig = setUpConfig(false);\n        for (String key : props)\n        ConfigurationDeclaration decl = createDeclaration(declConfig);\n        BasicConfigurationBuilder<? extends Configuration> builder =\n        BaseConfigurationBuilderProvider provider =\n        BaseConfigurationBuilderProvider provider =\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedBuilderParametersImpl.java": "        CombinedBuilderParametersImpl params =\n        CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        Map<String, Object> map = params.getParameters();\n        CombinedBuilderParametersImpl params =\n        Map<String, Object> map = params.getParameters();\n        CombinedBuilderParametersImpl params =\n        CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        ConfigurationBuilder<XMLConfiguration> builder =\n        CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        ConfigurationBuilderProvider provider =\n        String tagName = \"testTag\";\n        CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        Map<String, ConfigurationBuilderProvider> providers =\n        CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        ConfigurationBuilderProvider provider1 =\n        ConfigurationBuilderProvider provider2 =\n        ConfigurationBuilderProvider provider3 =\n        String tagPrefix = \"testTag\";\n        CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        Map<String, ConfigurationBuilderProvider> map =\n        Map<String, ConfigurationBuilderProvider> map = null;\n        Map<String, ConfigurationBuilderProvider> map =\n        ConfigurationBuilderProvider provider1 =\n        ConfigurationBuilderProvider provider2 =\n        ConfigurationBuilderProvider provider3 =\n        String tagPrefix = \"testTag\";\n        CombinedBuilderParametersImpl params =\n        CombinedBuilderParametersImpl params2 =\n        CombinedBuilderParametersImpl params = new CombinedBuilderParametersImpl();\n        CombinedBuilderParametersImpl params =\n        String basePath = ConfigurationAssert.OUT_DIR.getAbsolutePath();\n        BuilderParameters defparams =\n        CombinedBuilderParametersImpl params =\n        BuilderParameters defparams =\n        CombinedBuilderParametersImpl params =\n        CombinedBuilderParametersImpl params =\n        XMLBuilderParametersImpl defParams = new XMLBuilderParametersImpl();\n        CombinedBuilderParametersImpl clone = params.clone();\n        CombinedBuilderParametersImpl params =\n        DefaultParametersManager manager =\n        CombinedBuilderParametersImpl params =\n        DefaultParametersManager manager =\n        DefaultParametersHandler<BuilderParameters> handler =\n        CombinedBuilderParametersImpl params =\n        DefaultParametersManager manager =\n        DefaultParametersHandler<BuilderParameters> handler =\n        CombinedBuilderParametersImpl params =\n        DefaultParametersManager manager =\n        CombinedBuilderParametersImpl params =\n        CombinedBuilderParametersImpl params2 =\n        Map<String, Object> parameters = params2.getParameters();\n        BasicBuilderParameters params =\n        CombinedBuilderParametersImpl params2 =\n        Map<String, Object> parameters = params2.getParameters();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilder.java": "            BaseHierarchicalConfiguration defConfig)\n    protected static BaseHierarchicalConfiguration createDefinitionConfig(String tag,\n            Map<String, Object> attrs)\n        BaseHierarchicalConfiguration defConfig =\n        String prefix = \"override.\" + tag;\n        for (Map.Entry<String, Object> e : attrs.entrySet())\n        CombinedConfiguration compositeConfiguration =\n        PropertiesConfiguration pc =\n    private void checkProperties(Configuration compositeConfiguration)\n        CombinedConfigurationBuilder configuredBuilder =\n        File additonalFile =\n        CombinedConfiguration compositeConfiguration =\n        File optionalFile =\n        Configuration config = builder.getConfiguration();\n        File optionalExFile =\n        String name = \"optionalConfig\";\n        Map<String, Object> attrs = new HashMap<>();\n        BaseHierarchicalConfiguration defConfig =\n        BasicConfigurationBuilder<? extends BaseHierarchicalConfiguration> defBuilder =\n        CombinedConfiguration cc = builder.getConfiguration();\n        Set<String> names = builder.builderNames();\n        List<String> expected = Arrays.asList(\"props\", \"xml\");\n        Set<String> names = builder.builderNames();\n        ConfigurationBuilder<? extends Configuration> propBuilder =\n            Map<String, Object> attrs)\n        BaseHierarchicalConfiguration defConfig =\n        BasicConfigurationBuilder<? extends HierarchicalConfiguration<ImmutableNode>> defBuilder =\n        Map<String, Object> attrs = new HashMap<>();\n        BasicConfigurationBuilder<? extends HierarchicalConfiguration<ImmutableNode>> defBuilder =\n        CombinedConfiguration cc = builder.getConfiguration();\n        ConfigurationBuilder<? extends Configuration> subBuilder =\n        CombinedConfiguration cc2 = builder.getConfiguration();\n        ConfigurationBuilder<? extends Configuration> subBuilder2 =\n        Map<String, Object> attrs = new HashMap<>();\n        Map<String, Object> attrs = new HashMap<>();\n        CombinedConfiguration cc = builder.getConfiguration();\n        BasicConfigurationBuilder<?> subBuilder =\n        Map<String, Object> attrs = new HashMap<>();\n        BasicConfigurationBuilder<?> subBuilder =\n        CombinedConfiguration cc = builder.getConfiguration();\n        BasicConfigurationBuilder<?> subBuilder2 =\n    private static void checkCombinedConfigAttrs(CombinedConfiguration cc)\n        ListDelimiterHandler handler = cc.getListDelimiterHandler();\n        File initFile =\n        CombinedConfiguration cc = builder.getConfiguration();\n        CombinedConfiguration cc2 =\n        CombinedConfiguration cc = builder.getConfiguration();\n        File initFile =\n        CombinedConfiguration cc = builder.getConfiguration();\n        CombinedConfiguration cca =\n        String tagName = \"myTestTag\";\n        Map<String, Object> attrs = new HashMap<>();\n                                    ConfigurationDeclaration decl)\n        CombinedConfiguration cc = builder.getConfiguration();\n        CombinedConfiguration cc = builder.getConfiguration();\n        File systemFile =\n        CombinedConfiguration cc = builder.getConfiguration();\n        File envFile =\n        CombinedConfiguration cc = builder.getConfiguration();\n        for (Map.Entry<String, String> e : System.getenv().entrySet())\n        File multiFile =\n        CombinedConfiguration cc = builder.getConfiguration();\n        File multiFile =\n        CombinedConfiguration cc = builder.getConfiguration();\n        File resolverFile =\n        CombinedConfiguration cc = builder.getConfiguration();\n        XMLConfiguration xmlConf =\n        EntityResolverWithPropertiesTestImpl resolver =\n        HierarchicalConfiguration<ImmutableNode> config = new BaseHierarchicalConfiguration();\n        XMLBuilderParametersImpl xmlParams = new XMLBuilderParametersImpl();\n        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        String baseDir = ConfigurationAssert.OUT_DIR_NAME;\n        EntityResolverWithPropertiesTestImpl resolver =\n    private void checkFileSystem(File fsFile) throws ConfigurationException\n        File testFile =\n        String basePath = ConfigurationAssert.OUT_DIR.getAbsolutePath();\n        XMLBuilderParametersImpl xmlParams = new XMLBuilderParametersImpl();\n        String testFile = \"testCCSystemProperties.xml\";\n        XMLBuilderParametersImpl xmlParams = new XMLBuilderParametersImpl();\n        File basePathFile =\n        BaseHierarchicalConfiguration defConfig =\n        File deepDir = new File(ConfigurationAssert.TEST_DIR, \"config/deep\");\n        CombinedConfiguration config = builder.getConfiguration();\n        File testFile =\n        ListDelimiterHandler listHandler = new DefaultListDelimiterHandler('.');\n        CombinedConfiguration cc = builder.getConfiguration();\n        BaseHierarchicalConfiguration defConfig =\n        CombinedConfiguration cc = builder.getConfiguration();\n        File testFile =\n        ListDelimiterHandler listHandler = new DefaultListDelimiterHandler('*');\n        ConfigurationDecoder decoder = EasyMock.createMock(ConfigurationDecoder.class);\n        CombinedConfiguration cc = builder.getConfiguration();\n        CombinedConfiguration cc2 =\n        File testFile =\n        CombinedConfiguration cc = builder.getConfiguration();\n        CombinedConfiguration cc2 =\n        Collection<EventListener<? super ConfigurationEvent>> listeners =\n        Collection<EventListener<? super Event>> eventListeners =\n        CombinedBuilderParametersImpl ccparams =\n        File envFile =\n        String basePath = ConfigurationAssert.OUT_DIR.getAbsolutePath();\n        CombinedBuilderParametersImpl params =\n        XMLBuilderParametersImpl params = new XMLBuilderParametersImpl();\n        PropertiesBuilderParametersImpl params2 =\n        File testFile = ConfigurationAssert.getTestFile(\"testCCLookup.xml\");\n        CombinedConfiguration cc = builder.getConfiguration();\n        Configuration xmlConf = cc.getConfiguration(\"xml\");\n        File testFile =\n        CombinedConfiguration combConfig = builder.getConfiguration();\n        XMLConfiguration xmlConfig =\n        HierarchicalConfiguration<ImmutableNode> subConfig =\n        Collection<ConfigurationBuilder<? extends Configuration>> childBuilders =\n        Collection<ConfigurationBuilder<? extends Configuration>> childBuilders =\n    private CombinedConfiguration createMultiFileConfig(String fileName)\n        File testFile = ConfigurationAssert.getTestFile(fileName);\n        CombinedConfiguration config = builder.getConfiguration();\n        CombinedConfiguration config = createMultiFileConfig(\"testCCMultiTenent.xml\");\n        CombinedConfiguration config = createMultiFileConfig(\"testCCMultiTenent.xml\");\n        HierarchicalConfiguration<?> multiConf =\n    private void checkMultiFile(String key, CombinedConfiguration config,\n            int rows)\n    private static void switchToMultiFile(String key)\n        CombinedConfiguration config =\n        File outFile =\n        XMLConfiguration reloadConfig = new XMLConfiguration();\n        FileHandler handler = new FileHandler(reloadConfig);\n            ConfigurationBuilder<? extends Configuration> childBuilder =\n            ReloadingController ctrl =\n            BuilderEventListenerImpl l = new BuilderEventListenerImpl();\n            ConfigurationBuilderEvent event = l.nextEvent(ConfigurationBuilderEvent.RESET);\n            BasicConfigurationBuilder<? extends Configuration> multiBuilder =\n        CombinedConfiguration cc = builder.getConfiguration();\n        CombinedConfiguration config = builder.getConfiguration();\n        CountDownLatch startLatch = new CountDownLatch(1);\n        ReadThread[] threads = new ReadThread[threadCount];\n        for (ReadThread t : threads)\n    private static XMLBuilderParameters prepareParamsForInheritanceTest(Parameters params) {\n        DefaultExpressionEngineSymbols symbols = new DefaultExpressionEngineSymbols.Builder(\n        DefaultExpressionEngine engine = new DefaultExpressionEngine(symbols);\n        DefaultListDelimiterHandler listDelimiterHandler = new DefaultListDelimiterHandler(',');\n        Parameters params = new Parameters();\n        XMLBuilderParameters xmlParams =\n        CombinedConfiguration config = builder.getConfiguration();\n        String[] stringArray = config.getStringArray(\"test/mixed/array\");\n        XMLConfiguration xmlConfig =\n        Parameters params = new Parameters();\n        CombinedBuilderParameters combinedParams =\n        CombinedConfiguration config = builder.getConfiguration();\n        XMLConfiguration xmlConfig =\n        List<String> list = xmlConfig.getList(String.class, \"split.list1\");\n        public void setPropertyKey(String propertyKey)\n                ConfigurationDeclaration decl) throws ConfigurationException\n            BaseHierarchicalConfiguration config =\n        public ConstantConfigurationBuilder(BaseHierarchicalConfiguration conf)\n        public void setFileSystem(FileSystem fileSystem)\n        public void setBaseDir(String baseDir)\n        public void setInterpolator(ConfigurationInterpolator interpolator)\n        public String lookup(String key)\n        public ReadThread(CombinedConfiguration cc, CountDownLatch latch)\n            catch (InterruptedException iex)\n            catch (InterruptedException iex)\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilderVFS.java": "        FileBasedBuilderParameters params = super.createParameters();\n        File deepDir = new File(ConfigurationAssert.TEST_DIR, \"config/deep\");\n        Map<String, Object> params = new HashMap<>();\n        BaseHierarchicalConfiguration defConfig =\n        BasicConfigurationBuilder<? extends HierarchicalConfiguration<ImmutableNode>> defBuilder =\n        Configuration config = builder.getConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestConfigurationDeclaration.java": "            HierarchicalConfiguration<?> conf)\n        HierarchicalConfiguration<?> config =\n        ConfigurationDeclaration decl = createDeclaration(null);\n    private void checkOldReservedAttribute(String name)\n        String prefixName = \"config-\" + name;\n        BaseHierarchicalConfiguration config = new BaseHierarchicalConfiguration();\n        ConfigurationDeclaration decl = createDeclaration(config);\n        HierarchicalConfiguration<?> config = new BaseHierarchicalConfiguration();\n        HierarchicalConfiguration<?> factory = new BaseHierarchicalConfiguration();\n        ConfigurationDeclaration decl =\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestFileExtensionConfigurationBuilderProvider.java": "        FileExtensionConfigurationBuilderProvider provider =\n        ConfigurationDeclaration decl =\n        FileExtensionConfigurationBuilderProvider provider =\n        ConfigurationDeclaration decl = setUpDecl();\n        FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        ConfigurationDeclaration decl = setUpDecl();\n        BuilderParameters params =\n        FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        ConfigurationDeclaration decl = setUpDecl();\n        BuilderParameters params =\n        FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        ConfigurationDeclaration decl = setUpDecl();\n        BuilderParameters params = new FileBasedBuilderParametersImpl();\n        FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        ConfigurationDeclaration decl = setUpDecl();\n        BuilderParameters params =\n        FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n        ConfigurationDeclaration decl = setUpDecl();\n        BuilderParameters params =\n        FileExtensionConfigurationBuilderProvider provider = setUpProvider();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileBuilderParametersImpl.java": "        Map<String, Object> map = params.getParameters();\n        String pattern = \"somePattern\";\n        BuilderParameters bp = EasyMock.createMock(BuilderParameters.class);\n        BuilderParameters bp = EasyMock.createMock(BuilderParameters.class);\n        String pattern = \"testPattern\";\n        Map<String, Object> map = params.getParameters();\n        FileBasedBuilderParametersImpl managedParams =\n        MultiFileBuilderParametersImpl clone = params.clone();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileConfigurationBuilder.java": "            BuilderParameters managedParams)\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n                            String fileName,\n                            java.util.Map<String, Object> params)\n                        FileBasedConfigurationBuilder<XMLConfiguration> result =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        String key = \"rowsPerPage\";\n        BasicBuilderParameters params =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        ExpressionEngine engine = new XPathExpressionEngine();\n        BuilderParameters xmlParams =\n        MultiFileBuilderParametersImpl params =\n        ConfigurationInterpolator ci = createInterpolator();\n        XMLConfiguration config = builder.getConfiguration();\n        DefaultListDelimiterHandler listHandler =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        catch (ConfigurationException ex)\n        BasicBuilderParameters params = createTestBuilderParameters(null);\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        XMLConfiguration config = builder.getConfiguration();\n        BasicBuilderParameters params =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        EventListener<ConfigurationEvent> l1 = new EventListenerTestImpl(null);\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        XMLConfiguration config = builder.getConfiguration();\n        XMLConfiguration config2 = builder.getConfiguration();\n        Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        BasicBuilderParameters params =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        ConfigurationInterpolator interpolator = builder.getInterpolator();\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        XMLConfiguration configuration = builder.getConfiguration();\n        ConfigurationBuilderEvent event =\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        Collection<FileBasedConfigurationBuilder<XMLConfiguration>> managedBuilders =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        BuilderEventListenerImpl listener = new BuilderEventListenerImpl();\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        ConfigurationBuilderEvent event =\n        ConfigurationBuilderResultCreatedEvent createdEvent =\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder1 =\n        FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder2 =\n        DynamicCombinedConfiguration config =\n        BasicBuilderParameters params = createTestBuilderParameters(null);\n        ConfigurationInterpolator ci = new ConfigurationInterpolator();\n        MultiFileConfigurationBuilder<XMLConfiguration> builder =\n        BuilderConfigurationWrapperFactory wrapFactory =\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiWrapDynaBean.java": "    private MultiWrapDynaBean createBean(boolean withDynaBean)\n        Collection<Object> beans = new ArrayList<>();\n        MultiWrapDynaBean bean = createBean(false);\n        String text = \"testText\";\n        MultiWrapDynaBean bean = createBean(false);\n        MultiWrapDynaBean bean = createBean(true);\n        String key = \"testKey\";\n        String text = \"Hello World\";\n        MultiWrapDynaBean bean = createBean(true);\n        String key = \"testKey\";\n        String value = \"Hello World\";\n        DynaClass cls = createBean(false).getDynaClass();\n        Collection<Object> beans = new ArrayList<>();\n        MultiWrapDynaBean bean = new MultiWrapDynaBean(beans);\n        ListDelimiterHandler listHandler = new DefaultListDelimiterHandler('+');\n        Map<String, Object> map = params.getParameters();\n        public String getMapProperty(String key)\n        public void setMapProperty(String key, String value)\n        public int getIndexedProperty(int idx)\n        public void setIndexedProperty(int idx, int value)\n        public void setText(String text)\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilder.java": "        File testFile =\n        CombinedReloadingController rc =\n        File testFile =\n        ReloadingCombinedConfigurationBuilder confBuilder =\n        CombinedReloadingController rc =\n        Collection<ReloadingController> subControllers = rc.getSubControllers();\n        ReloadingController subctrl =\n        File testFile =\n        CombinedReloadingController rc =\n        Collection<ReloadingController> subControllers = rc.getSubControllers();\n        ReloadingControllerSupport ccBuilder =\n        CombinedReloadingController rc2 =\n        FileBasedBuilderParametersImpl params =\n        CombinedConfiguration cc = builder.getConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilderFileBased.java": "    private static void addReloadSource(Configuration config, String fileName)\n    private static void writeFile(File file, String content) throws IOException\n    private File writeReloadFile(File f, String content) throws IOException\n        File file = (f != null) ? f : folder.newFile();\n    private File writeReloadFile(File f, int tagIdx, int value)\n    private static String testProperty(int idx)\n        File xmlConf1 = writeReloadFile(null, 1, 0);\n        File xmlConf2 = writeReloadFile(null, 2, 0);\n        ReloadingDetectorFactory detectorFactory =\n                            FileHandler handler,\n                            FileBasedBuilderParametersImpl params)\n        BaseHierarchicalConfiguration defConf = new BaseHierarchicalConfiguration();\n        ReloadingDetectorFactory detectorFactory =\n                            FileHandler handler,\n                            FileBasedBuilderParametersImpl params)\n        BaseHierarchicalConfiguration defConf = new BaseHierarchicalConfiguration();\n        Synchronizer sync = new ReadWriteSynchronizer();\n        Thread testThreads[] = new Thread[threadCount];\n        int failures[] = new int[threadCount];\n    private void checkReloadDefinitionFile(File defFile) throws IOException,\n        File src1 = writeReloadFile(null, 1, 0);\n        File src2 = writeReloadFile(null, 1, 1);\n        File defFile = folder.newFile();\n        File defFile = folder.newFile();\n    private void writeDefinitionFile(File defFile, File src)\n        XMLConfiguration defConf = new XMLConfiguration();\n        public ConstantConfigurationBuilder(BaseHierarchicalConfiguration conf)\n        ReloadThread(ReloadingCombinedConfigurationBuilder bldr,\n                int[] failures, int index, int count)\n                    String value =\n                catch (Exception ex)\n",
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingMultiFileConfigurationBuilder.java": "        ExpressionEngine engine = new XPathExpressionEngine();\n        BasicBuilderParameters params =\n        ReloadingMultiFileConfigurationBuilder<XMLConfiguration> builder =\n        XMLConfiguration config = builder.getConfiguration();\n        ReloadingMultiFileConfigurationBuilder<XMLConfiguration> builder =\n        FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder =\n        ReloadingMultiFileConfigurationBuilder<XMLConfiguration> builder =\n        FileBasedConfigurationBuilder<XMLConfiguration> managedBuilder =\n        ReloadingMultiFileConfigurationBuilderTestImpl builder =\n        List<ReloadingController> controllers =\n        for (ReloadingController c : controllers)\n        ReloadingMultiFileConfigurationBuilderTestImpl builder =\n        List<ReloadingController> controllers =\n        ReloadingMultiFileConfigurationBuilderTestImpl builder =\n        List<ReloadingController> controllers =\n        for (ReloadingController c : controllers)\n                String fileName, Map<String, Object> params)\n",
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestConfigurations.java": "    private static String filePath(String name)\n        Configurations configs = new Configurations();\n        Parameters params = new Parameters();\n        Configurations configs = new Configurations(params);\n        Configurations configs = new Configurations();\n        File file = ConfigurationAssert.getTestFile(TEST_PROPERTIES);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        Configurations configs = new Configurations();\n        URL url = ConfigurationAssert.getTestURL(\"test.properties\");\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        Configurations configs = new Configurations();\n        String filePath = filePath(TEST_PROPERTIES);\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n    private static void checkPList(Configuration config)\n        Configurations configs = new Configurations();\n        PropertyListConfiguration config =\n        Configurations configs = new Configurations();\n        PropertyListConfiguration config =\n        Configurations configs = new Configurations();\n        PropertyListConfiguration config =\n    private static void checkProperties(Configuration config)\n        Configurations configs = new Configurations();\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        Configurations configs = new Configurations();\n        PropertiesConfiguration config =\n        Configurations configs = new Configurations();\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        Configurations configs = new Configurations();\n        PropertiesConfiguration config =\n        Configurations configs = new Configurations();\n        FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n        Configurations configs = new Configurations();\n        PropertiesConfiguration config =\n    private static void checkXML(Configuration config)\n        Configurations configs = new Configurations();\n        FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        Configurations configs = new Configurations();\n        XMLConfiguration config =\n        Configurations configs = new Configurations();\n        FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        Configurations configs = new Configurations();\n        XMLConfiguration config =\n        Configurations configs = new Configurations();\n        FileBasedConfigurationBuilder<XMLConfiguration> builder =\n        Configurations configs = new Configurations();\n        XMLConfiguration config = configs.xml(filePath(TEST_XML));\n    private static void checkINI(INIConfiguration config)\n        Configurations configs = new Configurations();\n        FileBasedConfigurationBuilder<INIConfiguration> builder =\n        Configurations configs = new Configurations();\n        INIConfiguration config =\n        Configurations configs = new Configurations();\n        FileBasedConfigurationBuilder<INIConfiguration> builder =\n        Configurations configs = new Configurations();\n        INIConfiguration config =\n        Configurations configs = new Configurations();\n        FileBasedConfigurationBuilder<INIConfiguration> builder =\n        Configurations configs = new Configurations();\n        INIConfiguration config = configs.ini(filePath(TEST_INI));\n    private static void checkCombined(Configuration config)\n        Configurations configs = new Configurations();\n        CombinedConfigurationBuilder builder =\n        Configurations configs = new Configurations();\n        CombinedConfiguration config =\n        Configurations configs = new Configurations();\n        CombinedConfigurationBuilder builder =\n        Configurations configs = new Configurations();\n        CombinedConfiguration config =\n        Configurations configs = new Configurations();\n        CombinedConfigurationBuilder builder =\n        Configurations configs = new Configurations();\n        CombinedConfiguration config =\n",
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestParameters.java": "        Parameters parameters = new Parameters();\n        BasicBuilderParameters basic = new Parameters().basic();\n    private static void checkBasicProperties(Map<String, Object> map)\n        Map<String, Object> map =\n        FileBasedBuilderParametersImpl fbparams =\n    private static void checkInstanceOf(Object obj, Class<?> cls)\n    private static void checkInheritance(Object params, Class<?>... ifcClasses)\n        for (Class<?> c : ifcClasses)\n        FileBasedBuilderParameters params = new Parameters().fileBased();\n        String s = params.toString();\n        Map<String, Object> map =\n        CombinedBuilderParametersImpl cparams =\n        Map<String, Object> map =\n        ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        Map<String, Object> map =\n        FileBasedBuilderParametersImpl fbp =\n        ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        Map<String, Object> map =\n        FileBasedBuilderParametersImpl fbp =\n        PropertiesConfiguration.IOFactory factory =\n        Map<String, Object> map =\n        FileBasedBuilderParametersImpl fbp =\n        BuilderParameters bp = EasyMock.createMock(BuilderParameters.class);\n        String pattern = \"a pattern\";\n        Map<String, Object> map =\n        MultiFileBuilderParametersImpl params =\n        Map<String, Object> map =\n        Object params = new Parameters().xml();\n        FileBasedBuilderParameters fbParams =\n        ExpressionEngine engine = EasyMock.createMock(ExpressionEngine.class);\n        Map<String, Object> map = fbParams.getParameters();\n        DefaultParametersManager manager =\n        Parameters params = new Parameters(manager);\n        XMLBuilderParameters xmlParams = params.xml();\n        DefaultParametersManager manager =\n        DefaultParametersHandler<XMLBuilderParameters> handler =\n        Parameters params = new Parameters(manager);\n        DefaultParametersManager manager =\n        DefaultParametersHandler<XMLBuilderParameters> handler =\n        Parameters params = new Parameters(manager);\n",
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultConversionHandler.java": "            public Object interpolate(Object value)\n    private void checkSingleValue(Integer expResult)\n        Integer result = handler.to(VAR, Integer.class, createInterpolator());\n        Integer result = handler.to(REPLACEMENT, Integer.class, null);\n        Object[] src = {\n        Collection<String> src = Arrays.asList(VAR, \"true\", \"1000\");\n        Iterator<String> src = Arrays.asList(VAR, \"true\", \"1000\").iterator();\n        ArrayList<Integer> col = new ArrayList<>();\n        Object[] src = new Object[] {\n        List<Integer> col = new ArrayList<>(src.length);\n        List<Integer> col = new ArrayList<>(1);\n        List<String> src = Arrays.asList(VAR, \"100\");\n        Integer[] array =\n        int[] src = new int[] {\n        int[] array =\n        Integer[] src = new Integer[] {\n        int[] array =\n        List<String> src = Arrays.asList(VAR, \"100\");\n        int[] array =\n        int[] array = (int[]) handler.toArray(\"\", Integer.TYPE, null);\n        String dateFormat = \"dd.MM.yyyy\";\n        Date dt = handler.to(\"19.08.2013\", Date.class, null);\n        Calendar cal = Calendar.getInstance();\n        Calendar cal = handler.to(\"2013-08-19 21:17:22\", Calendar.class, null);\n        Long value = 20130819214935L;\n        Object result = handler.to(value.toString(), Long.TYPE, null);\n",
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultListDelimiterHandler.java": "        ValueTransformer trans = EasyMock.createMock(ValueTransformer.class);\n        ValueTransformer trans = new ValueTransformer()\n            public Object transformValue(Object value)\n        List<String> data =\n    private void checkSplit(String value, boolean trim,\n            String... expectedElements)\n        Collection<String> elems = handler.split(value, trim);\n        for (String elem : elems)\n",
            "src/test/java/org/apache/commons/configuration2/convert/TestDisabledListDelimiterHandler.java": "    private static void checkIterator(Iterable<?> container)\n        Iterator<?> it = container.iterator();\n        for (Object o : VALUES)\n        Iterator<?> it = handler.parse(STR_VALUE).iterator();\n        ValueTransformer trans = EasyMock.createMock(ValueTransformer.class);\n        String testStr = \"Some other string\";\n        Object value = 42;\n        ValueTransformer trans = EasyMock.createMock(ValueTransformer.class);\n        Object value = 42;\n        Collection<?> res = handler.flatten(VALUES, 1);\n        Collection<Object> src = Arrays.asList(VALUES);\n        Collection<?> res = handler.flatten(src, 1);\n        Collection<Object> src = new ArrayList<>(2);\n        Collection<?> res = handler.flatten(src, 2);\n        Iterator<?> it = res.iterator();\n",
            "src/test/java/org/apache/commons/configuration2/convert/TestPropertyConverter.java": "        File f = new File(\"dir\", \"file\");\n        Path p = Paths.get(\"dir\", \"file\");\n        Path p = Paths.get(\"dir\", \"file\");\n        File f =  new File(\"dir\", \"file\");\n        Integer i = new Integer(42);\n        BigDecimal d = new BigDecimal(\"3.1415\");\n        Number n = PropertyConverter.toNumber(\"0x10\", Integer.class);\n        Number n = PropertyConverter.toNumber(\"0b1111\", Integer.class);\n        Pattern p = Pattern.compile(\".+\");\n        Pattern p = Pattern.compile(\".+\");\n        String value = \"testValue\";\n        Object value = new Object()\n        Integer src = 42;\n        Object result =\n",
            "src/test/java/org/apache/commons/configuration2/event/AbstractEventListenerTestImpl.java": "    protected AbstractEventListenerTestImpl(Object source)\n    public void onEvent(T event)\n    public void checkEventCount(int minEvents)\n    public T nextEvent(EventType<?> expectedType)\n        T e = events.remove(0);\n    public void skipToLast(EventType<?> type)\n            T e = events.remove(0);\n",
            "src/test/java/org/apache/commons/configuration2/event/ErrorListenerTestImpl.java": "    public ErrorListenerTestImpl(Object source)\n    public Throwable checkEvent(EventType<?> type, EventType<?> opType,\n            String propName, Object propValue)\n        ConfigurationErrorEvent e = nextEvent(type);\n",
            "src/test/java/org/apache/commons/configuration2/event/EventListenerTestImpl.java": "    public EventListenerTestImpl(Object source)\n    public void checkEvent(EventType<?> type, String propName, Object propValue,\n            boolean before)\n        ConfigurationEvent e = nextEvent(type);\n",
            "src/test/java/org/apache/commons/configuration2/event/TestConfigurationEventTypes.java": "        Set<EventType<?>> superTypes = EventType.fetchSuperEventTypes(null);\n        Set<EventType<?>> superTypes =\n        Set<EventType<?>> superTypes =\n        List<EventType<? extends Event>> expected =\n    private void checkUpdateEvent(EventType<ConfigurationEvent> eventType)\n    private void checkHierarchicalEvent(EventType<ConfigurationEvent> eventType)\n    private void checkErrorEvent(EventType<ConfigurationErrorEvent> type)\n",
            "src/test/java/org/apache/commons/configuration2/event/TestDatabaseConfigurationEvents.java": "        catch (ConfigurationException e)\n",
            "src/test/java/org/apache/commons/configuration2/event/TestEvent.java": "        Event event = new Event(this, Event.ANY);\n        String s = event.toString();\n",
            "src/test/java/org/apache/commons/configuration2/event/TestEventListenerList.java": "        ListenerTestImpl listener = new ListenerTestImpl();\n        ListenerTestImpl listener1 = new ListenerTestImpl();\n        ListenerTestImpl listener2 = new ListenerTestImpl();\n        ListenerTestImpl listener1 = new ListenerTestImpl();\n        ListenerTestImpl listener2 = new ListenerTestImpl();\n        ListenerTestImpl listener = new ListenerTestImpl();\n        ListenerTestImpl listener = new ListenerTestImpl();\n        ListenerTestImpl listener = new ListenerTestImpl();\n        EventListenerRegistrationData<EventSub1> regData =\n        ListenerTestImpl listener = new ListenerTestImpl();\n        ListenerTestImpl listener = new ListenerTestImpl();\n        ListenerTestImpl listener = new ListenerTestImpl();\n    private static <T> List<T> fetchElements(Iterable<? extends T> iterable)\n        List<T> elems = new LinkedList<>();\n        for (T listener : iterable)\n            EventType<? extends Event> eventType,\n            EventListener<?>... expListeners)\n        List<?> listeners = fetchElements(list.getEventListeners(eventType));\n        ListenerTestImpl listener1 = new ListenerTestImpl();\n        ListenerTestImpl listener2 = new ListenerTestImpl();\n        ListenerTestImpl listener1 = new ListenerTestImpl();\n        ListenerTestImpl listener2 = new ListenerTestImpl();\n        ListenerTestImpl listener1 = new ListenerTestImpl();\n        ListenerTestImpl listener2 = new ListenerTestImpl();\n        Iterator<EventListener<? super EventBase>> iterator =\n        Iterator<EventListener<? super EventBase>> iterator =\n        EventListener<EventSub2> listener = new EventListener<EventSub2>()\n            public void onEvent(EventSub2 event)\n        EventListenerList.EventListenerIterator<EventSub2> iterator =\n        EventListenerList.EventListenerIterator<EventBase> iterator =\n        EventListenerRegistrationData<EventSub1> reg1 =\n        EventListenerRegistrationData<EventSub2> reg2 =\n        List<EventListenerRegistrationData<?>> registrations =\n        EventListener<EventBase> l1 = new ListenerTestImpl();\n        EventListener<EventBase> l2 = new ListenerTestImpl();\n        EventListener<EventBase> l3 = new ListenerTestImpl();\n        EventListenerList list2 = new EventListenerList();\n        Iterator<EventListenerRegistrationData<?>> it =\n        ListenerTestImpl l1 = new ListenerTestImpl();\n        ListenerTestImpl l2 = new ListenerTestImpl();\n        List<EventListenerRegistrationData<? extends EventBase>> regs =\n        Iterator<EventListenerRegistrationData<? extends EventBase>> iterator =\n        public EventBase(Object source, EventType<? extends EventBase> type,\n                String msg)\n        public EventSub1(Object source, EventType<? extends EventSub1> type,\n                String msg)\n        public EventSub2(Object source, EventType<? extends EventSub2> type,\n                String msg)\n        public void onEvent(EventBase event)\n        public void assertEvent(Object expSource, EventType<?> expType,\n                String expMessage)\n",
            "src/test/java/org/apache/commons/configuration2/event/TestEventSource.java": "        EventListenerTestImpl l = new EventListenerTestImpl(this);\n        Collection<EventListener<? super ConfigurationEvent>> listeners =\n        EventListenerTestImpl l = new EventListenerTestImpl(this);\n        Collection<EventListener<? super ConfigurationEvent>> list =\n        Collection<EventListener<? super ConfigurationEvent>> list =\n        EventListenerTestImpl l = new EventListenerTestImpl(source);\n        EventListenerTestImpl l = new EventListenerTestImpl(source);\n        EventListener<ConfigurationEvent> lstRemove = new EventListener<ConfigurationEvent>()\n            public void onEvent(ConfigurationEvent event)\n        EventListenerTestImpl l = new EventListenerTestImpl(source);\n        ErrorListenerTestImpl lstRead = new ErrorListenerTestImpl(source);\n        ErrorListenerTestImpl lstWrite = new ErrorListenerTestImpl(source);\n        ErrorListenerTestImpl lstAll = new ErrorListenerTestImpl(source);\n        Exception testException = new Exception(\"A test\");\n        BaseEventSource copy = (BaseEventSource) source.clone();\n        EventListenerTestImpl l1 = new EventListenerTestImpl(source);\n        EventListenerTestImpl l2 = new EventListenerTestImpl(source);\n        BaseEventSource source2 = new BaseEventSource();\n        EventListener<ConfigurationEvent> cl = new EventListenerTestImpl(null);\n        ErrorListenerTestImpl el1 = new ErrorListenerTestImpl(null);\n        ErrorListenerTestImpl el2 = new ErrorListenerTestImpl(null);\n        ErrorListenerTestImpl el3 = new ErrorListenerTestImpl(null);\n        List<EventListenerRegistrationData<?>> regs =\n                EventType<T> eventType, String propName, Object propValue,\n                boolean before)\n                EventType<? extends ConfigurationErrorEvent> type,\n                EventType<?> opType, String propName, Object propValue,\n                Throwable ex)\n",
            "src/test/java/org/apache/commons/configuration2/event/TestEventType.java": "        String s = eventType.toString();\n",
            "src/test/java/org/apache/commons/configuration2/event/TestHierarchicalConfigurationEvents.java": "        BaseHierarchicalConfiguration hc = (BaseHierarchicalConfiguration) config;\n        String key = EXIST_PROPERTY.substring(0, EXIST_PROPERTY.indexOf('.'));\n        NodeHandler<ImmutableNode> nodeHandler = hc.getNodeModel().getNodeHandler();\n        Collection<QueryResult<ImmutableNode>> nodes = hc.getExpressionEngine()\n        BaseHierarchicalConfiguration hc = (BaseHierarchicalConfiguration) config;\n        Collection<ImmutableNode> nodes = new ArrayList<>(1);\n        HierarchicalConfiguration<ImmutableNode> sub =\n        HierarchicalConfiguration<ImmutableNode> sub =\n    private void checkSubnodeEvent(ConfigurationEvent event, boolean before)\n        ConfigurationEvent evSub = (ConfigurationEvent) event\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestConfigurationInterpolator.java": "        Lookup lookup = EasyMock.createMock(Lookup.class);\n        Lookup lookup = EasyMock.createMock(Lookup.class);\n        Lookup lookup = EasyMock.createMock(Lookup.class);\n        Lookup l1 = EasyMock.createMock(Lookup.class);\n        Lookup l2 = EasyMock.createMock(Lookup.class);\n        Lookup l3 = EasyMock.createMock(Lookup.class);\n        Lookup l1 = setUpTestLookup();\n        Lookup l2 = setUpTestLookup(\"someVar\", \"someValue\");\n        Map<String, Lookup> lookups = new HashMap<>();\n        String prefix2 = TEST_PREFIX + \"_other\";\n        Map<String, Lookup> lookups2 = interpolator.getLookups();\n        Map<String, Lookup> lookups = interpolator.getLookups();\n        List<Lookup> lookups = new ArrayList<>();\n        List<Lookup> lookups2 = interpolator.getDefaultLookups();\n        List<Lookup> lookups = interpolator.getDefaultLookups();\n        List<Lookup> lookups = new ArrayList<>();\n        Iterator<String> it = interpolator.prefixSet().iterator();\n        ConfigurationInterpolator parent =\n        ConfigurationInterpolator parent =\n        Object value = 42;\n        String value = \"${\" + TEST_PREFIX + ':' + TEST_NAME + \"}\";\n        String value = \"${unknownVariable}\";\n        String var = \"${jre-${java.version}}\";\n        String value = \"The ${subject} jumps over ${object}.\";\n        Object value = 42;\n        String value = \"${\" + TEST_NAME;\n        String value = \"${}\";\n        ConfigurationInterpolator ci =\n        InterpolatorSpecification spec =\n        Lookup defLookup = EasyMock.createMock(Lookup.class);\n        Lookup preLookup = EasyMock.createMock(Lookup.class);\n        InterpolatorSpecification spec =\n        ConfigurationInterpolator ci =\n        Map<String, Lookup> lookups =\n        for (DefaultLookups l : DefaultLookups.values())\n        Lookup look = EasyMock.createMock(Lookup.class);\n        Lookup lookup = ConfigurationInterpolator.nullSafeLookup(null);\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestConstantLookup.java": "    private String variable(String field)\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestEnvironmentLookup.java": "        EnvironmentConfiguration envConf = new EnvironmentConfiguration();\n        for (Iterator<String> it = envConf.getKeys(); it.hasNext();)\n            String var = it.next();\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestExprLookup.java": "        XMLConfiguration config = new XMLConfiguration();\n        FileHandler handler = new FileHandler(config);\n        ConsoleAppender app = new ConsoleAppender(new SimpleLayout());\n        Log log = LogFactory.getLog(\"TestLogger\");\n        Logger logger = ((Log4JLogger)log).getLogger();\n        ExprLookup.Variables vars = new ExprLookup.Variables();\n        XMLConfiguration config = loadConfig();\n        ConfigurationLogger testLogger = new ConfigurationLogger(\"TestLogger\");\n        ExprLookup lookup = new ExprLookup(vars);\n        ExprLookup.Variables vars = new ExprLookup.Variables();\n        ExprLookup lookup = new ExprLookup(vars);\n        String value = \"test\";\n        ExprLookup.Variables vars = new ExprLookup.Variables();\n        ExprLookup lookup = new ExprLookup(vars);\n        ExprLookup.Variables vars = new ExprLookup.Variables();\n        ExprLookup lookup = new ExprLookup(vars);\n        ExprLookup.Variables vars2 = lookup.getVariables();\n        ExprLookup.Variables vars = new ExprLookup.Variables();\n        ExprLookup lookup = new ExprLookup(vars);\n        XMLConfiguration config = loadConfig();\n        String pattern = \"System.currentTimeMillis()\";\n        String result = lookup.lookup(pattern);\n        ExprLookup.Variables vars = new ExprLookup.Variables();\n        ExprLookup lookup = new ExprLookup(vars);\n        XMLConfiguration config = loadConfig();\n        public Utility(String msg)\n        public String str(String str)\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestInterpolatorSpecification.java": "    private static <T> T createMock(Class<T> cls)\n        T mock = EasyMock.createMock(cls);\n    private static void checkPrefixLookups(InterpolatorSpecification spec,\n            Lookup prefLook1, Lookup prefLook2)\n    private static void checkDefaultLookups(InterpolatorSpecification spec,\n            Lookup defLook1, Lookup defLook2)\n        Lookup prefLook1 = createLookup();\n        Lookup prefLook2 = createLookup();\n        Lookup defLook1 = createLookup();\n        Lookup defLook2 = createLookup();\n        ConfigurationInterpolator interpolator =\n        ConfigurationInterpolator parent =\n        InterpolatorSpecification spec =\n        Lookup prefLook1 = createLookup();\n        Lookup prefLook2 = createLookup();\n        Lookup defLook1 = createLookup();\n        Lookup defLook2 = createLookup();\n        Map<String, Lookup> prefixLookups = new HashMap<>();\n        InterpolatorSpecification spec =\n        InterpolatorSpecification spec =\n        InterpolatorSpecification spec =\n        InterpolatorSpecification spec =\n        InterpolatorSpecification spec =\n        Lookup prefLook1 = createLookup();\n        Lookup prefLook2 = createLookup();\n        Lookup defLook1 = createLookup();\n        Lookup defLook2 = createLookup();\n        ConfigurationInterpolator parent =\n        InterpolatorSpecification spec =\n",
            "src/test/java/org/apache/commons/configuration2/interpol/TestSystemPropertiesLookup.java": "        for(Map.Entry<Object, Object> e : System.getProperties().entrySet())\n",
            "src/test/java/org/apache/commons/configuration2/io/TestAbsoluteNameLocationStrategy.java": "        FileLocator locator = FileLocatorUtils.fileLocator().create();\n        FileLocator locator =\n        File file = ConfigurationAssert.getOutFile(\"NotExistingFile.tst\");\n        FileLocator locator =\n        File file = ConfigurationAssert.getTestFile(\"test.xml\");\n        FileLocator locator =\n        URL url = strategy.locate(fileSystem, locator);\n",
            "src/test/java/org/apache/commons/configuration2/io/TestBasePathLocationStrategy.java": "    private static void checkURL(URL url)\n        File path = ConfigurationAssert.TEST_DIR;\n        FileLocator locator =\n        File path = ConfigurationAssert.TEST_DIR;\n        FileLocator locator =\n        FileLocator locator =\n        FileLocator locator =\n",
            "src/test/java/org/apache/commons/configuration2/io/TestClasspathLocationStrategy.java": "        FileLocator locator =\n        URL url = strategy.locate(fileSystem, locator);\n        Configurations configurations = new Configurations();\n        XMLConfiguration config1 = configurations.xml(url);\n        XMLConfiguration config2 = configurations.xml(ConfigurationAssert.getTestURL(FILE_NAME));\n        FileLocator locator =\n        FileLocator locator =\n",
            "src/test/java/org/apache/commons/configuration2/io/TestCombinedLocationStrategy.java": "    private void checkSubStrategies(CombinedLocationStrategy strategy)\n        Collection<FileLocationStrategy> subs = strategy.getSubStrategies();\n        for (FileLocationStrategy strat : subs)\n        Collection<FileLocationStrategy> col =\n        Collection<FileLocationStrategy> col =\n        CombinedLocationStrategy strategy = new CombinedLocationStrategy(col);\n        CombinedLocationStrategy strategy = createCombinedStrategy();\n        CombinedLocationStrategy strategy = createCombinedStrategy();\n        CombinedLocationStrategy strategy = createCombinedStrategy();\n        CombinedLocationStrategy strategy = createCombinedStrategy();\n",
            "src/test/java/org/apache/commons/configuration2/io/TestConfigurationLogger.java": "        ConfigurationLogger logger1 =\n        ConfigurationLogger logger2 = new ConfigurationLogger(getClass());\n        Log log = EasyMock.createMock(Log.class);\n        ConfigurationLogger logger = new ConfigurationLogger(log);\n        Log log = EasyMock.createMock(Log.class);\n        ConfigurationLogger logger = new ConfigurationLogger(log);\n        Log log = EasyMock.createMock(Log.class);\n        ConfigurationLogger logger = new ConfigurationLogger(log);\n        Log log = EasyMock.createMock(Log.class);\n        ConfigurationLogger logger = new ConfigurationLogger(log);\n        Log log = EasyMock.createMock(Log.class);\n        ConfigurationLogger logger = new ConfigurationLogger(log);\n        Log log = EasyMock.createMock(Log.class);\n        Throwable ex = new Exception(\"Test exception\");\n        ConfigurationLogger logger = new ConfigurationLogger(log);\n        Log log = EasyMock.createMock(Log.class);\n        ConfigurationLogger logger = new ConfigurationLogger(log);\n        Log log = EasyMock.createMock(Log.class);\n        Throwable ex = new Exception(\"Test exception\");\n        ConfigurationLogger logger = new ConfigurationLogger(log);\n        ConfigurationLogger logger = ConfigurationLogger.newDummyLogger();\n        ConfigurationLogger logger = new ConfigurationLogger()\n            public void info(String msg)\n        AbstractConfiguration config = new BaseConfiguration();\n        ConfigurationLogger logger = new ConfigurationLogger(getClass());\n        AbstractConfiguration config = new BaseConfiguration();\n        AbstractConfiguration config = new BaseConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/io/TestDefaultFileSystem.java": "        ConfigurationLogger log = new ConfigurationLogger(getClass());\n",
            "src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java": "    private File createTestFile(File f)\n        catch (IOException ioex)\n                catch (IOException ioex)\n    private static String readReader(Reader in) throws IOException\n        StringBuilder buf = new StringBuilder();\n    private static String readFile(File f)\n        catch (IOException ioex)\n                catch (IOException ioex)\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileSystem sys = EasyMock.createMock(FileSystem.class);\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileSystem sys = EasyMock.createMock(FileSystem.class);\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileHandler handler = new FileHandler();\n        FileLocationStrategy strategy =\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        URL url =\n        FileHandler handler = new FileHandler();\n        FileLocator locator = handler.getFileLocator();\n        FileHandler handler = new FileHandler();\n        File directory = ConfigurationAssert.TEST_DIR;\n        File file = ConfigurationAssert.getTestFile(TEST_FILENAME);\n        FileHandler handler = new FileHandler();\n        File file = ConfigurationAssert.getTestFile(TEST_FILENAME);\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        String basePath = ConfigurationAssert.TEST_DIR_NAME;\n        FileLocator locator = handler.getFileLocator();\n        FileHandler handler = new FileHandler();\n        String testProperties =\n        String testBasePath = ConfigurationAssert.TEST_DIR.getAbsolutePath();\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        StringReader reader = new StringReader(CONTENT);\n        FileBased content = EasyMock.createMock(FileBased.class);\n        Reader in = new StringReader(CONTENT);\n        IOException ioex = new IOException(\"Test exception\");\n        FileHandler handler = new FileHandler(content);\n        catch (ConfigurationException cex)\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        File file = createTestFile();\n        FileHandler handler = new FileHandler(content);\n        FileHandler handler = new FileHandler();\n        File file = createTestFile();\n        catch (ConfigurationException cex)\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler config1 = new FileHandler(content);\n        File file = createTestFile();\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        File file = createTestFile();\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        File file = createTestFile();\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        File file = createTestFile();\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        FileInputStream in = new FileInputStream(file);\n        File file = createTestFile();\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        Reader in = new FileReader(file);\n        File file = createTestFile();\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        File file = createTestFile();\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        StringWriter out = new StringWriter();\n        FileBased content = EasyMock.createMock(FileBased.class);\n        StringWriter out = new StringWriter();\n        IOException ioex = new IOException(\"Test exception!\");\n        FileHandler handler = new FileHandler(content);\n        catch (ConfigurationException cex)\n        FileHandler handler = new FileHandler();\n        File file = folder.newFile();\n        FileOutputStream out = new FileOutputStream(file);\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        File file = folder.newFile();\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        File file = folder.newFile();\n        URL url = file.toURI().toURL();\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        File file = folder.newFile();\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        File file = folder.newFile();\n        String basePath = \"some base path\";\n        MalformedURLException urlex =\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        catch (ConfigurationException cex)\n        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        File file = folder.newFile();\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        catch (ConfigurationException cex)\n        File file = folder.newFile();\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        File file = folder.newFile();\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        File path = folder.newFolder(\"path with spaces\");\n        File confFile = new File(path, \"config-test.properties\");\n        File testFile = createTestFile(confFile);\n        URL url = testFile.toURI().toURL();\n        FileBasedTestImpl content = new FileBasedTestImpl();\n        FileHandler handler = new FileHandler(content);\n        File out = new File(path, \"out.txt\");\n        File saveFile = folder.newFile(\"test+config.properties\");\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileHandler h1 = new FileHandler();\n        File f = new File(\"testfile.txt\");\n        FileBased content = new FileBasedTestImpl();\n        FileHandler h2 = new FileHandler(content, h1);\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        File file = createTestFile();\n        FileBasedFileLocatorAwareTestImpl content =\n        FileHandler handler = new FileHandler(content);\n            FileBasedFileLocatorAwareTestImpl content)\n        FileBasedFileLocatorAwareTestImpl content =\n        FileHandler handler = new FileHandler(content);\n        ByteArrayInputStream bos = new ByteArrayInputStream(CONTENT.getBytes());\n        FileBasedFileLocatorAwareTestImpl content =\n        FileHandler handler = new FileHandler(content);\n        File file = folder.newFile();\n        FileBasedFileLocatorAwareTestImpl content =\n        FileHandler handler = new FileHandler(content);\n        FileBasedFileLocatorAwareTestImpl content =\n        FileHandler handler = new FileHandler(content);\n        FileBasedFileLocatorAwareTestImpl content =\n        FileHandler handler = new FileHandler(content);\n        FileBasedFileLocatorAwareTestImpl content =\n        FileHandler handler = new FileHandler(content);\n        String encoding = \"testEncoding\";\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileHandlerListenerTestImpl listener =\n        FileHandler handler = new FileHandler(new FileBasedTestImpl());\n        FileHandlerListenerTestImpl listener =\n        File f = folder.newFile();\n        FileHandler handler = new FileHandler();\n        FileHandlerListenerTestImpl listener =\n        FileHandler handler = new FileHandler();\n        FileHandlerListenerTestImpl listener =\n        FileHandler handler = new FileHandler();\n        FileHandlerListenerTestImpl listener =\n        FileHandler handler = new FileHandler();\n        FileHandlerListenerTestImpl listener =\n        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        FileHandler handler = new FileHandler();\n        FileHandlerListenerTestImpl listener =\n        FileHandler handler = new FileHandler();\n        FileHandlerListenerTestImpl listener =\n        URL url = folder.newFile().toURI().toURL();\n        FileHandler handler = new FileHandler();\n        FileHandlerListenerTestImpl listener =\n        FileHandler handler = new FileHandler();\n        FileHandlerListenerTestImpl listener =\n        FileBasedInputStreamSupportTestImpl content =\n        FileHandler handler = new FileHandler(content);\n        ByteArrayInputStream bin = new ByteArrayInputStream(CONTENT.getBytes());\n        FileBasedInputStreamSupportTestImpl content =\n        ByteArrayInputStream bin = new ByteArrayInputStream(CONTENT.getBytes());\n        IOException ioex = new IOException();\n        FileHandler handler = new FileHandler(content);\n        catch (ConfigurationException cex)\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        FileHandler handler = new FileHandler(config);\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        SynchronizerTestImpl sync = new SynchronizerTestImpl();\n        FileHandler handler = new FileHandler(config);\n        File f = folder.newFile();\n            Thread t1 = new Thread()\n            Thread t2 = new Thread()\n            Thread t3 = new Thread()\n            Thread t4 = new Thread()\n            List<Thread> threads = Arrays.asList(t1, t2, t3, t4);\n            for (Thread t : threads)\n            for (Thread t : threads)\n            FileLocator locator = handler.getFileLocator();\n        FileHandler handler = new FileHandler();\n        FileLocator locator =\n        FileHandler handler = new FileHandler();\n        FileHandler handler = new FileHandler();\n        FileLocator locator = handler.getFileLocator();\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        FileHandler h2 = new FileHandler(config);\n        FileHandler handler = new FileHandler();\n        FileLocator locator = handler.getFileLocator();\n        FileHandler handler = new FileHandler();\n        FileLocator locator = handler.getFileLocator();\n        FileLocator locator =\n        Map<String, Object> map = new HashMap<>();\n        FileHandler handler = FileHandler.fromMap(map);\n        public void setContent(String content)\n        public void read(Reader in) throws ConfigurationException, IOException\n        public void write(Writer out) throws ConfigurationException,\n        public void read(InputStream in) throws ConfigurationException,\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        public void initFileLocator(FileLocator loc)\n        public void read(Reader in) throws ConfigurationException, IOException\n        public void write(Writer out) throws ConfigurationException,\n        public FileHandlerListenerTestImpl(FileHandler fh)\n        public void checkMethods(String expMethods)\n        public void loading(FileHandler handler)\n        public void loaded(FileHandler handler)\n        public void saving(FileHandler handler)\n        public void saved(FileHandler handler)\n        public void locationChanged(FileHandler handler)\n        private void methodCalled(FileHandler handler, String method)\n",
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocator.java": "        FileLocator locator = FileLocatorUtils.fileLocator().create();\n    private static void checkLocator(FileLocator locator)\n        FileLocator locator =\n        FileLocator locatorSrc =\n        FileLocator locator =\n        FileLocator loc1 =\n        FileLocator loc =\n        FileLocator loc =\n        FileLocator loc =\n        String s = loc.toString();\n",
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocatorUtils.java": "        File file = new File(\"https%3A%2F%2Fwww.apache.org%2F.url\").getAbsoluteFile();\n        URL fileURL = file.toURI().toURL();\n        File file2 = FileLocatorUtils.fileFromURL(fileURL);\n        File file = new File(new File(\"target\"), \"foo+bar.txt\")\n        URL fileURL = file.toURI().toURL();\n        File file2 = FileLocatorUtils.fileFromURL(fileURL);\n        File directory = new File(\"target\");\n        File reference = new File(directory, \"test.txt\").getAbsoluteFile();\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        FileLocator locator =\n        FileLocator locator =\n        FileLocator locator =\n        FileLocator locator =\n    private static void checkTestConfiguration(FileHandler handler)\n        XMLConfiguration config = new XMLConfiguration();\n        FileHandler h2 = new FileHandler(config, handler);\n    private static void checkFullyInitializedLocator(FileLocator locator)\n        FileLocator locator =\n        FileLocator locator =\n        FileLocator locator =\n        FileLocator fullLocator =\n        FileLocator locator =\n        FileLocator locator =\n        URI uri = new URI(\"test://test/path/file.tst\");\n        File file = ConfigurationAssert.getTestFile(FILE_NAME);\n        FileHandler handler = new FileHandler();\n        CombinedLocationStrategy strategy =\n        Iterator<FileLocationStrategy> it =\n        FileLocationStrategy strategy =\n        FileLocator locator =\n        FileLocator locator = FileLocatorUtils.fileLocator().create();\n        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        FileLocationStrategy strategy =\n        FileLocator locator =\n        FileLocationStrategy strategy =\n        FileLocator locator =\n        FileLocator locator =\n        FileLocationStrategy strategy =\n        FileLocator locator =\n        FileLocationStrategy strategy =\n        FileLocator locator =\n        Map<String, Object> map = new HashMap<>();\n        FileLocator locator2 = FileLocatorUtils.fromMap(map);\n        Map<String, Object> map = new HashMap<>();\n        FileLocator fileLocator = FileLocatorUtils.fromMap(null);\n",
            "src/test/java/org/apache/commons/configuration2/io/TestFileSystemLocationStrategy.java": "        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        URL url = ConfigurationAssert.getTestURL(\"test.xml\");\n        FileLocator locator =\n",
            "src/test/java/org/apache/commons/configuration2/io/TestHomeDirectoryLocationStrategy.java": "    private HomeDirectoryLocationStrategy setUpStrategy(boolean withBasePath)\n        HomeDirectoryLocationStrategy strategy =\n        File file = folder.newFile(FILE_NAME);\n        FileLocator locator =\n        HomeDirectoryLocationStrategy strategy = setUpStrategy(false);\n        URL url = strategy.locate(fileSystem, locator);\n        FileLocator locator =\n        HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n        File sub = folder.newFolder(BASE_PATH);\n        File file = new File(sub, FILE_NAME);\n        FileLocator locator =\n        HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n        URL url = strategy.locate(fileSystem, locator);\n        File file = folder.newFile(FILE_NAME);\n        FileLocator locator =\n        HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n        URL url = strategy.locate(fileSystem, locator);\n        FileLocator locator =\n        HomeDirectoryLocationStrategy strategy = setUpStrategy(true);\n",
            "src/test/java/org/apache/commons/configuration2/io/TestProvidedURLLocationStrategy.java": "        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        URL url = ConfigurationAssert.getTestURL(\"test.xml\");\n        FileLocator locator =\n        FileSystem fs = EasyMock.createMock(FileSystem.class);\n        FileLocator locator =\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java": "    private static void load(PropertyListConfiguration c, File f)\n        } catch (ConfigurationException e) {\n        String key = \"empty-array\";\n        List<?> list = (List<?>) config.getProperty(key);\n        String key = \"array\";\n        List<?> list = (List<?>) config.getProperty(key);\n        String key = \"nested-arrays\";\n        Object array = config.getProperty(key);\n        List<?> list = config.getList(key);\n        List<?> list1 = (List<?>) list.get(0);\n        List<?> list2 = (List<?>) list.get(1);\n        String key = \"dictionary-array\";\n        Object array = config.getProperty(key);\n        List<?> list = config.getList(key);\n        Configuration conf1 = (Configuration) list.get(0);\n        Configuration conf2 = (Configuration) list.get(1);\n        Calendar cal = Calendar.getInstance();\n        Date date = cal.getTime();\n    private void saveConfig(File file) throws ConfigurationException\n        File savedFile = folder.newFile(\"testsave.plist\");\n        PropertyListConfiguration checkConfig = new PropertyListConfiguration();\n        Iterator<String> it = config.getKeys();\n            String key = it.next();\n            Object value = checkConfig.getProperty(key);\n                byte[] array = (byte[]) value;\n                List<?> list1 = (List<?>) config.getProperty(key);\n                List<?> list2 = (List<?>) value;\n                    Object value1 = list1.get(i);\n                    Object value2 = list2.get(i);\n                        ConfigurationComparator comparator = new StrictConfigurationComparator();\n        File savedFile = folder.newFile(\"testsave.plist\");\n        PropertyListConfiguration checkConfig = new PropertyListConfiguration();\n            HierarchicalConfiguration<ImmutableNode> config, String name)\n        NodeHandler<ImmutableNode> handler =\n        File saveFile = folder.newFile();\n        byte[] expected = new byte[]{1, 2, 3, 4};\n        PropertyListConfiguration config2 = new PropertyListConfiguration();\n        Object array = config2.getProperty(\"foo\");\n        File saveFile = folder.newFile();\n        byte[] expected = new byte[]{1, 2, 3, 4};\n        PropertyListConfiguration config2 = new PropertyListConfiguration();\n        Object array = config2.getProperty(\"foo\");\n        PropertyListConfiguration copy = new PropertyListConfiguration(config);\n        Calendar cal = Calendar.getInstance();\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfigurationEvents.java": "            PropertyListConfiguration c = new PropertyListConfiguration();\n        catch (ConfigurationException cex)\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListParser.java": "        Calendar calendar = Calendar.getInstance();\n        byte[] expected = new byte[] {0x20, 0x20};\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java": "    private static void load(XMLPropertyListConfiguration c, File file)\n    private void save(File file) throws ConfigurationException\n        Calendar calendar = Calendar.getInstance();\n        Configuration subset = config.subset(\"dictionary\");\n        Iterator<String> keys = subset.getKeys();\n        Object array = config.getProperty(\"array\");\n        List<?> list = config.getList(\"array\");\n        String key = \"nested-array\";\n        Object array = config.getProperty(key);\n        List<?> list = config.getList(key);\n        List<?> list1 = (List<?>) list.get(0);\n        List<?> list2 = (List<?>) list.get(1);\n        String key = \"dictionary-array\";\n        Object array = config.getProperty(key);\n        List<?> list = config.getList(key);\n        Configuration conf1 = (Configuration) list.get(0);\n        Configuration conf2 = (Configuration) list.get(1);\n        File savedFile = folder.newFile();\n        XMLPropertyListConfiguration checkConfig = new XMLPropertyListConfiguration();\n        Iterator<String> it = config.getKeys();\n            String key = it.next();\n            Object value = checkConfig.getProperty(key);\n                byte[] array = (byte[]) value;\n                List<?> list1 = (List<?>) config.getProperty(key);\n                List<?> list2 = (List<?>) value;\n                    Object value1 = list1.get(i);\n                    Object value2 = list2.get(i);\n                        ConfigurationComparator comparator = new StrictConfigurationComparator();\n        File savedFile = folder.newFile();\n        XMLPropertyListConfiguration checkConfig = new XMLPropertyListConfiguration();\n        File savedFile = folder.newFile();\n        byte[] expected = new byte[]{1, 2, 3, 4};\n        XMLPropertyListConfiguration config2 = new XMLPropertyListConfiguration();\n        Object array = config2.getProperty(\"foo\");\n        File savedFile = folder.newFile();\n        byte[] expected = new byte[]{1, 2, 3, 4};\n        XMLPropertyListConfiguration config2 = new XMLPropertyListConfiguration();\n        Object array = config2.getProperty(\"foo\");\n        XMLPropertyListConfiguration copy = new XMLPropertyListConfiguration(config);\n        StrictConfigurationComparator comp = new StrictConfigurationComparator();\n        XMLPropertyListConfiguration plist = new XMLPropertyListConfiguration();\n        XMLPropertyListConfiguration plist = new XMLPropertyListConfiguration();\n        StringWriter writer = new StringWriter();\n        String encoding = \"UTF-8\";\n        FileHandler handler = new FileHandler(config);\n        StringWriter writer = new StringWriter();\n    private void checkArrayProperty(List<?> expectedValues)\n        StringWriter out = new StringWriter();\n        StringBuilder values = new StringBuilder();\n        for (Object v : expectedValues)\n        String content = out.toString().replaceAll(\"[ \\n\\r]\", \"\");\n        List<String> elems =\n        Object[] elems = {\n        Writer out = new FileWriter(folder.newFile());\n        catch (ConfigurationException e)\n",
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfigurationEvents.java": "            XMLPropertyListConfiguration c = new XMLPropertyListConfiguration();\n        catch (ConfigurationException cex)\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java": "        List<ReloadingController> lstCtrls =\n        CombinedReloadingController result =\n        Collection<ReloadingController> ctrls =\n        CombinedReloadingController ctrl = setUpController();\n        CombinedReloadingController ctrl = setUpController();\n        for (ReloadingController rc : subControllers)\n        CombinedReloadingController ctrl = setUpController();\n        for (ReloadingController rc : subControllers)\n        CombinedReloadingController ctrl = setUpController();\n        for (ReloadingController rc : subControllers)\n        CombinedReloadingController ctrl = setUpController();\n        Collection<ReloadingController> subs = ctrl.getSubControllers();\n        Collection<ReloadingController> subs =\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java": "\t\tFileHandler handler = new FileHandler();\n\t\tFileHandlerReloadingDetector detector = new FileHandlerReloadingDetector(\n    \tFileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n    \tFileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n    \tFileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n        File f = EasyMock.createMock(File.class);\n        FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n        File f = EasyMock.createMock(File.class);\n        FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n        File f = EasyMock.createMock(File.class);\n        FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n        File f = EasyMock.createMock(File.class);\n        FileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(f);\n        File f = EasyMock.createMock(File.class);\n\t\tFileHandlerReloadingDetector detector = new FileHandlerReloadingDetectorTestImpl(\n    \tFileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n    \tFileHandlerReloadingDetector detector = new FileHandlerReloadingDetector();\n        URL url =\n        File file = detector.getFile();\n\t\tpublic FileHandlerReloadingDetectorTestImpl(File file) {\n\t\tpublic FileHandlerReloadingDetectorTestImpl(File file, long delay)\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestPeriodicReloadingTrigger.java": "        PeriodicReloadingTrigger trigger =\n    private void expectSchedule(ScheduledFuture<Void> future)\n        PeriodicReloadingTrigger trigger = createTrigger();\n        ScheduledFuture<Void> future = createFutureMock();\n        PeriodicReloadingTrigger trigger = createTrigger();\n        ScheduledFuture<Void> future = createFutureMock();\n        PeriodicReloadingTrigger trigger = createTrigger();\n        ScheduledFuture<Void> future = createFutureMock();\n        PeriodicReloadingTrigger trigger = createTrigger();\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestReloadingController.java": "    private void expectEvent(EventListener<ReloadingEvent> l,\n        EventListener<ReloadingEvent> l = createListenerMock();\n        EventListener<ReloadingEvent> lRemoved = createListenerMock();\n        MutableObject<ReloadingEvent> evRef = new MutableObject<>();\n        ReloadingController ctrl = createController();\n        Object testData = \"Some test data\";\n        EventListener<ReloadingEvent> l = createListenerMock();\n        ReloadingController ctrl = createController();\n        EventListener<ReloadingEvent> l = createListenerMock();\n        ReloadingController ctrl = createController();\n        ReloadingController ctrl = createController();\n",
            "src/test/java/org/apache/commons/configuration2/reloading/TestVFSFileHandlerReloadingDetector.java": "    private void writeTestFile(File file, String value) throws IOException\n        FileWriter out = new FileWriter(file);\n        File file = folder.newFile();\n        VFSFileHandlerReloadingDetector strategy =\n        long modificationDate = strategy.getLastModificationDate();\n        File file = ConfigurationAssert.getOutFile(\"NonExistingFile.xml\");\n        FileHandler handler = new FileHandler();\n        VFSFileHandlerReloadingDetector strategy =\n        VFSFileHandlerReloadingDetector strategy =\n        FileName name = EasyMock.createMock(FileName.class);\n        VFSFileHandlerReloadingDetector strategy =\n        VFSFileHandlerReloadingDetector strategy =\n        VFSFileHandlerReloadingDetector strategy =\n",
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertiesFactoryBean.java": "        Configuration one = new BaseConfiguration();\n        String properties =\n        PropertiesConfiguration two = new PropertiesConfiguration();\n        PropertiesConfigurationLayout layout =\n        Properties props = configurationFactory.getObject();\n        Properties props = configurationFactory.getObject();\n        Resource[] locations = {\n        Resource[] locationsUpdate = locations.clone();\n        Resource[] locations = {\n        Resource[] locationsGet = configurationFactory.getLocations();\n        Configuration[] configs = {\n        Configuration[] configsUpdate = configs.clone();\n        Configuration[] configs = {\n        Configuration[] configsGet = configurationFactory.getConfigurations();\n",
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertySource.java": "                ConfigurableEnvironment env)\n            PropertySourcesPlaceholderConfigurer configurer =\n            MutablePropertySources sources = new MutablePropertySources();\n        PropertiesConfiguration propertiesConfiguration =\n",
            "src/test/java/org/apache/commons/configuration2/sync/TestReadWriteSynchronizer.java": "        ReadWriteLock lock = EasyMock.createMock(ReadWriteLock.class);\n        Lock readLock = EasyMock.createMock(Lock.class);\n        ReadWriteSynchronizer sync = new ReadWriteSynchronizer(lock);\n        Synchronizer sync = new ReadWriteSynchronizer();\n        Synchronizer sync = new ReadWriteSynchronizer();\n        Account account1 = new Account();\n        Account account2 = new Account();\n        UpdateThread[] updateThreads = new UpdateThread[updateThreadCount];\n        ReaderThread[] readerThreads = new ReaderThread[readThreadCount];\n        for (UpdateThread t : updateThreads)\n        for (ReaderThread t : readerThreads)\n    private static long sumUpAccounts(Account... accounts)\n        for (Account acc : accounts)\n        public void change(long delta)\n        public ReaderThread(Synchronizer s, int readCount, Account... accs)\n                long sum = sumUpAccounts(accounts);\n        public UpdateThread(Synchronizer s, int updateCount, Account ac1,\n                Account ac2)\n                long x =\n",
            "src/test/java/org/apache/commons/configuration2/test/HsqlDB.java": "    public HsqlDB(String uri, String databaseDriver, String loadFile)\n        catch (Exception e)\n    private void loadSqlFile(String fileName)\n                String cmd = commands.substring(0, targetPos + 1);\n                catch (SQLException sqle)\n    private String getFileContents(String fileName)\n        FileReader fr = new FileReader(fileName);\n        char fileBuf[]  = new char[1024];\n        StringBuffer sb = new StringBuffer(1000);\n",
            "src/test/java/org/apache/commons/configuration2/tree/AbstractCombinerTest.java": "        XMLConfiguration conf1 = new XMLConfiguration();\n        XMLConfiguration conf2 = new XMLConfiguration();\n        ImmutableNode cn =\n        BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandlerTest.java": "        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n            ImmutableNode authorNode =\n                String workKey =\n                ImmutableNode workNode =\n                    String personKey =\n                    ImmutableNode personNode =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        ImmutableNode author =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        int year = 1611;\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        ImmutableNode node =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        String name = \"Achilles\";\n        Set<ImmutableNode> children =\n        for (ImmutableNode c : children)\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        List<ImmutableNode> children =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        ImmutableNode node =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        String key = \"Simmons/Hyperion\";\n        ImmutableNode parent = nodeForKey(handler, key);\n        ImmutableNode child = nodeForKey(handler, key + \"/Weintraub\");\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        ImmutableNode parent = nodeForKey(handler, \"Homer/Ilias\");\n        ImmutableNode child =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        ImmutableNode node =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        ImmutableNode node = nodeForKey(handler, \"Puck\");\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        ImmutableNode node = nodeForKey(handler, \"Puck\");\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        ImmutableNode node = nodeForKey(handler, \"Puck\");\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        ImmutableNode node = nodeForKey(handler, \"Prospero\");\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        ImmutableNode node =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        ImmutableNode node =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        ImmutableNode node = new ImmutableNode.Builder().value(42).create();\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_PERSONAE_TREE);\n        ImmutableNode node =\n        NodeMatcher<ImmutableNode> matcher = new NodeMatcher<ImmutableNode>()\n            public <T> boolean matches(T node, NodeHandler<T> paramHandler,\n                    ImmutableNode criterion)\n        List<ImmutableNode> result =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        List<ImmutableNode> result =\n        NodeHandler<ImmutableNode> handler = createHandler(ROOT_AUTHORS_TREE);\n        public <T> boolean matches(T node, NodeHandler<T> handler, Object criterion) {\n",
            "src/test/java/org/apache/commons/configuration2/tree/NodeStructureHelper.java": "    public static String author(int idx)\n    public static int worksLength(int authorIdx)\n    public static String work(int authorIdx, int idx)\n    public static int personaeLength(int authorIdx, int workIdx)\n    public static String persona(int authorIdx, int workIdx, int personaIdx)\n    public static String table(int idx)\n    public static int fieldsLength(int tabIdx)\n    public static String field(int tabIdx, int fldIdx)\n    public static String appendPath(String path, String component)\n        StringBuilder buf =\n    public static ImmutableNode nodeForKey(ImmutableNode root, String key)\n        String[] components = key.split(PATH_SEPARATOR);\n    public static ImmutableNode nodeForKey(InMemoryNodeModel model, String key)\n    public static ImmutableNode nodeForKey(NodeHandler<ImmutableNode> handler,\n            String key)\n    public static String nodePath(String... path)\n    public static String nodePathWithEndNode(String endNode, String... path)\n    public static ImmutableNode createNode(String name, Object value)\n    public static ImmutableNode createFieldNode(String name)\n        ImmutableNode.Builder fldBuilder = new ImmutableNode.Builder(1);\n            NodeKeyResolver<ImmutableNode> resolver)\n                        ImmutableNode root =\n                        String key = (String) EasyMock.getCurrentArguments()[1];\n                        NodeHandler<ImmutableNode> handler =\n            NodeKeyResolver<ImmutableNode> resolver)\n                        ImmutableNode root =\n                        String key = (String) EasyMock.getCurrentArguments()[1];\n                        TreeData handler =\n    public static ImmutableNode createTablesTree(String[] tables,\n                                                 String[][] fields)\n        ImmutableNode.Builder bldTables =\n            ImmutableNode.Builder bldTable = new ImmutableNode.Builder(2);\n            ImmutableNode.Builder bldFields =\n        String[][] fieldNamesNew = new String[FIELDS.length][];\n        ImmutableNode.Builder rootBuilder =\n            ImmutableNode.Builder authorBuilder = new ImmutableNode.Builder();\n                ImmutableNode.Builder workBuilder = new ImmutableNode.Builder();\n                for (String person : PERSONAE[author][work])\n        ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n                for (String person : PERSONAE[author][work])\n                    ImmutableNode orgValue =\n                    ImmutableNode workNode =\n                    ImmutableNode personNode =\n    private static ImmutableNode findNode(ImmutableNode parent,\n            String[] components, int currentIdx)\n        Matcher m = PAT_KEY_WITH_INDEX.matcher(components[currentIdx]);\n        for (ImmutableNode node : parent.getChildren())\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java": "    private DefaultConfigurationKey key(String k)\n        DefaultExpressionEngineSymbols symbols =\n        DefaultExpressionEngineSymbols symbols =\n        DefaultConfigurationKey k1 = key(TESTKEY);\n        DefaultConfigurationKey k2 = key(TESTKEY);\n        DefaultConfigurationKey.KeyIterator it = key.iterator();\n        catch (NoSuchElementException nex)\n        DefaultConfigurationKey.KeyIterator it = key.iterator();\n        DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        DefaultConfigurationKey.KeyIterator it = key.iterator();\n        DefaultConfigurationKey.KeyIterator kit = key.iterator();\n        DefaultConfigurationKey k1 = key(TESTKEY);\n        DefaultConfigurationKey k1 = key(TESTKEY);\n        DefaultConfigurationKey kd = k1.differenceKey(k1);\n        DefaultConfigurationKey k1 = key(TESTKEY);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java": "        DefaultExpressionEngineSymbols symbols =\n    private void checkQueryRootNode(String key)\n        List<QueryResult<ImmutableNode>> results = checkKey(key, null, 1);\n        QueryResult<ImmutableNode> result = results.get(0);\n        ImmutableNode node = root.getChildren().get(0);\n        ImmutableNode node = root.getChildren().get(1);\n        DefaultExpressionEngineSymbols symbols =\n        ImmutableNode nd = data.getParent().getChildren().get(0);\n        ImmutableNode node = data.getParent().getChildren().get(0);\n        NodeAddData<ImmutableNode> data = engine.prepareAdd(root,\n        NodeAddData<ImmutableNode> data = engine.prepareAdd(root, \"[@newAttr]\", handler);\n        DefaultExpressionEngineSymbols symbols =\n        ImmutableNode node = fetchNode(\"tables.table(0).name\");\n        ImmutableNode tab1 = fetchNode(\"tables.table(0)\");\n        ImmutableNode tab2 = fetchNode(\"tables.table(1)\");\n        ImmutableNode node = fetchNode(\"tables.table(0).fields.field(1).name\");\n        NodeAddData<ImmutableNode> data =\n        ImmutableNode.Builder nodeTablesBuilder =\n            ImmutableNode.Builder nodeTableBuilder =\n            ImmutableNode.Builder nodeFieldsBuilder =\n        ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();\n        ImmutableNode.Builder nodeConnBuilder = new ImmutableNode.Builder();\n        DefaultExpressionEngineSymbols symbols =\n        NodeMatcher<String> matcher = new NodeMatcher<String>()\n            public <T> boolean matches(T node, NodeHandler<T> handler,\n                    String criterion)\n    private List<QueryResult<ImmutableNode>> checkKey(String key, String name,\n            int count)\n        List<QueryResult<ImmutableNode>> nodes = query(key, count);\n        for (QueryResult<ImmutableNode> result : nodes)\n    private List<QueryResult<ImmutableNode>> query(String key, int expCount)\n        List<QueryResult<ImmutableNode>> nodes = engine.query(root, key, handler);\n    private ImmutableNode fetchNode(String key)\n        QueryResult<ImmutableNode> result = query(key, 1).get(0);\n    private void checkKeyValue(String key, String name, String value)\n        List<QueryResult<ImmutableNode>> results = checkKey(key, name, 1);\n        QueryResult<ImmutableNode> result = results.get(0);\n    private void checkAttributeValue(String key, String attr, Object expValue)\n        List<QueryResult<ImmutableNode>> results = checkKey(key, attr, 1);\n        QueryResult<ImmutableNode> result = results.get(0);\n    private void checkNodePath(NodeAddData<ImmutableNode> data,\n            String... expected)\n        Iterator<String> it = data.getPathNodes().iterator();\n    private static ImmutableNode createFieldNode(String name)\n        ImmutableNode.Builder nodeFieldBuilder = new ImmutableNode.Builder(1);\n    private static ImmutableNode createNode(String name, Object value)\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngineSymbols.java": "    private static void expEqual(Object o1, Object o2)\n    private static void expNE(Object o1, Object o2)\n        DefaultExpressionEngineSymbols s2 =\n        DefaultExpressionEngineSymbols s1 =\n        DefaultExpressionEngineSymbols symbols = builder().create();\n        String s = symbols.toString();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestImmutableNode.java": "        ImmutableNode.Builder builder = new ImmutableNode.Builder();\n        ImmutableNode node = setUpBuilder().create();\n        ImmutableNode node = setUpBuilder().create();\n        ImmutableNode node = setUpBuilder().create();\n    private static void checkChildNodes(ImmutableNode node,\n            Collection<ImmutableNode> expChildren)\n        Iterator<ImmutableNode> itExp = expChildren.iterator();\n        for(ImmutableNode c : node.getChildren())\n    private static void checkChildNodes(ImmutableNode parent,\n            ImmutableNode... children)\n        List<ImmutableNode> childNodes = new ArrayList<>(childCount);\n        ImmutableNode.Builder builder = new ImmutableNode.Builder(childCount);\n            ImmutableNode.Builder childBuilder = new ImmutableNode.Builder();\n            ImmutableNode child = childBuilder.name(NAME + i).value(i).create();\n        ImmutableNode node = builder.name(NAME).create();\n        List<ImmutableNode> childNodes =\n            ImmutableNode.Builder childBuilder = new ImmutableNode.Builder();\n            ImmutableNode child = childBuilder.name(NAME + i).value(i).create();\n        ImmutableNode.Builder builder = setUpBuilder();\n        ImmutableNode node = builder.addChildren(childNodes).create();\n        ImmutableNode.Builder builder = setUpBuilder();\n        ImmutableNode node = builder.create();\n        ImmutableNode.Builder builder = setUpBuilder();\n        ImmutableNode child =\n        ImmutableNode node = builder.addChild(child).create();\n        ImmutableNode.Builder builder = setUpBuilder();\n        ImmutableNode node = builder.create();\n        ImmutableNode.Builder builder = setUpBuilder();\n        List<ImmutableNode> children = Arrays.asList(createChild(), null, createChild());\n        ImmutableNode node = builder.create();\n        ImmutableNode.Builder builder = setUpBuilder();\n        Map<String, Object> attrs = new HashMap<>();\n            String attrName = NAME + i;\n        ImmutableNode node = builder.create();\n    private static void checkAttributes(ImmutableNode node,\n            Map<String, ?> expAttrs)\n        for (Map.Entry<String, ?> e : expAttrs.entrySet())\n        ImmutableNode.Builder builder = setUpBuilder();\n        ImmutableNode node = builder.create();\n        ImmutableNode.Builder builder = setUpBuilder();\n        Map<String, Object> attrs = new HashMap<>();\n            String attrName = NAME + i;\n        ImmutableNode node = builder.addAttributes(attrs).create();\n        ImmutableNode.Builder builder = setUpBuilder();\n        ImmutableNode node = builder.create();\n    private ImmutableNode createDefaultNode(Object value)\n    private ImmutableNode createDefaultNode(String name, Object value)\n        ImmutableNode.Builder builder = new ImmutableNode.Builder(1);\n        int idx = childCounter++;\n    private static void checkUpdatedNode(ImmutableNode org,\n            ImmutableNode updated)\n        ImmutableNode node = createDefaultNode(\"test\");\n        ImmutableNode node2 = node.setValue(VALUE);\n        ImmutableNode node = createDefaultNode(\"anotherName\", VALUE);\n        ImmutableNode node2 = node.setName(NAME);\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode child2 =\n        ImmutableNode node2 = node.addChild(child2);\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode child2 =\n        ImmutableNode node2 = node.addChild(child2);\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode child2 =\n        ImmutableNode node2 = node.addChild(child2);\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode child2 =\n        ImmutableNode node2 = node.addChild(child2);\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode child = node.getChildren().get(0);\n        ImmutableNode node2 = node.removeChild(child);\n        ImmutableNode childRemove = createChild();\n        ImmutableNode node =\n        ImmutableNode node2 = node.removeChild(childRemove);\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode childRemove = createChild();\n        ImmutableNode childReplace = createChild();\n        ImmutableNode node = createDefaultNode(VALUE).addChild(childRemove);\n        ImmutableNode node2 = node.replaceChild(childRemove, childReplace);\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode node2 = node.setAttribute(\"attr\", ATTR_VALUE);\n        Map<String, Object> newAttrs =\n        ImmutableNode.Builder builder = setUpBuilder();\n        Map<String, Object> attrs = new HashMap<>();\n        ImmutableNode node = builder.addAttributes(attrs).create();\n        ImmutableNode node2 = node.setAttribute(attr2, VALUE);\n        ImmutableNode node = createDefaultNode(VALUE);\n        Map<String, Object> attributes = new HashMap<>();\n        ImmutableNode node2 = node.setAttributes(attributes);\n    private static void checkAttributesContained(ImmutableNode node,\n            Map<String, Object> attributes)\n        for (Map.Entry<String, Object> e : attributes.entrySet())\n    private void checkSetAttributesNoOp(Map<String, Object> attributes)\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode node = createDefaultNode(VALUE);\n        String attrName = node.getAttributes().keySet().iterator().next();\n        ImmutableNode node2 = node.removeAttribute(attrName);\n        ImmutableNode node = createDefaultNode(VALUE);\n        Collection<ImmutableNode> newChildren =\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode node2 = node.replaceChildren(newChildren);\n        ImmutableNode node = createDefaultNode(VALUE);\n        ImmutableNode node2 = node.replaceChildren(null);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java": "        InMemoryNodeModel model = new InMemoryNodeModel();\n        ImmutableNode root = model.getRootNode();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeAddData<ImmutableNode> addData =\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        String[] locations = {\n        ImmutableNode nodeLocs = nodeForKey(model, \"Homer/Ilias/locations\");\n        for (ImmutableNode c : nodeLocs.getChildren())\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeAddData<ImmutableNode> addData =\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        ImmutableNode node = nodeForKey(model, \"Homer/work\");\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeAddData<ImmutableNode> addData =\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        String[] locations = {\n        String[] path = {\n        ImmutableNode node =\n    private static void checkPathToRoot(InMemoryNodeModel model,\n            ImmutableNode node, String... path)\n        NodeHandler<ImmutableNode> handler = model.getNodeHandler();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeAddData<ImmutableNode> addData =\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        ImmutableNode node = nodeForKey(model, \"Homer/Ilias/scenes/scene\");\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeAddData<ImmutableNode> addData =\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        ImmutableNode node = nodeForKey(model, \"Shakespeare/dateOfBirth\");\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeAddData<ImmutableNode> addData =\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        ImmutableNode node = nodeForKey(model, \"Shakespeare/The Tempest\");\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        QueryResult<ImmutableNode> result =\n        List<QueryResult<ImmutableNode>> removed = model.clearTree(KEY, resolver);\n        ImmutableNode node = nodeForKey(model, \"Homer/Ilias\");\n        for (ImmutableNode c : node.getChildren())\n    private void checkClearTreeUpdatedParentMapping(String pathToRemove,\n            ImmutableNode nodeToCheck)\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        QueryResult<ImmutableNode> result =\n        catch (IllegalArgumentException iaex)\n        String path = \"Homer/Ilias/Achilles\";\n        String path = \"Homer/Ilias\";\n        String[] path = {\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        QueryResult<ImmutableNode> result =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        ImmutableNode node = nodeForKey(model, \"Homer/Ilias\");\n        List<QueryResult<ImmutableNode>> results =\n        for (ImmutableNode child : node.getChildren())\n        for (ImmutableNode child : model.getRootNode().getChildren())\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        ImmutableNode child =\n        ImmutableNode root =\n        InMemoryNodeModel model = new InMemoryNodeModel(root);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n        QueryResult<ImmutableNode> result = QueryResult.createAttributeResult(\n        List<QueryResult<ImmutableNode>> removed = model.clearTree(KEY, resolver);\n        ImmutableNode node = nodeForKey(model, nodeName);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n        ImmutableNode orgNode = nodeForKey(model, nodeName);\n        List<QueryResult<ImmutableNode>> results =\n        catch (NoSuchElementException nex)\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_PERSONAE_TREE);\n        TreeData treeDataOld = model.getTreeData();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        List<QueryResult<ImmutableNode>> results =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n                            ImmutableNode addParent = nodeForKey(model, key);\n        ImmutableNode orgNode = nodeForKey(ROOT_AUTHORS_TREE, key);\n        ImmutableNode changedNode = nodeForKey(model, key);\n        Map<ImmutableNode, ImmutableNode> replacementMapping =\n                        ImmutableNode addParent =\n        Thread[] threads = new Thread[threadCount];\n                    catch (InterruptedException iex)\n        for (Thread t : threads)\n        Pattern patternAuthorName =\n        Set<Integer> indices = new HashSet<>();\n            ImmutableNode node = nodeForKey(model, \"author(\" + i + \")/name\");\n            Matcher m =\n            int idx = Integer.parseInt(m.group(1));\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        ImmutableNode node = nodeForKey(model, nodeKey);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        ImmutableNode node = nodeForKey(model, nodeKey);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        TreeData treeDataOld = model.getTreeData();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeAddData<ImmutableNode> addData =\n        NodeUpdateData<ImmutableNode> updateData =\n        InMemoryNodeModel model = new InMemoryNodeModel(ROOT_AUTHORS_TREE);\n        ImmutableNode node = nodeForKey(model, \"Homer/work\");\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        NodeUpdateData<ImmutableNode> updateData =\n        ImmutableNode node = nodeForKey(model, nodeKey);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        Map<QueryResult<ImmutableNode>, Object> changedValues =\n        ImmutableNode changedNode = nodeForKey(model, nodeKey);\n        NodeUpdateData<ImmutableNode> updateData =\n        ImmutableNode node = nodeForKey(model, nodeKey);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        ImmutableNode newWork1 =\n        ImmutableNode newWork2 =\n        ImmutableNode node = nodeForKey(model, key);\n        int size = node.getChildren().size();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        ImmutableNode personaNode =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        ImmutableNode newNode =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        ImmutableNode newNode =\n    private void checkAddNodesNoNodes(Collection<ImmutableNode> newNodes)\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        InMemoryNodeModel model =\n        InMemoryNodeModel model =\n        ImmutableNode node = nodeForKey(model, \"Homer/Ilias\");\n        InMemoryNodeModel model =\n        ImmutableNode rootNode = model.getRootNode();\n        InMemoryNodeModel model =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelReferences.java": "        Map<ImmutableNode, String> references = createReferences();\n        Collection<ImmutableNode> nodes =\n        Map<ImmutableNode, String> refs = new HashMap<>();\n        for (ImmutableNode node : nodes)\n    private Collection<ImmutableNode> collectNodes(ImmutableNode root)\n                    public void visitBeforeChildren(ImmutableNode node,\n                            NodeHandler<ImmutableNode> handler)\n        ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        Collection<ImmutableNode> nodes = collectNodes(handler.getRootNode());\n        for (ImmutableNode node : nodes)\n        ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        List<Object> removedRefs = handler.removedReferences();\n        int authorIdx = 2;\n        ReferenceNodeHandler handler = model.getReferenceNodeHandler();\n        List<Object> removedRefs = handler.removedReferences();\n        ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", \"test\");\n        ImmutableNode root = model.getNodeHandler().getRootNode();\n        ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", null);\n        ImmutableNode root = model.getNodeHandler().getRootNode();\n        ImmutableNode node =\n        ImmutableNode root = model.getNodeHandler().getRootNode();\n        ImmutableNode node = NodeStructureHelper.createNode(\"newNode\", null);\n        ReferenceNodeHandler refHandler = model.getReferenceNodeHandler();\n        ImmutableNode checkNode =\n        NodeSelector selector = new NodeSelector(\"Simmons.Hyperion\");\n        ImmutableNode trackedNode = model.getTrackedNode(selector);\n        ImmutableNode node = model.getTrackedNode(selector);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java": "    private static NodeKeyResolver<ImmutableNode> createResolver(boolean replay)\n        NodeKeyResolver<ImmutableNode> resolver =\n        ImmutableNode node =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        ImmutableNode node = model.getTrackedNode(selector);\n        ImmutableNode node =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n    private void initDetachedNode(NodeKeyResolver<ImmutableNode> resolver)\n        ImmutableNode node =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        ImmutableNode node =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        catch (ConfigurationRuntimeException crex)\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n    private static void checkForRemovedField(ImmutableNode nodeFields, int idx)\n        Set<String> expectedNames = new HashSet<>();\n        Set<String> actualNames = new HashSet<>();\n        for (ImmutableNode field : nodeFields.getChildren())\n            ImmutableNode nodeName = field.getChildren().get(0);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        ImmutableNode nodeFields = fieldsNodeFromModel();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        ImmutableNode rootNode = model.getRootNode();\n        ImmutableNode nodeFields = fieldsNodeFromTrackedNode();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        ImmutableNode nodeFields = fieldsNodeFromModel();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        ImmutableNode rootNode = model.getRootNode();\n        ImmutableNode nodeFields = fieldsNodeFromTrackedNode();\n    private static void checkForAddedField(ImmutableNode nodeFields)\n        ImmutableNode nodeField =\n    private static void checkFieldNode(ImmutableNode nodeField, String name)\n        ImmutableNode nodeName = nodeField.getChildren().get(0);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        ImmutableNode rootNode = model.getRootNode();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        ImmutableNode rootNode = model.getRootNode();\n            NodeKeyResolver<ImmutableNode> resolver)\n                        ImmutableNode root =\n                        String key = (String) EasyMock.getCurrentArguments()[1];\n                        TreeData handler =\n                        List<QueryResult<ImmutableNode>> results =\n    private static void checkedForChangedField(ImmutableNode nodeFields, int idx)\n        for (ImmutableNode field : nodeFields.getChildren())\n            String expName =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        ImmutableNode rootNode = model.getRootNode();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        ImmutableNode node = model.getTrackedNode(selector);\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeHandler<ImmutableNode> handler =\n        TrackedNodeHandler tnh = (TrackedNodeHandler) handler;\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeHandler<ImmutableNode> handler =\n        ImmutableNode newNode =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver();\n    private void expectNodeKey(NodeKeyResolver<ImmutableNode> resolver,\n            ImmutableNode node, String key)\n        Map<ImmutableNode, String> cache = new HashMap<>();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        String nodeKey1 = \"tables/table(0)\";\n        String nodeKey2 = \"tables/table(1)\";\n        ImmutableNode node1 = NodeStructureHelper.nodeForKey(root, nodeKey1);\n        ImmutableNode node2 = NodeStructureHelper.nodeForKey(root, nodeKey2);\n        Collection<NodeSelector> selectors =\n        Iterator<NodeSelector> it = selectors.iterator();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        ImmutableNode node = model.getTrackedNode(selector);\n        Collection<NodeSelector> selectors =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        ImmutableNode node = NodeStructureHelper.nodeForKey(root, \"tables\");\n        String[] keys = new String[node.getChildren().size()];\n            ImmutableNode child = node.getChildren().get(i);\n        Collection<NodeSelector> selectors =\n        for (NodeSelector sel : selectors)\n    private void checkTrackChildNodesNoResult(List<ImmutableNode> queryResult)\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        TreeData oldData = model.getTreeData();\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        String childName = \"name\";\n        String parentKey = \"tables/table(0)\";\n        String childKey = parentKey + \"/\" + childName;\n        ImmutableNode node = NodeStructureHelper.nodeForKey(model, parentKey);\n        ImmutableNode child = NodeStructureHelper.nodeForKey(node, childName);\n        NodeSelector childSelector =\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        String childName = \"space\";\n        String parentKey = \"tables/table(0)\";\n        String childKey = parentKey + \"/\" + childName;\n        ImmutableNode node = NodeStructureHelper.nodeForKey(model, parentKey);\n        NodeSelector childSelector =\n        ImmutableNode child = model.getTrackedNode(childSelector);\n        ImmutableNode parent = model.getNodeHandler().getParent(child);\n            List<ImmutableNode> queryResult)\n        NodeKeyResolver<ImmutableNode> resolver = createResolver(false);\n        List<ImmutableNode> nodes =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestMergeCombiner.java": "        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n            HierarchicalConfiguration<ImmutableNode> config)\n        HierarchicalConfiguration<ImmutableNode> c =\n        NodeHandler<ImmutableNode> nodeHandler = config.getNodeModel().getNodeHandler();\n        List<QueryResult<ImmutableNode>> nds =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeAddData.java": "        NodeAddData<ImmutableNode> data =\n        NodeAddData<ImmutableNode> data =\n        List<String> pathNodes = new ArrayList<>();\n        NodeAddData<ImmutableNode> data =\n        NodeAddData<ImmutableNode> data =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeHandlerDecorator.java": "    protected NodeHandler<ImmutableNode> createHandler(ImmutableNode root)\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeNameMatchers.java": "        InMemoryNodeModel model = new InMemoryNodeModel();\n    private static ImmutableNode createNode(String name)\n        ImmutableNode node = createNode(NODE_NAME);\n        ImmutableNode node = createNode(NODE_NAME);\n    private void checkMatcherWithNullInput(NodeMatcher<String> matcher)\n        ImmutableNode node = createNode(NODE_NAME);\n        ImmutableNode node = createNode(NODE_NAME);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeSelector.java": "        NodeKeyResolver<ImmutableNode> resolver =\n        NodeSelector selector = new NodeSelector(\"tables.table(0).name\");\n        ImmutableNode target = selector.select(root, resolver, handler);\n        NodeKeyResolver<ImmutableNode> resolverMock =\n        NodeSelector selector = new NodeSelector(KEY);\n        NodeKeyResolver<ImmutableNode> resolverMock =\n        List<QueryResult<ImmutableNode>> results =\n        ImmutableNode target =\n        NodeSelector selector = new NodeSelector(KEY);\n        NodeSelector selector = new NodeSelector(\"tables.table.name\");\n        NodeSelector selectorParent = new NodeSelector(\"tables.table(0)\");\n        NodeSelector selector =\n        ImmutableNode target = selector.select(root, resolver, handler);\n        NodeSelector selectorParent = new NodeSelector(\"tables.unknown\");\n        NodeSelector selector =\n        NodeSelector selectorParent = new NodeSelector(\"tables.table\");\n        NodeSelector selector =\n        NodeSelector first = new NodeSelector(\"tables.table\");\n        NodeSelector second = first.subSelector(\"fields\");\n        int fldIdx = NodeStructureHelper.fieldsLength(1) - 1;\n        NodeSelector selector =\n        ImmutableNode target = selector.select(root, resolver, handler);\n        NodeSelector selector = new NodeSelector(KEY);\n        NodeSelector sel2 = new NodeSelector(KEY);\n        NodeSelector sub1 = selector.subSelector(\"k2\");\n        NodeSelector sub2 = sel2.subSelector(\"k2\");\n        NodeSelector selector = new NodeSelector(KEY);\n        NodeSelector selector = new NodeSelector(KEY);\n        NodeSelector selector = new NodeSelector(KEY).subSelector(key2);\n        String s = selector.toString();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeTreeWalker.java": "    private static String visitAfterName(String name)\n        ConfigurationNodeVisitor<ImmutableNode> visitor = visitorMock();\n        NodeHandler<ImmutableNode> handler = handlerMock();\n        List<String> expected = expectDFS();\n        TestVisitor visitor = new TestVisitor();\n        List<String> expected = new LinkedList<>();\n                    String persona =\n        TestVisitor visitor = new TestVisitor();\n        ConfigurationNodeVisitor<ImmutableNode> visitor = visitorMock();\n        NodeHandler<ImmutableNode> handler = handlerMock();\n        List<String> expected = expectBFS();\n        TestVisitor visitor = new TestVisitor();\n        List<String> expected = new LinkedList<>();\n        List<String> works = new LinkedList<>();\n        List<String> personae = new LinkedList<>();\n        TestVisitor visitor = new TestVisitor();\n        public void setMaxNodeCount(int maxNodeCount)\n        public void visitBeforeChildren(ImmutableNode node,\n                NodeHandler<ImmutableNode> handler)\n        public void visitAfterChildren(ImmutableNode node,\n                NodeHandler<ImmutableNode> handler)\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeUpdateData.java": "        NodeUpdateData<Object> data =\n    private static QueryResult<Object> result(Object value)\n        Map<QueryResult<Object>, Object> map =\n        NodeUpdateData<Object> data =\n        Map<QueryResult<Object>, Object> changedValues =\n        Collection<Object> col = new LinkedList<>();\n        NodeUpdateData<Object> data =\n        Collection<Object> newValues = data.getNewValues();\n        Collection<QueryResult<Object>> col =\n        NodeUpdateData<Object> data =\n        Collection<QueryResult<Object>> removedNodes = data.getRemovedNodes();\n        Map<QueryResult<Object>, Object> map =\n        NodeUpdateData<Object> data =\n        Collection<Object> col = new LinkedList<>();\n        NodeUpdateData<Object> data =\n        Collection<QueryResult<Object>> col =\n        NodeUpdateData<Object> data =\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java": "        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n    private ImmutableNode checkTable(BaseHierarchicalConfiguration config)\n        HierarchicalConfiguration<ImmutableNode> c = config\n        NodeHandler<ImmutableNode> nodeHandler = config.getNodeModel().getNodeHandler();\n        List<QueryResult<ImmutableNode>> nds =\n        PropertiesConfiguration c1 = new PropertiesConfiguration();\n        PropertiesConfiguration c2 = new PropertiesConfiguration();\n        CombinedConfiguration config = new CombinedConfiguration(new OverrideCombiner());\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestQueryResult.java": "        QueryResult<ImmutableNode> result =\n        QueryResult<ImmutableNode> result =\n        QueryResult<ImmutableNode> result =\n        QueryResult<ImmutableNode> result =\n        QueryResult<ImmutableNode> nodeRes =\n        QueryResult<ImmutableNode> attrRes =\n        QueryResult<ImmutableNode> result =\n        QueryResult<ImmutableNode> result =\n        QueryResult<ImmutableNode> result =\n        String s = result.toString();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeHandler.java": "        ImmutableNode node = new ImmutableNode.Builder().name(\"node\").create();\n        ImmutableNode parent = new ImmutableNode.Builder().name(\"parent\").create();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeModel.java": "        ImmutableNode root = NodeStructureHelper.createNode(\"root\", null);\n        TrackedNodeModel model = setUpModel();\n        NodeHandler<ImmutableNode> handler = expectGetNodeHandler();\n        Iterable<?> values = EasyMock.createMock(Iterable.class);\n        List<ImmutableNode> nodes =\n        QueryResult<ImmutableNode> result =\n        List<QueryResult<ImmutableNode>> removed =\n        TrackedNodeModel model = setUpModel();\n        NodeHandler<ImmutableNode> handler = expectGetNodeHandler();\n        ImmutableNode root = NodeStructureHelper.createNode(\"Root\", null);\n        TrackedNodeModel model = setUpModel();\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestTreeData.java": "    protected NodeHandler<ImmutableNode> createHandler(ImmutableNode root)\n        InMemoryNodeModel model = new InMemoryNodeModel(root);\n",
            "src/test/java/org/apache/commons/configuration2/tree/TestUnionCombiner.java": "        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n        BaseHierarchicalConfiguration config = createCombinedConfiguration();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/AbstractXPathTest.java": "    protected ImmutableNode constructHierarchy(int levels)\n        ImmutableNode.Builder resultBuilder = new ImmutableNode.Builder();\n    protected int iteratorSize(NodeIterator iterator)\n    protected List<NodePointer> iterationElements(NodeIterator iterator)\n        List<NodePointer> result = new ArrayList<>();\n    private void createLevel(ImmutableNode.Builder parentBuilder, String value,\n            int level)\n            String prefix = (value == null) ? \"\" : value + \".\";\n                ImmutableNode.Builder childBuilder =\n                String currentValue = prefix + i;\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationAttributePointer.java": "        ImmutableNode.Builder ndBuilder = new ImmutableNode.Builder();\n        ImmutableNode nd = ndBuilder.create();\n        Object node = pointer.getImmediateNode();\n        QueryResult<?> proxy = (QueryResult<?>) node;\n        QName name = pointer.getName();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationIteratorAttributes.java": "        ImmutableNode orgNode = root.getChildren().get(1);\n        ImmutableNode testNode =\n        ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        List<NodePointer> attrs = iterationElements(it);\n        Set<String> attrNames = new HashSet<>();\n        for (NodePointer np : attrs)\n        ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n        ConfigurationNodeIteratorAttribute<ImmutableNode> it =\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodeIteratorChildren.java": "            ImmutableNode node)\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        NodeNameTest test = new NodeNameTest(new QName(null, \"*\"));\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        NodeNameTest test = new NodeNameTest(new QName(\"prefix\", \"*\"));\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        NodeNameTest test = new NodeNameTest(new QName(null, CHILD_NAME2));\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        for (NodePointer nd : iterationElements(it))\n        NodeTest test = new ProcessingInstructionTest(\"test\");\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        NodeTypeTest test = new NodeTypeTest(Compiler.NODE_TYPE_NODE);\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        NodeTypeTest test = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        ConfigurationNodePointer<ImmutableNode> childPointer =\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        List<NodePointer> nodes = iterationElements(it);\n        for (NodePointer np : nodes)\n            ImmutableNode node = (ImmutableNode) np.getImmediateNode();\n        ConfigurationNodePointer<ImmutableNode> childPointer =\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n            ImmutableNode node = (ImmutableNode) it.getNodePointer().getNode();\n        ConfigurationNodePointer<ImmutableNode> childPointer =\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        ImmutableNode node = (ImmutableNode) it.getNodePointer().getNode();\n        ImmutableNode node =\n        NodeNameTest test = new NodeNameTest(new QName(PREFIX, \"*\"));\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        for (NodePointer p : iterationElements(it))\n        NodeNameTest test = new NodeNameTest(new QName(PREFIX, PREFIX_NODE));\n        ConfigurationNodeIteratorChildren<ImmutableNode> it =\n        for (NodePointer p : iterationElements(it))\n    private void checkValues(NodeIterator iterator, int... expectedIndices)\n        List<NodePointer> nodes = iterationElements(iterator);\n            ImmutableNode child = (ImmutableNode) nodes.get(i).getImmediateNode();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointer.java": "        NodePointer p1 = new ConfigurationNodePointer<>(\n        NodePointer p2 = new ConfigurationNodePointer<>(\n        ImmutableNode n1 = new ImmutableNode.Builder().name(\"n1\").create();\n        ImmutableNode n2 = new ImmutableNode.Builder().name(\"n2\").create();\n        NodePointer p1 =\n        NodePointer p2 =\n        ImmutableNode leafNode =\n    private void checkIterators(NodePointer p)\n        ImmutableNode node = (ImmutableNode) p.getNode();\n            NodePointer pchild = it.getNodePointer();\n            NodePointer pattr = it.getNodePointer();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointerFactory.java": "        for (Object result : results) {\n            ImmutableNode node = (ImmutableNode) result;\n        List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME1 + \"[1]/*\");\n        for (Iterator<?> it = nodes.iterator(); it.hasNext(); index++)\n            ImmutableNode node = (ImmutableNode) it.next();\n        List<?> nodes = context.selectNodes(\"//\" + CHILD_NAME2\n        List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME2 + \"/parent::*\");\n        List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME1\n        ImmutableNode node = (ImmutableNode) nodes.get(0);\n        List<?> nodes = context.selectNodes(\"/\" + CHILD_NAME1\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathContextFactory.java": "        ImmutableNode node =\n        NodeHandler<ImmutableNode> handler =\n        JXPathContext context = factory.createContext(node, handler);\n        ConfigurationNodePointerFactory.NodeWrapper<?> wrapper =\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngine.java": "    private JXPathContext expectSelect(Object... results)\n        JXPathContext ctx = EasyMock.createMock(JXPathContext.class);\n    private XPathExpressionEngine setUpEngine(JXPathContext ctx)\n        XPathContextFactory factory =\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        JXPathContext ctx = expectSelect(root);\n        XPathExpressionEngine engine = setUpEngine(ctx);\n        List<QueryResult<ImmutableNode>> result =\n        QueryResult<ImmutableNode> attrResult =\n        JXPathContext ctx = expectSelect(attrResult);\n        XPathExpressionEngine engine = setUpEngine(ctx);\n        List<QueryResult<ImmutableNode>> result =\n        JXPathContext ctx = expectSelect();\n        XPathExpressionEngine engine = setUpEngine(ctx);\n    private void checkEmptyKey(String key)\n        XPathContextFactory factory =\n        XPathExpressionEngine engine = new XPathExpressionEngine(factory);\n        List<QueryResult<ImmutableNode>> results =\n        NodePointerFactory[] factories =\n        for (NodePointerFactory factory : factories)\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        JXPathContext ctx = expectSelect(root);\n        XPathExpressionEngine engine = setUpEngine(ctx);\n        NodeAddData<ImmutableNode> data =\n        JXPathContext ctx = expectSelect(root);\n        XPathExpressionEngine engine = setUpEngine(ctx);\n        NodeAddData<ImmutableNode> data =\n        JXPathContext ctx = expectSelect(root);\n        XPathExpressionEngine engine = setUpEngine(ctx);\n        NodeAddData<ImmutableNode> data =\n        JXPathContext ctx = expectSelect(root);\n        XPathExpressionEngine engine = setUpEngine(ctx);\n        NodeAddData<ImmutableNode> data =\n        JXPathContext ctx = expectSelect(root);\n        XPathExpressionEngine engine = setUpEngine(ctx);\n        NodeAddData<ImmutableNode> data =\n        JXPathContext ctx = expectSelect(root);\n        XPathExpressionEngine engine = setUpEngine(ctx);\n        NodeAddData<ImmutableNode> data =\n        JXPathContext ctx = expectSelect();\n        XPathExpressionEngine engine = setUpEngine(ctx);\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n    private void checkInvalidAddPath(String path)\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        QueryResult<ImmutableNode> res = QueryResult.createNodeResult(root);\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        QueryResult<ImmutableNode> result =\n    private static void checkAddPath(NodeAddData<ImmutableNode> data,\n            boolean attr, String... expected)\n        List<String> path = data.getPathNodes();\n        Iterator<String> it = path.iterator();\n        ImmutableNode.Builder parentBuilder = new ImmutableNode.Builder(2);\n        ImmutableNode c1 = new ImmutableNode.Builder().name(\"child\").create();\n        ImmutableNode c2 =\n        ImmutableNode parent = parentBuilder.create();\n        NodeHandler<ImmutableNode> testHandler =\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        ImmutableNode.Builder parentBuilder = new ImmutableNode.Builder(3);\n        ImmutableNode c1 = new ImmutableNode.Builder().name(\"child\").create();\n        ImmutableNode c2 = new ImmutableNode.Builder().name(\"child\").create();\n        ImmutableNode c3 =\n        ImmutableNode parent = parentBuilder.create();\n        NodeHandler<ImmutableNode> testHandler =\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        ImmutableNode.Builder parentBuilder = new ImmutableNode.Builder(1);\n        ImmutableNode c1 = new ImmutableNode.Builder().name(\"child\").create();\n        ImmutableNode parent = parentBuilder.addChild(c1).create();\n        NodeHandler<ImmutableNode> testHandler =\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n        XPathExpressionEngine engine = new XPathExpressionEngine();\n",
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngineInConfig.java": "        String xml =\n        FileHandler handler = new FileHandler(config);\n        for (Iterator<String> it = config.getKeys(); it.hasNext();)\n            String key = it.next();\n",
            "src/test/java/org/apache/commons/configuration2/web/TestAppletConfiguration.java": "        catch (Exception ex)\n            Applet applet = new Applet()\n                public String getParameter(String key)\n            catch (UnsupportedOperationException e)\n            catch (UnsupportedOperationException e)\n",
            "src/test/java/org/apache/commons/configuration2/web/TestServletConfiguration.java": "        Servlet servlet = new HttpServlet() {\n        ServletConfiguration servletConfiguration = new ServletConfiguration(servlet);\n",
            "src/test/java/org/apache/commons/configuration2/web/TestServletContextConfiguration.java": "        ServletContext context = new MockServletContext()\n            public String getInitParameter(String key)\n        Servlet servlet = new HttpServlet()\n        ServletContextConfiguration resultConfig = new ServletContextConfiguration(servlet);\n        ServletContext context = new MockServletContext()\n",
            "src/test/java/org/apache/commons/configuration2/web/TestServletFilterConfiguration.java": "        MockFilterConfig config = new MockFilterConfig();\n        ServletFilterConfiguration resultConfig = new ServletFilterConfiguration(config);\n        public String getInitParameter(String key)\n        public void setInitParameter(String key, String value)\n",
            "src/test/java/org/apache/commons/configuration2/web/TestServletRequestConfiguration.java": "        ServletRequest request = new MockHttpServletRequest()\n            public String getParameter(String key)\n        ServletRequest request = new MockHttpServletRequest()\n            public String[] getParameterValues(String key)\n        ServletRequestConfiguration config = new ServletRequestConfiguration(request);\n        String[] values = { \"test1\", \"test2\\\\,test3\", \"test4\\\\,test5\" };\n        String listKey = \"test.list\";\n        BaseConfiguration config = new BaseConfiguration();\n        Configuration c = createConfiguration(config);\n        List<?> v = c.getList(listKey);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/apache/commons/configuration2/AbstractConfiguration.java": [
                177,
                213,
                234,
                271,
                286,
                287,
                289,
                313,
                320,
                321,
                345,
                350,
                351,
                379,
                384,
                385,
                400,
                435,
                438,
                439,
                440,
                470,
                484,
                485,
                487,
                522,
                541,
                562,
                576,
                591,
                615,
                649,
                682,
                703,
                728,
                730,
                752,
                754,
                767,
                769,
                774,
                780,
                786,
                812,
                834,
                887,
                890,
                897,
                951,
                986,
                997,
                1079,
                1091,
                1117,
                1137,
                1142,
                1147,
                1148,
                1150,
                1153,
                1154,
                1172,
                1174,
                1179,
                1196,
                1202,
                1204,
                1209,
                1215,
                1221,
                1223,
                1228,
                1234,
                1240,
                1242,
                1247,
                1253,
                1259,
                1261,
                1266,
                1272,
                1278,
                1280,
                1285,
                1291,
                1297,
                1299,
                1304,
                1310,
                1320,
                1326,
                1336,
                1342,
                1352,
                1358,
                1360,
                1372,
                1380,
                1394,
                1396,
                1422,
                1424,
                1433,
                1439,
                1441,
                1452,
                1455,
                1484,
                1494,
                1500,
                1516,
                1522,
                1533,
                1535,
                1544,
                1545,
                1556,
                1557,
                1559,
                1565,
                1585,
                1605,
                1612,
                1614,
                1615,
                1643,
                1650,
                1652,
                1653,
                1682,
                1687,
                1689,
                1704,
                1718,
                1736,
                1738,
                1739,
                1757,
                1759,
                1766,
                1787,
                1788,
                1795,
                1823,
                1839,
                1862,
                1863,
                1894,
                1909
            ],
            "src/main/java/org/apache/commons/configuration2/AbstractHierarchicalConfiguration.java": [
                191,
                224,
                271,
                284,
                286,
                292,
                293,
                294,
                296,
                319,
                333,
                344,
                367,
                397,
                425,
                437,
                446,
                447,
                457,
                459,
                460,
                461,
                475,
                476,
                488,
                489,
                491,
                492,
                493,
                534,
                536,
                546,
                548,
                575,
                581,
                602,
                616,
                653,
                654,
                672,
                674,
                681,
                682,
                684,
                688,
                710,
                732,
                761,
                787,
                789,
                799,
                801,
                827,
                864,
                910,
                931,
                941,
                943,
                945,
                961,
                962,
                964
            ],
            "src/main/java/org/apache/commons/configuration2/AbstractYAMLBasedConfiguration.java": [
                61,
                74,
                76,
                87,
                89,
                90,
                92,
                108,
                109,
                111,
                125,
                142,
                143,
                168,
                170,
                171,
                173,
                175,
                191,
                193,
                194,
                207
            ],
            "src/main/java/org/apache/commons/configuration2/BaseConfiguration.java": [
                65,
                67,
                84,
                100,
                126,
                137,
                183,
                189,
                202,
                211
            ],
            "src/main/java/org/apache/commons/configuration2/BaseConfigurationXMLReader.java": [
                52,
                73,
                117,
                132
            ],
            "src/main/java/org/apache/commons/configuration2/BaseHierarchicalConfiguration.java": [
                77,
                88,
                124,
                129,
                136,
                141,
                177,
                179,
                183,
                227,
                228,
                268,
                284,
                286,
                302,
                318,
                320,
                334,
                335,
                337,
                340,
                357,
                359,
                360,
                366,
                382,
                384,
                396,
                398,
                409,
                421,
                434,
                446,
                459,
                462,
                464,
                478,
                496,
                509,
                521,
                539,
                540,
                543,
                559,
                566,
                579,
                593,
                605,
                626,
                646,
                647,
                651,
                676,
                678,
                680,
                698,
                700,
                712,
                735,
                737,
                784,
                785,
                787,
                800,
                801,
                803,
                805,
                822,
                839,
                841,
                888,
                889,
                897,
                909,
                910,
                914,
                924,
                957,
                958,
                972,
                973,
                975,
                976,
                978,
                980,
                995,
                1016,
                1017,
                1018,
                1021,
                1023,
                1042,
                1043,
                1045,
                1057
            ],
            "src/main/java/org/apache/commons/configuration2/CombinedConfiguration.java": [
                232,
                277,
                333,
                362,
                363,
                382,
                412,
                424,
                456,
                461,
                477,
                500,
                502,
                526,
                527,
                545,
                565,
                567,
                584,
                586,
                644,
                678,
                680,
                717,
                724,
                729,
                730,
                757,
                762,
                763,
                765,
                767,
                793,
                825,
                843,
                899,
                908,
                909,
                923,
                925,
                926,
                929,
                949,
                964,
                981,
                1029,
                1087,
                1097,
                1099,
                1100,
                1117,
                1118,
                1119,
                1124,
                1150,
                1170,
                1177,
                1178
            ],
            "src/main/java/org/apache/commons/configuration2/CompositeConfiguration.java": [
                109,
                122,
                135,
                136,
                142,
                154,
                174,
                222,
                241,
                273,
                333,
                346,
                349,
                368,
                369,
                371,
                381,
                383,
                384,
                386,
                398,
                410,
                412,
                419,
                421,
                432,
                434,
                437,
                440,
                458,
                468,
                470,
                473,
                489,
                536,
                543,
                555,
                568,
                601,
                609,
                630,
                649,
                650,
                652,
                657
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java": [
                54,
                69,
                71,
                86,
                88,
                89,
                100,
                128,
                139,
                151
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationLookup.java": [
                49,
                75
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationMap.java": [
                52,
                90,
                92,
                93,
                107,
                128,
                146,
                148,
                186,
                199
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java": [
                78,
                79,
                85,
                109,
                121,
                133,
                135,
                137,
                138,
                159,
                172,
                174,
                187,
                206,
                208,
                210,
                229,
                248,
                250,
                252,
                271,
                287,
                316,
                325,
                333,
                358,
                369,
                387,
                393,
                412,
                418,
                421,
                427,
                431,
                459,
                474,
                483,
                503,
                514,
                533,
                541,
                549,
                569,
                575,
                600,
                620,
                636,
                659,
                660
            ],
            "src/main/java/org/apache/commons/configuration2/ConfigurationXMLReader.java": [
                83,
                97,
                109,
                121,
                143,
                166,
                188,
                210,
                222,
                235,
                254,
                265,
                271,
                274,
                286,
                294,
                306,
                312,
                315
            ],
            "src/main/java/org/apache/commons/configuration2/DataConfiguration.java": [
                124,
                151,
                157,
                163,
                182,
                188,
                194,
                216,
                233,
                249,
                266,
                281,
                298,
                314,
                331,
                346,
                363,
                379,
                396,
                412,
                429,
                445,
                462,
                477,
                494,
                510,
                527,
                542,
                559,
                575,
                592,
                608,
                625,
                641,
                658,
                673,
                690,
                706,
                723,
                738,
                755,
                771,
                788,
                802,
                819,
                834,
                850,
                865,
                882,
                896,
                913,
                928,
                945,
                960,
                976,
                993,
                1009,
                1011,
                1040,
                1059,
                1072,
                1090,
                1110,
                1129,
                1155,
                1173,
                1192,
                1211,
                1236,
                1253,
                1255,
                1284,
                1303,
                1329,
                1347,
                1367,
                1386,
                1412,
                1430,
                1449,
                1468,
                1501,
                1518,
                1533,
                1550,
                1566,
                1583,
                1597,
                1614,
                1629,
                1646,
                1662,
                1679,
                1692,
                1729
            ],
            "src/main/java/org/apache/commons/configuration2/DatabaseConfiguration.java": [
                184,
                204,
                225,
                245,
                265,
                285,
                307,
                325,
                332,
                336,
                339,
                341,
                378,
                393,
                420,
                422,
                446,
                453,
                460,
                477,
                484,
                491,
                513,
                566,
                600,
                609,
                621,
                633,
                651,
                668,
                670,
                714,
                715,
                746,
                780,
                786,
                812,
                813,
                815,
                818,
                841,
                842
            ],
            "src/main/java/org/apache/commons/configuration2/DynamicCombinedConfiguration.java": [
                104,
                125,
                139,
                166,
                193,
                194,
                199,
                243,
                248,
                265,
                308,
                310,
                325,
                354,
                359,
                373,
                388,
                394,
                400,
                406,
                412,
                418,
                424,
                430,
                436,
                442,
                448,
                454,
                460,
                466,
                472,
                478,
                484,
                490,
                496,
                502,
                508,
                520,
                526,
                532,
                538,
                544,
                550,
                556,
                562,
                568,
                574,
                580,
                586,
                592,
                598,
                616,
                625,
                637,
                643,
                649,
                655,
                661,
                667,
                674,
                709,
                721,
                729,
                730,
                732,
                741,
                743,
                753,
                791,
                802,
                804,
                823,
                825,
                866,
                920,
                930,
                951,
                974,
                1004,
                1067,
                1088
            ],
            "src/main/java/org/apache/commons/configuration2/EnvironmentConfiguration.java": [
                64,
                76
            ],
            "src/main/java/org/apache/commons/configuration2/FindNodeVisitor.java": [
                45,
                51
            ],
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationConverter.java": [
                60,
                64,
                65,
                68,
                70,
                72,
                78,
                81,
                122,
                124,
                125,
                146,
                148,
                149,
                170,
                171,
                173,
                174,
                193,
                197,
                198
            ],
            "src/main/java/org/apache/commons/configuration2/HierarchicalConfigurationXMLReader.java": [
                68,
                89,
                111,
                133,
                145,
                150,
                176,
                178,
                180,
                182,
                202,
                204
            ],
            "src/main/java/org/apache/commons/configuration2/INIConfiguration.java": [
                274,
                306,
                328,
                330,
                337,
                351,
                383,
                385,
                386,
                387,
                390,
                403,
                404,
                406,
                424,
                425,
                426,
                438,
                451,
                484,
                485,
                487,
                490,
                504,
                533,
                535,
                541,
                545,
                549,
                553,
                630,
                632,
                648,
                675,
                690,
                711,
                717,
                718,
                742,
                765,
                777,
                783,
                804,
                820,
                837,
                844,
                896,
                906,
                910,
                911,
                924,
                925,
                927,
                929,
                940,
                961,
                962,
                973,
                975,
                980,
                981,
                983,
                989,
                991,
                998,
                1000,
                1006,
                1007,
                1009,
                1031,
                1038
            ],
            "src/main/java/org/apache/commons/configuration2/ImmutableConfigurationInvocationHandler.java": [
                62,
                77,
                84,
                99,
                123
            ],
            "src/main/java/org/apache/commons/configuration2/JNDIConfiguration.java": [
                80,
                91,
                103,
                122,
                123,
                135,
                136,
                137,
                140,
                151,
                194,
                197,
                199,
                204,
                207,
                220,
                225,
                243,
                251,
                261,
                262,
                263,
                267,
                311,
                328,
                339,
                364,
                369,
                391,
                418,
                423,
                428,
                445,
                482
            ],
            "src/main/java/org/apache/commons/configuration2/JSONConfiguration.java": [
                69,
                75,
                79,
                82,
                89,
                102,
                106,
                109
            ],
            "src/main/java/org/apache/commons/configuration2/MapConfiguration.java": [
                106,
                124,
                160,
                166,
                168,
                171,
                178,
                180,
                195,
                210,
                216,
                245,
                253,
                270
            ],
            "src/main/java/org/apache/commons/configuration2/PatternSubtreeConfigurationWrapper.java": [
                70,
                79,
                91,
                97,
                103,
                109,
                115,
                121,
                127,
                133,
                139,
                145,
                151,
                157,
                163,
                169,
                175,
                181,
                187,
                193,
                199,
                205,
                211,
                223,
                229,
                235,
                241,
                247,
                253,
                259,
                265,
                271,
                277,
                283,
                289,
                295,
                301,
                313,
                319,
                331,
                344,
                350,
                356,
                362,
                368,
                375,
                387,
                388,
                395,
                402,
                420,
                426,
                438,
                446,
                471
            ],
            "src/main/java/org/apache/commons/configuration2/PrefixedKeysIterator.java": [
                54,
                118
            ],
            "src/main/java/org/apache/commons/configuration2/PropertiesConfiguration.java": [
                301,
                312,
                352,
                392,
                423,
                435,
                492,
                511,
                526,
                539,
                552,
                576,
                586,
                588,
                613,
                615,
                627,
                678,
                698,
                744,
                817,
                819,
                834,
                848,
                862,
                874,
                885,
                887,
                889,
                941,
                943,
                967,
                1004,
                1030,
                1054,
                1067,
                1080,
                1100,
                1101,
                1108,
                1116,
                1146,
                1161,
                1163,
                1167,
                1192,
                1216,
                1290,
                1296,
                1297,
                1313,
                1319,
                1320,
                1321,
                1326,
                1338,
                1344,
                1422,
                1437,
                1449,
                1462,
                1464,
                1484,
                1486
            ],
            "src/main/java/org/apache/commons/configuration2/PropertiesConfigurationLayout.java": [
                156,
                181,
                195,
                210,
                223,
                236,
                250,
                274,
                289,
                315,
                327,
                343,
                368,
                380,
                401,
                431,
                455,
                478,
                482,
                492,
                502,
                504,
                523,
                541,
                545,
                560,
                575,
                585,
                598,
                604,
                606,
                634,
                669,
                684,
                686,
                695,
                717,
                756,
                762,
                782,
                807,
                809,
                811,
                828,
                847,
                848,
                895,
                915,
                926,
                946,
                984,
                999,
                1007
            ],
            "src/main/java/org/apache/commons/configuration2/StrictConfigurationComparator.java": [
                50,
                61,
                63,
                64,
                71,
                73,
                74
            ],
            "src/main/java/org/apache/commons/configuration2/SubnodeConfiguration.java": [
                126,
                127,
                187,
                223,
                234,
                255
            ],
            "src/main/java/org/apache/commons/configuration2/SubsetConfiguration.java": [
                53,
                66,
                87,
                103,
                116,
                148,
                154,
                166,
                172,
                178,
                184,
                190,
                207,
                253,
                293
            ],
            "src/main/java/org/apache/commons/configuration2/SystemConfiguration.java": [
                57,
                74,
                77,
                81,
                93,
                95,
                98,
                99
            ],
            "src/main/java/org/apache/commons/configuration2/XMLConfiguration.java": [
                260,
                279,
                299,
                341,
                375,
                417,
                449,
                479,
                494,
                518,
                529,
                549,
                551,
                555,
                556,
                557,
                559,
                563,
                587,
                588,
                589,
                591,
                592,
                594,
                595,
                600,
                603,
                604,
                606,
                608,
                611,
                613,
                625,
                635,
                655,
                656,
                658,
                670,
                672,
                673,
                677,
                680,
                704,
                705,
                706,
                707,
                723,
                724,
                734,
                738,
                767,
                769,
                781,
                783,
                787,
                810,
                812,
                841,
                853,
                862,
                883,
                912,
                913,
                915,
                920,
                935,
                937,
                938,
                943,
                961,
                977,
                994,
                1005,
                1016,
                1022,
                1023,
                1024,
                1028,
                1032,
                1047,
                1049,
                1050,
                1051,
                1064,
                1065,
                1066,
                1067,
                1069,
                1070,
                1073,
                1077,
                1081,
                1116,
                1117,
                1131,
                1144,
                1146,
                1150,
                1161,
                1162,
                1163,
                1170,
                1175,
                1203,
                1204,
                1210,
                1216,
                1222,
                1223,
                1225,
                1236,
                1249,
                1273,
                1275,
                1289,
                1290,
                1292,
                1299,
                1326,
                1331,
                1347,
                1349,
                1365,
                1369,
                1370,
                1374,
                1396
            ],
            "src/main/java/org/apache/commons/configuration2/XMLDocumentHelper.java": [
                91,
                92,
                111,
                114,
                117,
                140,
                226,
                227,
                233,
                249,
                272,
                279,
                293,
                300,
                313,
                316,
                317,
                318,
                353,
                354,
                356,
                370,
                371,
                374,
                375,
                376
            ],
            "src/main/java/org/apache/commons/configuration2/XMLListReference.java": [
                54,
                78,
                79,
                99,
                100,
                107,
                112,
                134,
                135,
                137,
                142,
                166,
                167,
                168,
                171,
                172,
                174,
                175,
                184,
                202,
                203,
                215
            ],
            "src/main/java/org/apache/commons/configuration2/XMLPropertiesConfiguration.java": [
                112,
                133,
                139,
                141,
                147,
                149,
                153,
                161,
                178,
                184,
                187,
                196,
                208,
                210,
                226,
                229,
                230,
                253,
                256,
                260,
                276,
                278,
                291,
                293,
                297,
                302,
                305,
                306,
                326,
                331,
                333,
                337,
                342,
                347,
                349,
                361,
                363,
                389,
                404,
                425
            ],
            "src/main/java/org/apache/commons/configuration2/YAMLConfiguration.java": [
                58,
                64,
                68,
                69,
                72,
                78,
                83,
                84,
                87,
                94,
                96,
                101,
                104,
                116,
                120,
                121,
                124,
                130,
                135,
                136,
                139
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/BeanHelper.java": [
                117,
                132,
                155,
                190,
                194,
                205,
                206,
                207,
                214,
                221,
                228,
                230,
                231,
                233,
                237,
                240,
                265,
                267,
                270,
                272,
                286,
                292,
                314,
                327,
                331,
                340,
                355,
                367,
                371,
                387,
                388,
                419,
                445,
                446,
                454,
                455,
                461,
                477,
                490,
                505,
                519,
                537,
                538,
                540,
                547,
                558,
                576,
                578,
                581,
                607,
                608,
                624,
                651,
                652,
                661,
                685
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/CombinedBeanDeclaration.java": [
                64,
                78,
                80,
                98,
                100,
                118,
                120,
                138,
                141,
                160,
                163,
                183,
                185
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaBean.java": [
                70,
                80,
                94,
                95,
                102,
                115,
                127,
                147,
                149,
                159,
                167,
                172,
                174,
                190,
                192,
                197,
                205,
                227,
                241,
                243
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/ConfigurationDynaClass.java": [
                53,
                64,
                76,
                127,
                128,
                131,
                132,
                136
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/ConstructorArg.java": [
                57,
                74,
                91,
                92,
                108,
                123,
                199,
                218
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/DefaultBeanFactory.java": [
                83,
                113,
                115,
                141,
                144,
                147,
                160,
                181,
                183,
                198,
                199,
                201,
                204,
                207,
                209,
                227,
                246,
                248,
                249,
                250,
                273,
                274,
                276,
                283,
                302,
                322,
                323,
                347
            ],
            "src/main/java/org/apache/commons/configuration2/beanutils/XMLBeanDeclaration.java": [
                173,
                191,
                192,
                221,
                222,
                235,
                258,
                271,
                272,
                348,
                349,
                370,
                371,
                377,
                414,
                415,
                431,
                433,
                449,
                465,
                479,
                518,
                520,
                538,
                550,
                552,
                570,
                572,
                583,
                597,
                599,
                623,
                648,
                672,
                694,
                706,
                718,
                720,
                721
            ],
            "src/main/java/org/apache/commons/configuration2/builder/AutoSaveListener.java": [
                72,
                84,
                92,
                104,
                114,
                127,
                159
            ],
            "src/main/java/org/apache/commons/configuration2/builder/BasicBuilderParameters.java": [
                112,
                135,
                152,
                170,
                180,
                192,
                210,
                227,
                237,
                247,
                260,
                271,
                287,
                295,
                323,
                348,
                373,
                397,
                402,
                418,
                438,
                450,
                452,
                454,
                469,
                482,
                484,
                491,
                505,
                528,
                530,
                537,
                557,
                579,
                581,
                588,
                611,
                612,
                614,
                635
            ],
            "src/main/java/org/apache/commons/configuration2/builder/BasicConfigurationBuilder.java": [
                138,
                153,
                171,
                172,
                216,
                231,
                233,
                252,
                254,
                255,
                309,
                320,
                387,
                417,
                423,
                447,
                464,
                517,
                591,
                606,
                607,
                623,
                634,
                644,
                646,
                660,
                662,
                663,
                677,
                679,
                680,
                706,
                724,
                741,
                743,
                746,
                763,
                778,
                779,
                791,
                792
            ],
            "src/main/java/org/apache/commons/configuration2/builder/BuilderConfigurationWrapperFactory.java": [
                63,
                95,
                132,
                133,
                161,
                162,
                171,
                242,
                243,
                266,
                285,
                286,
                301,
                304
            ],
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderEvent.java": [
                74,
                75
            ],
            "src/main/java/org/apache/commons/configuration2/builder/ConfigurationBuilderResultCreatedEvent.java": [
                69,
                70,
                71
            ],
            "src/main/java/org/apache/commons/configuration2/builder/CopyObjectDefaultHandler.java": [
                63,
                96,
                104
            ],
            "src/main/java/org/apache/commons/configuration2/builder/DatabaseBuilderParametersImpl.java": [
                64,
                71,
                78,
                85,
                92,
                99,
                106
            ],
            "src/main/java/org/apache/commons/configuration2/builder/DefaultParametersManager.java": [
                80,
                81,
                129,
                130,
                153,
                169,
                170,
                172,
                174,
                194,
                198,
                229,
                230,
                247,
                267,
                268
            ],
            "src/main/java/org/apache/commons/configuration2/builder/DefaultReloadingDetectorFactory.java": [
                40,
                41,
                44,
                46
            ],
            "src/main/java/org/apache/commons/configuration2/builder/EventListenerParameters.java": [
                84,
                99
            ],
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedBuilderParametersImpl.java": [
                90,
                104,
                123,
                153,
                155,
                171,
                175,
                221,
                240,
                247,
                254,
                261,
                268,
                275,
                282,
                290,
                297,
                313,
                325
            ],
            "src/main/java/org/apache/commons/configuration2/builder/FileBasedConfigurationBuilder.java": [
                83,
                97,
                98,
                113,
                114,
                127,
                135,
                137,
                146,
                147,
                171,
                194,
                223,
                261,
                279,
                282,
                305,
                373,
                377,
                393
            ],
            "src/main/java/org/apache/commons/configuration2/builder/HierarchicalBuilderParametersImpl.java": [
                48,
                60
            ],
            "src/main/java/org/apache/commons/configuration2/builder/INIBuilderParametersImpl.java": [
                45,
                52
            ],
            "src/main/java/org/apache/commons/configuration2/builder/JndiBuilderParametersImpl.java": [
                52,
                59
            ],
            "src/main/java/org/apache/commons/configuration2/builder/PropertiesBuilderParametersImpl.java": [
                58,
                69,
                77,
                84
            ],
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingBuilderSupportListener.java": [
                63,
                64,
                82,
                83,
                85,
                101
            ],
            "src/main/java/org/apache/commons/configuration2/builder/ReloadingFileBasedConfigurationBuilder.java": [
                90,
                91,
                107,
                108,
                121,
                146,
                166,
                167,
                182,
                206,
                207,
                226,
                236,
                250,
                252
            ],
            "src/main/java/org/apache/commons/configuration2/builder/XMLBuilderParametersImpl.java": [
                65,
                74,
                81,
                99,
                106,
                113,
                120
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/BaseConfigurationBuilderProvider.java": [
                101,
                102,
                172,
                176,
                178,
                183,
                187,
                203,
                220,
                223,
                243,
                244,
                247,
                263,
                265,
                284,
                287,
                289,
                292,
                313,
                314,
                331,
                359,
                360,
                372,
                375,
                376,
                388
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedBuilderParametersImpl.java": [
                100,
                119,
                135,
                139,
                163,
                190,
                209,
                210,
                241,
                249,
                273,
                303,
                331,
                363,
                409,
                422,
                436,
                437,
                452,
                464
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilder.java": [
                517,
                529,
                556,
                581,
                588,
                662,
                664,
                668,
                682,
                705,
                755,
                758,
                759,
                775,
                781,
                798,
                799,
                800,
                809,
                812,
                839,
                841,
                859,
                862,
                864,
                866,
                868,
                869,
                870,
                876,
                895,
                900,
                917,
                918,
                920,
                927,
                944,
                945,
                949,
                951,
                954,
                959,
                964,
                983,
                999,
                1029,
                1055,
                1095,
                1096,
                1101,
                1125,
                1132,
                1153,
                1167,
                1185,
                1198,
                1212,
                1252,
                1274,
                1277,
                1279,
                1281,
                1282,
                1303,
                1323,
                1335,
                1337,
                1339,
                1356,
                1357,
                1359,
                1360,
                1373,
                1435,
                1454,
                1455,
                1456,
                1459,
                1494,
                1544,
                1568,
                1570,
                1579,
                1600,
                1601,
                1602,
                1611,
                1630,
                1649,
                1652,
                1654,
                1657,
                1658
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/CombinedConfigurationBuilderProvider.java": [
                84,
                105,
                106,
                110,
                126,
                127
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/ConfigurationDeclaration.java": [
                53,
                54,
                77,
                181,
                188
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/FileExtensionConfigurationBuilderProvider.java": [
                83,
                84,
                85,
                132,
                133,
                135,
                148,
                150,
                154,
                168,
                175
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileBuilderParametersImpl.java": [
                80,
                100,
                123,
                141,
                154,
                166
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilder.java": [
                117,
                134,
                135,
                148,
                149,
                161,
                170,
                203,
                204,
                210,
                219,
                242,
                247,
                262,
                264,
                267,
                284,
                338,
                354,
                356,
                375,
                395,
                398,
                426,
                443,
                446,
                473,
                496,
                524,
                525,
                527,
                529,
                534,
                552
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiFileConfigurationBuilderProvider.java": [
                81,
                82,
                94,
                96,
                98,
                114,
                116,
                118,
                139,
                140,
                169,
                170,
                184,
                191,
                216,
                217
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaBean.java": [
                61,
                64,
                67,
                69,
                70,
                71,
                91,
                98,
                104,
                110,
                131,
                138,
                144,
                150,
                163,
                179
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/MultiWrapDynaClass.java": [
                54,
                71,
                99,
                101,
                103,
                104
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingCombinedConfigurationBuilder.java": [
                82,
                83,
                94,
                103,
                135,
                146,
                159,
                181,
                183,
                187,
                192,
                206
            ],
            "src/main/java/org/apache/commons/configuration2/builder/combined/ReloadingMultiFileConfigurationBuilder.java": [
                84,
                85,
                98,
                99,
                111,
                133,
                149,
                155,
                157,
                159
            ],
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Configurations.java": [
                105,
                130,
                146,
                162,
                181,
                182,
                201,
                202,
                222,
                223,
                236,
                249,
                262,
                279,
                297,
                315,
                328,
                340,
                353,
                369,
                385,
                401,
                413,
                425,
                438,
                454,
                470,
                486,
                498,
                510,
                522,
                538,
                555,
                572,
                588,
                612,
                624,
                636
            ],
            "src/main/java/org/apache/commons/configuration2/builder/fluent/Parameters.java": [
                110,
                139,
                140,
                160,
                161,
                300,
                301,
                303,
                306,
                336,
                346,
                349,
                361,
                363
            ],
            "src/main/java/org/apache/commons/configuration2/convert/AbstractListDelimiterHandler.java": [
                62,
                73,
                89,
                91,
                136,
                143,
                180,
                193
            ],
            "src/main/java/org/apache/commons/configuration2/convert/DefaultConversionHandler.java": [
                77,
                93,
                107,
                113,
                115,
                127,
                128,
                139,
                153,
                154,
                164,
                185,
                202,
                230,
                231,
                233,
                249,
                262,
                278,
                279,
                281,
                300,
                301,
                325,
                326,
                328,
                348,
                349,
                363,
                364,
                374,
                375,
                376,
                378,
                397,
                398,
                400,
                414
            ],
            "src/main/java/org/apache/commons/configuration2/convert/DefaultListDelimiterHandler.java": [
                89,
                105,
                107,
                109,
                117,
                119,
                122,
                140,
                142,
                148
            ],
            "src/main/java/org/apache/commons/configuration2/convert/DisabledListDelimiterHandler.java": [
                59,
                73,
                75,
                85
            ],
            "src/main/java/org/apache/commons/configuration2/convert/LegacyListDelimiterHandler.java": [
                75,
                95,
                106,
                110,
                112,
                138,
                145,
                150,
                154,
                216,
                233,
                256,
                257,
                279
            ],
            "src/main/java/org/apache/commons/configuration2/convert/ListDelimiterHandler.java": [
                68
            ],
            "src/main/java/org/apache/commons/configuration2/convert/PropertyConverter.java": [
                97,
                98,
                218,
                226,
                249,
                251,
                269,
                271,
                286,
                288,
                303,
                305,
                320,
                322,
                337,
                339,
                354,
                356,
                371,
                373,
                388,
                390,
                410,
                416,
                423,
                437,
                447,
                450,
                456,
                473,
                501,
                528,
                540,
                558,
                570,
                588,
                600,
                618,
                626,
                627,
                631,
                632,
                633,
                659,
                669,
                672,
                705,
                725,
                737,
                757,
                767,
                771,
                785,
                800,
                812,
                821,
                824,
                843,
                859,
                878,
                886,
                894,
                898,
                919
            ],
            "src/main/java/org/apache/commons/configuration2/event/BaseEventSource.java": [
                97,
                99,
                101,
                140,
                156,
                157,
                164,
                184,
                200,
                222,
                223,
                227,
                231,
                254,
                273,
                274,
                276,
                280,
                303,
                304,
                323,
                344
            ],
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationErrorEvent.java": [
                112,
                113,
                114,
                115
            ],
            "src/main/java/org/apache/commons/configuration2/event/ConfigurationEvent.java": [
                174,
                175,
                176
            ],
            "src/main/java/org/apache/commons/configuration2/event/Event.java": [
                67,
                96,
                116,
                117
            ],
            "src/main/java/org/apache/commons/configuration2/event/EventListenerList.java": [
                79,
                80,
                96,
                120,
                138,
                149,
                157,
                195,
                225,
                227,
                229,
                232,
                268,
                276,
                293,
                324,
                346,
                358,
                383,
                400,
                418,
                420,
                434
            ],
            "src/main/java/org/apache/commons/configuration2/event/EventListenerRegistrationData.java": [
                56,
                57,
                110,
                121
            ],
            "src/main/java/org/apache/commons/configuration2/event/EventType.java": [
                69,
                121,
                123,
                144,
                145
            ],
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationException.java": [
                50,
                61,
                73
            ],
            "src/main/java/org/apache/commons/configuration2/ex/ConfigurationRuntimeException.java": [
                51,
                64,
                75,
                87
            ],
            "src/main/java/org/apache/commons/configuration2/ex/ConversionException.java": [
                51,
                62,
                74
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.java": [
                146,
                216,
                240,
                256,
                298,
                312,
                328,
                342,
                375,
                389,
                393,
                396,
                425,
                432,
                435,
                436,
                437,
                444,
                446,
                453,
                470,
                488,
                490,
                502,
                517,
                529,
                543,
                545,
                554,
                555
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/ConstantLookup.java": [
                78,
                95,
                102,
                116,
                147,
                150,
                151,
                167
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/DefaultLookups.java": [
                62
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/DummyLookup.java": [
                46
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/EnvironmentLookup.java": [
                56
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/ExprLookup.java": [
                111,
                122,
                134,
                144,
                153,
                188,
                211,
                223,
                233,
                234,
                237,
                239,
                263,
                266,
                268,
                286,
                297,
                299,
                330,
                358,
                369,
                379,
                388,
                389,
                390,
                400
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/InterpolatorSpecification.java": [
                78,
                171,
                192,
                196,
                211,
                228,
                232,
                249,
                264,
                279,
                304
            ],
            "src/main/java/org/apache/commons/configuration2/interpol/SystemPropertiesLookup.java": [
                48
            ],
            "src/main/java/org/apache/commons/configuration2/io/AbsoluteNameLocationStrategy.java": [
                46,
                50
            ],
            "src/main/java/org/apache/commons/configuration2/io/BasePathLocationStrategy.java": [
                48,
                52
            ],
            "src/main/java/org/apache/commons/configuration2/io/ClasspathLocationStrategy.java": [
                44
            ],
            "src/main/java/org/apache/commons/configuration2/io/CombinedLocationStrategy.java": [
                66,
                100,
                102,
                104
            ],
            "src/main/java/org/apache/commons/configuration2/io/ConfigurationLogger.java": [
                66,
                79,
                102,
                133,
                153,
                163,
                174,
                184,
                195,
                218,
                235
            ],
            "src/main/java/org/apache/commons/configuration2/io/DefaultFileSystem.java": [
                41,
                44,
                54,
                61,
                65,
                74,
                80,
                93,
                100,
                108,
                115,
                137,
                154,
                162,
                169,
                177,
                185,
                187,
                199,
                202,
                210,
                220,
                238,
                254,
                261,
                286,
                293,
                299,
                317
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileHandler.java": [
                138,
                143,
                148,
                186,
                204,
                216,
                231,
                254,
                268,
                281,
                304,
                310,
                327,
                357,
                363,
                393,
                402,
                420,
                421,
                436,
                451,
                470,
                503,
                533,
                564,
                596,
                640,
                674,
                714,
                725,
                732,
                748,
                761,
                776,
                789,
                817,
                830,
                844,
                857,
                872,
                885,
                917,
                929,
                939,
                970,
                972,
                983,
                992,
                996,
                1014,
                1017,
                1018,
                1029,
                1043,
                1047,
                1075,
                1082,
                1096,
                1107,
                1129,
                1136,
                1154,
                1179,
                1188,
                1209,
                1222,
                1242,
                1251,
                1269,
                1283,
                1287,
                1300,
                1327,
                1334,
                1352,
                1353,
                1394,
                1405,
                1416,
                1427,
                1438,
                1469,
                1478,
                1492,
                1526,
                1555,
                1556
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileHandlerListenerAdapter.java": [
                37,
                42,
                47,
                52,
                57
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileLocator.java": [
                84,
                185,
                196,
                270,
                284,
                296,
                308,
                320,
                332,
                345,
                368
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileLocatorUtils.java": [
                128,
                166,
                182,
                184,
                208,
                236,
                261,
                291,
                299,
                319,
                340,
                343,
                358,
                384,
                391,
                425,
                428,
                440,
                446,
                470,
                482,
                488,
                501,
                513,
                517,
                550,
                554,
                575,
                577,
                612,
                629,
                644,
                645,
                647,
                672
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileSystem.java": [
                52,
                66,
                75
            ],
            "src/main/java/org/apache/commons/configuration2/io/FileSystemLocationStrategy.java": [
                43
            ],
            "src/main/java/org/apache/commons/configuration2/io/HomeDirectoryLocationStrategy.java": [
                66,
                79,
                124,
                128,
                129,
                147,
                166
            ],
            "src/main/java/org/apache/commons/configuration2/io/ProvidedURLLocationStrategy.java": [
                44
            ],
            "src/main/java/org/apache/commons/configuration2/io/VFSFileSystem.java": [
                62,
                67,
                74,
                77,
                82,
                84,
                90,
                94,
                95,
                96,
                103,
                111,
                118,
                126,
                129,
                142,
                147,
                148,
                152,
                160,
                168,
                169,
                172,
                180,
                188,
                189,
                192,
                200,
                209,
                214,
                222,
                225,
                233,
                235,
                244,
                250,
                251,
                263,
                272,
                273,
                276,
                280,
                286,
                288,
                294,
                298,
                301,
                307,
                319,
                334,
                335,
                337,
                338,
                344,
                345,
                350,
                365,
                371
            ],
            "src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java": [
                148,
                159,
                165,
                188,
                201,
                203,
                206,
                210,
                217,
                219,
                220,
                228,
                229,
                231,
                238,
                250,
                253,
                258,
                293,
                301,
                303,
                308,
                321,
                332,
                333,
                336,
                337,
                340,
                349,
                418,
                420,
                424,
                439,
                441,
                443,
                457,
                459,
                472,
                474,
                475,
                525,
                528,
                544,
                573,
                586,
                594,
                600,
                611,
                634,
                640,
                646,
                666,
                668,
                679,
                680,
                686,
                690
            ],
            "src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java": [
                158,
                169,
                175,
                198,
                221,
                227,
                230,
                233,
                241,
                244,
                247,
                255,
                263,
                271,
                294,
                296,
                303,
                308,
                311,
                328,
                336,
                338,
                376,
                396,
                397,
                401,
                402,
                419,
                429,
                454,
                456,
                457,
                518,
                541,
                547,
                564,
                569,
                577,
                582,
                585,
                621,
                629,
                645,
                693,
                708,
                721,
                742,
                755,
                761,
                773,
                783,
                809,
                819,
                829,
                841,
                843,
                878
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/CombinedReloadingController.java": [
                78,
                130,
                137,
                139,
                168,
                184,
                201
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/FileHandlerReloadingDetector.java": [
                87,
                101,
                153,
                158,
                208,
                219,
                235,
                262,
                266,
                272
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/PeriodicReloadingTrigger.java": [
                90,
                91,
                118,
                119,
                176,
                231
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingController.java": [
                86,
                113,
                120,
                155
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/ReloadingEvent.java": [
                56
            ],
            "src/main/java/org/apache/commons/configuration2/reloading/VFSFileHandlerReloadingDetector.java": [
                73,
                74,
                85,
                97,
                107,
                130,
                131,
                138,
                140,
                154,
                155
            ],
            "src/main/java/org/apache/commons/configuration2/resolver/CatalogResolver.java": [
                100,
                109,
                119,
                128,
                137,
                175,
                182,
                183,
                193,
                199,
                200,
                205,
                235,
                245,
                268,
                270,
                297,
                315,
                332,
                365,
                412,
                421,
                434,
                436,
                443,
                452,
                476,
                487,
                494,
                506,
                523,
                544,
                546,
                547
            ],
            "src/main/java/org/apache/commons/configuration2/resolver/DefaultEntityResolver.java": [
                66,
                87,
                103,
                105,
                106,
                110
            ],
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertiesFactoryBean.java": [
                66,
                119,
                127,
                129,
                130,
                146,
                163,
                179,
                197
            ],
            "src/main/java/org/apache/commons/configuration2/spring/ConfigurationPropertySource.java": [
                33,
                38,
                56
            ],
            "src/main/java/org/apache/commons/configuration2/sync/ReadWriteSynchronizer.java": [
                55
            ],
            "src/main/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandler.java": [
                43,
                49,
                55,
                61,
                62,
                72,
                73,
                75,
                77,
                92,
                98,
                104,
                110,
                120,
                126,
                132,
                142,
                154
            ],
            "src/main/java/org/apache/commons/configuration2/tree/ConfigurationNodeVisitorAdapter.java": [
                40,
                48
            ],
            "src/main/java/org/apache/commons/configuration2/tree/DefaultConfigurationKey.java": [
                72,
                85,
                123,
                154,
                165,
                179,
                203,
                214,
                221,
                222,
                223,
                254,
                256,
                257,
                261,
                290,
                301,
                335,
                355,
                365,
                381,
                392,
                413,
                436,
                459,
                473,
                486,
                503,
                527,
                543,
                596,
                605,
                668,
                737,
                804,
                817,
                841,
                848,
                855,
                897,
                914,
                920,
                923,
                934
            ],
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngine.java": [
                139,
                155,
                156,
                186,
                187,
                189,
                203,
                210,
                217,
                219,
                233,
                234,
                236,
                237,
                238,
                332,
                334,
                342,
                343,
                373,
                374,
                383,
                410,
                411,
                413,
                424,
                452,
                453,
                465,
                483,
                484,
                500,
                501
            ],
            "src/main/java/org/apache/commons/configuration2/tree/DefaultExpressionEngineSymbols.java": [
                93,
                186,
                197,
                282,
                298,
                314,
                328,
                340,
                354,
                367
            ],
            "src/main/java/org/apache/commons/configuration2/tree/ImmutableNode.java": [
                65,
                146,
                159,
                173,
                176,
                189,
                192,
                194,
                219,
                220,
                223,
                225,
                252,
                254,
                269,
                271,
                286,
                293,
                306,
                308,
                324,
                336,
                350,
                414,
                432,
                433,
                450,
                462,
                474,
                487,
                506,
                525,
                540,
                558,
                635,
                651,
                653,
                655
            ],
            "src/main/java/org/apache/commons/configuration2/tree/InMemoryNodeModel.java": [
                83,
                119,
                120,
                139,
                148,
                158,
                159,
                178,
                187,
                189,
                202,
                209,
                223,
                224,
                243,
                249,
                252,
                261,
                264,
                279,
                280,
                300,
                307,
                310,
                311,
                315,
                348,
                349,
                367,
                373,
                375,
                391,
                393,
                419,
                438,
                439,
                447,
                449,
                472,
                477,
                479,
                480,
                524,
                525,
                530,
                531,
                552,
                553,
                555,
                560,
                561,
                589,
                590,
                592,
                598,
                599,
                603,
                634,
                635,
                637,
                643,
                644,
                652,
                653,
                673,
                691,
                702,
                724,
                726,
                727,
                750,
                766,
                771,
                772,
                813,
                819,
                820,
                822,
                837,
                851,
                852,
                854,
                874,
                876,
                890,
                891,
                905,
                906,
                908,
                923,
                924,
                925,
                933,
                946,
                947,
                956,
                957,
                962,
                981,
                983,
                984,
                1001,
                1002,
                1016,
                1017,
                1019,
                1043,
                1044,
                1046,
                1070,
                1071,
                1073,
                1098,
                1115,
                1116,
                1139,
                1141,
                1158,
                1159,
                1165,
                1186,
                1187,
                1190,
                1198,
                1219,
                1220,
                1224,
                1244,
                1245,
                1247,
                1266,
                1267,
                1269,
                1287,
                1288,
                1289,
                1291,
                1293,
                1294,
                1300,
                1316,
                1317,
                1318,
                1320,
                1324,
                1344,
                1345,
                1346,
                1347,
                1350,
                1360,
                1362,
                1377,
                1390
            ],
            "src/main/java/org/apache/commons/configuration2/tree/MergeCombiner.java": [
                55,
                57,
                63,
                64,
                66,
                79,
                96,
                97,
                99,
                101,
                121,
                122,
                124,
                125,
                127,
                129,
                143,
                160,
                161,
                163,
                164
            ],
            "src/main/java/org/apache/commons/configuration2/tree/ModelTransaction.java": [
                137,
                138,
                183,
                184,
                186,
                197,
                199,
                211,
                212,
                224,
                225,
                237,
                239,
                250,
                261,
                272,
                273,
                285,
                297,
                308,
                345,
                359,
                361,
                389,
                403,
                422,
                423,
                424,
                468,
                480,
                492,
                498,
                499,
                514,
                561,
                562,
                569,
                583,
                590,
                604,
                605,
                612,
                626,
                628,
                642,
                644,
                660,
                662,
                713,
                725,
                736,
                748,
                749,
                760,
                772,
                773,
                775,
                777,
                778,
                780,
                782,
                848,
                855,
                856,
                876,
                882,
                883,
                903,
                909,
                910,
                930,
                936,
                937,
                957,
                963,
                964,
                993,
                1010,
                1022,
                1038,
                1048,
                1077,
                1078,
                1080,
                1081,
                1099,
                1103
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeAddData.java": [
                78,
                79,
                144
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeCombiner.java": [
                78,
                101,
                129
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeHandlerDecorator.java": [
                41,
                47,
                53,
                59,
                65,
                66,
                73,
                74,
                81,
                87,
                93,
                99,
                105,
                111,
                117,
                123
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeNameMatchers.java": [
                46,
                47,
                60,
                61
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeSelector.java": [
                60,
                71,
                87,
                88,
                89,
                92,
                97,
                98,
                100,
                120,
                122,
                137,
                148,
                184,
                185,
                186,
                187,
                189,
                191
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeTracker.java": [
                85,
                103,
                104,
                105,
                107,
                109,
                125,
                126,
                128,
                130,
                131,
                133,
                159,
                161,
                163,
                165,
                186,
                199,
                216,
                241,
                242,
                243,
                251,
                253,
                280,
                282,
                285,
                303,
                304,
                306,
                320,
                322,
                345,
                346,
                347,
                348,
                360,
                389,
                391,
                405,
                425,
                426,
                427,
                433,
                462,
                475,
                476,
                548,
                563,
                565
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeTreeWalker.java": [
                66,
                67,
                94,
                95,
                111,
                112,
                117,
                140,
                141,
                143,
                149,
                152,
                172,
                173
            ],
            "src/main/java/org/apache/commons/configuration2/tree/NodeUpdateData.java": [
                71,
                72,
                73,
                136,
                153
            ],
            "src/main/java/org/apache/commons/configuration2/tree/OverrideCombiner.java": [
                63,
                64,
                66,
                70,
                72,
                85,
                110,
                111,
                114,
                136,
                137
            ],
            "src/main/java/org/apache/commons/configuration2/tree/QueryResult.java": [
                59,
                73,
                88,
                89,
                137,
                163,
                174,
                189
            ],
            "src/main/java/org/apache/commons/configuration2/tree/ReferenceTracker.java": [
                72,
                73,
                97,
                99,
                116,
                117,
                122,
                125,
                141,
                143,
                176
            ],
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeHandler.java": [
                57,
                58,
                80
            ],
            "src/main/java/org/apache/commons/configuration2/tree/TrackedNodeModel.java": [
                99,
                100,
                168,
                180,
                181,
                187,
                188,
                194,
                195,
                201,
                202,
                208,
                209,
                222
            ],
            "src/main/java/org/apache/commons/configuration2/tree/TreeData.java": [
                66,
                67,
                68,
                69,
                115,
                121,
                123,
                160,
                174,
                184,
                211,
                212,
                234,
                236,
                238
            ],
            "src/main/java/org/apache/commons/configuration2/tree/TreeUtils.java": [
                40,
                48,
                50,
                51,
                65
            ],
            "src/main/java/org/apache/commons/configuration2/tree/UnionCombiner.java": [
                126,
                127,
                129,
                137,
                138,
                140,
                154,
                192,
                193,
                199
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationAttributePointer.java": [
                53,
                54,
                86,
                191,
                205
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorAttribute.java": [
                52,
                66,
                92,
                94,
                101,
                104,
                107,
                127,
                128
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorBase.java": [
                66,
                67,
                91,
                150,
                180,
                209,
                223
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodeIteratorChildren.java": [
                56,
                57,
                60,
                84,
                111,
                119,
                120,
                127,
                146,
                148,
                149,
                150,
                169,
                171,
                176,
                177,
                178,
                197,
                200
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointer.java": [
                62,
                63,
                78,
                79,
                184,
                197,
                198,
                200,
                201,
                204,
                225,
                239,
                240,
                254,
                293
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/ConfigurationNodePointerFactory.java": [
                77,
                81,
                102,
                103,
                107,
                124,
                149
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathContextFactory.java": [
                42,
                44
            ],
            "src/main/java/org/apache/commons/configuration2/tree/xpath/XPathExpressionEngine.java": [
                185,
                195,
                196,
                200,
                203,
                222,
                237,
                252,
                254,
                271,
                272,
                274,
                281,
                298,
                299,
                319,
                338,
                352,
                353,
                359,
                364,
                368,
                443,
                444,
                450,
                453,
                474,
                475,
                487,
                500,
                518,
                520,
                522,
                524,
                546
            ],
            "src/main/java/org/apache/commons/configuration2/web/AppletConfiguration.java": [
                44,
                50,
                58,
                59
            ],
            "src/main/java/org/apache/commons/configuration2/web/BaseWebConfiguration.java": [
                61,
                75,
                90,
                107
            ],
            "src/main/java/org/apache/commons/configuration2/web/ServletConfiguration.java": [
                47,
                57,
                63,
                73
            ],
            "src/main/java/org/apache/commons/configuration2/web/ServletContextConfiguration.java": [
                47,
                58,
                64,
                74
            ],
            "src/main/java/org/apache/commons/configuration2/web/ServletFilterConfiguration.java": [
                45,
                51,
                61
            ],
            "src/main/java/org/apache/commons/configuration2/web/ServletRequestConfiguration.java": [
                46,
                52,
                54,
                67,
                68,
                70,
                88
            ],
            "src/test/java/org/apache/commons/configuration2/BaseNonStringProperties.java": [
                51,
                65,
                66,
                86,
                87,
                108,
                109,
                129,
                149,
                169
            ],
            "src/test/java/org/apache/commons/configuration2/ConfigurationAssert.java": [
                62,
                65,
                67,
                73,
                75,
                86,
                97,
                109,
                121,
                134,
                153,
                155,
                166,
                168,
                179,
                180,
                182,
                195,
                201
            ],
            "src/test/java/org/apache/commons/configuration2/DatabaseConfigurationTestHelper.java": [
                107,
                121,
                160,
                179,
                180,
                195,
                224,
                256,
                274,
                282,
                283,
                284
            ],
            "src/test/java/org/apache/commons/configuration2/FileURLStreamHandler.java": [
                40
            ],
            "src/test/java/org/apache/commons/configuration2/InterpolationTestHelper.java": [
                47,
                50,
                54,
                71,
                84,
                93,
                110,
                114,
                116,
                124,
                139,
                154,
                156,
                157,
                162,
                175,
                189,
                199,
                211,
                217,
                228,
                230,
                250,
                263,
                274
            ],
            "src/test/java/org/apache/commons/configuration2/Logging.java": [
                53,
                59,
                62,
                64,
                78,
                86,
                118,
                134,
                147,
                160,
                173,
                187,
                200,
                214,
                227,
                241,
                254,
                268
            ],
            "src/test/java/org/apache/commons/configuration2/MockInitialContextFactory.java": [
                86,
                88,
                90,
                91,
                92,
                93,
                110,
                135,
                137,
                141,
                145,
                160,
                172,
                187,
                188,
                190,
                212,
                224,
                226,
                236
            ],
            "src/test/java/org/apache/commons/configuration2/NonCloneableConfiguration.java": [
                35,
                52,
                70,
                76
            ],
            "src/test/java/org/apache/commons/configuration2/NonStringTestHolder.java": [
                35,
                42,
                49,
                52,
                58,
                59,
                66,
                67,
                74,
                75,
                82,
                83,
                90,
                91,
                97,
                104,
                110,
                116,
                122,
                129,
                135,
                141,
                145,
                148
            ],
            "src/test/java/org/apache/commons/configuration2/SynchronizerTestImpl.java": [
                76,
                88,
                100,
                112,
                132,
                134,
                135,
                148
            ],
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfiguration.java": [
                65,
                74,
                76,
                97,
                103,
                106,
                117,
                137,
                145,
                153,
                154,
                156,
                165,
                180,
                182,
                194,
                200
            ],
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationBasicFeatures.java": [
                71,
                78,
                80,
                99,
                129,
                139,
                142,
                144,
                148,
                163,
                164,
                168,
                189,
                190,
                201,
                202,
                203,
                215,
                227,
                228,
                242,
                243,
                247,
                250,
                272,
                283,
                284,
                285,
                297,
                309,
                310,
                324,
                336,
                338,
                340,
                341,
                344,
                356,
                358,
                362,
                374,
                376,
                381,
                395,
                397,
                401,
                415,
                420,
                433,
                436,
                438,
                452,
                455,
                470,
                471,
                486,
                487,
                531,
                532,
                540,
                542,
                544,
                555,
                557,
                559,
                570,
                585,
                595,
                607,
                623,
                641,
                656,
                671,
                686,
                699,
                700,
                711,
                712,
                732,
                733,
                744,
                754,
                755,
                767,
                780,
                782,
                793,
                794,
                800,
                810,
                811,
                817,
                828,
                838,
                839,
                852,
                863,
                875,
                877,
                892,
                893,
                894,
                905,
                916,
                917,
                927,
                928,
                929,
                940,
                941,
                942,
                952,
                954,
                967,
                968,
                980,
                981,
                982,
                992,
                1002,
                1005,
                1015,
                1022,
                1035,
                1045,
                1052,
                1065,
                1083,
                1103,
                1118,
                1135,
                1136,
                1138,
                1139,
                1155,
                1157,
                1180,
                1186,
                1192,
                1204,
                1216,
                1232
            ],
            "src/test/java/org/apache/commons/configuration2/TestAbstractConfigurationSynchronization.java": [
                56,
                233,
                247,
                262,
                273
            ],
            "src/test/java/org/apache/commons/configuration2/TestAbstractHierarchicalConfiguration.java": [
                66,
                108,
                109,
                118,
                249,
                272,
                318,
                319,
                339,
                352,
                353,
                367,
                403,
                419,
                448,
                471,
                507,
                510,
                521,
                533,
                535,
                551,
                562,
                580,
                581,
                600,
                611,
                615,
                620,
                661,
                717,
                718,
                774,
                787,
                824,
                842,
                857,
                858,
                861,
                879,
                880,
                883,
                901,
                902,
                905,
                917,
                929,
                942,
                944,
                948,
                963,
                965,
                966,
                970,
                973,
                1014,
                1042,
                1074,
                1086,
                1087,
                1093,
                1099,
                1105,
                1110,
                1116,
                1122,
                1129,
                1136,
                1143
            ],
            "src/test/java/org/apache/commons/configuration2/TestBaseConfiguration.java": [
                97,
                98,
                122,
                123,
                147,
                148,
                172,
                173,
                197,
                198,
                222,
                223,
                247,
                248,
                272,
                273,
                290,
                315,
                340,
                381,
                383,
                391,
                415,
                422,
                423,
                447,
                465,
                466,
                585,
                600,
                601,
                603,
                605,
                608,
                611,
                614,
                615,
                703,
                705,
                707,
                720,
                723,
                744,
                759
            ],
            "src/test/java/org/apache/commons/configuration2/TestBaseConfigurationXMLReader.java": [
                92,
                99,
                104,
                105,
                107,
                108,
                109,
                111,
                112,
                134,
                136,
                137,
                144,
                154
            ],
            "src/test/java/org/apache/commons/configuration2/TestBaseHierarchicalConfigurationSynchronization.java": [
                65,
                100,
                113,
                134,
                147,
                161,
                173,
                185,
                188,
                201,
                203,
                217,
                219,
                221,
                235,
                238,
                243,
                257,
                270,
                276,
                277,
                281,
                289,
                297,
                331,
                332,
                333,
                347,
                351,
                366
            ],
            "src/test/java/org/apache/commons/configuration2/TestBaseNullConfiguration.java": [
                78,
                79,
                103,
                104,
                128,
                129,
                153,
                154,
                178,
                179,
                203,
                204,
                228,
                229,
                254,
                255,
                272,
                297,
                315,
                317,
                325,
                343,
                361,
                362,
                388,
                390,
                393,
                404,
                423
            ],
            "src/test/java/org/apache/commons/configuration2/TestCatalogResolver.java": [
                69,
                71,
                109
            ],
            "src/test/java/org/apache/commons/configuration2/TestCombinedConfiguration.java": [
                125,
                143,
                151,
                176,
                189,
                201,
                203,
                253,
                266,
                278,
                291,
                303,
                336,
                354,
                368,
                394,
                409,
                430,
                466,
                470,
                482,
                483,
                584,
                599,
                624,
                655,
                659,
                665,
                681,
                683,
                686,
                695,
                697,
                700,
                712,
                717,
                727,
                729,
                747,
                758,
                770,
                782,
                795,
                808,
                821,
                834,
                857,
                871,
                885,
                898,
                909,
                922,
                938,
                953,
                956,
                970,
                990,
                994,
                1004,
                1006,
                1015,
                1016,
                1017,
                1018,
                1024,
                1032,
                1047,
                1061,
                1062,
                1075,
                1078,
                1111,
                1128,
                1146,
                1182,
                1183,
                1205,
                1217,
                1225,
                1273,
                1274,
                1293,
                1304
            ],
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfiguration.java": [
                75,
                78,
                83,
                87,
                134,
                163,
                179,
                313,
                330,
                361,
                365,
                398,
                399,
                403,
                404,
                422,
                423,
                427,
                428,
                442,
                445,
                455,
                459,
                474,
                475,
                477,
                481,
                487,
                501,
                507,
                520,
                524,
                527,
                536,
                541,
                549,
                553,
                586,
                597,
                608,
                622,
                637,
                640,
                684,
                686,
                765,
                784,
                796,
                808,
                811,
                826,
                827,
                843,
                897,
                908,
                919,
                930,
                941,
                953
            ],
            "src/test/java/org/apache/commons/configuration2/TestCompositeConfigurationNonStringProperties.java": [
                37,
                38,
                39
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationConverter.java": [
                44,
                49,
                54,
                66,
                83,
                84,
                100,
                102,
                114,
                123,
                128,
                140,
                142,
                149,
                152
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationLookup.java": [
                55,
                57,
                67,
                68,
                79,
                81,
                92,
                97,
                98,
                100
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationMap.java": [
                61
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationSet.java": [
                63,
                89,
                91
            ],
            "src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java": [
                81,
                82,
                103,
                108,
                123,
                128,
                152,
                159,
                162,
                164,
                177,
                201,
                206,
                219,
                222,
                227,
                240,
                241,
                257,
                258,
                275,
                278,
                293,
                300,
                301,
                311,
                313,
                326,
                346,
                349,
                353,
                354,
                370,
                381,
                408,
                411,
                431,
                478,
                522,
                544,
                575,
                576,
                589,
                590,
                627
            ],
            "src/test/java/org/apache/commons/configuration2/TestDataConfiguration.java": [
                69,
                84,
                100,
                116,
                132,
                148,
                164,
                180,
                195,
                210,
                219,
                220,
                230,
                237,
                238,
                248,
                264,
                271,
                272,
                282,
                289,
                290,
                293,
                294,
                295,
                297,
                310,
                327,
                348,
                349,
                357,
                358,
                370,
                371,
                383,
                384,
                388,
                429,
                432,
                508,
                511,
                587,
                590,
                666,
                669,
                745,
                748,
                824,
                827,
                903,
                906,
                982,
                985,
                1017,
                1056,
                1059,
                1129,
                1132,
                1148,
                1151,
                1221,
                1224,
                1240,
                1243,
                1349,
                1352,
                1431,
                1449,
                1452,
                1526,
                1533,
                1536,
                1547,
                1586,
                1595,
                1596,
                1597,
                1600,
                1603,
                1637,
                1638,
                1639,
                1640,
                1650,
                1651,
                1652,
                1655,
                1700,
                1703,
                1715,
                1720,
                1740,
                1741,
                1742,
                1743,
                1745,
                1749,
                1752,
                1786,
                1787,
                1788,
                1790,
                1792,
                1794,
                1804,
                1805,
                1806,
                1807,
                1809,
                1813,
                1858,
                1880,
                1897,
                1906,
                1916,
                1918,
                1933,
                1943,
                1953,
                1963,
                1973,
                1983,
                1993,
                2003,
                2013,
                2023,
                2033,
                2043,
                2053,
                2063,
                2073,
                2083,
                2093,
                2103,
                2113,
                2123,
                2133,
                2143,
                2153,
                2163,
                2173,
                2183,
                2193,
                2203,
                2213,
                2223,
                2233,
                2243,
                2253,
                2263,
                2273,
                2283,
                2293,
                2303,
                2313,
                2323,
                2333,
                2343,
                2353,
                2363,
                2373,
                2383,
                2393,
                2403,
                2413,
                2423,
                2433,
                2443,
                2453,
                2463,
                2473,
                2483,
                2493,
                2503,
                2513,
                2523,
                2533,
                2543,
                2556,
                2557,
                2568,
                2580,
                2593,
                2594,
                2613
            ],
            "src/test/java/org/apache/commons/configuration2/TestDatabaseConfiguration.java": [
                104,
                123,
                138,
                139,
                141,
                149,
                162,
                170,
                179,
                188,
                198,
                208,
                217,
                230,
                231,
                248,
                256,
                265,
                278,
                286,
                287,
                296,
                297,
                306,
                314,
                322,
                329,
                332,
                339,
                340,
                341,
                348,
                349,
                350,
                352,
                360,
                362,
                376,
                453,
                466,
                468,
                481,
                492,
                495,
                506,
                509,
                521,
                522,
                531,
                545,
                546,
                551,
                572,
                578
            ],
            "src/test/java/org/apache/commons/configuration2/TestDynamicCombinedConfiguration.java": [
                90,
                91,
                93,
                96,
                107,
                111,
                113,
                140,
                144,
                156,
                158,
                172,
                174,
                185,
                187,
                198,
                200,
                202,
                213,
                215,
                226,
                228,
                239,
                241,
                243,
                252,
                255,
                258,
                259,
                280,
                283,
                287,
                288,
                311,
                314,
                318,
                319,
                320,
                321,
                354,
                359,
                376,
                393,
                395,
                398,
                402,
                421,
                422,
                452,
                453,
                459,
                474,
                487,
                488,
                502,
                506,
                510,
                529,
                535,
                537,
                538,
                539,
                557,
                563,
                569
            ],
            "src/test/java/org/apache/commons/configuration2/TestEnvironmentConfiguration.java": [
                57,
                59,
                73
            ],
            "src/test/java/org/apache/commons/configuration2/TestEqualBehaviour.java": [
                44,
                45,
                46,
                55,
                67,
                69,
                70,
                74,
                75,
                85,
                87,
                88,
                97,
                98,
                102,
                103,
                107,
                108,
                120,
                121,
                133,
                134,
                136,
                153,
                154,
                156,
                177,
                178,
                180,
                181,
                199,
                200,
                202,
                203,
                226,
                227,
                229,
                230,
                248,
                249,
                251,
                252
            ],
            "src/test/java/org/apache/commons/configuration2/TestEqualsProperty.java": [
                38,
                39,
                43
            ],
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfiguration.java": [
                52,
                83,
                119,
                148,
                150,
                165,
                169,
                186,
                202,
                217,
                231,
                244,
                248,
                265,
                266,
                316,
                351,
                367,
                373,
                386,
                387,
                389,
                390,
                425,
                428,
                430,
                443,
                465,
                473,
                485,
                496,
                520,
                521,
                532,
                555,
                568,
                571,
                574,
                586,
                587,
                589,
                590,
                594,
                649
            ],
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalConfigurationXMLReader.java": [
                51,
                52,
                60,
                61,
                62,
                64,
                65
            ],
            "src/test/java/org/apache/commons/configuration2/TestHierarchicalXMLConfiguration.java": [
                80,
                105,
                115,
                123,
                133,
                150,
                174,
                187,
                190,
                194,
                225,
                265,
                302
            ],
            "src/test/java/org/apache/commons/configuration2/TestINIConfiguration.java": [
                136,
                139,
                152,
                155,
                160,
                175,
                178,
                183,
                197,
                199,
                200,
                218,
                219,
                240,
                241,
                243,
                249,
                251,
                264,
                266,
                267,
                297,
                298,
                304,
                305,
                337,
                338,
                343,
                353,
                377,
                379,
                390,
                404,
                417,
                420,
                423,
                430,
                437,
                445,
                452,
                459,
                467,
                470,
                473,
                486,
                498,
                509,
                522,
                535,
                546,
                558,
                559,
                572,
                573,
                575,
                576,
                591,
                592,
                594,
                641,
                655,
                668,
                669,
                682,
                683,
                699,
                700,
                712,
                713,
                725,
                728,
                747,
                748,
                758,
                759,
                770,
                783,
                795,
                807,
                820,
                831,
                842,
                858,
                874,
                875,
                879,
                898,
                911,
                925,
                939,
                954,
                961,
                963,
                976,
                979,
                982,
                984,
                985,
                999,
                1004,
                1006,
                1017,
                1021,
                1022,
                1033,
                1036,
                1049,
                1062,
                1063,
                1075,
                1079,
                1080,
                1094,
                1097,
                1098,
                1099,
                1112,
                1113,
                1114,
                1118,
                1135,
                1136,
                1137,
                1153,
                1154,
                1155,
                1168,
                1169,
                1170,
                1171,
                1178,
                1192,
                1193,
                1194,
                1195,
                1209,
                1213,
                1235,
                1241,
                1264,
                1284
            ],
            "src/test/java/org/apache/commons/configuration2/TestImmutableConfiguration.java": [
                77,
                78,
                81,
                83,
                97,
                115,
                117,
                132,
                133,
                146,
                149,
                162,
                163,
                166,
                178,
                181,
                191,
                194,
                205,
                206,
                208,
                221,
                224,
                231
            ],
            "src/test/java/org/apache/commons/configuration2/TestJNDIConfiguration.java": [
                62,
                64,
                164,
                172,
                228,
                243,
                244,
                246,
                259,
                317,
                319,
                320,
                347,
                358
            ],
            "src/test/java/org/apache/commons/configuration2/TestJNDIEnvironmentValues.java": [
                54,
                61,
                76,
                105,
                121,
                129,
                143
            ],
            "src/test/java/org/apache/commons/configuration2/TestJSONConfiguration.java": [
                43,
                77,
                84,
                92,
                102,
                104,
                107,
                108,
                110,
                114,
                117,
                123,
                124,
                147
            ],
            "src/test/java/org/apache/commons/configuration2/TestMapConfiguration.java": [
                54,
                60,
                74,
                76,
                83,
                84,
                85,
                95,
                97,
                116,
                119,
                133,
                136,
                146,
                157,
                171
            ],
            "src/test/java/org/apache/commons/configuration2/TestNonStringProperties.java": [
                36,
                37
            ],
            "src/test/java/org/apache/commons/configuration2/TestNullCompositeConfiguration.java": [
                58,
                61,
                66,
                70,
                102,
                125,
                266,
                283,
                313,
                317,
                346,
                350,
                360,
                374,
                375,
                379,
                380,
                398,
                399,
                403,
                404,
                418,
                421,
                445,
                446,
                448,
                452,
                455
            ],
            "src/test/java/org/apache/commons/configuration2/TestNullJNDIEnvironmentValues.java": [
                53,
                60,
                75,
                104,
                120,
                128,
                142
            ],
            "src/test/java/org/apache/commons/configuration2/TestPatternSubtreeConfiguration.java": [
                56,
                76,
                77,
                89,
                90
            ],
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfiguration.java": [
                108,
                111,
                120,
                131,
                132,
                143,
                145,
                185,
                196,
                207,
                211,
                224,
                228,
                242,
                274,
                284,
                303,
                304,
                308,
                309,
                320,
                347,
                363,
                372,
                383,
                400,
                409,
                410,
                421,
                422,
                433,
                435,
                458,
                468,
                475,
                489,
                498,
                510,
                526,
                540,
                551,
                608,
                610,
                627,
                629,
                641,
                645,
                656,
                669,
                683,
                711,
                722,
                724,
                736,
                746,
                748,
                750,
                763,
                765,
                771,
                784,
                786,
                787,
                805,
                820,
                832,
                845,
                847,
                852,
                887,
                894,
                918,
                925,
                929,
                933,
                957,
                958,
                965,
                989,
                991,
                1015,
                1017,
                1049,
                1072,
                1084,
                1096,
                1108,
                1122,
                1124,
                1129,
                1145,
                1148,
                1158,
                1167,
                1168,
                1174,
                1198,
                1204,
                1220,
                1222,
                1224,
                1239,
                1254,
                1258,
                1260,
                1262,
                1275,
                1289,
                1308,
                1358,
                1370,
                1391,
                1425
            ],
            "src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java": [
                91,
                239,
                291,
                309,
                327,
                343,
                376,
                389,
                403,
                570,
                591,
                594,
                611,
                714,
                729,
                740,
                762,
                773,
                784,
                838
            ],
            "src/test/java/org/apache/commons/configuration2/TestPropertiesSequence.java": [
                43,
                44,
                46,
                47,
                51,
                53,
                55,
                56,
                58,
                59,
                73,
                74,
                76,
                77,
                81,
                83,
                91,
                92,
                94,
                95,
                109,
                110,
                112,
                113,
                117,
                119,
                121,
                122,
                124,
                126,
                127,
                131,
                140,
                142,
                143,
                147
            ],
            "src/test/java/org/apache/commons/configuration2/TestStrictConfigurationComparator.java": [
                63
            ],
            "src/test/java/org/apache/commons/configuration2/TestSubnodeConfiguration.java": [
                78,
                90,
                91,
                109,
                120,
                122,
                181,
                223,
                237,
                279,
                280,
                304,
                320,
                336,
                368,
                375,
                417,
                444,
                448,
                492,
                494,
                496,
                513,
                518,
                531
            ],
            "src/test/java/org/apache/commons/configuration2/TestSubsetConfiguration.java": [
                65,
                69,
                78,
                79,
                95,
                110,
                125,
                130,
                132,
                141,
                146,
                148,
                157,
                162,
                163,
                170,
                171,
                179,
                180,
                188,
                189,
                198,
                201,
                208,
                223,
                232,
                236,
                237,
                239,
                240,
                241,
                246,
                256,
                260,
                273,
                274,
                294,
                295,
                297,
                310,
                311,
                313,
                326,
                328,
                329,
                341,
                342,
                349,
                350,
                354,
                360,
                368,
                371
            ],
            "src/test/java/org/apache/commons/configuration2/TestSystemConfiguration.java": [
                50,
                53,
                60,
                73,
                74,
                75,
                81,
                91,
                92,
                109,
                133,
                134,
                139,
                141
            ],
            "src/test/java/org/apache/commons/configuration2/TestThreesomeConfiguration.java": [
                43,
                45,
                54,
                62,
                70
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration.java": [
                127,
                130,
                142,
                145,
                172,
                181,
                202,
                211,
                232,
                313,
                366,
                408,
                420,
                442,
                452,
                463,
                481,
                483,
                500,
                542,
                554,
                577,
                645,
                647,
                650,
                679,
                692,
                706,
                708,
                725,
                729,
                774,
                792,
                841,
                868,
                960,
                963,
                975,
                977,
                990,
                992,
                1008,
                1010,
                1027,
                1044,
                1063,
                1092,
                1120,
                1121,
                1176,
                1177,
                1194,
                1203,
                1207,
                1220,
                1229,
                1230,
                1234,
                1258,
                1267,
                1281,
                1296,
                1308,
                1322,
                1330,
                1332,
                1335,
                1348,
                1351,
                1360,
                1380,
                1384,
                1422,
                1495,
                1502,
                1518,
                1530,
                1532,
                1542,
                1551,
                1564,
                1579,
                1581,
                1585,
                1598,
                1617,
                1632,
                1633,
                1636,
                1650,
                1652,
                1655,
                1666,
                1680,
                1697,
                1698,
                1704,
                1729,
                1740,
                1743,
                1767
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLConfiguration_605.java": [
                42,
                58,
                60,
                62,
                75,
                78,
                80,
                88,
                95,
                102,
                109,
                116,
                123,
                130,
                142
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLDocumentHelper.java": [
                83,
                86,
                98,
                111,
                114,
                115,
                116,
                142,
                151,
                163,
                164,
                165,
                166,
                176,
                190,
                192,
                201,
                213,
                214,
                215,
                218,
                231,
                242,
                243,
                255,
                256,
                267,
                269,
                272,
                273,
                282,
                284,
                286,
                287,
                289,
                291,
                292,
                304,
                306,
                317,
                318,
                324
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLListHandling.java": [
                72,
                75,
                77,
                89,
                90,
                102,
                115,
                116,
                118,
                119,
                131,
                133,
                145,
                159,
                173,
                186,
                189,
                191
            ],
            "src/test/java/org/apache/commons/configuration2/TestXMLPropertiesConfiguration.java": [
                64,
                67,
                68,
                76,
                88,
                89,
                90,
                94,
                100,
                101,
                102,
                116,
                124,
                125,
                129,
                144,
                152,
                155,
                156,
                157,
                159,
                160,
                161,
                162,
                166
            ],
            "src/test/java/org/apache/commons/configuration2/TestYAMLConfiguration.java": [
                41,
                75,
                82,
                90,
                100,
                102,
                105,
                109,
                112,
                131
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBean.java": [
                37,
                47,
                57
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestBeanWithListChild.java": [
                41,
                52,
                62
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanCreationTestCtorBean.java": [
                30,
                35,
                40
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/BeanDeclarationTestImpl.java": [
                50,
                61,
                72,
                83,
                95,
                106
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestBeanHelper.java": [
                85,
                152,
                185,
                186,
                198,
                199,
                213,
                225,
                227,
                241,
                243,
                269,
                281,
                284,
                298,
                311,
                323,
                326,
                336,
                349,
                361,
                362,
                364,
                377,
                378,
                379,
                399,
                402,
                415,
                416,
                420,
                421,
                427,
                442,
                443,
                448,
                451,
                464,
                466,
                467,
                482,
                487,
                500,
                505,
                527,
                533,
                540
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestCombinedBeanDeclaration.java": [
                71,
                98,
                99,
                114,
                125,
                126,
                141,
                152,
                169,
                180,
                181,
                197,
                214,
                215,
                216,
                223,
                228,
                244,
                247,
                257,
                258,
                259,
                266,
                271,
                288,
                291
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConfigurationDynaBean.java": [
                111,
                118,
                122,
                126,
                158,
                243,
                245,
                246,
                247,
                328,
                331,
                368,
                380,
                392,
                404,
                416,
                428,
                440,
                532,
                535,
                538,
                564,
                565,
                576,
                577,
                588,
                589,
                600,
                601,
                612,
                613,
                624,
                625,
                636,
                637,
                666,
                668,
                680,
                682
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestConstructorArg.java": [
                47,
                49,
                59,
                69,
                80,
                92
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestDefaultBeanFactory.java": [
                82,
                106,
                140,
                154,
                155,
                158,
                162,
                173,
                174,
                178,
                192,
                193,
                197,
                201,
                215,
                216,
                229,
                230,
                234,
                236,
                248,
                249,
                262,
                263,
                267,
                269,
                281,
                282,
                286,
                287,
                293,
                305,
                306,
                314,
                316
            ],
            "src/test/java/org/apache/commons/configuration2/beanutils/TestXMLBeanDeclaration.java": [
                119,
                121,
                132,
                142,
                144,
                154,
                157,
                170,
                173,
                186,
                188,
                199,
                209,
                211,
                221,
                225,
                236,
                246,
                248,
                259,
                261,
                272,
                276,
                286,
                287,
                299,
                302,
                325,
                326,
                329,
                334,
                350,
                351,
                353,
                355,
                366,
                367,
                370,
                376,
                377,
                378,
                390,
                392,
                393,
                404,
                405,
                412,
                423,
                437,
                439,
                450,
                462,
                463,
                464,
                466,
                467,
                474,
                486,
                489,
                490,
                492,
                503,
                504,
                508,
                509,
                510,
                520,
                523,
                526,
                527,
                528,
                541,
                542,
                557,
                558,
                560,
                577,
                578
            ],
            "src/test/java/org/apache/commons/configuration2/builder/BuilderEventListenerImpl.java": [
                51,
                66,
                68,
                70
            ],
            "src/test/java/org/apache/commons/configuration2/builder/ParametersBeanTestImpl.java": [
                37,
                47,
                52,
                63
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestAutoSaveListener.java": [
                51,
                65,
                66,
                83,
                153
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicBuilderParameters.java": [
                70,
                81,
                82,
                84,
                95,
                120,
                135,
                149,
                150,
                152,
                156,
                178,
                179,
                181,
                186,
                209,
                224,
                225,
                226,
                228,
                234,
                256,
                257,
                258,
                264,
                269,
                287,
                289,
                290,
                291,
                292,
                295,
                299,
                300,
                318,
                321,
                335,
                347,
                348,
                361,
                362,
                375,
                386,
                409,
                410,
                412,
                413,
                418,
                421,
                436,
                437,
                439,
                453,
                454,
                456,
                471,
                484,
                498,
                529,
                553,
                554,
                556,
                557,
                559,
                560,
                565,
                568,
                590,
                594
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilder.java": [
                93,
                105,
                106,
                109,
                120,
                121,
                125,
                136,
                148,
                160,
                166,
                177,
                179,
                184,
                195,
                198,
                201,
                214,
                217,
                228,
                242,
                261,
                262,
                263,
                266,
                274,
                275,
                288,
                291,
                293,
                304,
                307,
                309,
                321,
                327,
                356,
                357,
                359,
                363,
                365,
                377,
                378,
                380,
                388,
                407,
                408,
                409,
                410,
                416,
                420,
                431,
                444,
                445,
                449,
                455,
                472,
                473,
                479,
                492,
                495,
                498,
                510,
                522,
                524,
                535,
                540,
                552,
                555,
                561,
                562,
                566,
                578,
                582,
                583,
                586,
                602,
                633,
                634,
                649,
                667,
                676
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestBasicConfigurationBuilderEvents.java": [
                47,
                59,
                71,
                72,
                93,
                94,
                113,
                116,
                129,
                141,
                145,
                149,
                166,
                167,
                174,
                180,
                216,
                219,
                222,
                224
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestBuilderConfigurationWrapperFactory.java": [
                53,
                66,
                76,
                90,
                92,
                97,
                99,
                115,
                117,
                120,
                122,
                134,
                136,
                139,
                141,
                153,
                156,
                157,
                158,
                161,
                173,
                174,
                187,
                189,
                191,
                195,
                197,
                210,
                223
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestCopyObjectDefaultHandler.java": [
                52,
                56,
                57,
                60,
                74,
                80,
                82,
                96,
                97,
                99,
                103,
                109
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestDatabaseBuilderParametersImpl.java": [
                53,
                66,
                78,
                90,
                102,
                115,
                141
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultParametersManager.java": [
                93,
                99,
                110,
                114,
                128,
                130,
                143,
                145,
                158,
                162,
                182,
                193,
                195,
                219,
                226,
                229,
                240,
                247,
                250,
                264
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestDefaultReloadingDetectorFactory.java": [
                51,
                52,
                56,
                71,
                72,
                74
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestEventListenerParameters.java": [
                41,
                52,
                63,
                64,
                69,
                82,
                86
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedBuilderParameters.java": [
                54,
                66,
                67,
                78,
                91,
                94,
                109,
                112,
                123,
                124,
                136,
                139,
                150,
                151,
                162,
                165,
                176,
                178,
                190,
                193,
                206,
                207,
                218,
                222,
                246,
                259,
                260,
                281,
                288,
                299,
                301,
                302,
                306,
                323,
                326,
                335,
                353,
                365,
                375,
                404,
                405,
                407,
                408,
                429
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestFileBasedConfigurationBuilder.java": [
                72,
                82,
                95,
                110,
                112,
                115,
                128,
                129,
                134,
                147,
                148,
                153,
                155,
                167,
                168,
                174,
                186,
                187,
                188,
                196,
                207,
                208,
                215,
                228,
                229,
                230,
                253,
                266,
                267,
                271,
                282,
                285,
                286,
                298,
                299,
                304,
                316,
                319,
                321,
                334,
                335,
                336,
                339,
                352,
                353,
                362,
                374,
                375,
                380,
                383,
                396,
                397,
                402,
                419,
                420,
                426,
                472,
                488,
                509,
                512,
                526,
                529,
                530,
                549,
                550,
                553,
                556,
                558,
                561
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestHierarchicalBuilderParametersImpl.java": [
                52,
                65,
                69,
                82,
                83,
                87,
                91
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestJndiBuilderParametersImpl.java": [
                53,
                56,
                66,
                68,
                80,
                91,
                93,
                96
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestPropertiesBuilderParametersImpl.java": [
                66,
                79,
                93,
                102,
                115,
                120,
                124,
                140,
                142,
                147
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingBuilderSupportListener.java": [
                43,
                47,
                48,
                51,
                55,
                72,
                78,
                82
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestReloadingFileBasedConfigurationBuilder.java": [
                50,
                52,
                55,
                67,
                70,
                71,
                72,
                74,
                89,
                91,
                93,
                94,
                100,
                116,
                122,
                125,
                142,
                146,
                149,
                162,
                165,
                179,
                184,
                186,
                188,
                202,
                205,
                208,
                223,
                250,
                272
            ],
            "src/test/java/org/apache/commons/configuration2/builder/TestXMLBuilderParametersImpl.java": [
                53,
                67,
                80,
                92,
                126,
                127,
                136,
                149,
                150,
                154,
                157
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/AbstractMultiFileConfigurationBuilderTest.java": [
                52,
                76,
                89,
                103
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestBaseConfigurationBuilderProvider.java": [
                54,
                56,
                77,
                79,
                84,
                95,
                99,
                130,
                132,
                133,
                134,
                136,
                139,
                142,
                176,
                188,
                203,
                209,
                210,
                223,
                226,
                227,
                231,
                232,
                277,
                291
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedBuilderParametersImpl.java": [
                69,
                82,
                83,
                94,
                97,
                108,
                121,
                123,
                137,
                147,
                150,
                151,
                154,
                187,
                198,
                200,
                202,
                204,
                205,
                207,
                226,
                236,
                248,
                250,
                252,
                254,
                255,
                257,
                288,
                298,
                300,
                311,
                314,
                328,
                331,
                349,
                352,
                355,
                376,
                388,
                391,
                418,
                420,
                424,
                439,
                441,
                446,
                461,
                463,
                467,
                471,
                486,
                488,
                492
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilder.java": [
                143,
                157,
                158,
                160,
                162,
                163,
                198,
                211,
                226,
                243,
                265,
                270,
                314,
                319,
                332,
                346,
                347,
                352,
                354,
                358,
                387,
                388,
                403,
                416,
                460,
                464,
                466,
                480,
                481,
                483,
                484,
                487,
                489,
                500,
                516,
                518,
                519,
                534,
                537,
                542,
                543,
                557,
                559,
                574,
                579,
                581,
                597,
                610,
                615,
                621,
                635,
                639,
                650,
                657,
                673,
                685,
                689,
                702,
                705,
                707,
                721,
                727,
                738,
                744,
                755,
                759,
                760,
                762,
                777,
                780,
                781,
                782,
                786,
                800,
                842,
                844,
                849,
                863,
                870,
                872,
                887,
                890,
                894,
                905,
                907,
                913,
                929,
                936,
                950,
                953,
                954,
                960,
                961,
                983,
                989,
                990,
                992,
                996,
                1015,
                1030,
                1032,
                1037,
                1072,
                1084,
                1098,
                1101,
                1104,
                1117,
                1120,
                1123,
                1127,
                1143,
                1160,
                1173,
                1176,
                1179,
                1192,
                1207,
                1209,
                1229,
                1230,
                1242,
                1254,
                1256,
                1259,
                1260,
                1268,
                1272,
                1276,
                1295,
                1297,
                1319,
                1334,
                1336,
                1337,
                1345,
                1356,
                1357,
                1360,
                1361,
                1373,
                1374,
                1377,
                1381,
                1383,
                1396,
                1397,
                1401,
                1403,
                1405,
                1424,
                1431,
                1433,
                1448,
                1484,
                1496,
                1508,
                1549,
                1570,
                1584,
                1599
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestCombinedConfigurationBuilderVFS.java": [
                52,
                62,
                63,
                65,
                69,
                74
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestConfigurationDeclaration.java": [
                44,
                46,
                57,
                92,
                94,
                95,
                97,
                114,
                149,
                152
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestFileExtensionConfigurationBuilderProvider.java": [
                60,
                74,
                119,
                142,
                143,
                157,
                158,
                161,
                177,
                178,
                181,
                197,
                198,
                199,
                215,
                216,
                219,
                234,
                235,
                239
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileBuilderParametersImpl.java": [
                69,
                93,
                104,
                117,
                119,
                124,
                140,
                145
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiFileConfigurationBuilder.java": [
                71,
                90,
                96,
                97,
                100,
                117,
                119,
                138,
                146,
                162,
                165,
                166,
                170,
                173,
                178,
                181,
                193,
                202,
                230,
                231,
                235,
                245,
                248,
                261,
                266,
                270,
                282,
                293,
                295,
                317,
                319,
                336,
                338,
                342,
                355,
                356,
                358,
                362,
                364,
                379,
                380,
                382,
                398,
                399,
                404,
                408,
                423,
                426,
                429,
                445,
                448,
                449,
                452,
                456
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestMultiWrapDynaBean.java": [
                63,
                67,
                97,
                98,
                121,
                133,
                134,
                135,
                147,
                148,
                149,
                170,
                220,
                228,
                229,
                234,
                256,
                261,
                266,
                271,
                281
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilder.java": [
                61,
                71,
                84,
                87,
                92,
                94,
                97,
                111,
                116,
                118,
                121,
                125,
                138,
                145
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingCombinedConfigurationBuilderFileBased.java": [
                97,
                110,
                137,
                139,
                153,
                166,
                177,
                178,
                179,
                184,
                185,
                191,
                233,
                238,
                239,
                245,
                252,
                271,
                272,
                299,
                302,
                303,
                333,
                349,
                363,
                366,
                379,
                410,
                411,
                428,
                436
            ],
            "src/test/java/org/apache/commons/configuration2/builder/combined/TestReloadingMultiFileConfigurationBuilder.java": [
                55,
                56,
                59,
                63,
                74,
                77,
                94,
                97,
                109,
                115,
                120,
                137,
                144,
                167,
                173,
                176,
                226
            ],
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestConfigurations.java": [
                66,
                78,
                88,
                89,
                100,
                101,
                102,
                115,
                116,
                117,
                129,
                130,
                131,
                143,
                154,
                155,
                167,
                168,
                180,
                181,
                192,
                204,
                205,
                217,
                218,
                231,
                232,
                244,
                245,
                258,
                259,
                270,
                271,
                281,
                293,
                294,
                305,
                306,
                318,
                319,
                330,
                331,
                343,
                344,
                355,
                356,
                365,
                377,
                378,
                389,
                390,
                402,
                403,
                414,
                415,
                427,
                428,
                439,
                440,
                449,
                462,
                463,
                475,
                476,
                488,
                489,
                501,
                502,
                514,
                515,
                526,
                527
            ],
            "src/test/java/org/apache/commons/configuration2/builder/fluent/TestParameters.java": [
                70,
                81,
                91,
                105,
                109,
                125,
                137,
                140,
                162,
                163,
                176,
                180,
                192,
                207,
                208,
                213,
                238,
                239,
                245,
                274,
                276,
                282,
                307,
                308,
                309,
                314,
                328,
                348,
                353,
                357,
                359,
                371,
                387,
                388,
                414,
                416,
                422,
                435,
                437,
                442
            ],
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultConversionHandler.java": [
                71,
                87,
                99,
                109,
                128,
                140,
                150,
                180,
                200,
                203,
                219,
                239,
                240,
                256,
                259,
                272,
                275,
                292,
                293,
                309,
                330,
                344,
                345,
                358,
                373,
                374
            ],
            "src/test/java/org/apache/commons/configuration2/convert/TestDefaultListDelimiterHandler.java": [
                93,
                106,
                109,
                114,
                130,
                131,
                133,
                137
            ],
            "src/test/java/org/apache/commons/configuration2/convert/TestDisabledListDelimiterHandler.java": [
                61,
                63,
                64,
                104,
                136,
                137,
                152,
                164,
                165,
                189,
                201,
                202,
                214,
                217,
                219
            ],
            "src/test/java/org/apache/commons/configuration2/convert/TestPropertyConverter.java": [
                51,
                71,
                82,
                102,
                113,
                115,
                137,
                158,
                199,
                210,
                252,
                275,
                304,
                305
            ],
            "src/test/java/org/apache/commons/configuration2/event/AbstractEventListenerTestImpl.java": [
                49,
                56,
                66,
                77,
                80,
                96,
                100
            ],
            "src/test/java/org/apache/commons/configuration2/event/ErrorListenerTestImpl.java": [
                36,
                50,
                51,
                53
            ],
            "src/test/java/org/apache/commons/configuration2/event/EventListenerTestImpl.java": [
                36,
                49,
                50,
                52
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestConfigurationEventTypes.java": [
                45,
                56,
                68,
                70,
                144,
                201,
                250
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestDatabaseConfigurationEvents.java": [
                59
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestEvent.java": [
                54,
                55
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestEventListenerList.java": [
                105,
                118,
                119,
                135,
                136,
                151,
                165,
                179,
                180,
                215,
                228,
                271,
                287,
                289,
                290,
                305,
                306,
                308,
                342,
                343,
                356,
                357,
                370,
                371,
                374,
                390,
                403,
                406,
                411,
                424,
                435,
                438,
                444,
                481,
                482,
                483,
                485,
                490,
                519,
                520,
                527,
                529,
                548,
                549,
                568,
                569,
                582,
                583,
                600,
                623,
                624
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestEventSource.java": [
                71,
                73,
                95,
                129,
                141,
                169,
                195,
                210,
                213,
                220,
                236,
                237,
                238,
                242,
                279,
                309,
                310,
                314,
                341,
                342,
                343,
                344,
                351,
                372,
                373,
                381,
                382,
                383
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestEventType.java": [
                46
            ],
            "src/test/java/org/apache/commons/configuration2/event/TestHierarchicalConfigurationEvents.java": [
                54,
                55,
                56,
                57,
                73,
                74,
                103,
                122,
                135,
                141
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestConfigurationInterpolator.java": [
                82,
                117,
                153,
                206,
                207,
                208,
                291,
                292,
                293,
                295,
                298,
                320,
                331,
                335,
                358,
                370,
                399,
                411,
                427,
                442,
                452,
                464,
                480,
                495,
                509,
                521,
                532,
                551,
                554,
                569,
                570,
                572,
                577,
                595,
                599,
                622,
                634
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestConstantLookup.java": [
                58
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestEnvironmentLookup.java": [
                53,
                54,
                56
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestExprLookup.java": [
                62,
                63,
                71,
                72,
                73,
                77,
                81,
                82,
                84,
                100,
                102,
                103,
                113,
                115,
                125,
                127,
                128,
                139,
                141,
                142,
                144,
                145,
                155,
                157,
                158,
                168,
                178
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestInterpolatorSpecification.java": [
                61,
                63,
                86,
                87,
                105,
                106,
                120,
                121,
                122,
                123,
                124,
                126,
                128,
                148,
                149,
                150,
                151,
                152,
                155,
                169,
                181,
                220,
                231,
                247,
                248,
                249,
                250,
                251,
                253
            ],
            "src/test/java/org/apache/commons/configuration2/interpol/TestSystemPropertiesLookup.java": [
                49
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestAbsoluteNameLocationStrategy.java": [
                57,
                67,
                79,
                80,
                92,
                93,
                96
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestBasePathLocationStrategy.java": [
                59,
                73,
                74,
                86,
                87,
                99,
                114
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestClasspathLocationStrategy.java": [
                61,
                64,
                65,
                66,
                67,
                77,
                89
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestCombinedLocationStrategy.java": [
                117,
                119,
                123,
                156,
                170,
                173,
                184,
                198,
                216,
                233
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestConfigurationLogger.java": [
                70,
                72,
                85,
                88,
                100,
                103,
                115,
                118,
                130,
                133,
                145,
                148,
                160,
                161,
                164,
                176,
                179,
                191,
                192,
                195,
                207,
                220,
                223,
                240,
                250,
                251,
                263
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestDefaultFileSystem.java": [
                61
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestFileHandler.java": [
                81,
                94,
                107,
                133,
                135,
                150,
                158,
                171,
                185,
                196,
                198,
                212,
                214,
                228,
                242,
                245,
                258,
                275,
                289,
                290,
                307,
                310,
                322,
                323,
                324,
                338,
                345,
                357,
                373,
                395,
                397,
                399,
                411,
                433,
                435,
                437,
                461,
                462,
                473,
                474,
                475,
                479,
                485,
                498,
                499,
                500,
                511,
                512,
                518,
                531,
                542,
                552,
                553,
                565,
                566,
                567,
                578,
                579,
                580,
                593,
                594,
                595,
                607,
                608,
                609,
                610,
                628,
                629,
                630,
                631,
                649,
                650,
                651,
                663,
                664,
                665,
                678,
                679,
                689,
                690,
                691,
                704,
                705,
                706,
                710,
                716,
                729,
                739,
                740,
                741,
                759,
                760,
                771,
                772,
                773,
                784,
                785,
                797,
                798,
                799,
                800,
                804,
                812,
                826,
                827,
                830,
                837,
                851,
                852,
                865,
                866,
                878,
                889,
                890,
                891,
                892,
                893,
                894,
                898,
                910,
                911,
                924,
                925,
                927,
                928,
                949,
                960,
                971,
                982,
                993,
                1003,
                1014,
                1032,
                1033,
                1035,
                1048,
                1062,
                1064,
                1065,
                1077,
                1079,
                1091,
                1092,
                1094,
                1108,
                1110,
                1123,
                1125,
                1137,
                1139,
                1140,
                1162,
                1163,
                1176,
                1177,
                1180,
                1191,
                1192,
                1205,
                1206,
                1219,
                1220,
                1233,
                1234,
                1247,
                1248,
                1249,
                1262,
                1263,
                1266,
                1277,
                1278,
                1291,
                1292,
                1306,
                1308,
                1309,
                1323,
                1325,
                1326,
                1330,
                1336,
                1349,
                1350,
                1352,
                1364,
                1366,
                1368,
                1369,
                1390,
                1398,
                1406,
                1414,
                1422,
                1423,
                1427,
                1431,
                1448,
                1458,
                1460,
                1472,
                1475,
                1481,
                1482,
                1495,
                1497,
                1508,
                1510,
                1522,
                1526,
                1528,
                1555,
                1561,
                1567,
                1583,
                1586,
                1618,
                1624,
                1631,
                1651,
                1662,
                1669,
                1676,
                1683,
                1690,
                1697,
                1709
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocator.java": [
                73,
                87,
                105,
                119,
                124,
                161,
                206,
                217,
                228,
                233
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestFileLocatorUtils.java": [
                79,
                80,
                81,
                92,
                94,
                95,
                143,
                144,
                159,
                201,
                202,
                223,
                237,
                248,
                274,
                277,
                278,
                290,
                315,
                328,
                341,
                343,
                355,
                378,
                392,
                402,
                403,
                414,
                416,
                447,
                450,
                464,
                499,
                500,
                502,
                520,
                522,
                541,
                552,
                558,
                571,
                574,
                579,
                581,
                591,
                611
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestFileSystemLocationStrategy.java": [
                50,
                51,
                56
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestHomeDirectoryLocationStrategy.java": [
                68,
                80,
                93,
                94,
                97,
                98,
                110,
                113,
                123,
                124,
                126,
                129,
                130,
                142,
                143,
                145,
                146,
                157,
                159
            ],
            "src/test/java/org/apache/commons/configuration2/io/TestProvidedURLLocationStrategy.java": [
                51,
                53,
                54,
                65,
                67
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfiguration.java": [
                80,
                99,
                122,
                125,
                132,
                135,
                146,
                148,
                153,
                160,
                168,
                185,
                187,
                192,
                199,
                205,
                226,
                230,
                241,
                249,
                256,
                259,
                262,
                265,
                268,
                273,
                274,
                280,
                281,
                285,
                307,
                314,
                330,
                332,
                354,
                355,
                360,
                362,
                375,
                376,
                381,
                383,
                393,
                441
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListConfigurationEvents.java": [
                43,
                47
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestPropertyListParser.java": [
                58,
                74
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfiguration.java": [
                81,
                93,
                134,
                150,
                151,
                171,
                175,
                187,
                189,
                194,
                201,
                209,
                219,
                221,
                226,
                233,
                239,
                253,
                280,
                283,
                286,
                289,
                292,
                297,
                298,
                304,
                305,
                309,
                331,
                338,
                352,
                353,
                358,
                360,
                373,
                374,
                379,
                381,
                391,
                392,
                404,
                417,
                441,
                453,
                454,
                456,
                471,
                474,
                476,
                477,
                481,
                493,
                508,
                527,
                533
            ],
            "src/test/java/org/apache/commons/configuration2/plist/TestXMLPropertyListConfigurationEvents.java": [
                43,
                47
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestCombinedReloadingController.java": [
                77,
                80,
                103,
                116,
                134,
                135,
                151,
                158,
                175,
                176,
                191,
                193,
                206
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestFileHandlerReloadingDetector.java": [
                49,
                50,
                61,
                71,
                82,
                92,
                97,
                109,
                115,
                131,
                136,
                148,
                154,
                170,
                174,
                188,
                200,
                201,
                206,
                227,
                239
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestPeriodicReloadingTrigger.java": [
                79,
                120,
                153,
                166,
                169,
                191,
                195,
                208,
                213
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestReloadingController.java": [
                97,
                118,
                119,
                120,
                124,
                129,
                144,
                148,
                162,
                166,
                182
            ],
            "src/test/java/org/apache/commons/configuration2/reloading/TestVFSFileHandlerReloadingDetector.java": [
                66,
                68,
                80,
                82,
                86,
                97,
                98,
                101,
                113,
                128,
                135,
                155,
                176
            ],
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertiesFactoryBean.java": [
                70,
                72,
                75,
                76,
                84,
                100,
                116,
                119,
                137,
                142,
                151,
                154,
                165,
                170
            ],
            "src/test/java/org/apache/commons/configuration2/spring/TestConfigurationPropertySource.java": [
                59,
                61,
                65,
                75
            ],
            "src/test/java/org/apache/commons/configuration2/sync/TestReadWriteSynchronizer.java": [
                44,
                45,
                49,
                61,
                85,
                86,
                87,
                91,
                98,
                106,
                110,
                127,
                130,
                160,
                191,
                207,
                258,
                259,
                289
            ],
            "src/test/java/org/apache/commons/configuration2/test/HsqlDB.java": [
                42,
                67,
                72,
                83,
                88,
                105,
                108,
                110,
                111
            ],
            "src/test/java/org/apache/commons/configuration2/tree/AbstractCombinerTest.java": [
                74,
                76,
                78,
                83
            ],
            "src/test/java/org/apache/commons/configuration2/tree/AbstractImmutableNodeHandlerTest.java": [
                60,
                63,
                72,
                76,
                83,
                87,
                102,
                113,
                123,
                124,
                136,
                138,
                149,
                150,
                162,
                163,
                164,
                168,
                180,
                181,
                192,
                193,
                205,
                206,
                207,
                208,
                219,
                220,
                221,
                234,
                235,
                249,
                260,
                261,
                272,
                273,
                283,
                284,
                294,
                305,
                306,
                317,
                318,
                329,
                330,
                343,
                344,
                354,
                355,
                374,
                377,
                378,
                385,
                405,
                406,
                418,
                430
            ],
            "src/test/java/org/apache/commons/configuration2/tree/NodeStructureHelper.java": [
                138,
                149,
                161,
                173,
                186,
                207,
                218,
                230,
                243,
                245,
                263,
                265,
                280,
                296,
                297,
                309,
                321,
                333,
                346,
                348,
                374,
                385,
                387,
                388,
                404,
                413,
                415,
                416,
                433,
                434,
                436,
                441,
                443,
                476,
                493,
                497,
                501,
                503,
                525,
                530,
                532,
                537,
                541,
                579,
                580,
                587,
                602
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultConfigurationKey.java": [
                66,
                112,
                237,
                329,
                331,
                362,
                384,
                399,
                441,
                462,
                482,
                499,
                523,
                548,
                567,
                603,
                604,
                614
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngine.java": [
                165,
                183,
                185,
                186,
                238,
                296,
                337,
                363,
                381,
                398,
                414,
                452,
                532,
                544,
                545,
                559,
                602,
                628,
                633,
                640,
                651,
                653,
                668,
                682,
                685,
                686,
                703,
                704,
                706,
                707,
                730,
                732,
                744,
                746,
                760,
                762,
                763,
                777,
                779,
                780,
                792,
                793,
                797,
                811,
                813,
                825
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestDefaultExpressionEngineSymbols.java": [
                64,
                77,
                94,
                119,
                160,
                161
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestImmutableNode.java": [
                64,
                75,
                87,
                97,
                107,
                108,
                112,
                114,
                127,
                128,
                140,
                141,
                144,
                145,
                149,
                160,
                164,
                165,
                168,
                169,
                179,
                181,
                192,
                193,
                195,
                207,
                209,
                219,
                220,
                222,
                232,
                234,
                237,
                241,
                251,
                252,
                256,
                270,
                272,
                285,
                287,
                290,
                293,
                303,
                305,
                316,
                329,
                331,
                343,
                354,
                355,
                368,
                369,
                383,
                384,
                398,
                399,
                401,
                412,
                413,
                415,
                427,
                428,
                430,
                441,
                442,
                444,
                464,
                465,
                466,
                477,
                478,
                481,
                493,
                503,
                504,
                505,
                506,
                517,
                537,
                538,
                541,
                553,
                555,
                558,
                559,
                570,
                571,
                574,
                588,
                589,
                591,
                604,
                606,
                634,
                635,
                636,
                648,
                659,
                665,
                666,
                677,
                678
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModel.java": [
                67,
                68,
                82,
                92,
                116,
                117,
                121,
                125,
                130,
                134,
                153,
                154,
                157,
                164,
                177,
                178,
                182,
                187,
                192,
                195,
                208,
                209,
                211,
                227,
                228,
                232,
                239,
                250,
                251,
                255,
                263,
                275,
                276,
                279,
                286,
                297,
                299,
                313,
                314,
                315,
                324,
                325,
                327,
                343,
                344,
                346,
                347,
                348,
                362,
                374,
                386,
                398,
                401,
                402,
                403,
                424,
                425,
                426,
                427,
                430,
                443,
                455,
                456,
                459,
                461,
                479,
                480,
                482,
                491,
                492,
                506,
                507,
                509,
                510,
                526,
                538,
                539,
                546,
                558,
                572,
                573,
                574,
                596,
                614,
                626,
                627,
                630,
                655,
                666,
                681,
                690,
                695,
                697,
                700,
                701,
                704,
                718,
                719,
                731,
                741,
                742,
                755,
                765,
                766,
                774,
                786,
                787,
                790,
                793,
                803,
                815,
                816,
                820,
                832,
                842,
                843,
                847,
                850,
                854,
                864,
                876,
                877,
                897,
                898,
                901,
                903,
                914,
                915,
                928,
                929,
                946,
                959,
                960,
                970,
                981,
                982,
                996,
                1007,
                1009,
                1010,
                1043,
                1048,
                1059,
                1062,
                1073
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelReferences.java": [
                61,
                73,
                76,
                77,
                91,
                98,
                99,
                113,
                114,
                115,
                128,
                141,
                156,
                168,
                169,
                170,
                193,
                194,
                204,
                206,
                220,
                224,
                234,
                238,
                253,
                256,
                257,
                271,
                273,
                278
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestInMemoryNodeModelTrackedNodes.java": [
                106,
                108,
                143,
                164,
                167,
                179,
                181,
                192,
                205,
                207,
                220,
                222,
                250,
                262,
                275,
                286,
                298,
                310,
                323,
                358,
                363,
                364,
                372,
                374,
                386,
                389,
                399,
                401,
                404,
                414,
                417,
                427,
                429,
                432,
                441,
                446,
                458,
                463,
                474,
                490,
                495,
                508,
                525,
                530,
                545,
                556,
                558,
                559,
                561,
                581,
                587,
                589,
                603,
                618,
                623,
                639,
                643,
                655,
                657,
                663,
                674,
                677,
                690,
                703,
                714,
                737,
                738,
                740,
                751,
                752,
                753,
                754,
                755,
                763,
                765,
                781,
                801,
                808,
                822,
                823,
                824,
                827,
                838,
                843,
                858,
                860,
                865,
                909,
                910,
                911,
                912,
                913,
                914,
                921,
                935,
                936,
                937,
                938,
                939,
                950,
                954,
                957,
                970,
                972,
                997
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestMergeCombiner.java": [
                55,
                71,
                88,
                105,
                121,
                142,
                169,
                173,
                181,
                182
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeAddData.java": [
                57,
                70,
                83,
                85,
                102
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeHandlerDecorator.java": [
                33
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeNameMatchers.java": [
                43,
                53,
                64,
                75,
                91,
                114,
                129
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeSelector.java": [
                73,
                86,
                87,
                99,
                106,
                116,
                118,
                122,
                131,
                142,
                152,
                153,
                155,
                166,
                167,
                178,
                179,
                192,
                193,
                194,
                195,
                197,
                208,
                210,
                212,
                213,
                223,
                236,
                248,
                249
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeTreeWalker.java": [
                41,
                108,
                109,
                120,
                121,
                134,
                146,
                168,
                183,
                184,
                195,
                196,
                209,
                210,
                211,
                239,
                289,
                295,
                296,
                302,
                303
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestNodeUpdateData.java": [
                43,
                56,
                67,
                70,
                73,
                86,
                88,
                91,
                102,
                105,
                108,
                120,
                123,
                134,
                136,
                147,
                150
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java": [
                56,
                72,
                89,
                107,
                123,
                161,
                165,
                173,
                174,
                190,
                195,
                203
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestQueryResult.java": [
                65,
                76,
                87,
                100,
                128,
                130,
                148,
                160,
                172,
                174
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeHandler.java": [
                72,
                73
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestTrackedNodeModel.java": [
                107,
                111,
                138,
                151,
                165,
                195,
                198,
                258,
                270,
                271,
                275
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestTreeData.java": [
                31,
                33
            ],
            "src/test/java/org/apache/commons/configuration2/tree/TestUnionCombiner.java": [
                50,
                68,
                89,
                102,
                124
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/AbstractXPathTest.java": [
                90,
                92,
                104,
                128,
                130,
                145,
                146,
                150,
                153,
                156
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationAttributePointer.java": [
                59,
                61,
                95,
                97,
                120
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationIteratorAttributes.java": [
                59,
                60,
                74,
                78,
                79,
                80,
                95,
                109,
                121,
                133,
                147
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodeIteratorChildren.java": [
                70,
                82,
                95,
                108,
                109,
                122,
                123,
                136,
                137,
                141,
                154,
                155,
                167,
                168,
                181,
                182,
                194,
                197,
                201,
                204,
                206,
                219,
                222,
                228,
                242,
                246,
                251,
                263,
                279,
                280,
                284,
                297,
                298,
                302,
                318,
                320,
                323
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointer.java": [
                58,
                60,
                75,
                76,
                77,
                80,
                113,
                135,
                137,
                144,
                155
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestConfigurationNodePointerFactory.java": [
                66,
                67,
                92,
                95,
                97,
                129,
                140,
                150,
                153,
                165
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathContextFactory.java": [
                51,
                53,
                55,
                58
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngine.java": [
                74,
                76,
                90,
                92,
                105,
                115,
                116,
                117,
                130,
                132,
                133,
                134,
                146,
                147,
                176,
                178,
                181,
                182,
                196,
                199,
                215,
                226,
                237,
                248,
                259,
                270,
                281,
                282,
                283,
                294,
                295,
                296,
                307,
                308,
                309,
                321,
                322,
                323,
                334,
                335,
                336,
                347,
                348,
                349,
                360,
                361,
                371,
                381,
                391,
                402,
                404,
                405,
                463,
                464,
                476,
                477,
                480,
                483,
                501,
                502,
                503,
                506,
                507,
                509,
                521,
                522,
                523,
                524,
                527,
                528,
                530,
                544,
                545,
                546,
                547,
                549,
                561,
                572
            ],
            "src/test/java/org/apache/commons/configuration2/tree/xpath/TestXPathExpressionEngineInConfig.java": [
                128,
                136,
                139,
                141
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestAppletConfiguration.java": [
                59,
                78,
                86,
                135,
                153
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestServletConfiguration.java": [
                48,
                61
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestServletContextConfiguration.java": [
                54,
                57,
                74,
                88,
                97
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestServletFilterConfiguration.java": [
                42,
                48,
                76,
                87
            ],
            "src/test/java/org/apache/commons/configuration2/web/TestServletRequestConfiguration.java": [
                62,
                65,
                89,
                92,
                104,
                129,
                130,
                132,
                137,
                138
            ]
        }
    }
]