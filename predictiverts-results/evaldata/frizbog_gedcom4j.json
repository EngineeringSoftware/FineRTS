[
    {
        "commit": "aae53937",
        "prev_commit": "b8216f37",
        "changed_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 12,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        String[] dateStrings = splitTwoDateString(frenchRepublicanDateString, \" AND \");\n+        if (dateStrings == null) {\n+            dateStrings = splitTwoDateString(frenchRepublicanDateString, \" TO \");\n+        }\n+        if (dateStrings == null) {\n+            return null;\n+        }\n+        switch (pref) {\n+            case FAVOR_EARLIEST:\n+                return parseFrenchRepublicanSingleDate(dateStrings[0], pref);\n+            case FAVOR_LATEST:\n+                return parseFrenchRepublicanSingleDate(dateStrings[1], pref);\n+            case FAVOR_MIDPOINT:\n+                Date d1 = parseFrenchRepublicanSingleDate(dateStrings[0], ImpreciseDatePreference.FAVOR_EARLIEST);\n+                Date d2 = parseFrenchRepublicanSingleDate(dateStrings[1], ImpreciseDatePreference.FAVOR_LATEST);\n+                if (d1 == null || d2 == null) {\n+                    return null;\n+                }\n+                long daysBetween = TimeUnit.DAYS.convert(d2.getTime() - d1.getTime(), TimeUnit.MILLISECONDS);\n+                Calendar c = Calendar.getInstance(Locale.US);\n+                c.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+                c.setTime(d1);\n+                c.add(Calendar.DAY_OF_YEAR, (int) daysBetween / 2);\n+                Date result = c.getTime();\n+                return result;\n+            case PRECISE:\n+                return parseFrenchRepublicanSingleDate(dateStrings[0], pref);\n+            default:\n+                throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n+        }\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5 THER 224 TO 11 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n+                Calendar.JULY, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5 THER 224 TO 11 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n+                Calendar.JULY, 28);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5 THER 224 TO 11 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n+                Calendar.JULY, 25);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM VEND 4 TO THER 4\", ImpreciseDatePreference.FAVOR_EARLIEST), 1795, Calendar.SEPTEMBER,\n+                23);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM VEND 4 TO THER 4\", ImpreciseDatePreference.FAVOR_LATEST), 1796, Calendar.AUGUST, 17);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM VEND 4 TO THER 4\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1796, Calendar.MARCH, 5);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 TO 5\", ImpreciseDatePreference.FAVOR_EARLIEST), 1792, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 TO 5\", ImpreciseDatePreference.FAVOR_LATEST), 1797, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 TO 5\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1795, Calendar.MARCH, 23);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BET 5 THER 224 AND 11 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n+                Calendar.JULY, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BET 5 THER 224 AND 11 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n+                Calendar.JULY, 28);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BET 5 THER 224 AND 11 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n+                Calendar.JULY, 25);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BET VEND 4 AND THER 4\", ImpreciseDatePreference.FAVOR_EARLIEST), 1795, Calendar.SEPTEMBER,\n+                23);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BET VEND 4 AND THER 4\", ImpreciseDatePreference.FAVOR_LATEST), 1796, Calendar.AUGUST, 17);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BET VEND 4 AND THER 4\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1796, Calendar.MARCH, 5);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BET 1 AND 5\", ImpreciseDatePreference.FAVOR_EARLIEST), 1792, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BET 1 AND 5\", ImpreciseDatePreference.FAVOR_LATEST), 1797, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BET 1 AND 5\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1795, Calendar.MARCH, 23);\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "        String[] dateStrings = splitTwoDateString(frenchRepublicanDateString, \" AND \");\n        if (dateStrings == null) {\n            dateStrings = splitTwoDateString(frenchRepublicanDateString, \" TO \");\n        }\n        if (dateStrings == null) {\n            return null;\n        }\n        switch (pref) {\n            case FAVOR_EARLIEST:\n                return parseFrenchRepublicanSingleDate(dateStrings[0], pref);\n            case FAVOR_LATEST:\n                return parseFrenchRepublicanSingleDate(dateStrings[1], pref);\n            case FAVOR_MIDPOINT:\n                Date d1 = parseFrenchRepublicanSingleDate(dateStrings[0], ImpreciseDatePreference.FAVOR_EARLIEST);\n                Date d2 = parseFrenchRepublicanSingleDate(dateStrings[1], ImpreciseDatePreference.FAVOR_LATEST);\n                if (d1 == null || d2 == null) {\n                    return null;\n                }\n                long daysBetween = TimeUnit.DAYS.convert(d2.getTime() - d1.getTime(), TimeUnit.MILLISECONDS);\n                Calendar c = Calendar.getInstance(Locale.US);\n                c.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n                c.setTime(d1);\n                c.add(Calendar.DAY_OF_YEAR, (int) daysBetween / 2);\n                Date result = c.getTime();\n                return result;\n            case PRECISE:\n                return parseFrenchRepublicanSingleDate(dateStrings[0], pref);\n            default:\n                throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n        }\n",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5 THER 224 TO 11 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n                Calendar.JULY, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5 THER 224 TO 11 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n                Calendar.JULY, 28);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5 THER 224 TO 11 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n                Calendar.JULY, 25);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM VEND 4 TO THER 4\", ImpreciseDatePreference.FAVOR_EARLIEST), 1795, Calendar.SEPTEMBER,\n                23);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM VEND 4 TO THER 4\", ImpreciseDatePreference.FAVOR_LATEST), 1796, Calendar.AUGUST, 17);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM VEND 4 TO THER 4\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1796, Calendar.MARCH, 5);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 TO 5\", ImpreciseDatePreference.FAVOR_EARLIEST), 1792, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 TO 5\", ImpreciseDatePreference.FAVOR_LATEST), 1797, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 TO 5\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1795, Calendar.MARCH, 23);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET 5 THER 224 AND 11 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n                Calendar.JULY, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET 5 THER 224 AND 11 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n                Calendar.JULY, 28);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET 5 THER 224 AND 11 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n                Calendar.JULY, 25);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET VEND 4 AND THER 4\", ImpreciseDatePreference.FAVOR_EARLIEST), 1795, Calendar.SEPTEMBER,\n                23);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET VEND 4 AND THER 4\", ImpreciseDatePreference.FAVOR_LATEST), 1796, Calendar.AUGUST, 17);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET VEND 4 AND THER 4\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1796, Calendar.MARCH, 5);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET 1 AND 5\", ImpreciseDatePreference.FAVOR_EARLIEST), 1792, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET 1 AND 5\", ImpreciseDatePreference.FAVOR_LATEST), 1797, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET 1 AND 5\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1795, Calendar.MARCH, 23);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                430,
                431,
                432,
                433,
                434,
                435,
                436,
                439,
                440,
                441,
                442,
                443,
                444,
                445,
                446,
                447,
                448,
                449,
                450,
                451,
                452,
                453,
                454,
                455,
                456,
                457,
                458,
                459,
                460,
                461
            ],
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                356,
                357,
                358,
                359,
                360,
                361,
                363,
                364,
                365,
                366,
                368,
                369,
                370,
                378,
                379,
                380,
                381,
                382,
                383,
                385,
                386,
                387,
                388,
                390,
                391,
                392
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "        return null;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                426
            ]
        }
    },
    {
        "commit": "98116dba",
        "prev_commit": "25ff4d78",
        "changed_files": [
            "src/main/java/org/gedcom4j/model/Individual.java",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/model/Individual.java",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+                    if (fam.getWife() != null) {\n+                        sb.append(\", spouse of \");\n+                    if (fam.getHusband() != null) {\n+                        sb.append(\", spouse of \");\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/model/Individual.java": "                    if (fam.getWife() != null) {\n                        sb.append(\", spouse of \");\n                    if (fam.getHusband() != null) {\n                        sb.append(\", spouse of \");\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/model/Individual.java": [
                1150,
                1151,
                1155,
                1156
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/model/Individual.java": "                sb.append(\", spouse of \");\n                    if (fam.getWife() == null) {\n                        sb.append(\"unknown\");\n                    } else {\n                    if (fam.getHusband() == null) {\n                        sb.append(\"unknown\");\n                    } else {\n",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "        System.out.println(\">getExtendedAncestry(\" + individual + \")\");\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/model/Individual.java": [
                1148,
                1151,
                1152,
                1153,
                1157,
                1158,
                1159
            ],
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                78
            ]
        }
    },
    {
        "commit": "349956f5",
        "prev_commit": "7f99186f",
        "changed_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewMonth.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewMonth.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 12,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        String ds = dateString.toUpperCase(Locale.US);\n+                d = Integer.toString(1 - i);\n+        String frds = removeApproximations(frenchRepublicanDateString.toUpperCase(Locale.US));\n+        String hds = removeApproximations(hebrewDateString.toUpperCase(Locale.US));\n+    String removePrefixes(String dateString, String... prefixes) {\n+        String newYY = dateString.substring(l - 2);\n+        return new String[] {};\n+        SimpleDateFormat sdf = new SimpleDateFormat(pattern, Locale.US);\n+        if (dateStrings.length == 0) {\n+        if (dateStrings.length == 0) {\n+                return c.getTime();\n+        if (dateStrings.length == 0) {\n+        if (dateStrings.length == 0) {\n+                return c.getTime();\n+        if (dateStrings.length == 0) {\n+        if (dateStrings.length == 0) {\n+                return c.getTime();\n+    private Date parseFrenchRepublicanDayMonthYear(String... datePieces) {\n+        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n+        int frYear = Integer.parseInt(datePieces[2]);\n+        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n+        int frYear = Integer.parseInt(datePieces[1]);\n+        ds = removeApproximations(dateString.toUpperCase(Locale.US));\n+    private Date parseHebrewDayMonthYear(String... datePieces) {\n+            HebrewCalendarParser hc = new HebrewCalendarParser();\n+            int hebrewDay = Integer.parseInt(datePieces[0]);\n+            int hebrewYear = Integer.parseInt(datePieces[2]);\n+    private Date parseHebrewMonthYear(ImpreciseDatePreference pref, String... datePieces) {\n+            HebrewCalendarParser hc = new HebrewCalendarParser();\n+            int hebrewYear = Integer.parseInt(datePieces[1]);\n+    private Date parseHebrewYearOnly(ImpreciseDatePreference pref, String... datePieces) {\n+        return (int) TimeUnit.DAYS.convert(nextNewYear.getTime() - thisNewYear.getTime(), TimeUnit.MILLISECONDS);\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "        String ds = dateString.toUpperCase(Locale.US);\n                d = Integer.toString(1 - i);\n        String frds = removeApproximations(frenchRepublicanDateString.toUpperCase(Locale.US));\n        String hds = removeApproximations(hebrewDateString.toUpperCase(Locale.US));\n    String removePrefixes(String dateString, String... prefixes) {\n        String newYY = dateString.substring(l - 2);\n        return new String[] {};\n        SimpleDateFormat sdf = new SimpleDateFormat(pattern, Locale.US);\n        if (dateStrings.length == 0) {\n        if (dateStrings.length == 0) {\n                return c.getTime();\n        if (dateStrings.length == 0) {\n        if (dateStrings.length == 0) {\n                return c.getTime();\n        if (dateStrings.length == 0) {\n        if (dateStrings.length == 0) {\n                return c.getTime();\n    private Date parseFrenchRepublicanDayMonthYear(String... datePieces) {\n        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n        int frYear = Integer.parseInt(datePieces[2]);\n        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n        int frYear = Integer.parseInt(datePieces[1]);\n        ds = removeApproximations(dateString.toUpperCase(Locale.US));\n    private Date parseHebrewDayMonthYear(String... datePieces) {\n            HebrewCalendarParser hc = new HebrewCalendarParser();\n            int hebrewDay = Integer.parseInt(datePieces[0]);\n            int hebrewYear = Integer.parseInt(datePieces[2]);\n    private Date parseHebrewMonthYear(ImpreciseDatePreference pref, String... datePieces) {\n            HebrewCalendarParser hc = new HebrewCalendarParser();\n            int hebrewYear = Integer.parseInt(datePieces[1]);\n    private Date parseHebrewYearOnly(ImpreciseDatePreference pref, String... datePieces) {\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": "        return (int) TimeUnit.DAYS.convert(nextNewYear.getTime() - thisNewYear.getTime(), TimeUnit.MILLISECONDS);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                177,
                214,
                230,
                264,
                320,
                362,
                395,
                409,
                432,
                435,
                456,
                478,
                481,
                502,
                522,
                525,
                546,
                673,
                678,
                679,
                700,
                701,
                792,
                833,
                840,
                841,
                842,
                857,
                863,
                864,
                896
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": [
                221
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "        String ds = dateString.toUpperCase();\n                d = \"\" + (1 - i);\n        String frds = removeApproximations(frenchRepublicanDateString.toUpperCase());\n        String hds = removeApproximations(hebrewDateString.toUpperCase());\n    String removePrefixes(String dateString, String[] prefixes) {\n        String newYY = dateString.substring(l - 2);\n        return null;\n        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n        if (dateStrings == null) {\n        if (dateStrings == null) {\n                Date result = c.getTime();\n                return result;\n        if (dateStrings == null) {\n        if (dateStrings == null) {\n                Date result = c.getTime();\n                return result;\n        if (dateStrings == null) {\n        if (dateStrings == null) {\n                Date result = c.getTime();\n                return result;\n    private Date parseFrenchRepublicanDayMonthYear(String[] datePieces) {\n        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n        int frYear = Integer.parseInt(datePieces[2]);\n        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n        int frYear = Integer.parseInt(datePieces[1]);\n        ds = removeApproximations(dateString.toUpperCase());\n    private Date parseHebrewDayMonthYear(String[] datePieces) {\n            HebrewCalendarParser hc = new HebrewCalendarParser();\n            int hebrewDay = Integer.parseInt(datePieces[0]);\n            int hebrewYear = Integer.parseInt(datePieces[2]);\n    private Date parseHebrewMonthYear(ImpreciseDatePreference pref, String[] datePieces) {\n            HebrewCalendarParser hc = new HebrewCalendarParser();\n            int hebrewYear = Integer.parseInt(datePieces[1]);\n    private Date parseHebrewYearOnly(ImpreciseDatePreference pref, String[] datePieces) {\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": "        long diff = TimeUnit.DAYS.convert(nextNewYear.getTime() - thisNewYear.getTime(), TimeUnit.MILLISECONDS);\n        return (int) diff;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                177,
                214,
                230,
                264,
                320,
                356,
                394,
                408,
                431,
                434,
                455,
                456,
                478,
                481,
                502,
                503,
                523,
                526,
                547,
                548,
                675,
                676,
                677,
                698,
                699,
                794,
                835,
                837,
                839,
                841,
                860,
                862,
                863,
                899
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": [
                221,
                222
            ]
        }
    },
    {
        "commit": "7fcd9043",
        "prev_commit": "eaf39ef1",
        "changed_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java"
        ],
        "changed_java_files_num": 3,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "HebrewCalendarTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 43,
            "FamilyEventTypeParseTest": 1,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 12,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private static final String FORMAT_RANGE_PERIOD_PREFIX = \"(FROM|BEF|BEF\\\\.|BET|BET\\\\.|BTW|BTW\\\\.|AFT|AFT\\\\.|TO|BETWEEN) \";\n+    private static final String FORMAT_MONTH_GREGORIAN_JULIAN = \"(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\";\n+    static final Pattern PATTERN_SINGLE_DATE_FULL_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \" \"\n+            + FORMAT_MONTH_GREGORIAN_JULIAN + \" \" + FORMAT_YEAR);\n+    static final Pattern PATTERN_SINGLE_DATE_MONTH_YEAR_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE\n+            + FORMAT_MONTH_GREGORIAN_JULIAN + \" \" + FORMAT_YEAR);\n+    static final Pattern PATTERN_SINGLE_DATE_YEAR_ONLY = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_YEAR);\n+    static final Pattern PATTERN_TWO_DATES = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_RANGE_PERIOD_PREFIX + FORMAT_DATE_MISC\n+            + FORMAT_YEAR + \" (AND|TO) \" + FORMAT_DATE_MISC + FORMAT_YEAR);\n+    static final Pattern PATTERN_SINGLE_HEBREW_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \"? ?\"\n+        if (ds.startsWith(\"@#DHEBREW@ \")) {\n+            return parseHebrew(ds.substring(\"@#DHEBREW@ \".length()), pref);\n+        if (ds.startsWith(\"@#DGREGORIAN@ \")) {\n+            return parseGregorianJulian(ds.substring(\"@#DGREGORIAN@ \".length()), pref);\n+        if (ds.startsWith(\"@#DJULIAN@ \")) {\n+            return parseGregorianJulian(ds.substring(\"@#DJULIAN@ \".length()), pref);\n+        return parseGregorianJulian(ds, pref);\n+    Date parseHebrewSingleDate(String hebrewDateString, ImpreciseDatePreference pref) {\n+        String hds = removeApproximations(hebrewDateString.toUpperCase());\n+        hds = removeOpenEndedRangesAndPeriods(hds);\n+        if (!PATTERN_SINGLE_HEBREW_DATE.matcher(hds).matches()) {\n+        String[] datePieces = hds.split(\" \");\n+        HebrewCalendar hc = new HebrewCalendar();\n+            switch (pref) {\n+                case FAVOR_EARLIEST:\n+                    hebrewDay = 1;\n+                    break;\n+                case FAVOR_LATEST:\n+                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n+                    break;\n+                case FAVOR_MIDPOINT:\n+                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n+                    break;\n+                case PRECISE:\n+                    hebrewDay = 1;\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n+            }\n+            switch (pref) {\n+                case FAVOR_EARLIEST:\n+                    hebrewMonth = 1;\n+                    hebrewDay = 1;\n+                    break;\n+                case FAVOR_LATEST:\n+                    hebrewMonth = HebrewMonth.values().length;\n+                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n+                    break;\n+                case FAVOR_MIDPOINT:\n+                    hebrewMonth = HebrewMonth.values().length / 2;\n+                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n+                    break;\n+                case PRECISE:\n+                    hebrewMonth = 1;\n+                    hebrewDay = 1;\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n+            }\n+    private Date getPreferredDateFromHebrewRangeOrPeriod(String hebrewDateString, ImpreciseDatePreference pref) {\n+        String[] dateStrings = splitTwoDateString(hebrewDateString, \" AND \");\n+        if (dateStrings == null) {\n+            dateStrings = splitTwoDateString(hebrewDateString, \" TO \");\n+        }\n+        if (dateStrings == null) {\n+            return null;\n+        }\n+        switch (pref) {\n+            case FAVOR_EARLIEST:\n+                return parseHebrewSingleDate(dateStrings[0], pref);\n+            case FAVOR_LATEST:\n+                return parseHebrewSingleDate(dateStrings[1], pref);\n+            case FAVOR_MIDPOINT:\n+                Date d1 = parseHebrewSingleDate(dateStrings[0], ImpreciseDatePreference.FAVOR_EARLIEST);\n+                Date d2 = parseHebrewSingleDate(dateStrings[1], ImpreciseDatePreference.FAVOR_LATEST);\n+                if (d1 == null || d2 == null) {\n+                    return null;\n+                }\n+                long daysBetween = TimeUnit.DAYS.convert(d2.getTime() - d1.getTime(), TimeUnit.MILLISECONDS);\n+                Calendar c = Calendar.getInstance(Locale.US);\n+                c.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+                c.setTime(d1);\n+                c.add(Calendar.DAY_OF_YEAR, (int) daysBetween / 2);\n+                Date result = c.getTime();\n+                return result;\n+            case PRECISE:\n+                return parseHebrewSingleDate(dateStrings[0], pref);\n+            default:\n+                throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n+        }\n+    }\n+                if (d1 == null || d2 == null) {\n+                    return null;\n+                }\n+    private Date parseGregorianJulian(String dateString, ImpreciseDatePreference pref) {\n+        String ds;\n+        ds = removeApproximations(dateString.toUpperCase());\n+        ds = removeOpenEndedRangesAndPeriods(ds);\n+        if (PATTERN_SINGLE_DATE_FULL_GREGORIAN_JULIAN.matcher(ds).matches()) {\n+            return getYearMonthDay(ds);\n+        }\n+        if (PATTERN_SINGLE_DATE_MONTH_YEAR_GREGORIAN_JULIAN.matcher(ds).matches()) {\n+            return getYearMonthNoDay(ds, pref);\n+        }\n+        if (PATTERN_SINGLE_DATE_YEAR_ONLY.matcher(ds).matches()) {\n+            return getYearOnly(ds, pref);\n+        }\n+        if (PATTERN_TWO_DATES.matcher(ds).matches()) {\n+            return getPreferredDateFromRangeOrPeriod(ds, pref);\n+        }\n+        return null;\n+    }\n+    private Date parseHebrew(String hebrewDateString, ImpreciseDatePreference pref) {\n+        if (PATTERN_TWO_DATES.matcher(hebrewDateString).matches()) {\n+            return getPreferredDateFromHebrewRangeOrPeriod(hebrewDateString, pref);\n+        }\n+        return parseHebrewSingleDate(hebrewDateString, pref);\n+    }\n+    int getMonthLength(int hebrewYear, int hebrewMonthNum) {\n+        boolean leapYear = isLeapYear(hebrewYear);\n+        int lenHebrewYear = getLengthOfYear(hebrewYear);\n+        boolean haserYear = (lenHebrewYear == 353 || lenHebrewYear == 383);\n+        boolean shalemYear = (lenHebrewYear == 355 || lenHebrewYear == 385);\n+        int monthLength = 0;\n+        if (hebrewMonthNum == 1 || hebrewMonthNum == 5 || hebrewMonthNum == 8 || hebrewMonthNum == 10 || hebrewMonthNum == 12) {\n+            monthLength = 30;\n+        } else if (hebrewMonthNum == 4 || hebrewMonthNum == 7 || hebrewMonthNum == 9 || hebrewMonthNum == 11\n+                || hebrewMonthNum == 13) {\n+            monthLength = 29;\n+        } else if (hebrewMonthNum == 6) {\n+            monthLength = (leapYear ? 30 : 0);\n+        } else if (hebrewMonthNum == 2) {\n+            monthLength = (shalemYear ? 30 : 29);\n+        } else if (hebrewMonthNum == 3) {\n+            monthLength = (haserYear ? 29 : 30);\n+        }\n+        return monthLength;\n+    }\n+    @Test\n+    public void testParseHebrewDatePeriod() {\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776 TO 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n+                Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776 TO 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n+                Calendar.JULY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776 TO 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n+                Calendar.JULY, 30);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776 TO AAV 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n+                7);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776 TO AAV 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST,\n+                5);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776 TO AAV 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER,\n+                3);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776 TO 5777\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776 TO 5777\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.SEPTEMBER, 16);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776 TO 5777\", ImpreciseDatePreference.FAVOR_LATEST), 2017, Calendar.SEPTEMBER, 20);\n+    }\n+    @Test\n+    public void testParseHebrewDateRange() {\n+        assertDate(dp.parse(\"@#DHEBREW@ BET 12 TMZ 5776 AND 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n+                Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ BET 12 TMZ 5776 AND 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n+                Calendar.JULY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ BET 12 TMZ 5776 AND 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n+                Calendar.JULY, 30);\n+        assertDate(dp.parse(\"@#DHEBREW@ BET TMZ 5776 AND AAV 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n+                7);\n+        assertDate(dp.parse(\"@#DHEBREW@ BET TMZ 5776 AND AAV 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST,\n+                5);\n+        assertDate(dp.parse(\"@#DHEBREW@ BET TMZ 5776 AND AAV 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER,\n+                3);\n+        assertDate(dp.parse(\"@#DHEBREW@ BET 5776 AND 5777\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ BET 5776 AND 5777\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.SEPTEMBER, 16);\n+        assertDate(dp.parse(\"@#DHEBREW@ BET 5776 AND 5777\", ImpreciseDatePreference.FAVOR_LATEST), 2017, Calendar.SEPTEMBER, 20);\n+    }\n+    @Test\n+    public void testParseHebrewSingleDatesFavorEarliest() {\n+        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT 12 TMZ 5776 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n+                18);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT TMZ 5776 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n+    }\n+    @Test\n+    public void testParseHebrewSingleDatesFavorLatest() {\n+        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n+        assertDate(dp.parse(\"@#DHEBREW@ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT 12 TMZ 5776 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT TMZ 5776  (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n+    }\n+    @Test\n+    public void testParseHebrewSingleDatesFavorMidpoint() {\n+        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DHEBREW@ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT 12 TMZ 5776 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY,\n+                18);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT TMZ 5776  (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n+    }\n+    @Test\n+    public void testParseHebrewSingleDatesNoPref() {\n+        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT 12 TMZ 5776 (Because)\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT TMZ 5776 (Because)\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\"), 2015, Calendar.SEPTEMBER, 14);\n+    }\n+    public void testParseInterpretedDatesGregorian() {\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "    private static final String FORMAT_RANGE_PERIOD_PREFIX = \"(FROM|BEF|BEF\\\\.|BET|BET\\\\.|BTW|BTW\\\\.|AFT|AFT\\\\.|TO|BETWEEN) \";\n    private static final String FORMAT_MONTH_GREGORIAN_JULIAN = \"(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\";\n    static final Pattern PATTERN_SINGLE_DATE_FULL_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \" \"\n            + FORMAT_MONTH_GREGORIAN_JULIAN + \" \" + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_DATE_MONTH_YEAR_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE\n            + FORMAT_MONTH_GREGORIAN_JULIAN + \" \" + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_DATE_YEAR_ONLY = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_YEAR);\n    static final Pattern PATTERN_TWO_DATES = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_RANGE_PERIOD_PREFIX + FORMAT_DATE_MISC\n            + FORMAT_YEAR + \" (AND|TO) \" + FORMAT_DATE_MISC + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_HEBREW_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \"? ?\"\n        if (ds.startsWith(\"@#DHEBREW@ \")) {\n            return parseHebrew(ds.substring(\"@#DHEBREW@ \".length()), pref);\n        if (ds.startsWith(\"@#DGREGORIAN@ \")) {\n            return parseGregorianJulian(ds.substring(\"@#DGREGORIAN@ \".length()), pref);\n        if (ds.startsWith(\"@#DJULIAN@ \")) {\n            return parseGregorianJulian(ds.substring(\"@#DJULIAN@ \".length()), pref);\n        return parseGregorianJulian(ds, pref);\n    Date parseHebrewSingleDate(String hebrewDateString, ImpreciseDatePreference pref) {\n        String hds = removeApproximations(hebrewDateString.toUpperCase());\n        hds = removeOpenEndedRangesAndPeriods(hds);\n        if (!PATTERN_SINGLE_HEBREW_DATE.matcher(hds).matches()) {\n        String[] datePieces = hds.split(\" \");\n        HebrewCalendar hc = new HebrewCalendar();\n            switch (pref) {\n                case FAVOR_EARLIEST:\n                    hebrewDay = 1;\n                    break;\n                case FAVOR_LATEST:\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n                    break;\n                case FAVOR_MIDPOINT:\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n                    break;\n                case PRECISE:\n                    hebrewDay = 1;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n            }\n            switch (pref) {\n                case FAVOR_EARLIEST:\n                    hebrewMonth = 1;\n                    hebrewDay = 1;\n                    break;\n                case FAVOR_LATEST:\n                    hebrewMonth = HebrewMonth.values().length;\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n                    break;\n                case FAVOR_MIDPOINT:\n                    hebrewMonth = HebrewMonth.values().length / 2;\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n                    break;\n                case PRECISE:\n                    hebrewMonth = 1;\n                    hebrewDay = 1;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n            }\n    private Date getPreferredDateFromHebrewRangeOrPeriod(String hebrewDateString, ImpreciseDatePreference pref) {\n        String[] dateStrings = splitTwoDateString(hebrewDateString, \" AND \");\n        if (dateStrings == null) {\n            dateStrings = splitTwoDateString(hebrewDateString, \" TO \");\n        }\n        if (dateStrings == null) {\n            return null;\n        }\n        switch (pref) {\n            case FAVOR_EARLIEST:\n                return parseHebrewSingleDate(dateStrings[0], pref);\n            case FAVOR_LATEST:\n                return parseHebrewSingleDate(dateStrings[1], pref);\n            case FAVOR_MIDPOINT:\n                Date d1 = parseHebrewSingleDate(dateStrings[0], ImpreciseDatePreference.FAVOR_EARLIEST);\n                Date d2 = parseHebrewSingleDate(dateStrings[1], ImpreciseDatePreference.FAVOR_LATEST);\n                if (d1 == null || d2 == null) {\n                    return null;\n                }\n                long daysBetween = TimeUnit.DAYS.convert(d2.getTime() - d1.getTime(), TimeUnit.MILLISECONDS);\n                Calendar c = Calendar.getInstance(Locale.US);\n                c.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n                c.setTime(d1);\n                c.add(Calendar.DAY_OF_YEAR, (int) daysBetween / 2);\n                Date result = c.getTime();\n                return result;\n            case PRECISE:\n                return parseHebrewSingleDate(dateStrings[0], pref);\n            default:\n                throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n        }\n    }\n                if (d1 == null || d2 == null) {\n                    return null;\n                }\n    private Date parseGregorianJulian(String dateString, ImpreciseDatePreference pref) {\n        String ds;\n        ds = removeApproximations(dateString.toUpperCase());\n        ds = removeOpenEndedRangesAndPeriods(ds);\n        if (PATTERN_SINGLE_DATE_FULL_GREGORIAN_JULIAN.matcher(ds).matches()) {\n            return getYearMonthDay(ds);\n        }\n        if (PATTERN_SINGLE_DATE_MONTH_YEAR_GREGORIAN_JULIAN.matcher(ds).matches()) {\n            return getYearMonthNoDay(ds, pref);\n        }\n        if (PATTERN_SINGLE_DATE_YEAR_ONLY.matcher(ds).matches()) {\n            return getYearOnly(ds, pref);\n        }\n        if (PATTERN_TWO_DATES.matcher(ds).matches()) {\n            return getPreferredDateFromRangeOrPeriod(ds, pref);\n        }\n        return null;\n    }\n    private Date parseHebrew(String hebrewDateString, ImpreciseDatePreference pref) {\n        if (PATTERN_TWO_DATES.matcher(hebrewDateString).matches()) {\n            return getPreferredDateFromHebrewRangeOrPeriod(hebrewDateString, pref);\n        }\n        return parseHebrewSingleDate(hebrewDateString, pref);\n    }\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java": "    int getMonthLength(int hebrewYear, int hebrewMonthNum) {\n        boolean leapYear = isLeapYear(hebrewYear);\n        int lenHebrewYear = getLengthOfYear(hebrewYear);\n        boolean haserYear = (lenHebrewYear == 353 || lenHebrewYear == 383);\n        boolean shalemYear = (lenHebrewYear == 355 || lenHebrewYear == 385);\n        int monthLength = 0;\n        if (hebrewMonthNum == 1 || hebrewMonthNum == 5 || hebrewMonthNum == 8 || hebrewMonthNum == 10 || hebrewMonthNum == 12) {\n            monthLength = 30;\n        } else if (hebrewMonthNum == 4 || hebrewMonthNum == 7 || hebrewMonthNum == 9 || hebrewMonthNum == 11\n                || hebrewMonthNum == 13) {\n            monthLength = 29;\n        } else if (hebrewMonthNum == 6) {\n            monthLength = (leapYear ? 30 : 0);\n        } else if (hebrewMonthNum == 2) {\n            monthLength = (shalemYear ? 30 : 29);\n        } else if (hebrewMonthNum == 3) {\n            monthLength = (haserYear ? 29 : 30);\n        }\n        return monthLength;\n    }\n",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "    @Test\n    public void testParseHebrewDatePeriod() {\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776 TO 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n                Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776 TO 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n                Calendar.JULY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776 TO 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n                Calendar.JULY, 30);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776 TO AAV 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n                7);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776 TO AAV 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST,\n                5);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776 TO AAV 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER,\n                3);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776 TO 5777\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776 TO 5777\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.SEPTEMBER, 16);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776 TO 5777\", ImpreciseDatePreference.FAVOR_LATEST), 2017, Calendar.SEPTEMBER, 20);\n    }\n    @Test\n    public void testParseHebrewDateRange() {\n        assertDate(dp.parse(\"@#DHEBREW@ BET 12 TMZ 5776 AND 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n                Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ BET 12 TMZ 5776 AND 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n                Calendar.JULY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ BET 12 TMZ 5776 AND 24 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n                Calendar.JULY, 30);\n        assertDate(dp.parse(\"@#DHEBREW@ BET TMZ 5776 AND AAV 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n                7);\n        assertDate(dp.parse(\"@#DHEBREW@ BET TMZ 5776 AND AAV 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST,\n                5);\n        assertDate(dp.parse(\"@#DHEBREW@ BET TMZ 5776 AND AAV 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER,\n                3);\n        assertDate(dp.parse(\"@#DHEBREW@ BET 5776 AND 5777\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ BET 5776 AND 5777\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.SEPTEMBER, 16);\n        assertDate(dp.parse(\"@#DHEBREW@ BET 5776 AND 5777\", ImpreciseDatePreference.FAVOR_LATEST), 2017, Calendar.SEPTEMBER, 20);\n    }\n    @Test\n    public void testParseHebrewSingleDatesFavorEarliest() {\n        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 12 TMZ 5776 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n                18);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ EST TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ TO TMZ 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ INT TMZ 5776 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 14);\n    }\n    @Test\n    public void testParseHebrewSingleDatesFavorLatest() {\n        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n        assertDate(dp.parse(\"@#DHEBREW@ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 12 TMZ 5776 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n        assertDate(dp.parse(\"@#DHEBREW@ EST TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n        assertDate(dp.parse(\"@#DHEBREW@ TO TMZ 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n        assertDate(dp.parse(\"@#DHEBREW@ INT TMZ 5776  (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 4);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.OCTOBER, 2);\n    }\n    @Test\n    public void testParseHebrewSingleDatesFavorMidpoint() {\n        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DHEBREW@ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 12 TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 12 TMZ 5776 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY,\n                18);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DHEBREW@ EST TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DHEBREW@ TO TMZ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DHEBREW@ INT TMZ 5776  (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n    }\n    @Test\n    public void testParseHebrewSingleDatesNoPref() {\n        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 12 TMZ 5776 (Because)\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ EST TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ TO TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ INT TMZ 5776 (Because)\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\"), 2015, Calendar.SEPTEMBER, 14);\n    }\n    public void testParseInterpretedDatesGregorian() {\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                78,
                98,
                108,
                109,
                114,
                115,
                120,
                131,
                132,
                142,
                167,
                168,
                170,
                171,
                173,
                174,
                176,
                214,
                215,
                216,
                218,
                222,
                226,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                257,
                258,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                427,
                429,
                430,
                431,
                432,
                433,
                434,
                435,
                438,
                439,
                440,
                441,
                442,
                443,
                444,
                445,
                446,
                447,
                448,
                449,
                450,
                451,
                452,
                453,
                454,
                455,
                456,
                457,
                458,
                459,
                460,
                461,
                491,
                492,
                493,
                612,
                613,
                614,
                615,
                616,
                617,
                618,
                619,
                620,
                621,
                622,
                623,
                624,
                625,
                626,
                627,
                628,
                629,
                640,
                641,
                642,
                643,
                644,
                645
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java": [
                79,
                80,
                81,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104
            ],
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                356,
                357,
                358,
                359,
                360,
                361,
                363,
                364,
                365,
                366,
                371,
                372,
                373,
                374,
                375,
                376,
                377,
                378,
                380,
                381,
                382,
                383,
                384,
                385,
                387,
                388,
                389,
                390,
                395,
                396,
                397,
                398,
                399,
                401,
                402,
                403,
                404,
                405,
                406,
                407,
                408,
                409,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                418,
                420,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                428,
                433,
                434,
                435,
                436,
                437,
                439,
                440,
                441,
                442,
                443,
                444,
                445,
                446,
                448,
                449,
                450,
                451,
                452,
                453,
                454,
                455,
                457,
                458,
                459,
                460,
                461,
                462,
                463,
                464,
                465,
                470,
                471,
                472,
                473,
                474,
                476,
                477,
                478,
                479,
                480,
                481,
                482,
                483,
                484,
                486,
                487,
                488,
                489,
                490,
                491,
                492,
                493,
                495,
                496,
                497,
                498,
                499,
                500,
                501,
                502,
                503,
                508,
                509,
                510,
                511,
                512,
                514,
                515,
                516,
                517,
                518,
                519,
                520,
                521,
                523,
                524,
                525,
                526,
                527,
                528,
                529,
                530,
                532,
                533,
                534,
                535,
                536,
                537,
                538,
                539,
                540,
                546
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "    private static final String CALENDAR_ESCAPE_HEBREW = \"\\\\@\\\\#DHEBREW\\\\@ \";\n    private static final String CALENDAR_ESCAPE_GREGORIAN = \"(\\\\@\\\\#DGREGORIAN\\\\@ )?\";\n    private static final String FORMAT_MONTH = \"(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\";\n    static final Pattern PATTERN_SINGLE_DATE_FULL = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_GREGORIAN + FORMAT_DAY\n            + \" \" + FORMAT_MONTH + \" \" + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_DATE_MONTH_YEAR = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_GREGORIAN\n            + FORMAT_MONTH + \" \" + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_DATE_YEAR_ONLY = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_GREGORIAN\n            + FORMAT_YEAR);\n    static final Pattern PATTERN_TWO_DATES = Pattern.compile(FORMAT_CASE_INSENSITIVE\n            + \"(FROM|BEF|BEF\\\\.|BET|BET\\\\.|BTW|BTW\\\\.|BETWEEN) \" + FORMAT_DATE_MISC + FORMAT_YEAR + \" (AND|TO) \" + FORMAT_DATE_MISC\n            + FORMAT_YEAR);\n    static final Pattern PATTERN_HEBREW_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_HEBREW + FORMAT_DAY + \"? ?\"\n        if (PATTERN_HEBREW_DATE.matcher(ds).matches()) {\n            return hebrewToGregorian(ds, pref);\n        ds = removeApproximations(dateString.toUpperCase());\n        ds = removeOpenEndedRangesAndPeriods(ds);\n        if (PATTERN_SINGLE_DATE_FULL.matcher(ds).matches()) {\n            return getYearMonthDay(ds);\n        if (PATTERN_SINGLE_DATE_MONTH_YEAR.matcher(ds).matches()) {\n            return getYearMonthNoDay(ds, pref);\n        if (PATTERN_SINGLE_DATE_YEAR_ONLY.matcher(ds).matches()) {\n            return getYearOnly(ds, pref);\n        }\n        if (PATTERN_TWO_DATES.matcher(ds).matches()) {\n            return getPreferredDateFromRangeOrPeriod(ds, pref);\n        }\n        return null;\n    Date hebrewToGregorian(String hebrewDateString, ImpreciseDatePreference pref) {\n        if (!PATTERN_HEBREW_DATE.matcher(hebrewDateString).matches()) {\n        String ds = hebrewDateString.substring(\"@#DHEBREW@ \".length());\n        String[] datePieces = ds.split(\" \");\n            hebrewDay = 1;\n            hebrewDay = 1;\n            hebrewMonth = 1;\n        HebrewCalendar hc = new HebrewCalendar();\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java": "    private int getMonthLength(int hebrewYear, int hebrewMonthNum) {\n        boolean leapYear = isLeapYear(hebrewYear);\n        int lenHebrewYear = getLengthOfYear(hebrewYear);\n        boolean haserYear = (lenHebrewYear == 353 || lenHebrewYear == 383);\n        boolean shalemYear = (lenHebrewYear == 355 || lenHebrewYear == 385);\n        int monthLength = 0;\n        if (hebrewMonthNum == 1 || hebrewMonthNum == 5 || hebrewMonthNum == 8 || hebrewMonthNum == 10 || hebrewMonthNum == 12) {\n            monthLength = 30;\n        } else if (hebrewMonthNum == 4 || hebrewMonthNum == 7 || hebrewMonthNum == 9 || hebrewMonthNum == 11\n                || hebrewMonthNum == 13) {\n            monthLength = 29;\n        } else if (hebrewMonthNum == 6) {\n            monthLength = (leapYear ? 30 : 0);\n        } else if (hebrewMonthNum == 2) {\n            monthLength = (shalemYear ? 30 : 29);\n        } else if (hebrewMonthNum == 3) {\n            monthLength = (haserYear ? 29 : 30);\n        }\n        return monthLength;\n    }\n",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "    @Test\n    public void testHebrewToGregorian() {\n        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ 5776\"), 2015, Calendar.SEPTEMBER, 14);\n    }\n    public void testParseInterpretedDates() {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                78,
                83,
                103,
                113,
                114,
                119,
                120,
                125,
                126,
                137,
                138,
                139,
                149,
                174,
                175,
                177,
                178,
                179,
                180,
                182,
                183,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                229,
                230,
                234,
                236,
                250,
                255,
                256,
                266
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java": [
                195,
                196,
                197,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220
            ],
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                185,
                186,
                187,
                188,
                189,
                190,
                358
            ]
        }
    },
    {
        "commit": "7f99186f",
        "prev_commit": "aae53937",
        "changed_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java",
            "src/test/java/org/gedcom4j/exception/GedcomValidationExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomWriterExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomWriterVersionDataMismatchExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/UnsupportedGedcomCharsetExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/UnsupportedVersionExceptionTest.java",
            "src/test/java/org/gedcom4j/parser/GedcomParserExceptionTest.java"
        ],
        "changed_files_num": 8,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java",
            "src/test/java/org/gedcom4j/exception/GedcomValidationExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomWriterExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomWriterVersionDataMismatchExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/UnsupportedGedcomCharsetExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/UnsupportedVersionExceptionTest.java",
            "src/test/java/org/gedcom4j/parser/GedcomParserExceptionTest.java"
        ],
        "changed_java_files_num": 8,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 12,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private static final Pattern PATTERN_SINGLE_DATE_FULL_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY\n+            + \" \" + FORMAT_MONTH_GREGORIAN_JULIAN + \" \" + FORMAT_YEAR);\n+    private static final Pattern PATTERN_SINGLE_DATE_MONTH_YEAR_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE\n+    private static final Pattern PATTERN_SINGLE_DATE_YEAR_ONLY = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_YEAR);\n+    private static final Pattern PATTERN_ENDS_IN_DOUBLE_ENTRY_YEAR = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DATE_MISC\n+    private static final Pattern PATTERN_SINGLE_HEBREW_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \"? ?\"\n+    private static final Pattern PATTERN_SINGLE_FRENCH_REPUBLICAN_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY\n+            + \"? ?\" + FORMAT_MONTH_FRENCH_REPUBLICAN + \"? ?\\\\d{1,4}\");\n+    @SuppressWarnings(\"ucd\")\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "    private static final Pattern PATTERN_SINGLE_DATE_FULL_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY\n            + \" \" + FORMAT_MONTH_GREGORIAN_JULIAN + \" \" + FORMAT_YEAR);\n    private static final Pattern PATTERN_SINGLE_DATE_MONTH_YEAR_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE\n    private static final Pattern PATTERN_SINGLE_DATE_YEAR_ONLY = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_YEAR);\n    private static final Pattern PATTERN_ENDS_IN_DOUBLE_ENTRY_YEAR = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DATE_MISC\n    private static final Pattern PATTERN_SINGLE_HEBREW_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \"? ?\"\n    private static final Pattern PATTERN_SINGLE_FRENCH_REPUBLICAN_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY\n            + \"? ?\" + FORMAT_MONTH_FRENCH_REPUBLICAN + \"? ?\\\\d{1,4}\");\n",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java": "enum FrenchRepublicanMonth {\n    @SuppressWarnings(\"ucd\")\n",
            "src/test/java/org/gedcom4j/exception/GedcomValidationExceptionTest.java": "import org.junit.Assert;\n",
            "src/test/java/org/gedcom4j/exception/GedcomWriterExceptionTest.java": "import org.junit.Assert;\n",
            "src/test/java/org/gedcom4j/parser/GedcomParserExceptionTest.java": "import org.junit.Assert;\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                108,
                109,
                114,
                120,
                125,
                147,
                153,
                154
            ],
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java": [
                8,
                44
            ],
            "src/test/java/org/gedcom4j/exception/GedcomValidationExceptionTest.java": [
                29
            ],
            "src/test/java/org/gedcom4j/exception/GedcomWriterExceptionTest.java": [
                29
            ],
            "src/test/java/org/gedcom4j/parser/GedcomParserExceptionTest.java": [
                30
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "    static final Pattern PATTERN_SINGLE_DATE_FULL_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \" \"\n            + FORMAT_MONTH_GREGORIAN_JULIAN + \" \" + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_DATE_MONTH_YEAR_GREGORIAN_JULIAN = Pattern.compile(FORMAT_CASE_INSENSITIVE\n    static final Pattern PATTERN_SINGLE_DATE_YEAR_ONLY = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_YEAR);\n    static final Pattern PATTERN_ENDS_IN_DOUBLE_ENTRY_YEAR = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DATE_MISC\n    static final Pattern PATTERN_SINGLE_HEBREW_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \"? ?\"\n    static final Pattern PATTERN_SINGLE_FRENCH_REPUBLICAN_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \"? ?\"\n            + FORMAT_MONTH_FRENCH_REPUBLICAN + \"? ?\\\\d{1,4}\");\n",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java": "public enum FrenchRepublicanMonth {\n",
            "src/test/java/org/gedcom4j/exception/GedcomValidationExceptionTest.java": "import junit.framework.Assert;\nimport org.gedcom4j.exception.GedcomValidationException;\n",
            "src/test/java/org/gedcom4j/exception/GedcomWriterExceptionTest.java": "import junit.framework.Assert;\nimport org.gedcom4j.exception.GedcomWriterException;\n",
            "src/test/java/org/gedcom4j/exception/GedcomWriterVersionDataMismatchExceptionTest.java": "import org.gedcom4j.exception.GedcomWriterVersionDataMismatchException;\n",
            "src/test/java/org/gedcom4j/exception/UnsupportedGedcomCharsetExceptionTest.java": "import org.gedcom4j.exception.UnsupportedGedcomCharsetException;\n",
            "src/test/java/org/gedcom4j/exception/UnsupportedVersionExceptionTest.java": "import org.gedcom4j.exception.UnsupportedVersionException;\n",
            "src/test/java/org/gedcom4j/parser/GedcomParserExceptionTest.java": "import junit.framework.Assert;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                108,
                109,
                114,
                120,
                125,
                147,
                153,
                154
            ],
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java": [
                8
            ],
            "src/test/java/org/gedcom4j/exception/GedcomValidationExceptionTest.java": [
                29,
                31
            ],
            "src/test/java/org/gedcom4j/exception/GedcomWriterExceptionTest.java": [
                29,
                31
            ],
            "src/test/java/org/gedcom4j/exception/GedcomWriterVersionDataMismatchExceptionTest.java": [
                33
            ],
            "src/test/java/org/gedcom4j/exception/UnsupportedGedcomCharsetExceptionTest.java": [
                33
            ],
            "src/test/java/org/gedcom4j/exception/UnsupportedVersionExceptionTest.java": [
                33
            ],
            "src/test/java/org/gedcom4j/parser/GedcomParserExceptionTest.java": [
                29
            ]
        }
    },
    {
        "commit": "b8216f37",
        "prev_commit": "5820f4ce",
        "changed_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 12,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+            + FORMAT_MONTH_FRENCH_REPUBLICAN + \"? ?\\\\d{1,4}\");\n+        if (ds.startsWith(\"INT \") && ds.indexOf('(') > 6) {\n+        if (ds.startsWith(\"INT. \") && ds.indexOf('(') > 7) {\n+    @Test\n+    public void testParseFrenchRepublicanDatePeriod() {\n+    }\n+    @Test\n+    public void testParseFrenchRepublicanDateRange() {\n+    }\n+    @Test\n+    public void testParseFrenchRepublicanSingleDateFavorEarliest() {\n+        assertDate(dp.parse(\"@#DFRENCH R@ 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 3 THER 224 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n+                20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n+                18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER,\n+                22);\n+    }\n+    @Test\n+    public void testParseFrenchRepublicanSingleDateFavorLatest() {\n+        assertDate(dp.parse(\"@#DFRENCH R@ 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n+        assertDate(dp.parse(\"@#DFRENCH R@ 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 3 THER 224 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY,\n+                20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST,\n+                16);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n+    }\n+    @Test\n+    public void testParseFrenchRepublicanSingleDateFavorMidpoint() {\n+        assertDate(dp.parse(\"@#DFRENCH R@ 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n+        assertDate(dp.parse(\"@#DFRENCH R@ 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 3 THER 224 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY,\n+                20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST,\n+                1);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n+    }\n+        assertDate(dp.parse(\"@#DFRENCH R@ 3 THER 224\"), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ 224\"), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 3 THER 224\"), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 3 THER 224\"), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 3 THER 224\"), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 3 THER 224\"), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 3 THER 224\"), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 3 THER 224\"), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 3 THER 224\"), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 3 THER 224 (Because)\"), 2016, Calendar.JULY, 20);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\"), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\"), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\"), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\"), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\"), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\"), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\"), 2015, Calendar.SEPTEMBER, 22);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\"), 2015, Calendar.SEPTEMBER, 22);\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "            + FORMAT_MONTH_FRENCH_REPUBLICAN + \"? ?\\\\d{1,4}\");\n        if (ds.startsWith(\"INT \") && ds.indexOf('(') > 6) {\n        if (ds.startsWith(\"INT. \") && ds.indexOf('(') > 7) {\n",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "    @Test\n    public void testParseFrenchRepublicanDatePeriod() {\n    }\n    @Test\n    public void testParseFrenchRepublicanDateRange() {\n    }\n    @Test\n    public void testParseFrenchRepublicanSingleDateFavorEarliest() {\n        assertDate(dp.parse(\"@#DFRENCH R@ 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 3 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 3 THER 224 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n                20);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016, Calendar.JULY,\n                18);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\", ImpreciseDatePreference.FAVOR_EARLIEST), 2015, Calendar.SEPTEMBER,\n                22);\n    }\n    @Test\n    public void testParseFrenchRepublicanSingleDateFavorLatest() {\n        assertDate(dp.parse(\"@#DFRENCH R@ 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n        assertDate(dp.parse(\"@#DFRENCH R@ 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 3 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 3 THER 224 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.JULY,\n                20);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST, 16);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.AUGUST,\n                16);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\", ImpreciseDatePreference.FAVOR_LATEST), 2016, Calendar.SEPTEMBER, 21);\n    }\n    @Test\n    public void testParseFrenchRepublicanSingleDateFavorMidpoint() {\n        assertDate(dp.parse(\"@#DFRENCH R@ 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n        assertDate(dp.parse(\"@#DFRENCH R@ 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 3 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 3 THER 224 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.JULY,\n                20);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST, 1);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.AUGUST,\n                1);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 20);\n    }\n        assertDate(dp.parse(\"@#DFRENCH R@ 3 THER 224\"), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ 224\"), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 3 THER 224\"), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 3 THER 224\"), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 3 THER 224\"), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 3 THER 224\"), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 3 THER 224\"), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 3 THER 224\"), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 3 THER 224\"), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 3 THER 224 (Because)\"), 2016, Calendar.JULY, 20);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\"), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\"), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\"), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\"), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\"), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\"), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\"), 2015, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\"), 2015, Calendar.SEPTEMBER, 22);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                154,
                299,
                302
            ],
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                354,
                355,
                357,
                362,
                363,
                365,
                370,
                371,
                372,
                373,
                374,
                376,
                377,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                386,
                387,
                388,
                389,
                390,
                391,
                392,
                393,
                394,
                396,
                397,
                398,
                399,
                400,
                401,
                402,
                403,
                404,
                405,
                410,
                411,
                412,
                413,
                414,
                416,
                417,
                418,
                419,
                420,
                421,
                422,
                423,
                424,
                426,
                427,
                428,
                429,
                430,
                431,
                432,
                433,
                434,
                436,
                437,
                438,
                439,
                440,
                441,
                442,
                443,
                444,
                449,
                450,
                451,
                452,
                453,
                455,
                456,
                457,
                458,
                459,
                460,
                461,
                462,
                463,
                465,
                466,
                467,
                468,
                469,
                470,
                471,
                472,
                473,
                475,
                476,
                477,
                478,
                479,
                480,
                481,
                482,
                483,
                490,
                491,
                492,
                494,
                495,
                496,
                497,
                498,
                499,
                500,
                501,
                503,
                504,
                505,
                506,
                507,
                508,
                509,
                510,
                512,
                513,
                514,
                515,
                516,
                517,
                518,
                519
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "            + FORMAT_MONTH_FRENCH_REPUBLICAN + \"? ?\\\\d{4}\");\n        if (ds.startsWith(\"INT \") && ds.indexOf('(') > 8) {\n        if (ds.startsWith(\"INT. \") && ds.indexOf('(') > 9) {\n",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "        assertDate(dp.parse(\"@#DFRENCH R@ 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 1 THER 224 (Because)\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\"), 2015, Calendar.SEPTEMBER, 14);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                154,
                299,
                302
            ],
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                356,
                357,
                358,
                360,
                361,
                362,
                363,
                364,
                365,
                366,
                367,
                369,
                370,
                371,
                372,
                373,
                374,
                375,
                376,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                385
            ]
        }
    },
    {
        "commit": "25ff4d78",
        "prev_commit": "a2c5d56b",
        "changed_files": [
            "sample/gedantic sample.ged",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        System.out.println(\">getExtendedAncestry(\" + individual + \")\");\n+        addIndividualAndFamilies(result, individual);\n+        result.remove(individual);\n+        if (dad != null) {\n+                    addIndividualAndFamilies(result, dadsWife);\n+        }\n+        addIndividualAndFamilies(result, dad);\n+    }\n+    private void addIndividualAndFamilies(Set<Individual> result, Individual individual) {\n+        if (individual == null || result.contains(individual)) {\n+            return;\n+        }\n+        result.add(individual);\n+        if (individual.getFamiliesWhereChild() != null) {\n+            for (FamilyChild fc : individual.getFamiliesWhereChild()) {\n+                addFatherAndAllHisWives(result, fc);\n+                addMotherAndAllHerHusbands(result, fc);\n+            }\n+        if (mom != null) {\n+                        addIndividualAndFamilies(result, momsHusband);\n+        addIndividualAndFamilies(result, mom);\n+                } else if (!checkedAlready.contains(spouse) && spouse.getFamiliesWhereChild() != null && !spouse\n+                        .getFamiliesWhereChild().isEmpty()) {\n+        assertEquals(\"There are supposed to be 43 people in the gedcom - are you using the right file/file version?\", 43, g\n+                .getIndividuals().size());\n+        assertEquals(\"There are supposed to be 18 families in the gedcom - are you using the right file/file version?\", 18, g\n+                .getFamilies().size());\n+    @Test\n+    public void testCyclicalAncestry() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/gedantic sample.ged\");\n+        Individual i1 = gp.getGedcom().getIndividuals().get(\"@I27@\");\n+        assertNotNull(i1);\n+        Set<Individual> extendedAncestry = anc.getExtendedAncestry(i1);\n+        assertNotNull(extendedAncestry);\n+        assertEquals(9, extendedAncestry.size());\n+    }\n+        assertTrue(\"Theresa is Robert's child, so all of Robert's ancestors are also Theresa's ancestors\", theresaAncestors\n+                .containsAll(robertAncestors));\n+        assertTrue(\"Theresa is Robert's child, so Theresa has ancestors that are not Robert's\", theresaAncestors\n+                .size() > robertAncestors.size());\n+        assertEquals(\"Sammy and Sally (brother and sister) have two common ancestors (their parents)\", 2, lowestCommonAncestors\n+                .size());\n+        assertEquals(\"Robert (son) and Sammy (father) have two ancestors in common: Sammy's parents/Robert's grandparents\", 2,\n+                lowestCommonAncestors.size());\n+        assertEquals(\"Robert (father) and Theresa (daughter) should have two lowest common ancestors:\"\n+                + \" James Andrews, and Sally Struthers\", 2, lowestCommonAncestors.size());\n+        assertFalse(\"Steven Struthers (Robert's grandfather) is a common ancestor, but not a LOWEST common ancestor\",\n+                lowestCommonAncestors.contains(getPerson(\"Struthers\", \"Steven\")));\n+        assertFalse(\"Gladys Knight (Robert's grandmother) is a common ancestor, but not a LOWEST common ancestor\",\n+                lowestCommonAncestors.contains(getPerson(\"Knight\", \"Gladys\")));\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "        System.out.println(\">getExtendedAncestry(\" + individual + \")\");\n        addIndividualAndFamilies(result, individual);\n        result.remove(individual);\n        if (dad != null) {\n                    addIndividualAndFamilies(result, dadsWife);\n        }\n        addIndividualAndFamilies(result, dad);\n    }\n    private void addIndividualAndFamilies(Set<Individual> result, Individual individual) {\n        if (individual == null || result.contains(individual)) {\n            return;\n        }\n        result.add(individual);\n        if (individual.getFamiliesWhereChild() != null) {\n            for (FamilyChild fc : individual.getFamiliesWhereChild()) {\n                addFatherAndAllHisWives(result, fc);\n                addMotherAndAllHerHusbands(result, fc);\n            }\n        if (mom != null) {\n                        addIndividualAndFamilies(result, momsHusband);\n        addIndividualAndFamilies(result, mom);\n                } else if (!checkedAlready.contains(spouse) && spouse.getFamiliesWhereChild() != null && !spouse\n                        .getFamiliesWhereChild().isEmpty()) {\n",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": "        assertEquals(\"There are supposed to be 43 people in the gedcom - are you using the right file/file version?\", 43, g\n                .getIndividuals().size());\n        assertEquals(\"There are supposed to be 18 families in the gedcom - are you using the right file/file version?\", 18, g\n                .getFamilies().size());\n    @Test\n    public void testCyclicalAncestry() throws IOException, GedcomParserException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/gedantic sample.ged\");\n        Individual i1 = gp.getGedcom().getIndividuals().get(\"@I27@\");\n        assertNotNull(i1);\n        Set<Individual> extendedAncestry = anc.getExtendedAncestry(i1);\n        assertNotNull(extendedAncestry);\n        assertEquals(9, extendedAncestry.size());\n    }\n        assertTrue(\"Theresa is Robert's child, so all of Robert's ancestors are also Theresa's ancestors\", theresaAncestors\n                .containsAll(robertAncestors));\n        assertTrue(\"Theresa is Robert's child, so Theresa has ancestors that are not Robert's\", theresaAncestors\n                .size() > robertAncestors.size());\n        assertEquals(\"Sammy and Sally (brother and sister) have two common ancestors (their parents)\", 2, lowestCommonAncestors\n                .size());\n        assertEquals(\"Robert (son) and Sammy (father) have two ancestors in common: Sammy's parents/Robert's grandparents\", 2,\n                lowestCommonAncestors.size());\n        assertEquals(\"Robert (father) and Theresa (daughter) should have two lowest common ancestors:\"\n                + \" James Andrews, and Sally Struthers\", 2, lowestCommonAncestors.size());\n        assertFalse(\"Steven Struthers (Robert's grandfather) is a common ancestor, but not a LOWEST common ancestor\",\n                lowestCommonAncestors.contains(getPerson(\"Struthers\", \"Steven\")));\n        assertFalse(\"Gladys Knight (Robert's grandmother) is a common ancestor, but not a LOWEST common ancestor\",\n                lowestCommonAncestors.contains(getPerson(\"Knight\", \"Gladys\")));\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                78,
                81,
                82,
                138,
                142,
                145,
                147,
                148,
                154,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                241,
                246,
                252,
                289,
                290
            ],
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": [
                87,
                88,
                89,
                90,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                165,
                166,
                167,
                168,
                272,
                273,
                290,
                291,
                315,
                316,
                321,
                322,
                323,
                324
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "        if (individual.getFamiliesWhereChild() != null) {\n            for (FamilyChild fc : individual.getFamiliesWhereChild()) {\n                addFatherAndAllHisWives(result, fc);\n                addMotherAndAllHerHusbands(result, fc);\n            }\n        }\n        if (dad != null && !result.contains(dad)) {\n            result.add(dad);\n                    if (dadsWife != null) {\n                        result.add(dadsWife);\n                        result.addAll(getExtendedAncestry(dadsWife));\n                    }\n            result.addAll(getExtendedAncestry(dad));\n        if (mom != null && !result.contains(mom)) {\n            result.add(mom);\n                        result.add(momsHusband);\n                        result.addAll(getExtendedAncestry(momsHusband));\n            result.addAll(getExtendedAncestry(mom));\n                } else if (!checkedAlready.contains(spouse) && spouse.getFamiliesWhereChild() != null && !spouse.getFamiliesWhereChild().isEmpty()) {\n",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": "        assertEquals(\"There are supposed to be 43 people in the gedcom - are you using the right file/file version?\", 43, g.getIndividuals().size());\n        assertEquals(\"There are supposed to be 18 families in the gedcom - are you using the right file/file version?\", 18, g.getFamilies().size());\n        assertTrue(\"Theresa is Robert's child, so all of Robert's ancestors are also Theresa's ancestors\", theresaAncestors.containsAll(robertAncestors));\n        assertTrue(\"Theresa is Robert's child, so Theresa has ancestors that are not Robert's\", theresaAncestors.size() > robertAncestors.size());\n        assertEquals(\"Sammy and Sally (brother and sister) have two common ancestors (their parents)\", 2, lowestCommonAncestors.size());\n        assertEquals(\"Robert (son) and Sammy (father) have two ancestors in common: Sammy's parents/Robert's grandparents\", 2, lowestCommonAncestors.size());\n        assertEquals(\"Robert (father) and Theresa (daughter) should have two lowest common ancestors:\" + \" James Andrews, and Sally Struthers\", 2,\n                lowestCommonAncestors.size());\n        assertFalse(\"Steven Struthers (Robert's grandfather) is a common ancestor, but not a LOWEST common ancestor\", lowestCommonAncestors.contains(getPerson(\n                \"Struthers\", \"Steven\")));\n        assertFalse(\"Gladys Knight (Robert's grandmother) is a common ancestor, but not a LOWEST common ancestor\", lowestCommonAncestors.contains(getPerson(\n                \"Knight\", \"Gladys\")));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                81,
                82,
                83,
                84,
                85,
                86,
                142,
                143,
                147,
                148,
                149,
                150,
                154,
                232,
                233,
                238,
                239,
                244,
                282
            ],
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": [
                87,
                88,
                144,
                145,
                249,
                266,
                290,
                291,
                296,
                297,
                298,
                299
            ]
        }
    },
    {
        "commit": "dee50116",
        "prev_commit": "207e0703",
        "changed_files": [
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java",
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java",
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java"
        ],
        "changed_java_files_num": 4,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\r\n+\r\n+\r\n+\r\n+    private static final char ANSEL_DIACRITICS_BEGIN_AT = 0x00E0;\r\n+\r\n+    private final AnselHandler anselHandler = new AnselHandler();\r\n+\r\n+    private int lineBufferIdx = 0;\r\n+\r\n+    private int currChar = -1;\r\n+\r\n+    private boolean eof = false;\r\n+\r\n+    private final char[] lineBuffer = new char[256];\r\n+\r\n+    private int oneCharBack = -1;\r\n+\r\n+    private int holdingBinIdx = 0;\r\n+\r\n+    private final char[] holdingBin = new char[2];\r\n+\r\n+    protected AnselReader(GedcomParser parser, InputStream byteStream) {\r\n+        super(parser, byteStream);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String nextLine() throws IOException, GedcomParserException {\r\n+        if (eof) {\r\n+            return null;\r\n+        }\r\n+        String result = null;\r\n+        while (!eof) {\r\n+            int twoCharsBack = oneCharBack;\r\n+            oneCharBack = currChar;\r\n+            currChar = byteStream.read();\r\n+            if (currChar >= 0) {\r\n+                bytesRead++;\r\n+            }\r\n+\r\n+            if (currChar < 0) {\r\n+                result = getThisLine();\r\n+                eof = true;\r\n+                break;\r\n+            }\r\n+\r\n+            if (Character.isWhitespace(currChar) && lineBufferIdx == 0) {\r\n+                continue;\r\n+            }\r\n+\r\n+            if ((currChar == 0x0D || currChar == 0x0A) && lineBufferIdx > 0) {\r\n+\r\n+                if (oneCharBack >= ANSEL_DIACRITICS_BEGIN_AT) {\r\n+                    if (twoCharsBack >= ANSEL_DIACRITICS_BEGIN_AT) {\r\n+                        holdingBin[holdingBinIdx++] = (char) twoCharsBack;\r\n+                        twoCharsBack = -1; // Keeps from holding characters in reserve repeatedly\r\n+                    }\r\n+                    holdingBin[holdingBinIdx++] = (char) oneCharBack;\r\n+                    oneCharBack = -1; // Keeps from holding characters in reserve repeatedly\r\n+                }\r\n+\r\n+                if (lineBufferIdx > 0) {\r\n+                    result = getThisLine();\r\n+                    break;\r\n+                }\r\n+\r\n+                continue;\r\n+            }\r\n+\r\n+            if (holdingBinIdx > 0 && isStartOfConcLine()) {\r\n+                lineBuffer[lineBufferIdx++] = holdingBin[0];\r\n+                if (holdingBinIdx > 1) {\r\n+                    lineBuffer[lineBufferIdx++] = holdingBin[1];\r\n+                }\r\n+                holdingBinIdx = 0;\r\n+                holdingBin[0] = ' ';\r\n+                holdingBin[1] = ' ';\r\n+\r\n+            }\r\n+\r\n+            if (lineBufferIdx >= 250 && currChar < ANSEL_DIACRITICS_BEGIN_AT) {\r\n+                result = getThisLine();\r\n+                insertSyntheticConcTag(result);\r\n+                break;\r\n+            }\r\n+\r\n+            lineBuffer[lineBufferIdx++] = (char) currChar;\r\n+\r\n+        }\r\n+        return result;\r\n+\r\n+    }\r\n+\r\n+    @Override\r\n+    void cleanUp() throws IOException {\r\n+    }\r\n+\r\n+    private int getLevelFromLine(String line) throws GedcomParserException {\r\n+        int level = -1;\r\n+        char[] lineChars = line.toCharArray();\r\n+        if (Character.isDigit(lineChars[0])) {\r\n+            if (Character.isDigit(lineChars[1])) {\r\n+                if (lineChars[2] == ' ') {\r\n+                    level = Character.getNumericValue(lineChars[0]) * 10 + Character.getNumericValue(lineChars[1]);\r\n+\r\n+                } else {\r\n+                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\r\n+                }\r\n+            } else {\r\n+                if (lineChars[1] == ' ') {\r\n+                    level = Character.getNumericValue(lineChars[0]);\r\n+                } else {\r\n+                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\r\n+                }\r\n+            }\r\n+        } else {\r\n+            throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. Can't split automatically.\");\r\n+        }\r\n+        return level;\r\n+    }\r\n+\r\n+    private String getThisLine() {\r\n+        String result = null;\r\n+        if (lineBufferIdx > 0) {\r\n+            String s = new String(lineBuffer).substring(0, lineBufferIdx - holdingBinIdx);\r\n+            result = anselHandler.toUtf16(s);\r\n+        }\r\n+        linesRead++;\r\n+        Arrays.fill(lineBuffer, ' ');\r\n+        lineBufferIdx = 0;\r\n+        return result;\r\n+    }\r\n+\r\n+    private void insertSyntheticConcTag(String previousLine) throws GedcomParserException {\r\n+        int level = getLevelFromLine(previousLine);\r\n+\r\n+        parser.getWarnings().add(\"Line \" + linesRead + \" exceeds max length - introducing synthetic CONC tag to split line\");\r\n+        level++;\r\n+        if (level > 9) {\r\n+            lineBuffer[lineBufferIdx++] = Character.forDigit(level / 10, 10);\r\n+            lineBuffer[lineBufferIdx++] = Character.forDigit(level % 10, 10);\r\n+        } else {\r\n+            lineBuffer[lineBufferIdx++] = Character.forDigit(level, 10);\r\n+        }\r\n+        lineBuffer[lineBufferIdx++] = ' ';\r\n+        lineBuffer[lineBufferIdx++] = 'C';\r\n+        lineBuffer[lineBufferIdx++] = 'O';\r\n+        lineBuffer[lineBufferIdx++] = 'N';\r\n+        lineBuffer[lineBufferIdx++] = 'C';\r\n+        lineBuffer[lineBufferIdx++] = ' ';\r\n+        lineBuffer[lineBufferIdx++] = (char) currChar;\r\n+    }\r\n+\r\n+    private boolean isStartOfConcLine() {\r\n+        return (lineBufferIdx >= 7 && Character.isDigit(lineBuffer[lineBufferIdx - 7]) && lineBuffer[lineBufferIdx - 6] == ' ' && lineBuffer[lineBufferIdx\r\n+                - 5] == 'C' && lineBuffer[lineBufferIdx - 4] == 'O' && lineBuffer[lineBufferIdx - 3] == 'N' && lineBuffer[lineBufferIdx - 2] == 'C'\r\n+                && lineBuffer[lineBufferIdx - 1] == ' ');\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    private boolean eof = false;\r\n+\r\n+    private final StringBuilder lineBuffer = new StringBuilder();\r\n+\r\n+    protected AsciiReader(GedcomParser parser, InputStream byteStream) {\r\n+        super(parser, byteStream);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String nextLine() throws IOException, GedcomParserException {\r\n+        String result = null;\r\n+        while (!eof) {\r\n+            int currChar = byteStream.read();\r\n+            if (currChar >= 0) {\r\n+                bytesRead++;\r\n+            }\r\n+\r\n+            if (currChar < 0) {\r\n+                eof = true;\r\n+                if (lineBuffer.length() > 0) {\r\n+                    result = lineBuffer.toString();\r\n+                }\r\n+                break;\r\n+            }\r\n+\r\n+            if (Character.isWhitespace(currChar) && lineBuffer.length() == 0) {\r\n+                continue;\r\n+            }\r\n+\r\n+            if ((currChar == 0x0D || currChar == 0x0A) && lineBuffer.length() > 0) {\r\n+                result = lineBuffer.toString();\r\n+                lineBuffer.setLength(0);\r\n+                break;\r\n+            }\r\n+\r\n+            if (currChar < 0x80) {\r\n+                lineBuffer.append(Character.valueOf((char) currChar));\r\n+                continue;\r\n+            }\r\n+\r\n+            throw new IOException(\"Extended characters not supported in ASCII: 0x\" + Integer.toHexString(currChar));\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    void cleanUp() throws IOException {\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    private boolean eof = false;\r\n+\r\n+    private final StringBuilder lineBuffer = new StringBuilder();\r\n+\r\n+    protected UnicodeBigEndianReader(GedcomParser parser, InputStream byteStream) {\r\n+        super(parser, byteStream);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String nextLine() throws IOException, GedcomParserException {\r\n+        String result = null;\r\n+\r\n+        boolean beginningOfFile = true;\r\n+\r\n+        while (!eof) {\r\n+            int currChar1 = byteStream.read();\r\n+            if (currChar1 >= 0) {\r\n+                bytesRead++;\r\n+            }\r\n+            int currChar2 = byteStream.read();\r\n+            if (currChar2 >= 0) {\r\n+                bytesRead++;\r\n+            }\r\n+\r\n+            if (currChar1 < 0 || currChar2 < 0) {\r\n+                if (lineBuffer.length() > 0) {\r\n+                    result = lineBuffer.toString();\r\n+                }\r\n+                eof = true;\r\n+                break;\r\n+            }\r\n+\r\n+            if (beginningOfFile && (currChar1 == 0xFE && currChar2 == 0xFF)) {\r\n+                beginningOfFile = false;\r\n+                lineBuffer.setLength(0);\r\n+                continue;\r\n+            }\r\n+\r\n+            beginningOfFile = false;\r\n+\r\n+            int unicodeChar = currChar1 << 8 | currChar2;\r\n+            Character unicode = Character.valueOf((char) unicodeChar);\r\n+            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\r\n+            \tcontinue;\r\n+            }\r\n+            \r\n+\r\n+            if (((currChar1 == 0x00 && currChar2 == 0x0D) || (currChar1 == 0x00 && currChar2 == 0x0A)) && lineBuffer.length()>0) {\r\n+                if (lineBuffer.length() > 0) {\r\n+                    result = lineBuffer.toString();\r\n+                    lineBuffer.setLength(0);\r\n+                    break;\r\n+                }\r\n+                continue;\r\n+            }\r\n+\r\n+            lineBuffer.append(Character.valueOf((char) unicodeChar));\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    void cleanUp() throws IOException {\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    private boolean eof = false;\r\n+\r\n+    private final StringBuilder lineBuffer = new StringBuilder();\r\n+\r\n+    public UnicodeLittleEndianReader(GedcomParser parser, InputStream byteStream) {\r\n+        super(parser, byteStream);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String nextLine() throws IOException, GedcomParserException {\r\n+        String result = null;\r\n+\r\n+        boolean beginningOfFile = true;\r\n+\r\n+        while (!eof) {\r\n+            int currChar1 = byteStream.read();\r\n+            if (currChar1 >= 0) {\r\n+                bytesRead++;\r\n+            }\r\n+            int currChar2 = byteStream.read();\r\n+            if (currChar2 >= 0) {\r\n+                bytesRead++;\r\n+            }\r\n+\r\n+            if (currChar1 < 0 || currChar2 < 0) {\r\n+                if (lineBuffer.length() > 0) {\r\n+                    result = lineBuffer.toString();\r\n+                }\r\n+                eof = true;\r\n+                break;\r\n+            }\r\n+\r\n+            if (beginningOfFile && (currChar1 == 0xFF && currChar2 == 0xFE)) {\r\n+                beginningOfFile = false;\r\n+                lineBuffer.setLength(0);\r\n+                break;\r\n+            }\r\n+\r\n+            beginningOfFile = false;\r\n+\r\n+            int unicodeChar = currChar2 << 8 | currChar1;\r\n+            Character unicode = Character.valueOf((char) unicodeChar);\r\n+            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\r\n+            \tcontinue;\r\n+            }\r\n+            \r\n+            \r\n+            if (lineBuffer.length()>0 && ((currChar1 == 0x0D && currChar2 == 0x00) || (currChar1 == 0x0A && currChar2 == 0x00))) {\r\n+                if (lineBuffer.length() > 0) {\r\n+                    result = lineBuffer.toString();\r\n+                    lineBuffer.setLength(0);\r\n+                    break;\r\n+                }\r\n+                continue;\r\n+            }\r\n+\r\n+            lineBuffer.append(Character.valueOf((char) unicodeChar));\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    void cleanUp() throws IOException {\r\n+    }\r\n+\r\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Arrays;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.io.encoding.AnselHandler;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class AnselReader extends AbstractEncodingSpecificReader {\n    private static final char ANSEL_DIACRITICS_BEGIN_AT = 0x00E0;\n    private final AnselHandler anselHandler = new AnselHandler();\n    private int lineBufferIdx = 0;\n    private int currChar = -1;\n    private boolean eof = false;\n    private final char[] lineBuffer = new char[256];\n    private int oneCharBack = -1;\n    private int holdingBinIdx = 0;\n    private final char[] holdingBin = new char[2];\n    protected AnselReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        if (eof) {\n            return null;\n        }\n        String result = null;\n        while (!eof) {\n            int twoCharsBack = oneCharBack;\n            oneCharBack = currChar;\n            currChar = byteStream.read();\n            if (currChar >= 0) {\n                bytesRead++;\n            }\n            if (currChar < 0) {\n                result = getThisLine();\n                eof = true;\n                break;\n            }\n            if (Character.isWhitespace(currChar) && lineBufferIdx == 0) {\n                continue;\n            }\n            if ((currChar == 0x0D || currChar == 0x0A) && lineBufferIdx > 0) {\n                if (oneCharBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n                    if (twoCharsBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n                        holdingBin[holdingBinIdx++] = (char) twoCharsBack;\n                        twoCharsBack = -1; // Keeps from holding characters in reserve repeatedly\n                    }\n                    holdingBin[holdingBinIdx++] = (char) oneCharBack;\n                    oneCharBack = -1; // Keeps from holding characters in reserve repeatedly\n                }\n                if (lineBufferIdx > 0) {\n                    result = getThisLine();\n                    break;\n                }\n                continue;\n            }\n            if (holdingBinIdx > 0 && isStartOfConcLine()) {\n                lineBuffer[lineBufferIdx++] = holdingBin[0];\n                if (holdingBinIdx > 1) {\n                    lineBuffer[lineBufferIdx++] = holdingBin[1];\n                }\n                holdingBinIdx = 0;\n                holdingBin[0] = ' ';\n                holdingBin[1] = ' ';\n            }\n            if (lineBufferIdx >= 250 && currChar < ANSEL_DIACRITICS_BEGIN_AT) {\n                result = getThisLine();\n                insertSyntheticConcTag(result);\n                break;\n            }\n            lineBuffer[lineBufferIdx++] = (char) currChar;\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n    private int getLevelFromLine(String line) throws GedcomParserException {\n        int level = -1;\n        char[] lineChars = line.toCharArray();\n        if (Character.isDigit(lineChars[0])) {\n            if (Character.isDigit(lineChars[1])) {\n                if (lineChars[2] == ' ') {\n                    level = Character.getNumericValue(lineChars[0]) * 10 + Character.getNumericValue(lineChars[1]);\n                } else {\n                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                }\n            } else {\n                if (lineChars[1] == ' ') {\n                    level = Character.getNumericValue(lineChars[0]);\n                } else {\n                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                }\n            }\n        } else {\n            throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. Can't split automatically.\");\n        }\n        return level;\n    }\n    private String getThisLine() {\n        String result = null;\n        if (lineBufferIdx > 0) {\n            String s = new String(lineBuffer).substring(0, lineBufferIdx - holdingBinIdx);\n            result = anselHandler.toUtf16(s);\n        }\n        linesRead++;\n        Arrays.fill(lineBuffer, ' ');\n        lineBufferIdx = 0;\n        return result;\n    }\n    private void insertSyntheticConcTag(String previousLine) throws GedcomParserException {\n        int level = getLevelFromLine(previousLine);\n        parser.getWarnings().add(\"Line \" + linesRead + \" exceeds max length - introducing synthetic CONC tag to split line\");\n        level++;\n        if (level > 9) {\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level / 10, 10);\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level % 10, 10);\n        } else {\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level, 10);\n        }\n        lineBuffer[lineBufferIdx++] = ' ';\n        lineBuffer[lineBufferIdx++] = 'C';\n        lineBuffer[lineBufferIdx++] = 'O';\n        lineBuffer[lineBufferIdx++] = 'N';\n        lineBuffer[lineBufferIdx++] = 'C';\n        lineBuffer[lineBufferIdx++] = ' ';\n        lineBuffer[lineBufferIdx++] = (char) currChar;\n    }\n    private boolean isStartOfConcLine() {\n        return (lineBufferIdx >= 7 && Character.isDigit(lineBuffer[lineBufferIdx - 7]) && lineBuffer[lineBufferIdx - 6] == ' ' && lineBuffer[lineBufferIdx\n                - 5] == 'C' && lineBuffer[lineBufferIdx - 4] == 'O' && lineBuffer[lineBufferIdx - 3] == 'N' && lineBuffer[lineBufferIdx - 2] == 'C'\n                && lineBuffer[lineBufferIdx - 1] == ' ');\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class AsciiReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    protected AsciiReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        while (!eof) {\n            int currChar = byteStream.read();\n            if (currChar >= 0) {\n                bytesRead++;\n            }\n            if (currChar < 0) {\n                eof = true;\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                break;\n            }\n            if (Character.isWhitespace(currChar) && lineBuffer.length() == 0) {\n                continue;\n            }\n            if ((currChar == 0x0D || currChar == 0x0A) && lineBuffer.length() > 0) {\n                result = lineBuffer.toString();\n                lineBuffer.setLength(0);\n                break;\n            }\n            if (currChar < 0x80) {\n                lineBuffer.append(Character.valueOf((char) currChar));\n                continue;\n            }\n            throw new IOException(\"Extended characters not supported in ASCII: 0x\" + Integer.toHexString(currChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class UnicodeBigEndianReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    protected UnicodeBigEndianReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        boolean beginningOfFile = true;\n        while (!eof) {\n            int currChar1 = byteStream.read();\n            if (currChar1 >= 0) {\n                bytesRead++;\n            }\n            int currChar2 = byteStream.read();\n            if (currChar2 >= 0) {\n                bytesRead++;\n            }\n            if (currChar1 < 0 || currChar2 < 0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                eof = true;\n                break;\n            }\n            if (beginningOfFile && (currChar1 == 0xFE && currChar2 == 0xFF)) {\n                beginningOfFile = false;\n                lineBuffer.setLength(0);\n                continue;\n            }\n            beginningOfFile = false;\n            int unicodeChar = currChar1 << 8 | currChar2;\n            Character unicode = Character.valueOf((char) unicodeChar);\n            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\n            \tcontinue;\n            }\n            if (((currChar1 == 0x00 && currChar2 == 0x0D) || (currChar1 == 0x00 && currChar2 == 0x0A)) && lineBuffer.length()>0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                    lineBuffer.setLength(0);\n                    break;\n                }\n                continue;\n            }\n            lineBuffer.append(Character.valueOf((char) unicodeChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class UnicodeLittleEndianReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    public UnicodeLittleEndianReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        boolean beginningOfFile = true;\n        while (!eof) {\n            int currChar1 = byteStream.read();\n            if (currChar1 >= 0) {\n                bytesRead++;\n            }\n            int currChar2 = byteStream.read();\n            if (currChar2 >= 0) {\n                bytesRead++;\n            }\n            if (currChar1 < 0 || currChar2 < 0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                eof = true;\n                break;\n            }\n            if (beginningOfFile && (currChar1 == 0xFF && currChar2 == 0xFE)) {\n                beginningOfFile = false;\n                lineBuffer.setLength(0);\n                break;\n            }\n            beginningOfFile = false;\n            int unicodeChar = currChar2 << 8 | currChar1;\n            Character unicode = Character.valueOf((char) unicodeChar);\n            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\n            \tcontinue;\n            }\n            if (lineBuffer.length()>0 && ((currChar1 == 0x0D && currChar2 == 0x00) || (currChar1 == 0x0A && currChar2 == 0x00))) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                    lineBuffer.setLength(0);\n                    break;\n                }\n                continue;\n            }\n            lineBuffer.append(Character.valueOf((char) unicodeChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": [
                27,
                29,
                30,
                31,
                33,
                34,
                35,
                43,
                48,
                53,
                58,
                63,
                68,
                73,
                78,
                83,
                89,
                100,
                101,
                102,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                119,
                120,
                121,
                122,
                123,
                126,
                127,
                128,
                131,
                134,
                135,
                140,
                141,
                142,
                147,
                148,
                149,
                152,
                153,
                154,
                155,
                158,
                159,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                172,
                175,
                176,
                177,
                178,
                179,
                183,
                185,
                186,
                188,
                190,
                191,
                193,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                214,
                219,
                220,
                221,
                222,
                223,
                224,
                229,
                230,
                231,
                232,
                237,
                238,
                239,
                240,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                267,
                268,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                293,
                294,
                295,
                296,
                297,
                299
            ],
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java": [
                27,
                29,
                30,
                32,
                33,
                40,
                45,
                50,
                61,
                62,
                63,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                75,
                77,
                78,
                79,
                80,
                81,
                82,
                85,
                86,
                87,
                90,
                91,
                92,
                93,
                94,
                99,
                100,
                101,
                102,
                105,
                106,
                107,
                108,
                110,
                111,
                113,
                115
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": [
                27,
                29,
                30,
                32,
                33,
                40,
                45,
                50,
                60,
                61,
                62,
                64,
                65,
                66,
                68,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                81,
                83,
                84,
                85,
                86,
                87,
                88,
                91,
                92,
                93,
                94,
                95,
                97,
                100,
                101,
                102,
                103,
                104,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                117,
                118,
                119,
                120,
                122,
                123,
                125,
                127
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": [
                27,
                29,
                30,
                32,
                33,
                41,
                46,
                51,
                62,
                63,
                64,
                66,
                67,
                68,
                70,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                83,
                85,
                86,
                87,
                88,
                89,
                90,
                93,
                94,
                95,
                96,
                97,
                99,
                102,
                103,
                104,
                105,
                106,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                124,
                125,
                127,
                129
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Arrays;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.io.encoding.AnselHandler;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class AnselReader extends AbstractEncodingSpecificReader {\n    private static final char ANSEL_DIACRITICS_BEGIN_AT = 0x00E0;\n    private final AnselHandler anselHandler = new AnselHandler();\n    private int lineBufferIdx = 0;\n    private int currChar = -1;\n    private boolean eof = false;\n    private final char[] lineBuffer = new char[256];\n    private int oneCharBack = -1;\n    private int holdingBinIdx = 0;\n    private final char[] holdingBin = new char[2];\n    protected AnselReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        if (eof) {\n            return null;\n        }\n        String result = null;\n        while (!eof) {\n            int twoCharsBack = oneCharBack;\n            oneCharBack = currChar;\n            currChar = byteStream.read();\n            if (currChar >= 0) {\n                bytesRead++;\n            }\n            if (currChar < 0) {\n                result = getThisLine();\n                eof = true;\n                break;\n            }\n            if (currChar == ' ' && lineBufferIdx == 0) {\n                continue;\n            }\n            if ((currChar == 0x0D || currChar == 0x0A)) {\n                if (oneCharBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n                    if (twoCharsBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n                        holdingBin[holdingBinIdx++] = (char) twoCharsBack;\n                        twoCharsBack = -1; // Keeps from holding characters in reserve repeatedly\n                    }\n                    holdingBin[holdingBinIdx++] = (char) oneCharBack;\n                    oneCharBack = -1; // Keeps from holding characters in reserve repeatedly\n                }\n                if (lineBufferIdx > 0) {\n                    result = getThisLine();\n                    break;\n                }\n                continue;\n            }\n            if (holdingBinIdx > 0 && isStartOfConcLine()) {\n                lineBuffer[lineBufferIdx++] = holdingBin[0];\n                if (holdingBinIdx > 1) {\n                    lineBuffer[lineBufferIdx++] = holdingBin[1];\n                }\n                holdingBinIdx = 0;\n                holdingBin[0] = ' ';\n                holdingBin[1] = ' ';\n            }\n            if (lineBufferIdx >= 250 && currChar < ANSEL_DIACRITICS_BEGIN_AT) {\n                result = getThisLine();\n                insertSyntheticConcTag(result);\n                break;\n            }\n            lineBuffer[lineBufferIdx++] = (char) currChar;\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n    private int getLevelFromLine(String line) throws GedcomParserException {\n        int level = -1;\n        char[] lineChars = line.toCharArray();\n        if (Character.isDigit(lineChars[0])) {\n            if (Character.isDigit(lineChars[1])) {\n                if (lineChars[2] == ' ') {\n                    level = Character.getNumericValue(lineChars[0]) * 10 + Character.getNumericValue(lineChars[1]);\n                } else {\n                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                }\n            } else {\n                if (lineChars[1] == ' ') {\n                    level = Character.getNumericValue(lineChars[0]);\n                } else {\n                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                }\n            }\n        } else {\n            throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. Can't split automatically.\");\n        }\n        return level;\n    }\n    private String getThisLine() {\n        String result = null;\n        if (lineBufferIdx > 0) {\n            String s = new String(lineBuffer).substring(0, lineBufferIdx - holdingBinIdx);\n            result = anselHandler.toUtf16(s);\n        }\n        linesRead++;\n        Arrays.fill(lineBuffer, ' ');\n        lineBufferIdx = 0;\n        return result;\n    }\n    private void insertSyntheticConcTag(String previousLine) throws GedcomParserException {\n        int level = getLevelFromLine(previousLine);\n        parser.getWarnings().add(\"Line \" + linesRead + \" exceeds max length - introducing synthetic CONC tag to split line\");\n        level++;\n        if (level > 9) {\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level / 10, 10);\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level % 10, 10);\n        } else {\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level, 10);\n        }\n        lineBuffer[lineBufferIdx++] = ' ';\n        lineBuffer[lineBufferIdx++] = 'C';\n        lineBuffer[lineBufferIdx++] = 'O';\n        lineBuffer[lineBufferIdx++] = 'N';\n        lineBuffer[lineBufferIdx++] = 'C';\n        lineBuffer[lineBufferIdx++] = ' ';\n        lineBuffer[lineBufferIdx++] = (char) currChar;\n    }\n    private boolean isStartOfConcLine() {\n        return (lineBufferIdx >= 7 && Character.isDigit(lineBuffer[lineBufferIdx - 7]) && lineBuffer[lineBufferIdx - 6] == ' ' && lineBuffer[lineBufferIdx\n                - 5] == 'C' && lineBuffer[lineBufferIdx - 4] == 'O' && lineBuffer[lineBufferIdx - 3] == 'N' && lineBuffer[lineBufferIdx - 2] == 'C'\n                && lineBuffer[lineBufferIdx - 1] == ' ');\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class AsciiReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    protected AsciiReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        while (!eof) {\n            int currChar = byteStream.read();\n            if (currChar >= 0) {\n                bytesRead++;\n            }\n            if (currChar < 0) {\n                eof = true;\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                break;\n            }\n            if (currChar == ' ' && lineBuffer.length() == 0) {\n                continue;\n            }\n            if ((currChar == 0x0D || currChar == 0x0A) && lineBuffer.length() > 0) {\n                result = lineBuffer.toString();\n                lineBuffer.setLength(0);\n                break;\n            }\n            if (currChar < 0x80) {\n                lineBuffer.append(Character.valueOf((char) currChar));\n                continue;\n            }\n            throw new IOException(\"Extended characters not supported in ASCII: 0x\" + Integer.toHexString(currChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class UnicodeBigEndianReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    protected UnicodeBigEndianReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        boolean beginningOfFile = true;\n        while (!eof) {\n            int currChar1 = byteStream.read();\n            if (currChar1 >= 0) {\n                bytesRead++;\n            }\n            int currChar2 = byteStream.read();\n            if (currChar2 >= 0) {\n                bytesRead++;\n            }\n            if (currChar1 < 0 || currChar2 < 0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                eof = true;\n                break;\n            }\n            if (beginningOfFile && (currChar1 == 0xFE && currChar2 == 0xFF)) {\n                beginningOfFile = false;\n                lineBuffer.setLength(0);\n                continue;\n            }\n            beginningOfFile = false;\n            if ((currChar1 == 0x00 && currChar2 == 0x0D) || (currChar1 == 0x00 && currChar2 == 0x0A)) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                    lineBuffer.setLength(0);\n                    break;\n                }\n                continue;\n            }\n            int unicodeChar = currChar1 << 8 | currChar2;\n            lineBuffer.append(Character.valueOf((char) unicodeChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class UnicodeLittleEndianReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    public UnicodeLittleEndianReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        boolean beginningOfFile = true;\n        while (!eof) {\n            int currChar1 = byteStream.read();\n            if (currChar1 >= 0) {\n                bytesRead++;\n            }\n            int currChar2 = byteStream.read();\n            if (currChar2 >= 0) {\n                bytesRead++;\n            }\n            if (currChar1 < 0 || currChar2 < 0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                eof = true;\n                break;\n            }\n            if (beginningOfFile && (currChar1 == 0xFF && currChar2 == 0xFE)) {\n                beginningOfFile = false;\n                lineBuffer.setLength(0);\n                break;\n            }\n            beginningOfFile = false;\n            if ((currChar1 == 0x0D && currChar2 == 0x00) || (currChar1 == 0x0A && currChar2 == 0x00)) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                    lineBuffer.setLength(0);\n                    break;\n                }\n                continue;\n            }\n            int unicodeChar = currChar2 << 8 | currChar1;\n            lineBuffer.append(Character.valueOf((char) unicodeChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": [
                27,
                29,
                30,
                31,
                33,
                34,
                35,
                43,
                48,
                53,
                58,
                63,
                68,
                73,
                78,
                83,
                89,
                100,
                101,
                102,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                119,
                120,
                121,
                122,
                123,
                126,
                127,
                128,
                131,
                134,
                135,
                140,
                141,
                142,
                147,
                148,
                149,
                152,
                153,
                154,
                155,
                158,
                159,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                172,
                175,
                176,
                177,
                178,
                179,
                183,
                185,
                186,
                188,
                190,
                191,
                193,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                214,
                219,
                220,
                221,
                222,
                223,
                224,
                229,
                230,
                231,
                232,
                237,
                238,
                239,
                240,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                267,
                268,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                293,
                294,
                295,
                296,
                297,
                299
            ],
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java": [
                27,
                29,
                30,
                32,
                33,
                40,
                45,
                50,
                61,
                62,
                63,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                75,
                77,
                78,
                79,
                80,
                81,
                82,
                85,
                86,
                87,
                90,
                91,
                92,
                93,
                94,
                99,
                100,
                101,
                102,
                105,
                106,
                107,
                108,
                110,
                111,
                113,
                115
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": [
                27,
                29,
                30,
                32,
                33,
                40,
                45,
                50,
                60,
                61,
                62,
                64,
                65,
                66,
                68,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                81,
                83,
                84,
                85,
                86,
                87,
                88,
                91,
                92,
                93,
                94,
                95,
                97,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                110,
                111,
                112,
                113,
                114,
                116,
                117,
                119,
                121
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": [
                27,
                29,
                30,
                32,
                33,
                41,
                46,
                51,
                62,
                63,
                64,
                66,
                67,
                68,
                70,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                83,
                85,
                86,
                87,
                88,
                89,
                90,
                93,
                94,
                95,
                96,
                97,
                99,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                111,
                112,
                113,
                114,
                115,
                117,
                118,
                120,
                122
            ]
        }
    },
    {
        "commit": "3fdb91ec",
        "prev_commit": "f8128f24",
        "changed_files": [
            "src/main/java/org/gedcom4j/relationship/Relationship.java",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java",
            "src/test/java/org/gedcom4j/relationship/RelationshipTest.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/relationship/Relationship.java",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java",
            "src/test/java/org/gedcom4j/relationship/RelationshipTest.java"
        ],
        "changed_java_files_num": 3,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 12,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        sb.append(\"[\");\n+        sb.append(\"], \").append(chain.size()).append(\" step(s)\");\n+        if (child.getSex() == null) {\n+            r.setName(CHILD);\n+        } else if (\"M\".equals(child.getSex().getValue())) {\n+        if (personBeingExamined.getSex() == null) {\n+            r.setReverseName(CHILD);\n+        } else if (\"M\".equals(personBeingExamined.getSex().getValue())) {\n+        if (personBeingExamined.getSex() == null) {\n+            r.setName(CHILD);\n+        } else if (\"M\".equals(personBeingExamined.getSex().getValue())) {\n+        if (sex == null) {\n+            return relationship.reverseForUnknown;\n+        }\n+        assertEquals(\"[], 0 step(s)\", r.toString());\n+        assertEquals(\"[Unknown's FATHER Unknown], 1 step(s)\", r.toString());\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/relationship/Relationship.java": "        sb.append(\"[\");\n        sb.append(\"], \").append(chain.size()).append(\" step(s)\");\n",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": "        if (child.getSex() == null) {\n            r.setName(CHILD);\n        } else if (\"M\".equals(child.getSex().getValue())) {\n        if (personBeingExamined.getSex() == null) {\n            r.setReverseName(CHILD);\n        } else if (\"M\".equals(personBeingExamined.getSex().getValue())) {\n        if (personBeingExamined.getSex() == null) {\n            r.setName(CHILD);\n        } else if (\"M\".equals(personBeingExamined.getSex().getValue())) {\n        if (sex == null) {\n            return relationship.reverseForUnknown;\n        }\n",
            "src/test/java/org/gedcom4j/relationship/RelationshipTest.java": "        assertEquals(\"[], 0 step(s)\", r.toString());\n        assertEquals(\"[Unknown's FATHER Unknown], 1 step(s)\", r.toString());\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/relationship/Relationship.java": [
                215,
                234
            ],
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": [
                313,
                314,
                315,
                340,
                341,
                342,
                385,
                386,
                387,
                430,
                431,
                432
            ],
            "src/test/java/org/gedcom4j/relationship/RelationshipTest.java": [
                106,
                117
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/relationship/Relationship.java": "        sb.append(\"<\");\n        sb.append(\">, \").append(chain.size()).append(\" step(s)\");\n",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": "        if (\"M\".equals(child.getSex().getValue())) {\n        if (\"M\".equals(personBeingExamined.getSex().getValue())) {\n        if (\"M\".equals(personBeingExamined.getSex().getValue())) {\n",
            "src/test/java/org/gedcom4j/relationship/RelationshipTest.java": "        assertEquals(\"<>, 0 step(s)\", r.toString());\n        assertEquals(\"<Unknown's FATHER Unknown>, 1 step(s)\", r.toString());\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/relationship/Relationship.java": [
                216,
                235
            ],
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": [
                321,
                346,
                389
            ],
            "src/test/java/org/gedcom4j/relationship/RelationshipTest.java": [
                106,
                117
            ]
        }
    },
    {
        "commit": "5820f4ce",
        "prev_commit": "fea2bf48",
        "changed_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java",
            "src/test/java/org/gedcom4j/parser/FrenchRepublicanCalendarParserTest.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java",
            "src/test/java/org/gedcom4j/parser/FrenchRepublicanCalendarParserTest.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [
            "DateParserTest"
        ],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 44,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 12,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private static final String FORMAT_MONTH_FRENCH_REPUBLICAN = \"(VEND|BRUM|FRIM|NIVO|PLUV|VENT|GERM|FLOR|PRAI|MESS|THER|FRUC|COMP)\";\n+    static final Pattern PATTERN_SINGLE_FRENCH_REPUBLICAN_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \"? ?\"\n+            + FORMAT_MONTH_FRENCH_REPUBLICAN + \"? ?\\\\d{4}\");\n+        if (ds.startsWith(\"@#DFRENCH R@ \")) {\n+            return parseFrenchRepublican(ds.substring(\"@#DFRENCH R@ \".length()), pref);\n+        }\n+    Date parseFrenchRepublicanSingleDate(String frenchRepublicanDateString, ImpreciseDatePreference pref) {\n+        String frds = removeApproximations(frenchRepublicanDateString.toUpperCase());\n+        frds = removeOpenEndedRangesAndPeriods(frds);\n+        if (!PATTERN_SINGLE_FRENCH_REPUBLICAN_DATE.matcher(frds).matches()) {\n+            return null;\n+        }\n+        String[] datePieces = frds.split(\" \");\n+        if (datePieces == null) {\n+            return null;\n+        }\n+        if (datePieces.length == 3) {\n+            return parseFrenchRepublicanDayMonthYear(datePieces);\n+        } else if (datePieces.length == 2) {\n+            return parseFrenchRepublicanMonthYear(datePieces, pref);\n+        } else if (datePieces.length == 1) {\n+            return parseFrenchRepublicanYearOnly(datePieces, pref);\n+        } else {\n+            return null;\n+        }\n+    }\n+            return parseHebrewDayMonthYear(datePieces);\n+            return parseHebrewMonthYear(pref, datePieces);\n+            return parseHebrewYearOnly(pref, datePieces);\n+    private Date getPreferredDateFromFrenchRepublicanRangeOrPeriod(String frenchRepublicanDateString,\n+            ImpreciseDatePreference pref) {\n+        return null;\n+    }\n+    private Date parseFrenchRepublican(String frenchRepublicanDateString, ImpreciseDatePreference pref) {\n+        if (PATTERN_TWO_DATES.matcher(frenchRepublicanDateString).matches()) {\n+            return getPreferredDateFromFrenchRepublicanRangeOrPeriod(frenchRepublicanDateString, pref);\n+        }\n+        return parseFrenchRepublicanSingleDate(frenchRepublicanDateString, pref);\n+    }\n+    private Date parseFrenchRepublicanDayMonthYear(String[] datePieces) {\n+        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n+        int frYear = Integer.parseInt(datePieces[2]);\n+        FrenchRepublicanMonth frMonth = FrenchRepublicanMonth.getFromGedcomAbbrev(datePieces[1]);\n+        if (frMonth == null) {\n+            return null;\n+        }\n+        int frDay = Integer.parseInt(datePieces[0]);\n+        return frc.convertFrenchRepublicanDateToGregorian(frYear, frMonth.getGedcomAbbrev(), frDay);\n+    }\n+    private Date parseFrenchRepublicanMonthYear(String[] datePieces, ImpreciseDatePreference pref) {\n+        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n+        int frYear = Integer.parseInt(datePieces[1]);\n+        FrenchRepublicanMonth frMonth = FrenchRepublicanMonth.getFromGedcomAbbrev(datePieces[0]);\n+        if (frMonth == null) {\n+            return null;\n+        }\n+        int frDay;\n+        switch (pref) {\n+            case FAVOR_EARLIEST:\n+                frDay = 1;\n+                break;\n+            case FAVOR_LATEST:\n+                if (frMonth == FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS) {\n+                    if (frc.isFrenchLeapYearRomme(frYear)) {\n+                        frDay = 6;\n+                    } else {\n+                        frDay = 5;\n+                    }\n+                } else {\n+                    frDay = 30;\n+                }\n+                break;\n+            case FAVOR_MIDPOINT:\n+                if (frMonth == FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS) {\n+                    if (frc.isFrenchLeapYearRomme(frYear)) {\n+                        frDay = 3;\n+                    } else {\n+                        frDay = 2;\n+                    }\n+                } else {\n+                    frDay = 15;\n+                }\n+                break;\n+            case PRECISE:\n+                frDay = 1;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n+        }\n+        return frc.convertFrenchRepublicanDateToGregorian(frYear, frMonth.getGedcomAbbrev(), frDay);\n+    }\n+    private Date parseFrenchRepublicanYearOnly(String[] datePieces, ImpreciseDatePreference pref) {\n+        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n+        int frYear = Integer.parseInt(datePieces[0]);\n+        int frDay;\n+        FrenchRepublicanMonth frMonth = null;\n+        switch (pref) {\n+            case FAVOR_EARLIEST:\n+                frMonth = FrenchRepublicanMonth.VENDEMIAIRE;\n+                frDay = 1;\n+                break;\n+            case FAVOR_LATEST:\n+                frMonth = FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS;\n+                if (frc.isFrenchLeapYearRomme(frYear)) {\n+                    frDay = 6;\n+                } else {\n+                    frDay = 5;\n+                }\n+                break;\n+            case FAVOR_MIDPOINT:\n+                frMonth = FrenchRepublicanMonth.GERMINAL;\n+                frDay = 1;\n+                break;\n+            case PRECISE:\n+                frMonth = FrenchRepublicanMonth.VENDEMIAIRE;\n+                frDay = 1;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n+        }\n+        return frc.convertFrenchRepublicanDateToGregorian(frYear, frMonth.getGedcomAbbrev(), frDay);\n+    }\n+    private Date parseHebrewDayMonthYear(String[] datePieces) {\n+        {\n+            HebrewCalendarParser hc = new HebrewCalendarParser();\n+            int hebrewDay = Integer.parseInt(datePieces[0]);\n+            HebrewMonth hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[1]);\n+            int hebrewYear = Integer.parseInt(datePieces[2]);\n+            if (hebrewMonth == null) {\n+                return null;\n+            }\n+            return hc.convertHebrewDateToGregorian(hebrewYear, hebrewMonth.getGedcomAbbrev(), hebrewDay);\n+        }\n+    }\n+    private Date parseHebrewMonthYear(ImpreciseDatePreference pref, String[] datePieces) {\n+        {\n+            HebrewCalendarParser hc = new HebrewCalendarParser();\n+            int hebrewYear = Integer.parseInt(datePieces[1]);\n+            HebrewMonth hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[0]);\n+            if (hebrewMonth == null) {\n+                return null;\n+            }\n+            int hebrewDay;\n+            switch (pref) {\n+                case FAVOR_EARLIEST:\n+                    hebrewDay = 1;\n+                    break;\n+                case FAVOR_LATEST:\n+                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n+                    break;\n+                case FAVOR_MIDPOINT:\n+                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n+                    break;\n+                case PRECISE:\n+                    hebrewDay = 1;\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n+            }\n+            return hc.convertHebrewDateToGregorian(hebrewYear, hebrewMonth.getGedcomAbbrev(), hebrewDay);\n+        }\n+    }\n+    private Date parseHebrewYearOnly(ImpreciseDatePreference pref, String[] datePieces) {\n+        {\n+            HebrewCalendarParser hc = new HebrewCalendarParser();\n+            int hebrewYear = Integer.parseInt(datePieces[0]);\n+            HebrewMonth hebrewMonth;\n+            int hebrewDay;\n+            switch (pref) {\n+                case FAVOR_EARLIEST:\n+                    hebrewMonth = HebrewMonth.TISHREI;\n+                    hebrewDay = 1;\n+                    break;\n+                case FAVOR_LATEST:\n+                    hebrewMonth = HebrewMonth.ELUL;\n+                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n+                    break;\n+                case FAVOR_MIDPOINT:\n+                    hebrewMonth = HebrewMonth.ADAR;\n+                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n+                    break;\n+                case PRECISE:\n+                    hebrewMonth = HebrewMonth.TISHREI;\n+                    hebrewDay = 1;\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n+            }\n+            return hc.convertHebrewDateToGregorian(hebrewYear, hebrewMonth.getGedcomAbbrev(), hebrewDay);\n+        }\n+    }\n+    boolean isFrenchLeapYearRomme(int frenchRepublicanYear) {\n+            int monthLength = getMonthLength(hebrewYear, HebrewMonth.getFrom1BasedNumber(m));\n+    int getMonthLength(int hebrewYear, HebrewMonth hebrewMonth) {\n+        int hebrewMonthNum = hebrewMonth.ordinal() + 1;\n+        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ 224\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 1 THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 1 THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 1 THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 1 THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 1 THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 1 THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 1 THER 224 (Because)\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DHEBREW@ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n+        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n+    private final FrenchRepublicanCalendarParser classUnderTest = new FrenchRepublicanCalendarParser();\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "    private static final String FORMAT_MONTH_FRENCH_REPUBLICAN = \"(VEND|BRUM|FRIM|NIVO|PLUV|VENT|GERM|FLOR|PRAI|MESS|THER|FRUC|COMP)\";\n    static final Pattern PATTERN_SINGLE_FRENCH_REPUBLICAN_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \"? ?\"\n            + FORMAT_MONTH_FRENCH_REPUBLICAN + \"? ?\\\\d{4}\");\n        if (ds.startsWith(\"@#DFRENCH R@ \")) {\n            return parseFrenchRepublican(ds.substring(\"@#DFRENCH R@ \".length()), pref);\n        }\n    Date parseFrenchRepublicanSingleDate(String frenchRepublicanDateString, ImpreciseDatePreference pref) {\n        String frds = removeApproximations(frenchRepublicanDateString.toUpperCase());\n        frds = removeOpenEndedRangesAndPeriods(frds);\n        if (!PATTERN_SINGLE_FRENCH_REPUBLICAN_DATE.matcher(frds).matches()) {\n            return null;\n        }\n        String[] datePieces = frds.split(\" \");\n        if (datePieces == null) {\n            return null;\n        }\n        if (datePieces.length == 3) {\n            return parseFrenchRepublicanDayMonthYear(datePieces);\n        } else if (datePieces.length == 2) {\n            return parseFrenchRepublicanMonthYear(datePieces, pref);\n        } else if (datePieces.length == 1) {\n            return parseFrenchRepublicanYearOnly(datePieces, pref);\n        } else {\n            return null;\n        }\n    }\n            return parseHebrewDayMonthYear(datePieces);\n            return parseHebrewMonthYear(pref, datePieces);\n            return parseHebrewYearOnly(pref, datePieces);\n    private Date getPreferredDateFromFrenchRepublicanRangeOrPeriod(String frenchRepublicanDateString,\n            ImpreciseDatePreference pref) {\n        return null;\n    }\n    private Date parseFrenchRepublican(String frenchRepublicanDateString, ImpreciseDatePreference pref) {\n        if (PATTERN_TWO_DATES.matcher(frenchRepublicanDateString).matches()) {\n            return getPreferredDateFromFrenchRepublicanRangeOrPeriod(frenchRepublicanDateString, pref);\n        }\n        return parseFrenchRepublicanSingleDate(frenchRepublicanDateString, pref);\n    }\n    private Date parseFrenchRepublicanDayMonthYear(String[] datePieces) {\n        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n        int frYear = Integer.parseInt(datePieces[2]);\n        FrenchRepublicanMonth frMonth = FrenchRepublicanMonth.getFromGedcomAbbrev(datePieces[1]);\n        if (frMonth == null) {\n            return null;\n        }\n        int frDay = Integer.parseInt(datePieces[0]);\n        return frc.convertFrenchRepublicanDateToGregorian(frYear, frMonth.getGedcomAbbrev(), frDay);\n    }\n    private Date parseFrenchRepublicanMonthYear(String[] datePieces, ImpreciseDatePreference pref) {\n        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n        int frYear = Integer.parseInt(datePieces[1]);\n        FrenchRepublicanMonth frMonth = FrenchRepublicanMonth.getFromGedcomAbbrev(datePieces[0]);\n        if (frMonth == null) {\n            return null;\n        }\n        int frDay;\n        switch (pref) {\n            case FAVOR_EARLIEST:\n                frDay = 1;\n                break;\n            case FAVOR_LATEST:\n                if (frMonth == FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS) {\n                    if (frc.isFrenchLeapYearRomme(frYear)) {\n                        frDay = 6;\n                    } else {\n                        frDay = 5;\n                    }\n                } else {\n                    frDay = 30;\n                }\n                break;\n            case FAVOR_MIDPOINT:\n                if (frMonth == FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS) {\n                    if (frc.isFrenchLeapYearRomme(frYear)) {\n                        frDay = 3;\n                    } else {\n                        frDay = 2;\n                    }\n                } else {\n                    frDay = 15;\n                }\n                break;\n            case PRECISE:\n                frDay = 1;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n        }\n        return frc.convertFrenchRepublicanDateToGregorian(frYear, frMonth.getGedcomAbbrev(), frDay);\n    }\n    private Date parseFrenchRepublicanYearOnly(String[] datePieces, ImpreciseDatePreference pref) {\n        FrenchRepublicanCalendarParser frc = new FrenchRepublicanCalendarParser();\n        int frYear = Integer.parseInt(datePieces[0]);\n        int frDay;\n        FrenchRepublicanMonth frMonth = null;\n        switch (pref) {\n            case FAVOR_EARLIEST:\n                frMonth = FrenchRepublicanMonth.VENDEMIAIRE;\n                frDay = 1;\n                break;\n            case FAVOR_LATEST:\n                frMonth = FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS;\n                if (frc.isFrenchLeapYearRomme(frYear)) {\n                    frDay = 6;\n                } else {\n                    frDay = 5;\n                }\n                break;\n            case FAVOR_MIDPOINT:\n                frMonth = FrenchRepublicanMonth.GERMINAL;\n                frDay = 1;\n                break;\n            case PRECISE:\n                frMonth = FrenchRepublicanMonth.VENDEMIAIRE;\n                frDay = 1;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n        }\n        return frc.convertFrenchRepublicanDateToGregorian(frYear, frMonth.getGedcomAbbrev(), frDay);\n    }\n    private Date parseHebrewDayMonthYear(String[] datePieces) {\n        {\n            HebrewCalendarParser hc = new HebrewCalendarParser();\n            int hebrewDay = Integer.parseInt(datePieces[0]);\n            HebrewMonth hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[1]);\n            int hebrewYear = Integer.parseInt(datePieces[2]);\n            if (hebrewMonth == null) {\n                return null;\n            }\n            return hc.convertHebrewDateToGregorian(hebrewYear, hebrewMonth.getGedcomAbbrev(), hebrewDay);\n        }\n    }\n    private Date parseHebrewMonthYear(ImpreciseDatePreference pref, String[] datePieces) {\n        {\n            HebrewCalendarParser hc = new HebrewCalendarParser();\n            int hebrewYear = Integer.parseInt(datePieces[1]);\n            HebrewMonth hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[0]);\n            if (hebrewMonth == null) {\n                return null;\n            }\n            int hebrewDay;\n            switch (pref) {\n                case FAVOR_EARLIEST:\n                    hebrewDay = 1;\n                    break;\n                case FAVOR_LATEST:\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n                    break;\n                case FAVOR_MIDPOINT:\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n                    break;\n                case PRECISE:\n                    hebrewDay = 1;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n            }\n            return hc.convertHebrewDateToGregorian(hebrewYear, hebrewMonth.getGedcomAbbrev(), hebrewDay);\n        }\n    }\n    private Date parseHebrewYearOnly(ImpreciseDatePreference pref, String[] datePieces) {\n        {\n            HebrewCalendarParser hc = new HebrewCalendarParser();\n            int hebrewYear = Integer.parseInt(datePieces[0]);\n            HebrewMonth hebrewMonth;\n            int hebrewDay;\n            switch (pref) {\n                case FAVOR_EARLIEST:\n                    hebrewMonth = HebrewMonth.TISHREI;\n                    hebrewDay = 1;\n                    break;\n                case FAVOR_LATEST:\n                    hebrewMonth = HebrewMonth.ELUL;\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n                    break;\n                case FAVOR_MIDPOINT:\n                    hebrewMonth = HebrewMonth.ADAR;\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n                    break;\n                case PRECISE:\n                    hebrewMonth = HebrewMonth.TISHREI;\n                    hebrewDay = 1;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n            }\n            return hc.convertHebrewDateToGregorian(hebrewYear, hebrewMonth.getGedcomAbbrev(), hebrewDay);\n        }\n    }\n",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java": "package org.gedcom4j.parser;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\nclass FrenchRepublicanCalendarParser {\n    Date convertFrenchRepublicanDateToGregorian(int frenchRepublicanYear, String frenchRepublicanMonthAbbrev, int dayOfMonth) {\n        if (frenchRepublicanYear < 1) {\n            return null;\n        }\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.clear();\n        c.set(1792, Calendar.SEPTEMBER, 21, 0, 0, 0);\n        for (int i = 1; i <= frenchRepublicanYear - 1; i++) {\n            c.add(Calendar.DATE, 365); // 365 days per year\n            if (isFrenchLeapYearRomme(i)) {\n                c.add(Calendar.DATE, 1); // add a leap day\n            }\n        }\n        FrenchRepublicanMonth frm = FrenchRepublicanMonth.getFromGedcomAbbrev(frenchRepublicanMonthAbbrev);\n        if (frm == null) {\n            return null;\n        }\n        c.add(Calendar.DATE, 30 * frm.ordinal());\n        if (dayOfMonth < 1) {\n            return null;\n        }\n        if (frm == FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS && dayOfMonth > 6) {\n            return null;\n        }\n        if (frm != FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS && dayOfMonth > 30) {\n            return null;\n        }\n        c.add(Calendar.DATE, dayOfMonth);\n        return c.getTime();\n    }\n    boolean isFrenchLeapYearRomme(int frenchRepublicanYear) {\n        if (frenchRepublicanYear == 3 || frenchRepublicanYear == 7 || frenchRepublicanYear == 11 || frenchRepublicanYear == 15) {\n            return true;\n        }\n        if (frenchRepublicanYear >= 20 && frenchRepublicanYear % 4 == 0) {\n            if (frenchRepublicanYear % 100 == 0) {\n                return (frenchRepublicanYear % 400 == 0);\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": "            int monthLength = getMonthLength(hebrewYear, HebrewMonth.getFrom1BasedNumber(m));\n    int getMonthLength(int hebrewYear, HebrewMonth hebrewMonth) {\n        int hebrewMonthNum = hebrewMonth.ordinal() + 1;\n",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "        assertDate(dp.parse(\"@#DFRENCH R@ THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 1 THER 224\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 1 THER 224 (Because)\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO THER 224\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT THER 224 (Because)\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 224\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 224 (Because)\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.MARCH, 24);\n",
            "src/test/java/org/gedcom4j/parser/FrenchRepublicanCalendarParserTest.java": "package org.gedcom4j.parser;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\npublic class FrenchRepublicanCalendarParserTest {\n    private static TimeZone saveTimeZone;\n    @AfterClass\n    public static void afterClass() {\n        TimeZone.setDefault(saveTimeZone);\n    }\n    @BeforeClass\n    public static void beforeClass() {\n        saveTimeZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    }\n    private final FrenchRepublicanCalendarParser classUnderTest = new FrenchRepublicanCalendarParser();\n    @Test\n    public void testConvertFrenchRepublicanDateToGregorian() {\n        assertEquals(getDate(1792, Calendar.SEPTEMBER, 22), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"VEND\", 1));\n        assertEquals(getDate(1792, Calendar.OCTOBER, 22), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"BRUM\", 1));\n        assertEquals(getDate(1792, Calendar.NOVEMBER, 21), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"FRIM\", 1));\n        assertEquals(getDate(1792, Calendar.DECEMBER, 21), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"NIVO\", 1));\n        assertEquals(getDate(1793, Calendar.JANUARY, 20), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"PLUV\", 1));\n        assertEquals(getDate(1793, Calendar.FEBRUARY, 19), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"VENT\", 1));\n        assertEquals(\"Consolidation of the Revolutionary government on 14 Frimaire, year II (December 4, 1793)\", getDate(1793,\n                Calendar.DECEMBER, 4), classUnderTest.convertFrenchRepublicanDateToGregorian(2, \"FRIM\", 14));\n        assertEquals(\"Robespierre found guilty on 9 Thermidor An II (27 July 1794)\", getDate(1794, Calendar.JULY, 27),\n                classUnderTest.convertFrenchRepublicanDateToGregorian(2, \"THER\", 9));\n        assertEquals(\"Legislation that accelerated the Reign of Terror on 22 Prairial, year II (June 10, 1794)\", getDate(1794,\n                Calendar.JUNE, 10), classUnderTest.convertFrenchRepublicanDateToGregorian(2, \"PRAI\", 22));\n        assertEquals(\"Ecole Normale Superieure established on 9 Brumaire An III (30 October 1794)\", getDate(1794, Calendar.OCTOBER,\n                30), classUnderTest.convertFrenchRepublicanDateToGregorian(3, \"BRUM\", 9));\n        assertEquals(\"Insurrection of the sansculottes on 1 Prairial, year III (May 20, 1795)\", getDate(1795, Calendar.MAY, 20),\n                classUnderTest.convertFrenchRepublicanDateToGregorian(3, \"PRAI\", 1));\n        assertEquals(\"Failed coup and incidence of Napoleon's 'whiff of grapeshot' on 13 Vend\u00e9miaire An IV (5 October 1795)\",\n                getDate(1795, Calendar.OCTOBER, 5), classUnderTest.convertFrenchRepublicanDateToGregorian(4, \"VEND\", 13));\n        assertEquals(\"The coup against monarchist restorationists on 18 Fructidor An V (4 September 1797)\", getDate(1797,\n                Calendar.SEPTEMBER, 4), classUnderTest.convertFrenchRepublicanDateToGregorian(5, \"FRUC\", 18));\n        assertEquals(\"Coup in which 106 left\u2013wing deputies were deprived of their seats on 22 Flor\u00e9al Year VI (11 May 1798)\",\n                getDate(1798, Calendar.MAY, 11), classUnderTest.convertFrenchRepublicanDateToGregorian(6, \"FLOR\", 22));\n        assertEquals(\"Coup backed militarily by General Joubert on 30 Prairial Year VII (18 June 1799)\", getDate(1799,\n                Calendar.JUNE, 18), classUnderTest.convertFrenchRepublicanDateToGregorian(7, \"PRAI\", 30));\n        assertEquals(\"Napoleon's coup was on 18 Brumaire An VIII (9 November 1799)\", getDate(1799, Calendar.NOVEMBER, 9),\n                classUnderTest.convertFrenchRepublicanDateToGregorian(8, \"BRUM\", 18));\n    }\n    @Test\n    public void testConvertFrenchRepublicanDateToGregorian2() {\n    }\n    private Date getDate(int y, int m, int d) {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.clear();\n        c.set(y, m, d, 0, 0, 0);\n        return c.getTime();\n    }\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                142,
                153,
                154,
                181,
                182,
                183,
                229,
                230,
                231,
                233,
                234,
                235,
                237,
                238,
                239,
                240,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                252,
                277,
                279,
                281,
                423,
                424,
                426,
                427,
                623,
                624,
                625,
                626,
                627,
                628,
                638,
                639,
                640,
                641,
                642,
                643,
                644,
                645,
                647,
                648,
                660,
                661,
                662,
                663,
                664,
                665,
                666,
                667,
                668,
                669,
                670,
                671,
                672,
                673,
                674,
                675,
                676,
                677,
                678,
                679,
                680,
                681,
                682,
                683,
                684,
                685,
                686,
                687,
                688,
                689,
                690,
                691,
                692,
                693,
                694,
                695,
                696,
                697,
                698,
                699,
                701,
                702,
                714,
                715,
                716,
                717,
                718,
                719,
                720,
                721,
                722,
                723,
                724,
                725,
                726,
                727,
                728,
                729,
                730,
                731,
                732,
                733,
                734,
                735,
                736,
                737,
                738,
                739,
                740,
                741,
                742,
                743,
                744,
                798,
                799,
                800,
                802,
                803,
                804,
                805,
                807,
                808,
                809,
                810,
                811,
                823,
                824,
                825,
                826,
                827,
                828,
                829,
                830,
                831,
                832,
                833,
                834,
                835,
                836,
                837,
                838,
                839,
                840,
                841,
                842,
                843,
                844,
                845,
                846,
                847,
                848,
                849,
                850,
                862,
                863,
                864,
                865,
                866,
                867,
                868,
                869,
                870,
                871,
                872,
                873,
                874,
                875,
                876,
                877,
                878,
                879,
                880,
                881,
                882,
                883,
                884,
                885,
                886,
                887,
                888,
                889,
                890
            ],
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java": [
                27,
                29,
                30,
                31,
                39,
                51,
                53,
                54,
                55,
                58,
                59,
                60,
                63,
                64,
                65,
                66,
                67,
                69,
                72,
                73,
                74,
                75,
                77,
                80,
                81,
                82,
                83,
                85,
                86,
                87,
                89,
                90,
                93,
                95,
                96,
                110,
                111,
                112,
                113,
                114,
                116,
                118,
                119,
                120,
                121,
                122,
                123,
                125
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": [
                64,
                80,
                82
            ],
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                357,
                358,
                360,
                361,
                362,
                363,
                364,
                365,
                366,
                367,
                369,
                370,
                371,
                372,
                373,
                374,
                375,
                376,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                385,
                518,
                539,
                540,
                541,
                542,
                543,
                544,
                545,
                546
            ],
            "src/test/java/org/gedcom4j/parser/FrenchRepublicanCalendarParserTest.java": [
                27,
                29,
                31,
                32,
                33,
                35,
                36,
                37,
                44,
                49,
                54,
                55,
                56,
                57,
                62,
                63,
                64,
                65,
                66,
                71,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                85,
                86,
                88,
                89,
                91,
                92,
                94,
                95,
                97,
                98,
                100,
                101,
                103,
                104,
                106,
                107,
                109,
                110,
                112,
                113,
                114,
                119,
                120,
                122,
                135,
                136,
                137,
                138,
                139,
                140,
                142
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "        HebrewCalendarParser hc = new HebrewCalendarParser();\n        int hebrewDay;\n        int hebrewMonth = 0;\n        int hebrewYear;\n            hebrewDay = Integer.parseInt(datePieces[0]);\n            hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[1]).ordinal() + 1;\n            hebrewYear = Integer.parseInt(datePieces[2]);\n            hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[0]).ordinal() + 1;\n            hebrewYear = Integer.parseInt(datePieces[1]);\n            switch (pref) {\n                case FAVOR_EARLIEST:\n                    hebrewDay = 1;\n                    break;\n                case FAVOR_LATEST:\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n                    break;\n                case FAVOR_MIDPOINT:\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n                    break;\n                case PRECISE:\n                    hebrewDay = 1;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n            }\n            hebrewYear = Integer.parseInt(datePieces[0]);\n            switch (pref) {\n                case FAVOR_EARLIEST:\n                    hebrewMonth = 1;\n                    hebrewDay = 1;\n                    break;\n                case FAVOR_LATEST:\n                    hebrewMonth = HebrewMonth.values().length;\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth);\n                    break;\n                case FAVOR_MIDPOINT:\n                    hebrewMonth = HebrewMonth.values().length / 2;\n                    hebrewDay = hc.getMonthLength(hebrewYear, hebrewMonth) / 2;\n                    break;\n                case PRECISE:\n                    hebrewMonth = 1;\n                    hebrewDay = 1;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unexpected value for imprecise date preference: \" + pref);\n            }\n        if (hebrewMonth == 0) {\n            return null;\n        }\n        return hc.convertHebrewDateToGregorian(hebrewYear, HebrewMonth.getFrom1BasedNumber(hebrewMonth).getGedcomAbbrev(),\n                hebrewDay);\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": "            int monthLength = getMonthLength(hebrewYear, m);\n    int getMonthLength(int hebrewYear, int hebrewMonthNum) {\n",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "        assertDate(dp.parse(\"@#DFRENCH R@ TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 1 THER CCXXIV (Because)\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT TMZ 5776 (Because)\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DFRENCH R@ ABT 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ EST 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ CAL 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ BEF 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ AFT 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ TO 5776\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DFRENCH R@ INT 5776 (Because)\"), 2015, Calendar.SEPTEMBER, 14);\n        assertDate(dp.parse(\"@#DHEBREW@ 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ ABT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ EST 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ CAL 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ BEF 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ AFT 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ FROM 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ TO 5776\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n        assertDate(dp.parse(\"@#DHEBREW@ INT 5776 (Because)\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016, Calendar.FEBRUARY, 24);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                226,
                228,
                229,
                230,
                233,
                234,
                235,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                256,
                257,
                258,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                281,
                283,
                284,
                285,
                286
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": [
                64,
                79
            ],
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                357,
                358,
                360,
                361,
                362,
                363,
                364,
                365,
                366,
                367,
                369,
                370,
                371,
                372,
                373,
                374,
                375,
                376,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                385,
                518,
                539,
                540,
                541,
                542,
                543,
                544,
                545,
                546
            ]
        }
    },
    {
        "commit": "eaf39ef1",
        "prev_commit": "fcf39a01",
        "changed_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.js",
            "src/main/java/org/gedcom4j/parser/HebrewMonth.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java",
            "src/test/java/org/gedcom4j/parser/HebrewCalendarTest.java"
        ],
        "changed_files_num": 6,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java",
            "src/main/java/org/gedcom4j/parser/HebrewMonth.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java",
            "src/test/java/org/gedcom4j/parser/HebrewCalendarTest.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "HebrewCalendarTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 38,
            "FamilyEventTypeParseTest": 1,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 12,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 7,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private static final String CALENDAR_ESCAPE_HEBREW = \"\\\\@\\\\#DHEBREW\\\\@ \";\n+    private static final String CALENDAR_ESCAPE_GREGORIAN = \"(\\\\@\\\\#DGREGORIAN\\\\@ )?\";\n+    static final Pattern PATTERN_SINGLE_DATE_FULL = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_GREGORIAN + FORMAT_DAY\n+            + \" \" + FORMAT_MONTH + \" \" + FORMAT_YEAR);\n+    static final Pattern PATTERN_SINGLE_DATE_MONTH_YEAR = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_GREGORIAN\n+            + FORMAT_MONTH + \" \" + FORMAT_YEAR);\n+    static final Pattern PATTERN_SINGLE_DATE_YEAR_ONLY = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_GREGORIAN\n+            + FORMAT_YEAR);\n+    private static final String FORMAT_MONTH_HEBREW = \"(TSH|CSH|KSL|TVT|SHV|ADR|ADS|NSN|IYR|SVN|TMZ|AAV|ELL)\";\n+    static final Pattern PATTERN_HEBREW_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_HEBREW + FORMAT_DAY + \"? ?\"\n+            + FORMAT_MONTH_HEBREW + \"? ?\\\\d{4}\");\n+        String ds = dateString.toUpperCase();\n+        if (PATTERN_HEBREW_DATE.matcher(ds).matches()) {\n+            return hebrewToGregorian(ds, pref);\n+        }\n+        ds = removeApproximations(dateString.toUpperCase());\n+    Date hebrewToGregorian(String hebrewDateString, ImpreciseDatePreference pref) {\n+        if (!PATTERN_HEBREW_DATE.matcher(hebrewDateString).matches()) {\n+            return null;\n+        }\n+        String ds = hebrewDateString.substring(\"@#DHEBREW@ \".length());\n+        String[] datePieces = ds.split(\" \");\n+        if (datePieces == null) {\n+            return null;\n+        }\n+        int hebrewDay;\n+        int hebrewMonth = 0;\n+        int hebrewYear;\n+        if (datePieces.length == 3) {\n+            hebrewDay = Integer.parseInt(datePieces[0]);\n+            hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[1]).ordinal() + 1;\n+            hebrewYear = Integer.parseInt(datePieces[2]);\n+        } else if (datePieces.length == 2) {\n+            hebrewDay = 1;\n+            hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[0]).ordinal() + 1;\n+            hebrewYear = Integer.parseInt(datePieces[1]);\n+        } else if (datePieces.length == 1) {\n+            hebrewDay = 1;\n+            hebrewMonth = 1;\n+            hebrewYear = Integer.parseInt(datePieces[0]);\n+        } else {\n+            return null;\n+        }\n+        if (hebrewMonth == 0) {\n+            return null;\n+        }\n+        HebrewCalendar hc = new HebrewCalendar();\n+        return hc.convertHebrewDateToGregorian(hebrewYear, HebrewMonth.getFrom1BasedNumber(hebrewMonth).getGedcomAbbrev(),\n+                hebrewDay);\n+    }\n+    Date convertHebrewDateToGregorian(int hebrewYear, String hebrewMonthAbbrev, int dayOfMonth) {\n+        HebrewMonth hebrewMonth = HebrewMonth.getFromAbbreviation(hebrewMonthAbbrev);\n+        int hebrewMonthNum = hebrewMonth.ordinal() + 1; // one-based\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        c.setTime(getFirstDayOfHebrewYear(hebrewYear));\n+        for (int m = 1; m <= hebrewMonthNum - 1; m++) {\n+            int monthLength = getMonthLength(hebrewYear, m);\n+            c.add(Calendar.DAY_OF_YEAR, +monthLength);\n+        }\n+        c.add(Calendar.DAY_OF_YEAR, dayOfMonth - 1);\n+        return c.getTime();\n+    }\n+    private Date getFirstDayOfHebrewYear(int hebrewYear) {\n+        int monthsSinceFirstMolad = getMonthsSinceFirstMolad(hebrewYear);\n+        int chalakim = 793 * monthsSinceFirstMolad;\n+        chalakim += 204;\n+        int hours = (int) Math.floor(chalakim / 1080);\n+        chalakim = chalakim % 1080;\n+        hours += monthsSinceFirstMolad * 12;\n+        hours += 5;\n+        int days = (int) Math.floor(hours / 24);\n+        hours = hours % 24;\n+        days += 29 * monthsSinceFirstMolad;\n+        days += 2;\n+        int dayOfWeek = days % 7;\n+        if (!isLeapYear(hebrewYear) && dayOfWeek == 3 && (hours * 1080) + chalakim >= (9 * 1080) + 204) {\n+            dayOfWeek = 5;\n+            days += 2;\n+        } else if (isLeapYear(hebrewYear - 1) && dayOfWeek == 2 && (hours * 1080) + chalakim >= (15 * 1080) + 589) {\n+            dayOfWeek = 3;\n+            days += 1;\n+        } else {\n+            if (hours >= 18) {\n+                dayOfWeek += 1;\n+                dayOfWeek = dayOfWeek % 7;\n+                days += 1;\n+            }\n+            if (dayOfWeek == 1 || dayOfWeek == 4 || dayOfWeek == 6) {\n+                dayOfWeek += 1;\n+                dayOfWeek = dayOfWeek % 7;\n+                days += 1;\n+            }\n+        }\n+        days -= 2067025;\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        c.clear();\n+        c.set(1900, 0, 1, 0, 0);\n+        c.add(Calendar.DATE, days);\n+        Calendar gregorianReformation = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        gregorianReformation.clear();\n+        gregorianReformation.set(1752, Calendar.SEPTEMBER, 14, 0, 0);\n+        if (c.before(gregorianReformation)) {\n+            c.add(Calendar.DATE, -10);\n+        }\n+        return c.getTime();\n+    }\n+    private int getLengthOfYear(int hebrewYear) {\n+        Date thisNewYear = getFirstDayOfHebrewYear(hebrewYear);\n+        Date nextNewYear = getFirstDayOfHebrewYear(hebrewYear + 1);\n+        long diff = TimeUnit.DAYS.convert(nextNewYear.getTime() - thisNewYear.getTime(), TimeUnit.MILLISECONDS);\n+        return (int) diff;\n+    }\n+    private int getMonthLength(int hebrewYear, int hebrewMonthNum) {\n+        boolean leapYear = isLeapYear(hebrewYear);\n+        int lenHebrewYear = getLengthOfYear(hebrewYear);\n+        boolean haserYear = (lenHebrewYear == 353 || lenHebrewYear == 383);\n+        boolean shalemYear = (lenHebrewYear == 355 || lenHebrewYear == 385);\n+        int monthLength = 0;\n+        if (hebrewMonthNum == 1 || hebrewMonthNum == 5 || hebrewMonthNum == 8 || hebrewMonthNum == 10 || hebrewMonthNum == 12) {\n+            monthLength = 30;\n+        } else if (hebrewMonthNum == 4 || hebrewMonthNum == 7 || hebrewMonthNum == 9 || hebrewMonthNum == 11\n+                || hebrewMonthNum == 13) {\n+            monthLength = 29;\n+        } else if (hebrewMonthNum == 6) {\n+            monthLength = (leapYear ? 30 : 0);\n+        } else if (hebrewMonthNum == 2) {\n+            monthLength = (shalemYear ? 30 : 29);\n+        } else if (hebrewMonthNum == 3) {\n+            monthLength = (haserYear ? 29 : 30);\n+        }\n+        return monthLength;\n+    }\n+    private int getMonthsSinceFirstMolad(int hebrewYear) {\n+        int y = hebrewYear - 1;\n+        int result = (int) (Math.floor(y / 19) * 235);\n+        y = yearInLeapCycle(y);\n+        result += 12 * y;\n+        if (y >= 17) {\n+            result += 6;\n+        } else if (y >= 14) {\n+            result += 5;\n+        } else if (y >= 11) {\n+            result += 4;\n+        } else if (y >= 8) {\n+            result += 3;\n+        } else if (y >= 6) {\n+            result += 2;\n+        } else if (y >= 3) {\n+            result += 1;\n+        }\n+        return result;\n+    }\n+    private boolean isLeapYear(int hebrewYear) {\n+        int yearInCycle = yearInLeapCycle(hebrewYear);\n+        return (yearInCycle == 3 || yearInCycle == 6 || yearInCycle == 8 || yearInCycle == 11 || yearInCycle == 14\n+                || yearInCycle == 17 || yearInCycle == 0);\n+    }\n+    private int yearInLeapCycle(int hebrewYear) {\n+        return hebrewYear % 19;\n+    }\n+  This code was converted to Java Script from my VB.Net program\n+  to convert Hebrew dates to and from Gregorian dates. I avoided\n+  using many optimization in order to make the logic clearer.\n+  These functions assume that all the current rules of the\n+  Hebrew calendar were always in existence (which is not true\n+  since the Hebrew calendar was not always fixed) and all the\n+  current rules of the Gregorian calendar were always in existence\n+  (which is not true).\n+  Here is a very brief description of the Hebrew calendar.\n+  The Hebrew calendar is a lunisolar calendar.  This means that\n+  the months are in sync with the moon and the years stay in sync\n+  with the sun.  A solar year is approximately 365.25 days.  A\n+  lunar month is approximately 29.5 days.  Twelve lunar months is\n+  approximately 354 days (12 * 29.5=354).  Thus, a lunar year of\n+  twelve months is 11.25 days shorter than the solar year. To make\n+  up for this shortfall, the Hebrew calendar adds a thirteenth\n+  month to seven years over a nineteen year period. Therefore, over\n+  a nineteen year period, the Hebrew calendar is approximately the\n+  same length as a nineteen year solar calendar.\n+  In order to understand this code, you must know the following\n+  terms:\n+    Molad - new moon. Hebrew months start around the day of the\n+            new moon\n+    Chalakim - 1 / 1080 of an hour or 3 1/3 seconds\n+    Tishrei - the first month of the Hebrew year (at least for\n+              these calculations)\n+    Rosh Hashanah - The Jewish new year which starts on Tishrei 1.\n+  The Hebrew calendar assumes the period of time between one new\n+  moon to the next is 29 days, 12 hours and 793 chalakim. The first\n+  molad after creation occurred on Monday, September, 7th -3760 at 5\n+  hours and 204 chalakim.  Technically, the Gregorian date would be\n+  in the year 3761 BCE because there was no year 0 in the Gregorian\n+  calendar, but we will use the year of -3760.\n+  Sample Usage:\n+     alert(HebToGreg(5765, 7, 26))\n+\tvar nMonSinceFirstMolad\n+\tnYearH--\n+\tnMonSinceFirstMolad = Math.floor(nYearH / 19) * 235\n+\tnYearH = nYearH % 19\n+\tnMonSinceFirstMolad += 12 * nYearH\n+\tif (nYearH >= 17) {\n+\t\tnMonSinceFirstMolad += 6\n+\t} else if (nYearH >= 14) {\n+\t\tnMonSinceFirstMolad += 5\n+\t} else if (nYearH >= 11) {\n+\t\tnMonSinceFirstMolad += 4\n+\t} else if (nYearH >= 8) {\n+\t\tnMonSinceFirstMolad += 3\n+\t} else if (nYearH >= 6) {\n+\t\tnMonSinceFirstMolad += 2\n+\t} else if (nYearH >= 3) {\n+\t\tnMonSinceFirstMolad += 1\n+\t}\n+\treturn nMonSinceFirstMolad\n+\tvar nYearInCycle\n+\tnYearInCycle = nYearH % 19\n+\treturn (nYearInCycle == 3 || nYearInCycle == 6 || nYearInCycle == 8\n+\t    || nYearInCycle == 11 || nYearInCycle == 14 || nYearInCycle == 17 || nYearInCycle == 0)\n+\tvar nMonthsSinceFirstMolad\n+\tvar nChalakim\n+\tvar nHours\n+\tvar nDays\n+\tvar nDayOfWeek\n+\tvar dTishrei1\n+\tnMonthsSinceFirstMolad = MonSinceFirstMolad(nYearH)\n+\tnChalakim = 793 * nMonthsSinceFirstMolad\n+\tnChalakim += 204\n+\tnHours = Math.floor(nChalakim / 1080)\n+\tnChalakim = nChalakim % 1080\n+\tnHours += nMonthsSinceFirstMolad * 12\n+\tnHours += 5\n+\tnDays = Math.floor(nHours / 24)\n+\tnHours = nHours % 24\n+\tnDays += 29 * nMonthsSinceFirstMolad\n+\tnDays += 2\n+\tnDayOfWeek = nDays % 7\n+\tif (!IsLeapYear(nYearH) && nDayOfWeek == 3\n+\t    && (nHours * 1080) + nChalakim >= (9 * 1080) + 204) {\n+\t\tnDayOfWeek = 5\n+\t\tnDays += 2\n+\t} else if (IsLeapYear(nYearH - 1) && nDayOfWeek == 2\n+\t    && (nHours * 1080) + nChalakim >= (15 * 1080) + 589) {\n+\t\tnDayOfWeek = 3\n+\t\tnDays += 1\n+\t} else {\n+\t\tif (nHours >= 18) {\n+\t\t\tnDayOfWeek += 1\n+\t\t\tnDayOfWeek = nDayOfWeek % 7\n+\t\t\tnDays += 1\n+\t\t}\n+\t\tif (nDayOfWeek == 1 || nDayOfWeek == 4 || nDayOfWeek == 6) {\n+\t\t\tnDayOfWeek += 1\n+\t\t\tnDayOfWeek = nDayOfWeek % 7\n+\t\t\tnDays += 1\n+\t\t}\n+\t}\n+\tnDays -= 2067025\n+\tdTishrei1 = new Date(1900, 0, 1) // 2067025 days after creation\n+\tdTishrei1.setDate(dTishrei1.getDate() + nDays)\n+\treturn dTishrei1\n+\tvar dThisTishrei1\n+\tvar dNextTishrei1\n+\tvar diff\n+\tdThisTishrei1 = Tishrei1(nYearH)\n+\tdNextTishrei1 = Tishrei1(nYearH + 1)\n+\tdiff = (dNextTishrei1 - dThisTishrei1) / (1000 * 60 * 60 * 24)\n+\treturn Math.round(diff)\n+\tvar nLengthOfYear\n+\tvar bLeap\n+\tvar dGreg\n+\tvar nMonth\n+\tvar nMonthLen\n+\tvar bHaser\n+\tvar bShalem\n+\tbLeap = IsLeapYear(nYearH)\n+\tnLengthOfYear = LengthOfYear(nYearH)\n+\tbHaser = (nLengthOfYear == 353 || nLengthOfYear == 383)\n+\tbShalem = (nLengthOfYear == 355 || nLengthOfYear == 385)\n+\tdGreg = Tishrei1(nYearH)\n+\tfor (nMonth = 1; nMonth <= nMonthH - 1; nMonth++) {\n+\t\tif (nMonth == 1 || nMonth == 5 || nMonth == 8 || nMonth == 10\n+\t\t    || nMonth == 12) {\n+\t\t\tnMonthLen = 30\n+\t\t} else if (nMonth == 4 || nMonth == 7 || nMonth == 9 || nMonth == 11\n+\t\t    || nMonth == 13) {\n+\t\t\tnMonthLen = 29\n+\t\t} else if (nMonth == 6) {\n+\t\t\tnMonthLen = (bLeap ? 30 : 0)\n+\t\t} else if (nMonth == 2) {\n+\t\t\tnMonthLen = (bShalem ? 30 : 29)\n+\t\t} else if (nMonth == 3) {\n+\t\t\tnMonthLen = (bHaser ? 29 : 30)\n+\t\t}\n+\t\tdGreg.setDate(dGreg.getDate() + nMonthLen)\n+\t}\n+\tdGreg.setDate(dGreg.getDate() + nDateH - 1)\n+\treturn dGreg\n+\tvar nYearH\n+\tvar nMonthH\n+\tvar nDateH\n+\tvar nOneMolad\n+\tvar nAvrgYear\n+\tvar nDays\n+\tvar dTishrei1\n+\tvar nLengthOfYear\n+\tvar bLeap\n+\tvar bHaser\n+\tvar bShalem\n+\tvar nMonthLen\n+\tvar bWhile\n+\tvar d1900 = new Date(1900, 0, 1)\n+\tnOneMolad = 29 + (12 / 24) + (793 / (1080 * 24))\n+\tnAvrgYear = nOneMolad * (235 / 19)\n+\tnDays = Math.round((dGreg - d1900) / (24 * 60 * 60 * 1000))\n+\tnDays += 2067025 // 2067025 days after creation\n+\tnYearH = Math.floor(nDays / nAvrgYear) + 1\n+\tdTishrei1 = Tishrei1(nYearH)\n+\tif (SameDate(dTishrei1, dGreg)) {\n+\t\tnMonthH = 1\n+\t\tnDateH = 1\n+\t} else {\n+\t\tif (dTishrei1 < dGreg) {\n+\t\t\twhile (Tishrei1(nYearH + 1) <= dGreg) {\n+\t\t\t\tnYearH += 1\n+\t\t\t}\n+\t\t} else {\n+\t\t\tnYearH -= 1\n+\t\t\twhile (Tishrei1(nYearH) > dGreg) {\n+\t\t\t\tnYearH -= 1\n+\t\t\t}\n+\t\t}\n+\t\tnDays = (dGreg - Tishrei1(nYearH)) / (24 * 60 * 60 * 1000)\n+\t\tnDays = Math.round(nDays)\n+\t\tnLengthOfYear = LengthOfYear(nYearH)\n+\t\tbHaser = nLengthOfYear == 353 || nLengthOfYear == 383\n+\t\tbShalem = nLengthOfYear == 355 || nLengthOfYear == 385\n+\t\tbLeap = IsLeapYear(nYearH)\n+\t\tnMonthH = 1\n+\t\tdo {\n+\t\t\tswitch (nMonthH) {\n+\t\t\tcase 1:\n+\t\t\tcase 5:\n+\t\t\tcase 6:\n+\t\t\tcase 8:\n+\t\t\tcase 10:\n+\t\t\tcase 12:\n+\t\t\t\tnMonthLen = 30\n+\t\t\t\tbreak\n+\t\t\tcase 4:\n+\t\t\tcase 7:\n+\t\t\tcase 9:\n+\t\t\tcase 11:\n+\t\t\tcase 13:\n+\t\t\t\tnMonthLen = 29\n+\t\t\t\tbreak\n+\t\t\tcase 6: // Adar A (6) will be skipped on non-leap years\n+\t\t\t\tnMonthLen = 30\n+\t\t\t\tbreak\n+\t\t\tcase 2: // Cheshvan, see note above\n+\t\t\t\tnMonthLen = (bShalem ? 30 : 29)\n+\t\t\t\tbreak\n+\t\t\tcase 3: // Kislev, see note above\n+\t\t\t\tnMonthLen = (bHaser ? 29 : 30)\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tif (nDays >= nMonthLen) {\n+\t\t\t\tbWhile = true\n+\t\t\t\tif (bLeap || nMonthH != 5) {\n+\t\t\t\t\tnMonthH++\n+\t\t\t\t} else {\n+\t\t\t\t\tnMonthH += 2\n+\t\t\t\t}\n+\t\t\t\tnDays -= nMonthLen\n+\t\t\t} else {\n+\t\t\t\tbWhile = false\n+\t\t\t}\n+\t\t} while (bWhile)\n+\t\tnDateH = nDays + 1\n+\t}\n+\treturn nMonthH + \"/\" + nDateH + \"/\" + nYearH\n+\treturn (d1.getFullYear() == d2.getFullYear()\n+\t    && d1.getMonth() == d2.getMonth() && d1.getDate() == d2.getDate())\n+\tvar aDate = new Array()\n+\tvar cFormatDate\n+\taDate = cDate.split(\"/\")\n+\tswitch (Number(aDate[0])) {\n+\tcase 1:\n+\t\tcFormatDate = \"Tishrei\"\n+\t\tbreak\n+\tcase 2:\n+\t\tcFormatDate = \"Cheshvan\"\n+\t\tbreak\n+\tcase 3:\n+\t\tcFormatDate = \"Kislev\"\n+\t\tbreak\n+\tcase 4:\n+\t\tcFormatDate = \"Teves\"\n+\t\tbreak\n+\tcase 5:\n+\t\tcFormatDate = \"Shevat\"\n+\t\tbreak\n+\tcase 6:\n+\t\tcFormatDate = \"Adar A\"\n+\t\tbreak\n+\tcase 7:\n+\t\tcFormatDate = (IsLeapYear(Number(aDate[2])) ? \"Adar B\" : \"Adar\")\n+\t\tbreak\n+\tcase 8:\n+\t\tcFormatDate = \"Nisan\"\n+\t\tbreak\n+\tcase 9:\n+\t\tcFormatDate = \"Iyar\"\n+\t\tbreak\n+\tcase 10:\n+\t\tcFormatDate = \"Sivan\"\n+\t\tbreak\n+\tcase 11:\n+\t\tcFormatDate = \"Tamuz\"\n+\t\tbreak\n+\tcase 12:\n+\t\tcFormatDate = \"Av\"\n+\t\tbreak\n+\tcase 13:\n+\t\tcFormatDate = \"Elul\"\n+\t\tbreak\n+\t}\n+\tcFormatDate += \" \" + aDate[1] + \", \" + aDate[2]\n+\treturn cFormatDate\n+\tvar sDate\n+\tswitch (dDate.getDay()) {\n+\tcase 0:\n+\t\tsDate = \"Sun \"\n+\t\tbreak\n+\tcase 1:\n+\t\tsDate = \"Mon \"\n+\t\tbreak\n+\tcase 2:\n+\t\tsDate = \"Tue \"\n+\t\tbreak\n+\tcase 3:\n+\t\tsDate = \"Wed \"\n+\t\tbreak\n+\tcase 4:\n+\t\tsDate = \"Thu \"\n+\t\tbreak\n+\tcase 5:\n+\t\tsDate = \"Fri \"\n+\t\tbreak\n+\tcase 6:\n+\t\tsDate = \"Sat \"\n+\t\tbreak\n+\t}\n+\tsDate += (dDate.getMonth() + 1) + \"/\"\n+\tsDate += dDate.getDate() + \"/\"\n+\tsDate += dDate.getFullYear()\n+\treturn sDate\n+\tnYearH = Number(nYearH)\n+\tnMonthH = Number(nMonthH)\n+\tnDateH = Number(nDateH)\n+\tdocument.write(FormatDateH(nMonthH + \"/\" + nDateH + \"/\" + nYearH) + \" -> \")\n+\tdocument.write(FormatDate(HebToGreg(nYearH, nMonthH, nDateH)))\n+\tdocument.write(\"<p>\")\n+\tvar nYearH\n+\tvar nMonthH\n+\tvar nDateH\n+\tvar dGreg\n+\tnYearG = Number(nYearG)\n+\tnMonthG = Number(nMonthG)\n+\tnDateG = Number(nDateG)\n+\tdGreg = new Date(nYearG, nMonthG - 1, nDateG)\n+\tdocument.write(FormatDate(dGreg) + \" -> \")\n+\tdocument.write(FormatDateH(GregToHeb(dGreg)))\n+\tdocument.write(\"<p>\")\n+    TISHREI(\"TSH\"),\n+    CHESHVAN(\"CSH\"),\n+    KISLEV(\"KSL\"),\n+    TEVES(\"TVT\"),\n+    SHEVAT(\"SHV\"),\n+    ADAR_A(\"ADR\"),\n+    ADAR(\"ADS\"),\n+    NISAN(\"NSN\"),\n+    IYAR(\"IYR\"),\n+    SIVAN(\"SVN\"),\n+    TAMUZ(\"TMZ\"),\n+    AV(\"AAV\"),\n+    ELUL(\"ELL\");\n+    public static HebrewMonth getFrom1BasedNumber(int hebrewMonth) {\n+        return HebrewMonth.values()[hebrewMonth - 1];\n+    }\n+    public static HebrewMonth getFromAbbreviation(String abbrev) {\n+        for (HebrewMonth hm : values()) {\n+            if (hm.gedcomAbbrev.equals(abbrev)) {\n+                return hm;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String gedcomAbbrev;\n+    private HebrewMonth(String gedcomAbbrev) {\n+        this.gedcomAbbrev = gedcomAbbrev;\n+    }\n+    public String getGedcomAbbrev() {\n+        return gedcomAbbrev;\n+    }\n+    @Test\n+    public void testHebrewToGregorian() {\n+        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DHEBREW@ 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+    }\n+    private final HebrewCalendar classUnderTest = new HebrewCalendar();\n+    @Test\n+    public void testConvertHebrewDateToGregorian() {\n+        assertEquals(getDate(2016, Calendar.JULY, 19), classUnderTest.convertHebrewDateToGregorian(5776, HebrewMonth.TAMUZ\n+                .getGedcomAbbrev(), 13));\n+        assertEquals(getDate(1977, Calendar.MAY, 1), classUnderTest.convertHebrewDateToGregorian(5737, HebrewMonth.IYAR\n+                .getGedcomAbbrev(), 13));\n+        assertEquals(getDate(1980, Calendar.FEBRUARY, 29), classUnderTest.convertHebrewDateToGregorian(5740, HebrewMonth.ADAR\n+                .getGedcomAbbrev(), 12));\n+        assertEquals(getDate(1917, Calendar.NOVEMBER, 11), classUnderTest.convertHebrewDateToGregorian(5678, HebrewMonth.CHESHVAN\n+                .getGedcomAbbrev(), 26));\n+        assertEquals(getDate(1776, Calendar.JULY, 4), classUnderTest.convertHebrewDateToGregorian(5536, HebrewMonth.TAMUZ\n+                .getGedcomAbbrev(), 17));\n+    }\n+    private Date getDate(int y, int m, int d) {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        c.clear();\n+        c.set(y, m, d, 0, 0);\n+        return c.getTime();\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "    private static final String CALENDAR_ESCAPE_HEBREW = \"\\\\@\\\\#DHEBREW\\\\@ \";\n    private static final String CALENDAR_ESCAPE_GREGORIAN = \"(\\\\@\\\\#DGREGORIAN\\\\@ )?\";\n    static final Pattern PATTERN_SINGLE_DATE_FULL = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_GREGORIAN + FORMAT_DAY\n            + \" \" + FORMAT_MONTH + \" \" + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_DATE_MONTH_YEAR = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_GREGORIAN\n            + FORMAT_MONTH + \" \" + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_DATE_YEAR_ONLY = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_GREGORIAN\n            + FORMAT_YEAR);\n    private static final String FORMAT_MONTH_HEBREW = \"(TSH|CSH|KSL|TVT|SHV|ADR|ADS|NSN|IYR|SVN|TMZ|AAV|ELL)\";\n    static final Pattern PATTERN_HEBREW_DATE = Pattern.compile(FORMAT_CASE_INSENSITIVE + CALENDAR_ESCAPE_HEBREW + FORMAT_DAY + \"? ?\"\n            + FORMAT_MONTH_HEBREW + \"? ?\\\\d{4}\");\n        String ds = dateString.toUpperCase();\n        if (PATTERN_HEBREW_DATE.matcher(ds).matches()) {\n            return hebrewToGregorian(ds, pref);\n        }\n        ds = removeApproximations(dateString.toUpperCase());\n    Date hebrewToGregorian(String hebrewDateString, ImpreciseDatePreference pref) {\n        if (!PATTERN_HEBREW_DATE.matcher(hebrewDateString).matches()) {\n            return null;\n        }\n        String ds = hebrewDateString.substring(\"@#DHEBREW@ \".length());\n        String[] datePieces = ds.split(\" \");\n        if (datePieces == null) {\n            return null;\n        }\n        int hebrewDay;\n        int hebrewMonth = 0;\n        int hebrewYear;\n        if (datePieces.length == 3) {\n            hebrewDay = Integer.parseInt(datePieces[0]);\n            hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[1]).ordinal() + 1;\n            hebrewYear = Integer.parseInt(datePieces[2]);\n        } else if (datePieces.length == 2) {\n            hebrewDay = 1;\n            hebrewMonth = HebrewMonth.getFromAbbreviation(datePieces[0]).ordinal() + 1;\n            hebrewYear = Integer.parseInt(datePieces[1]);\n        } else if (datePieces.length == 1) {\n            hebrewDay = 1;\n            hebrewMonth = 1;\n            hebrewYear = Integer.parseInt(datePieces[0]);\n        } else {\n            return null;\n        }\n        if (hebrewMonth == 0) {\n            return null;\n        }\n        HebrewCalendar hc = new HebrewCalendar();\n        return hc.convertHebrewDateToGregorian(hebrewYear, HebrewMonth.getFrom1BasedNumber(hebrewMonth).getGedcomAbbrev(),\n                hebrewDay);\n    }\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java": "package org.gedcom4j.parser;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\nimport java.util.concurrent.TimeUnit;\nclass HebrewCalendar {\n    Date convertHebrewDateToGregorian(int hebrewYear, String hebrewMonthAbbrev, int dayOfMonth) {\n        HebrewMonth hebrewMonth = HebrewMonth.getFromAbbreviation(hebrewMonthAbbrev);\n        int hebrewMonthNum = hebrewMonth.ordinal() + 1; // one-based\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.setTime(getFirstDayOfHebrewYear(hebrewYear));\n        for (int m = 1; m <= hebrewMonthNum - 1; m++) {\n            int monthLength = getMonthLength(hebrewYear, m);\n            c.add(Calendar.DAY_OF_YEAR, +monthLength);\n        }\n        c.add(Calendar.DAY_OF_YEAR, dayOfMonth - 1);\n        return c.getTime();\n    }\n    private Date getFirstDayOfHebrewYear(int hebrewYear) {\n        int monthsSinceFirstMolad = getMonthsSinceFirstMolad(hebrewYear);\n        int chalakim = 793 * monthsSinceFirstMolad;\n        chalakim += 204;\n        int hours = (int) Math.floor(chalakim / 1080);\n        chalakim = chalakim % 1080;\n        hours += monthsSinceFirstMolad * 12;\n        hours += 5;\n        int days = (int) Math.floor(hours / 24);\n        hours = hours % 24;\n        days += 29 * monthsSinceFirstMolad;\n        days += 2;\n        int dayOfWeek = days % 7;\n        if (!isLeapYear(hebrewYear) && dayOfWeek == 3 && (hours * 1080) + chalakim >= (9 * 1080) + 204) {\n            dayOfWeek = 5;\n            days += 2;\n        } else if (isLeapYear(hebrewYear - 1) && dayOfWeek == 2 && (hours * 1080) + chalakim >= (15 * 1080) + 589) {\n            dayOfWeek = 3;\n            days += 1;\n        } else {\n            if (hours >= 18) {\n                dayOfWeek += 1;\n                dayOfWeek = dayOfWeek % 7;\n                days += 1;\n            }\n            if (dayOfWeek == 1 || dayOfWeek == 4 || dayOfWeek == 6) {\n                dayOfWeek += 1;\n                dayOfWeek = dayOfWeek % 7;\n                days += 1;\n            }\n        }\n        days -= 2067025;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.clear();\n        c.set(1900, 0, 1, 0, 0);\n        c.add(Calendar.DATE, days);\n        Calendar gregorianReformation = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        gregorianReformation.clear();\n        gregorianReformation.set(1752, Calendar.SEPTEMBER, 14, 0, 0);\n        if (c.before(gregorianReformation)) {\n            c.add(Calendar.DATE, -10);\n        }\n        return c.getTime();\n    }\n    private int getLengthOfYear(int hebrewYear) {\n        Date thisNewYear = getFirstDayOfHebrewYear(hebrewYear);\n        Date nextNewYear = getFirstDayOfHebrewYear(hebrewYear + 1);\n        long diff = TimeUnit.DAYS.convert(nextNewYear.getTime() - thisNewYear.getTime(), TimeUnit.MILLISECONDS);\n        return (int) diff;\n    }\n    private int getMonthLength(int hebrewYear, int hebrewMonthNum) {\n        boolean leapYear = isLeapYear(hebrewYear);\n        int lenHebrewYear = getLengthOfYear(hebrewYear);\n        boolean haserYear = (lenHebrewYear == 353 || lenHebrewYear == 383);\n        boolean shalemYear = (lenHebrewYear == 355 || lenHebrewYear == 385);\n        int monthLength = 0;\n        if (hebrewMonthNum == 1 || hebrewMonthNum == 5 || hebrewMonthNum == 8 || hebrewMonthNum == 10 || hebrewMonthNum == 12) {\n            monthLength = 30;\n        } else if (hebrewMonthNum == 4 || hebrewMonthNum == 7 || hebrewMonthNum == 9 || hebrewMonthNum == 11\n                || hebrewMonthNum == 13) {\n            monthLength = 29;\n        } else if (hebrewMonthNum == 6) {\n            monthLength = (leapYear ? 30 : 0);\n        } else if (hebrewMonthNum == 2) {\n            monthLength = (shalemYear ? 30 : 29);\n        } else if (hebrewMonthNum == 3) {\n            monthLength = (haserYear ? 29 : 30);\n        }\n        return monthLength;\n    }\n    private int getMonthsSinceFirstMolad(int hebrewYear) {\n        int y = hebrewYear - 1;\n        int result = (int) (Math.floor(y / 19) * 235);\n        y = yearInLeapCycle(y);\n        result += 12 * y;\n        if (y >= 17) {\n            result += 6;\n        } else if (y >= 14) {\n            result += 5;\n        } else if (y >= 11) {\n            result += 4;\n        } else if (y >= 8) {\n            result += 3;\n        } else if (y >= 6) {\n            result += 2;\n        } else if (y >= 3) {\n            result += 1;\n        }\n        return result;\n    }\n    private boolean isLeapYear(int hebrewYear) {\n        int yearInCycle = yearInLeapCycle(hebrewYear);\n        return (yearInCycle == 3 || yearInCycle == 6 || yearInCycle == 8 || yearInCycle == 11 || yearInCycle == 14\n                || yearInCycle == 17 || yearInCycle == 0);\n    }\n    private int yearInLeapCycle(int hebrewYear) {\n        return hebrewYear % 19;\n    }\n}\n",
            "src/main/java/org/gedcom4j/parser/HebrewMonth.java": "package org.gedcom4j.parser;\nenum HebrewMonth {\n    TISHREI(\"TSH\"),\n    CHESHVAN(\"CSH\"),\n    KISLEV(\"KSL\"),\n    TEVES(\"TVT\"),\n    SHEVAT(\"SHV\"),\n    ADAR_A(\"ADR\"),\n    ADAR(\"ADS\"),\n    NISAN(\"NSN\"),\n    IYAR(\"IYR\"),\n    SIVAN(\"SVN\"),\n    TAMUZ(\"TMZ\"),\n    AV(\"AAV\"),\n    ELUL(\"ELL\");\n    public static HebrewMonth getFrom1BasedNumber(int hebrewMonth) {\n        return HebrewMonth.values()[hebrewMonth - 1];\n    }\n    public static HebrewMonth getFromAbbreviation(String abbrev) {\n        for (HebrewMonth hm : values()) {\n            if (hm.gedcomAbbrev.equals(abbrev)) {\n                return hm;\n            }\n        }\n        return null;\n    }\n    private final String gedcomAbbrev;\n    private HebrewMonth(String gedcomAbbrev) {\n        this.gedcomAbbrev = gedcomAbbrev;\n    }\n    public String getGedcomAbbrev() {\n        return gedcomAbbrev;\n    }\n}",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "    @Test\n    public void testHebrewToGregorian() {\n        assertDate(dp.parse(\"@#DHEBREW@ 12 TMZ 5776\"), 2016, Calendar.JULY, 18);\n        assertDate(dp.parse(\"@#DHEBREW@ TMZ 5776\"), 2016, Calendar.JULY, 7);\n        assertDate(dp.parse(\"@#DHEBREW@ 5776\"), 2015, Calendar.SEPTEMBER, 14);\n    }\n",
            "src/test/java/org/gedcom4j/parser/HebrewCalendarTest.java": "package org.gedcom4j.parser;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\nimport org.junit.Test;\npublic class HebrewCalendarTest {\n    private final HebrewCalendar classUnderTest = new HebrewCalendar();\n    @Test\n    public void testConvertHebrewDateToGregorian() {\n        assertEquals(getDate(2016, Calendar.JULY, 19), classUnderTest.convertHebrewDateToGregorian(5776, HebrewMonth.TAMUZ\n                .getGedcomAbbrev(), 13));\n        assertEquals(getDate(1977, Calendar.MAY, 1), classUnderTest.convertHebrewDateToGregorian(5737, HebrewMonth.IYAR\n                .getGedcomAbbrev(), 13));\n        assertEquals(getDate(1980, Calendar.FEBRUARY, 29), classUnderTest.convertHebrewDateToGregorian(5740, HebrewMonth.ADAR\n                .getGedcomAbbrev(), 12));\n        assertEquals(getDate(1917, Calendar.NOVEMBER, 11), classUnderTest.convertHebrewDateToGregorian(5678, HebrewMonth.CHESHVAN\n                .getGedcomAbbrev(), 26));\n        assertEquals(getDate(1776, Calendar.JULY, 4), classUnderTest.convertHebrewDateToGregorian(5536, HebrewMonth.TAMUZ\n                .getGedcomAbbrev(), 17));\n    }\n    private Date getDate(int y, int m, int d) {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.clear();\n        c.set(y, m, d, 0, 0);\n        return c.getTime();\n    }\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                78,
                83,
                113,
                114,
                119,
                120,
                125,
                126,
                144,
                149,
                150,
                173,
                174,
                175,
                176,
                177,
                229,
                230,
                231,
                232,
                234,
                236,
                237,
                238,
                239,
                241,
                242,
                243,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                254,
                255,
                256,
                257,
                258,
                259,
                260,
                262,
                264,
                265,
                266,
                267,
                268,
                269
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendar.java": [
                27,
                29,
                30,
                31,
                32,
                42,
                54,
                56,
                57,
                59,
                60,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                78,
                86,
                87,
                88,
                90,
                91,
                93,
                94,
                97,
                98,
                100,
                101,
                104,
                121,
                126,
                127,
                128,
                133,
                134,
                135,
                137,
                138,
                139,
                140,
                141,
                143,
                144,
                145,
                146,
                147,
                148,
                152,
                154,
                155,
                156,
                157,
                160,
                161,
                162,
                165,
                166,
                167,
                169,
                170,
                179,
                181,
                182,
                183,
                184,
                185,
                195,
                196,
                197,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                229,
                231,
                234,
                237,
                240,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                266,
                267,
                269,
                270,
                271,
                281,
                282,
                283,
                285
            ],
            "src/main/java/org/gedcom4j/parser/HebrewMonth.java": [
                1,
                8,
                11,
                13,
                15,
                17,
                19,
                21,
                23,
                25,
                27,
                29,
                31,
                33,
                35,
                44,
                45,
                46,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                67,
                75,
                76,
                77,
                84,
                85,
                86,
                88
            ],
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                185,
                186,
                187,
                188,
                189,
                190
            ],
            "src/test/java/org/gedcom4j/parser/HebrewCalendarTest.java": [
                27,
                29,
                31,
                32,
                33,
                35,
                40,
                45,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                75,
                76,
                77,
                78,
                79,
                80,
                82
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": "    static final Pattern PATTERN_SINGLE_DATE_FULL = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_DAY + \" \" + FORMAT_MONTH + \" \"\n            + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_DATE_MONTH_YEAR = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_MONTH + \" \"\n            + FORMAT_YEAR);\n    static final Pattern PATTERN_SINGLE_DATE_YEAR_ONLY = Pattern.compile(FORMAT_CASE_INSENSITIVE + FORMAT_YEAR);\n        String ds = removeApproximations(dateString.toUpperCase());\n        System.out.println(upToYYYY + oldYYYY + \" / \" + newYY);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                103,
                104,
                109,
                110,
                115,
                151,
                277
            ]
        }
    },
    {
        "commit": "a4356e0c",
        "prev_commit": "5704dd30",
        "changed_files": [
            "checkstyle-config.xml",
            "etc/checkstyle_checks.xml",
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java",
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java",
            "src/test/java/org/gedcom4j/io/reader/AnselReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/AsciiReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/UnicodeBigEndianReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/UnicodeLittleEndianReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/Utf8ReaderListenerTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java"
        ],
        "changed_files_num": 13,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java",
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java",
            "src/test/java/org/gedcom4j/io/reader/AnselReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/AsciiReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/UnicodeBigEndianReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/UnicodeLittleEndianReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/Utf8ReaderListenerTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java"
        ],
        "changed_java_files_num": 11,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n+          \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n+\t- the Java Language Specification at http://java.sun.com/docs/books/jls/second_edition/html/index.html \n+\t- the Sun Code Conventions at http://java.sun.com/docs/codeconv/ - the Javadoc \n+\tguidelines at http://java.sun.com/j2se/javadoc/writingdoccomments/index.html \n+\t- the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html \n+\t- some best practices Checkstyle is very configurable. Be sure to read the \n+\tdocumentation at http://checkstyle.sf.net (or in your downloaded distribution). \n+\tMost Checks are configurable, be sure to consult the documentation. To completely \n+\tdisable a check, just comment it out or delete it from the file. Finally, \n+\tit is worth reading the documentation. -->\n+\t<!-- If you set the basedir property below, then all reported file names \n+\t\twill be relative to the specified directory. See http://checkstyle.sourceforge.net/5.x/config.html#Checker \n+\t\t<property name=\"basedir\" value=\"${basedir}\"/> -->\n+\t<!-- Checks that a package-info.java file exists for each package. -->\n+\t<!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->\n+\t<!-- <module name=\"JavadocPackage\"/> -->\n+\t<!-- Checks whether files end with a new line. -->\n+\t<!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->\n+\t<module name=\"NewlineAtEndOfFile\" />\n+\t<!-- Checks that property files contain the same keys. -->\n+\t<!-- See http://checkstyle.sf.net/config_misc.html#Translation -->\n+\t<module name=\"Translation\" />\n+\t<!-- Checks for Size Violations. -->\n+\t<!-- See http://checkstyle.sf.net/config_sizes.html -->\n+\t<!-- module name=\"FileLength\" /-->\n+\t<!-- Checks for whitespace -->\n+\t<!-- See http://checkstyle.sf.net/config_whitespace.html -->\n+\t<module name=\"FileTabCharacter\" />\n+\t<!-- Allow suppressing checks with CHECKSTYLE:OFF and CHECKSTYLE:ON in comments -->\n+\t<module name=\"SuppressionCommentFilter\" />\n+\t<!-- Miscellaneous other checks. -->\n+\t<!-- See http://checkstyle.sf.net/config_misc.html -->\n+\t<!-- <module name=\"RegexpSingleline\"> <property name=\"format\" value=\"\\s+$\"/> \n+\t\t<property name=\"minimum\" value=\"0\"/> <property name=\"maximum\" value=\"0\"/> \n+\t\t<property name=\"message\" value=\"Line has trailing spaces.\"/> </module> -->\n+\t<module name=\"TreeWalker\">\n+\t\t<!-- required for the suppression comments filter to work -->\n+\t\t<module name=\"FileContentsHolder\" />\n+\t\t<!-- Checks for Javadoc comments. -->\n+\t\t<!-- See http://checkstyle.sf.net/config_javadoc.html -->\n+\t\t<module name=\"JavadocMethod\" />\n+\t\t<module name=\"JavadocType\" />\n+\t\t<module name=\"JavadocVariable\" />\n+\t\t<!-- module name=\"JavadocStyle\"/ -->\n+\t\t<!-- Checks for Naming Conventions. -->\n+\t\t<!-- See http://checkstyle.sf.net/config_naming.html -->\n+\t\t<module name=\"ConstantName\" />\n+\t\t<module name=\"LocalFinalVariableName\" />\n+\t\t<module name=\"LocalVariableName\" />\n+\t\t<module name=\"MemberName\" />\n+\t\t<module name=\"MethodName\" />\n+\t\t<module name=\"PackageName\" />\n+\t\t<module name=\"ParameterName\" />\n+\t\t<module name=\"StaticVariableName\" />\n+\t\t<module name=\"TypeName\" />\n+\t\t<!-- Checks for Headers -->\n+\t\t<!-- See http://checkstyle.sf.net/config_header.html -->\n+\t\t<!-- <module name=\"Header\"> -->\n+\t\t<!-- The follow property value demonstrates the ability -->\n+\t\t<!-- to have access to ANT properties. In this case it uses -->\n+\t\t<!-- the ${basedir} property to allow Checkstyle to be run -->\n+\t\t<!-- from any directory within a project. See property -->\n+\t\t<!-- expansion, -->\n+\t\t<!-- http://checkstyle.sf.net/config.html#properties -->\n+\t\t<!-- <property -->\n+\t\t<!-- name=\"headerFile\" -->\n+\t\t<!-- value=\"${basedir}/java.header\"/> -->\n+\t\t<!-- </module> -->\n+\t\t<!-- Following interprets the header file as regular expressions. -->\n+\t\t<!-- <module name=\"RegexpHeader\"/> -->\n+\t\t<!-- Checks for imports -->\n+\t\t<!-- See http://checkstyle.sf.net/config_import.html -->\n+\t\t<!-- module name=\"AvoidStarImport\" >\n+\t\t   <property name=\"allowStaticMemberImports\" value=\"true\"/>\n+\t\t   <property name=\"excludes\" value=\"org.gedcom4j.model,java.io\"/>\n+\t\t</module-->\n+\t\t<module name=\"IllegalImport\" /> <!-- defaults to sun.* packages -->\n+\t\t<module name=\"RedundantImport\" />\n+\t\t<module name=\"UnusedImports\" />\n+\t\t<!-- Checks for Size Violations. -->\n+\t\t<!-- See http://checkstyle.sf.net/config_sizes.html -->\n+\t\t<module name=\"LineLength\">\n+\t\t\t<property name=\"max\" value=\"160\" />\n+\t\t</module>\n+\t\t<module name=\"MethodLength\" />\n+\t\t<module name=\"ParameterNumber\" />\n+\t\t<!-- Checks for whitespace -->\n+\t\t<!-- See http://checkstyle.sf.net/config_whitespace.html -->\n+\t\t<module name=\"EmptyForIteratorPad\" />\n+\t\t<module name=\"GenericWhitespace\" />\n+\t\t<module name=\"MethodParamPad\" />\n+\t\t<module name=\"NoWhitespaceAfter\" />\n+\t\t<module name=\"NoWhitespaceBefore\" />\n+\t\t<module name=\"OperatorWrap\" />\n+\t\t<module name=\"ParenPad\" />\n+\t\t<module name=\"TypecastParenPad\" />\n+\t\t<module name=\"WhitespaceAfter\" />\n+\t\t<module name=\"WhitespaceAround\" />\n+\t\t<!-- Modifier Checks -->\n+\t\t<!-- See http://checkstyle.sf.net/config_modifiers.html -->\n+\t\t<module name=\"ModifierOrder\" />\n+\t\t<module name=\"RedundantModifier\" />\n+\t\t<!-- Checks for blocks. You know, those {}'s -->\n+\t\t<!-- See http://checkstyle.sf.net/config_blocks.html -->\n+\t\t<module name=\"AvoidNestedBlocks\" />\n+\t\t<module name=\"EmptyBlock\" />\n+\t\t<module name=\"LeftCurly\" />\n+\t\t<module name=\"NeedBraces\" />\n+\t\t<module name=\"RightCurly\" />\n+\t\t<!-- Checks for common coding problems -->\n+\t\t<!-- See http://checkstyle.sf.net/config_coding.html -->\n+\t\t<!-- <module name=\"AvoidInlineConditionals\"/> -->\n+\t\t<module name=\"DoubleCheckedLocking\" />\n+\t\t<module name=\"EmptyStatement\" />\n+\t\t<module name=\"EqualsHashCode\" />\n+\t\t<module name=\"HiddenField\">\n+\t\t\t<property name=\"ignoreConstructorParameter\" value=\"true\" />\n+\t\t</module>\n+\t\t<module name=\"IllegalInstantiation\" />\n+\t\t<module name=\"InnerAssignment\" />\n+\t\t<module name=\"MissingSwitchDefault\" />\n+\t\t<module name=\"RedundantThrows\" />\n+\t\t<module name=\"SimplifyBooleanExpression\" />\n+\t\t<module name=\"SimplifyBooleanReturn\" />\n+\t\t<!-- Checks for class design -->\n+\t\t<!-- See http://checkstyle.sf.net/config_design.html -->\n+\t\t<!-- <module name=\"DesignForExtension\"/> -->\n+\t\t<module name=\"FinalClass\" />\n+\t\t<module name=\"HideUtilityClassConstructor\" />\n+\t\t<module name=\"InterfaceIsType\" />\n+\t\t<!-- module name=\"VisibilityModifier\"/ -->\n+\t\t<!-- Miscellaneous other checks. -->\n+\t\t<!-- See http://checkstyle.sf.net/config_misc.html -->\n+\t\t<module name=\"ArrayTypeStyle\" />\n+\t\t<!-- module name=\"FinalParameters\"/ -->\n+\t\t<module name=\"TodoComment\" />\n+\t\t<module name=\"UpperEll\" />\n+\t</module>\n+          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n+          \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n+\t<!-- If you set the basedir property below, then all reported file names \n+\t\twill be relative to the specified directory. See http://checkstyle.sourceforge.net/5.x/config.html#Checker \n+\t\t<property name=\"basedir\" value=\"${basedir}\"/> -->\n+\t<metadata name=\"com.atlas-sw.eclipse\" value=\"I like Sydney\" />\n+\t<property name=\"severity\" value=\"error\" />\n+\t<module name=\"SuppressionFilter\">\n+\t\t<property name=\"file\" value=\"${checkstyle.suppressions.file}\" />\n+\t</module>\n+\t<module name=\"JavadocPackage\">\n+\t\t<property name=\"allowLegacy\" value=\"false\" />\n+\t</module>\n+\t<module name=\"Translation\">\n+\t\t<property name=\"severity\" value=\"${translation.severity}\" />\n+\t</module>\n+\t<module name=\"FileTabCharacter\">\n+\t\t<property name=\"eachLine\" value=\"false\" />\n+\t</module>\n+\t<module name=\"FileLength\">\n+\t\t<property name=\"fileExtensions\" value=\"java\" />\n+\t</module>\n+\t<module name=\"NewlineAtEndOfFile\" />\n+\t<module name=\"Header\">\n+\t\t<property name=\"headerFile\" value=\"${checkstyle.header.file}\" />\n+\t\t<property name=\"fileExtensions\" value=\"java\" />\n+\t\t<property name=\"id\" value=\"header\" />\n+\t</module>\n+\t<module name=\"RegexpSingleline\">\n+\t\t<property name=\"format\" value=\"\\s+$\" />\n+\t\t<property name=\"minimum\" value=\"0\" />\n+\t\t<property name=\"maximum\" value=\"0\" />\n+\t</module>\n+\t<module name=\"TreeWalker\">\n+\t\t<property name=\"tabWidth\" value=\"4\" />\n+\t\t<module name=\"AvoidStarImport\" />\n+\t\t<module name=\"ConstantName\" />\n+\t\t<module name=\"EmptyBlock\" />\n+\t\t<module name=\"EmptyForIteratorPad\" />\n+\t\t<module name=\"EqualsHashCode\" />\n+\t\t<module name=\"OneStatementPerLine\" />\n+\t\t<!-- module name=\"IllegalCatch\"/ -->\n+\t\t<module name=\"ImportControl\">\n+\t\t\t<property name=\"file\" value=\"${checkstyle.importcontrol.file}\" />\n+\t\t</module>\n+\t\t<module name=\"IllegalImport\" />\n+\t\t<module name=\"IllegalInstantiation\" />\n+\t\t<module name=\"IllegalThrows\" />\n+\t\t<module name=\"InnerAssignment\" />\n+\t\t<module name=\"JavadocType\">\n+\t\t\t<property name=\"authorFormat\" value=\"\\S\" />\n+\t\t</module>\n+\t\t<module name=\"JavadocMethod\">\n+\t\t\t<property name=\"allowUndeclaredRTE\" value=\"true\" />\n+\t\t\t<property name=\"allowThrowsTagsForSubclasses\" value=\"true\" />\n+\t\t\t<property name=\"allowMissingPropertyJavadoc\" value=\"true\" />\n+\t\t</module>\n+\t\t<module name=\"JavadocVariable\" />\n+\t\t<module name=\"JavadocStyle\">\n+\t\t\t<property name=\"scope\" value=\"public\" />\n+\t\t</module>\n+\t\t<module name=\"LeftCurly\">\n+\t\t\t<property name=\"option\" value=\"nl\" />\n+\t\t\t<property name=\"tokens\" value=\"CLASS_DEF\" />\n+\t\t\t<property name=\"tokens\" value=\"CTOR_DEF\" />\n+\t\t\t<property name=\"tokens\" value=\"INTERFACE_DEF\" />\n+\t\t\t<property name=\"tokens\" value=\"METHOD_DEF\" />\n+\t\t</module>\n+\t\t<module name=\"LeftCurly\">\n+\t\t\t<property name=\"option\" value=\"nlow\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_CATCH\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_DO\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_ELSE\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_FINALLY\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_FOR\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_IF\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_SWITCH\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_SYNCHRONIZED\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_TRY\" />\n+\t\t\t<property name=\"tokens\" value=\"LITERAL_WHILE\" />\n+\t\t</module>\n+\t\t<module name=\"OuterTypeNumber\" />\n+\t\t<module name=\"LineLength\">\n+\t\t\t<property name=\"ignorePattern\" value=\"^ *\\* *[^ ]+$\" />\n+\t\t</module>\n+\t\t<module name=\"MethodCount\">\n+\t\t\t<property name=\"maxTotal\" value=\"30\" />\n+\t\t</module>\n+\t\t<module name=\"LocalFinalVariableName\" />\n+\t\t<module name=\"LocalVariableName\" />\n+\t\t<module name=\"MemberName\">\n+\t\t\t<property name=\"format\" value=\"^m[A-Z][a-zA-Z0-9]*$\" />\n+\t\t</module>\n+\t\t<module name=\"MethodLength\" />\n+\t\t<module name=\"MethodName\" />\n+\t\t<module name=\"MethodParamPad\" />\n+\t\t<module name=\"ModifierOrder\" />\n+\t\t<module name=\"NeedBraces\" />\n+\t\t<module name=\"NoWhitespaceAfter\">\n+\t\t\t<property name=\"tokens\" value=\"ARRAY_INIT\" />\n+\t\t\t<property name=\"tokens\" value=\"BNOT\" />\n+\t\t\t<property name=\"tokens\" value=\"DEC\" />\n+\t\t\t<property name=\"tokens\" value=\"DOT\" />\n+\t\t\t<property name=\"tokens\" value=\"INC\" />\n+\t\t\t<property name=\"tokens\" value=\"LNOT\" />\n+\t\t\t<property name=\"tokens\" value=\"UNARY_MINUS\" />\n+\t\t\t<property name=\"tokens\" value=\"UNARY_PLUS\" />\n+\t\t</module>\n+\t\t<module name=\"NoWhitespaceBefore\" />\n+\t\t<module name=\"NoWhitespaceBefore\">\n+\t\t\t<property name=\"tokens\" value=\"DOT\" />\n+\t\t\t<property name=\"allowLineBreaks\" value=\"true\" />\n+\t\t</module>\n+\t\t<module name=\"OperatorWrap\" />\n+\t\t<module name=\"OperatorWrap\">\n+\t\t\t<property name=\"tokens\" value=\"ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"DIV_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"PLUS_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"MINUS_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"STAR_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"MOD_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"SR_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"BSR_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"SL_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"BXOR_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"BOR_ASSIGN\" />\n+\t\t\t<property name=\"tokens\" value=\"BAND_ASSIGN\" />\n+\t\t\t<property name=\"option\" value=\"eol\" />\n+\t\t</module>\n+\t\t<module name=\"PackageName\" />\n+\t\t<module name=\"ParameterName\">\n+\t\t\t<property name=\"format\" value=\"^a[A-Z][a-zA-Z0-9]*$\" />\n+\t\t</module>\n+\t\t<module name=\"ParameterNumber\">\n+\t\t\t<property name=\"id\" value=\"paramNum\" />\n+\t\t</module>\n+\t\t<module name=\"ParenPad\" />\n+\t\t<module name=\"TypecastParenPad\" />\n+\t\t<module name=\"RedundantImport\" />\n+\t\t<module name=\"RedundantModifier\" />\n+\t\t<module name=\"RightCurly\">\n+\t\t\t<property name=\"option\" value=\"alone\" />\n+\t\t</module>\n+\t\t<module name=\"SimplifyBooleanExpression\" />\n+\t\t<module name=\"SimplifyBooleanReturn\" />\n+\t\t<module name=\"StaticVariableName\">\n+\t\t\t<property name=\"format\" value=\"^s[A-Z][a-zA-Z0-9]*$\" />\n+\t\t</module>\n+\t\t<module name=\"TypeName\" />\n+\t\t<module name=\"UnusedImports\" />\n+\t\t<module name=\"UpperEll\" />\n+\t\t<module name=\"VisibilityModifier\" />\n+\t\t<module name=\"WhitespaceAfter\" />\n+\t\t<module name=\"WhitespaceAround\" />\n+\t\t<module name=\"GenericWhitespace\" />\n+\t\t<module name=\"FinalClass\" />\n+\t\t<module name=\"MissingSwitchDefault\" />\n+\t\t<module name=\"MagicNumber\" />\n+\t\t<module name=\"Indentation\">\n+\t\t\t<property name=\"basicOffset\" value=\"4\" />\n+\t\t\t<property name=\"braceAdjustment\" value=\"0\" />\n+\t\t\t<property name=\"caseIndent\" value=\"0\" />\n+\t\t</module>\n+\t\t<module name=\"ArrayTrailingComma\" />\n+\t\t<module name=\"FinalLocalVariable\" />\n+\t\t<module name=\"EqualsAvoidNull\" />\n+\t\t<module name=\"ParameterAssignment\" />\n+\t\t<!-- Generates quite a few errors -->\n+\t\t<module name=\"CyclomaticComplexity\">\n+\t\t\t<property name=\"severity\" value=\"ignore\" />\n+\t\t</module>\n+\t\t<module name=\"NestedForDepth\">\n+\t\t\t<property name=\"max\" value=\"2\" />\n+\t\t</module>\n+\t\t<module name=\"NestedIfDepth\">\n+\t\t\t<property name=\"max\" value=\"3\" />\n+\t\t</module>\n+\t\t<module name=\"NestedTryDepth\" />\n+\t\t<module name=\"ExplicitInitialization\" />\n+\t\t<module name=\"AnnotationUseStyle\" />\n+\t\t<module name=\"MissingDeprecated\" />\n+\t\t<module name=\"MissingOverride\">\n+\t\t\t<property name=\"javaFiveCompatibility\" value=\"true\" />\n+\t\t</module>\n+\t\t<module name=\"PackageAnnotation\" />\n+\t\t<module name=\"SuppressWarnings\" />\n+\t\t<module name=\"OuterTypeFilename\" />\n+\t\t<module name=\"HideUtilityClassConstructor\" />\n+\t</module>\n+    private static final char ANSEL_DIACRITICS_BEGIN_AT = 0x00E0;\n+    private final AnselHandler anselHandler = new AnselHandler();\n+    private int lineBufferIdx = 0;\n+    private int currChar = -1;\n+    private boolean eof = false;\n+    private final char[] lineBuffer = new char[256];\n+    private int oneCharBack = -1;\n+    private int holdingBinIdx = 0;\n+    private final char[] holdingBin = new char[2];\n+    protected AnselReader(GedcomParser parser, InputStream byteStream) {\n+        super(parser, byteStream);\n+    }\n+    @Override\n+    public String nextLine() throws IOException, GedcomParserException {\n+        if (eof) {\n+            return null;\n+        }\n+        String result = null;\n+        while (!eof) {\n+            int twoCharsBack = oneCharBack;\n+            oneCharBack = currChar;\n+            currChar = byteStream.read();\n+            if (currChar >= 0) {\n+                bytesRead++;\n+            }\n+            if (currChar < 0) {\n+                result = getThisLine();\n+                eof = true;\n+                break;\n+            }\n+            if (Character.isWhitespace(currChar) && lineBufferIdx == 0) {\n+                continue;\n+            }\n+            if ((currChar == 0x0D || currChar == 0x0A) && lineBufferIdx > 0) {\n+                if (oneCharBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n+                    if (twoCharsBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n+                        holdingBin[holdingBinIdx++] = (char) twoCharsBack;\n+                        twoCharsBack = -1; // Keeps from holding characters in reserve repeatedly\n+                    }\n+                    holdingBin[holdingBinIdx++] = (char) oneCharBack;\n+                    oneCharBack = -1; // Keeps from holding characters in reserve repeatedly\n+                }\n+                if (lineBufferIdx > 0) {\n+                    result = getThisLine();\n+                    break;\n+                }\n+                continue;\n+            }\n+            if (holdingBinIdx > 0 && isStartOfConcLine()) {\n+                lineBuffer[lineBufferIdx++] = holdingBin[0];\n+                if (holdingBinIdx > 1) {\n+                    lineBuffer[lineBufferIdx++] = holdingBin[1];\n+                }\n+                holdingBinIdx = 0;\n+                holdingBin[0] = ' ';\n+                holdingBin[1] = ' ';\n+            }\n+            if (lineBufferIdx >= 250 && currChar < ANSEL_DIACRITICS_BEGIN_AT) {\n+                result = getThisLine();\n+                insertSyntheticConcTag(result);\n+                break;\n+            }\n+            lineBuffer[lineBufferIdx++] = (char) currChar;\n+        }\n+        return result;\n+    }\n+    @Override\n+    void cleanUp() throws IOException {\n+    }\n+    private int getLevelFromLine(String line) throws GedcomParserException {\n+        int level = -1;\n+        char[] lineChars = line.toCharArray();\n+        if (Character.isDigit(lineChars[0])) {\n+            if (Character.isDigit(lineChars[1])) {\n+                if (lineChars[2] == ' ') {\n+                    level = Character.getNumericValue(lineChars[0]) * 10 + Character.getNumericValue(lineChars[1]);\n+                } else {\n+                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n+                }\n+            } else {\n+                if (lineChars[1] == ' ') {\n+                    level = Character.getNumericValue(lineChars[0]);\n+                } else {\n+                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n+                }\n+            }\n+        } else {\n+            throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. Can't split automatically.\");\n+        }\n+        return level;\n+    }\n+    private String getThisLine() {\n+        String result = null;\n+        if (lineBufferIdx > 0) {\n+            String s = new String(lineBuffer).substring(0, lineBufferIdx - holdingBinIdx);\n+            result = anselHandler.toUtf16(s);\n+        }\n+        linesRead++;\n+        Arrays.fill(lineBuffer, ' ');\n+        lineBufferIdx = 0;\n+        return result;\n+    }\n+    private void insertSyntheticConcTag(String previousLine) throws GedcomParserException {\n+        int level = getLevelFromLine(previousLine);\n+        parser.getWarnings().add(\"Line \" + linesRead + \" exceeds max length - introducing synthetic CONC tag to split line\");\n+        level++;\n+        if (level > 9) {\n+            lineBuffer[lineBufferIdx++] = Character.forDigit(level / 10, 10);\n+            lineBuffer[lineBufferIdx++] = Character.forDigit(level % 10, 10);\n+        } else {\n+            lineBuffer[lineBufferIdx++] = Character.forDigit(level, 10);\n+        }\n+        lineBuffer[lineBufferIdx++] = ' ';\n+        lineBuffer[lineBufferIdx++] = 'C';\n+        lineBuffer[lineBufferIdx++] = 'O';\n+        lineBuffer[lineBufferIdx++] = 'N';\n+        lineBuffer[lineBufferIdx++] = 'C';\n+        lineBuffer[lineBufferIdx++] = ' ';\n+        lineBuffer[lineBufferIdx++] = (char) currChar;\n+    }\n+    private boolean isStartOfConcLine() {\n+        return (lineBufferIdx >= 7 && Character.isDigit(lineBuffer[lineBufferIdx - 7]) && lineBuffer[lineBufferIdx - 6] == ' ' && lineBuffer[lineBufferIdx\n+                - 5] == 'C' && lineBuffer[lineBufferIdx - 4] == 'O' && lineBuffer[lineBufferIdx - 3] == 'N' && lineBuffer[lineBufferIdx - 2] == 'C'\n+                && lineBuffer[lineBufferIdx - 1] == ' ');\n+    }\n+    private boolean eof = false;\n+    private final StringBuilder lineBuffer = new StringBuilder();\n+    protected AsciiReader(GedcomParser parser, InputStream byteStream) {\n+        super(parser, byteStream);\n+    }\n+    @Override\n+    public String nextLine() throws IOException, GedcomParserException {\n+        String result = null;\n+        while (!eof) {\n+            int currChar = byteStream.read();\n+            if (currChar >= 0) {\n+                bytesRead++;\n+            }\n+            if (currChar < 0) {\n+                eof = true;\n+                if (lineBuffer.length() > 0) {\n+                    result = lineBuffer.toString();\n+                }\n+                break;\n+            }\n+            if (Character.isWhitespace(currChar) && lineBuffer.length() == 0) {\n+                continue;\n+            }\n+            if ((currChar == 0x0D || currChar == 0x0A) && lineBuffer.length() > 0) {\n+                result = lineBuffer.toString();\n+                lineBuffer.setLength(0);\n+                break;\n+            }\n+            if (currChar < 0x80) {\n+                lineBuffer.append(Character.valueOf((char) currChar));\n+                continue;\n+            }\n+            throw new IOException(\"Extended characters not supported in ASCII: 0x\" + Integer.toHexString(currChar));\n+        }\n+        return result;\n+    }\n+    @Override\n+    void cleanUp() throws IOException {\n+    }\n+    private boolean eof = false;\n+    private final StringBuilder lineBuffer = new StringBuilder();\n+    protected UnicodeBigEndianReader(GedcomParser parser, InputStream byteStream) {\n+        super(parser, byteStream);\n+    }\n+    @Override\n+    public String nextLine() throws IOException, GedcomParserException {\n+        String result = null;\n+        boolean beginningOfFile = true;\n+        while (!eof) {\n+            int currChar1 = byteStream.read();\n+            if (currChar1 >= 0) {\n+                bytesRead++;\n+            }\n+            int currChar2 = byteStream.read();\n+            if (currChar2 >= 0) {\n+                bytesRead++;\n+            }\n+            if (currChar1 < 0 || currChar2 < 0) {\n+                if (lineBuffer.length() > 0) {\n+                    result = lineBuffer.toString();\n+                }\n+                eof = true;\n+                break;\n+            }\n+            if (beginningOfFile && (currChar1 == 0xFE && currChar2 == 0xFF)) {\n+                beginningOfFile = false;\n+                lineBuffer.setLength(0);\n+                continue;\n+            }\n+            beginningOfFile = false;\n+            int unicodeChar = currChar1 << 8 | currChar2;\n+            Character unicode = Character.valueOf((char) unicodeChar);\n+            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\n+            \tcontinue;\n+            }\n+            \n+            if (((currChar1 == 0x00 && currChar2 == 0x0D) || (currChar1 == 0x00 && currChar2 == 0x0A)) && lineBuffer.length()>0) {\n+                if (lineBuffer.length() > 0) {\n+                    result = lineBuffer.toString();\n+                    lineBuffer.setLength(0);\n+                    break;\n+                }\n+                continue;\n+            }\n+            lineBuffer.append(Character.valueOf((char) unicodeChar));\n+        }\n+        return result;\n+    }\n+    @Override\n+    void cleanUp() throws IOException {\n+    }\n+    private boolean eof = false;\n+    private final StringBuilder lineBuffer = new StringBuilder();\n+    public UnicodeLittleEndianReader(GedcomParser parser, InputStream byteStream) {\n+        super(parser, byteStream);\n+    }\n+    @Override\n+    public String nextLine() throws IOException, GedcomParserException {\n+        String result = null;\n+        boolean beginningOfFile = true;\n+        while (!eof) {\n+            int currChar1 = byteStream.read();\n+            if (currChar1 >= 0) {\n+                bytesRead++;\n+            }\n+            int currChar2 = byteStream.read();\n+            if (currChar2 >= 0) {\n+                bytesRead++;\n+            }\n+            if (currChar1 < 0 || currChar2 < 0) {\n+                if (lineBuffer.length() > 0) {\n+                    result = lineBuffer.toString();\n+                }\n+                eof = true;\n+                break;\n+            }\n+            if (beginningOfFile && (currChar1 == 0xFF && currChar2 == 0xFE)) {\n+                beginningOfFile = false;\n+                lineBuffer.setLength(0);\n+                break;\n+            }\n+            beginningOfFile = false;\n+            int unicodeChar = currChar2 << 8 | currChar1;\n+            Character unicode = Character.valueOf((char) unicodeChar);\n+            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\n+            \tcontinue;\n+            }\n+            \n+            \n+            if (lineBuffer.length()>0 && ((currChar1 == 0x0D && currChar2 == 0x00) || (currChar1 == 0x0A && currChar2 == 0x00))) {\n+                if (lineBuffer.length() > 0) {\n+                    result = lineBuffer.toString();\n+                    lineBuffer.setLength(0);\n+                    break;\n+                }\n+                continue;\n+            }\n+            lineBuffer.append(Character.valueOf((char) unicodeChar));\n+        }\n+        return result;\n+    }\n+    @Override\n+    void cleanUp() throws IOException {\n+    }\n+    public AnselReaderListenerTest() {\n+        super(\"sample/willis-ansel.ged\", 20036, 587409, 41);\n+    }\n+    public AsciiReaderListenerTest() {\n+        super(\"sample/willis-ascii.ged\", 20036, 587409, 41);\n+    }\n+    public UnicodeBigEndianReaderListenerTest() {\n+        super(\"sample/willis-unicode-bigendian.ged\", 20036, 1174850, 41);\n+    }\n+    public UnicodeLittleEndianReaderListenerTest() {\n+        super(\"sample/willis-unicode-littleendian.ged\", 20036, 1174856, 41);\n+    }\n+    public Utf8ReaderListenerTest() {\n+        super(\"sample/willis.ged\", 23553, 686101, 48);\n+    }\n+    private int constructNotificationCount = 0;\n+    private int constructionCancelAfter = Integer.MAX_VALUE;\n+    private int linesConstructed = 0;\n+    private int bytesWritten = 0;\n+    private GedcomWriter gw;\n+    private int fileNotificationCount = 0;\n+    private int fileCancelAfter = Integer.MAX_VALUE;\n+    @Override\n+    public void progressNotification(ConstructProgressEvent e) {\n+        constructNotificationCount++;\n+        linesConstructed = e.getLinesProcessed();\n+        if (constructNotificationCount >= constructionCancelAfter) {\n+            gw.cancel();\n+        }\n+    }\n+    @Override\n+    public void progressNotification(FileProgressEvent e) {\n+        fileNotificationCount++;\n+        bytesWritten = e.getBytesProcessed();\n+        if (fileNotificationCount > fileCancelAfter) {\n+            gw.cancel();\n+        }\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test(expected = WriterCancelledException.class)\n+    public void testConstuctionCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-ascii.ged\");\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        constructionCancelAfter = 5;\n+        gw.write(new NullOutputStream());\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test(expected = WriterCancelledException.class)\n+    public void testFileCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-ascii.ged\");\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        fileCancelAfter = 5;\n+        gw.write(new NullOutputStream());\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationAnselCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-ansel.ged\");\n+        cleanUpGedcom(gp, Encoding.ANSEL);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CRLF);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new NullOutputStream());\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(42, fileNotificationCount);\n+        assertEquals(20022, linesConstructed);\n+        assertEquals(621821, bytesWritten);\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationAnselCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-ansel.ged\");\n+        cleanUpGedcom(gp, Encoding.ANSEL);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new NullOutputStream());\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(42, fileNotificationCount);\n+        assertEquals(20022, linesConstructed);\n+        assertEquals(601799, bytesWritten);\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationAsciiCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-ascii.ged\");\n+        cleanUpGedcom(gp, Encoding.ASCII);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CRLF);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new NullOutputStream());\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(42, fileNotificationCount);\n+        assertEquals(20022, linesConstructed);\n+        assertEquals(621821, bytesWritten);\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationAsciiCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-ascii.ged\");\n+        cleanUpGedcom(gp, Encoding.ASCII);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new NullOutputStream());\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(42, fileNotificationCount);\n+        assertEquals(20022, linesConstructed);\n+        assertEquals(601799, bytesWritten);\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationUnicodeBigEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-unicode-bigendian.ged\");\n+        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CRLF);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new NullOutputStream());\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(42, fileNotificationCount);\n+        assertEquals(20022, linesConstructed);\n+        assertEquals(1243670, bytesWritten);\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationUnicodeBigEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-unicode-bigendian.ged\");\n+        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new NullOutputStream());\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(42, fileNotificationCount);\n+        assertEquals(20022, linesConstructed);\n+        assertEquals(1203626, bytesWritten);\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationUnicodeLittleEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-unicode-littleendian.ged\");\n+        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CRLF);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(42, fileNotificationCount);\n+        assertEquals(20022, linesConstructed);\n+        assertEquals(1243676, bytesWritten);\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationUnicodeLittleEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis-unicode-littleendian.ged\");\n+        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(42, fileNotificationCount);\n+        assertEquals(20022, linesConstructed);\n+        assertEquals(1203632, bytesWritten);\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationUtf8Crlf() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis.ged\");\n+        cleanUpGedcom(gp, Encoding.UTF_8);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CRLF);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new NullOutputStream());\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(41, fileNotificationCount);\n+        assertEquals(20019, linesConstructed);\n+        assertEquals(606208, bytesWritten);\n+    }\n+    @SuppressWarnings(\"resource\")\n+    @Test\n+    public void testNoCancellationUtf8CrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis.ged\");\n+        cleanUpGedcom(gp, Encoding.UTF_8);\n+        gw = new GedcomWriter(gp.getGedcom());\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\n+        gw.setAutorepair(true);\n+        gw.registerConstructObserver(this);\n+        gw.registerFileObserver(this);\n+        try {\n+            gw.write(new NullOutputStream());\n+        } catch (GedcomWriterException e) {\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n+                System.out.println(f);\n+            }\n+            throw e;\n+        }\n+        assertEquals(40, constructNotificationCount);\n+        assertEquals(41, fileNotificationCount);\n+        assertEquals(20019, linesConstructed);\n+        assertEquals(581632, bytesWritten);\n+    }\n+    private void cleanUpGedcom(GedcomParser gp, Encoding encoding) {\n+        CharacterSet characterSet = new CharacterSet();\n+        characterSet.setCharacterSetName(new StringWithCustomTags(encoding.getCharacterSetName()));\n+        gp.getGedcom().getHeader().setCharacterSet(characterSet);\n+        GedcomVersion gv = new GedcomVersion();\n+        gv.setVersionNumber(SupportedVersion.V5_5_1);\n+        gp.getGedcom().getHeader().setGedcomVersion(gv);\n+        for (Individual i : gp.getGedcom().getIndividuals().values()) {\n+            if (i.getEvents() != null) {\n+                for (AbstractEvent e : i.getEvents()) {\n+                    e.setDescription(null);\n+                }\n+            }\n+        }\n+        for (Family f : gp.getGedcom().getFamilies().values()) {\n+            if (f.getEvents() != null) {\n+                for (AbstractEvent e : f.getEvents()) {\n+                    e.setDescription(null);\n+                }\n+            }\n+        }\n+    }\n+    @Test\n+    public void testIssue97() throws GedcomWriterException {\n+        Gedcom g = new Gedcom();\n+        g.setSubmission(new Submission(\"@SUBN0001@\"));\n+        g.getHeader().setSubmission(g.getSubmission());\n+        Submitter s = new Submitter();\n+        s.setXref(\"@SUBM0001@\");\n+        s.setName(new StringWithCustomTags(\"Line break in middle of a wo\\nrd\"));\n+        g.getSubmitters().put(s.getXref(), s);\n+        g.getHeader().setSubmitter(s);\n+        GedcomWriter gw = new GedcomWriter(g);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        gw.write(baos);\n+        String output = baos.toString().replaceAll(\"\\\\r\\\\n\",\"\\n\");\n+        assertEquals(\"0 HEAD\\n\" + \"1 SOUR UNSPECIFIED\\n\" + \"1 SUBM @SUBM0001@\\n\" + \"1 SUBN @SUBN0001@\\n\" + \"1 GEDC\\n\"\n+                + \"2 VERS 5.5.1\\n\" + \"2 FORM LINEAGE-LINKED\\n\" + \"1 CHAR ANSEL\\n\" + \"0 @SUBN0001@ SUBN\\n\" + \"0 @SUBM0001@ SUBM\\n\"\n+                + \"1 NAME Line break in middle of a wo\\n\" + \"2 CONT rd\\n\" + \"0 TRLR\\n\", output);\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Arrays;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.io.encoding.AnselHandler;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class AnselReader extends AbstractEncodingSpecificReader {\n    private static final char ANSEL_DIACRITICS_BEGIN_AT = 0x00E0;\n    private final AnselHandler anselHandler = new AnselHandler();\n    private int lineBufferIdx = 0;\n    private int currChar = -1;\n    private boolean eof = false;\n    private final char[] lineBuffer = new char[256];\n    private int oneCharBack = -1;\n    private int holdingBinIdx = 0;\n    private final char[] holdingBin = new char[2];\n    protected AnselReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        if (eof) {\n            return null;\n        }\n        String result = null;\n        while (!eof) {\n            int twoCharsBack = oneCharBack;\n            oneCharBack = currChar;\n            currChar = byteStream.read();\n            if (currChar >= 0) {\n                bytesRead++;\n            }\n            if (currChar < 0) {\n                result = getThisLine();\n                eof = true;\n                break;\n            }\n            if (Character.isWhitespace(currChar) && lineBufferIdx == 0) {\n                continue;\n            }\n            if ((currChar == 0x0D || currChar == 0x0A) && lineBufferIdx > 0) {\n                if (oneCharBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n                    if (twoCharsBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n                        holdingBin[holdingBinIdx++] = (char) twoCharsBack;\n                        twoCharsBack = -1; // Keeps from holding characters in reserve repeatedly\n                    }\n                    holdingBin[holdingBinIdx++] = (char) oneCharBack;\n                    oneCharBack = -1; // Keeps from holding characters in reserve repeatedly\n                }\n                if (lineBufferIdx > 0) {\n                    result = getThisLine();\n                    break;\n                }\n                continue;\n            }\n            if (holdingBinIdx > 0 && isStartOfConcLine()) {\n                lineBuffer[lineBufferIdx++] = holdingBin[0];\n                if (holdingBinIdx > 1) {\n                    lineBuffer[lineBufferIdx++] = holdingBin[1];\n                }\n                holdingBinIdx = 0;\n                holdingBin[0] = ' ';\n                holdingBin[1] = ' ';\n            }\n            if (lineBufferIdx >= 250 && currChar < ANSEL_DIACRITICS_BEGIN_AT) {\n                result = getThisLine();\n                insertSyntheticConcTag(result);\n                break;\n            }\n            lineBuffer[lineBufferIdx++] = (char) currChar;\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n    private int getLevelFromLine(String line) throws GedcomParserException {\n        int level = -1;\n        char[] lineChars = line.toCharArray();\n        if (Character.isDigit(lineChars[0])) {\n            if (Character.isDigit(lineChars[1])) {\n                if (lineChars[2] == ' ') {\n                    level = Character.getNumericValue(lineChars[0]) * 10 + Character.getNumericValue(lineChars[1]);\n                } else {\n                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                }\n            } else {\n                if (lineChars[1] == ' ') {\n                    level = Character.getNumericValue(lineChars[0]);\n                } else {\n                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                }\n            }\n        } else {\n            throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. Can't split automatically.\");\n        }\n        return level;\n    }\n    private String getThisLine() {\n        String result = null;\n        if (lineBufferIdx > 0) {\n            String s = new String(lineBuffer).substring(0, lineBufferIdx - holdingBinIdx);\n            result = anselHandler.toUtf16(s);\n        }\n        linesRead++;\n        Arrays.fill(lineBuffer, ' ');\n        lineBufferIdx = 0;\n        return result;\n    }\n    private void insertSyntheticConcTag(String previousLine) throws GedcomParserException {\n        int level = getLevelFromLine(previousLine);\n        parser.getWarnings().add(\"Line \" + linesRead + \" exceeds max length - introducing synthetic CONC tag to split line\");\n        level++;\n        if (level > 9) {\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level / 10, 10);\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level % 10, 10);\n        } else {\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level, 10);\n        }\n        lineBuffer[lineBufferIdx++] = ' ';\n        lineBuffer[lineBufferIdx++] = 'C';\n        lineBuffer[lineBufferIdx++] = 'O';\n        lineBuffer[lineBufferIdx++] = 'N';\n        lineBuffer[lineBufferIdx++] = 'C';\n        lineBuffer[lineBufferIdx++] = ' ';\n        lineBuffer[lineBufferIdx++] = (char) currChar;\n    }\n    private boolean isStartOfConcLine() {\n        return (lineBufferIdx >= 7 && Character.isDigit(lineBuffer[lineBufferIdx - 7]) && lineBuffer[lineBufferIdx - 6] == ' ' && lineBuffer[lineBufferIdx\n                - 5] == 'C' && lineBuffer[lineBufferIdx - 4] == 'O' && lineBuffer[lineBufferIdx - 3] == 'N' && lineBuffer[lineBufferIdx - 2] == 'C'\n                && lineBuffer[lineBufferIdx - 1] == ' ');\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class AsciiReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    protected AsciiReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        while (!eof) {\n            int currChar = byteStream.read();\n            if (currChar >= 0) {\n                bytesRead++;\n            }\n            if (currChar < 0) {\n                eof = true;\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                break;\n            }\n            if (Character.isWhitespace(currChar) && lineBuffer.length() == 0) {\n                continue;\n            }\n            if ((currChar == 0x0D || currChar == 0x0A) && lineBuffer.length() > 0) {\n                result = lineBuffer.toString();\n                lineBuffer.setLength(0);\n                break;\n            }\n            if (currChar < 0x80) {\n                lineBuffer.append(Character.valueOf((char) currChar));\n                continue;\n            }\n            throw new IOException(\"Extended characters not supported in ASCII: 0x\" + Integer.toHexString(currChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class UnicodeBigEndianReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    protected UnicodeBigEndianReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        boolean beginningOfFile = true;\n        while (!eof) {\n            int currChar1 = byteStream.read();\n            if (currChar1 >= 0) {\n                bytesRead++;\n            }\n            int currChar2 = byteStream.read();\n            if (currChar2 >= 0) {\n                bytesRead++;\n            }\n            if (currChar1 < 0 || currChar2 < 0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                eof = true;\n                break;\n            }\n            if (beginningOfFile && (currChar1 == 0xFE && currChar2 == 0xFF)) {\n                beginningOfFile = false;\n                lineBuffer.setLength(0);\n                continue;\n            }\n            beginningOfFile = false;\n            int unicodeChar = currChar1 << 8 | currChar2;\n            Character unicode = Character.valueOf((char) unicodeChar);\n            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\n            \tcontinue;\n            }\n            if (((currChar1 == 0x00 && currChar2 == 0x0D) || (currChar1 == 0x00 && currChar2 == 0x0A)) && lineBuffer.length()>0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                    lineBuffer.setLength(0);\n                    break;\n                }\n                continue;\n            }\n            lineBuffer.append(Character.valueOf((char) unicodeChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class UnicodeLittleEndianReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    public UnicodeLittleEndianReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        boolean beginningOfFile = true;\n        while (!eof) {\n            int currChar1 = byteStream.read();\n            if (currChar1 >= 0) {\n                bytesRead++;\n            }\n            int currChar2 = byteStream.read();\n            if (currChar2 >= 0) {\n                bytesRead++;\n            }\n            if (currChar1 < 0 || currChar2 < 0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                eof = true;\n                break;\n            }\n            if (beginningOfFile && (currChar1 == 0xFF && currChar2 == 0xFE)) {\n                beginningOfFile = false;\n                lineBuffer.setLength(0);\n                break;\n            }\n            beginningOfFile = false;\n            int unicodeChar = currChar2 << 8 | currChar1;\n            Character unicode = Character.valueOf((char) unicodeChar);\n            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\n            \tcontinue;\n            }\n            if (lineBuffer.length()>0 && ((currChar1 == 0x0D && currChar2 == 0x00) || (currChar1 == 0x0A && currChar2 == 0x00))) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                    lineBuffer.setLength(0);\n                    break;\n                }\n                continue;\n            }\n            lineBuffer.append(Character.valueOf((char) unicodeChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/AnselReaderListenerTest.java": "package org.gedcom4j.io.reader;\npublic class AnselReaderListenerTest extends AbstractReaderListenerTest {\n    public AnselReaderListenerTest() {\n        super(\"sample/willis-ansel.ged\", 20036, 587409, 41);\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/AsciiReaderListenerTest.java": "package org.gedcom4j.io.reader;\npublic class AsciiReaderListenerTest extends AbstractReaderListenerTest {\n    public AsciiReaderListenerTest() {\n        super(\"sample/willis-ascii.ged\", 20036, 587409, 41);\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/UnicodeBigEndianReaderListenerTest.java": "package org.gedcom4j.io.reader;\npublic class UnicodeBigEndianReaderListenerTest extends AbstractReaderListenerTest {\n    public UnicodeBigEndianReaderListenerTest() {\n        super(\"sample/willis-unicode-bigendian.ged\", 20036, 1174850, 41);\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/UnicodeLittleEndianReaderListenerTest.java": "package org.gedcom4j.io.reader;\npublic class UnicodeLittleEndianReaderListenerTest extends AbstractReaderListenerTest {\n    public UnicodeLittleEndianReaderListenerTest() {\n        super(\"sample/willis-unicode-littleendian.ged\", 20036, 1174856, 41);\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/Utf8ReaderListenerTest.java": "package org.gedcom4j.io.reader;\npublic class Utf8ReaderListenerTest extends AbstractReaderListenerTest {\n    public Utf8ReaderListenerTest() {\n        super(\"sample/willis.ged\", 23553, 686101, 48);\n    }\n}\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": "package org.gedcom4j.writer;\nimport static org.junit.Assert.assertEquals;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.exception.GedcomWriterException;\nimport org.gedcom4j.exception.WriterCancelledException;\nimport org.gedcom4j.io.encoding.Encoding;\nimport org.gedcom4j.io.event.FileProgressEvent;\nimport org.gedcom4j.io.event.FileProgressListener;\nimport org.gedcom4j.io.writer.LineTerminator;\nimport org.gedcom4j.io.writer.NullOutputStream;\nimport org.gedcom4j.model.*;\nimport org.gedcom4j.parser.GedcomParser;\nimport org.gedcom4j.validate.GedcomValidationFinding;\nimport org.gedcom4j.writer.event.ConstructProgressEvent;\nimport org.gedcom4j.writer.event.ConstructProgressListener;\nimport org.junit.Test;\npublic class GedcomWriterFileProgressAndCancellationTest implements ConstructProgressListener, FileProgressListener {\n    private int constructNotificationCount = 0;\n    private int constructionCancelAfter = Integer.MAX_VALUE;\n    private int linesConstructed = 0;\n    private int bytesWritten = 0;\n    private GedcomWriter gw;\n    private int fileNotificationCount = 0;\n    private int fileCancelAfter = Integer.MAX_VALUE;\n    @Override\n    public void progressNotification(ConstructProgressEvent e) {\n        constructNotificationCount++;\n        linesConstructed = e.getLinesProcessed();\n        if (constructNotificationCount >= constructionCancelAfter) {\n            gw.cancel();\n        }\n    }\n    @Override\n    public void progressNotification(FileProgressEvent e) {\n        fileNotificationCount++;\n        bytesWritten = e.getBytesProcessed();\n        if (fileNotificationCount > fileCancelAfter) {\n            gw.cancel();\n        }\n    }\n    @SuppressWarnings(\"resource\")\n    @Test(expected = WriterCancelledException.class)\n    public void testConstuctionCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        constructionCancelAfter = 5;\n        gw.write(new NullOutputStream());\n    }\n    @SuppressWarnings(\"resource\")\n    @Test(expected = WriterCancelledException.class)\n    public void testFileCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        fileCancelAfter = 5;\n        gw.write(new NullOutputStream());\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAnselCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ansel.ged\");\n        cleanUpGedcom(gp, Encoding.ANSEL);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(621821, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAnselCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ansel.ged\");\n        cleanUpGedcom(gp, Encoding.ANSEL);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(601799, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAsciiCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(621821, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAsciiCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(601799, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeBigEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-bigendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1243670, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeBigEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-bigendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1203626, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeLittleEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-littleendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1243676, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeLittleEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-littleendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1203632, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUtf8Crlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis.ged\");\n        cleanUpGedcom(gp, Encoding.UTF_8);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(41, fileNotificationCount);\n        assertEquals(20019, linesConstructed);\n        assertEquals(606208, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUtf8CrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis.ged\");\n        cleanUpGedcom(gp, Encoding.UTF_8);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(41, fileNotificationCount);\n        assertEquals(20019, linesConstructed);\n        assertEquals(581632, bytesWritten);\n    }\n    private void cleanUpGedcom(GedcomParser gp, Encoding encoding) {\n        CharacterSet characterSet = new CharacterSet();\n        characterSet.setCharacterSetName(new StringWithCustomTags(encoding.getCharacterSetName()));\n        gp.getGedcom().getHeader().setCharacterSet(characterSet);\n        GedcomVersion gv = new GedcomVersion();\n        gv.setVersionNumber(SupportedVersion.V5_5_1);\n        gp.getGedcom().getHeader().setGedcomVersion(gv);\n        for (Individual i : gp.getGedcom().getIndividuals().values()) {\n            if (i.getEvents() != null) {\n                for (AbstractEvent e : i.getEvents()) {\n                    e.setDescription(null);\n                }\n            }\n        }\n        for (Family f : gp.getGedcom().getFamilies().values()) {\n            if (f.getEvents() != null) {\n                for (AbstractEvent e : f.getEvents()) {\n                    e.setDescription(null);\n                }\n            }\n        }\n    }\n}\n",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": "package org.gedcom4j.writer;\nimport static org.junit.Assert.assertEquals;\nimport java.io.ByteArrayOutputStream;\nimport org.gedcom4j.exception.GedcomWriterException;\nimport org.gedcom4j.model.Gedcom;\nimport org.gedcom4j.model.StringWithCustomTags;\nimport org.gedcom4j.model.Submission;\nimport org.gedcom4j.model.Submitter;\nimport org.junit.Test;\npublic class Issue97Test {\n    @Test\n    public void testIssue97() throws GedcomWriterException {\n        Gedcom g = new Gedcom();\n        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        g.getHeader().setSubmission(g.getSubmission());\n        Submitter s = new Submitter();\n        s.setXref(\"@SUBM0001@\");\n        s.setName(new StringWithCustomTags(\"Line break in middle of a wo\\nrd\"));\n        g.getSubmitters().put(s.getXref(), s);\n        g.getHeader().setSubmitter(s);\n        GedcomWriter gw = new GedcomWriter(g);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        gw.write(baos);\n        String output = baos.toString().replaceAll(\"\\\\r\\\\n\",\"\\n\");\n        assertEquals(\"0 HEAD\\n\" + \"1 SOUR UNSPECIFIED\\n\" + \"1 SUBM @SUBM0001@\\n\" + \"1 SUBN @SUBN0001@\\n\" + \"1 GEDC\\n\"\n                + \"2 VERS 5.5.1\\n\" + \"2 FORM LINEAGE-LINKED\\n\" + \"1 CHAR ANSEL\\n\" + \"0 @SUBN0001@ SUBN\\n\" + \"0 @SUBM0001@ SUBM\\n\"\n                + \"1 NAME Line break in middle of a wo\\n\" + \"2 CONT rd\\n\" + \"0 TRLR\\n\", output);\n    }\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": [
                27,
                29,
                30,
                31,
                33,
                34,
                35,
                43,
                48,
                53,
                58,
                63,
                68,
                73,
                78,
                83,
                89,
                100,
                101,
                102,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                119,
                120,
                121,
                122,
                123,
                126,
                127,
                128,
                131,
                134,
                135,
                140,
                141,
                142,
                147,
                148,
                149,
                152,
                153,
                154,
                155,
                158,
                159,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                172,
                175,
                176,
                177,
                178,
                179,
                183,
                185,
                186,
                188,
                190,
                191,
                193,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                214,
                219,
                220,
                221,
                222,
                223,
                224,
                229,
                230,
                231,
                232,
                237,
                238,
                239,
                240,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                267,
                268,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                293,
                294,
                295,
                296,
                297,
                299
            ],
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java": [
                27,
                29,
                30,
                32,
                33,
                40,
                45,
                50,
                61,
                62,
                63,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                75,
                77,
                78,
                79,
                80,
                81,
                82,
                85,
                86,
                87,
                90,
                91,
                92,
                93,
                94,
                99,
                100,
                101,
                102,
                105,
                106,
                107,
                108,
                110,
                111,
                113,
                115
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": [
                27,
                29,
                30,
                32,
                33,
                40,
                45,
                50,
                60,
                61,
                62,
                64,
                65,
                66,
                68,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                81,
                83,
                84,
                85,
                86,
                87,
                88,
                91,
                92,
                93,
                94,
                95,
                97,
                100,
                101,
                102,
                103,
                104,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                117,
                118,
                119,
                120,
                122,
                123,
                125,
                127
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": [
                27,
                29,
                30,
                32,
                33,
                41,
                46,
                51,
                62,
                63,
                64,
                66,
                67,
                68,
                70,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                83,
                85,
                86,
                87,
                88,
                89,
                90,
                93,
                94,
                95,
                96,
                97,
                99,
                102,
                103,
                104,
                105,
                106,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                124,
                125,
                127,
                129
            ],
            "src/test/java/org/gedcom4j/io/reader/AnselReaderListenerTest.java": [
                27,
                35,
                40,
                41,
                42,
                44
            ],
            "src/test/java/org/gedcom4j/io/reader/AsciiReaderListenerTest.java": [
                27,
                35,
                40,
                41,
                42,
                44
            ],
            "src/test/java/org/gedcom4j/io/reader/UnicodeBigEndianReaderListenerTest.java": [
                27,
                35,
                40,
                41,
                42,
                44
            ],
            "src/test/java/org/gedcom4j/io/reader/UnicodeLittleEndianReaderListenerTest.java": [
                27,
                35,
                40,
                41,
                42,
                44
            ],
            "src/test/java/org/gedcom4j/io/reader/Utf8ReaderListenerTest.java": [
                27,
                35,
                40,
                41,
                42,
                44
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": [
                27,
                29,
                31,
                32,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                54,
                59,
                64,
                69,
                74,
                79,
                84,
                89,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                325,
                326,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                355,
                356,
                357,
                358,
                359,
                360,
                361,
                373,
                374,
                375,
                376,
                377,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                385,
                386,
                387,
                388,
                389,
                390,
                391,
                392,
                393,
                394,
                395,
                396,
                408,
                409,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                418,
                419,
                420,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                428,
                429,
                430,
                431,
                443,
                444,
                445,
                446,
                447,
                448,
                449,
                450,
                451,
                452,
                453,
                454,
                455,
                456,
                457,
                458,
                459,
                460,
                461,
                462,
                463,
                464,
                465,
                466,
                478,
                479,
                480,
                481,
                482,
                483,
                484,
                485,
                486,
                487,
                488,
                489,
                490,
                491,
                492,
                493,
                494,
                495,
                496,
                497,
                498,
                499,
                500,
                501,
                511,
                512,
                513,
                514,
                515,
                516,
                517,
                518,
                519,
                520,
                521,
                522,
                523,
                524,
                525,
                526,
                527,
                528,
                529,
                530,
                531,
                532,
                534
            ],
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": [
                27,
                29,
                31,
                33,
                34,
                35,
                36,
                37,
                38,
                46,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                61,
                62,
                63,
                65,
                66,
                67,
                69,
                70,
                71,
                72,
                73,
                75
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Arrays;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.io.encoding.AnselHandler;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class AnselReader extends AbstractEncodingSpecificReader {\n    private static final char ANSEL_DIACRITICS_BEGIN_AT = 0x00E0;\n    private final AnselHandler anselHandler = new AnselHandler();\n    private int lineBufferIdx = 0;\n    private int currChar = -1;\n    private boolean eof = false;\n    private final char[] lineBuffer = new char[256];\n    private int oneCharBack = -1;\n    private int holdingBinIdx = 0;\n    private final char[] holdingBin = new char[2];\n    protected AnselReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        if (eof) {\n            return null;\n        }\n        String result = null;\n        while (!eof) {\n            int twoCharsBack = oneCharBack;\n            oneCharBack = currChar;\n            currChar = byteStream.read();\n            if (currChar >= 0) {\n                bytesRead++;\n            }\n            if (currChar < 0) {\n                result = getThisLine();\n                eof = true;\n                break;\n            }\n            if (Character.isWhitespace(currChar) && lineBufferIdx == 0) {\n                continue;\n            }\n            if ((currChar == 0x0D || currChar == 0x0A) && lineBufferIdx > 0) {\n                if (oneCharBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n                    if (twoCharsBack >= ANSEL_DIACRITICS_BEGIN_AT) {\n                        holdingBin[holdingBinIdx++] = (char) twoCharsBack;\n                        twoCharsBack = -1; // Keeps from holding characters in reserve repeatedly\n                    }\n                    holdingBin[holdingBinIdx++] = (char) oneCharBack;\n                    oneCharBack = -1; // Keeps from holding characters in reserve repeatedly\n                }\n                if (lineBufferIdx > 0) {\n                    result = getThisLine();\n                    break;\n                }\n                continue;\n            }\n            if (holdingBinIdx > 0 && isStartOfConcLine()) {\n                lineBuffer[lineBufferIdx++] = holdingBin[0];\n                if (holdingBinIdx > 1) {\n                    lineBuffer[lineBufferIdx++] = holdingBin[1];\n                }\n                holdingBinIdx = 0;\n                holdingBin[0] = ' ';\n                holdingBin[1] = ' ';\n            }\n            if (lineBufferIdx >= 250 && currChar < ANSEL_DIACRITICS_BEGIN_AT) {\n                result = getThisLine();\n                insertSyntheticConcTag(result);\n                break;\n            }\n            lineBuffer[lineBufferIdx++] = (char) currChar;\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n    private int getLevelFromLine(String line) throws GedcomParserException {\n        int level = -1;\n        char[] lineChars = line.toCharArray();\n        if (Character.isDigit(lineChars[0])) {\n            if (Character.isDigit(lineChars[1])) {\n                if (lineChars[2] == ' ') {\n                    level = Character.getNumericValue(lineChars[0]) * 10 + Character.getNumericValue(lineChars[1]);\n                } else {\n                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                }\n            } else {\n                if (lineChars[1] == ' ') {\n                    level = Character.getNumericValue(lineChars[0]);\n                } else {\n                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                }\n            }\n        } else {\n            throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. Can't split automatically.\");\n        }\n        return level;\n    }\n    private String getThisLine() {\n        String result = null;\n        if (lineBufferIdx > 0) {\n            String s = new String(lineBuffer).substring(0, lineBufferIdx - holdingBinIdx);\n            result = anselHandler.toUtf16(s);\n        }\n        linesRead++;\n        Arrays.fill(lineBuffer, ' ');\n        lineBufferIdx = 0;\n        return result;\n    }\n    private void insertSyntheticConcTag(String previousLine) throws GedcomParserException {\n        int level = getLevelFromLine(previousLine);\n        parser.getWarnings().add(\"Line \" + linesRead + \" exceeds max length - introducing synthetic CONC tag to split line\");\n        level++;\n        if (level > 9) {\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level / 10, 10);\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level % 10, 10);\n        } else {\n            lineBuffer[lineBufferIdx++] = Character.forDigit(level, 10);\n        }\n        lineBuffer[lineBufferIdx++] = ' ';\n        lineBuffer[lineBufferIdx++] = 'C';\n        lineBuffer[lineBufferIdx++] = 'O';\n        lineBuffer[lineBufferIdx++] = 'N';\n        lineBuffer[lineBufferIdx++] = 'C';\n        lineBuffer[lineBufferIdx++] = ' ';\n        lineBuffer[lineBufferIdx++] = (char) currChar;\n    }\n    private boolean isStartOfConcLine() {\n        return (lineBufferIdx >= 7 && Character.isDigit(lineBuffer[lineBufferIdx - 7]) && lineBuffer[lineBufferIdx - 6] == ' ' && lineBuffer[lineBufferIdx\n                - 5] == 'C' && lineBuffer[lineBufferIdx - 4] == 'O' && lineBuffer[lineBufferIdx - 3] == 'N' && lineBuffer[lineBufferIdx - 2] == 'C'\n                && lineBuffer[lineBufferIdx - 1] == ' ');\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class AsciiReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    protected AsciiReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        while (!eof) {\n            int currChar = byteStream.read();\n            if (currChar >= 0) {\n                bytesRead++;\n            }\n            if (currChar < 0) {\n                eof = true;\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                break;\n            }\n            if (Character.isWhitespace(currChar) && lineBuffer.length() == 0) {\n                continue;\n            }\n            if ((currChar == 0x0D || currChar == 0x0A) && lineBuffer.length() > 0) {\n                result = lineBuffer.toString();\n                lineBuffer.setLength(0);\n                break;\n            }\n            if (currChar < 0x80) {\n                lineBuffer.append(Character.valueOf((char) currChar));\n                continue;\n            }\n            throw new IOException(\"Extended characters not supported in ASCII: 0x\" + Integer.toHexString(currChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class UnicodeBigEndianReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    protected UnicodeBigEndianReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        boolean beginningOfFile = true;\n        while (!eof) {\n            int currChar1 = byteStream.read();\n            if (currChar1 >= 0) {\n                bytesRead++;\n            }\n            int currChar2 = byteStream.read();\n            if (currChar2 >= 0) {\n                bytesRead++;\n            }\n            if (currChar1 < 0 || currChar2 < 0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                eof = true;\n                break;\n            }\n            if (beginningOfFile && (currChar1 == 0xFE && currChar2 == 0xFF)) {\n                beginningOfFile = false;\n                lineBuffer.setLength(0);\n                continue;\n            }\n            beginningOfFile = false;\n            int unicodeChar = currChar1 << 8 | currChar2;\n            Character unicode = Character.valueOf((char) unicodeChar);\n            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\n            \tcontinue;\n            }\n            if (((currChar1 == 0x00 && currChar2 == 0x0D) || (currChar1 == 0x00 && currChar2 == 0x0A)) && lineBuffer.length()>0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                    lineBuffer.setLength(0);\n                    break;\n                }\n                continue;\n            }\n            lineBuffer.append(Character.valueOf((char) unicodeChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": "package org.gedcom4j.io.reader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.parser.GedcomParser;\nfinal class UnicodeLittleEndianReader extends AbstractEncodingSpecificReader {\n    private boolean eof = false;\n    private final StringBuilder lineBuffer = new StringBuilder();\n    public UnicodeLittleEndianReader(GedcomParser parser, InputStream byteStream) {\n        super(parser, byteStream);\n    }\n    @Override\n    public String nextLine() throws IOException, GedcomParserException {\n        String result = null;\n        boolean beginningOfFile = true;\n        while (!eof) {\n            int currChar1 = byteStream.read();\n            if (currChar1 >= 0) {\n                bytesRead++;\n            }\n            int currChar2 = byteStream.read();\n            if (currChar2 >= 0) {\n                bytesRead++;\n            }\n            if (currChar1 < 0 || currChar2 < 0) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                }\n                eof = true;\n                break;\n            }\n            if (beginningOfFile && (currChar1 == 0xFF && currChar2 == 0xFE)) {\n                beginningOfFile = false;\n                lineBuffer.setLength(0);\n                break;\n            }\n            beginningOfFile = false;\n            int unicodeChar = currChar2 << 8 | currChar1;\n            Character unicode = Character.valueOf((char) unicodeChar);\n            if (Character.isWhitespace(unicode) && lineBuffer.length()==0) {\n            \tcontinue;\n            }\n            if (lineBuffer.length()>0 && ((currChar1 == 0x0D && currChar2 == 0x00) || (currChar1 == 0x0A && currChar2 == 0x00))) {\n                if (lineBuffer.length() > 0) {\n                    result = lineBuffer.toString();\n                    lineBuffer.setLength(0);\n                    break;\n                }\n                continue;\n            }\n            lineBuffer.append(Character.valueOf((char) unicodeChar));\n        }\n        return result;\n    }\n    @Override\n    void cleanUp() throws IOException {\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/AnselReaderListenerTest.java": "package org.gedcom4j.io.reader;\nimport org.gedcom4j.io.writer.LineTerminator;\npublic class AnselReaderListenerTest extends AbstractReaderListenerTest {\n    public AnselReaderListenerTest() {\n        super(\"sample/willis-ansel.ged\", 20036, LineTerminator.getDefaultLineTerminator() == LineTerminator.CRLF ? 607444 : 587409,\n                41);\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/AsciiReaderListenerTest.java": "package org.gedcom4j.io.reader;\nimport org.gedcom4j.io.writer.LineTerminator;\npublic class AsciiReaderListenerTest extends AbstractReaderListenerTest {\n    public AsciiReaderListenerTest() {\n        super(\"sample/willis-ascii.ged\", 20036, LineTerminator.getDefaultLineTerminator() == LineTerminator.CRLF ? 607444 :587409, 41);\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/UnicodeBigEndianReaderListenerTest.java": "package org.gedcom4j.io.reader;\nimport org.gedcom4j.io.writer.LineTerminator;\npublic class UnicodeBigEndianReaderListenerTest extends AbstractReaderListenerTest {\n    public UnicodeBigEndianReaderListenerTest() {\n        super(\"sample/willis-unicode-bigendian.ged\", 20036, 1174850, 41);\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/UnicodeLittleEndianReaderListenerTest.java": "package org.gedcom4j.io.reader;\nimport org.gedcom4j.io.writer.LineTerminator;\npublic class UnicodeLittleEndianReaderListenerTest extends AbstractReaderListenerTest {\n    public UnicodeLittleEndianReaderListenerTest() {\n        super(\"sample/willis-unicode-littleendian.ged\", 20036, 1174856, 41);\n    }\n}\n",
            "src/test/java/org/gedcom4j/io/reader/Utf8ReaderListenerTest.java": "package org.gedcom4j.io.reader;\nimport org.gedcom4j.io.writer.LineTerminator;\npublic class Utf8ReaderListenerTest extends AbstractReaderListenerTest {\n    public Utf8ReaderListenerTest() {\n        super(\"sample/willis.ged\", 23553, 686101, 48);\n    }\n}\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": "package org.gedcom4j.writer;\nimport static org.junit.Assert.assertEquals;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.exception.GedcomWriterException;\nimport org.gedcom4j.exception.WriterCancelledException;\nimport org.gedcom4j.io.encoding.Encoding;\nimport org.gedcom4j.io.event.FileProgressEvent;\nimport org.gedcom4j.io.event.FileProgressListener;\nimport org.gedcom4j.io.writer.LineTerminator;\nimport org.gedcom4j.io.writer.NullOutputStream;\nimport org.gedcom4j.model.*;\nimport org.gedcom4j.parser.GedcomParser;\nimport org.gedcom4j.validate.GedcomValidationFinding;\nimport org.gedcom4j.writer.event.ConstructProgressEvent;\nimport org.gedcom4j.writer.event.ConstructProgressListener;\nimport org.junit.Test;\npublic class GedcomWriterFileProgressAndCancellationTest implements ConstructProgressListener, FileProgressListener {\n    private int constructNotificationCount = 0;\n    private int constructionCancelAfter = Integer.MAX_VALUE;\n    private int linesConstructed = 0;\n    private int bytesWritten = 0;\n    private GedcomWriter gw;\n    private int fileNotificationCount = 0;\n    private int fileCancelAfter = Integer.MAX_VALUE;\n    @Override\n    public void progressNotification(ConstructProgressEvent e) {\n        constructNotificationCount++;\n        linesConstructed = e.getLinesProcessed();\n        if (constructNotificationCount >= constructionCancelAfter) {\n            gw.cancel();\n        }\n    }\n    @Override\n    public void progressNotification(FileProgressEvent e) {\n        fileNotificationCount++;\n        bytesWritten = e.getBytesProcessed();\n        if (fileNotificationCount > fileCancelAfter) {\n            gw.cancel();\n        }\n    }\n    @SuppressWarnings(\"resource\")\n    @Test(expected = WriterCancelledException.class)\n    public void testConstuctionCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        constructionCancelAfter = 5;\n        gw.write(new NullOutputStream());\n    }\n    @SuppressWarnings(\"resource\")\n    @Test(expected = WriterCancelledException.class)\n    public void testFileCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        fileCancelAfter = 5;\n        gw.write(new NullOutputStream());\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAnselCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ansel.ged\");\n        cleanUpGedcom(gp, Encoding.ANSEL);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(621821, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAnselCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ansel.ged\");\n        cleanUpGedcom(gp, Encoding.ANSEL);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(601799, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAsciiCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(621821, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAsciiCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(601799, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeBigEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-bigendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1243670, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeBigEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-bigendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1203626, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeLittleEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-littleendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1243676, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeLittleEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-littleendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1203632, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUtf8Crlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis.ged\");\n        cleanUpGedcom(gp, Encoding.UTF_8);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(41, fileNotificationCount);\n        assertEquals(20019, linesConstructed);\n        assertEquals(606208, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUtf8CrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis.ged\");\n        cleanUpGedcom(gp, Encoding.UTF_8);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(41, fileNotificationCount);\n        assertEquals(20019, linesConstructed);\n        assertEquals(581632, bytesWritten);\n    }\n    private void cleanUpGedcom(GedcomParser gp, Encoding encoding) {\n        CharacterSet characterSet = new CharacterSet();\n        characterSet.setCharacterSetName(new StringWithCustomTags(encoding.getCharacterSetName()));\n        gp.getGedcom().getHeader().setCharacterSet(characterSet);\n        GedcomVersion gv = new GedcomVersion();\n        gv.setVersionNumber(SupportedVersion.V5_5_1);\n        gp.getGedcom().getHeader().setGedcomVersion(gv);\n        for (Individual i : gp.getGedcom().getIndividuals().values()) {\n            if (i.getEvents() != null) {\n                for (AbstractEvent e : i.getEvents()) {\n                    e.setDescription(null);\n                }\n            }\n        }\n        for (Family f : gp.getGedcom().getFamilies().values()) {\n            if (f.getEvents() != null) {\n                for (AbstractEvent e : f.getEvents()) {\n                    e.setDescription(null);\n                }\n            }\n        }\n    }\n}\n",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": "package org.gedcom4j.writer;\nimport static org.junit.Assert.assertEquals;\nimport java.io.ByteArrayOutputStream;\nimport org.gedcom4j.exception.GedcomWriterException;\nimport org.gedcom4j.model.Gedcom;\nimport org.gedcom4j.model.StringWithCustomTags;\nimport org.gedcom4j.model.Submission;\nimport org.gedcom4j.model.Submitter;\nimport org.junit.Test;\npublic class Issue97Test {\n    @Test\n    public void testIssue97() throws GedcomWriterException {\n        Gedcom g = new Gedcom();\n        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        g.getHeader().setSubmission(g.getSubmission());\n        Submitter s = new Submitter();\n        s.setXref(\"@SUBM0001@\");\n        s.setName(new StringWithCustomTags(\"Line break in middle of a wo\\nrd\"));\n        g.getSubmitters().put(s.getXref(), s);\n        g.getHeader().setSubmitter(s);\n        GedcomWriter gw = new GedcomWriter(g);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        gw.write(baos);\n        String output = baos.toString().replaceAll(\"\\\\r\\\\n\",\"\\n\");\n        assertEquals(\"0 HEAD\\n\" + \"1 SOUR UNSPECIFIED\\n\" + \"1 SUBM @SUBM0001@\\n\" + \"1 SUBN @SUBN0001@\\n\" + \"1 GEDC\\n\"\n                + \"2 VERS 5.5.1\\n\" + \"2 FORM LINEAGE-LINKED\\n\" + \"1 CHAR ANSEL\\n\" + \"0 @SUBN0001@ SUBN\\n\" + \"0 @SUBM0001@ SUBM\\n\"\n                + \"1 NAME Line break in middle of a wo\\n\" + \"2 CONT rd\\n\" + \"0 TRLR\\n\", output);\n    }\n}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": [
                27,
                29,
                30,
                31,
                33,
                34,
                35,
                43,
                48,
                53,
                58,
                63,
                68,
                73,
                78,
                83,
                89,
                100,
                101,
                102,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                119,
                120,
                121,
                122,
                123,
                126,
                127,
                128,
                131,
                134,
                135,
                140,
                141,
                142,
                147,
                148,
                149,
                152,
                153,
                154,
                155,
                158,
                159,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                172,
                175,
                176,
                177,
                178,
                179,
                183,
                185,
                186,
                188,
                190,
                191,
                193,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                214,
                219,
                220,
                221,
                222,
                223,
                224,
                229,
                230,
                231,
                232,
                237,
                238,
                239,
                240,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                267,
                268,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                293,
                294,
                295,
                296,
                297,
                299
            ],
            "src/main/java/org/gedcom4j/io/reader/AsciiReader.java": [
                27,
                29,
                30,
                32,
                33,
                40,
                45,
                50,
                61,
                62,
                63,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                75,
                77,
                78,
                79,
                80,
                81,
                82,
                85,
                86,
                87,
                90,
                91,
                92,
                93,
                94,
                99,
                100,
                101,
                102,
                105,
                106,
                107,
                108,
                110,
                111,
                113,
                115
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": [
                27,
                29,
                30,
                32,
                33,
                40,
                45,
                50,
                60,
                61,
                62,
                64,
                65,
                66,
                68,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                81,
                83,
                84,
                85,
                86,
                87,
                88,
                91,
                92,
                93,
                94,
                95,
                97,
                100,
                101,
                102,
                103,
                104,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                117,
                118,
                119,
                120,
                122,
                123,
                125,
                127
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": [
                27,
                29,
                30,
                32,
                33,
                41,
                46,
                51,
                62,
                63,
                64,
                66,
                67,
                68,
                70,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                83,
                85,
                86,
                87,
                88,
                89,
                90,
                93,
                94,
                95,
                96,
                97,
                99,
                102,
                103,
                104,
                105,
                106,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                119,
                120,
                121,
                122,
                124,
                125,
                127,
                129
            ],
            "src/test/java/org/gedcom4j/io/reader/AnselReaderListenerTest.java": [
                27,
                29,
                37,
                42,
                43,
                44,
                45,
                47
            ],
            "src/test/java/org/gedcom4j/io/reader/AsciiReaderListenerTest.java": [
                27,
                29,
                37,
                42,
                43,
                44,
                46
            ],
            "src/test/java/org/gedcom4j/io/reader/UnicodeBigEndianReaderListenerTest.java": [
                27,
                29,
                37,
                42,
                43,
                44,
                46
            ],
            "src/test/java/org/gedcom4j/io/reader/UnicodeLittleEndianReaderListenerTest.java": [
                27,
                29,
                37,
                42,
                43,
                44,
                46
            ],
            "src/test/java/org/gedcom4j/io/reader/Utf8ReaderListenerTest.java": [
                27,
                29,
                37,
                42,
                43,
                44,
                46
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": [
                27,
                29,
                31,
                32,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                54,
                59,
                64,
                69,
                74,
                79,
                84,
                89,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                325,
                326,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                355,
                356,
                357,
                358,
                359,
                360,
                361,
                373,
                374,
                375,
                376,
                377,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                385,
                386,
                387,
                388,
                389,
                390,
                391,
                392,
                393,
                394,
                395,
                396,
                408,
                409,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                418,
                419,
                420,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                428,
                429,
                430,
                431,
                443,
                444,
                445,
                446,
                447,
                448,
                449,
                450,
                451,
                452,
                453,
                454,
                455,
                456,
                457,
                458,
                459,
                460,
                461,
                462,
                463,
                464,
                465,
                466,
                478,
                479,
                480,
                481,
                482,
                483,
                484,
                485,
                486,
                487,
                488,
                489,
                490,
                491,
                492,
                493,
                494,
                495,
                496,
                497,
                498,
                499,
                500,
                501,
                511,
                512,
                513,
                514,
                515,
                516,
                517,
                518,
                519,
                520,
                521,
                522,
                523,
                524,
                525,
                526,
                527,
                528,
                529,
                530,
                531,
                532,
                534
            ],
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": [
                27,
                29,
                31,
                33,
                34,
                35,
                36,
                37,
                38,
                46,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                61,
                62,
                63,
                65,
                66,
                67,
                69,
                70,
                71,
                72,
                73,
                75
            ]
        }
    },
    {
        "commit": "d0292f5a",
        "prev_commit": "d4407416",
        "changed_files": [
            ".settings/org.eclipse.jdt.core.prefs",
            "etc/eclipse-code-formatter-settings.xml",
            "gedcom4j release notes.txt",
            "pom.xml",
            "src/main/java/org/gedcom4j/exception/GedcomValidationException.java",
            "src/main/java/org/gedcom4j/io/encoding/Encoding.java",
            "src/main/java/org/gedcom4j/model/AbstractElement.java",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java",
            "src/main/java/org/gedcom4j/model/AbstractNotesElement.java",
            "src/main/java/org/gedcom4j/model/Address.java",
            "src/main/java/org/gedcom4j/model/Association.java",
            "src/main/java/org/gedcom4j/model/CitationData.java",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java",
            "src/main/java/org/gedcom4j/model/Corporation.java",
            "src/main/java/org/gedcom4j/model/Family.java",
            "src/main/java/org/gedcom4j/model/FamilyChild.java",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java",
            "src/main/java/org/gedcom4j/model/Gedcom.java",
            "src/main/java/org/gedcom4j/model/HasCitations.java",
            "src/main/java/org/gedcom4j/model/HasCustomTags.java",
            "src/main/java/org/gedcom4j/model/HasNotes.java",
            "src/main/java/org/gedcom4j/model/HasXref.java",
            "src/main/java/org/gedcom4j/model/Header.java",
            "src/main/java/org/gedcom4j/model/Individual.java",
            "src/main/java/org/gedcom4j/model/ModelElement.java",
            "src/main/java/org/gedcom4j/model/Multimedia.java",
            "src/main/java/org/gedcom4j/model/Note.java",
            "src/main/java/org/gedcom4j/model/PersonalName.java",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java",
            "src/main/java/org/gedcom4j/model/Place.java",
            "src/main/java/org/gedcom4j/model/Repository.java",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java",
            "src/main/java/org/gedcom4j/model/Source.java",
            "src/main/java/org/gedcom4j/model/SourceData.java",
            "src/main/java/org/gedcom4j/model/StringTree.java",
            "src/main/java/org/gedcom4j/model/Submitter.java",
            "src/main/java/org/gedcom4j/parser/AbstractParser.java",
            "src/main/java/org/gedcom4j/parser/CitationListParser.java",
            "src/main/java/org/gedcom4j/parser/GedcomParser.java",
            "src/main/java/org/gedcom4j/parser/MultimediaRecordParser.java",
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java",
            "src/main/java/org/gedcom4j/parser/event/ParseProgressEvent.java",
            "src/main/java/org/gedcom4j/query/Finder.java",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/main/java/org/gedcom4j/relationship/Relationship.java",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java",
            "src/main/java/org/gedcom4j/relationship/SimplificationRules.java",
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java",
            "src/main/java/org/gedcom4j/validate/CitationValidator.java",
            "src/main/java/org/gedcom4j/validate/DuplicateEliminator.java",
            "src/main/java/org/gedcom4j/validate/EventValidator.java",
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java",
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java",
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java",
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java",
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteValidator.java",
            "src/main/java/org/gedcom4j/validate/NotesValidator.java",
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java",
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java",
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java",
            "src/main/java/org/gedcom4j/validate/SourceValidator.java",
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java",
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java",
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java",
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java"
        ],
        "changed_files_num": 72,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/exception/GedcomValidationException.java",
            "src/main/java/org/gedcom4j/io/encoding/Encoding.java",
            "src/main/java/org/gedcom4j/model/AbstractElement.java",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java",
            "src/main/java/org/gedcom4j/model/AbstractNotesElement.java",
            "src/main/java/org/gedcom4j/model/Address.java",
            "src/main/java/org/gedcom4j/model/Association.java",
            "src/main/java/org/gedcom4j/model/CitationData.java",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java",
            "src/main/java/org/gedcom4j/model/Corporation.java",
            "src/main/java/org/gedcom4j/model/Family.java",
            "src/main/java/org/gedcom4j/model/FamilyChild.java",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java",
            "src/main/java/org/gedcom4j/model/Gedcom.java",
            "src/main/java/org/gedcom4j/model/HasCitations.java",
            "src/main/java/org/gedcom4j/model/HasCustomTags.java",
            "src/main/java/org/gedcom4j/model/HasNotes.java",
            "src/main/java/org/gedcom4j/model/HasXref.java",
            "src/main/java/org/gedcom4j/model/Header.java",
            "src/main/java/org/gedcom4j/model/Individual.java",
            "src/main/java/org/gedcom4j/model/ModelElement.java",
            "src/main/java/org/gedcom4j/model/Multimedia.java",
            "src/main/java/org/gedcom4j/model/Note.java",
            "src/main/java/org/gedcom4j/model/PersonalName.java",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java",
            "src/main/java/org/gedcom4j/model/Place.java",
            "src/main/java/org/gedcom4j/model/Repository.java",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java",
            "src/main/java/org/gedcom4j/model/Source.java",
            "src/main/java/org/gedcom4j/model/SourceData.java",
            "src/main/java/org/gedcom4j/model/StringTree.java",
            "src/main/java/org/gedcom4j/model/Submitter.java",
            "src/main/java/org/gedcom4j/parser/AbstractParser.java",
            "src/main/java/org/gedcom4j/parser/CitationListParser.java",
            "src/main/java/org/gedcom4j/parser/GedcomParser.java",
            "src/main/java/org/gedcom4j/parser/MultimediaRecordParser.java",
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java",
            "src/main/java/org/gedcom4j/parser/event/ParseProgressEvent.java",
            "src/main/java/org/gedcom4j/query/Finder.java",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/main/java/org/gedcom4j/relationship/Relationship.java",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java",
            "src/main/java/org/gedcom4j/relationship/SimplificationRules.java",
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java",
            "src/main/java/org/gedcom4j/validate/CitationValidator.java",
            "src/main/java/org/gedcom4j/validate/DuplicateEliminator.java",
            "src/main/java/org/gedcom4j/validate/EventValidator.java",
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java",
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java",
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java",
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java",
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteValidator.java",
            "src/main/java/org/gedcom4j/validate/NotesValidator.java",
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java",
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java",
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java",
            "src/main/java/org/gedcom4j/validate/SourceValidator.java",
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java",
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java",
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java",
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java"
        ],
        "changed_java_files_num": 68,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t<version>3.2.0-SNAPSHOT</version>\n+\t\t\t\t\t<source>1.7</source>\n+\t\t\t\t\t<target>1.7</target>\n+\t\t\t\t\t<javadocVersion>1.7</javadocVersion>\n+\t\t\t\t\t<source>1.7</source>\n+\t\t\t\t\t<!-- PMD defaults to 1.8, need to specify that we're using 1.7 -->\n+\t\t\t\t\t<targetJdk>1.7</targetJdk>\n+        Set<String> result = new TreeSet<>();\n+            customTags = new ArrayList<>(0);\n+            citations = new ArrayList<>(0);\n+            emails = new ArrayList<>(0);\n+            faxNumbers = new ArrayList<>(0);\n+            multimedia = new ArrayList<>(0);\n+            phoneNumbers = new ArrayList<>(0);\n+            wwwUrls = new ArrayList<>(0);\n+            citations = new ArrayList<>();\n+    private static final long serialVersionUID = 2539148787102235445L;\n+            notes = new ArrayList<>(0);\n+    public void setNotes(List<Note> theNotes) {\n+        getNotes(true).clear();\n+        notes.addAll(theNotes);\n+    }\n+            lines = new ArrayList<>(0);\n+            citations = new ArrayList<>(0);\n+            notes = new ArrayList<>(0);\n+            sourceText = new ArrayList<>(0);\n+            data = new ArrayList<>(0);\n+            multimedia = new ArrayList<>(0);\n+            description = new ArrayList<>(0);\n+            textFromSource = new ArrayList<>(0);\n+            emails = new ArrayList<>(0);\n+            faxNumbers = new ArrayList<>(0);\n+            phoneNumbers = new ArrayList<>(0);\n+            wwwUrls = new ArrayList<>(0);\n+            children = new ArrayList<>(0);\n+            citations = new ArrayList<>(0);\n+            events = new ArrayList<>(0);\n+            ldsSpouseSealings = new ArrayList<>(0);\n+            multimedia = new ArrayList<>(0);\n+            submitters = new ArrayList<>(0);\n+            userReferences = new ArrayList<>(0);\n+            notes = new ArrayList<>(0);\n+            notes = new ArrayList<>(0);\n+    private final Map<String, Family> families = new HashMap<>();\n+    private final Map<String, Individual> individuals = new HashMap<>(0);\n+    private final Map<String, Multimedia> multimedia = new HashMap<>(0);\n+    private final Map<String, Note> notes = new HashMap<>(0);\n+    private final Map<String, Repository> repositories = new HashMap<>(0);\n+    private final Map<String, Source> sources = new HashMap<>(0);\n+    private final Map<String, Submitter> submitters = new HashMap<>(0);\n+    List<AbstractCitation> getCitations();\n+    List<AbstractCitation> getCitations(boolean initializeIfNeeded);\n+    List<StringTree> getCustomTags();\n+    List<StringTree> getCustomTags(boolean initializeIfNeeded);\n+    List<Note> getNotes();\n+    List<Note> getNotes(boolean initializeIfNeeded);\n+    String getXref();\n+            copyrightData = new ArrayList<>(0);\n+            aliases = new ArrayList<>(0);\n+            ancestorInterest = new ArrayList<>(0);\n+        Set<Individual> result = new HashSet<>();\n+            associations = new ArrayList<>(0);\n+            attributes = new ArrayList<>(0);\n+        List<IndividualAttribute> result = new ArrayList<>(0);\n+            citations = new ArrayList<>(0);\n+            descendantInterest = new ArrayList<>(0);\n+        Set<Individual> result = new HashSet<>();\n+            emails = new ArrayList<>(0);\n+            events = new ArrayList<>(0);\n+        List<IndividualEvent> result = new ArrayList<>(0);\n+            familiesWhereChild = new ArrayList<>(0);\n+            familiesWhereSpouse = new ArrayList<>(0);\n+            faxNumbers = new ArrayList<>(0);\n+            ldsIndividualOrdinances = new ArrayList<>(0);\n+            multimedia = new ArrayList<>(0);\n+            names = new ArrayList<>(0);\n+            notes = new ArrayList<>(0);\n+            phoneNumbers = new ArrayList<>(0);\n+        Set<Individual> result = new HashSet<>();\n+            submitters = new ArrayList<>(0);\n+            userReferences = new ArrayList<>(0);\n+            wwwUrls = new ArrayList<>(0);\n+        Set<Individual> result = new HashSet<>();\n+        Set<Individual> result = new HashSet<>();\n+            blob = new ArrayList<>(0);\n+            citations = new ArrayList<>(0);\n+            fileReferences = new ArrayList<>(0);\n+            userReferences = new ArrayList<>(0);\n+            citations = new ArrayList<>(0);\n+            lines = new ArrayList<>(0);\n+            userReferences = new ArrayList<>(0);\n+            citations = new ArrayList<>(0);\n+            phonetic = new ArrayList<>(0);\n+            romanized = new ArrayList<>(0);\n+            citations = new ArrayList<>(0);\n+            notes = new ArrayList<>(0);\n+            citations = new ArrayList<>(0);\n+            phonetic = new ArrayList<>(0);\n+            romanized = new ArrayList<>(0);\n+            emails = new ArrayList<>(0);\n+            faxNumbers = new ArrayList<>(0);\n+            phoneNumbers = new ArrayList<>(0);\n+            userReferences = new ArrayList<>(0);\n+            wwwUrls = new ArrayList<>(0);\n+            callNumbers = new ArrayList<>(0);\n+            multimedia = new ArrayList<>(0);\n+            originatorsAuthors = new ArrayList<>(0);\n+            publicationFacts = new ArrayList<>(0);\n+            sourceText = new ArrayList<>(0);\n+            title = new ArrayList<>(0);\n+            userReferences = new ArrayList<>(0);\n+            eventsRecorded = new ArrayList<>(0);\n+            children = new ArrayList<>(0);\n+            emails = new ArrayList<>(0);\n+            faxNumbers = new ArrayList<>(0);\n+            languagePref = new ArrayList<>(0);\n+            multimedia = new ArrayList<>(0);\n+            phoneNumbers = new ArrayList<>(0);\n+            userReferences = new ArrayList<>(0);\n+            wwwUrls = new ArrayList<>(0);\n+    protected final GedcomParser gedcomParser;\n+        this.gedcomParser = (gedcomParser == null && this instanceof GedcomParser) ? ((GedcomParser) this) : gedcomParser;\n+                    List<String> ls = new ArrayList<>();\n+                    List<String> ls = new ArrayList<>();\n+    private final List<String> errors = new ArrayList<>();\n+    private final List<String> warnings = new ArrayList<>();\n+    private final List<WeakReference<FileProgressListener>> fileObservers = new CopyOnWriteArrayList<>();\n+    private final List<WeakReference<ParseProgressListener>> parseObservers = new CopyOnWriteArrayList<>();\n+        fileObservers.add(new WeakReference<>(observer));\n+        parseObservers.add(new WeakReference<>(observer));\n+        fileObservers.add(new WeakReference<>(observer));\n+        parseObservers.add(new WeakReference<>(observer));\n+            List<Note> dummyList = new ArrayList<>();\n+                throw new GedcomParserException(\"Expected a root level item in the buffer, but found \" + rootLevelItem.getLevel()\n+                        + \" \" + rootLevelItem.getTag() + \" from line \" + lineNum);\n+                    List<Multimedia> continuedObjects = new ArrayList<>();\n+    final ConcurrentMap<String, CanonicalizedString> stringPool = new ConcurrentHashMap<>(100);\n+        StringBuilder builder = new StringBuilder(256);\n+        List<Individual> result = new ArrayList<>();\n+        Set<Individual> result = new HashSet<>();\n+        Set<Individual> result = new HashSet<>();\n+        if (dad != null && dad.getFamiliesWhereSpouse() != null) {\n+\t\t    for (FamilySpouse fs : dad.getFamiliesWhereSpouse()) {\n+\t\t        Individual dadsWife = fs.getFamily().getWife();\n+\t\t        addIndividualAndFamilies(result, dadsWife);\n+\t\t    }\n+\t\t}\n+        if (mom != null && mom.getFamiliesWhereSpouse() != null) {\n+\t\t    for (FamilySpouse fs : mom.getFamiliesWhereSpouse()) {\n+\t\t        Individual momsHusband = fs.getFamily().getHusband();\n+\t\t        if (momsHusband != null) {\n+\t\t            addIndividualAndFamilies(result, momsHusband);\n+\t\t        }\n+\t\t    }\n+\t\t}\n+                    Set<Individual> s = new HashSet<>();\n+        checkedAlready = new HashSet<>();\n+    private final List<SimpleRelationship> chain = new ArrayList<>();\n+    private Set<Individual> lookedAt = new HashSet<>();\n+        relationshipsFound = new ArrayList<>();\n+        currentChain = new ArrayList<>();\n+        lookedAt = new HashSet<>();\n+            relationshipsFound = new ArrayList<>(new HashSet<>(relationshipsFound));\n+            List<Relationship> keepers = new ArrayList<>();\n+        r.setName(HUSBAND);\n+        r.setName(WIFE);\n+    static List<RelationshipName[]> rules = new ArrayList<>();\n+            int dups = new DuplicateEliminator<>(stringList).process();\n+                    int dups = new DuplicateEliminator<>(textFromSource).process();\n+        HashSet<T> unique = new HashSet<>();\n+                int dups = new DuplicateEliminator<>(citations).process();\n+                int dups = new DuplicateEliminator<>(emails).process();\n+                int dups = new DuplicateEliminator<>(faxNumbers).process();\n+                int dups = new DuplicateEliminator<>(multimedia).process();\n+                int dups = new DuplicateEliminator<>(phoneNumbers).process();\n+                int dups = new DuplicateEliminator<>(wwwUrls).process();\n+                int dups = new DuplicateEliminator<>(children).process();\n+                int dups = new DuplicateEliminator<>(citations).process();\n+                int dups = new DuplicateEliminator<>(ldsSpouseSealings).process();\n+                int dups = new DuplicateEliminator<>(multimedia).process();\n+                int dups = new DuplicateEliminator<>(submitters).process();\n+    private final List<GedcomValidationFinding> findings = new ArrayList<>();\n+        new NotesValidator(rootValidator, gedcom, new ArrayList<>(gedcom.getNotes().values())).validate();\n+                int dups = new DuplicateEliminator<>(names).process();\n+            int dups = new DuplicateEliminator<>(individual.getFamiliesWhereChild()).process();\n+            int dups = new DuplicateEliminator<>(individual.getFamiliesWhereSpouse()).process();\n+                int dups = new DuplicateEliminator<>(citations).process();\n+            int dups = new DuplicateEliminator<>(userReferences).process();\n+                int dups = new DuplicateEliminator<>(citations).process();\n+                    int dups = new DuplicateEliminator<>(notes).process();\n+                int dups = new DuplicateEliminator<>(phonetic).process();\n+                int dups = new DuplicateEliminator<>(romanized).process();\n+                int dups = new DuplicateEliminator<>(citations).process();\n+                int dups = new DuplicateEliminator<>(phonetic).process();\n+            int dups = new DuplicateEliminator<>(romanized).process();\n+                    int dups = new DuplicateEliminator<>(eventsRecorded).process();\n+                int dups = new DuplicateEliminator<>(multimedia).process();\n+                int dups = new DuplicateEliminator<>(callNumbers).process();\n+            int dups = new DuplicateEliminator<>(languagePref).process();\n+    protected void emitStringsWithCustomTags(int level, List<StringWithCustomTags> strings, String tagValue)\n+            throws GedcomWriterException {\n+            List<String> temp = new ArrayList<>();\n+    protected void emitTagWithOptionalValueAndCustomSubtags(int level, String tag, StringWithCustomTags valueToRightOfTag)\n+            throws GedcomWriterException {\n+        List<String> temp = new ArrayList<>();\n+        return baseWriter != null && baseWriter.writeFrom.getHeader() != null && baseWriter.writeFrom.getHeader()\n+                .getGedcomVersion() != null && SupportedVersion.V5_5.equals(baseWriter.writeFrom.getHeader().getGedcomVersion()\n+                        .getVersionNumber());\n+        List<String> result = new ArrayList<>();\n+            List<String> temp = new ArrayList<>();\n+        List<String> temp = new ArrayList<>();\n+    List<String> lines = new ArrayList<>();\n+    private final List<WeakReference<ConstructProgressListener>> constructObservers = new CopyOnWriteArrayList<>();\n+    private final List<WeakReference<FileProgressListener>> fileObservers = new CopyOnWriteArrayList<>();\n+    private boolean autorepair;\n+        constructObservers.add(new WeakReference<>(observer));\n+        fileObservers.add(new WeakReference<>(observer));\n+        constructObservers.add(new WeakReference<>(observer));\n+        fileObservers.add(new WeakReference<>(observer));\n+        try (OutputStream o = new FileOutputStream(file)) {\n+        ArrayList<String> result = new ArrayList<>();\n+            List<String> strings = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> lines = new ArrayList<>();\n+        List<String> l = new ArrayList<>();\n+        int count = new DuplicateEliminator<>(l).process();\n+        List<String> l = new ArrayList<>();\n+        int count = new DuplicateEliminator<>(l).process();\n+        count = new DuplicateEliminator<>(l).process();\n+        count = new DuplicateEliminator<>(l).process();\n+        List<String> l = new ArrayList<>();\n+        int count = new DuplicateEliminator<>(l).process();\n+        count = new DuplicateEliminator<>(l).process();\n+        List<String> l = new ArrayList<>();\n+        int count = new DuplicateEliminator<>(l).process();\n+        int count = new DuplicateEliminator<>(l).process();\n+            readbackLines = new ArrayList<>();\n+        List<String> original = new ArrayList<>();\n+            List<String> result = new ArrayList<>();\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/io/encoding/Encoding.java": "        Set<String> result = new TreeSet<String>();\n",
            "src/main/java/org/gedcom4j/model/AbstractElement.java": "            customTags = new ArrayList<StringTree>(0);\n",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": "    }\n        return emails;\n        return faxNumbers;\n        return multimedia;\n        return notes;\n",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": "        return citations;\n",
            "src/main/java/org/gedcom4j/model/Address.java": "            lines = new ArrayList<String>(0);\n",
            "src/main/java/org/gedcom4j/model/CitationData.java": "            sourceText = new ArrayList<List<String>>(0);\n",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": "            data = new ArrayList<CitationData>(0);\n            multimedia = new ArrayList<Multimedia>(0);\n",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": "            description = new ArrayList<String>(0);\n            textFromSource = new ArrayList<List<String>>(0);\n",
            "src/main/java/org/gedcom4j/model/Corporation.java": "            emails = new ArrayList<StringWithCustomTags>(0);\n            faxNumbers = new ArrayList<StringWithCustomTags>(0);\n            phoneNumbers = new ArrayList<StringWithCustomTags>(0);\n            wwwUrls = new ArrayList<StringWithCustomTags>(0);\n",
            "src/main/java/org/gedcom4j/model/Family.java": "    }\n    }\n    }\n    }\n        return submitters;\n",
            "src/main/java/org/gedcom4j/model/FamilyChild.java": "            notes = new ArrayList<Note>(0);\n",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": "            notes = new ArrayList<Note>(0);\n",
            "src/main/java/org/gedcom4j/model/Gedcom.java": "    private final Map<String, Family> families = new HashMap<String, Family>();\n    private final Map<String, Individual> individuals = new HashMap<String, Individual>(0);\n    private final Map<String, Multimedia> multimedia = new HashMap<String, Multimedia>(0);\n    private final Map<String, Note> notes = new HashMap<String, Note>(0);\n    private final Map<String, Repository> repositories = new HashMap<String, Repository>(0);\n    private final Map<String, Source> sources = new HashMap<String, Source>(0);\n    private final Map<String, Submitter> submitters = new HashMap<String, Submitter>(0);\n",
            "src/main/java/org/gedcom4j/model/Individual.java": "            aliases = new ArrayList<StringWithCustomTags>(0);\n            ancestorInterest = new ArrayList<Submitter>(0);\n        Set<Individual> result = new HashSet<Individual>();\n            associations = new ArrayList<Association>(0);\n            attributes = new ArrayList<IndividualAttribute>(0);\n        List<IndividualAttribute> result = new ArrayList<IndividualAttribute>(0);\n            citations = new ArrayList<AbstractCitation>(0);\n            descendantInterest = new ArrayList<Submitter>(0);\n        Set<Individual> result = new HashSet<Individual>();\n            emails = new ArrayList<StringWithCustomTags>(0);\n            events = new ArrayList<IndividualEvent>(0);\n        List<IndividualEvent> result = new ArrayList<IndividualEvent>(0);\n            familiesWhereChild = new ArrayList<FamilyChild>(0);\n            familiesWhereSpouse = new ArrayList<FamilySpouse>(0);\n            faxNumbers = new ArrayList<StringWithCustomTags>(0);\n            ldsIndividualOrdinances = new ArrayList<LdsIndividualOrdinance>(0);\n            multimedia = new ArrayList<Multimedia>(0);\n            names = new ArrayList<PersonalName>(0);\n            notes = new ArrayList<Note>(0);\n            phoneNumbers = new ArrayList<StringWithCustomTags>(0);\n        Set<Individual> result = new HashSet<Individual>();\n            submitters = new ArrayList<Submitter>(0);\n            userReferences = new ArrayList<UserReference>(0);\n            wwwUrls = new ArrayList<StringWithCustomTags>(0);\n    private Set<Individual> addGenerationOfAncestors(Set<Individual> seenSoFar) {\n    private Set<Individual> addGenerationOfDescendants(Set<Individual> seenSoFar) {\n",
            "src/main/java/org/gedcom4j/model/Multimedia.java": "        return blob;\n    }\n        return fileReferences;\n",
            "src/main/java/org/gedcom4j/model/Note.java": "            citations = new ArrayList<AbstractCitation>(0);\n            lines = new ArrayList<String>(0);\n            userReferences = new ArrayList<UserReference>(0);\n",
            "src/main/java/org/gedcom4j/model/PersonalName.java": "    }\n",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": "            citations = new ArrayList<AbstractCitation>(0);\n            notes = new ArrayList<Note>(0);\n",
            "src/main/java/org/gedcom4j/model/Place.java": "    }\n        return notes;\n",
            "src/main/java/org/gedcom4j/model/Repository.java": "        return emails;\n        return faxNumbers;\n        return notes;\n    public List<UserReference> getUserReferences() {\n",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": "        return callNumbers;\n",
            "src/main/java/org/gedcom4j/model/Source.java": "    }\n    }\n        return originatorsAuthors;\n        return sourceText;\n        return title;\n",
            "src/main/java/org/gedcom4j/model/SourceData.java": "        return eventsRecorded;\n",
            "src/main/java/org/gedcom4j/model/StringTree.java": "            children = new ArrayList<StringTree>(0);\n",
            "src/main/java/org/gedcom4j/model/Submitter.java": "    }\n    }\n    }\n    }\n    }\n        return userReferences;\n",
            "src/main/java/org/gedcom4j/parser/AbstractParser.java": "    protected GedcomParser gedcomParser;\n        this.gedcomParser = gedcomParser;\n",
            "src/main/java/org/gedcom4j/parser/CitationListParser.java": "                    List<String> ls = new ArrayList<String>();\n                    List<String> ls = new ArrayList<String>();\n",
            "src/main/java/org/gedcom4j/parser/GedcomParser.java": "            }\n            }\n            if (gedcom.getHeader().getSubmission() == null) {\n            new SubmissionParser(this, rootLevelItem, s).parse();\n            StringTree rootLevelItem = stringTreeBuilder.getTree().getChildren().get(0);\n            if (rootLevelItem.getLevel() != 0) {\n",
            "src/main/java/org/gedcom4j/parser/MultimediaRecordParser.java": "                    List<Multimedia> continuedObjects = new ArrayList<Multimedia>();\n",
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java": "    final ConcurrentMap<String, CanonicalizedString> stringPool = new ConcurrentHashMap<String, CanonicalizedString>(100);\n",
            "src/main/java/org/gedcom4j/parser/event/ParseProgressEvent.java": "        StringBuilder builder = new StringBuilder();\n",
            "src/main/java/org/gedcom4j/query/Finder.java": "        List<Individual> result = new ArrayList<Individual>();\n",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "        Set<Individual> result = new HashSet<Individual>();\n        Set<Individual> result = new HashSet<Individual>();\n        if (dad != null) {\n            if (dad.getFamiliesWhereSpouse() != null) {\n                for (FamilySpouse fs : dad.getFamiliesWhereSpouse()) {\n                    Individual dadsWife = fs.getFamily().getWife();\n                    addIndividualAndFamilies(result, dadsWife);\n                }\n    private void addMotherAndAllHerHusbands(Set<Individual> result, FamilyChild fc) {\n        Individual mom = fc.getFamily().getWife();\n        if (mom != null) {\n            if (mom.getFamiliesWhereSpouse() != null) {\n                for (FamilySpouse fs : mom.getFamiliesWhereSpouse()) {\n                    Individual momsHusband = fs.getFamily().getHusband();\n                    if (momsHusband != null) {\n                        addIndividualAndFamilies(result, momsHusband);\n                    set.add(spouse);\n",
            "src/main/java/org/gedcom4j/relationship/Relationship.java": "    private final List<SimpleRelationship> chain = new ArrayList<SimpleRelationship>();\n",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": "import static org.gedcom4j.relationship.RelationshipName.*;\nimport java.util.*;\nimport org.gedcom4j.model.*;\n        if (individual1 != individual2) { // NOPMD - Deliberately comparing with !=\n        if (relationshipsFound.size() > 1) {\n            relationshipsFound = new ArrayList<Relationship>(new HashSet<Relationship>(relationshipsFound));\n            for (int i = relationshipsFound.size() - 1; i >= 0; i--) {\n    private void examineMother(Individual personBeingExamined, Individual mother) {\n",
            "src/main/java/org/gedcom4j/relationship/SimplificationRules.java": "    static List<RelationshipName[]> rules = new ArrayList<RelationshipName[]>();\n",
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java": "            int dups = new DuplicateEliminator<StringWithCustomTags>(stringList).process();\n",
            "src/main/java/org/gedcom4j/validate/CitationValidator.java": "                    int dups = new DuplicateEliminator<List<String>>(textFromSource).process();\n",
            "src/main/java/org/gedcom4j/validate/DuplicateEliminator.java": "        HashSet<T> unique = new HashSet<T>();\n",
            "src/main/java/org/gedcom4j/validate/EventValidator.java": "                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n                int dups = new DuplicateEliminator<StringWithCustomTags>(emails).process();\n                int dups = new DuplicateEliminator<StringWithCustomTags>(faxNumbers).process();\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                int dups = new DuplicateEliminator<StringWithCustomTags>(phoneNumbers).process();\n                int dups = new DuplicateEliminator<StringWithCustomTags>(wwwUrls).process();\n",
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java": "                int dups = new DuplicateEliminator<Individual>(children).process();\n                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n                int dups = new DuplicateEliminator<LdsSpouseSealing>(ldsSpouseSealings).process();\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                int dups = new DuplicateEliminator<Submitter>(submitters).process();\n",
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java": "    private final List<GedcomValidationFinding> findings = new ArrayList<GedcomValidationFinding>();\n        new NotesValidator(rootValidator, gedcom, new ArrayList<Note>(gedcom.getNotes().values())).validate();\n",
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java": "                int dups = new DuplicateEliminator<PersonalName>(names).process();\n            int dups = new DuplicateEliminator<FamilyChild>(individual.getFamiliesWhereChild()).process();\n            int dups = new DuplicateEliminator<FamilySpouse>(individual.getFamiliesWhereSpouse()).process();\n",
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java": "                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n",
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java": "            int dups = new DuplicateEliminator<UserReference>(userReferences).process();\n",
            "src/main/java/org/gedcom4j/validate/NoteValidator.java": "                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n",
            "src/main/java/org/gedcom4j/validate/NotesValidator.java": "                    int dups = new DuplicateEliminator<Note>(notes).process();\n",
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java": "                int dups = new DuplicateEliminator<PersonalNameVariation>(phonetic).process();\n                int dups = new DuplicateEliminator<PersonalNameVariation>(romanized).process();\n",
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java": "                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n",
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java": "                int dups = new DuplicateEliminator<AbstractNameVariation>(phonetic).process();\n            int dups = new DuplicateEliminator<AbstractNameVariation>(romanized).process();\n",
            "src/main/java/org/gedcom4j/validate/SourceValidator.java": "                    int dups = new DuplicateEliminator<EventRecorded>(eventsRecorded).process();\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                int dups = new DuplicateEliminator<SourceCallNumber>(callNumbers).process();\n",
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java": "            int dups = new DuplicateEliminator<StringWithCustomTags>(languagePref).process();\n",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java": "        } else {\n    protected void emitTagWithOptionalValueAndCustomSubtags(int level, String tag, StringWithCustomTags valueToRightOfTag) throws GedcomWriterException {\n        List<String> temp = new ArrayList<String>();\n        return baseWriter != null && baseWriter.writeFrom.getHeader() != null && baseWriter.writeFrom.getHeader().getGedcomVersion() != null\n                && SupportedVersion.V5_5.equals(baseWriter.writeFrom.getHeader().getGedcomVersion().getVersionNumber());\n    }\n        if (linesOfText != null) {\n            temp.add(value.toString());\n        temp.add(e.getValue());\n",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": "public class GedcomWriter extends AbstractEmitter<Gedcom> {\n    private final List<WeakReference<ConstructProgressListener>> constructObservers = new CopyOnWriteArrayList<WeakReference<ConstructProgressListener>>();\n    private final List<WeakReference<FileProgressListener>> fileObservers = new CopyOnWriteArrayList<WeakReference<FileProgressListener>>();\n    }\n            if (observerRef == null || observerRef.get() == observer) {\n            if (observerRef == null || observerRef.get() == observer) {\n",
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java": "            List<String> strings = new ArrayList<String>();\n",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": "        GedcomFileWriter gfw = new GedcomFileWriter(new GedcomWriter(new Gedcom()), lines);\n        List<String> lines = new ArrayList<String>();\n    public void testEncodingDetectionAscii() throws IOException, WriterCancelledException {\n    @Test\n    @SuppressWarnings(\"resource\")\n",
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java": "        List<String> l = new ArrayList<String>();\n        int count = new DuplicateEliminator<String>(l).process();\n        List<String> l = new ArrayList<String>();\n        int count = new DuplicateEliminator<String>(l).process();\n        count = new DuplicateEliminator<String>(l).process();\n        count = new DuplicateEliminator<String>(l).process();\n        List<String> l = new ArrayList<String>();\n        int count = new DuplicateEliminator<String>(l).process();\n        count = new DuplicateEliminator<String>(l).process();\n        List<String> l = new ArrayList<String>();\n        int count = new DuplicateEliminator<String>(l).process();\n        int count = new DuplicateEliminator<String>(l).process();\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java": "            readbackLines = new ArrayList<String>();\n        List<String> original = new ArrayList<String>();\n            List<String> result = new ArrayList<String>();\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/encoding/Encoding.java": [
                67
            ],
            "src/main/java/org/gedcom4j/model/AbstractElement.java": [
                92
            ],
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": [
                317,
                358,
                382,
                405,
                428
            ],
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": [
                140
            ],
            "src/main/java/org/gedcom4j/model/Address.java": [
                201
            ],
            "src/main/java/org/gedcom4j/model/CitationData.java": [
                111
            ],
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": [
                182,
                214
            ],
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": [
                110,
                133
            ],
            "src/main/java/org/gedcom4j/model/Corporation.java": [
                177,
                201,
                224,
                247
            ],
            "src/main/java/org/gedcom4j/model/Family.java": [
                282,
                329,
                361,
                384,
                457
            ],
            "src/main/java/org/gedcom4j/model/FamilyChild.java": [
                169
            ],
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": [
                124
            ],
            "src/main/java/org/gedcom4j/model/Gedcom.java": [
                79,
                90,
                97,
                102,
                108,
                114,
                125
            ],
            "src/main/java/org/gedcom4j/model/Individual.java": [
                424,
                447,
                458,
                490,
                513,
                527,
                564,
                587,
                598,
                621,
                645,
                658,
                687,
                710,
                733,
                774,
                797,
                820,
                844,
                876,
                914,
                947,
                970,
                993,
                1213,
                1249
            ],
            "src/main/java/org/gedcom4j/model/Multimedia.java": [
                216,
                249,
                299
            ],
            "src/main/java/org/gedcom4j/model/Note.java": [
                161,
                184,
                216
            ],
            "src/main/java/org/gedcom4j/model/PersonalName.java": [
                251
            ],
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": [
                197,
                239
            ],
            "src/main/java/org/gedcom4j/model/Place.java": [
                163,
                204
            ],
            "src/main/java/org/gedcom4j/model/Repository.java": [
                217,
                241,
                273,
                328
            ],
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": [
                104
            ],
            "src/main/java/org/gedcom4j/model/Source.java": [
                257,
                280,
                303,
                376,
                399
            ],
            "src/main/java/org/gedcom4j/model/SourceData.java": [
                102
            ],
            "src/main/java/org/gedcom4j/model/StringTree.java": [
                169
            ],
            "src/main/java/org/gedcom4j/model/Submitter.java": [
                262,
                286,
                309,
                332,
                364,
                428
            ],
            "src/main/java/org/gedcom4j/parser/AbstractParser.java": [
                45,
                61
            ],
            "src/main/java/org/gedcom4j/parser/CitationListParser.java": [
                85,
                119
            ],
            "src/main/java/org/gedcom4j/parser/GedcomParser.java": [
                435,
                454,
                507,
                514,
                573,
                574
            ],
            "src/main/java/org/gedcom4j/parser/MultimediaRecordParser.java": [
                112
            ],
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java": [
                91
            ],
            "src/main/java/org/gedcom4j/parser/event/ParseProgressEvent.java": [
                205
            ],
            "src/main/java/org/gedcom4j/query/Finder.java": [
                85
            ],
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                78,
                116,
                137,
                138,
                139,
                140,
                141,
                142,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                286
            ],
            "src/main/java/org/gedcom4j/relationship/Relationship.java": [
                44
            ],
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": [
                29,
                31,
                33,
                126,
                135,
                137,
                151,
                381
            ],
            "src/main/java/org/gedcom4j/relationship/SimplificationRules.java": [
                42
            ],
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java": [
                325
            ],
            "src/main/java/org/gedcom4j/validate/CitationValidator.java": [
                97
            ],
            "src/main/java/org/gedcom4j/validate/DuplicateEliminator.java": [
                69
            ],
            "src/main/java/org/gedcom4j/validate/EventValidator.java": [
                110,
                137,
                164,
                191,
                218,
                248
            ],
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java": [
                104,
                133,
                160,
                187,
                214
            ],
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java": [
                87,
                195
            ],
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java": [
                77,
                89,
                95
            ],
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java": [
                80
            ],
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java": [
                130
            ],
            "src/main/java/org/gedcom4j/validate/NoteValidator.java": [
                100
            ],
            "src/main/java/org/gedcom4j/validate/NotesValidator.java": [
                98
            ],
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java": [
                104,
                128
            ],
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java": [
                77
            ],
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java": [
                106,
                127
            ],
            "src/main/java/org/gedcom4j/validate/SourceValidator.java": [
                85,
                107,
                153
            ],
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java": [
                84
            ],
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java": [
                232,
                268,
                279,
                339,
                340,
                341,
                379,
                434,
                478
            ],
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": [
                87,
                118,
                128,
                274,
                343,
                362
            ],
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java": [
                68
            ],
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": [
                65,
                80,
                98,
                120,
                140
            ],
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java": [
                51,
                52,
                63,
                70,
                81,
                96,
                111,
                118,
                130,
                145,
                151,
                166
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java": [
                119,
                307,
                455
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/io/encoding/Encoding.java": "        Set<String> result = new TreeSet<String>();\n",
            "src/main/java/org/gedcom4j/model/AbstractElement.java": "            customTags = new ArrayList<StringTree>(0);\n",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": "    }\n        return emails;\n        return faxNumbers;\n        return multimedia;\n        return notes;\n",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": "        return citations;\n",
            "src/main/java/org/gedcom4j/model/Address.java": "            lines = new ArrayList<String>(0);\n",
            "src/main/java/org/gedcom4j/model/CitationData.java": "            sourceText = new ArrayList<List<String>>(0);\n",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": "            data = new ArrayList<CitationData>(0);\n            multimedia = new ArrayList<Multimedia>(0);\n",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": "            description = new ArrayList<String>(0);\n            textFromSource = new ArrayList<List<String>>(0);\n",
            "src/main/java/org/gedcom4j/model/Corporation.java": "            emails = new ArrayList<StringWithCustomTags>(0);\n            faxNumbers = new ArrayList<StringWithCustomTags>(0);\n            phoneNumbers = new ArrayList<StringWithCustomTags>(0);\n            wwwUrls = new ArrayList<StringWithCustomTags>(0);\n",
            "src/main/java/org/gedcom4j/model/Family.java": "    }\n    }\n    }\n    }\n        return submitters;\n",
            "src/main/java/org/gedcom4j/model/FamilyChild.java": "            notes = new ArrayList<Note>(0);\n",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": "            notes = new ArrayList<Note>(0);\n",
            "src/main/java/org/gedcom4j/model/Gedcom.java": "    private final Map<String, Family> families = new HashMap<String, Family>();\n    private final Map<String, Individual> individuals = new HashMap<String, Individual>(0);\n    private final Map<String, Multimedia> multimedia = new HashMap<String, Multimedia>(0);\n    private final Map<String, Note> notes = new HashMap<String, Note>(0);\n    private final Map<String, Repository> repositories = new HashMap<String, Repository>(0);\n    private final Map<String, Source> sources = new HashMap<String, Source>(0);\n    private final Map<String, Submitter> submitters = new HashMap<String, Submitter>(0);\n",
            "src/main/java/org/gedcom4j/model/Individual.java": "            aliases = new ArrayList<StringWithCustomTags>(0);\n            ancestorInterest = new ArrayList<Submitter>(0);\n        Set<Individual> result = new HashSet<Individual>();\n            associations = new ArrayList<Association>(0);\n            attributes = new ArrayList<IndividualAttribute>(0);\n        List<IndividualAttribute> result = new ArrayList<IndividualAttribute>(0);\n            citations = new ArrayList<AbstractCitation>(0);\n            descendantInterest = new ArrayList<Submitter>(0);\n        Set<Individual> result = new HashSet<Individual>();\n            emails = new ArrayList<StringWithCustomTags>(0);\n            events = new ArrayList<IndividualEvent>(0);\n        List<IndividualEvent> result = new ArrayList<IndividualEvent>(0);\n            familiesWhereChild = new ArrayList<FamilyChild>(0);\n            familiesWhereSpouse = new ArrayList<FamilySpouse>(0);\n            faxNumbers = new ArrayList<StringWithCustomTags>(0);\n            ldsIndividualOrdinances = new ArrayList<LdsIndividualOrdinance>(0);\n            multimedia = new ArrayList<Multimedia>(0);\n            names = new ArrayList<PersonalName>(0);\n            notes = new ArrayList<Note>(0);\n            phoneNumbers = new ArrayList<StringWithCustomTags>(0);\n        Set<Individual> result = new HashSet<Individual>();\n            submitters = new ArrayList<Submitter>(0);\n            userReferences = new ArrayList<UserReference>(0);\n            wwwUrls = new ArrayList<StringWithCustomTags>(0);\n    private Set<Individual> addGenerationOfAncestors(Set<Individual> seenSoFar) {\n    private Set<Individual> addGenerationOfDescendants(Set<Individual> seenSoFar) {\n",
            "src/main/java/org/gedcom4j/model/Multimedia.java": "        return blob;\n    }\n        return fileReferences;\n",
            "src/main/java/org/gedcom4j/model/Note.java": "            citations = new ArrayList<AbstractCitation>(0);\n            lines = new ArrayList<String>(0);\n            userReferences = new ArrayList<UserReference>(0);\n",
            "src/main/java/org/gedcom4j/model/PersonalName.java": "    }\n",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": "            citations = new ArrayList<AbstractCitation>(0);\n            notes = new ArrayList<Note>(0);\n",
            "src/main/java/org/gedcom4j/model/Place.java": "    }\n        return notes;\n",
            "src/main/java/org/gedcom4j/model/Repository.java": "        return emails;\n        return faxNumbers;\n        return notes;\n    public List<UserReference> getUserReferences() {\n",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": "        return callNumbers;\n",
            "src/main/java/org/gedcom4j/model/Source.java": "    }\n    }\n        return originatorsAuthors;\n        return sourceText;\n        return title;\n",
            "src/main/java/org/gedcom4j/model/SourceData.java": "        return eventsRecorded;\n",
            "src/main/java/org/gedcom4j/model/StringTree.java": "            children = new ArrayList<StringTree>(0);\n",
            "src/main/java/org/gedcom4j/model/Submitter.java": "    }\n    }\n    }\n    }\n    }\n        return userReferences;\n",
            "src/main/java/org/gedcom4j/parser/AbstractParser.java": "    protected GedcomParser gedcomParser;\n        this.gedcomParser = gedcomParser;\n",
            "src/main/java/org/gedcom4j/parser/CitationListParser.java": "                    List<String> ls = new ArrayList<String>();\n                    List<String> ls = new ArrayList<String>();\n",
            "src/main/java/org/gedcom4j/parser/GedcomParser.java": "    private final List<String> errors = new ArrayList<String>();\n    private final List<String> warnings = new ArrayList<String>();\n    private final List<WeakReference<FileProgressListener>> fileObservers = new CopyOnWriteArrayList<WeakReference<FileProgressListener>>();\n    private final List<WeakReference<ParseProgressListener>> parseObservers = new CopyOnWriteArrayList<WeakReference<ParseProgressListener>>();\n        gedcomParser = this;\n        fileObservers.add(new WeakReference<FileProgressListener>(observer));\n        parseObservers.add(new WeakReference<ParseProgressListener>(observer));\n        fileObservers.add(new WeakReference<FileProgressListener>(observer));\n        parseObservers.add(new WeakReference<ParseProgressListener>(observer));\n            List<Note> dummyList = new ArrayList<Note>();\n                throw new GedcomParserException(\"Expected a root level item in the buffer, but found \" + rootLevelItem.getLevel() + \" \" + rootLevelItem.getTag()\n                        + \" from line \" + lineNum);\n",
            "src/main/java/org/gedcom4j/parser/MultimediaRecordParser.java": "                    List<Multimedia> continuedObjects = new ArrayList<Multimedia>();\n",
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java": "    final ConcurrentMap<String, CanonicalizedString> stringPool = new ConcurrentHashMap<String, CanonicalizedString>(100);\n",
            "src/main/java/org/gedcom4j/parser/event/ParseProgressEvent.java": "        StringBuilder builder = new StringBuilder();\n",
            "src/main/java/org/gedcom4j/query/Finder.java": "        List<Individual> result = new ArrayList<Individual>();\n",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "        Set<Individual> result = new HashSet<Individual>();\n        Set<Individual> result = new HashSet<Individual>();\n        if (dad != null) {\n            if (dad.getFamiliesWhereSpouse() != null) {\n                for (FamilySpouse fs : dad.getFamiliesWhereSpouse()) {\n                    Individual dadsWife = fs.getFamily().getWife();\n                    addIndividualAndFamilies(result, dadsWife);\n                }\n            }\n        }\n        if (mom != null) {\n            if (mom.getFamiliesWhereSpouse() != null) {\n                for (FamilySpouse fs : mom.getFamiliesWhereSpouse()) {\n                    Individual momsHusband = fs.getFamily().getHusband();\n                    if (momsHusband != null) {\n                        addIndividualAndFamilies(result, momsHusband);\n                    }\n                }\n            }\n        }\n                    Set<Individual> s = new HashSet<Individual>();\n        checkedAlready = new HashSet<Individual>();\n",
            "src/main/java/org/gedcom4j/relationship/Relationship.java": "    private final List<SimpleRelationship> chain = new ArrayList<SimpleRelationship>();\n",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": "import static org.gedcom4j.relationship.RelationshipName.*;\nimport java.util.*;\nimport org.gedcom4j.model.*;\n    private Set<Individual> lookedAt = new HashSet<Individual>();\n        relationshipsFound = new ArrayList<Relationship>();\n        currentChain = new ArrayList<SimpleRelationship>();\n        lookedAt = new HashSet<Individual>();\n            relationshipsFound = new ArrayList<Relationship>(new HashSet<Relationship>(relationshipsFound));\n            List<Relationship> keepers = new ArrayList<Relationship>();\n        r.setName(RelationshipName.HUSBAND);\n        r.setName(RelationshipName.WIFE);\n",
            "src/main/java/org/gedcom4j/relationship/SimplificationRules.java": "    static List<RelationshipName[]> rules = new ArrayList<RelationshipName[]>();\n",
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java": "            int dups = new DuplicateEliminator<StringWithCustomTags>(stringList).process();\n",
            "src/main/java/org/gedcom4j/validate/CitationValidator.java": "                    int dups = new DuplicateEliminator<List<String>>(textFromSource).process();\n",
            "src/main/java/org/gedcom4j/validate/DuplicateEliminator.java": "        HashSet<T> unique = new HashSet<T>();\n",
            "src/main/java/org/gedcom4j/validate/EventValidator.java": "                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n                int dups = new DuplicateEliminator<StringWithCustomTags>(emails).process();\n                int dups = new DuplicateEliminator<StringWithCustomTags>(faxNumbers).process();\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                int dups = new DuplicateEliminator<StringWithCustomTags>(phoneNumbers).process();\n                int dups = new DuplicateEliminator<StringWithCustomTags>(wwwUrls).process();\n",
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java": "                int dups = new DuplicateEliminator<Individual>(children).process();\n                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n                int dups = new DuplicateEliminator<LdsSpouseSealing>(ldsSpouseSealings).process();\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                int dups = new DuplicateEliminator<Submitter>(submitters).process();\n",
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java": "    private final List<GedcomValidationFinding> findings = new ArrayList<GedcomValidationFinding>();\n        new NotesValidator(rootValidator, gedcom, new ArrayList<Note>(gedcom.getNotes().values())).validate();\n",
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java": "                int dups = new DuplicateEliminator<PersonalName>(names).process();\n            int dups = new DuplicateEliminator<FamilyChild>(individual.getFamiliesWhereChild()).process();\n            int dups = new DuplicateEliminator<FamilySpouse>(individual.getFamiliesWhereSpouse()).process();\n",
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java": "                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n",
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java": "            int dups = new DuplicateEliminator<UserReference>(userReferences).process();\n",
            "src/main/java/org/gedcom4j/validate/NoteValidator.java": "                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n",
            "src/main/java/org/gedcom4j/validate/NotesValidator.java": "                    int dups = new DuplicateEliminator<Note>(notes).process();\n",
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java": "                int dups = new DuplicateEliminator<PersonalNameVariation>(phonetic).process();\n                int dups = new DuplicateEliminator<PersonalNameVariation>(romanized).process();\n",
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java": "                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n",
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java": "                int dups = new DuplicateEliminator<AbstractNameVariation>(phonetic).process();\n            int dups = new DuplicateEliminator<AbstractNameVariation>(romanized).process();\n",
            "src/main/java/org/gedcom4j/validate/SourceValidator.java": "                    int dups = new DuplicateEliminator<EventRecorded>(eventsRecorded).process();\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                int dups = new DuplicateEliminator<SourceCallNumber>(callNumbers).process();\n",
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java": "            int dups = new DuplicateEliminator<StringWithCustomTags>(languagePref).process();\n",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java": "import sun.security.krb5.internal.ccache.Tag;\n    protected void emitStringsWithCustomTags(int level, List<StringWithCustomTags> strings, String tagValue) throws GedcomWriterException {\n            List<String> temp = new ArrayList<String>();\n    protected void emitTagWithOptionalValueAndCustomSubtags(int level, String tag, StringWithCustomTags valueToRightOfTag) throws GedcomWriterException {\n        List<String> temp = new ArrayList<String>();\n        return baseWriter != null && baseWriter.writeFrom.getHeader() != null && baseWriter.writeFrom.getHeader().getGedcomVersion() != null\n                && SupportedVersion.V5_5.equals(baseWriter.writeFrom.getHeader().getGedcomVersion().getVersionNumber());\n        List<String> result = new ArrayList<String>();\n            List<String> temp = new ArrayList<String>();\n        List<String> temp = new ArrayList<String>();\n",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": "    List<String> lines = new ArrayList<String>();\n    private boolean autorepair = false;\n    private final List<WeakReference<ConstructProgressListener>> constructObservers = new CopyOnWriteArrayList<WeakReference<ConstructProgressListener>>();\n    private final List<WeakReference<FileProgressListener>> fileObservers = new CopyOnWriteArrayList<WeakReference<FileProgressListener>>();\n    public boolean isAutorepair() {\n        return autorepair;\n    }\n        constructObservers.add(new WeakReference<ConstructProgressListener>(observer));\n        fileObservers.add(new WeakReference<FileProgressListener>(observer));\n        constructObservers.add(new WeakReference<ConstructProgressListener>(observer));\n        fileObservers.add(new WeakReference<FileProgressListener>(observer));\n        OutputStream o = new FileOutputStream(file);\n        try {\n        } finally {\n            o.close();\n",
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java": "            List<String> strings = new ArrayList<String>();\n",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": "        GedcomFileWriter gfw = new GedcomFileWriter(new GedcomWriter(new Gedcom()), lines);\n        List<String> lines = new ArrayList<String>();\n    public void testEncodingDetectionAscii() throws IOException, WriterCancelledException {\n    @Test\n    @SuppressWarnings(\"resource\")\n",
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java": "        List<String> l = new ArrayList<String>();\n        int count = new DuplicateEliminator<String>(l).process();\n        List<String> l = new ArrayList<String>();\n        int count = new DuplicateEliminator<String>(l).process();\n        count = new DuplicateEliminator<String>(l).process();\n        count = new DuplicateEliminator<String>(l).process();\n        List<String> l = new ArrayList<String>();\n        int count = new DuplicateEliminator<String>(l).process();\n        count = new DuplicateEliminator<String>(l).process();\n        List<String> l = new ArrayList<String>();\n        int count = new DuplicateEliminator<String>(l).process();\n        int count = new DuplicateEliminator<String>(l).process();\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java": "            readbackLines = new ArrayList<String>();\n        List<String> original = new ArrayList<String>();\n            List<String> result = new ArrayList<String>();\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/encoding/Encoding.java": [
                67
            ],
            "src/main/java/org/gedcom4j/model/AbstractElement.java": [
                92
            ],
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": [
                317,
                358,
                382,
                405,
                428
            ],
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": [
                140
            ],
            "src/main/java/org/gedcom4j/model/Address.java": [
                201
            ],
            "src/main/java/org/gedcom4j/model/CitationData.java": [
                111
            ],
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": [
                182,
                214
            ],
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": [
                110,
                133
            ],
            "src/main/java/org/gedcom4j/model/Corporation.java": [
                177,
                201,
                224,
                247
            ],
            "src/main/java/org/gedcom4j/model/Family.java": [
                282,
                329,
                361,
                384,
                457
            ],
            "src/main/java/org/gedcom4j/model/FamilyChild.java": [
                169
            ],
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": [
                124
            ],
            "src/main/java/org/gedcom4j/model/Gedcom.java": [
                79,
                90,
                97,
                102,
                108,
                114,
                125
            ],
            "src/main/java/org/gedcom4j/model/Individual.java": [
                424,
                447,
                458,
                490,
                513,
                527,
                564,
                587,
                598,
                621,
                645,
                658,
                687,
                710,
                733,
                774,
                797,
                820,
                844,
                876,
                914,
                947,
                970,
                993,
                1213,
                1249
            ],
            "src/main/java/org/gedcom4j/model/Multimedia.java": [
                216,
                249,
                299
            ],
            "src/main/java/org/gedcom4j/model/Note.java": [
                161,
                184,
                216
            ],
            "src/main/java/org/gedcom4j/model/PersonalName.java": [
                251
            ],
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": [
                197,
                239
            ],
            "src/main/java/org/gedcom4j/model/Place.java": [
                163,
                204
            ],
            "src/main/java/org/gedcom4j/model/Repository.java": [
                217,
                241,
                273,
                328
            ],
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": [
                104
            ],
            "src/main/java/org/gedcom4j/model/Source.java": [
                257,
                280,
                303,
                376,
                399
            ],
            "src/main/java/org/gedcom4j/model/SourceData.java": [
                102
            ],
            "src/main/java/org/gedcom4j/model/StringTree.java": [
                169
            ],
            "src/main/java/org/gedcom4j/model/Submitter.java": [
                262,
                286,
                309,
                332,
                364,
                428
            ],
            "src/main/java/org/gedcom4j/parser/AbstractParser.java": [
                45,
                61
            ],
            "src/main/java/org/gedcom4j/parser/CitationListParser.java": [
                85,
                119
            ],
            "src/main/java/org/gedcom4j/parser/GedcomParser.java": [
                95,
                119,
                134,
                139,
                164,
                361,
                371,
                437,
                456,
                516,
                575,
                576
            ],
            "src/main/java/org/gedcom4j/parser/MultimediaRecordParser.java": [
                112
            ],
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java": [
                91
            ],
            "src/main/java/org/gedcom4j/parser/event/ParseProgressEvent.java": [
                205
            ],
            "src/main/java/org/gedcom4j/query/Finder.java": [
                85
            ],
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                78,
                116,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                290,
                332
            ],
            "src/main/java/org/gedcom4j/relationship/Relationship.java": [
                44
            ],
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": [
                29,
                31,
                33,
                87,
                112,
                121,
                123,
                137,
                150,
                367,
                412
            ],
            "src/main/java/org/gedcom4j/relationship/SimplificationRules.java": [
                42
            ],
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java": [
                325
            ],
            "src/main/java/org/gedcom4j/validate/CitationValidator.java": [
                97
            ],
            "src/main/java/org/gedcom4j/validate/DuplicateEliminator.java": [
                69
            ],
            "src/main/java/org/gedcom4j/validate/EventValidator.java": [
                110,
                137,
                164,
                191,
                218,
                248
            ],
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java": [
                104,
                133,
                160,
                187,
                214
            ],
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java": [
                87,
                195
            ],
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java": [
                77,
                89,
                95
            ],
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java": [
                80
            ],
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java": [
                130
            ],
            "src/main/java/org/gedcom4j/validate/NoteValidator.java": [
                100
            ],
            "src/main/java/org/gedcom4j/validate/NotesValidator.java": [
                98
            ],
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java": [
                104,
                128
            ],
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java": [
                77
            ],
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java": [
                106,
                127
            ],
            "src/main/java/org/gedcom4j/validate/SourceValidator.java": [
                85,
                107,
                153
            ],
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java": [
                84
            ],
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java": [
                38,
                162,
                233,
                268,
                279,
                339,
                340,
                378,
                433,
                477
            ],
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": [
                92,
                103,
                118,
                128,
                212,
                213,
                214,
                263,
                273,
                349,
                368,
                390,
                391,
                394,
                395
            ],
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java": [
                68
            ],
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": [
                65,
                80,
                98,
                120,
                140
            ],
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java": [
                51,
                52,
                63,
                70,
                81,
                96,
                111,
                118,
                130,
                145,
                151,
                166
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java": [
                119,
                307,
                455
            ]
        }
    },
    {
        "commit": "d4407416",
        "prev_commit": "a596dd15",
        "changed_files": [
            "gedcom4j release notes.txt",
            "src/main/java/org/gedcom4j/exception/GedcomValidationException.java",
            "src/main/java/org/gedcom4j/io/event/FileProgressEvent.java",
            "src/main/java/org/gedcom4j/model/AbstractCitation.java",
            "src/main/java/org/gedcom4j/model/AbstractElement.java",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java",
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java",
            "src/main/java/org/gedcom4j/model/AbstractNotesElement.java",
            "src/main/java/org/gedcom4j/model/Address.java",
            "src/main/java/org/gedcom4j/model/Association.java",
            "src/main/java/org/gedcom4j/model/ChangeDate.java",
            "src/main/java/org/gedcom4j/model/CharacterSet.java",
            "src/main/java/org/gedcom4j/model/CitationData.java",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java",
            "src/main/java/org/gedcom4j/model/Corporation.java",
            "src/main/java/org/gedcom4j/model/EventRecorded.java",
            "src/main/java/org/gedcom4j/model/Family.java",
            "src/main/java/org/gedcom4j/model/FamilyChild.java",
            "src/main/java/org/gedcom4j/model/FamilyEvent.java",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java",
            "src/main/java/org/gedcom4j/model/FileReference.java",
            "src/main/java/org/gedcom4j/model/Gedcom.java",
            "src/main/java/org/gedcom4j/model/GedcomVersion.java",
            "src/main/java/org/gedcom4j/model/HasCitations.java",
            "src/main/java/org/gedcom4j/model/HasCustomTags.java",
            "src/main/java/org/gedcom4j/model/HasNotes.java",
            "src/main/java/org/gedcom4j/model/HasXref.java",
            "src/main/java/org/gedcom4j/model/Header.java",
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java",
            "src/main/java/org/gedcom4j/model/Individual.java",
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java",
            "src/main/java/org/gedcom4j/model/IndividualEvent.java",
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java",
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java",
            "src/main/java/org/gedcom4j/model/Multimedia.java",
            "src/main/java/org/gedcom4j/model/Note.java",
            "src/main/java/org/gedcom4j/model/PersonalName.java",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java",
            "src/main/java/org/gedcom4j/model/Place.java",
            "src/main/java/org/gedcom4j/model/Repository.java",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java",
            "src/main/java/org/gedcom4j/model/Source.java",
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java",
            "src/main/java/org/gedcom4j/model/SourceData.java",
            "src/main/java/org/gedcom4j/model/SourceSystem.java",
            "src/main/java/org/gedcom4j/model/Submission.java",
            "src/main/java/org/gedcom4j/model/Submitter.java",
            "src/main/java/org/gedcom4j/model/UserReference.java",
            "src/main/java/org/gedcom4j/model/ValidatedElement.java",
            "src/test/java/org/gedcom4j/comparators/IndividualByEventDateLastNameFirstNameComparatorTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomValidationExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomWriterExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomWriterVersionDataMismatchExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/UnsupportedGedcomCharsetExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/UnsupportedVersionExceptionTest.java",
            "src/test/java/org/gedcom4j/io/encoding/AnselMappingTest.java",
            "src/test/java/org/gedcom4j/io/reader/AbstractReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java",
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java",
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java",
            "src/test/java/org/gedcom4j/io/writer/NullOutputStream.java",
            "src/test/java/org/gedcom4j/model/AssociationTest.java",
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java",
            "src/test/java/org/gedcom4j/model/CitationDataTest.java",
            "src/test/java/org/gedcom4j/model/CorporationTest.java",
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java",
            "src/test/java/org/gedcom4j/model/FamilyEventTypeTest.java",
            "src/test/java/org/gedcom4j/model/FamilyTest.java",
            "src/test/java/org/gedcom4j/model/GedcomTest.java",
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java",
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java",
            "src/test/java/org/gedcom4j/model/IndividualTest.java",
            "src/test/java/org/gedcom4j/model/Issue88Test.java",
            "src/test/java/org/gedcom4j/model/RepositoryTest.java",
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java",
            "src/test/java/org/gedcom4j/model/SourceTest.java",
            "src/test/java/org/gedcom4j/model/SupportedVersionTest.java",
            "src/test/java/org/gedcom4j/model/TestHelper.java",
            "src/test/java/org/gedcom4j/model/TrailerTest.java"
        ],
        "changed_files_num": 83,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/exception/GedcomValidationException.java",
            "src/main/java/org/gedcom4j/io/event/FileProgressEvent.java",
            "src/main/java/org/gedcom4j/model/AbstractCitation.java",
            "src/main/java/org/gedcom4j/model/AbstractElement.java",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java",
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java",
            "src/main/java/org/gedcom4j/model/AbstractNotesElement.java",
            "src/main/java/org/gedcom4j/model/Address.java",
            "src/main/java/org/gedcom4j/model/Association.java",
            "src/main/java/org/gedcom4j/model/ChangeDate.java",
            "src/main/java/org/gedcom4j/model/CharacterSet.java",
            "src/main/java/org/gedcom4j/model/CitationData.java",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java",
            "src/main/java/org/gedcom4j/model/Corporation.java",
            "src/main/java/org/gedcom4j/model/EventRecorded.java",
            "src/main/java/org/gedcom4j/model/Family.java",
            "src/main/java/org/gedcom4j/model/FamilyChild.java",
            "src/main/java/org/gedcom4j/model/FamilyEvent.java",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java",
            "src/main/java/org/gedcom4j/model/FileReference.java",
            "src/main/java/org/gedcom4j/model/Gedcom.java",
            "src/main/java/org/gedcom4j/model/GedcomVersion.java",
            "src/main/java/org/gedcom4j/model/HasCitations.java",
            "src/main/java/org/gedcom4j/model/HasCustomTags.java",
            "src/main/java/org/gedcom4j/model/HasNotes.java",
            "src/main/java/org/gedcom4j/model/HasXref.java",
            "src/main/java/org/gedcom4j/model/Header.java",
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java",
            "src/main/java/org/gedcom4j/model/Individual.java",
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java",
            "src/main/java/org/gedcom4j/model/IndividualEvent.java",
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java",
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java",
            "src/main/java/org/gedcom4j/model/Multimedia.java",
            "src/main/java/org/gedcom4j/model/Note.java",
            "src/main/java/org/gedcom4j/model/PersonalName.java",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java",
            "src/main/java/org/gedcom4j/model/Place.java",
            "src/main/java/org/gedcom4j/model/Repository.java",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java",
            "src/main/java/org/gedcom4j/model/Source.java",
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java",
            "src/main/java/org/gedcom4j/model/SourceData.java",
            "src/main/java/org/gedcom4j/model/SourceSystem.java",
            "src/main/java/org/gedcom4j/model/Submission.java",
            "src/main/java/org/gedcom4j/model/Submitter.java",
            "src/main/java/org/gedcom4j/model/UserReference.java",
            "src/main/java/org/gedcom4j/model/ValidatedElement.java",
            "src/test/java/org/gedcom4j/comparators/IndividualByEventDateLastNameFirstNameComparatorTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomValidationExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomWriterExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/GedcomWriterVersionDataMismatchExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/UnsupportedGedcomCharsetExceptionTest.java",
            "src/test/java/org/gedcom4j/exception/UnsupportedVersionExceptionTest.java",
            "src/test/java/org/gedcom4j/io/encoding/AnselMappingTest.java",
            "src/test/java/org/gedcom4j/io/reader/AbstractReaderListenerTest.java",
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java",
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java",
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java",
            "src/test/java/org/gedcom4j/io/writer/NullOutputStream.java",
            "src/test/java/org/gedcom4j/model/AssociationTest.java",
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java",
            "src/test/java/org/gedcom4j/model/CitationDataTest.java",
            "src/test/java/org/gedcom4j/model/CorporationTest.java",
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java",
            "src/test/java/org/gedcom4j/model/FamilyEventTypeTest.java",
            "src/test/java/org/gedcom4j/model/FamilyTest.java",
            "src/test/java/org/gedcom4j/model/GedcomTest.java",
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java",
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java",
            "src/test/java/org/gedcom4j/model/IndividualTest.java",
            "src/test/java/org/gedcom4j/model/Issue88Test.java",
            "src/test/java/org/gedcom4j/model/RepositoryTest.java",
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java",
            "src/test/java/org/gedcom4j/model/SourceTest.java",
            "src/test/java/org/gedcom4j/model/SupportedVersionTest.java",
            "src/test/java/org/gedcom4j/model/TestHelper.java",
            "src/test/java/org/gedcom4j/model/TrailerTest.java"
        ],
        "changed_java_files_num": 82,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        StringBuilder builder = new StringBuilder(128);\n+    private List<StringTree> customTags = getCustomTags(Options.isCollectionInitializationEnabled());\n+        StringBuilder builder = new StringBuilder(32);\n+    protected void setCustomTags(List<StringTree> theCustomTags) {\n+    \tcustomTags = theCustomTags;\n+    }\n+    private Address address;\n+    private StringWithCustomTags age;\n+    private StringWithCustomTags cause;\n+    private List<AbstractCitation> citations = getCitations(Options.isCollectionInitializationEnabled());\n+    private StringWithCustomTags date;\n+    private StringWithCustomTags description;\n+    private List<StringWithCustomTags> emails = getEmails(Options.isCollectionInitializationEnabled());\n+    private List<StringWithCustomTags> faxNumbers = getFaxNumbers(Options.isCollectionInitializationEnabled());\n+    private List<Multimedia> multimedia = getMultimedia(Options.isCollectionInitializationEnabled());\n+    private List<StringWithCustomTags> phoneNumbers = getPhoneNumbers(Options.isCollectionInitializationEnabled());\n+    private Place place;\n+    private StringWithCustomTags religiousAffiliation;\n+    private StringWithCustomTags respAgency;\n+    private StringWithCustomTags restrictionNotice;\n+    private StringWithCustomTags subType;\n+    private List<StringWithCustomTags> wwwUrls = getWwwUrls(Options.isCollectionInitializationEnabled());\n+    private String yNull;\n+        StringBuilder builder = new StringBuilder(128);\n+        buildAbstractEventToString(builder);\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    protected StringBuilder buildAbstractEventToString(StringBuilder builder) {\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+    \treturn builder;\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+\tprivate static final long serialVersionUID = 2539148787102235445L;\n+\t\n+    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        AbstractNotesElement other = (AbstractNotesElement) obj;\n+        if (notes == null) {\n+            if (other.notes != null) {\n+                return false;\n+            }\n+        } else if (!notes.equals(other.notes)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public List<Note> getNotes() {\n+        return notes;\n+    }\n+    public List<Note> getNotes(boolean initializeIfNeeded) {\n+        if (initializeIfNeeded && notes == null) {\n+            notes = new ArrayList<Note>(0);\n+        }\n+        return notes;\n+    }\n+    public void setNotes(List<Note> theNotes) {\n+    \tgetNotes(true).clear();\n+    \tnotes.addAll(theNotes);\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + ((notes == null) ? 0 : notes.hashCode());\n+        return result;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(getClass().getSimpleName()).append(\" [\");\n+        if (notes != null) {\n+            builder.append(\"notes=\");\n+            builder.append(notes);\n+            builder.append(\", \");\n+        }\n+        if (getCustomTags() != null) {\n+            builder.append(\"customTags=\");\n+            builder.append(getCustomTags());\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+    @Override\n+\tpublic String getXref() {\n+\t\treturn getAssociatedEntityXref();\n+\t}\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+    }}\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        StringBuilder builder = new StringBuilder(64);\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(128);\n+        buildAbstractEventToString(builder);\n+        StringBuilder builder = new StringBuilder(24);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(128);\n+    protected static String toStringLimitCollection(Collection<?> collection, int maxLen) {\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+\tList<AbstractCitation> getCitations();\n+\tList<AbstractCitation> getCitations(boolean initializeIfNeeded);\n+\tList<StringTree> getCustomTags();\n+\tList<StringTree> getCustomTags(boolean initialize);\n+\tList<Note> getNotes();\n+\tList<Note> getNotes(boolean initializeIfNeeded);\n+\tString getXref();\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+    @SuppressWarnings({ \"PMD.NcssMethodCount\", \"PMD.ExcessiveMethodLength\" })\n+\tpublic boolean equals(Object obj) {\n+        StringBuilder sb = new StringBuilder(64);\n+                sb.append(b.getDate());\n+                sb.append(d.getDate());\n+        StringBuilder builder = new StringBuilder(128);\n+        buildAbstractEventToString(builder);\n+        StringBuilder builder = new StringBuilder(128);\n+        buildAbstractEventToString(builder);\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(64);\n+        if (getNotes() != null) {\n+            builder.append(getNotes());\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+        StringBuilder builder = new StringBuilder(32);\n+        if (getCustomTags() != null) {\n+            builder.append(getCustomTags());\n+    private static void addBasicName(Individual i, String string) {\n+    private static void addBirthDate(Individual i, String string) {\n+    private static List<String> getLines(GedcomFileReader gr) throws IOException, GedcomParserException {\n+    private static void testUtf8File(String fileName) throws IOException, FileNotFoundException, GedcomParserException {\n+    @SuppressWarnings(\"PMD.SystemPrintln\")\n+\tpublic void setUp() throws IOException, GedcomParserException {\n+    @SuppressWarnings({ \"resource\", \"PMD.SystemPrintln\" })\n+\tpublic void testRegistered() throws IOException, GedcomParserException, GedcomWriterException {\n+                System.out.println(getClass().getName() + \" found \" + gw.getValidationFindings().size()\n+\t@Test\n+    private static List<String> getAnselGedcomLines() {\n+    private static List<String> getAsciiGedcomLines() {\n+    private static List<String> getUnicodeGedcomLines() {\n+    private static List<String> getUtf8GedcomLines() {\n+    @SuppressWarnings(\"PMD.EqualsNull\")\n+\tpublic void testEqualsObject() {\n+    @SuppressWarnings(\"PMD.EqualsNull\")\n+\tpublic void testEqualsObject() {\n+        c1.setCustomTags(null);\n+        c1.setCustomTags(new ArrayList<StringTree>());\n+        c1.setCustomTags(null);\n+        c1.setCustomTags(new ArrayList<StringTree>());\n+        c1.setCustomTags(null);\n+        c1.setCustomTags(null);\n+    @SuppressWarnings(\"PMD.EqualsNull\")\n+\tpublic void testEqualsObject() {\n+        e1.setAddress(new Address());\n+        e2.setAddress(new Address());\n+        e1.setAge(new StringWithCustomTags(\"Foo\"));\n+        e2.setAge(new StringWithCustomTags(\"Foo\"));\n+        e1.setCause(new StringWithCustomTags(\"Foo\"));\n+        e2.setCause(new StringWithCustomTags(\"Foo\"));\n+        e1.setDate(new StringWithCustomTags(\"Foo\"));\n+        e2.setDate(new StringWithCustomTags(\"Foo\"));\n+        e1.setDescription(new StringWithCustomTags(\"Foo\"));\n+        e2.setDescription(new StringWithCustomTags(\"Foo\"));\n+        e1.setPlace(new Place());\n+        e2.setPlace(new Place());\n+        e1.setRespAgency(new StringWithCustomTags(\"Foo\"));\n+        e2.setRespAgency(new StringWithCustomTags(\"Foo\"));\n+        e1.setSubType(new StringWithCustomTags(\"Foo\"));\n+        e2.setSubType(new StringWithCustomTags(\"Foo\"));\n+        e1.setyNull(\"Foo\");\n+        e2.setyNull(\"Foo\");\n+\t@Test\n+\t@Test\n+    @SuppressWarnings(\"PMD.PositionLiteralsFirstInComparisons\")\n+\tpublic void testEqualsOtherObjectTypes() {\n+    @SuppressWarnings(\"PMD.EqualsNull\")\n+\tpublic void testEqualsObject() {\n+    @SuppressWarnings(\"PMD.EqualsNull\")\n+\tpublic void testEqualsObject() {\n+    @SuppressWarnings(\"PMD.EqualsNull\")\n+\tpublic void testEqualsObject() {\n+\tpublic void testEqualsObject() {\n+        i1.setAddress(new Address());\n+        i2.setAddress(new Address());\n+        i1.setAge(new StringWithCustomTags(\"One\"));\n+        i2.setAge(new StringWithCustomTags(\"One\"));\n+        i1.setCause(new StringWithCustomTags(\"Two\"));\n+        i2.setCause(new StringWithCustomTags(\"Two\"));\n+        i1.setDate(new StringWithCustomTags(\"Three\"));\n+        i2.setDate(new StringWithCustomTags(\"Three\"));\n+        i1.setDescription(new StringWithCustomTags(\"Four\"));\n+        i2.setDescription(new StringWithCustomTags(\"Four\"));\n+        i1.setPlace(new Place());\n+        i2.setPlace(new Place());\n+        i1.setReligiousAffiliation(new StringWithCustomTags(\"Eight\"));\n+        i2.setReligiousAffiliation(new StringWithCustomTags(\"Eight\"));\n+        i1.setRespAgency(new StringWithCustomTags(\"Nine\"));\n+        i2.setRespAgency(new StringWithCustomTags(\"Nine\"));\n+        i1.setRestrictionNotice(new StringWithCustomTags(\"Ten\"));\n+        i2.setRestrictionNotice(new StringWithCustomTags(\"Ten\"));\n+        i1.setSubType(new StringWithCustomTags(\"Eleven\"));\n+        i2.setSubType(new StringWithCustomTags(\"Eleven\"));\n+        i1.setyNull(\"Thirteen\");\n+        i2.setyNull(\"Thirteen\");\n+\tpublic void testHashCode() {\n+        i1.setAddress(new Address());\n+        i2.setAddress(new Address());\n+        i1.setAge(new StringWithCustomTags(\"One\"));\n+        i2.setAge(new StringWithCustomTags(\"One\"));\n+        i1.setCause(new StringWithCustomTags(\"Two\"));\n+        i2.setCause(new StringWithCustomTags(\"Two\"));\n+        i1.setDate(new StringWithCustomTags(\"Three\"));\n+        i2.setDate(new StringWithCustomTags(\"Three\"));\n+        i1.setDescription(new StringWithCustomTags(\"Four\"));\n+        i2.setDescription(new StringWithCustomTags(\"Four\"));\n+        i1.setPlace(new Place());\n+        i2.setPlace(new Place());\n+        i1.setReligiousAffiliation(new StringWithCustomTags(\"Eight\"));\n+        i2.setReligiousAffiliation(new StringWithCustomTags(\"Eight\"));\n+        i1.setRespAgency(new StringWithCustomTags(\"Nine\"));\n+        i2.setRespAgency(new StringWithCustomTags(\"Nine\"));\n+        i1.setRestrictionNotice(new StringWithCustomTags(\"Ten\"));\n+        i2.setRestrictionNotice(new StringWithCustomTags(\"Ten\"));\n+        i1.setSubType(new StringWithCustomTags(\"Eleven\"));\n+        i2.setSubType(new StringWithCustomTags(\"Eleven\"));\n+        i1.setyNull(\"Thirteen\");\n+        i2.setyNull(\"Thirteen\");\n+        i.setAddress(new Address());\n+        i.setAge(new StringWithCustomTags(\"One\"));\n+        i.setCause(new StringWithCustomTags(\"Two\"));\n+        i.setDate(new StringWithCustomTags(\"Three\"));\n+        i.setDescription(new StringWithCustomTags(\"Four\"));\n+        i.setPlace(new Place());\n+        i.setReligiousAffiliation(new StringWithCustomTags(\"Eight\"));\n+        i.setRespAgency(new StringWithCustomTags(\"Nine\"));\n+        i.setRestrictionNotice(new StringWithCustomTags(\"Ten\"));\n+        i.setSubType(new StringWithCustomTags(\"Eleven\"));\n+        i.setyNull(\"Thirteen\");\n+\tpublic void testGetDescendants() throws IOException, GedcomParserException {\n+    private static void addAttributeOfType(Individual i, IndividualAttributeType t) {\n+        e.setDescription(new StringWithCustomTags(\"Random text for uniqueness \" + Math.random()));\n+    private static void addBasicName(Individual i, String string) {\n+    private static void addEventOfType(Individual i, IndividualEventType t) {\n+        e.setDescription(new StringWithCustomTags(\"Random text for uniqueness \" + Math.random()));\n+    private static Individual getPerson(Gedcom gedcom, String surname, String givenName) {\n+        birth.setDate(new StringWithCustomTags(\"1/1/1950\"));\n+        birth.setDate(new StringWithCustomTags(\"1/1/1950\"));\n+        death.setDate(new StringWithCustomTags(\"12/31/1999\"));\n+        death.setDate(new StringWithCustomTags(\"12/31/1999\"));\n+    @SuppressWarnings(\"PMD.EqualsNull\")\n+\tpublic void testEqualsObject() {\n+    @SuppressWarnings(\"PMD.EqualsNull\")\n+\tpublic void testEqualsObject() {\n+        s1.setCustomTags(null);\n+        s1.setCustomTags(null);\n+        s1.setCustomTags(null);\n+    @SuppressWarnings(\"PMD.EmptyStatementNotInLoop\")\n+\tpublic void test() throws UnsupportedVersionException {\n+    @SuppressWarnings(\"PMD.EqualsNull\")\n+\tpublic void testEqualsObject() {\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/io/event/FileProgressEvent.java": "        StringBuilder builder = new StringBuilder();\n",
            "src/main/java/org/gedcom4j/model/AbstractElement.java": "public abstract class AbstractElement implements Serializable {\n    protected List<StringTree> customTags = getCustomTags(Options.isCollectionInitializationEnabled());\n        StringBuilder builder = new StringBuilder();\n}\n",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": "public abstract class AbstractEvent extends AbstractElement {\n    protected Address address;\n    protected StringWithCustomTags age;\n    protected StringWithCustomTags cause;\n    protected List<AbstractCitation> citations = getCitations(Options.isCollectionInitializationEnabled());\n    protected StringWithCustomTags date;\n    protected StringWithCustomTags description;\n    protected List<StringWithCustomTags> emails = getEmails(Options.isCollectionInitializationEnabled());\n    protected List<StringWithCustomTags> faxNumbers = getFaxNumbers(Options.isCollectionInitializationEnabled());\n    protected List<Multimedia> multimedia = getMultimedia(Options.isCollectionInitializationEnabled());\n    protected List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    protected List<StringWithCustomTags> phoneNumbers = getPhoneNumbers(Options.isCollectionInitializationEnabled());\n    protected Place place;\n    protected StringWithCustomTags religiousAffiliation;\n    protected StringWithCustomTags restrictionNotice;\n    protected StringWithCustomTags subType;\n    protected List<StringWithCustomTags> wwwUrls = getWwwUrls(Options.isCollectionInitializationEnabled());\n    }\n    public void setRestrictionNotice(StringWithCustomTags restrictionNotice) {\n        this.restrictionNotice = restrictionNotice;\n    }\n            builder.append(\"date=\");\n            builder.append(\", \");\n            builder.append(\"respAgency=\");\n            builder.append(\", \");\n        if (restrictionNotice != null) {\n",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": "public abstract class AbstractLdsOrdinance extends AbstractElement {\n    @Override\n",
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Address.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Association.java": "public class Association extends AbstractElement {\n    public List<AbstractCitation> getCitations() {\n            builder.append(\", \");\n        return builder.toString();\n}\n",
            "src/main/java/org/gedcom4j/model/ChangeDate.java": "    @Override\n        final int prime = 31;\n",
            "src/main/java/org/gedcom4j/model/CharacterSet.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/CitationData.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": "        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": "        StringBuilder builder = new StringBuilder();\n",
            "src/main/java/org/gedcom4j/model/Corporation.java": "        StringBuilder builder = new StringBuilder();\n",
            "src/main/java/org/gedcom4j/model/EventRecorded.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Family.java": "public class Family extends AbstractElement {\n        }\n            builder.append(\"changeDate=\");\n        }\n            builder.append(\"numChildren=\");\n",
            "src/main/java/org/gedcom4j/model/FamilyChild.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/FamilyEvent.java": "    public String toString() {\n        }\n",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/FileReference.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Gedcom.java": "        StringBuilder builder = new StringBuilder();\n    private String toStringLimitCollection(Collection<?> collection, int maxLen) {\n",
            "src/main/java/org/gedcom4j/model/GedcomVersion.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Header.java": "public class Header extends AbstractElement {\n    private static final long serialVersionUID = 2648392706111388922L;\n            builder.append(\", \");\n        if (copyrightData != null) {\n            builder.append(\", \");\n        if (notes != null) {\n",
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Individual.java": "@SuppressWarnings(\"PMD.ExcessiveClassLength\")\npublic class Individual extends AbstractElement {\n    @Override\n    public boolean equals(Object obj) {\n        StringBuilder sb = new StringBuilder(64); // Initial size - we know we're going to be appending more than 16\n                }\n                }\n",
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java": "    public String toString() {\n        }\n",
            "src/main/java/org/gedcom4j/model/IndividualEvent.java": "    public String toString() {\n        }\n",
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java": "        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java": "        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Multimedia.java": "public class Multimedia extends AbstractElement {\n    }\n        StringBuilder builder = new StringBuilder();\n        if (blob != null) {\n            builder.append(\", \");\n        if (embeddedMediaFormat != null) {\n",
            "src/main/java/org/gedcom4j/model/Note.java": "public class Note extends AbstractElement {\n        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/PersonalName.java": "public class PersonalName extends AbstractElement {\n",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": "public class PersonalNameVariation extends AbstractNameVariation {\n        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Place.java": "public class Place extends AbstractElement {\n    }\n        this.placeFormat = placeFormat;\n            builder.append(\", \");\n        if (latitude != null) {\n",
            "src/main/java/org/gedcom4j/model/Repository.java": "public class Repository extends AbstractElement {\n    }\n        this.xref = xref;\n            builder.append(\", \");\n        if (name != null) {\n",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": "public class RepositoryCitation extends AbstractElement {\n        return notes;\n        return repositoryXref;\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        return result;\n",
            "src/main/java/org/gedcom4j/model/Source.java": "public class Source extends AbstractElement {\n    public void setSourceFiledBy(StringWithCustomTags sourceFiledBy) {\n    }\n        }\n            builder.append(\"recIdNumber=\");\n",
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/SourceData.java": "public class SourceData extends AbstractElement {\n        return notes;\n        return respAgency;\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        return result;\n",
            "src/main/java/org/gedcom4j/model/SourceSystem.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Submission.java": "public class Submission extends AbstractElement {\n        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Submitter.java": "public class Submitter extends AbstractElement {\n        builder.append(\"Submitter [\");\n            builder.append(\"address=\");\n        }\n            builder.append(\"notes=\");\n",
            "src/main/java/org/gedcom4j/model/UserReference.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/test/java/org/gedcom4j/exception/GedcomWriterVersionDataMismatchExceptionTest.java": "public class GedcomWriterVersionDataMismatchExceptionTest {\n",
            "src/test/java/org/gedcom4j/exception/UnsupportedVersionExceptionTest.java": "public class UnsupportedVersionExceptionTest {\n",
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java": "public class GedcomFileReaderTest {\n",
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java": "    public void setUp() throws IOException, GedcomParserException {\n        GedcomParser gp = new GedcomParser();\n",
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java": "    @Test(expected = WriterCancelledException.class)\n    public void testRegistered() throws IOException, GedcomParserException, GedcomWriterException {\n                System.out.println(this.getClass().getName() + \" found \" + gw.getValidationFindings().size()\n",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": "public class GedcomFileWriterTest {\n    @Test\n",
            "src/test/java/org/gedcom4j/io/writer/NullOutputStream.java": "        ; // Do nothing\n",
            "src/test/java/org/gedcom4j/model/AssociationTest.java": "    public void testEqualsObject() {\n        Association a1 = new Association();\n",
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java": "    public void testEqualsObject() {\n        CharacterSet cs1 = new CharacterSet();\n",
            "src/test/java/org/gedcom4j/model/CitationDataTest.java": "        c1.customTags = null;\n        c1.customTags = new ArrayList<StringTree>();\n        c1.customTags = null;\n        c1.customTags = new ArrayList<StringTree>();\n        c1.customTags = null;\n        c1.customTags = null;\n",
            "src/test/java/org/gedcom4j/model/CorporationTest.java": "    public void testEqualsObject() {\n        Corporation c1 = new Corporation();\n",
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java": "public class FamilyEventTest {\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n",
            "src/test/java/org/gedcom4j/model/FamilyEventTypeTest.java": "import junit.framework.TestCase;\n        assertSame(FamilyEventType.CENSUS, FamilyEventType.getFromTag(\"CENS\"));\n        assertTrue(FamilyEventType.isValidTag(\"DIV\"));\n",
            "src/test/java/org/gedcom4j/model/FamilyTest.java": "    public void testEqualsOtherObjectTypes() {\n        Family f1 = new Family();\n",
            "src/test/java/org/gedcom4j/model/GedcomTest.java": "    public void testEqualsObject() {\n        Gedcom g1 = new Gedcom();\n",
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java": "    public void testEqualsObject() {\n        GedcomVersion gv1 = new GedcomVersion();\n",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java": "    public void testEqualsObject() {\n        HeaderSourceData h1 = new HeaderSourceData();\n",
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java": "public class IndividualAttributeTest {\n        IndividualAttribute i1 = new IndividualAttribute();\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        IndividualAttribute i1 = new IndividualAttribute();\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        i.age = new StringWithCustomTags(\"One\");\n        i.cause = new StringWithCustomTags(\"Two\");\n        i.getCitations(true).add(new CitationWithoutSource());\n        i.description = new StringWithCustomTags(\"Four\");\n        i.getEmails(true).add(new StringWithCustomTags(\"Five\"));\n        i.religiousAffiliation = new StringWithCustomTags(\"Eight\");\n        i.respAgency = new StringWithCustomTags(\"Nine\");\n        i.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i.subType = new StringWithCustomTags(\"Eleven\");\n        i.setType(IndividualAttributeType.FACT);\n",
            "src/test/java/org/gedcom4j/model/IndividualTest.java": "public class IndividualTest {\n        GedcomParser gp = new GedcomParser();\n        IndividualAttribute e = new IndividualAttribute();\n        i.getAttributes(true).add(e);\n        PersonalName pn = new PersonalName();\n        IndividualEvent e = new IndividualEvent();\n        i.getEvents(true).add(e);\n        Individual result = new Finder(gedcom).findByName(surname, givenName).get(0);\n",
            "src/test/java/org/gedcom4j/model/Issue88Test.java": "        birth.date = new StringWithCustomTags(\"1/1/1950\");\n        birth.date = new StringWithCustomTags(\"1/1/1950\");\n        death.date = new StringWithCustomTags(\"12/31/1999\");\n        death.date = new StringWithCustomTags(\"12/31/1999\");\n",
            "src/test/java/org/gedcom4j/model/RepositoryTest.java": "    public void testEqualsObject() {\n        Repository r1 = new Repository();\n",
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java": "    public void testEqualsObject() {\n        SourceSystem ss1 = new SourceSystem();\n",
            "src/test/java/org/gedcom4j/model/SourceTest.java": "        s1.customTags = null;\n        s1.customTags = null;\n        s1.customTags = null;\n",
            "src/test/java/org/gedcom4j/model/SupportedVersionTest.java": "    public void test() throws UnsupportedVersionException {\n        assertNotNull(SupportedVersion.forString(\"5.5\"));\n",
            "src/test/java/org/gedcom4j/model/TrailerTest.java": "    public void testEqualsObject() {\n        Trailer t1 = new Trailer();\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/event/FileProgressEvent.java": [
                109
            ],
            "src/main/java/org/gedcom4j/model/AbstractElement.java": [
                41,
                50,
                110,
                120
            ],
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": [
                40,
                49,
                54,
                59,
                64,
                69,
                74,
                79,
                84,
                89,
                94,
                99,
                104,
                109,
                120,
                125,
                130,
                652,
                660,
                661,
                662,
                712,
                714,
                757,
                759,
                761
            ],
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": [
                40,
                272
            ],
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java": [
                133,
                145,
                147
            ],
            "src/main/java/org/gedcom4j/model/Address.java": [
                303,
                340,
                342
            ],
            "src/main/java/org/gedcom4j/model/Association.java": [
                39,
                143,
                247,
                274,
                276
            ],
            "src/main/java/org/gedcom4j/model/ChangeDate.java": [
                138,
                140
            ],
            "src/main/java/org/gedcom4j/model/CharacterSet.java": [
                133,
                145,
                147
            ],
            "src/main/java/org/gedcom4j/model/CitationData.java": [
                140,
                152,
                154
            ],
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": [
                316,
                353,
                355,
                358,
                360
            ],
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": [
                153
            ],
            "src/main/java/org/gedcom4j/model/Corporation.java": [
                291
            ],
            "src/main/java/org/gedcom4j/model/EventRecorded.java": [
                164,
                181,
                183
            ],
            "src/main/java/org/gedcom4j/model/Family.java": [
                39,
                632,
                634,
                672,
                674
            ],
            "src/main/java/org/gedcom4j/model/FamilyChild.java": [
                249,
                276,
                278
            ],
            "src/main/java/org/gedcom4j/model/FamilyEvent.java": [
                167,
                184
            ],
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": [
                153,
                165,
                167
            ],
            "src/main/java/org/gedcom4j/model/FileReference.java": [
                196,
                218,
                220
            ],
            "src/main/java/org/gedcom4j/model/Gedcom.java": [
                360,
                424
            ],
            "src/main/java/org/gedcom4j/model/GedcomVersion.java": [
                132,
                144,
                146
            ],
            "src/main/java/org/gedcom4j/model/Header.java": [
                40,
                45,
                509,
                511,
                539,
                541
            ],
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java": [
                170,
                187,
                189
            ],
            "src/main/java/org/gedcom4j/model/Individual.java": [
                41,
                42,
                190,
                191,
                1132,
                1184,
                1197
            ],
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java": [
                93,
                100
            ],
            "src/main/java/org/gedcom4j/model/IndividualEvent.java": [
                124,
                136
            ],
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java": [
                160,
                187,
                189,
                207,
                209
            ],
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java": [
                46,
                58,
                60,
                78,
                80
            ],
            "src/main/java/org/gedcom4j/model/Multimedia.java": [
                54,
                427,
                464,
                466,
                484,
                486
            ],
            "src/main/java/org/gedcom4j/model/Note.java": [
                40,
                278,
                310,
                312
            ],
            "src/main/java/org/gedcom4j/model/PersonalName.java": [
                40
            ],
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": [
                39,
                368,
                420,
                422
            ],
            "src/main/java/org/gedcom4j/model/Place.java": [
                39,
                309,
                328,
                351,
                353
            ],
            "src/main/java/org/gedcom4j/model/Repository.java": [
                40,
                414,
                443,
                471,
                473
            ],
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": [
                39,
                142,
                151,
                159,
                161
            ],
            "src/main/java/org/gedcom4j/model/Source.java": [
                39,
                517,
                519,
                567,
                569
            ],
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java": [
                131,
                143,
                145
            ],
            "src/main/java/org/gedcom4j/model/SourceData.java": [
                39,
                140,
                149,
                157,
                159
            ],
            "src/main/java/org/gedcom4j/model/SourceSystem.java": [
                235,
                262,
                264
            ],
            "src/main/java/org/gedcom4j/model/Submission.java": [
                34,
                333,
                375,
                377
            ],
            "src/main/java/org/gedcom4j/model/Submitter.java": [
                44,
                567,
                569,
                602,
                604
            ],
            "src/main/java/org/gedcom4j/model/UserReference.java": [
                131,
                143,
                145
            ],
            "src/test/java/org/gedcom4j/exception/GedcomWriterVersionDataMismatchExceptionTest.java": [
                40
            ],
            "src/test/java/org/gedcom4j/exception/UnsupportedVersionExceptionTest.java": [
                40
            ],
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java": [
                46
            ],
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java": [
                61,
                62
            ],
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java": [
                79,
                80,
                90
            ],
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": [
                54,
                78
            ],
            "src/test/java/org/gedcom4j/io/writer/NullOutputStream.java": [
                42
            ],
            "src/test/java/org/gedcom4j/model/AssociationTest.java": [
                44,
                45
            ],
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java": [
                44,
                45
            ],
            "src/test/java/org/gedcom4j/model/CitationDataTest.java": [
                75,
                81,
                118,
                124,
                160,
                176
            ],
            "src/test/java/org/gedcom4j/model/CorporationTest.java": [
                44,
                45
            ],
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java": [
                39,
                50,
                53,
                66,
                69,
                82,
                85,
                114,
                117,
                130,
                133,
                210,
                213,
                237,
                240,
                253,
                256,
                301,
                304
            ],
            "src/test/java/org/gedcom4j/model/FamilyEventTypeTest.java": [
                29,
                43,
                64
            ],
            "src/test/java/org/gedcom4j/model/FamilyTest.java": [
                125,
                126
            ],
            "src/test/java/org/gedcom4j/model/GedcomTest.java": [
                64,
                65
            ],
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java": [
                44,
                45
            ],
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java": [
                44,
                45
            ],
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java": [
                42,
                49,
                56,
                58,
                61,
                63,
                66,
                68,
                81,
                83,
                86,
                88,
                116,
                118,
                121,
                123,
                126,
                128,
                131,
                133,
                136,
                138,
                151,
                153,
                163,
                170,
                172,
                175,
                177,
                180,
                182,
                195,
                197,
                200,
                202,
                230,
                232,
                235,
                237,
                240,
                242,
                245,
                247,
                250,
                252,
                265,
                267,
                280,
                281,
                282,
                285,
                286,
                292,
                293,
                294,
                295,
                296
            ],
            "src/test/java/org/gedcom4j/model/IndividualTest.java": [
                47,
                138,
                286,
                289,
                301,
                316,
                319,
                334
            ],
            "src/test/java/org/gedcom4j/model/Issue88Test.java": [
                53,
                74,
                79,
                99
            ],
            "src/test/java/org/gedcom4j/model/RepositoryTest.java": [
                44,
                45
            ],
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java": [
                44,
                45
            ],
            "src/test/java/org/gedcom4j/model/SourceTest.java": [
                58,
                137,
                210
            ],
            "src/test/java/org/gedcom4j/model/SupportedVersionTest.java": [
                50,
                51
            ],
            "src/test/java/org/gedcom4j/model/TrailerTest.java": [
                44,
                45
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/exception/GedcomValidationException.java": "import org.gedcom4j.validate.GedcomValidator;\n",
            "src/main/java/org/gedcom4j/io/event/FileProgressEvent.java": "        StringBuilder builder = new StringBuilder();\n",
            "src/main/java/org/gedcom4j/model/AbstractCitation.java": "import java.util.ArrayList;\nimport java.util.List;\nimport org.gedcom4j.Options;\npublic abstract class AbstractCitation extends AbstractElement {\n    protected List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        AbstractCitation other = (AbstractCitation) obj;\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n        return true;\n    }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = super.hashCode();\n        result = prime * result + ((notes == null) ? 0 : notes.hashCode());\n        return result;\n    }\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"AbstractCitation [\");\n        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n",
            "src/main/java/org/gedcom4j/model/AbstractElement.java": "public abstract class AbstractElement implements Serializable {\n    protected List<StringTree> customTags = getCustomTags(Options.isCollectionInitializationEnabled());\n        StringBuilder builder = new StringBuilder();\n",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": "public abstract class AbstractEvent extends AbstractElement {\n    protected Address address;\n    protected StringWithCustomTags age;\n    protected StringWithCustomTags cause;\n    protected List<AbstractCitation> citations = getCitations(Options.isCollectionInitializationEnabled());\n    protected StringWithCustomTags date;\n    protected StringWithCustomTags description;\n    protected List<StringWithCustomTags> emails = getEmails(Options.isCollectionInitializationEnabled());\n    protected List<StringWithCustomTags> faxNumbers = getFaxNumbers(Options.isCollectionInitializationEnabled());\n    protected List<Multimedia> multimedia = getMultimedia(Options.isCollectionInitializationEnabled());\n    protected List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    protected List<StringWithCustomTags> phoneNumbers = getPhoneNumbers(Options.isCollectionInitializationEnabled());\n    protected Place place;\n    protected StringWithCustomTags religiousAffiliation;\n    protected StringWithCustomTags respAgency;\n    protected StringWithCustomTags restrictionNotice;\n    protected StringWithCustomTags subType;\n    protected List<StringWithCustomTags> wwwUrls = getWwwUrls(Options.isCollectionInitializationEnabled());\n    protected String yNull;\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n        builder.append(\"]\");\n        return builder.toString();\n",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": "public abstract class AbstractLdsOrdinance extends AbstractElement {\n    protected List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Address.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Association.java": "public class Association extends AbstractElement {\n        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/ChangeDate.java": "import java.util.ArrayList;\nimport java.util.List;\nimport org.gedcom4j.Options;\npublic class ChangeDate extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/CharacterSet.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/CitationData.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": "        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": "        StringBuilder builder = new StringBuilder();\n",
            "src/main/java/org/gedcom4j/model/Corporation.java": "        StringBuilder builder = new StringBuilder();\n",
            "src/main/java/org/gedcom4j/model/EventRecorded.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Family.java": "public class Family extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/FamilyChild.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/FamilyEvent.java": "    @SuppressWarnings(\"PMD.ExcessiveMethodLength\")\n        StringBuilder builder = new StringBuilder();\n        if (address != null) {\n            builder.append(\"address=\");\n            builder.append(address);\n            builder.append(\", \");\n        }\n        if (age != null) {\n            builder.append(\"age=\");\n            builder.append(age);\n            builder.append(\", \");\n        }\n        if (cause != null) {\n            builder.append(\"cause=\");\n            builder.append(cause);\n            builder.append(\", \");\n        }\n        if (citations != null) {\n            builder.append(\"citations=\");\n            builder.append(citations);\n            builder.append(\", \");\n        }\n        if (date != null) {\n            builder.append(\"date=\");\n            builder.append(date);\n            builder.append(\", \");\n        }\n        if (description != null) {\n            builder.append(\"description=\");\n            builder.append(description);\n            builder.append(\", \");\n        }\n        if (emails != null) {\n            builder.append(\"emails=\");\n            builder.append(emails);\n            builder.append(\", \");\n        }\n        if (faxNumbers != null) {\n            builder.append(\"faxNumbers=\");\n            builder.append(faxNumbers);\n            builder.append(\", \");\n        }\n        if (multimedia != null) {\n            builder.append(\"multimedia=\");\n            builder.append(multimedia);\n            builder.append(\", \");\n        }\n        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n            builder.append(\", \");\n        }\n        if (phoneNumbers != null) {\n            builder.append(\"phoneNumbers=\");\n            builder.append(phoneNumbers);\n            builder.append(\", \");\n        }\n        if (place != null) {\n            builder.append(\"place=\");\n            builder.append(place);\n            builder.append(\", \");\n        }\n        if (religiousAffiliation != null) {\n            builder.append(\"religiousAffiliation=\");\n            builder.append(religiousAffiliation);\n            builder.append(\", \");\n        }\n        if (respAgency != null) {\n            builder.append(\"respAgency=\");\n            builder.append(respAgency);\n            builder.append(\", \");\n        }\n        if (restrictionNotice != null) {\n            builder.append(\"restrictionNotice=\");\n            builder.append(restrictionNotice);\n            builder.append(\", \");\n        }\n        if (subType != null) {\n            builder.append(\"subType=\");\n            builder.append(subType);\n            builder.append(\", \");\n        }\n        if (wwwUrls != null) {\n            builder.append(\"wwwUrls=\");\n            builder.append(wwwUrls);\n            builder.append(\", \");\n        }\n        if (yNull != null) {\n            builder.append(\"yNull=\");\n            builder.append(yNull);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/FileReference.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Gedcom.java": "        StringBuilder builder = new StringBuilder();\n    private String toStringLimitCollection(Collection<?> collection, int maxLen) {\n",
            "src/main/java/org/gedcom4j/model/GedcomVersion.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Header.java": "public class Header extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Individual.java": "@SuppressWarnings(\"PMD.ExcessiveClassLength\")\npublic class Individual extends AbstractElement {\n    @SuppressWarnings({ \"PMD.ExcessiveMethodLength\", \"PMD.NcssMethodCount\" })\n    public boolean equals(Object obj) {\n        StringBuilder sb = new StringBuilder(64); // Initial size - we know we're going to be appending more than 16\n                sb.append(b.date);\n                sb.append(d.date);\n",
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java": "    @SuppressWarnings(\"PMD.ExcessiveMethodLength\")\n        StringBuilder builder = new StringBuilder();\n        if (address != null) {\n            builder.append(\"address=\");\n            builder.append(address);\n            builder.append(\", \");\n        }\n        if (age != null) {\n            builder.append(\"age=\");\n            builder.append(age);\n            builder.append(\", \");\n        }\n        if (cause != null) {\n            builder.append(\"cause=\");\n            builder.append(cause);\n            builder.append(\", \");\n        }\n        if (citations != null) {\n            builder.append(\"citations=\");\n            builder.append(citations);\n            builder.append(\", \");\n        }\n        if (date != null) {\n            builder.append(\"date=\");\n            builder.append(date);\n            builder.append(\", \");\n        }\n        if (description != null) {\n            builder.append(\"description=\");\n            builder.append(description);\n            builder.append(\", \");\n        }\n        if (emails != null) {\n            builder.append(\"emails=\");\n            builder.append(emails);\n            builder.append(\", \");\n        }\n        if (faxNumbers != null) {\n            builder.append(\"faxNumbers=\");\n            builder.append(faxNumbers);\n            builder.append(\", \");\n        }\n        if (multimedia != null) {\n            builder.append(\"multimedia=\");\n            builder.append(multimedia);\n            builder.append(\", \");\n        }\n        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n            builder.append(\", \");\n        }\n        if (phoneNumbers != null) {\n            builder.append(\"phoneNumbers=\");\n            builder.append(phoneNumbers);\n            builder.append(\", \");\n        }\n        if (place != null) {\n            builder.append(\"place=\");\n            builder.append(place);\n            builder.append(\", \");\n        }\n        if (religiousAffiliation != null) {\n            builder.append(\"religiousAffiliation=\");\n            builder.append(religiousAffiliation);\n            builder.append(\", \");\n        }\n        if (respAgency != null) {\n            builder.append(\"respAgency=\");\n            builder.append(respAgency);\n            builder.append(\", \");\n        }\n        if (restrictionNotice != null) {\n            builder.append(\"restrictionNotice=\");\n            builder.append(restrictionNotice);\n            builder.append(\", \");\n        }\n        if (subType != null) {\n            builder.append(\"subType=\");\n            builder.append(subType);\n            builder.append(\", \");\n        }\n        if (wwwUrls != null) {\n            builder.append(\"wwwUrls=\");\n            builder.append(wwwUrls);\n            builder.append(\", \");\n        }\n        if (yNull != null) {\n            builder.append(\"yNull=\");\n            builder.append(yNull);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n",
            "src/main/java/org/gedcom4j/model/IndividualEvent.java": "    @SuppressWarnings(\"PMD.ExcessiveMethodLength\")\n        StringBuilder builder = new StringBuilder();\n        if (address != null) {\n            builder.append(\"address=\");\n            builder.append(address);\n            builder.append(\", \");\n        }\n        if (age != null) {\n            builder.append(\"age=\");\n            builder.append(age);\n            builder.append(\", \");\n        }\n        if (cause != null) {\n            builder.append(\"cause=\");\n            builder.append(cause);\n            builder.append(\", \");\n        }\n        if (citations != null) {\n            builder.append(\"citations=\");\n            builder.append(citations);\n            builder.append(\", \");\n        }\n        if (date != null) {\n            builder.append(\"date=\");\n            builder.append(date);\n            builder.append(\", \");\n        }\n        if (description != null) {\n            builder.append(\"description=\");\n            builder.append(description);\n            builder.append(\", \");\n        }\n        if (emails != null) {\n            builder.append(\"emails=\");\n            builder.append(emails);\n            builder.append(\", \");\n        }\n        if (faxNumbers != null) {\n            builder.append(\"faxNumbers=\");\n            builder.append(faxNumbers);\n            builder.append(\", \");\n        }\n        if (multimedia != null) {\n            builder.append(\"multimedia=\");\n            builder.append(multimedia);\n            builder.append(\", \");\n        }\n        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n            builder.append(\", \");\n        }\n        if (phoneNumbers != null) {\n            builder.append(\"phoneNumbers=\");\n            builder.append(phoneNumbers);\n            builder.append(\", \");\n        }\n        if (place != null) {\n            builder.append(\"place=\");\n            builder.append(place);\n            builder.append(\", \");\n        }\n        if (religiousAffiliation != null) {\n            builder.append(\"religiousAffiliation=\");\n            builder.append(religiousAffiliation);\n            builder.append(\", \");\n        }\n        if (respAgency != null) {\n            builder.append(\"respAgency=\");\n            builder.append(respAgency);\n            builder.append(\", \");\n        }\n        if (restrictionNotice != null) {\n            builder.append(\"restrictionNotice=\");\n            builder.append(restrictionNotice);\n            builder.append(\", \");\n        }\n        if (subType != null) {\n            builder.append(\"subType=\");\n            builder.append(subType);\n            builder.append(\", \");\n        }\n        if (wwwUrls != null) {\n            builder.append(\"wwwUrls=\");\n            builder.append(wwwUrls);\n            builder.append(\", \");\n        }\n        if (yNull != null) {\n            builder.append(\"yNull=\");\n            builder.append(yNull);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n",
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java": "        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java": "        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Multimedia.java": "public class Multimedia extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Note.java": "public class Note extends AbstractElement {\n        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/PersonalName.java": "public class PersonalName extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": "public class PersonalNameVariation extends AbstractNameVariation {\n        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Place.java": "public class Place extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Repository.java": "public class Repository extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": "public class RepositoryCitation extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Source.java": "public class Source extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/SourceData.java": "public class SourceData extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/SourceSystem.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Submission.java": "public class Submission extends AbstractElement {\n        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Submitter.java": "public class Submitter extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        StringBuilder builder = new StringBuilder();\n        if (notes != null) {\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/UserReference.java": "        StringBuilder builder = new StringBuilder();\n        if (customTags != null) {\n            builder.append(customTags);\n",
            "src/test/java/org/gedcom4j/io/encoding/AnselMappingTest.java": "import org.gedcom4j.io.encoding.AnselMapping;\n",
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java": "            ;\n            ;\n            ;\n            ;\n            ;\n            ;\n            ;\n            ;\n    private List<String> getLines(GedcomFileReader gr) throws IOException, GedcomParserException {\n    private void testUtf8File(String fileName) throws IOException, FileNotFoundException, GedcomParserException {\n",
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java": "    public void setUp() throws IOException, GedcomParserException {\n",
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java": "    @SuppressWarnings(\"resource\")\n    public void testRegistered() throws IOException, GedcomParserException, GedcomWriterException {\n                System.out.println(this.getClass().getName() + \" found \" + gw.getValidationFindings().size()\n",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": "    @SuppressWarnings(\"resource\")\n    @Test\n    @SuppressWarnings(\"resource\")\n    @SuppressWarnings(\"resource\")\n    @SuppressWarnings(\"resource\")\n    @SuppressWarnings(\"resource\")\n    private List<String> getAnselGedcomLines() {\n    private List<String> getAsciiGedcomLines() {\n    private List<String> getUnicodeGedcomLines() {\n    private List<String> getUtf8GedcomLines() {\n",
            "src/test/java/org/gedcom4j/io/writer/NullOutputStream.java": "        ; // Do nothing\n",
            "src/test/java/org/gedcom4j/model/AssociationTest.java": "    public void testEqualsObject() {\n",
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java": "    public void testEqualsObject() {\n",
            "src/test/java/org/gedcom4j/model/CitationDataTest.java": "        c1.customTags = null;\n        c1.customTags = new ArrayList<StringTree>();\n        c1.customTags = null;\n        c1.customTags = new ArrayList<StringTree>();\n        c1.customTags = null;\n        c1.customTags = null;\n",
            "src/test/java/org/gedcom4j/model/CorporationTest.java": "    public void testEqualsObject() {\n",
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java": "        e1.address = new Address();\n        e2.address = new Address();\n        e1.age = new StringWithCustomTags(\"Foo\");\n        e2.age = new StringWithCustomTags(\"Foo\");\n        e1.cause = new StringWithCustomTags(\"Foo\");\n        e2.cause = new StringWithCustomTags(\"Foo\");\n        e1.date = new StringWithCustomTags(\"Foo\");\n        e2.date = new StringWithCustomTags(\"Foo\");\n        e1.description = new StringWithCustomTags(\"Foo\");\n        e2.description = new StringWithCustomTags(\"Foo\");\n        e1.place = new Place();\n        e2.place = new Place();\n        e1.respAgency = new StringWithCustomTags(\"Foo\");\n        e2.respAgency = new StringWithCustomTags(\"Foo\");\n        e1.subType = new StringWithCustomTags(\"Foo\");\n        e2.subType = new StringWithCustomTags(\"Foo\");\n        e1.yNull = \"Foo\";\n        e2.yNull = \"Foo\";\n",
            "src/test/java/org/gedcom4j/model/FamilyTest.java": "    public void testEqualsOtherObjectTypes() {\n",
            "src/test/java/org/gedcom4j/model/GedcomTest.java": "    public void testEqualsObject() {\n",
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java": "    public void testEqualsObject() {\n",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java": "    public void testEqualsObject() {\n",
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java": "    public void testEqualsObject() {\n        i1.address = new Address();\n        i2.address = new Address();\n        i1.age = new StringWithCustomTags(\"One\");\n        i2.age = new StringWithCustomTags(\"One\");\n        i1.cause = new StringWithCustomTags(\"Two\");\n        i2.cause = new StringWithCustomTags(\"Two\");\n        i1.date = new StringWithCustomTags(\"Three\");\n        i2.date = new StringWithCustomTags(\"Three\");\n        i1.description = new StringWithCustomTags(\"Four\");\n        i2.description = new StringWithCustomTags(\"Four\");\n        i1.place = new Place();\n        i2.place = new Place();\n        i1.religiousAffiliation = new StringWithCustomTags(\"Eight\");\n        i2.religiousAffiliation = new StringWithCustomTags(\"Eight\");\n        i1.respAgency = new StringWithCustomTags(\"Nine\");\n        i2.respAgency = new StringWithCustomTags(\"Nine\");\n        i1.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i2.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i1.subType = new StringWithCustomTags(\"Eleven\");\n        i2.subType = new StringWithCustomTags(\"Eleven\");\n        i1.yNull = \"Thirteen\";\n        i2.yNull = \"Thirteen\";\n    public void testHashCode() {\n        i1.address = new Address();\n        i2.address = new Address();\n        i1.age = new StringWithCustomTags(\"One\");\n        i2.age = new StringWithCustomTags(\"One\");\n        i1.cause = new StringWithCustomTags(\"Two\");\n        i2.cause = new StringWithCustomTags(\"Two\");\n        i1.date = new StringWithCustomTags(\"Three\");\n        i2.date = new StringWithCustomTags(\"Three\");\n        i1.description = new StringWithCustomTags(\"Four\");\n        i2.description = new StringWithCustomTags(\"Four\");\n        i1.place = new Place();\n        i2.place = new Place();\n        i1.religiousAffiliation = new StringWithCustomTags(\"Eight\");\n        i2.religiousAffiliation = new StringWithCustomTags(\"Eight\");\n        i1.respAgency = new StringWithCustomTags(\"Nine\");\n        i2.respAgency = new StringWithCustomTags(\"Nine\");\n        i1.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i2.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i1.subType = new StringWithCustomTags(\"Eleven\");\n        i2.subType = new StringWithCustomTags(\"Eleven\");\n        i1.yNull = \"Thirteen\";\n        i2.yNull = \"Thirteen\";\n        i.address = new Address();\n        i.age = new StringWithCustomTags(\"One\");\n        i.cause = new StringWithCustomTags(\"Two\");\n        i.date = new StringWithCustomTags(\"Three\");\n        i.description = new StringWithCustomTags(\"Four\");\n        i.place = new Place();\n        i.religiousAffiliation = new StringWithCustomTags(\"Eight\");\n        i.respAgency = new StringWithCustomTags(\"Nine\");\n        i.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i.subType = new StringWithCustomTags(\"Eleven\");\n        i.yNull = \"Thirteen\";\n",
            "src/test/java/org/gedcom4j/model/IndividualTest.java": "    public void testGetDescendants() throws IOException, GedcomParserException {\n    private void addAttributeOfType(Individual i, IndividualAttributeType t) {\n        e.description = new StringWithCustomTags(\"Random text for uniqueness \" + Math.random());\n    private void addBasicName(Individual i, String string) {\n    private void addEventOfType(Individual i, IndividualEventType t) {\n        e.description = new StringWithCustomTags(\"Random text for uniqueness \" + Math.random());\n    private Individual getPerson(Gedcom gedcom, String surname, String givenName) {\n",
            "src/test/java/org/gedcom4j/model/Issue88Test.java": "        birth.date = new StringWithCustomTags(\"1/1/1950\");\n        birth.date = new StringWithCustomTags(\"1/1/1950\");\n        death.date = new StringWithCustomTags(\"12/31/1999\");\n        death.date = new StringWithCustomTags(\"12/31/1999\");\n",
            "src/test/java/org/gedcom4j/model/RepositoryTest.java": "    public void testEqualsObject() {\n",
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java": "    public void testEqualsObject() {\n",
            "src/test/java/org/gedcom4j/model/SourceTest.java": "        s1.customTags = null;\n        s1.customTags = null;\n        s1.customTags = null;\n",
            "src/test/java/org/gedcom4j/model/SupportedVersionTest.java": "    public void test() throws UnsupportedVersionException {\n",
            "src/test/java/org/gedcom4j/model/TestHelper.java": "        ; // nothing to do\n",
            "src/test/java/org/gedcom4j/model/TrailerTest.java": "    public void testEqualsObject() {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/exception/GedcomValidationException.java": [
                29
            ],
            "src/main/java/org/gedcom4j/io/event/FileProgressEvent.java": [
                109
            ],
            "src/main/java/org/gedcom4j/model/AbstractCitation.java": [
                29,
                30,
                32,
                39,
                49,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                81,
                82,
                83,
                92,
                93,
                94,
                95,
                96,
                97,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128
            ],
            "src/main/java/org/gedcom4j/model/AbstractElement.java": [
                41,
                50,
                110
            ],
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": [
                40,
                49,
                54,
                59,
                64,
                69,
                74,
                79,
                84,
                89,
                94,
                99,
                104,
                109,
                114,
                120,
                125,
                130,
                135,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                427,
                428,
                429,
                439,
                440,
                441,
                442,
                443,
                444,
                560,
                689,
                736,
                738,
                781,
                783,
                785,
                786
            ],
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": [
                40,
                60,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                171,
                172,
                173,
                182,
                183,
                184,
                185,
                186,
                187,
                222,
                274,
                286,
                288,
                306,
                308
            ],
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java": [
                133,
                145,
                147
            ],
            "src/main/java/org/gedcom4j/model/Address.java": [
                303,
                340,
                342
            ],
            "src/main/java/org/gedcom4j/model/Association.java": [
                39,
                242,
                269,
                271,
                275,
                276
            ],
            "src/main/java/org/gedcom4j/model/ChangeDate.java": [
                29,
                30,
                32,
                39,
                53,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                110,
                111,
                112,
                122,
                123,
                124,
                125,
                126,
                127,
                143,
                173,
                180,
                182,
                190,
                192
            ],
            "src/main/java/org/gedcom4j/model/CharacterSet.java": [
                133,
                145,
                147
            ],
            "src/main/java/org/gedcom4j/model/CitationData.java": [
                140,
                152,
                154
            ],
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": [
                316,
                353,
                355,
                358,
                360
            ],
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": [
                153
            ],
            "src/main/java/org/gedcom4j/model/Corporation.java": [
                291
            ],
            "src/main/java/org/gedcom4j/model/EventRecorded.java": [
                164,
                181,
                183
            ],
            "src/main/java/org/gedcom4j/model/Family.java": [
                39,
                88,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                405,
                406,
                407,
                417,
                418,
                419,
                420,
                421,
                422,
                530,
                626,
                668,
                670,
                708,
                710
            ],
            "src/main/java/org/gedcom4j/model/FamilyChild.java": [
                249,
                276,
                278
            ],
            "src/main/java/org/gedcom4j/model/FamilyEvent.java": [
                165,
                168,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                258,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278
            ],
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": [
                153,
                165,
                167
            ],
            "src/main/java/org/gedcom4j/model/FileReference.java": [
                196,
                218,
                220
            ],
            "src/main/java/org/gedcom4j/model/Gedcom.java": [
                360,
                424
            ],
            "src/main/java/org/gedcom4j/model/GedcomVersion.java": [
                132,
                144,
                146
            ],
            "src/main/java/org/gedcom4j/model/Header.java": [
                40,
                86,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                305,
                306,
                307,
                316,
                317,
                318,
                319,
                320,
                321,
                379,
                504,
                541,
                543,
                571,
                573
            ],
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java": [
                170,
                187,
                189
            ],
            "src/main/java/org/gedcom4j/model/Individual.java": [
                41,
                42,
                189,
                191,
                1132,
                1185,
                1198
            ],
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java": [
                92,
                94,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194
            ],
            "src/main/java/org/gedcom4j/model/IndividualEvent.java": [
                123,
                125,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230
            ],
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java": [
                160,
                187,
                189,
                207,
                209
            ],
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java": [
                46,
                58,
                60,
                78,
                80
            ],
            "src/main/java/org/gedcom4j/model/Multimedia.java": [
                54,
                101,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                321,
                322,
                323,
                333,
                334,
                335,
                336,
                337,
                338,
                391,
                464,
                501,
                503,
                521,
                523
            ],
            "src/main/java/org/gedcom4j/model/Note.java": [
                40,
                278,
                310,
                312
            ],
            "src/main/java/org/gedcom4j/model/PersonalName.java": [
                40,
                69,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                249,
                250,
                251,
                261,
                262,
                263,
                264,
                265,
                266,
                358
            ],
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": [
                39,
                368,
                420,
                422
            ],
            "src/main/java/org/gedcom4j/model/Place.java": [
                39,
                63,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                203,
                204,
                205,
                215,
                216,
                217,
                218,
                219,
                220,
                293,
                346,
                363,
                365,
                388,
                390
            ],
            "src/main/java/org/gedcom4j/model/Repository.java": [
                40,
                74,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                272,
                273,
                274,
                284,
                285,
                286,
                287,
                288,
                289,
                388,
                451,
                478,
                480,
                508,
                510
            ],
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": [
                39,
                54,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                126,
                127,
                128,
                138,
                139,
                140,
                141,
                142,
                143,
                159,
                179,
                186,
                188,
                196,
                198
            ],
            "src/main/java/org/gedcom4j/model/Source.java": [
                39,
                63,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                278,
                279,
                280,
                290,
                291,
                292,
                293,
                294,
                295,
                458,
                536,
                553,
                555,
                603,
                605
            ],
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java": [
                131,
                143,
                145
            ],
            "src/main/java/org/gedcom4j/model/SourceData.java": [
                39,
                53,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                124,
                125,
                126,
                136,
                137,
                138,
                139,
                140,
                141,
                157,
                177,
                184,
                186,
                194,
                196
            ],
            "src/main/java/org/gedcom4j/model/SourceSystem.java": [
                235,
                262,
                264
            ],
            "src/main/java/org/gedcom4j/model/Submission.java": [
                34,
                333,
                375,
                377
            ],
            "src/main/java/org/gedcom4j/model/Submitter.java": [
                44,
                88,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                362,
                363,
                364,
                374,
                375,
                376,
                377,
                378,
                379,
                489,
                566,
                603,
                605,
                638,
                640
            ],
            "src/main/java/org/gedcom4j/model/UserReference.java": [
                131,
                143,
                145
            ],
            "src/test/java/org/gedcom4j/io/encoding/AnselMappingTest.java": [
                31
            ],
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java": [
                101,
                166,
                219,
                252,
                285,
                318,
                351,
                384,
                461,
                483
            ],
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java": [
                61
            ],
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java": [
                78,
                80,
                90
            ],
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": [
                77,
                78,
                96,
                119,
                140,
                161,
                880,
                896,
                911,
                926
            ],
            "src/test/java/org/gedcom4j/io/writer/NullOutputStream.java": [
                42
            ],
            "src/test/java/org/gedcom4j/model/AssociationTest.java": [
                44
            ],
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java": [
                44
            ],
            "src/test/java/org/gedcom4j/model/CitationDataTest.java": [
                75,
                81,
                118,
                124,
                160,
                176
            ],
            "src/test/java/org/gedcom4j/model/CorporationTest.java": [
                44
            ],
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java": [
                49,
                52,
                65,
                68,
                81,
                84,
                113,
                116,
                129,
                132,
                209,
                212,
                236,
                239,
                252,
                255,
                300,
                303
            ],
            "src/test/java/org/gedcom4j/model/FamilyTest.java": [
                125
            ],
            "src/test/java/org/gedcom4j/model/GedcomTest.java": [
                64
            ],
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java": [
                44
            ],
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java": [
                44
            ],
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java": [
                48,
                55,
                57,
                60,
                62,
                65,
                67,
                80,
                82,
                85,
                87,
                115,
                117,
                120,
                122,
                125,
                127,
                130,
                132,
                135,
                137,
                150,
                152,
                162,
                169,
                171,
                174,
                176,
                179,
                181,
                194,
                196,
                199,
                201,
                229,
                231,
                234,
                236,
                239,
                241,
                244,
                246,
                249,
                251,
                264,
                266,
                279,
                280,
                281,
                284,
                285,
                291,
                292,
                293,
                294,
                295,
                298
            ],
            "src/test/java/org/gedcom4j/model/IndividualTest.java": [
                137,
                285,
                288,
                300,
                315,
                318,
                333
            ],
            "src/test/java/org/gedcom4j/model/Issue88Test.java": [
                53,
                74,
                79,
                99
            ],
            "src/test/java/org/gedcom4j/model/RepositoryTest.java": [
                44
            ],
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java": [
                44
            ],
            "src/test/java/org/gedcom4j/model/SourceTest.java": [
                58,
                137,
                210
            ],
            "src/test/java/org/gedcom4j/model/SupportedVersionTest.java": [
                50
            ],
            "src/test/java/org/gedcom4j/model/TestHelper.java": [
                59
            ],
            "src/test/java/org/gedcom4j/model/TrailerTest.java": [
                44
            ]
        }
    },
    {
        "commit": "fea2bf48",
        "prev_commit": "aa775e44",
        "changed_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java",
            "src/test/java/org/gedcom4j/parser/FrenchRepublicanParserTest.java",
            "src/test/java/org/gedcom4j/parser/HebrewCalendarParserTest.java"
        ],
        "changed_files_num": 7,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java",
            "src/test/java/org/gedcom4j/parser/FrenchRepublicanParserTest.java",
            "src/test/java/org/gedcom4j/parser/HebrewCalendarParserTest.java"
        ],
        "changed_java_files_num": 7,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        HebrewCalendarParser hc = new HebrewCalendarParser();\n+    VENDEMIAIRE(\"VEND\"),\n+    BRUMAIRE(\"BRUM\"),\n+    FRIMAIRE(\"FRIM\"),\n+    NIVOSE(\"NIVO\"),\n+    PLUVIOSE(\"PLUV\"),\n+    VENTOSE(\"VENT\"),\n+    GERMINAL(\"GERM\"),\n+    FLOREAL(\"FLOR\"),\n+    PRAIRIAL(\"PRAI\"),\n+    MESSIDOR(\"MESS\"),\n+    THERMIDOR(\"THER\"),\n+    FRUCTIDOR(\"FRUC\"),\n+    JOUR_COMPLEMENTAIRS(\"COMP\");\n+    public static FrenchRepublicanMonth getFromGedcomAbbrev(String gedcomAbbrev) {\n+        for (FrenchRepublicanMonth frm : values()) {\n+            if (gedcomAbbrev.equalsIgnoreCase(frm.getGedcomAbbrev())) {\n+                return frm;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String gedcomAbbrev;\n+    private FrenchRepublicanMonth(String gedcomAbbrev) {\n+        this.gedcomAbbrev = gedcomAbbrev;\n+    }\n+    public String getGedcomAbbrev() {\n+        return gedcomAbbrev;\n+    }\n+    Date convertFrenchRepublicanDateToGregorian(int frenchRepublicanYear, String frenchRepublicanMonthAbbrev, int dayOfMonth) {\n+        if (frenchRepublicanYear < 1) {\n+            return null;\n+        }\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        c.clear();\n+        c.set(1792, Calendar.SEPTEMBER, 21, 0, 0, 0);\n+        for (int i = 1; i <= frenchRepublicanYear - 1; i++) {\n+            c.add(Calendar.DATE, 365); // 365 days per year\n+            if (isFrenchLeapYearRomme(i)) {\n+                c.add(Calendar.DATE, 1); // add a leap day\n+            }\n+        }\n+        FrenchRepublicanMonth frm = FrenchRepublicanMonth.getFromGedcomAbbrev(frenchRepublicanMonthAbbrev);\n+        if (frm == null) {\n+            return null;\n+        }\n+        c.add(Calendar.DATE, 30 * frm.ordinal());\n+        if (dayOfMonth < 1) {\n+            return null;\n+        }\n+        if (frm == FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS && dayOfMonth > 6) {\n+            return null;\n+        }\n+        if (frm != FrenchRepublicanMonth.JOUR_COMPLEMENTAIRS && dayOfMonth > 30) {\n+            return null;\n+        }\n+        c.add(Calendar.DATE, dayOfMonth);\n+        return c.getTime();\n+    }\n+    private boolean isFrenchLeapYearRomme(int frenchRepublicanYear) {\n+        if (frenchRepublicanYear == 3 || frenchRepublicanYear == 7 || frenchRepublicanYear == 11 || frenchRepublicanYear == 15) {\n+            return true;\n+        }\n+        if (frenchRepublicanYear >= 20 && frenchRepublicanYear % 4 == 0) {\n+            if (frenchRepublicanYear % 100 == 0) {\n+                return (frenchRepublicanYear % 400 == 0);\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+    private static TimeZone saveTimeZone;\n+    @AfterClass\n+    public static void afterClass() {\n+        TimeZone.setDefault(saveTimeZone);\n+    }\n+    @BeforeClass\n+    public static void beforeClass() {\n+        saveTimeZone = TimeZone.getDefault();\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+    @Test\n+    public void testParseFrenchRepublicanSingleDateNoPref() {\n+        assertDate(dp.parse(\"@#DFRENCH R@ 1 THER 224\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 1 THER CCXXIV\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 1 THER CCXXIV (Because)\"), 2016, Calendar.JULY, 18);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO TMZ 5776\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT TMZ 5776 (Because)\"), 2016, Calendar.JULY, 7);\n+        assertDate(dp.parse(\"@#DFRENCH R@ ABT 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ EST 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ CAL 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ BEF 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ AFT 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ TO 5776\"), 2015, Calendar.SEPTEMBER, 14);\n+        assertDate(dp.parse(\"@#DFRENCH R@ INT 5776 (Because)\"), 2015, Calendar.SEPTEMBER, 14);\n+    }\n+    private static TimeZone saveTimeZone;\n+    @AfterClass\n+    public static void afterClass() {\n+        TimeZone.setDefault(saveTimeZone);\n+    }\n+    @BeforeClass\n+    public static void beforeClass() {\n+        saveTimeZone = TimeZone.getDefault();\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+    private final FrenchRepublicanParser classUnderTest = new FrenchRepublicanParser();\n+    @Test\n+    public void testConvertFrenchRepublicanDateToGregorian() {\n+        assertEquals(getDate(1792, Calendar.SEPTEMBER, 22), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"VEND\", 1));\n+        assertEquals(getDate(1792, Calendar.OCTOBER, 22), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"BRUM\", 1));\n+        assertEquals(getDate(1792, Calendar.NOVEMBER, 21), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"FRIM\", 1));\n+        assertEquals(getDate(1792, Calendar.DECEMBER, 21), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"NIVO\", 1));\n+        assertEquals(getDate(1793, Calendar.JANUARY, 20), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"PLUV\", 1));\n+        assertEquals(getDate(1793, Calendar.FEBRUARY, 19), classUnderTest.convertFrenchRepublicanDateToGregorian(1, \"VENT\", 1));\n+        assertEquals(\"Consolidation of the Revolutionary government on 14 Frimaire, year II (December 4, 1793)\", getDate(1793,\n+                Calendar.DECEMBER, 4), classUnderTest.convertFrenchRepublicanDateToGregorian(2, \"FRIM\", 14));\n+        assertEquals(\"Robespierre found guilty on 9 Thermidor An II (27 July 1794)\", getDate(1794, Calendar.JULY, 27),\n+                classUnderTest.convertFrenchRepublicanDateToGregorian(2, \"THER\", 9));\n+        assertEquals(\"Legislation that accelerated the Reign of Terror on 22 Prairial, year II (June 10, 1794)\", getDate(1794,\n+                Calendar.JUNE, 10), classUnderTest.convertFrenchRepublicanDateToGregorian(2, \"PRAI\", 22));\n+        assertEquals(\"Ecole Normale Superieure established on 9 Brumaire An III (30 October 1794)\", getDate(1794, Calendar.OCTOBER,\n+                30), classUnderTest.convertFrenchRepublicanDateToGregorian(3, \"BRUM\", 9));\n+        assertEquals(\"Insurrection of the sansculottes on 1 Prairial, year III (May 20, 1795)\", getDate(1795, Calendar.MAY, 20),\n+                classUnderTest.convertFrenchRepublicanDateToGregorian(3, \"PRAI\", 1));\n+        assertEquals(\"Failed coup and incidence of Napoleon's 'whiff of grapeshot' on 13 Vend\u00e9miaire An IV (5 October 1795)\",\n+                getDate(1795, Calendar.OCTOBER, 5), classUnderTest.convertFrenchRepublicanDateToGregorian(4, \"VEND\", 13));\n+        assertEquals(\"The coup against monarchist restorationists on 18 Fructidor An V (4 September 1797)\", getDate(1797,\n+                Calendar.SEPTEMBER, 4), classUnderTest.convertFrenchRepublicanDateToGregorian(5, \"FRUC\", 18));\n+        assertEquals(\"Coup in which 106 left\u2013wing deputies were deprived of their seats on 22 Flor\u00e9al Year VI (11 May 1798)\",\n+                getDate(1798, Calendar.MAY, 11), classUnderTest.convertFrenchRepublicanDateToGregorian(6, \"FLOR\", 22));\n+        assertEquals(\"Coup backed militarily by General Joubert on 30 Prairial Year VII (18 June 1799)\", getDate(1799,\n+                Calendar.JUNE, 18), classUnderTest.convertFrenchRepublicanDateToGregorian(7, \"PRAI\", 30));\n+        assertEquals(\"Napoleon's coup was on 18 Brumaire An VIII (9 November 1799)\", getDate(1799, Calendar.NOVEMBER, 9),\n+                classUnderTest.convertFrenchRepublicanDateToGregorian(8, \"BRUM\", 18));\n+    }\n+    @Test\n+    public void testConvertFrenchRepublicanDateToGregorian2() {\n+    }\n+    private Date getDate(int y, int m, int d) {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        c.clear();\n+        c.set(y, m, d, 0, 0, 0);\n+        return c.getTime();\n+    }\n+    private static TimeZone saveTimeZone;\n+    @AfterClass\n+    public static void afterClass() {\n+        TimeZone.setDefault(saveTimeZone);\n+    }\n+    @BeforeClass\n+    public static void beforeClass() {\n+        saveTimeZone = TimeZone.getDefault();\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+    private final HebrewCalendarParser classUnderTest = new HebrewCalendarParser();\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java": "package org.gedcom4j.parser;\nenum FrenchRepublicanMonth {\n    VENDEMIAIRE(\"VEND\"),\n    BRUMAIRE(\"BRUM\"),\n    FRIMAIRE(\"FRIM\"),\n    NIVOSE(\"NIVO\"),\n    PLUVIOSE(\"PLUV\"),\n    VENTOSE(\"VENT\"),\n    GERMINAL(\"GERM\"),\n    FLOREAL(\"FLOR\"),\n    PRAIRIAL(\"PRAI\"),\n    MESSIDOR(\"MESS\"),\n    THERMIDOR(\"THER\"),\n    FRUCTIDOR(\"FRUC\"),\n    JOUR_COMPLEMENTAIRS(\"COMP\");\n    @SuppressWarnings(\"ucd\")\n    public static FrenchRepublicanMonth getFromGedcomAbbrev(String gedcomAbbrev) {\n        for (FrenchRepublicanMonth frm : values()) {\n            if (gedcomAbbrev.equalsIgnoreCase(frm.getGedcomAbbrev())) {\n                return frm;\n            }\n        }\n        return null;\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": "package org.gedcom4j.parser;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\nimport java.util.concurrent.TimeUnit;\nclass HebrewCalendarParser {\n    Date convertHebrewDateToGregorian(int hebrewYear, String hebrewMonthAbbrev, int dayOfMonth) {\n        HebrewMonth hebrewMonth = HebrewMonth.getFromAbbreviation(hebrewMonthAbbrev);\n        int hebrewMonthNum = hebrewMonth.ordinal() + 1; // one-based\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.setTime(getFirstDayOfHebrewYear(hebrewYear));\n        for (int m = 1; m <= hebrewMonthNum - 1; m++) {\n            int monthLength = getMonthLength(hebrewYear, HebrewMonth.getFrom1BasedNumber(m));\n            c.add(Calendar.DAY_OF_YEAR, +monthLength);\n        }\n        c.add(Calendar.DAY_OF_YEAR, dayOfMonth - 1);\n        return c.getTime();\n    }\n    int getMonthLength(int hebrewYear, HebrewMonth hebrewMonth) {\n        int hebrewMonthNum = hebrewMonth.ordinal() + 1;\n        boolean leapYear = isLeapYear(hebrewYear);\n        int lenHebrewYear = getLengthOfYear(hebrewYear);\n        boolean haserYear = (lenHebrewYear == 353 || lenHebrewYear == 383);\n        boolean shalemYear = (lenHebrewYear == 355 || lenHebrewYear == 385);\n        int monthLength = 0;\n        if (hebrewMonthNum == 1 || hebrewMonthNum == 5 || hebrewMonthNum == 8 || hebrewMonthNum == 10 || hebrewMonthNum == 12) {\n            monthLength = 30;\n        } else if (hebrewMonthNum == 4 || hebrewMonthNum == 7 || hebrewMonthNum == 9 || hebrewMonthNum == 11\n                || hebrewMonthNum == 13) {\n            monthLength = 29;\n        } else if (hebrewMonthNum == 6) {\n            monthLength = (leapYear ? 30 : 0);\n        } else if (hebrewMonthNum == 2) {\n            monthLength = (shalemYear ? 30 : 29);\n        } else if (hebrewMonthNum == 3) {\n            monthLength = (haserYear ? 29 : 30);\n        }\n        return monthLength;\n    }\n    private Date getFirstDayOfHebrewYear(int hebrewYear) {\n        int monthsSinceFirstMolad = getMonthsSinceFirstMolad(hebrewYear);\n        int chalakim = 793 * monthsSinceFirstMolad;\n        chalakim += 204;\n        int hours = (int) Math.floor(chalakim / 1080);\n        chalakim = chalakim % 1080;\n        hours += monthsSinceFirstMolad * 12;\n        hours += 5;\n        int days = (int) Math.floor(hours / 24);\n        hours = hours % 24;\n        days += 29 * monthsSinceFirstMolad;\n        days += 2;\n        int dayOfWeek = days % 7;\n        if (!isLeapYear(hebrewYear) && dayOfWeek == 3 && (hours * 1080) + chalakim >= (9 * 1080) + 204) {\n            dayOfWeek = 5;\n            days += 2;\n        } else if (isLeapYear(hebrewYear - 1) && dayOfWeek == 2 && (hours * 1080) + chalakim >= (15 * 1080) + 589) {\n            dayOfWeek = 3;\n            days += 1;\n        } else {\n            if (hours >= 18) {\n                dayOfWeek += 1;\n                dayOfWeek = dayOfWeek % 7;\n                days += 1;\n            }\n            if (dayOfWeek == 1 || dayOfWeek == 4 || dayOfWeek == 6) {\n                dayOfWeek += 1;\n                dayOfWeek = dayOfWeek % 7;\n                days += 1;\n            }\n        }\n        days -= 2067025;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.clear();\n        c.set(1900, 0, 1, 0, 0);\n        c.add(Calendar.DATE, days);\n        Calendar gregorianReformation = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        gregorianReformation.clear();\n        gregorianReformation.set(1752, Calendar.SEPTEMBER, 14, 0, 0);\n        if (c.before(gregorianReformation)) {\n            c.add(Calendar.DATE, -10);\n        }\n        return c.getTime();\n    }\n    private int getLengthOfYear(int hebrewYear) {\n        Date thisNewYear = getFirstDayOfHebrewYear(hebrewYear);\n        Date nextNewYear = getFirstDayOfHebrewYear(hebrewYear + 1);\n        return (int) TimeUnit.DAYS.convert(nextNewYear.getTime() - thisNewYear.getTime(), TimeUnit.MILLISECONDS);\n    }\n    private int getMonthsSinceFirstMolad(int hebrewYear) {\n        int y = hebrewYear - 1;\n        int result = (int) (Math.floor(y / 19) * 235);\n        y = yearInLeapCycle(y);\n        result += 12 * y;\n        if (y >= 17) {\n            result += 6;\n        } else if (y >= 14) {\n            result += 5;\n        } else if (y >= 11) {\n            result += 4;\n        } else if (y >= 8) {\n            result += 3;\n        } else if (y >= 6) {\n            result += 2;\n        } else if (y >= 3) {\n            result += 1;\n        }\n        return result;\n    }\n    private boolean isLeapYear(int hebrewYear) {\n        int yearInCycle = yearInLeapCycle(hebrewYear);\n        return (yearInCycle == 3 || yearInCycle == 6 || yearInCycle == 8 || yearInCycle == 11 || yearInCycle == 14\n                || yearInCycle == 17 || yearInCycle == 0);\n    }\n    private int yearInLeapCycle(int hebrewYear) {\n        return hebrewYear % 19;\n    }\n",
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "import org.junit.AfterClass;\nimport org.junit.BeforeClass;\n    private static TimeZone saveTimeZone;\n    @AfterClass\n    public static void afterClass() {\n        TimeZone.setDefault(saveTimeZone);\n    }\n    @BeforeClass\n    public static void beforeClass() {\n        saveTimeZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    }\n    @Test\n    public void testParseFrenchRepublicanDatePeriod() {\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5 THER 224 TO 11 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n                Calendar.JULY, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5 THER 224 TO 11 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n                Calendar.JULY, 28);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 5 THER 224 TO 11 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n                Calendar.JULY, 25);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM VEND 4 TO THER 4\", ImpreciseDatePreference.FAVOR_EARLIEST), 1795, Calendar.SEPTEMBER,\n                23);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM VEND 4 TO THER 4\", ImpreciseDatePreference.FAVOR_LATEST), 1796, Calendar.AUGUST, 17);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM VEND 4 TO THER 4\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1796, Calendar.MARCH, 5);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 TO 5\", ImpreciseDatePreference.FAVOR_EARLIEST), 1792, Calendar.SEPTEMBER, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 TO 5\", ImpreciseDatePreference.FAVOR_LATEST), 1797, Calendar.SEPTEMBER, 21);\n        assertDate(dp.parse(\"@#DFRENCH R@ FROM 1 TO 5\", ImpreciseDatePreference.FAVOR_MIDPOINT), 1795, Calendar.MARCH, 23);\n    }\n    @Test\n    public void testParseFrenchRepublicanDateRange() {\n        assertDate(dp.parse(\"@#DFRENCH R@ BET 5 THER 224 AND 11 THER 224\", ImpreciseDatePreference.FAVOR_EARLIEST), 2016,\n                Calendar.JULY, 22);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET 5 THER 224 AND 11 THER 224\", ImpreciseDatePreference.FAVOR_LATEST), 2016,\n                Calendar.JULY, 28);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET 5 THER 224 AND 11 THER 224\", ImpreciseDatePreference.FAVOR_MIDPOINT), 2016,\n                Calendar.JULY, 25);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET VEND 4 AND THER 4\", ImpreciseDatePreference.FAVOR_EARLIEST), 1795, Calendar.SEPTEMBER,\n                23);\n        assertDate(dp.parse(\"@#DFRENCH R@ BET VEND 4 AND THER 4\", ImpreciseDatePreference.FAVOR_LATEST), 1796, Calendar.AUGUST, 17);\n",
            "src/test/java/org/gedcom4j/parser/HebrewCalendarParserTest.java": "package org.gedcom4j.parser;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\npublic class HebrewCalendarParserTest {\n    private static TimeZone saveTimeZone;\n    @AfterClass\n    public static void afterClass() {\n        TimeZone.setDefault(saveTimeZone);\n    }\n    @BeforeClass\n    public static void beforeClass() {\n        saveTimeZone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n    }\n    private final HebrewCalendarParser classUnderTest = new HebrewCalendarParser();\n    @Test\n    public void testConvertHebrewDateToGregorian() {\n        assertEquals(getDate(2016, Calendar.JULY, 19), classUnderTest.convertHebrewDateToGregorian(5776, HebrewMonth.TAMUZ\n                .getGedcomAbbrev(), 13));\n        assertEquals(getDate(1977, Calendar.MAY, 1), classUnderTest.convertHebrewDateToGregorian(5737, HebrewMonth.IYAR\n                .getGedcomAbbrev(), 13));\n        assertEquals(getDate(1980, Calendar.FEBRUARY, 29), classUnderTest.convertHebrewDateToGregorian(5740, HebrewMonth.ADAR\n                .getGedcomAbbrev(), 12));\n        assertEquals(getDate(1917, Calendar.NOVEMBER, 11), classUnderTest.convertHebrewDateToGregorian(5678, HebrewMonth.CHESHVAN\n                .getGedcomAbbrev(), 26));\n        assertEquals(getDate(1776, Calendar.JULY, 4), classUnderTest.convertHebrewDateToGregorian(5536, HebrewMonth.TAMUZ\n                .getGedcomAbbrev(), 17));\n    }\n    private Date getDate(int y, int m, int d) {\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n        c.clear();\n        c.set(y, m, d, 0, 0);\n        return c.getTime();\n    }\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanMonth.java": [
                27,
                34,
                37,
                39,
                41,
                43,
                45,
                47,
                49,
                51,
                53,
                55,
                57,
                59,
                61,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": [
                27,
                29,
                30,
                31,
                32,
                42,
                54,
                56,
                57,
                59,
                60,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                80,
                82,
                83,
                84,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                116,
                124,
                125,
                126,
                128,
                129,
                131,
                132,
                135,
                136,
                138,
                139,
                142,
                159,
                164,
                165,
                166,
                171,
                172,
                173,
                175,
                176,
                177,
                178,
                179,
                181,
                182,
                183,
                184,
                185,
                186,
                190,
                192,
                193,
                194,
                195,
                198,
                199,
                200,
                203,
                204,
                205,
                207,
                208,
                217,
                219,
                220,
                221,
                222,
                231,
                233,
                236,
                239,
                242,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                258,
                259,
                268,
                269,
                271,
                272,
                273,
                283,
                284,
                285
            ],
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                38,
                39,
                52,
                57,
                58,
                59,
                60,
                65,
                66,
                67,
                68,
                69,
                354,
                355,
                356,
                357,
                358,
                359,
                360,
                361,
                363,
                364,
                365,
                366,
                368,
                369,
                370,
                371,
                376,
                377,
                378,
                379,
                380,
                381,
                382,
                383,
                385,
                386,
                387
            ],
            "src/test/java/org/gedcom4j/parser/HebrewCalendarParserTest.java": [
                27,
                29,
                31,
                32,
                33,
                35,
                36,
                37,
                44,
                49,
                54,
                55,
                56,
                57,
                62,
                63,
                64,
                65,
                66,
                71,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                101,
                102,
                103,
                104,
                105,
                106,
                108
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": "        assertEquals(\"14 DEC -649\", dp.formatBC(\"14 DEC 650 BCE\"));\n        assertEquals(\"DEC -649\", dp.formatBC(\"DEC 650 BCE\"));\n        assertEquals(\"-649\", dp.formatBC(\"650 BCE\"));\n        assertEquals(\"14 DEC -49\", dp.formatBC(\"14 DEC 50 BCE\"));\n        assertEquals(\"DEC -49\", dp.formatBC(\"DEC 50 BCE\"));\n        assertEquals(\"-49\", dp.formatBC(\"50 BCE\"));\n        assertEquals(\"14 DEC -2049\", dp.formatBC(\"14 DEC 2050 B.C.E.\"));\n        assertEquals(\"DEC -2049\", dp.formatBC(\"DEC 2050 B.C.E.\"));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/test/java/org/gedcom4j/parser/DateParserTest.java": [
                165,
                166,
                167,
                168,
                169,
                170,
                172,
                173
            ]
        }
    },
    {
        "commit": "0fb4f732",
        "prev_commit": "6e5e3831",
        "changed_files": [
            "gedcom4j release notes.txt",
            "pom.xml",
            "src/main/java/org/gedcom4j/io/writer/AbstractEncodingSpecificWriter.java",
            "src/main/java/org/gedcom4j/io/writer/GedcomFileWriter.java",
            "src/main/java/org/gedcom4j/io/writer/LineTerminator.java",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java"
        ],
        "changed_files_num": 7,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/io/writer/AbstractEncodingSpecificWriter.java",
            "src/main/java/org/gedcom4j/io/writer/GedcomFileWriter.java",
            "src/main/java/org/gedcom4j/io/writer/LineTerminator.java",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t<version>3.1.0-SNAPSHOT</version>\n+    protected LineTerminator terminator = LineTerminator.getDefaultLineTerminator();\n+    private LineTerminator terminator = LineTerminator.getDefaultLineTerminator();\n+    LFCR;\n+    public static LineTerminator getDefaultLineTerminator() {\n+        String jvmLineTerm = System.getProperty(\"line.separator\");\n+        if (Character.toString((char) 0x0D).equals(jvmLineTerm)) {\n+            return LineTerminator.CR_ONLY;\n+        } else if (Character.toString((char) 0x0A).equals(jvmLineTerm)) {\n+            return LineTerminator.LF_ONLY;\n+        } else if ((Character.toString((char) 0x0D) + Character.toString((char) 0x0A)).equals(jvmLineTerm)) {\n+            return LineTerminator.CRLF;\n+        } else if ((Character.toString((char) 0x0A) + Character.toString((char) 0x0D)).equals(jvmLineTerm)) {\n+            return LineTerminator.LFCR;\n+        }\n+        return LineTerminator.CRLF;\n+    }\n+    private LineTerminator lineTerminator = LineTerminator.getDefaultLineTerminator();\n+    public LineTerminator getLineTerminator() {\n+        return lineTerminator;\n+    }\n+    public void setLineTerminator(LineTerminator lineTerminator) {\n+        this.lineTerminator = lineTerminator;\n+    }\n+        if (!file.exists() && !file.getCanonicalFile().getParentFile().exists() && !file.getCanonicalFile().getParentFile().mkdirs()\n+                && !file.createNewFile()) {\n+            gfw.setTerminator(getLineTerminator());\n+            throw new GedcomWriterVersionDataMismatchException(\n+                    \"Gedcom version is 5.5, but has multi-line copyright data in header\");\n+        if (writeFrom.getHeader().getCharacterSet() != null && writeFrom.getHeader().getCharacterSet().getCharacterSetName() != null\n+                && \"UTF-8\".equals(writeFrom.getHeader().getCharacterSet().getCharacterSetName().getValue())) {\n+                throw new GedcomWriterVersionDataMismatchException(\n+                        \"Gedcom version is 5.5, but source system corporation has www urls\");\n+                throw new GedcomWriterVersionDataMismatchException(\n+                        \"Gedcom version is 5.5, but source system corporation has fax numbers\");\n+                throw new GedcomWriterVersionDataMismatchException(\n+                        \"Gedcom version is 5.5, but source system corporation has emails\");\n+                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n+                        + \" has www urls\");\n+                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n+                        + \" has fax numbers\");\n+                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n+                        + \" has emails\");\n+                        throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n+                                + \" has emails on an event\");\n+                        throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n+                                + \" has a FACT attribute\");\n+                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Submitter \" + s.getXref()\n+                        + \" has www urls\");\n+                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Submitter \" + s.getXref()\n+                        + \" has fax numbers\");\n+                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Submitter \" + s.getXref()\n+                        + \" has emails\");\n+                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Repository \" + r.getXref()\n+                        + \" has www urls\");\n+                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Repository \" + r.getXref()\n+                        + \" has fax numbers\");\n+                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Repository \" + r.getXref()\n+                        + \" has emails\");\n+    private int constructNotificationCount = 0;\r\n+    private int constructionCancelAfter = Integer.MAX_VALUE;\r\n+    private int linesConstructed = 0;\r\n+    private int bytesWritten = 0;\r\n+    private GedcomWriter gw;\r\n+    private int fileNotificationCount = 0;\r\n+    private int fileCancelAfter = Integer.MAX_VALUE;\r\n+    @Override\r\n+    public void progressNotification(ConstructProgressEvent e) {\r\n+        constructNotificationCount++;\r\n+        linesConstructed = e.getLinesProcessed();\r\n+        if (constructNotificationCount >= constructionCancelAfter) {\r\n+            gw.cancel();\r\n+        }\r\n+    }\r\n+    @Override\r\n+    public void progressNotification(FileProgressEvent e) {\r\n+        fileNotificationCount++;\r\n+        bytesWritten = e.getBytesProcessed();\r\n+        if (fileNotificationCount > fileCancelAfter) {\r\n+            gw.cancel();\r\n+        }\r\n+    }\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test(expected = WriterCancelledException.class)\r\n+    public void testConstuctionCancellation() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-ascii.ged\");\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        constructionCancelAfter = 5;\r\n+        gw.write(new NullOutputStream());\r\n+    }\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test(expected = WriterCancelledException.class)\r\n+    public void testFileCancellation() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-ascii.ged\");\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        fileCancelAfter = 5;\r\n+        gw.write(new NullOutputStream());\r\n+    }\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationAnselCrlf() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-ansel.ged\");\r\n+        cleanUpGedcom(gp, Encoding.ANSEL);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CRLF);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new NullOutputStream());\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(42, fileNotificationCount);\r\n+        assertEquals(20022, linesConstructed);\r\n+        assertEquals(621821, bytesWritten);\r\n+    }\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationAnselCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-ansel.ged\");\r\n+        cleanUpGedcom(gp, Encoding.ANSEL);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new NullOutputStream());\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(42, fileNotificationCount);\r\n+        assertEquals(20022, linesConstructed);\r\n+        assertEquals(601799, bytesWritten);\r\n+    }\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationAsciiCrlf() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-ascii.ged\");\r\n+        cleanUpGedcom(gp, Encoding.ASCII);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CRLF);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new NullOutputStream());\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(42, fileNotificationCount);\r\n+        assertEquals(20022, linesConstructed);\r\n+        assertEquals(621821, bytesWritten);\r\n+    }\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationAsciiCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-ascii.ged\");\r\n+        cleanUpGedcom(gp, Encoding.ASCII);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new NullOutputStream());\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(42, fileNotificationCount);\r\n+        assertEquals(20022, linesConstructed);\r\n+        assertEquals(601799, bytesWritten);\r\n+    }\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationUnicodeBigEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-unicode-bigendian.ged\");\r\n+        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CRLF);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new NullOutputStream());\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(42, fileNotificationCount);\r\n+        assertEquals(20022, linesConstructed);\r\n+        assertEquals(1243670, bytesWritten);\r\n+    }\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationUnicodeBigEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-unicode-bigendian.ged\");\r\n+        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new NullOutputStream());\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(42, fileNotificationCount);\r\n+        assertEquals(20022, linesConstructed);\r\n+        assertEquals(1203626, bytesWritten);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationUnicodeLittleEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-unicode-littleendian.ged\");\r\n+        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CRLF);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(42, fileNotificationCount);\r\n+        assertEquals(20022, linesConstructed);\r\n+        assertEquals(1243676, bytesWritten);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationUnicodeLittleEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis-unicode-littleendian.ged\");\r\n+        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(42, fileNotificationCount);\r\n+        assertEquals(20022, linesConstructed);\r\n+        assertEquals(1203632, bytesWritten);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationUtf8Crlf() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis.ged\");\r\n+        cleanUpGedcom(gp, Encoding.UTF_8);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CRLF);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new NullOutputStream());\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(41, fileNotificationCount);\r\n+        assertEquals(20019, linesConstructed);\r\n+        assertEquals(606208, bytesWritten);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"resource\")\r\n+    @Test\r\n+    public void testNoCancellationUtf8CrOnly() throws IOException, GedcomParserException, GedcomWriterException {\r\n+        GedcomParser gp = new GedcomParser();\r\n+        gp.load(\"sample/willis.ged\");\r\n+        cleanUpGedcom(gp, Encoding.UTF_8);\r\n+        gw = new GedcomWriter(gp.getGedcom());\r\n+        gw.setLineTerminator(LineTerminator.CR_ONLY);\r\n+        gw.setAutorepair(true);\r\n+        gw.registerConstructObserver(this);\r\n+        gw.registerFileObserver(this);\r\n+        try {\r\n+            gw.write(new NullOutputStream());\r\n+        } catch (GedcomWriterException e) {\r\n+            for (GedcomValidationFinding f : gw.getValidationFindings()) {\r\n+                System.out.println(f);\r\n+            }\r\n+            throw e;\r\n+        }\r\n+        assertEquals(40, constructNotificationCount);\r\n+        assertEquals(41, fileNotificationCount);\r\n+        assertEquals(20019, linesConstructed);\r\n+        assertEquals(581632, bytesWritten);\r\n+    }\r\n+\r\n+    private void cleanUpGedcom(GedcomParser gp, Encoding encoding) {\r\n+        CharacterSet characterSet = new CharacterSet();\r\n+        characterSet.setCharacterSetName(new StringWithCustomTags(encoding.getCharacterSetName()));\r\n+        gp.getGedcom().getHeader().setCharacterSet(characterSet);\r\n+        GedcomVersion gv = new GedcomVersion();\r\n+        gv.setVersionNumber(SupportedVersion.V5_5_1);\r\n+        gp.getGedcom().getHeader().setGedcomVersion(gv);\r\n+        for (Individual i : gp.getGedcom().getIndividuals().values()) {\r\n+            if (i.getEvents() != null) {\r\n+                for (AbstractEvent e : i.getEvents()) {\r\n+                    e.setDescription(null);\r\n+                }\r\n+            }\r\n+        }\r\n+        for (Family f : gp.getGedcom().getFamilies().values()) {\r\n+            if (f.getEvents() != null) {\r\n+                for (AbstractEvent e : f.getEvents()) {\r\n+                    e.setDescription(null);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/io/writer/AbstractEncodingSpecificWriter.java": "    protected LineTerminator terminator = LineTerminator.getDefaultLineTerminator();\n",
            "src/main/java/org/gedcom4j/io/writer/GedcomFileWriter.java": "    private LineTerminator terminator = LineTerminator.getDefaultLineTerminator();\n",
            "src/main/java/org/gedcom4j/io/writer/LineTerminator.java": "public enum LineTerminator {\n    LFCR;\n    public static LineTerminator getDefaultLineTerminator() {\n        String jvmLineTerm = System.getProperty(\"line.separator\");\n        if (Character.toString((char) 0x0D).equals(jvmLineTerm)) {\n            return LineTerminator.CR_ONLY;\n        } else if (Character.toString((char) 0x0A).equals(jvmLineTerm)) {\n            return LineTerminator.LF_ONLY;\n        } else if ((Character.toString((char) 0x0D) + Character.toString((char) 0x0A)).equals(jvmLineTerm)) {\n            return LineTerminator.CRLF;\n        } else if ((Character.toString((char) 0x0A) + Character.toString((char) 0x0D)).equals(jvmLineTerm)) {\n            return LineTerminator.LFCR;\n        }\n        return LineTerminator.CRLF;\n    }\n",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": "import org.gedcom4j.io.writer.LineTerminator;\n    private LineTerminator lineTerminator = LineTerminator.getDefaultLineTerminator();\n    public LineTerminator getLineTerminator() {\n        return lineTerminator;\n    }\n    public void setLineTerminator(LineTerminator lineTerminator) {\n        this.lineTerminator = lineTerminator;\n    }\n        if (!file.exists() && !file.getCanonicalFile().getParentFile().exists() && !file.getCanonicalFile().getParentFile().mkdirs()\n                && !file.createNewFile()) {\n            gfw.setTerminator(getLineTerminator());\n            throw new GedcomWriterVersionDataMismatchException(\n                    \"Gedcom version is 5.5, but has multi-line copyright data in header\");\n        if (writeFrom.getHeader().getCharacterSet() != null && writeFrom.getHeader().getCharacterSet().getCharacterSetName() != null\n                && \"UTF-8\".equals(writeFrom.getHeader().getCharacterSet().getCharacterSetName().getValue())) {\n                throw new GedcomWriterVersionDataMismatchException(\n                        \"Gedcom version is 5.5, but source system corporation has www urls\");\n                throw new GedcomWriterVersionDataMismatchException(\n                        \"Gedcom version is 5.5, but source system corporation has fax numbers\");\n                throw new GedcomWriterVersionDataMismatchException(\n                        \"Gedcom version is 5.5, but source system corporation has emails\");\n                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n                        + \" has www urls\");\n                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n                        + \" has fax numbers\");\n                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n                        + \" has emails\");\n                        throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n                                + \" has emails on an event\");\n                        throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n                                + \" has a FACT attribute\");\n                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Submitter \" + s.getXref()\n                        + \" has www urls\");\n                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Submitter \" + s.getXref()\n                        + \" has fax numbers\");\n                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Submitter \" + s.getXref()\n                        + \" has emails\");\n                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Repository \" + r.getXref()\n                        + \" has www urls\");\n                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Repository \" + r.getXref()\n                        + \" has fax numbers\");\n                throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Repository \" + r.getXref()\n                        + \" has emails\");\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": "import org.gedcom4j.io.writer.LineTerminator;\n    private int constructNotificationCount = 0;\n    private int constructionCancelAfter = Integer.MAX_VALUE;\n    private int linesConstructed = 0;\n    private int bytesWritten = 0;\n    private GedcomWriter gw;\n    private int fileNotificationCount = 0;\n    private int fileCancelAfter = Integer.MAX_VALUE;\n    @Override\n    public void progressNotification(ConstructProgressEvent e) {\n        constructNotificationCount++;\n        linesConstructed = e.getLinesProcessed();\n        if (constructNotificationCount >= constructionCancelAfter) {\n            gw.cancel();\n        }\n    }\n    @Override\n    public void progressNotification(FileProgressEvent e) {\n        fileNotificationCount++;\n        bytesWritten = e.getBytesProcessed();\n        if (fileNotificationCount > fileCancelAfter) {\n            gw.cancel();\n        }\n    }\n    @SuppressWarnings(\"resource\")\n    @Test(expected = WriterCancelledException.class)\n    public void testConstuctionCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        constructionCancelAfter = 5;\n        gw.write(new NullOutputStream());\n    }\n    @SuppressWarnings(\"resource\")\n    @Test(expected = WriterCancelledException.class)\n    public void testFileCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        fileCancelAfter = 5;\n        gw.write(new NullOutputStream());\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAnselCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ansel.ged\");\n        cleanUpGedcom(gp, Encoding.ANSEL);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(621821, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAnselCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ansel.ged\");\n        cleanUpGedcom(gp, Encoding.ANSEL);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(601799, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAsciiCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(621821, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAsciiCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(601799, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeBigEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-bigendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1243670, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeBigEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-bigendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1203626, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeLittleEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-littleendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1243676, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeLittleEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-littleendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_LITTLE_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new FileOutputStream(\"tmp/foo-unicode-little-endian.ged\"));\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1203632, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUtf8Crlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis.ged\");\n        cleanUpGedcom(gp, Encoding.UTF_8);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(41, fileNotificationCount);\n        assertEquals(20019, linesConstructed);\n        assertEquals(606208, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUtf8CrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis.ged\");\n        cleanUpGedcom(gp, Encoding.UTF_8);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(41, fileNotificationCount);\n        assertEquals(20019, linesConstructed);\n        assertEquals(581632, bytesWritten);\n    }\n    private void cleanUpGedcom(GedcomParser gp, Encoding encoding) {\n        CharacterSet characterSet = new CharacterSet();\n        characterSet.setCharacterSetName(new StringWithCustomTags(encoding.getCharacterSetName()));\n        gp.getGedcom().getHeader().setCharacterSet(characterSet);\n        GedcomVersion gv = new GedcomVersion();\n        gv.setVersionNumber(SupportedVersion.V5_5_1);\n        gp.getGedcom().getHeader().setGedcomVersion(gv);\n        for (Individual i : gp.getGedcom().getIndividuals().values()) {\n            if (i.getEvents() != null) {\n                for (AbstractEvent e : i.getEvents()) {\n                    e.setDescription(null);\n                }\n            }\n        }\n        for (Family f : gp.getGedcom().getFamilies().values()) {\n            if (f.getEvents() != null) {\n                for (AbstractEvent e : f.getEvents()) {\n                    e.setDescription(null);\n                }\n            }\n        }\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/writer/AbstractEncodingSpecificWriter.java": [
                52
            ],
            "src/main/java/org/gedcom4j/io/writer/GedcomFileWriter.java": [
                70
            ],
            "src/main/java/org/gedcom4j/io/writer/LineTerminator.java": [
                34,
                50,
                57,
                58,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                68,
                69,
                70,
                71
            ],
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": [
                44,
                149,
                194,
                195,
                196,
                319,
                320,
                321,
                386,
                387,
                413,
                538,
                539,
                541,
                542,
                548,
                549,
                552,
                553,
                556,
                557,
                562,
                563,
                566,
                567,
                570,
                571,
                584,
                585,
                592,
                593,
                608,
                609,
                612,
                613,
                616,
                617,
                622,
                623,
                626,
                627,
                630,
                631
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": [
                40,
                59,
                64,
                69,
                74,
                79,
                84,
                89,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                325,
                326,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                355,
                356,
                357,
                358,
                359,
                360,
                361,
                373,
                374,
                375,
                376,
                377,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                385,
                386,
                387,
                388,
                389,
                390,
                391,
                392,
                393,
                394,
                395,
                396,
                408,
                409,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                418,
                419,
                420,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                428,
                429,
                430,
                431,
                443,
                444,
                445,
                446,
                447,
                448,
                449,
                450,
                451,
                452,
                453,
                454,
                455,
                456,
                457,
                458,
                459,
                460,
                461,
                462,
                463,
                464,
                465,
                466,
                478,
                479,
                480,
                481,
                482,
                483,
                484,
                485,
                486,
                487,
                488,
                489,
                490,
                491,
                492,
                493,
                494,
                495,
                496,
                497,
                498,
                499,
                500,
                501,
                511,
                512,
                513,
                514,
                515,
                516,
                517,
                518,
                519,
                520,
                521,
                522,
                523,
                524,
                525,
                526,
                527,
                528,
                529,
                530,
                531,
                532
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/io/writer/AbstractEncodingSpecificWriter.java": "    protected LineTerminator terminator = LineTerminator.getDefaultLineTerminator();\n",
            "src/main/java/org/gedcom4j/io/writer/LineTerminator.java": "public enum LineTerminator {\n    LFCR;\n",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": "    public LineTerminator getLineTerminator() {\n    }\n        }\n        constructObservers.add(new WeakReference<ConstructProgressListener>(observer));\n                fileObservers.remove(observerRef);\n    public void write(File file) throws IOException, GedcomWriterException {\n        writeFrom.getHeader().setFileName(new StringWithCustomTags(file.getName()));\n                line.append(\" \");\n                if (st.getId() != null && st.getId().trim().length() > 0) {\n        if (writeFrom.getHeader().getGedcomVersion() == null) {\n            writeFrom.getHeader().setGedcomVersion(new GedcomVersion());\n        }\n            throw new GedcomWriterVersionDataMismatchException(\n        if (writeFrom.getHeader().getCharacterSet() != null && writeFrom.getHeader().getCharacterSet().getCharacterSetName() != null\n            }\n            if (i.getWwwUrls() != null && !i.getWwwUrls().isEmpty()) {\n                        throw new GedcomWriterVersionDataMismatchException(\"Gedcom version is 5.5, but Individual \" + i.getXref()\n                    if (e.getFaxNumbers() != null && !e.getFaxNumbers().isEmpty()) {\n                    }\n                }\n                for (IndividualAttribute a : i.getAttributes()) {\n                                + \" has a FACT attribute\");\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": "    private int constructNotificationCount = 0;\n    private int constructionCancelAfter = Integer.MAX_VALUE;\n    private int linesConstructed = 0;\n    private int bytesWritten = 0;\n    private GedcomWriter gw;\n    private int fileNotificationCount = 0;\n    private int fileCancelAfter = Integer.MAX_VALUE;\n    @Override\n    public void progressNotification(ConstructProgressEvent e) {\n        constructNotificationCount++;\n        linesConstructed = e.getLinesProcessed();\n        if (constructNotificationCount >= constructionCancelAfter) {\n            gw.cancel();\n        }\n    }\n    @Override\n    public void progressNotification(FileProgressEvent e) {\n        fileNotificationCount++;\n        bytesWritten = e.getBytesProcessed();\n        if (fileNotificationCount > fileCancelAfter) {\n            gw.cancel();\n        }\n    }\n    @SuppressWarnings(\"resource\")\n    @Test(expected = WriterCancelledException.class)\n    public void testConstuctionCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        constructionCancelAfter = 5;\n        gw.write(new NullOutputStream());\n    }\n    @SuppressWarnings(\"resource\")\n    @Test(expected = WriterCancelledException.class)\n    public void testFileCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        fileCancelAfter = 5;\n        gw.write(new NullOutputStream());\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAnselCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ansel.ged\");\n        cleanUpGedcom(gp, Encoding.ANSEL);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(621821, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAnselCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ansel.ged\");\n        cleanUpGedcom(gp, Encoding.ANSEL);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(601799, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAsciiCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(621821, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationAsciiCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(601799, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeBigEndianCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-bigendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1243670, bytesWritten);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeBigEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-unicode-bigendian.ged\");\n        cleanUpGedcom(gp, Encoding.UNICODE_BIG_ENDIAN);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/writer/AbstractEncodingSpecificWriter.java": [
                52
            ],
            "src/main/java/org/gedcom4j/io/writer/LineTerminator.java": [
                34,
                50
            ],
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": [
                194,
                196,
                348,
                349,
                363,
                381,
                383,
                484,
                485,
                515,
                518,
                524,
                538,
                541,
                554,
                561,
                576,
                579,
                582,
                587,
                590,
                593
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": [
                59,
                64,
                69,
                74,
                79,
                84,
                89,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                325,
                326,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                355,
                356,
                357,
                358,
                359
            ]
        }
    },
    {
        "commit": "190b0b52",
        "prev_commit": "a5913237",
        "changed_files": [
            "sample/RelationshipTestExtended.ged",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/main/java/org/gedcom4j/relationship/KinshipNameCalculator.java",
            "src/main/java/org/gedcom4j/relationship/package-info.java",
            "src/main/resources/gedcom4j_relationship_names.properties",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java",
            "src/test/java/org/gedcom4j/relationship/KinshipNameCalculatorTest.java",
            "src/test/java/org/gedcom4j/relationship/RelationshipCalculatorTest.java"
        ],
        "changed_files_num": 8,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/main/java/org/gedcom4j/relationship/KinshipNameCalculator.java",
            "src/main/java/org/gedcom4j/relationship/package-info.java",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java",
            "src/test/java/org/gedcom4j/relationship/KinshipNameCalculatorTest.java",
            "src/test/java/org/gedcom4j/relationship/RelationshipCalculatorTest.java"
        ],
        "changed_java_files_num": 6,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        if (descendant.equals(ancestor)) {\n+            return 0;\n+        }\n+        if (lookForAncestor(descendant, ancestor)) {\n+        throw new IllegalArgumentException(\"Ancestor/descendant relationship not found for \" + ancestor + \" and \" + descendant);\n+    private static final String DEFAULT_BUNDLE_PROPERTIES_NAME = \"gedcom4j_relationship_names\";\n+    private final ResourceBundle bundle;\n+    public KinshipNameCalculator() {\n+        bundle = ResourceBundle.getBundle(DEFAULT_BUNDLE_PROPERTIES_NAME);\n+    }\n+    public KinshipNameCalculator(Locale locale) {\n+        bundle = ResourceBundle.getBundle(DEFAULT_BUNDLE_PROPERTIES_NAME, locale);\n+    }\n+    public KinshipNameCalculator(String bundlePropertiesName) {\n+        bundle = ResourceBundle.getBundle(bundlePropertiesName);\n+    }\n+    public KinshipNameCalculator(String bundlePropertiesName, Locale locale) {\n+        bundle = ResourceBundle.getBundle(bundlePropertiesName, locale);\n+    }\n+    @SuppressWarnings(\"PMD.UseStringBufferForStringAppends\")\n+    public String getRelationshipName(Individual individual1, Individual individual2) {\n+        String result = lookupRelationshipName(individual1, individual2, false);\n+        if (result != null) {\n+            return reword(result);\n+        }\n+        for (Individual spouse : getSpousesOf(individual2)) {\n+            result = lookupRelationshipName(individual1, spouse, true);\n+            if (result != null) {\n+                return reword(result);\n+            }\n+        }\n+        for (Individual spouse : getSpousesOf(individual1)) {\n+            result = lookupRelationshipName(spouse, individual2, false);\n+            if (result != null) {\n+                result = (bundle.getString(\"spouse.prefix.\" + getSexCode(individual1)) + \" \" + result + \" \" + bundle.getString(\n+                        \"spouse.suffix.\" + getSexCode(individual1))).trim();\n+                return reword(result);\n+            }\n+        }\n+        for (Individual spouse1 : getSpousesOf(individual1)) {\n+            for (Individual spouse2 : getSpousesOf(individual2)) {\n+                result = lookupRelationshipName(spouse1, spouse2, true);\n+                if (result != null) {\n+                    result = (bundle.getString(\"spouse.prefix.\" + getSexCode(individual1)) + \" \" + result + \" \" + bundle.getString(\n+                            \"spouse.suffix.\" + getSexCode(individual1))).trim();\n+                    return reword(result);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+    public String getSexCode(Individual individual) {\n+        String individual2Sex = \"u\"; // default to unknown, then check what we actually have\n+        if (individual.getSex() != null && individual.getSex().getValue() != null && !individual.getSex().getValue().trim()\n+                .isEmpty()) {\n+            individual2Sex = individual.getSex().getValue().trim().substring(0, 1).toLowerCase(Locale.US);\n+        }\n+        return individual2Sex;\n+    }\n+    private Set<Individual> getSpousesOf(Individual individual) {\n+        Set<Individual> result = new HashSet<>();\n+        if (individual.getFamiliesWhereSpouse() != null) {\n+            for (FamilySpouse fams : individual.getFamiliesWhereSpouse()) {\n+                Family f = fams.getFamily();\n+                if (f == null) {\n+                    continue;\n+                }\n+                if (f.getHusband() != null && individual.equals(f.getHusband().getIndividual()) && f.getWife() != null && f\n+                        .getWife().getIndividual() != null) {\n+                    result.add(f.getWife().getIndividual());\n+                } else if (f.getWife() != null && individual.equals(f.getWife().getIndividual()) && f.getHusband() != null && f\n+                        .getHusband().getIndividual() != null) {\n+                    result.add(f.getHusband().getIndividual());\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+    private String lookupRelationshipName(Individual individual1, Individual individual2, boolean individual2IsSpouse) {\n+        if (individual1.equals(individual2)) {\n+            return bundle.getString(\"relationship.0.0.\" + getSexCode(individual2));\n+        }\n+        Individual nca;\n+        Set<Individual> spousesOfIndividual2 = getSpousesOf(individual2);\n+        AncestryCalculator ac = new AncestryCalculator();\n+        if (individual1.getAncestors().contains(individual2)) {\n+            nca = individual2;\n+        } else if (individual2.getAncestors().contains(individual1)) {\n+            nca = individual1;\n+        } else if (spousesOfIndividual2.contains(individual1)) {\n+            return bundle.getString(\"relationship.0.0.\" + getSexCode(individual2) + \".spouse\");\n+        } else {\n+            Set<Individual> lcas = ac.getLowestCommonAncestors(individual1, individual2);\n+            if (lcas.isEmpty()) {\n+                return null;\n+            }\n+            nca = lcas.iterator().next();\n+        }\n+        if (nca == null) {\n+            return null;\n+        }\n+        int gensFrom1toNca = ac.getGenerationCount(individual1, nca);\n+        int gensFrom2toNca = ac.getGenerationCount(individual2, nca);\n+        StringBuilder propertyName = new StringBuilder(\"relationship.\");\n+        propertyName.append(gensFrom1toNca);\n+        propertyName.append(\".\");\n+        propertyName.append(gensFrom2toNca);\n+        propertyName.append(\".\");\n+        propertyName.append(getSexCode(individual2));\n+        if (individual2IsSpouse) {\n+            propertyName.append(\".spouse\");\n+        }\n+        return bundle.getString(propertyName.toString());\n+    }\n+    private String reword(String s) {\n+        String result = s;\n+        Enumeration<String> keys = bundle.getKeys();\n+        while (keys.hasMoreElements()) {\n+            String k = keys.nextElement();\n+            if (!k.startsWith(\"rewording.\")) {\n+                continue;\n+            }\n+            String[] terms = bundle.getString(k).split(\"\\\\|\");\n+            result = result.replace(terms[0], terms[1]);\n+        }\n+        return result;\n+    }\n+    @Test\n+    public void testSamePerson() {\n+        Individual sally = getPerson(\"Struthers\", \"Sally\");\n+        assertNotNull(sally);\n+        assertEquals(0, anc.getGenerationCount(sally, sally));\n+    }\n+    private Finder finder;\n+    KinshipNameCalculator knc = new KinshipNameCalculator(Locale.US);\n+    @Before\n+    public void setUp() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/RelationshipTestExtended.ged\");\n+        assertTrue(gp.getErrors().isEmpty());\n+        assertTrue(gp.getWarnings().isEmpty());\n+        final Gedcom g = gp.getGedcom();\n+        assertNotNull(g);\n+        assertEquals(\"There are supposed to be 70 people in the gedcom - are you using the right file/file version?\", 70, g\n+                .getIndividuals().size());\n+        assertEquals(\"There are supposed to be 31 families in the gedcom - are you using the right file/file version?\", 31, g\n+                .getFamilies().size());\n+        finder = new Finder(g);\n+    }\n+    @Test\n+    public void testAuntsUnclesNiecesNephews() {\n+        Individual alex = getPerson(\"Zucco\", \"Alex\");\n+        Individual betsy = getPerson(\"Zucco\", \"Betsy\");\n+        Individual theresa = getPerson(\"Andrews\", \"Theresa\");\n+        Individual julie = getPerson(\"Zucco\", \"Julie\");\n+        Individual henry = getPerson(\"Zucco\", \"Henry\");\n+        assertEquals(\"Aunt\", knc.getRelationshipName(alex, theresa));\n+        assertEquals(\"Nephew\", knc.getRelationshipName(theresa, alex));\n+        assertEquals(\"Aunt\", knc.getRelationshipName(betsy, theresa));\n+        assertEquals(\"Niece\", knc.getRelationshipName(theresa, betsy));\n+        assertEquals(\"Aunt\", knc.getRelationshipName(alex, julie));\n+        assertEquals(\"Nephew\", knc.getRelationshipName(julie, alex));\n+        assertEquals(\"Aunt\", knc.getRelationshipName(betsy, julie));\n+        assertEquals(\"Niece\", knc.getRelationshipName(julie, betsy));\n+        assertEquals(\"Uncle\", knc.getRelationshipName(alex, henry));\n+        assertEquals(\"Nephew\", knc.getRelationshipName(henry, alex));\n+        assertEquals(\"Uncle\", knc.getRelationshipName(betsy, henry));\n+        assertEquals(\"Niece\", knc.getRelationshipName(henry, betsy));\n+    }\n+    @Test\n+    public void testCousins() {\n+        Individual alex = getPerson(\"Zucco\", \"Alex\");\n+        Individual olivia = getPerson(\"Zucco\", \"Olivia\");\n+        Individual peter = getPerson(\"Zucco\", \"Peter\");\n+        Individual richard = getPerson(\"Zucco\", \"Richard\");\n+        Individual edward = getPerson(\"Knight\", \"Edward\");\n+        Individual jerome = getPerson(\"Knight\", \"Jerome\");\n+        Individual isaac = getPerson(\"Knight\", \"Isaac\");\n+        assertEquals(\"1st Cousin\", knc.getRelationshipName(alex, olivia));\n+        assertEquals(\"1st Cousin\", knc.getRelationshipName(olivia, alex));\n+        assertEquals(\"1st Cousin\", knc.getRelationshipName(alex, peter));\n+        assertEquals(\"1st Cousin\", knc.getRelationshipName(peter, alex));\n+        assertEquals(\"1st Cousin 1 time removed\", knc.getRelationshipName(alex, richard));\n+        assertEquals(\"1st Cousin 1 time removed\", knc.getRelationshipName(richard, alex));\n+        assertEquals(\"1st Cousin 3 times removed\", knc.getRelationshipName(alex, edward));\n+        assertEquals(\"1st Cousin 3 times removed\", knc.getRelationshipName(edward, alex));\n+        assertEquals(\"2nd Cousin 2 times removed\", knc.getRelationshipName(alex, jerome));\n+        assertEquals(\"2nd Cousin 2 times removed\", knc.getRelationshipName(jerome, alex));\n+        assertEquals(\"3rd Cousin 1 time removed\", knc.getRelationshipName(alex, isaac));\n+        assertEquals(\"3rd Cousin 1 time removed\", knc.getRelationshipName(isaac, alex));\n+    }\n+    @Test\n+    public void testGrandparents() {\n+        Individual alex = getPerson(\"Zucco\", \"Alex\");\n+        Individual betsy = getPerson(\"Zucco\", \"Betsy\");\n+        Individual gpa1 = getPerson(\"Zucco\", \"George\");\n+        Individual gma1 = getPerson(\"Smith\", \"Hannah\");\n+        Individual gpa2 = getPerson(\"Andrews\", \"Robert\");\n+        Individual gma2 = getPerson(\"Jackson\", \"Sylvia\");\n+        assertEquals(\"Grandfather\", knc.getRelationshipName(alex, gpa1));\n+        assertEquals(\"Grandson\", knc.getRelationshipName(gpa1, alex));\n+        assertEquals(\"Grandfather\", knc.getRelationshipName(alex, gpa2));\n+        assertEquals(\"Grandson\", knc.getRelationshipName(gpa2, alex));\n+        assertEquals(\"Grandmother\", knc.getRelationshipName(alex, gma1));\n+        assertEquals(\"Grandson\", knc.getRelationshipName(gma1, alex));\n+        assertEquals(\"Grandmother\", knc.getRelationshipName(alex, gma2));\n+        assertEquals(\"Grandson\", knc.getRelationshipName(gma2, alex));\n+        assertEquals(\"Grandfather\", knc.getRelationshipName(betsy, gpa1));\n+        assertEquals(\"Granddaughter\", knc.getRelationshipName(gpa1, betsy));\n+        assertEquals(\"Grandfather\", knc.getRelationshipName(betsy, gpa2));\n+        assertEquals(\"Granddaughter\", knc.getRelationshipName(gpa2, betsy));\n+        assertEquals(\"Grandmother\", knc.getRelationshipName(betsy, gma1));\n+        assertEquals(\"Granddaughter\", knc.getRelationshipName(gma1, betsy));\n+        assertEquals(\"Grandmother\", knc.getRelationshipName(betsy, gma2));\n+        assertEquals(\"Granddaughter\", knc.getRelationshipName(gma2, betsy));\n+        assertEquals(\"Wife\", knc.getRelationshipName(gpa1, gma1));\n+        assertEquals(\"Husband\", knc.getRelationshipName(gma1, gpa1));\n+    }\n+    @Test\n+    public void testGreatAuntsUnclesNiecesNephews() {\n+        Individual alex = getPerson(\"Zucco\", \"Alex\");\n+        Individual betsy = getPerson(\"Zucco\", \"Betsy\");\n+        Individual nancy = getPerson(\"Andrews\", \"Nancy\");\n+        Individual sammy = getPerson(\"Struthers\", \"Sammy\");\n+        Individual ulysses = getPerson(\"Knight\", \"Ulysses\");\n+        Individual robert = getPerson(\"Knight\", \"Robert\");\n+        assertEquals(\"Great-Uncle\", knc.getRelationshipName(nancy, sammy));\n+        assertEquals(\"Great-Niece\", knc.getRelationshipName(sammy, nancy));\n+        assertEquals(\"Great-Great-Uncle\", knc.getRelationshipName(alex, sammy));\n+        assertEquals(\"Great-Great-Nephew\", knc.getRelationshipName(sammy, alex));\n+        assertEquals(\"Great-Great-Uncle\", knc.getRelationshipName(betsy, sammy));\n+        assertEquals(\"Great-Great-Niece\", knc.getRelationshipName(sammy, betsy));\n+        assertEquals(\"3rd Great-Aunt/Uncle\", knc.getRelationshipName(alex, ulysses));\n+        assertEquals(\"3rd Great-Nephew\", knc.getRelationshipName(ulysses, alex));\n+        assertEquals(\"3rd Great-Aunt/Uncle\", knc.getRelationshipName(betsy, ulysses));\n+        assertEquals(\"3rd Great-Niece\", knc.getRelationshipName(ulysses, betsy));\n+        assertEquals(\"3rd Great-Uncle\", knc.getRelationshipName(alex, robert));\n+        assertEquals(\"3rd Great-Nephew\", knc.getRelationshipName(robert, alex));\n+        assertEquals(\"3rd Great-Uncle\", knc.getRelationshipName(betsy, robert));\n+        assertEquals(\"3rd Great-Niece\", knc.getRelationshipName(robert, betsy));\n+    }\n+    @Test\n+    public void testGreatGrandparents() {\n+        Individual alex = getPerson(\"Zucco\", \"Alex\");\n+        Individual betsy = getPerson(\"Zucco\", \"Betsy\");\n+        Individual ggpa1 = getPerson(\"Zucco\", \"Fred\");\n+        Individual ggpa2 = getPerson(\"Jackson\", \"Terrence\");\n+        Individual ggpa3 = getPerson(\"Andrews\", \"James\");\n+        Individual ggma1 = getPerson(\"Klinghoffer\", \"Patty\");\n+        Individual ggma2 = getPerson(\"Struthers\", \"Sally\");\n+        assertEquals(\"Great-Grandfather\", knc.getRelationshipName(alex, ggpa1));\n+        assertEquals(\"Great-Grandson\", knc.getRelationshipName(ggpa1, alex));\n+        assertEquals(\"Great-Grandfather\", knc.getRelationshipName(alex, ggpa2));\n+        assertEquals(\"Great-Grandson\", knc.getRelationshipName(ggpa2, alex));\n+        assertEquals(\"Great-Grandfather\", knc.getRelationshipName(alex, ggpa3));\n+        assertEquals(\"Great-Grandson\", knc.getRelationshipName(ggpa3, alex));\n+        assertEquals(\"Great-Grandmother\", knc.getRelationshipName(alex, ggma1));\n+        assertEquals(\"Great-Grandson\", knc.getRelationshipName(ggma1, alex));\n+        assertEquals(\"Great-Grandmother\", knc.getRelationshipName(alex, ggma2));\n+        assertEquals(\"Great-Grandson\", knc.getRelationshipName(ggma2, alex));\n+        assertEquals(\"Great-Grandfather\", knc.getRelationshipName(betsy, ggpa1));\n+        assertEquals(\"Great-Granddaughter\", knc.getRelationshipName(ggpa1, betsy));\n+        assertEquals(\"Great-Grandfather\", knc.getRelationshipName(betsy, ggpa2));\n+        assertEquals(\"Great-Granddaughter\", knc.getRelationshipName(ggpa2, betsy));\n+        assertEquals(\"Great-Grandfather\", knc.getRelationshipName(betsy, ggpa3));\n+        assertEquals(\"Great-Granddaughter\", knc.getRelationshipName(ggpa3, betsy));\n+        assertEquals(\"Great-Grandmother\", knc.getRelationshipName(betsy, ggma1));\n+        assertEquals(\"Great-Granddaughter\", knc.getRelationshipName(ggma1, betsy));\n+        assertEquals(\"Great-Grandmother\", knc.getRelationshipName(betsy, ggma2));\n+        assertEquals(\"Great-Granddaughter\", knc.getRelationshipName(ggma2, betsy));\n+        assertEquals(\"Wife\", knc.getRelationshipName(ggpa3, ggma2));\n+        assertEquals(\"Husband\", knc.getRelationshipName(ggma2, ggpa3));\n+    }\n+    @Test\n+    public void testGreatGreatGrandparents() {\n+        Individual alex = getPerson(\"Zucco\", \"Alex\");\n+        Individual betsy = getPerson(\"Zucco\", \"Betsy\");\n+        Individual gggpa1 = getPerson(\"Struthers\", \"Steven\");\n+        Individual gggpa2 = getPerson(\"Jackson\", \"Ulysses\");\n+        Individual gggma1 = getPerson(\"Wood\", \"Abigail\");\n+        Individual gggma2 = getPerson(\"Knight\", \"Gladys\");\n+        assertEquals(\"Great-Great-Grandfather\", knc.getRelationshipName(alex, gggpa1));\n+        assertEquals(\"Great-Great-Grandson\", knc.getRelationshipName(gggpa1, alex));\n+        assertEquals(\"Great-Great-Grandfather\", knc.getRelationshipName(alex, gggpa2));\n+        assertEquals(\"Great-Great-Grandson\", knc.getRelationshipName(gggpa2, alex));\n+        assertEquals(\"Great-Great-Grandmother\", knc.getRelationshipName(alex, gggma1));\n+        assertEquals(\"Great-Great-Grandson\", knc.getRelationshipName(gggma1, alex));\n+        assertEquals(\"Great-Great-Grandmother\", knc.getRelationshipName(alex, gggma2));\n+        assertEquals(\"Great-Great-Grandson\", knc.getRelationshipName(gggma2, alex));\n+        assertEquals(\"Great-Great-Grandfather\", knc.getRelationshipName(betsy, gggpa1));\n+        assertEquals(\"Great-Great-Granddaughter\", knc.getRelationshipName(gggpa1, betsy));\n+        assertEquals(\"Great-Great-Grandfather\", knc.getRelationshipName(betsy, gggpa2));\n+        assertEquals(\"Great-Great-Granddaughter\", knc.getRelationshipName(gggpa2, betsy));\n+        assertEquals(\"Great-Great-Grandmother\", knc.getRelationshipName(betsy, gggma1));\n+        assertEquals(\"Great-Great-Granddaughter\", knc.getRelationshipName(gggma1, betsy));\n+        assertEquals(\"Great-Great-Grandmother\", knc.getRelationshipName(betsy, gggma2));\n+        assertEquals(\"Great-Great-Granddaughter\", knc.getRelationshipName(gggma2, betsy));\n+        assertEquals(\"Wife\", knc.getRelationshipName(gggpa1, gggma2));\n+        assertEquals(\"Husband\", knc.getRelationshipName(gggma2, gggpa1));\n+    }\n+    @Test\n+    public void testImmediateFamily() {\n+        Individual alex = getPerson(\"Zucco\", \"Alex\");\n+        Individual dad = getPerson(\"Zucco\", \"Michael\");\n+        Individual mom = getPerson(\"Andrews\", \"Nancy\");\n+        Individual bro = getPerson(\"Zucco\", \"Charlie\");\n+        Individual sis = getPerson(\"Zucco\", \"Betsy\");\n+        assertEquals(\"Father\", knc.getRelationshipName(alex, dad));\n+        assertEquals(\"Son\", knc.getRelationshipName(dad, alex));\n+        assertEquals(\"Mother\", knc.getRelationshipName(alex, mom));\n+        assertEquals(\"Son\", knc.getRelationshipName(mom, alex));\n+        assertEquals(\"Brother\", knc.getRelationshipName(alex, bro));\n+        assertEquals(\"Brother\", knc.getRelationshipName(bro, alex));\n+        assertEquals(\"Sister\", knc.getRelationshipName(alex, sis));\n+        assertEquals(\"Brother\", knc.getRelationshipName(sis, alex));\n+        assertEquals(\"Wife\", knc.getRelationshipName(dad, mom));\n+        assertEquals(\"Husband\", knc.getRelationshipName(mom, dad));\n+        assertEquals(\"Father\", knc.getRelationshipName(bro, dad));\n+        assertEquals(\"Son\", knc.getRelationshipName(dad, bro));\n+        assertEquals(\"Mother\", knc.getRelationshipName(bro, mom));\n+        assertEquals(\"Son\", knc.getRelationshipName(mom, bro));\n+        assertEquals(\"Father\", knc.getRelationshipName(sis, dad));\n+        assertEquals(\"Daughter\", knc.getRelationshipName(dad, sis));\n+        assertEquals(\"Mother\", knc.getRelationshipName(sis, mom));\n+        assertEquals(\"Daughter\", knc.getRelationshipName(mom, sis));\n+    }\n+    @Test\n+    public void testRelatedByMarriage() {\n+        Individual alex = getPerson(\"Zucco\", \"Alex\");\n+        Individual michael = getPerson(\"Zucco\", \"Michael\");\n+        Individual nancy = getPerson(\"Andrews\", \"Nancy\");\n+        Individual roberta = getPerson(\"King\", \"Roberta\");\n+        Individual christina = getPerson(\"Mathers\", \"Christina\");\n+        Individual henrietta = getPerson(\"Holcomb\", \"Henrietta\");\n+        Individual denise = getPerson(\"Polanski\", \"Denise\");\n+        Individual quincy = getPerson(\"Queen\", \"Quincy\");\n+        Individual elizabeth = getPerson(\"Queen\", \"Elizabeth\");\n+        Individual zoe = getPerson(\"Olds\", \"Zoe\");\n+        Individual peter = getPerson(\"Polanski\", \"Peter\");\n+        assertEquals(\"Mother-in-Law\", knc.getRelationshipName(alex, zoe));\n+        assertEquals(\"Son-in-Law\", knc.getRelationshipName(zoe, alex));\n+        assertEquals(\"Father-in-Law\", knc.getRelationshipName(alex, peter));\n+        assertEquals(\"Son-in-Law\", knc.getRelationshipName(peter, alex));\n+        assertEquals(\"Mother-in-Law\", knc.getRelationshipName(denise, nancy));\n+        assertEquals(\"Daughter-in-Law\", knc.getRelationshipName(nancy, denise));\n+        assertEquals(\"Father-in-Law\", knc.getRelationshipName(denise, michael));\n+        assertEquals(\"Daughter-in-Law\", knc.getRelationshipName(michael, denise));\n+        assertEquals(\"Sister-in-Law\", knc.getRelationshipName(alex, elizabeth));\n+        assertEquals(\"Brother-in-Law\", knc.getRelationshipName(elizabeth, alex));\n+        assertEquals(\"3rd Great-Aunt\", knc.getRelationshipName(alex, roberta));\n+        assertEquals(\"Husband's 3rd Great-Nephew\", knc.getRelationshipName(roberta, alex));\n+        assertEquals(\"1st Cousin 2 times removed's Wife\", knc.getRelationshipName(alex, christina));\n+        assertEquals(\"Husband's 1st Cousin 2 times removed\", knc.getRelationshipName(christina, alex));\n+        assertEquals(\"Aunt\", knc.getRelationshipName(alex, henrietta));\n+        assertEquals(\"Husband's Nephew\", knc.getRelationshipName(henrietta, alex));\n+        assertEquals(\"Wife\", knc.getRelationshipName(alex, denise));\n+        assertEquals(\"Husband\", knc.getRelationshipName(denise, alex));\n+        assertEquals(\"3rd Cousin 1 time removed's Husband\", knc.getRelationshipName(alex, quincy));\n+        assertEquals(\"Wife's 3rd Cousin 1 time removed\", knc.getRelationshipName(quincy, alex));\n+    }\n+    @Test\n+    public void testSelf() {\n+        Individual alex = getPerson(\"Zucco\", \"Alex\");\n+        assertEquals(\"Self\", knc.getRelationshipName(alex, alex));\n+    }\n+    private Individual getPerson(String surname, String givenName) {\n+        Individual result = finder.findByName(surname, givenName).get(0);\n+        assertNotNull(\"Couldn't find \" + givenName + \" \" + surname + \" by name in the gedcom\", result);\n+        return result;\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "            return genCount;\n        }\n        throw new IllegalArgumentException(\"Ancestor/descendant relationship not found for \" + ancestor + \" and  \" + descendant);\n    }\n",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": "        Individual sally = getPerson(\"Struthers\", \"Sally\");\n        Individual james = getPerson(\"Andrews\", \"James\");\n        assertTrue(\"Sally is a common ancestor (Robert's mom and Theresa's grandmother)\", lowestCommonAncestors.contains(sally));\n        assertTrue(\"James is a common ancestor (Robert's dad and Theresa's grandfather)\", lowestCommonAncestors.contains(james));\n        assertFalse(\"Steven Struthers (Robert's grandfather) is a common ancestor, but not a LOWEST common ancestor\",\n                lowestCommonAncestors.contains(getPerson(\"Struthers\", \"Steven\")));\n        assertFalse(\"Gladys Knight (Robert's grandmother) is a common ancestor, but not a LOWEST common ancestor\",\n                lowestCommonAncestors.contains(getPerson(\"Knight\", \"Gladys\")));\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                101,
                102,
                103,
                104
            ],
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": [
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                324,
                325
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "            return genCount;\n    }\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                101,
                104
            ]
        }
    },
    {
        "commit": "c459a292",
        "prev_commit": "7693c807",
        "changed_files": [
            "pom.xml",
            "src/main/java/org/gedcom4j/io/reader/AbstractEncodingSpecificReader.java",
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java",
            "src/main/java/org/gedcom4j/model/AbstractNotesElement.java",
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java",
            "src/main/java/org/gedcom4j/writer/SubmissionEmitter.java",
            "src/test/java/org/gedcom4j/comparators/IndividualByEventDateLastNameFirstNameComparatorTest.java",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java",
            "src/test/java/org/gedcom4j/model/StringTreeTest.java",
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java",
            "src/test/java/org/gedcom4j/parser/Issue32Test.java",
            "src/test/java/org/gedcom4j/parser/Issue87Test.java",
            "src/test/java/org/gedcom4j/parser/ParserProgressAndCancellationTest.java",
            "src/test/java/org/gedcom4j/writer/Issue89Test.java",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java"
        ],
        "changed_files_num": 20,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/io/reader/AbstractEncodingSpecificReader.java",
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java",
            "src/main/java/org/gedcom4j/model/AbstractNotesElement.java",
            "src/main/java/org/gedcom4j/parser/DateParser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java",
            "src/main/java/org/gedcom4j/writer/SubmissionEmitter.java",
            "src/test/java/org/gedcom4j/comparators/IndividualByEventDateLastNameFirstNameComparatorTest.java",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java",
            "src/test/java/org/gedcom4j/model/StringTreeTest.java",
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java",
            "src/test/java/org/gedcom4j/parser/Issue32Test.java",
            "src/test/java/org/gedcom4j/parser/Issue87Test.java",
            "src/test/java/org/gedcom4j/parser/ParserProgressAndCancellationTest.java",
            "src/test/java/org/gedcom4j/writer/Issue89Test.java",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java"
        ],
        "changed_java_files_num": 19,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t\t\t\t\t<excludes>\n+\t\t\t\t\t\t<exclude>src/main/java/org/gedcom4j/model/AbstractNotesElement.java</exclude>\n+\t\t\t\t\t\t<exclude>src/main/java/org/gedcom4j/model/HasCitations.java</exclude>\n+\t\t\t\t\t\t<exclude>src/main/java/org/gedcom4j/model/HasCustomTags.java</exclude>\n+\t\t\t\t\t\t<exclude>src/main/java/org/gedcom4j/model/HasNotes.java</exclude>\n+\t\t\t\t\t\t<exclude>src/main/java/org/gedcom4j/model/HasXref.java</exclude>\n+\t\t\t\t\t\t<exclude>src/main/java/org/gedcom4j/model/ModelElement.java</exclude>\n+\t\t\t\t\t</excludes>\n+                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \"\n+                            + \"Can't split automatically.\");\n+                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \"\n+                            + \"Can't split automatically.\");\n+            throw new GedcomParserException(\"Line \" + linesRead\n+                    + \" does not begin with a 1 or 2 digit number. Can't split automatically.\");\n+        return (lineBufferIdx >= 7 && Character.isDigit(lineBuffer[lineBufferIdx - 7]) && lineBuffer[lineBufferIdx - 6] == ' '\n+                && lineBuffer[lineBufferIdx - 5] == 'C' && lineBuffer[lineBufferIdx - 4] == 'O' && lineBuffer[lineBufferIdx\n+                        - 3] == 'N' && lineBuffer[lineBufferIdx - 2] == 'C' && lineBuffer[lineBufferIdx - 1] == ' ');\n+            for (FamilySpouse fs : dad.getFamiliesWhereSpouse()) {\n+                Individual dadsWife = fs.getFamily().getWife();\n+                addIndividualAndFamilies(result, dadsWife);\n+            }\n+        }\n+            for (FamilySpouse fs : mom.getFamiliesWhereSpouse()) {\n+                Individual momsHusband = fs.getFamily().getHusband();\n+                if (momsHusband != null) {\n+                    addIndividualAndFamilies(result, momsHusband);\n+                }\n+            }\n+        }\n+        try (OutputStream o = new FileOutputStream(file);) {\n+    private static void addBasicName(Individual i, String string) {\n+        PersonalName n = new PersonalName();\n+        n.setBasic(string);\n+        i.getNames(true).add(n);\n+    }\n+    private static void addBirthDate(Individual i, String birthDateString) {\n+        IndividualEvent bd = new IndividualEvent();\n+        bd.setType(IndividualEventType.BIRTH);\n+        bd.setDate(new StringWithCustomTags(birthDateString));\n+        i.getEvents(true).add(bd);\n+    }\n+    private static List<String> getAnselGedcomLines() {\n+        List<String> lines = new ArrayList<>();\n+        lines.add(\"0 HEAD\");\n+        lines.add(\"1 CHAR ANSEL\");\n+        lines.add(\"\\u0140 unmappable in ansel\");\n+        lines.add(\"\\u0141 mappable in ansel\");\n+        lines.add(\"0 TRLR\");\n+        return lines;\n+    }\n+    private static List<String> getAsciiGedcomLines() {\n+        List<String> lines = new ArrayList<>();\n+        lines.add(\"0 HEAD\");\n+        lines.add(\"1 CHAR ASCII\");\n+        lines.add(\"\\u0141 is unmappable in ascii\");\n+        lines.add(\"0 TRLR\");\n+        return lines;\n+    }\n+    private static List<String> getUnicodeGedcomLines() {\n+        List<String> lines = new ArrayList<>();\n+        lines.add(\"0 HEAD\");\n+        lines.add(\"1 CHAR UNICODE\");\n+        lines.add(\"A\\u00C4a\\u00E4\"); // Capital A, capital A-umlaut, lowercase a, lowercase a-umlaut\n+        lines.add(\"0 TRLR\");\n+        return lines;\n+    }\n+    private static List<String> getUtf8GedcomLines() {\n+        List<String> lines = new ArrayList<>();\n+        lines.add(\"0 HEAD\");\n+        lines.add(\"1 CHAR UTF-8\");\n+        lines.add(\"A\\u00C4a\\u00E4\"); // Capital A, capital A-umlaut, lowercase a, lowercase a-umlaut\n+        lines.add(\"0 TRLR\");\n+        return lines;\n+    }\n+    @Test\n+                0x40, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 0x73,\n+                0x65, 0x6C, 0x0D, 0x0A,\n+                (byte) 0xA1, 0x20, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 0x73, 0x65,\n+                0x6C, 0x0D, 0x0A,\n+                0x40, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 0x73,\n+                0x65, 0x6C, 0x0D,\n+                (byte) 0xA1, 0x20, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 0x73, 0x65,\n+                0x6C, 0x0D,\n+                0x40, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 0x73,\n+                0x65, 0x6C, 0x0A, 0x0D,\n+                (byte) 0xA1, 0x20, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 0x73, 0x65,\n+                0x6C, 0x0A, 0x0D,\n+                0x40, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 0x73,\n+                0x65, 0x6C, 0x0A,\n+                (byte) 0xA1, 0x20, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 0x73, 0x65,\n+                0x6C, 0x0A,\n+                0x3F, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20,\n+                0x61, 0x73, 0x63, 0x69, 0x69, 0x0D, 0x0A,\n+                0x3F, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20,\n+                0x61, 0x73, 0x63, 0x69, 0x69, 0x0D,\n+                0x3F, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20,\n+                0x61, 0x73, 0x63, 0x69, 0x69, 0x0A, 0x0D,\n+                0x3F, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20,\n+                0x61, 0x73, 0x63, 0x69, 0x69, 0x0A,\n+        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(new byte[] { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00,\n+                0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0D, 0x00, 0x0A, // End\n+                0x00, 0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00,\n+                0x49, 0x00, 0x43, 0x00, 0x4F, 0x00, 0x44, 0x00, 0x45, 0x00, 0x0D, 0x00, 0x0A,\n+        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(new byte[] { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00,\n+                0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0D,\n+                0x00, 0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00,\n+                0x49, 0x00, 0x43, 0x00, 0x4F, 0x00, 0x44, 0x00, 0x45, 0x00, 0x0D,\n+        byte[] expected = new byte[] { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0A, 0x00,\n+                0x0D,\n+                0x00, 0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00,\n+                0x49, 0x00, 0x43, 0x00, 0x4F, 0x00, 0x44, 0x00, 0x45, 0x00, 0x0A, 0x00, 0x0D,\n+        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(new byte[] { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00,\n+                0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0A,\n+                0x00, 0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00,\n+                0x49, 0x00, 0x43, 0x00, 0x4F, 0x00, 0x44, 0x00, 0x45, 0x00, 0x0A,\n+        byte[] expected = new byte[] { 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0D, 0x00, 0x0A,\n+                0x00,\n+                0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00, 0x49,\n+                0x00, 0x43, 0x00, 0x4F, 0x00, 0x44, 0x00, 0x45, 0x00, 0x0D, 0x00, 0x0A, 0x00,\n+                0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00, 0x49,\n+                0x00, 0x43, 0x00, 0x4F, 0x00, 0x44, 0x00, 0x45, 0x00, 0x0D, 0x00,\n+        byte[] expected = new byte[] { 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0A, 0x00, 0x0D,\n+                0x00,\n+                0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00, 0x49,\n+                0x00, 0x43, 0x00, 0x4F, 0x00, 0x44, 0x00, 0x45, 0x00, 0x0A, 0x00, 0x0D, 0x00,\n+                0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00, 0x49,\n+                0x00, 0x43, 0x00, 0x4F, 0x00, 0x44, 0x00, 0x45, 0x00, 0x0A, 0x00,\n+        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(new byte[] { 0x30, 0x20, 0x48, 0x45, 0x41, 0x44, 0x0D,\n+                0x0A,\n+        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(new byte[] { 0x30, 0x20, 0x48, 0x45, 0x41, 0x44, 0x0A,\n+                0x0D,\n+        assertEquals(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, \"\n+                + \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \"\n+                + \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \"\n+                + \"nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in \"\n+                + \"pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa \"\n+                + \"qui officia deserunt mollit anim id est laborum.\", note.getLines().get(0));\n+        assertEquals(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, \"\n+                + \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \", note.getLines().get(0));\n+                + \"nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in \"\n+                + \"reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \" + \"pariatur. \", note.getLines().get(1));\n+        assertEquals(\"Excepteur sint occaecat cupidatat non proident, sunt in culpa \"\n+                + \"qui officia deserunt mollit anim id est laborum.\", note.getLines().get(2));\n+        String output = baos.toString().replaceAll(\"\\\\r\\\\n\", \"\\n\");\n+        String output = baos.toString().replaceAll(\"\\\\r\\\\n\", \"\\n\");\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": "                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                }\n                }\n            }\n            throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. Can't split automatically.\");\n        return level;\n    }\n    private boolean isStartOfConcLine() {\n}\n",
            "src/main/java/org/gedcom4j/parser/DateParser.java": "    private Date parseHebrew(String hebrewDateString, ImpreciseDatePreference pref) {\n",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "            if (dad.getFamiliesWhereSpouse() != null) {\n                for (FamilySpouse fs : dad.getFamiliesWhereSpouse()) {\n                    Individual dadsWife = fs.getFamily().getWife();\n                    addIndividualAndFamilies(result, dadsWife);\n                }\n    private void addIndividualAndFamilies(Set<Individual> result, Individual individual) {\n                    Individual momsHusband = fs.getFamily().getHusband();\n                    if (momsHusband != null) {\n                        addIndividualAndFamilies(result, momsHusband);\n                    }\n                }\n            }\n        }\n",
            "src/main/java/org/gedcom4j/writer/SubmissionEmitter.java": "    SubmissionEmitter(GedcomWriter baseWriter, int startLevel, Submission writeFrom) throws WriterCancelledException {\n    }\n",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": "    @Test\n    public void testEmptyLines() throws WriterCancelledException {\n        List<String> lines = new ArrayList<String>();\n        GedcomFileWriter gfw = new GedcomFileWriter(new GedcomWriter(new Gedcom()), lines);\n        assertNotNull(gfw.getTerminator());\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testEncodingDetectionAnselExplicit() throws IOException, WriterCancelledException {\n        List<String> lines = new ArrayList<String>();\n        lines.add(\"0 HEAD\");\n        lines.add(\"1 CHAR ANSEL\");\n        GedcomFileWriter gfw = new GedcomFileWriter(new GedcomWriter(new Gedcom()), lines);\n        gfw.write(new NullOutputStream());\n        assertTrue(gfw.encodingSpecificWriter instanceof AnselWriter);\n    }\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testEncodingDetectionAscii() throws IOException, WriterCancelledException {\n        List<String> lines = new ArrayList<String>();\n        lines.add(\"0 HEAD\");\n        lines.add(\"1 CHAR ASCII\");\n        GedcomFileWriter gfw = new GedcomFileWriter(new GedcomWriter(new Gedcom()), lines);\n        gfw.setUseLittleEndianForUnicode(true);\n        gfw.write(new NullOutputStream());\n        assertTrue(gfw.encodingSpecificWriter instanceof AsciiWriter);\n        gfw.setUseLittleEndianForUnicode(false);\n        gfw.write(new NullOutputStream());\n        assertTrue(gfw.encodingSpecificWriter instanceof AsciiWriter);\n    }\n                0x30, 0x20, 0x48, 0x45, 0x41, 0x44, 0x0D, 0x0A,\n                (byte) 0xA1, 0x20, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 0x73, 0x65, 0x6C, 0x0D,\n        byte[] expected = new byte[] {\n                0x31, 0x20, 0x43, 0x48, 0x41, 0x52, 0x20, 0x41, 0x4E, 0x53, 0x45, 0x4C, 0x0A, 0x0D,\n        };\n        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(expected, out.toByteArray()));\n                0x30, 0x20, 0x48, 0x45, 0x41, 0x44, 0x0A,\n                0x31, 0x20, 0x43, 0x48, 0x41, 0x52, 0x20, 0x41, 0x4E, 0x53, 0x45, 0x4C, 0x0A,\n    }\n                0x3F, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x73, 0x63, 0x69, 0x69,\n                0x0D, 0x0A,\n                0x3F, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x73, 0x63, 0x69, 0x69,\n                0x30, 0x20, 0x54, 0x52, 0x4C, 0x52, 0x0D,\n                0x3F, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x73, 0x63, 0x69, 0x69,\n                0x0A, 0x0D,\n                0x3F, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6E, 0x6D, 0x61, 0x70, 0x70, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x73, 0x63, 0x69, 0x69,\n                0x0A,\n                0x00, 0x44, 0x00, 0x45, 0x00, 0x0D, 0x00, 0x0A,\n                0x00, 0x41, 0x00, (byte) 0xC4, // Capital A, Capital A-umlaut\n        out.close();\n        byte[] expected = new byte[] { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0A, 0x00, 0x0D,\n                0x00, 0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00, 0x49, 0x00, 0x43, 0x00, 0x4F,\n                0x00, 0x44, 0x00, 0x45, 0x00, 0x0A, 0x00, 0x0D,\n        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(new byte[] { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44,\n                0x00, 0x0A,\n                0x00, 0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00, 0x49, 0x00, 0x43, 0x00, 0x4F,\n                0x00, 0x44, 0x00, 0x45, 0x00, 0x0A,\n        out.close();\n                0x31, 0x00, 0x20, 0x00, 0x43, 0x00, 0x48, 0x00, 0x41, 0x00, 0x52, 0x00, 0x20, 0x00, 0x55, 0x00, 0x4E, 0x00, 0x49, 0x00, 0x43, 0x00, 0x4F, 0x00,\n        gfw.write(out);\n        out.close();\n        byte[] expected = new byte[] { 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0D, 0x00,\n        gfw.write(out);\n        out.close();\n        byte[] expected = new byte[] { 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0A, 0x00, 0x0D, 0x00,\n        byte[] expected = new byte[] { 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0A, 0x00,\n                0x31, 0x20, 0x43, 0x48, 0x41, 0x52, 0x20, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x0D, 0x0A,\n                0x41, (byte) 0xC3, (byte) 0x84, // Capital A, Capital A-umlaut\n                0x61, (byte) 0xC3, (byte) 0xA4, // lowercase a, lowercase a-umlaut\n        }, out.toByteArray()));\n        }, out.toByteArray()));\n    private List<String> getAnselGedcomLines() {\n",
            "src/test/java/org/gedcom4j/model/StringTreeTest.java": "    @Test\n",
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java": "        GedcomParser gp = new GedcomParser();\n        GedcomParser gp = new GedcomParser();\n",
            "src/test/java/org/gedcom4j/parser/Issue32Test.java": "        assertEquals(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, \" + \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \"\n                + \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \" + \"nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in \"\n                + \"reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \"\n                + \"pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa \" + \"qui officia deserunt mollit anim id est laborum.\", note\n    }\n        assertNotNull(notes);\n                + \"nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in \" + \"reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \"\n                + \"pariatur. \", note.getLines().get(1));\n                2));\n    }\n}\n",
            "src/test/java/org/gedcom4j/parser/Issue87Test.java": "    @Test\n",
            "src/test/java/org/gedcom4j/parser/ParserProgressAndCancellationTest.java": "    @Test(expected = ParserCancelledException.class)\n    @Test\n        gp = new GedcomParser();\n",
            "src/test/java/org/gedcom4j/writer/Issue89Test.java": "        assertEquals(\"0 HEAD\\n\" + \"1 SOUR UNSPECIFIED\\n\" + \"1 SUBM @SUBM0001@\\n\" + \"1 SUBN @SUBN0001@\\n\" + \"1 GEDC\\n\"\n",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": "        assertEquals(\"0 HEAD\\n\" + \"1 SOUR UNSPECIFIED\\n\" + \"1 SUBM @SUBM0001@\\n\" + \"1 SUBN @SUBN0001@\\n\" + \"1 GEDC\\n\"\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": [
                219,
                220,
                230,
                231,
                237,
                239,
                240,
                293,
                299
            ],
            "src/main/java/org/gedcom4j/parser/DateParser.java": [
                818
            ],
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                138,
                139,
                140,
                141,
                142,
                153,
                243,
                244,
                245,
                246,
                247,
                248,
                249
            ],
            "src/main/java/org/gedcom4j/writer/SubmissionEmitter.java": [
                47,
                49
            ],
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": [
                62,
                63,
                64,
                65,
                66,
                67,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                107,
                108,
                109,
                110,
                197,
                237,
                261,
                265,
                273,
                274,
                298,
                300,
                307,
                334,
                335,
                369,
                372,
                402,
                403,
                437,
                438,
                470,
                506,
                532,
                534,
                536,
                537,
                568,
                569,
                571,
                572,
                602,
                606,
                637,
                638,
                640,
                673,
                674,
                676,
                712,
                747,
                749,
                750,
                786,
                817,
                880
            ],
            "src/test/java/org/gedcom4j/model/StringTreeTest.java": [
                141
            ],
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java": [
                175,
                199
            ],
            "src/test/java/org/gedcom4j/parser/Issue32Test.java": [
                98,
                99,
                100,
                101,
                103,
                111,
                120,
                121,
                123,
                125,
                126
            ],
            "src/test/java/org/gedcom4j/parser/Issue87Test.java": [
                56
            ],
            "src/test/java/org/gedcom4j/parser/ParserProgressAndCancellationTest.java": [
                75,
                89,
                91
            ],
            "src/test/java/org/gedcom4j/writer/Issue89Test.java": [
                104
            ],
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": [
                70
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": "                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n                    throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. \" + \"Can't split automatically.\");\n            throw new GedcomParserException(\"Line \" + linesRead + \" does not begin with a 1 or 2 digit number. Can't split automatically.\");\n        return (lineBufferIdx >= 7 && Character.isDigit(lineBuffer[lineBufferIdx - 7]) && lineBuffer[lineBufferIdx - 6] == ' ' && lineBuffer[lineBufferIdx\n                - 5] == 'C' && lineBuffer[lineBufferIdx - 4] == 'O' && lineBuffer[lineBufferIdx - 3] == 'N' && lineBuffer[lineBufferIdx - 2] == 'C'\n                && lineBuffer[lineBufferIdx - 1] == ' ');\n",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "            if (dad.getFamiliesWhereSpouse() != null) {\n                for (FamilySpouse fs : dad.getFamiliesWhereSpouse()) {\n                    Individual dadsWife = fs.getFamily().getWife();\n                    addIndividualAndFamilies(result, dadsWife);\n                }\n        Individual mom = fc.getFamily().getWife();\n        if (mom != null) {\n            if (mom.getFamiliesWhereSpouse() != null) {\n                for (FamilySpouse fs : mom.getFamiliesWhereSpouse()) {\n                    Individual momsHusband = fs.getFamily().getHusband();\n                    if (momsHusband != null) {\n                        addIndividualAndFamilies(result, momsHusband);\n",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": "    @Test\n        assertTrue(gfw.encodingSpecificWriter instanceof Utf8Writer);\n    }\n                0x30, 0x20, 0x48, 0x45, 0x41, 0x44, 0x0D, 0x0A,\n                0x31, 0x20, 0x43, 0x48, 0x41, 0x52, 0x20, 0x41, 0x4E, 0x53, 0x45, 0x4C, 0x0D, 0x0A,\n        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(expected, out.toByteArray()));\n    }\n                0x30, 0x20, 0x48, 0x45, 0x41, 0x44, 0x0D,\n                0x31, 0x20, 0x43, 0x48, 0x41, 0x52, 0x20, 0x41, 0x4E, 0x53, 0x45, 0x4C, 0x0D,\n                0x30, 0x20, 0x54, 0x52, 0x4C, 0x52, 0x0D }, out.toByteArray()));\n    }\n                0x30, 0x20, 0x48, 0x45, 0x41, 0x44, 0x0A, 0x0D,\n                0x31, 0x20, 0x43, 0x48, 0x41, 0x52, 0x20, 0x41, 0x4E, 0x53, 0x45, 0x4C, 0x0A, 0x0D,\n        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(expected, out.toByteArray()));\n    }\n                0x30, 0x20, 0x48, 0x45, 0x41, 0x44, 0x0A,\n                0x31, 0x20, 0x43, 0x48, 0x41, 0x52, 0x20, 0x41, 0x4E, 0x53, 0x45, 0x4C, 0x0A,\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        gfw.write(out);\n        out.close();\n        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(new byte[] { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44,\n                0x00, 0x0D, 0x00, 0x0A, // End\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        gfw.write(out);\n        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(new byte[] { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44,\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        out.close();\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        gfw.write(out);\n        assertTrue(\"Output bytes are not the expected value\", Arrays.equals(new byte[] { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44,\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        out.close();\n        out.close();\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        out.close();\n        out.close();\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        GedcomWriter gw = new GedcomWriter(g);\n        gw.write(fn);\n    }\n    private List<String> getAnselGedcomLines() {\n        List<String> lines = new ArrayList<String>();\n        lines.add(\"0 HEAD\");\n        lines.add(\"1 CHAR ANSEL\");\n        lines.add(\"\\u0140 unmappable in ansel\");\n        lines.add(\"\\u0141 mappable in ansel\");\n        lines.add(\"0 TRLR\");\n        return lines;\n    }\n    private List<String> getAsciiGedcomLines() {\n        List<String> lines = new ArrayList<String>();\n        lines.add(\"0 HEAD\");\n        lines.add(\"1 CHAR ASCII\");\n        lines.add(\"\\u0141 is unmappable in ascii\");\n        lines.add(\"0 TRLR\");\n        return lines;\n    }\n    private List<String> getUnicodeGedcomLines() {\n        List<String> lines = new ArrayList<String>();\n        lines.add(\"0 HEAD\");\n        lines.add(\"1 CHAR UNICODE\");\n        lines.add(\"A\\u00C4a\\u00E4\"); // Capital A, capital A-umlaut, lowercase a, lowercase a-umlaut\n        lines.add(\"0 TRLR\");\n        return lines;\n    }\n    private List<String> getUtf8GedcomLines() {\n        List<String> lines = new ArrayList<String>();\n        lines.add(\"0 HEAD\");\n        lines.add(\"1 CHAR UTF-8\");\n        lines.add(\"A\\u00C4a\\u00E4\"); // Capital A, capital A-umlaut, lowercase a, lowercase a-umlaut\n",
            "src/test/java/org/gedcom4j/parser/Issue32Test.java": "        assertEquals(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, \" + \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \"\n                + \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \" + \"nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in \"\n                + \"pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa \" + \"qui officia deserunt mollit anim id est laborum.\", note\n                        .getLines().get(0));\n        assertEquals(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, \" + \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \", note\n                .getLines().get(0));\n                + \"nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in \" + \"reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla \"\n                + \"pariatur. \", note.getLines().get(1));\n        assertEquals(\"Excepteur sint occaecat cupidatat non proident, sunt in culpa \" + \"qui officia deserunt mollit anim id est laborum.\", note.getLines().get(\n                2));\n",
            "src/test/java/org/gedcom4j/writer/Issue89Test.java": "        String output = baos.toString().replaceAll(\"\\\\r\\\\n\",\"\\n\");\n",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": "        String output = baos.toString().replaceAll(\"\\\\r\\\\n\",\"\\n\");\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java": [
                219,
                229,
                237,
                294,
                295,
                296
            ],
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                138,
                139,
                140,
                141,
                142,
                239,
                240,
                241,
                242,
                243,
                244,
                245
            ],
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": [
                78,
                173,
                174,
                197,
                199,
                207,
                208,
                231,
                233,
                239,
                240,
                263,
                265,
                274,
                275,
                298,
                300,
                460,
                461,
                462,
                464,
                465,
                496,
                497,
                500,
                530,
                532,
                564,
                565,
                568,
                600,
                602,
                638,
                672,
                674,
                710,
                741,
                803,
                870,
                871,
                872,
                880,
                881,
                882,
                883,
                884,
                885,
                886,
                887,
                888,
                896,
                897,
                898,
                899,
                900,
                901,
                902,
                903,
                911,
                912,
                913,
                914,
                915,
                916,
                917,
                918,
                926,
                927,
                928,
                929,
                930
            ],
            "src/test/java/org/gedcom4j/parser/Issue32Test.java": [
                98,
                99,
                101,
                102,
                117,
                118,
                120,
                121,
                122,
                123
            ],
            "src/test/java/org/gedcom4j/writer/Issue89Test.java": [
                103
            ],
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": [
                69
            ]
        }
    },
    {
        "commit": "d3ef50c9",
        "prev_commit": "361cefa4",
        "changed_files": [
            "sample/Issue157.ged",
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java",
            "src/test/java/org/gedcom4j/parser/Issue157Test.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java",
            "src/test/java/org/gedcom4j/parser/Issue157Test.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+                    if (ch.getChildren() != null && !ch.getChildren().isEmpty()) {\n+    @Test\n+    public void test() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/Issue157.ged\");\n+        Gedcom g = gp.getGedcom();\n+        assertNotNull(g);\n+        assertTrue(gp.getWarnings().isEmpty());\n+        assertTrue(gp.getErrors().isEmpty());\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java": "                    if (!ch.getChildren().isEmpty()) {\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java": [
                65
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java": "                    if (!ch.getChildren().isEmpty()) {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java": [
                65
            ]
        }
    },
    {
        "commit": "796aa731",
        "prev_commit": "dacd0900",
        "changed_files": [
            "src/main/java/org/gedcom4j/parser/LinePieces.java",
            "src/test/java/org/gedcom4j/parser/LinePiecesTest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/parser/LinePieces.java",
            "src/test/java/org/gedcom4j/parser/LinePiecesTest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private final int lineNum;\n+        this.lineNum = lineNum;\n+        processLevel();\n+    private void processLevel() throws GedcomParserException {\n+        if (level < 0 || level > 99) {\n+            throw new GedcomParserException(\"Line \" + lineNum\n+                    + \" does not begin with a 1 or 2 digit number for the level followed by a space: \" + new String(chars));\n+        }\n+    private void processTag() throws GedcomParserException {\n+        } else {\n+            throw new GedcomParserException(\"All GEDCOM lines are required to have a tag value, but no tag could be found on line \"\n+                    + lineNum);\n+    private void processXrefId() throws GedcomParserException {\n+            if (i.charAt(i.length() - 1) != '@') {\n+                throw new GedcomParserException(\"XRef ID begins with @ sign but is not terminated with one on line \" + lineNum);\n+            }\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+    @SuppressWarnings(\"unused\")\n+    @Test\n+    public void testLinePiecesNegativeBadLevel() throws GedcomParserException {\n+        thrown.expect(GedcomParserException.class);\n+        thrown.expectMessage(\"Line 5 does not begin with a 1 or 2 digit number for the level followed by a space:\");\n+        new LinePieces(\"BAD TAGG additional stuff\", 5);\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test\n+    public void testLinePiecesNegativeBadXref() throws GedcomParserException {\n+        thrown.expect(GedcomParserException.class);\n+        thrown.expectMessage(\"XRef ID begins with @ sign but is not terminated with one on line 5\");\n+        new LinePieces(\"4 @XREF TAGG additional stuff\", 5);\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test\n+    public void testLinePiecesNegativeNothingAfterXref() throws GedcomParserException {\n+        thrown.expect(GedcomParserException.class);\n+        thrown.expectMessage(\"All GEDCOM lines are required to have a tag value, but no tag could be found on line 5\");\n+        new LinePieces(\"4 @XREF@\", 5);\n+    }\n+    @Test\n+    public void testLinePiecesPositive() throws GedcomParserException {\n+        LinePieces lp = new LinePieces(\"4 @XREF@ TAGG additional stuff\", 5);\n+        assertNotNull(lp);\n+        assertEquals(4, lp.level);\n+        assertEquals(\"@XREF@\", lp.id);\n+        assertEquals(\"TAGG\", lp.tag);\n+        assertEquals(\"additional stuff\", lp.remainder);\n+    }\n+    @Test\n+    public void testLinePiecesPositiveNothingAfterTag() throws GedcomParserException {\n+        LinePieces lp = new LinePieces(\"4 TAGG\", 5);\n+        assertNotNull(lp);\n+        assertEquals(4, lp.level);\n+        assertNull(lp.id);\n+        assertEquals(\"TAGG\", lp.tag);\n+        assertNull(lp.remainder);\n+    }\n+    @Test\n+    public void testLinePiecesPositiveNoXref() throws GedcomParserException {\n+        LinePieces lp = new LinePieces(\"4 TAGG additional stuff\", 5);\n+        assertNotNull(lp);\n+        assertEquals(4, lp.level);\n+        assertNull(lp.id);\n+        assertEquals(\"TAGG\", lp.tag);\n+        assertEquals(\"additional stuff\", lp.remainder);\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/parser/LinePieces.java": "        processXrefId();\n        processTag();\n        }\n    }\n        StringBuilder t = new StringBuilder();\n        while (currCharIdx < chars.length && chars[currCharIdx] != ' ') {\n            t.append(chars[currCharIdx++]);\n        if (t.length() > 0) {\n    private void processXrefId() {\n        StringBuilder i = null;\n                i.append(chars[currCharIdx++]);\n            }\n            currCharIdx++;\n        if (i != null) {\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/LinePieces.java": [
                82,
                84,
                118,
                119,
                135,
                136,
                137,
                139,
                147,
                149,
                155,
                156,
                157,
                159
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/parser/LinePieces.java": "        processLevel(lineNum);\n    private void processLevel(int lineNum) throws GedcomParserException {\n    private void processTag() {\n    private void processXrefId() {\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/parser/LinePieces.java": [
                80,
                97,
                133,
                147
            ]
        }
    },
    {
        "commit": "c5875df8",
        "prev_commit": "c1542505",
        "changed_files": [
            "gedcom4j release notes.txt",
            "pom.xml",
            "sample/.gitignore",
            "sample/5.5.1 sample 5.ged",
            "sample/customtagstorture.ged",
            "sample/famhistcustomtags.ged",
            "sample/famhistnocustomtags.ged",
            "sample/ftmcustomtags.ged",
            "sample/issue95.ged",
            "sample/legacycustomtags.ged",
            "sample/legacynocustomtags.ged",
            "sample/problemFile.ged",
            "sample/validatesOk.ged",
            "src/main/java/org/gedcom4j/comparators/IndividualByLastNameFirstNameComparator.java",
            "src/main/java/org/gedcom4j/comparators/IndividualsByEventDateLastNameFirstNameComparator.java",
            "src/main/java/org/gedcom4j/exception/ValidationException.java",
            "src/main/java/org/gedcom4j/factory/FamilyFactory.java",
            "src/main/java/org/gedcom4j/factory/IndividualFactory.java",
            "src/main/java/org/gedcom4j/io/encoding/AnselMapping.java",
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java",
            "src/main/java/org/gedcom4j/io/reader/Utf8Reader.java",
            "src/main/java/org/gedcom4j/model/AbstractAddressableElement.java",
            "src/main/java/org/gedcom4j/model/AbstractCitation.java",
            "src/main/java/org/gedcom4j/model/AbstractElement.java",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java",
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java",
            "src/main/java/org/gedcom4j/model/AbstractNotesElement.java",
            "src/main/java/org/gedcom4j/model/Address.java",
            "src/main/java/org/gedcom4j/model/Association.java",
            "src/main/java/org/gedcom4j/model/ChangeDate.java",
            "src/main/java/org/gedcom4j/model/CharacterSet.java",
            "src/main/java/org/gedcom4j/model/CitationData.java",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java",
            "src/main/java/org/gedcom4j/model/Corporation.java",
            "src/main/java/org/gedcom4j/model/CustomFact.java",
            "src/main/java/org/gedcom4j/model/EventRecorded.java",
            "src/main/java/org/gedcom4j/model/Family.java",
            "src/main/java/org/gedcom4j/model/FamilyChild.java",
            "src/main/java/org/gedcom4j/model/FamilyEvent.java",
            "src/main/java/org/gedcom4j/model/FamilyReference.java",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java",
            "src/main/java/org/gedcom4j/model/FileReference.java",
            "src/main/java/org/gedcom4j/model/Gedcom.java",
            "src/main/java/org/gedcom4j/model/GedcomVersion.java",
            "src/main/java/org/gedcom4j/model/HasAddresses.java",
            "src/main/java/org/gedcom4j/model/HasCustomFacts.java",
            "src/main/java/org/gedcom4j/model/HasNotes.java",
            "src/main/java/org/gedcom4j/model/Header.java",
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java",
            "src/main/java/org/gedcom4j/model/Individual.java",
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java",
            "src/main/java/org/gedcom4j/model/IndividualEvent.java",
            "src/main/java/org/gedcom4j/model/IndividualReference.java",
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java",
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java",
            "src/main/java/org/gedcom4j/model/ModelElement.java",
            "src/main/java/org/gedcom4j/model/MultiStringWithCustomFacts.java",
            "src/main/java/org/gedcom4j/model/Multimedia.java",
            "src/main/java/org/gedcom4j/model/MultimediaReference.java",
            "src/main/java/org/gedcom4j/model/NoteRecord.java",
            "src/main/java/org/gedcom4j/model/NoteStructure.java",
            "src/main/java/org/gedcom4j/model/PersonalName.java",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java",
            "src/main/java/org/gedcom4j/model/Place.java",
            "src/main/java/org/gedcom4j/model/PlaceNameVariation.java",
            "src/main/java/org/gedcom4j/model/Repository.java",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java",
            "src/main/java/org/gedcom4j/model/Source.java",
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java",
            "src/main/java/org/gedcom4j/model/SourceData.java",
            "src/main/java/org/gedcom4j/model/SourceSystem.java",
            "src/main/java/org/gedcom4j/model/StringTree.java",
            "src/main/java/org/gedcom4j/model/StringWithCustomFacts.java",
            "src/main/java/org/gedcom4j/model/Submission.java",
            "src/main/java/org/gedcom4j/model/SubmissionReference.java",
            "src/main/java/org/gedcom4j/model/Submitter.java",
            "src/main/java/org/gedcom4j/model/SubmitterReference.java",
            "src/main/java/org/gedcom4j/model/Trailer.java",
            "src/main/java/org/gedcom4j/model/UserReference.java",
            "src/main/java/org/gedcom4j/model/enumerations/AdoptedByWhichParent.java",
            "src/main/java/org/gedcom4j/model/enumerations/ChildLinkageStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/FamilyEventType.java",
            "src/main/java/org/gedcom4j/model/enumerations/IndividualAttributeType.java",
            "src/main/java/org/gedcom4j/model/enumerations/IndividualEventType.java",
            "src/main/java/org/gedcom4j/model/enumerations/LanguageID.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsBaptismDateStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsChildSealingDateStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsEndowmentDateStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsIndividualOrdinanceType.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsSpouseSealingDateStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/PedigreeLinkageType.java",
            "src/main/java/org/gedcom4j/model/enumerations/RestrictionNoticeType.java",
            "src/main/java/org/gedcom4j/model/enumerations/SupportedVersion.java",
            "src/main/java/org/gedcom4j/model/enumerations/package-info.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/AbstractThirdPartyAdapter.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/FamilyHistorianAdapter.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/FamilyTreeMaker3Adapter.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/LegacyFamilyTree8Adapter.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/package-info.java",
            "src/main/java/org/gedcom4j/parser/AbstractEventParser.java",
            "src/main/java/org/gedcom4j/parser/AbstractParser.java",
            "src/main/java/org/gedcom4j/parser/AddressParser.java",
            "src/main/java/org/gedcom4j/parser/AssociationParser.java",
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java",
            "src/main/java/org/gedcom4j/parser/CitationListParser.java",
            "src/main/java/org/gedcom4j/parser/CorporationParser.java",
            "src/main/java/org/gedcom4j/parser/CustomFactParser.java",
            "src/main/java/org/gedcom4j/parser/FamilyChildParser.java",
            "src/main/java/org/gedcom4j/parser/FamilyEventParser.java",
            "src/main/java/org/gedcom4j/parser/FamilyParser.java",
            "src/main/java/org/gedcom4j/parser/FileReference551Parser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/GedcomParser.java",
            "src/main/java/org/gedcom4j/parser/GedcomVersionParser.java",
            "src/main/java/org/gedcom4j/parser/HeaderParser.java",
            "src/main/java/org/gedcom4j/parser/HeaderSourceDataParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/IndividualAttributeParser.java",
            "src/main/java/org/gedcom4j/parser/IndividualEventParser.java",
            "src/main/java/org/gedcom4j/parser/IndividualParser.java",
            "src/main/java/org/gedcom4j/parser/LdsIndividualOrdinanceParser.java",
            "src/main/java/org/gedcom4j/parser/LdsSpouseSealingParser.java",
            "src/main/java/org/gedcom4j/parser/LinePieces.java",
            "src/main/java/org/gedcom4j/parser/MultimediaLinkParser.java",
            "src/main/java/org/gedcom4j/parser/MultimediaParser.java",
            "src/main/java/org/gedcom4j/parser/NoteRecordParser.java",
            "src/main/java/org/gedcom4j/parser/NoteStructureListParser.java",
            "src/main/java/org/gedcom4j/parser/PersonalNameParser.java",
            "src/main/java/org/gedcom4j/parser/PlaceParser.java",
            "src/main/java/org/gedcom4j/parser/RepositoryParser.java",
            "src/main/java/org/gedcom4j/parser/SourceParser.java",
            "src/main/java/org/gedcom4j/parser/SourceSystemParser.java",
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java",
            "src/main/java/org/gedcom4j/parser/StringTreeBuilder.java",
            "src/main/java/org/gedcom4j/parser/SubmissionParser.java",
            "src/main/java/org/gedcom4j/parser/SubmitterParser.java",
            "src/main/java/org/gedcom4j/parser/Tag.java",
            "src/main/java/org/gedcom4j/parser/UserReferenceParser.java",
            "src/main/java/org/gedcom4j/query/Finder.java",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/main/java/org/gedcom4j/relationship/Relationship.java",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java",
            "src/main/java/org/gedcom4j/relationship/SimpleRelationship.java",
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java",
            "src/main/java/org/gedcom4j/validate/AddressValidator.java",
            "src/main/java/org/gedcom4j/validate/AutoRepair.java",
            "src/main/java/org/gedcom4j/validate/AutoRepairResponder.java",
            "src/main/java/org/gedcom4j/validate/BirthsToOldParentsValidator.java",
            "src/main/java/org/gedcom4j/validate/BirthsToYoungParentsValidator.java",
            "src/main/java/org/gedcom4j/validate/BornBeforeAncestorsValidator.java",
            "src/main/java/org/gedcom4j/validate/CircularAncestryValidator.java",
            "src/main/java/org/gedcom4j/validate/CitationValidator.java",
            "src/main/java/org/gedcom4j/validate/CouplesWithLargeAgeDifferencesValidator.java",
            "src/main/java/org/gedcom4j/validate/DifferentSurnamesThanParentsValidator.java",
            "src/main/java/org/gedcom4j/validate/DuplicateHandler.java",
            "src/main/java/org/gedcom4j/validate/EventValidator.java",
            "src/main/java/org/gedcom4j/validate/FamilyChildValidator.java",
            "src/main/java/org/gedcom4j/validate/FamilySpouseValidator.java",
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java",
            "src/main/java/org/gedcom4j/validate/FutureBirthOrDeathValidator.java",
            "src/main/java/org/gedcom4j/validate/GedcomValidationFinding.java",
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java",
            "src/main/java/org/gedcom4j/validate/HeaderValidator.java",
            "src/main/java/org/gedcom4j/validate/IndividualAttributeValidator.java",
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java",
            "src/main/java/org/gedcom4j/validate/LdsIndividualOrdinanceValidator.java",
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java",
            "src/main/java/org/gedcom4j/validate/MaleWivesFemaleHusbandsValidator.java",
            "src/main/java/org/gedcom4j/validate/MarriedAtYoungAgeValidator.java",
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java",
            "src/main/java/org/gedcom4j/validate/MultipleChildrenWithSameGivenNameValidator.java",
            "src/main/java/org/gedcom4j/validate/NameVariationValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteRecordValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteStructureListValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteStructureValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteValidator.java",
            "src/main/java/org/gedcom4j/validate/NotesValidator.java",
            "src/main/java/org/gedcom4j/validate/NullHandler.java",
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java",
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java",
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java",
            "src/main/java/org/gedcom4j/validate/ProblemCode.java",
            "src/main/java/org/gedcom4j/validate/QuadrupletsAndMoreValidator.java",
            "src/main/java/org/gedcom4j/validate/RepositoryValidator.java",
            "src/main/java/org/gedcom4j/validate/Severity.java",
            "src/main/java/org/gedcom4j/validate/SimultaneousBirthsInMultipleLocationsValidator.java",
            "src/main/java/org/gedcom4j/validate/SourceValidator.java",
            "src/main/java/org/gedcom4j/validate/SubmissionValidator.java",
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java",
            "src/main/java/org/gedcom4j/validate/ValidationResults.java",
            "src/main/java/org/gedcom4j/validate/Validator.java",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java",
            "src/main/java/org/gedcom4j/writer/AddressEmitter.java",
            "src/main/java/org/gedcom4j/writer/ChangeDateEmitter.java",
            "src/main/java/org/gedcom4j/writer/CitationEmitter.java",
            "src/main/java/org/gedcom4j/writer/EventEmitter.java",
            "src/main/java/org/gedcom4j/writer/FamilyEmitter.java",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java",
            "src/main/java/org/gedcom4j/writer/HeaderEmitter.java",
            "src/main/java/org/gedcom4j/writer/IndividualEmitter.java",
            "src/main/java/org/gedcom4j/writer/Multimedia551Emitter.java",
            "src/main/java/org/gedcom4j/writer/Multimedia55Emitter.java",
            "src/main/java/org/gedcom4j/writer/MultimediaLinksEmitter.java",
            "src/main/java/org/gedcom4j/writer/NoteRecordEmitter.java",
            "src/main/java/org/gedcom4j/writer/NoteStructureEmitter.java",
            "src/main/java/org/gedcom4j/writer/PlaceEmitter.java",
            "src/main/java/org/gedcom4j/writer/RepositoryEmitter.java",
            "src/main/java/org/gedcom4j/writer/SourceEmitter.java",
            "src/main/java/org/gedcom4j/writer/SubmissionEmitter.java",
            "src/main/java/org/gedcom4j/writer/SubmittersEmitter.java",
            "src/test/java/org/gedcom4j/CustomTagParseWriteTortureTest.java",
            "src/test/java/org/gedcom4j/comparators/IndividualByEventDateLastNameFirstNameComparatorTest.java",
            "src/test/java/org/gedcom4j/exception/ValidationExceptionTest.java",
            "src/test/java/org/gedcom4j/factory/FamilyFactoryTest.java",
            "src/test/java/org/gedcom4j/factory/IndividualFactoryTest.java",
            "src/test/java/org/gedcom4j/io/event/FileProgressEventTest.java",
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java",
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java",
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java",
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java",
            "src/test/java/org/gedcom4j/model/AbstractCopyTest.java",
            "src/test/java/org/gedcom4j/model/AddressCopyTest.java",
            "src/test/java/org/gedcom4j/model/AssociationCopyTest.java",
            "src/test/java/org/gedcom4j/model/AssociationTest.java",
            "src/test/java/org/gedcom4j/model/ChangeDateCopyTest.java",
            "src/test/java/org/gedcom4j/model/CharacterSetCopyTest.java",
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java",
            "src/test/java/org/gedcom4j/model/CitationDataCopyTest.java",
            "src/test/java/org/gedcom4j/model/CitationDataTest.java",
            "src/test/java/org/gedcom4j/model/CitationWithSourceCopyTest.java",
            "src/test/java/org/gedcom4j/model/CitationWithoutSourceCopyTest.java",
            "src/test/java/org/gedcom4j/model/CorporationCopyTest.java",
            "src/test/java/org/gedcom4j/model/EventRecordedCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyChildCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyEventCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java",
            "src/test/java/org/gedcom4j/model/FamilySpouseCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyTest.java",
            "src/test/java/org/gedcom4j/model/FileReferenceCopyTest.java",
            "src/test/java/org/gedcom4j/model/GedcomCopyTest.java",
            "src/test/java/org/gedcom4j/model/GedcomTest.java",
            "src/test/java/org/gedcom4j/model/GedcomVersionCopyTest.java",
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java",
            "src/test/java/org/gedcom4j/model/HeaderCopyTest.java",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataCopyTest.java",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java",
            "src/test/java/org/gedcom4j/model/IndividualAttributeCopyTest.java",
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java",
            "src/test/java/org/gedcom4j/model/IndividualCopyTest.java",
            "src/test/java/org/gedcom4j/model/IndividualEventCopyTest.java",
            "src/test/java/org/gedcom4j/model/IndividualTest.java",
            "src/test/java/org/gedcom4j/model/Issue115Test.java",
            "src/test/java/org/gedcom4j/model/Issue88Test.java",
            "src/test/java/org/gedcom4j/model/LdsIndividualOrdinanceCopyTest.java",
            "src/test/java/org/gedcom4j/model/LdsSpouseSealingCopyTest.java",
            "src/test/java/org/gedcom4j/model/LdsSpouseSealingTest.java",
            "src/test/java/org/gedcom4j/model/MultiStringWithCustomFactsCopyTest.java",
            "src/test/java/org/gedcom4j/model/MultimediaCopyTest.java",
            "src/test/java/org/gedcom4j/model/MultimediaReferenceCopyTest.java",
            "src/test/java/org/gedcom4j/model/NameVariationTest.java",
            "src/test/java/org/gedcom4j/model/NoteRecordCopyTest.java",
            "src/test/java/org/gedcom4j/model/NoteStructureCopyTest.java",
            "src/test/java/org/gedcom4j/model/PersonalNameCopyTest.java",
            "src/test/java/org/gedcom4j/model/PersonalNameVariationCopyTest.java",
            "src/test/java/org/gedcom4j/model/PersonalNameVariationTest.java",
            "src/test/java/org/gedcom4j/model/PlaceCopyTest.java",
            "src/test/java/org/gedcom4j/model/PlaceNameVariationCopyTest.java",
            "src/test/java/org/gedcom4j/model/RepositoryCitationCopyTest.java",
            "src/test/java/org/gedcom4j/model/RepositoryCopyTest.java",
            "src/test/java/org/gedcom4j/model/RepositoryTest.java",
            "src/test/java/org/gedcom4j/model/SourceCallNumberCopyTest.java",
            "src/test/java/org/gedcom4j/model/SourceCallNumberTest.java",
            "src/test/java/org/gedcom4j/model/SourceCopyTest.java",
            "src/test/java/org/gedcom4j/model/SourceDataCopyTest.java",
            "src/test/java/org/gedcom4j/model/SourceSystemCopyTest.java",
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java",
            "src/test/java/org/gedcom4j/model/SourceTest.java",
            "src/test/java/org/gedcom4j/model/StringTreeCopyTest.java",
            "src/test/java/org/gedcom4j/model/StringTreeTest.java",
            "src/test/java/org/gedcom4j/model/StringWithCustomFactsCopyTest.java",
            "src/test/java/org/gedcom4j/model/StringWithCustomFactsTest.java",
            "src/test/java/org/gedcom4j/model/SubmissionCopyTest.java",
            "src/test/java/org/gedcom4j/model/SubmitterCopyTest.java",
            "src/test/java/org/gedcom4j/model/SubmitterReferenceCopyTest.java",
            "src/test/java/org/gedcom4j/model/TestHelper.java",
            "src/test/java/org/gedcom4j/model/UserReferenceCopyTest.java",
            "src/test/java/org/gedcom4j/model/enumerations/FamilyEventTypeTest.java",
            "src/test/java/org/gedcom4j/model/enumerations/IndividualEventTypeTest.java",
            "src/test/java/org/gedcom4j/model/enumerations/SupportedVersionTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/FamilyHistorianAdapterTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/FamilyTreeMaker3AdapterImmutabilityTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/FamilyTreeMaker3AdapterNegativeTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/FamilyTreeMaker3AdapterPositiveTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/LegacyFamilyTree8AdapterTest.java",
            "src/test/java/org/gedcom4j/parser/CustomFactParserTest.java",
            "src/test/java/org/gedcom4j/parser/DateParserFrenchRepublicanTest.java",
            "src/test/java/org/gedcom4j/parser/DateParserRangePeriodTest.java",
            "src/test/java/org/gedcom4j/parser/FamilyEventTypeParseTest.java",
            "src/test/java/org/gedcom4j/parser/GedcomParser551Test.java",
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java",
            "src/test/java/org/gedcom4j/parser/Issue100Test.java",
            "src/test/java/org/gedcom4j/parser/Issue102Test.java",
            "src/test/java/org/gedcom4j/parser/Issue129Test.java",
            "src/test/java/org/gedcom4j/parser/Issue32Test.java",
            "src/test/java/org/gedcom4j/parser/Issue61Test.java",
            "src/test/java/org/gedcom4j/parser/Issue62Test.java",
            "src/test/java/org/gedcom4j/parser/Issue63Test.java",
            "src/test/java/org/gedcom4j/parser/Issue80ParserTest.java",
            "src/test/java/org/gedcom4j/parser/Issue87Test.java",
            "src/test/java/org/gedcom4j/parser/Issue96Test.java",
            "src/test/java/org/gedcom4j/parser/StressFileSpecialCharacterReadTest.java",
            "src/test/java/org/gedcom4j/parser/TagTest.java",
            "src/test/java/org/gedcom4j/parser/event/ParseProgressEventTest.java",
            "src/test/java/org/gedcom4j/query/FinderTest.java",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java",
            "src/test/java/org/gedcom4j/relationship/RelationshipCalculatorTest.java",
            "src/test/java/org/gedcom4j/validate/AbstractValidatorTestCase.java",
            "src/test/java/org/gedcom4j/validate/AutoRepairTest.java",
            "src/test/java/org/gedcom4j/validate/BirthsToOldParentsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/BirthsToYoungParentsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/BornBeforeAncestorsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/CircularAncestryValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/CitationValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/CouplesWithLargeAgeDifferencesValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/DifferentSurnamesThanParentsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java",
            "src/test/java/org/gedcom4j/validate/DuplicateHandlerTest.java",
            "src/test/java/org/gedcom4j/validate/FamilyValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/FutureBirthOrDeathValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/GedcomValidationFindingTest.java",
            "src/test/java/org/gedcom4j/validate/GedcomValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/HeaderValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/IndividualEventValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/IndividualValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/Issue111Test.java",
            "src/test/java/org/gedcom4j/validate/LdsIndividualOrdinanceValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/LdsSpouseSealingValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MaleWivesFemaleHusbandsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MarriedAtYoungAgeValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MultimediaValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MultipleChildrenWithSameGivenNameValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MustBeInEnumTest.java",
            "src/test/java/org/gedcom4j/validate/NoteRecordValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/NoteStructureValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/NoteValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/NotesListValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/NullHandlerTest.java",
            "src/test/java/org/gedcom4j/validate/PersonalNameValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/PersonalNameVariationValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/ProblemCodeTest.java",
            "src/test/java/org/gedcom4j/validate/QuadrupletsAndMoreValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/RepositoryValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/SimultaneousBirthsInMultipleLocationsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/SourceValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/SubmitterValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/ValidationFindingTest.java",
            "src/test/java/org/gedcom4j/validate/ValidationResultsTest.java",
            "src/test/java/org/gedcom4j/validate/ValidatorFindingTest.java",
            "src/test/java/org/gedcom4j/validate/ValidatorGedcomStructureTest.java",
            "src/test/java/org/gedcom4j/validate/ValidatorTest.java",
            "src/test/java/org/gedcom4j/writer/CustomFactsWriterTest.java",
            "src/test/java/org/gedcom4j/writer/EventsWithDescriptionsTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551EmailTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551FaxTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551Test.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551WwwTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterConstructionProgressAndCancellationTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java",
            "src/test/java/org/gedcom4j/writer/Issue80WriterTest.java",
            "src/test/java/org/gedcom4j/writer/Issue89Test.java",
            "src/test/java/org/gedcom4j/writer/Issue95Test.java",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java"
        ],
        "changed_files_num": 379,
        "changed_java_files": [
            "src/main/java/org/gedcom4j/comparators/IndividualByLastNameFirstNameComparator.java",
            "src/main/java/org/gedcom4j/comparators/IndividualsByEventDateLastNameFirstNameComparator.java",
            "src/main/java/org/gedcom4j/exception/ValidationException.java",
            "src/main/java/org/gedcom4j/factory/FamilyFactory.java",
            "src/main/java/org/gedcom4j/factory/IndividualFactory.java",
            "src/main/java/org/gedcom4j/io/encoding/AnselMapping.java",
            "src/main/java/org/gedcom4j/io/reader/AnselReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java",
            "src/main/java/org/gedcom4j/io/reader/Utf8Reader.java",
            "src/main/java/org/gedcom4j/model/AbstractAddressableElement.java",
            "src/main/java/org/gedcom4j/model/AbstractCitation.java",
            "src/main/java/org/gedcom4j/model/AbstractElement.java",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java",
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java",
            "src/main/java/org/gedcom4j/model/AbstractNotesElement.java",
            "src/main/java/org/gedcom4j/model/Address.java",
            "src/main/java/org/gedcom4j/model/Association.java",
            "src/main/java/org/gedcom4j/model/ChangeDate.java",
            "src/main/java/org/gedcom4j/model/CharacterSet.java",
            "src/main/java/org/gedcom4j/model/CitationData.java",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java",
            "src/main/java/org/gedcom4j/model/Corporation.java",
            "src/main/java/org/gedcom4j/model/CustomFact.java",
            "src/main/java/org/gedcom4j/model/EventRecorded.java",
            "src/main/java/org/gedcom4j/model/Family.java",
            "src/main/java/org/gedcom4j/model/FamilyChild.java",
            "src/main/java/org/gedcom4j/model/FamilyEvent.java",
            "src/main/java/org/gedcom4j/model/FamilyReference.java",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java",
            "src/main/java/org/gedcom4j/model/FileReference.java",
            "src/main/java/org/gedcom4j/model/Gedcom.java",
            "src/main/java/org/gedcom4j/model/GedcomVersion.java",
            "src/main/java/org/gedcom4j/model/HasAddresses.java",
            "src/main/java/org/gedcom4j/model/HasCustomFacts.java",
            "src/main/java/org/gedcom4j/model/HasNotes.java",
            "src/main/java/org/gedcom4j/model/Header.java",
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java",
            "src/main/java/org/gedcom4j/model/Individual.java",
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java",
            "src/main/java/org/gedcom4j/model/IndividualEvent.java",
            "src/main/java/org/gedcom4j/model/IndividualReference.java",
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java",
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java",
            "src/main/java/org/gedcom4j/model/ModelElement.java",
            "src/main/java/org/gedcom4j/model/MultiStringWithCustomFacts.java",
            "src/main/java/org/gedcom4j/model/Multimedia.java",
            "src/main/java/org/gedcom4j/model/MultimediaReference.java",
            "src/main/java/org/gedcom4j/model/NoteRecord.java",
            "src/main/java/org/gedcom4j/model/NoteStructure.java",
            "src/main/java/org/gedcom4j/model/PersonalName.java",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java",
            "src/main/java/org/gedcom4j/model/Place.java",
            "src/main/java/org/gedcom4j/model/PlaceNameVariation.java",
            "src/main/java/org/gedcom4j/model/Repository.java",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java",
            "src/main/java/org/gedcom4j/model/Source.java",
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java",
            "src/main/java/org/gedcom4j/model/SourceData.java",
            "src/main/java/org/gedcom4j/model/SourceSystem.java",
            "src/main/java/org/gedcom4j/model/StringTree.java",
            "src/main/java/org/gedcom4j/model/StringWithCustomFacts.java",
            "src/main/java/org/gedcom4j/model/Submission.java",
            "src/main/java/org/gedcom4j/model/SubmissionReference.java",
            "src/main/java/org/gedcom4j/model/Submitter.java",
            "src/main/java/org/gedcom4j/model/SubmitterReference.java",
            "src/main/java/org/gedcom4j/model/Trailer.java",
            "src/main/java/org/gedcom4j/model/UserReference.java",
            "src/main/java/org/gedcom4j/model/enumerations/AdoptedByWhichParent.java",
            "src/main/java/org/gedcom4j/model/enumerations/ChildLinkageStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/FamilyEventType.java",
            "src/main/java/org/gedcom4j/model/enumerations/IndividualAttributeType.java",
            "src/main/java/org/gedcom4j/model/enumerations/IndividualEventType.java",
            "src/main/java/org/gedcom4j/model/enumerations/LanguageID.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsBaptismDateStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsChildSealingDateStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsEndowmentDateStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsIndividualOrdinanceType.java",
            "src/main/java/org/gedcom4j/model/enumerations/LdsSpouseSealingDateStatus.java",
            "src/main/java/org/gedcom4j/model/enumerations/PedigreeLinkageType.java",
            "src/main/java/org/gedcom4j/model/enumerations/RestrictionNoticeType.java",
            "src/main/java/org/gedcom4j/model/enumerations/SupportedVersion.java",
            "src/main/java/org/gedcom4j/model/enumerations/package-info.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/AbstractThirdPartyAdapter.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/FamilyHistorianAdapter.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/FamilyTreeMaker3Adapter.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/LegacyFamilyTree8Adapter.java",
            "src/main/java/org/gedcom4j/model/thirdpartyadapters/package-info.java",
            "src/main/java/org/gedcom4j/parser/AbstractEventParser.java",
            "src/main/java/org/gedcom4j/parser/AbstractParser.java",
            "src/main/java/org/gedcom4j/parser/AddressParser.java",
            "src/main/java/org/gedcom4j/parser/AssociationParser.java",
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java",
            "src/main/java/org/gedcom4j/parser/CitationListParser.java",
            "src/main/java/org/gedcom4j/parser/CorporationParser.java",
            "src/main/java/org/gedcom4j/parser/CustomFactParser.java",
            "src/main/java/org/gedcom4j/parser/FamilyChildParser.java",
            "src/main/java/org/gedcom4j/parser/FamilyEventParser.java",
            "src/main/java/org/gedcom4j/parser/FamilyParser.java",
            "src/main/java/org/gedcom4j/parser/FileReference551Parser.java",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/GedcomParser.java",
            "src/main/java/org/gedcom4j/parser/GedcomVersionParser.java",
            "src/main/java/org/gedcom4j/parser/HeaderParser.java",
            "src/main/java/org/gedcom4j/parser/HeaderSourceDataParser.java",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java",
            "src/main/java/org/gedcom4j/parser/IndividualAttributeParser.java",
            "src/main/java/org/gedcom4j/parser/IndividualEventParser.java",
            "src/main/java/org/gedcom4j/parser/IndividualParser.java",
            "src/main/java/org/gedcom4j/parser/LdsIndividualOrdinanceParser.java",
            "src/main/java/org/gedcom4j/parser/LdsSpouseSealingParser.java",
            "src/main/java/org/gedcom4j/parser/LinePieces.java",
            "src/main/java/org/gedcom4j/parser/MultimediaLinkParser.java",
            "src/main/java/org/gedcom4j/parser/MultimediaParser.java",
            "src/main/java/org/gedcom4j/parser/NoteRecordParser.java",
            "src/main/java/org/gedcom4j/parser/NoteStructureListParser.java",
            "src/main/java/org/gedcom4j/parser/PersonalNameParser.java",
            "src/main/java/org/gedcom4j/parser/PlaceParser.java",
            "src/main/java/org/gedcom4j/parser/RepositoryParser.java",
            "src/main/java/org/gedcom4j/parser/SourceParser.java",
            "src/main/java/org/gedcom4j/parser/SourceSystemParser.java",
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java",
            "src/main/java/org/gedcom4j/parser/StringTreeBuilder.java",
            "src/main/java/org/gedcom4j/parser/SubmissionParser.java",
            "src/main/java/org/gedcom4j/parser/SubmitterParser.java",
            "src/main/java/org/gedcom4j/parser/Tag.java",
            "src/main/java/org/gedcom4j/parser/UserReferenceParser.java",
            "src/main/java/org/gedcom4j/query/Finder.java",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java",
            "src/main/java/org/gedcom4j/relationship/Relationship.java",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java",
            "src/main/java/org/gedcom4j/relationship/SimpleRelationship.java",
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java",
            "src/main/java/org/gedcom4j/validate/AddressValidator.java",
            "src/main/java/org/gedcom4j/validate/AutoRepair.java",
            "src/main/java/org/gedcom4j/validate/AutoRepairResponder.java",
            "src/main/java/org/gedcom4j/validate/BirthsToOldParentsValidator.java",
            "src/main/java/org/gedcom4j/validate/BirthsToYoungParentsValidator.java",
            "src/main/java/org/gedcom4j/validate/BornBeforeAncestorsValidator.java",
            "src/main/java/org/gedcom4j/validate/CircularAncestryValidator.java",
            "src/main/java/org/gedcom4j/validate/CitationValidator.java",
            "src/main/java/org/gedcom4j/validate/CouplesWithLargeAgeDifferencesValidator.java",
            "src/main/java/org/gedcom4j/validate/DifferentSurnamesThanParentsValidator.java",
            "src/main/java/org/gedcom4j/validate/DuplicateHandler.java",
            "src/main/java/org/gedcom4j/validate/EventValidator.java",
            "src/main/java/org/gedcom4j/validate/FamilyChildValidator.java",
            "src/main/java/org/gedcom4j/validate/FamilySpouseValidator.java",
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java",
            "src/main/java/org/gedcom4j/validate/FutureBirthOrDeathValidator.java",
            "src/main/java/org/gedcom4j/validate/GedcomValidationFinding.java",
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java",
            "src/main/java/org/gedcom4j/validate/HeaderValidator.java",
            "src/main/java/org/gedcom4j/validate/IndividualAttributeValidator.java",
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java",
            "src/main/java/org/gedcom4j/validate/LdsIndividualOrdinanceValidator.java",
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java",
            "src/main/java/org/gedcom4j/validate/MaleWivesFemaleHusbandsValidator.java",
            "src/main/java/org/gedcom4j/validate/MarriedAtYoungAgeValidator.java",
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java",
            "src/main/java/org/gedcom4j/validate/MultipleChildrenWithSameGivenNameValidator.java",
            "src/main/java/org/gedcom4j/validate/NameVariationValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteRecordValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteStructureListValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteStructureValidator.java",
            "src/main/java/org/gedcom4j/validate/NoteValidator.java",
            "src/main/java/org/gedcom4j/validate/NotesValidator.java",
            "src/main/java/org/gedcom4j/validate/NullHandler.java",
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java",
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java",
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java",
            "src/main/java/org/gedcom4j/validate/ProblemCode.java",
            "src/main/java/org/gedcom4j/validate/QuadrupletsAndMoreValidator.java",
            "src/main/java/org/gedcom4j/validate/RepositoryValidator.java",
            "src/main/java/org/gedcom4j/validate/Severity.java",
            "src/main/java/org/gedcom4j/validate/SimultaneousBirthsInMultipleLocationsValidator.java",
            "src/main/java/org/gedcom4j/validate/SourceValidator.java",
            "src/main/java/org/gedcom4j/validate/SubmissionValidator.java",
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java",
            "src/main/java/org/gedcom4j/validate/ValidationResults.java",
            "src/main/java/org/gedcom4j/validate/Validator.java",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java",
            "src/main/java/org/gedcom4j/writer/AddressEmitter.java",
            "src/main/java/org/gedcom4j/writer/ChangeDateEmitter.java",
            "src/main/java/org/gedcom4j/writer/CitationEmitter.java",
            "src/main/java/org/gedcom4j/writer/EventEmitter.java",
            "src/main/java/org/gedcom4j/writer/FamilyEmitter.java",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java",
            "src/main/java/org/gedcom4j/writer/HeaderEmitter.java",
            "src/main/java/org/gedcom4j/writer/IndividualEmitter.java",
            "src/main/java/org/gedcom4j/writer/Multimedia551Emitter.java",
            "src/main/java/org/gedcom4j/writer/Multimedia55Emitter.java",
            "src/main/java/org/gedcom4j/writer/MultimediaLinksEmitter.java",
            "src/main/java/org/gedcom4j/writer/NoteRecordEmitter.java",
            "src/main/java/org/gedcom4j/writer/NoteStructureEmitter.java",
            "src/main/java/org/gedcom4j/writer/PlaceEmitter.java",
            "src/main/java/org/gedcom4j/writer/RepositoryEmitter.java",
            "src/main/java/org/gedcom4j/writer/SourceEmitter.java",
            "src/main/java/org/gedcom4j/writer/SubmissionEmitter.java",
            "src/main/java/org/gedcom4j/writer/SubmittersEmitter.java",
            "src/test/java/org/gedcom4j/CustomTagParseWriteTortureTest.java",
            "src/test/java/org/gedcom4j/comparators/IndividualByEventDateLastNameFirstNameComparatorTest.java",
            "src/test/java/org/gedcom4j/exception/ValidationExceptionTest.java",
            "src/test/java/org/gedcom4j/factory/FamilyFactoryTest.java",
            "src/test/java/org/gedcom4j/factory/IndividualFactoryTest.java",
            "src/test/java/org/gedcom4j/io/event/FileProgressEventTest.java",
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java",
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java",
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java",
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java",
            "src/test/java/org/gedcom4j/model/AbstractCopyTest.java",
            "src/test/java/org/gedcom4j/model/AddressCopyTest.java",
            "src/test/java/org/gedcom4j/model/AssociationCopyTest.java",
            "src/test/java/org/gedcom4j/model/AssociationTest.java",
            "src/test/java/org/gedcom4j/model/ChangeDateCopyTest.java",
            "src/test/java/org/gedcom4j/model/CharacterSetCopyTest.java",
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java",
            "src/test/java/org/gedcom4j/model/CitationDataCopyTest.java",
            "src/test/java/org/gedcom4j/model/CitationDataTest.java",
            "src/test/java/org/gedcom4j/model/CitationWithSourceCopyTest.java",
            "src/test/java/org/gedcom4j/model/CitationWithoutSourceCopyTest.java",
            "src/test/java/org/gedcom4j/model/CorporationCopyTest.java",
            "src/test/java/org/gedcom4j/model/EventRecordedCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyChildCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyEventCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java",
            "src/test/java/org/gedcom4j/model/FamilySpouseCopyTest.java",
            "src/test/java/org/gedcom4j/model/FamilyTest.java",
            "src/test/java/org/gedcom4j/model/FileReferenceCopyTest.java",
            "src/test/java/org/gedcom4j/model/GedcomCopyTest.java",
            "src/test/java/org/gedcom4j/model/GedcomTest.java",
            "src/test/java/org/gedcom4j/model/GedcomVersionCopyTest.java",
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java",
            "src/test/java/org/gedcom4j/model/HeaderCopyTest.java",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataCopyTest.java",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java",
            "src/test/java/org/gedcom4j/model/IndividualAttributeCopyTest.java",
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java",
            "src/test/java/org/gedcom4j/model/IndividualCopyTest.java",
            "src/test/java/org/gedcom4j/model/IndividualEventCopyTest.java",
            "src/test/java/org/gedcom4j/model/IndividualTest.java",
            "src/test/java/org/gedcom4j/model/Issue115Test.java",
            "src/test/java/org/gedcom4j/model/Issue88Test.java",
            "src/test/java/org/gedcom4j/model/LdsIndividualOrdinanceCopyTest.java",
            "src/test/java/org/gedcom4j/model/LdsSpouseSealingCopyTest.java",
            "src/test/java/org/gedcom4j/model/LdsSpouseSealingTest.java",
            "src/test/java/org/gedcom4j/model/MultiStringWithCustomFactsCopyTest.java",
            "src/test/java/org/gedcom4j/model/MultimediaCopyTest.java",
            "src/test/java/org/gedcom4j/model/MultimediaReferenceCopyTest.java",
            "src/test/java/org/gedcom4j/model/NameVariationTest.java",
            "src/test/java/org/gedcom4j/model/NoteRecordCopyTest.java",
            "src/test/java/org/gedcom4j/model/NoteStructureCopyTest.java",
            "src/test/java/org/gedcom4j/model/PersonalNameCopyTest.java",
            "src/test/java/org/gedcom4j/model/PersonalNameVariationCopyTest.java",
            "src/test/java/org/gedcom4j/model/PersonalNameVariationTest.java",
            "src/test/java/org/gedcom4j/model/PlaceCopyTest.java",
            "src/test/java/org/gedcom4j/model/PlaceNameVariationCopyTest.java",
            "src/test/java/org/gedcom4j/model/RepositoryCitationCopyTest.java",
            "src/test/java/org/gedcom4j/model/RepositoryCopyTest.java",
            "src/test/java/org/gedcom4j/model/RepositoryTest.java",
            "src/test/java/org/gedcom4j/model/SourceCallNumberCopyTest.java",
            "src/test/java/org/gedcom4j/model/SourceCallNumberTest.java",
            "src/test/java/org/gedcom4j/model/SourceCopyTest.java",
            "src/test/java/org/gedcom4j/model/SourceDataCopyTest.java",
            "src/test/java/org/gedcom4j/model/SourceSystemCopyTest.java",
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java",
            "src/test/java/org/gedcom4j/model/SourceTest.java",
            "src/test/java/org/gedcom4j/model/StringTreeCopyTest.java",
            "src/test/java/org/gedcom4j/model/StringTreeTest.java",
            "src/test/java/org/gedcom4j/model/StringWithCustomFactsCopyTest.java",
            "src/test/java/org/gedcom4j/model/StringWithCustomFactsTest.java",
            "src/test/java/org/gedcom4j/model/SubmissionCopyTest.java",
            "src/test/java/org/gedcom4j/model/SubmitterCopyTest.java",
            "src/test/java/org/gedcom4j/model/SubmitterReferenceCopyTest.java",
            "src/test/java/org/gedcom4j/model/TestHelper.java",
            "src/test/java/org/gedcom4j/model/UserReferenceCopyTest.java",
            "src/test/java/org/gedcom4j/model/enumerations/FamilyEventTypeTest.java",
            "src/test/java/org/gedcom4j/model/enumerations/IndividualEventTypeTest.java",
            "src/test/java/org/gedcom4j/model/enumerations/SupportedVersionTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/FamilyHistorianAdapterTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/FamilyTreeMaker3AdapterImmutabilityTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/FamilyTreeMaker3AdapterNegativeTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/FamilyTreeMaker3AdapterPositiveTest.java",
            "src/test/java/org/gedcom4j/model/thirdpartyadapters/LegacyFamilyTree8AdapterTest.java",
            "src/test/java/org/gedcom4j/parser/CustomFactParserTest.java",
            "src/test/java/org/gedcom4j/parser/DateParserFrenchRepublicanTest.java",
            "src/test/java/org/gedcom4j/parser/DateParserRangePeriodTest.java",
            "src/test/java/org/gedcom4j/parser/FamilyEventTypeParseTest.java",
            "src/test/java/org/gedcom4j/parser/GedcomParser551Test.java",
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java",
            "src/test/java/org/gedcom4j/parser/Issue100Test.java",
            "src/test/java/org/gedcom4j/parser/Issue102Test.java",
            "src/test/java/org/gedcom4j/parser/Issue129Test.java",
            "src/test/java/org/gedcom4j/parser/Issue32Test.java",
            "src/test/java/org/gedcom4j/parser/Issue61Test.java",
            "src/test/java/org/gedcom4j/parser/Issue62Test.java",
            "src/test/java/org/gedcom4j/parser/Issue63Test.java",
            "src/test/java/org/gedcom4j/parser/Issue80ParserTest.java",
            "src/test/java/org/gedcom4j/parser/Issue87Test.java",
            "src/test/java/org/gedcom4j/parser/Issue96Test.java",
            "src/test/java/org/gedcom4j/parser/StressFileSpecialCharacterReadTest.java",
            "src/test/java/org/gedcom4j/parser/TagTest.java",
            "src/test/java/org/gedcom4j/parser/event/ParseProgressEventTest.java",
            "src/test/java/org/gedcom4j/query/FinderTest.java",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java",
            "src/test/java/org/gedcom4j/relationship/RelationshipCalculatorTest.java",
            "src/test/java/org/gedcom4j/validate/AbstractValidatorTestCase.java",
            "src/test/java/org/gedcom4j/validate/AutoRepairTest.java",
            "src/test/java/org/gedcom4j/validate/BirthsToOldParentsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/BirthsToYoungParentsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/BornBeforeAncestorsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/CircularAncestryValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/CitationValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/CouplesWithLargeAgeDifferencesValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/DifferentSurnamesThanParentsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java",
            "src/test/java/org/gedcom4j/validate/DuplicateHandlerTest.java",
            "src/test/java/org/gedcom4j/validate/FamilyValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/FutureBirthOrDeathValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/GedcomValidationFindingTest.java",
            "src/test/java/org/gedcom4j/validate/GedcomValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/HeaderValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/IndividualEventValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/IndividualValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/Issue111Test.java",
            "src/test/java/org/gedcom4j/validate/LdsIndividualOrdinanceValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/LdsSpouseSealingValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MaleWivesFemaleHusbandsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MarriedAtYoungAgeValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MultimediaValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MultipleChildrenWithSameGivenNameValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/MustBeInEnumTest.java",
            "src/test/java/org/gedcom4j/validate/NoteRecordValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/NoteStructureValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/NoteValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/NotesListValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/NullHandlerTest.java",
            "src/test/java/org/gedcom4j/validate/PersonalNameValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/PersonalNameVariationValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/ProblemCodeTest.java",
            "src/test/java/org/gedcom4j/validate/QuadrupletsAndMoreValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/RepositoryValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/SimultaneousBirthsInMultipleLocationsValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/SourceValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/SubmitterValidatorTest.java",
            "src/test/java/org/gedcom4j/validate/ValidationFindingTest.java",
            "src/test/java/org/gedcom4j/validate/ValidationResultsTest.java",
            "src/test/java/org/gedcom4j/validate/ValidatorFindingTest.java",
            "src/test/java/org/gedcom4j/validate/ValidatorGedcomStructureTest.java",
            "src/test/java/org/gedcom4j/validate/ValidatorTest.java",
            "src/test/java/org/gedcom4j/writer/CustomFactsWriterTest.java",
            "src/test/java/org/gedcom4j/writer/EventsWithDescriptionsTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551EmailTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551FaxTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551Test.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551WwwTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterConstructionProgressAndCancellationTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java",
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java",
            "src/test/java/org/gedcom4j/writer/Issue80WriterTest.java",
            "src/test/java/org/gedcom4j/writer/Issue89Test.java",
            "src/test/java/org/gedcom4j/writer/Issue95Test.java",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java"
        ],
        "changed_java_files_num": 366,
        "failed_test_list": [],
        "passed_test_list": [
            "Issue89Test",
            "Issue100Test",
            "IndividualAttributeTest",
            "Issue81ReaderTest",
            "IndividualValidatorTest",
            "AnselWriterCancellationTest",
            "Issue61Test",
            "SupportedVersionTest",
            "GedcomWriterFileProgressAndCancellationTest",
            "LongLineReaderTest",
            "GedcomWriterConstructionProgressAndCancellationTest",
            "MultimediaValidatorTest",
            "GedcomValidationExceptionTest",
            "GedcomParserTest",
            "UnicodeLittleEndianReaderListenerTest",
            "Issue80ParserTest",
            "LdsSpouseSealingValidatorTest",
            "PersonalNameValidatorTest",
            "StringTreeTest",
            "AssociationTest",
            "RelationshipCalculatorTest",
            "UnicodeBigEndianReaderCancellationTest",
            "Issue63Test",
            "Issue96Test",
            "GedcomWriter551Test",
            "FamilyEventTypeTest",
            "SeverityTest",
            "IndividualEventTypeTest",
            "SourceCallNumberTest",
            "CitationDataTest",
            "UnicodeLittleEndianReaderCancellationTest",
            "UnicodeBigEndianReaderListenerTest",
            "Utf8ReaderListenerTest",
            "SourceSystemTest",
            "IndividualEventValidatorTest",
            "GedcomWriterExceptionTest",
            "GedcomTest",
            "GedcomWriterVersionDataMismatchExceptionTest",
            "IndividualByLastNameFirstNameComparatorTest",
            "PersonalNameVariationTest",
            "GedcomFileReaderTest",
            "Issue62Test",
            "HebrewCalendarParserTest",
            "Issue102Test",
            "Issue80WriterTest",
            "GedcomFileWriterTest",
            "Issue87Test",
            "FrenchRepublicanCalendarParserTest",
            "TrailerTest",
            "Issue98Test",
            "AnselReaderListenerTest",
            "GedcomParserExceptionTest",
            "GedcomParser551Test",
            "FamilyEventTest",
            "DuplicateEliminatorTest",
            "AsciiReaderCancellationTest",
            "RelationshipTest",
            "AnselHandlerTest",
            "AnselReaderCancellationTest",
            "ParseAllSamplesTest",
            "FamilyTest",
            "Utf8ReaderCancellationTest",
            "GedcomValidatorTest",
            "UnsupportedVersionExceptionTest",
            "HeaderValidatorTest",
            "FamilyValidatorTest",
            "SimpleRelationshipTest",
            "IndividualTest",
            "NameVariationTest",
            "TagTest",
            "RepositoryTest",
            "AncestryCalculatorTest",
            "Issue97Test",
            "UnsupportedGedcomCharsetExceptionTest",
            "StringTreeBuilderTest",
            "Issue64Test",
            "EventsWithDescriptionsTest",
            "Issue95Test",
            "SourceTest",
            "StressFileSpecialCharacterReadTest",
            "AnselMappingTest",
            "PersonalNameVariationValidatorTest",
            "Issue99Test",
            "GedcomValidationFindingTest",
            "Issue115Test",
            "ParserProgressAndCancellationTest",
            "DateParserTest",
            "AnselWriterTest",
            "CitationValidatorTest",
            "Issue32Test",
            "LdsSpouseSealingTest",
            "AsciiReaderListenerTest",
            "StringCanonicalizerTest",
            "FamilyEventTypeParseTest",
            "GedcomWriterTest",
            "SubmitterValidatorTest",
            "GedcomVersionTest",
            "CharacterSetTest",
            "HeaderSourceDataTest",
            "Issue88Test",
            "CorporationTest",
            "SourceValidatorTest",
            "Issue111Test",
            "NoteValidatorTest",
            "FileProgressEventTest"
        ],
        "tests_cases_num": {
            "IndividualByLastNameFirstNameComparatorTest": 6,
            "GedcomValidationExceptionTest": 4,
            "GedcomWriterExceptionTest": 4,
            "GedcomWriterVersionDataMismatchExceptionTest": 4,
            "UnsupportedGedcomCharsetExceptionTest": 4,
            "UnsupportedVersionExceptionTest": 4,
            "AnselHandlerTest": 6,
            "AnselMappingTest": 2,
            "FileProgressEventTest": 2,
            "AnselReaderCancellationTest": 1,
            "AnselReaderListenerTest": 3,
            "AsciiReaderCancellationTest": 1,
            "AsciiReaderListenerTest": 3,
            "GedcomFileReaderTest": 15,
            "Issue81ReaderTest": 5,
            "LongLineReaderTest": 1,
            "UnicodeBigEndianReaderCancellationTest": 1,
            "UnicodeBigEndianReaderListenerTest": 3,
            "UnicodeLittleEndianReaderCancellationTest": 1,
            "UnicodeLittleEndianReaderListenerTest": 3,
            "Utf8ReaderCancellationTest": 1,
            "Utf8ReaderListenerTest": 3,
            "AnselWriterCancellationTest": 1,
            "AnselWriterTest": 1,
            "GedcomFileWriterTest": 27,
            "AssociationTest": 2,
            "CharacterSetTest": 2,
            "CitationDataTest": 4,
            "CorporationTest": 2,
            "FamilyEventTest": 17,
            "FamilyEventTypeTest": 2,
            "FamilyTest": 9,
            "GedcomTest": 3,
            "GedcomVersionTest": 2,
            "HeaderSourceDataTest": 2,
            "IndividualAttributeTest": 3,
            "IndividualEventTypeTest": 2,
            "IndividualTest": 11,
            "Issue115Test": 1,
            "Issue88Test": 3,
            "Issue99Test": 1,
            "LdsSpouseSealingTest": 3,
            "NameVariationTest": 3,
            "PersonalNameVariationTest": 3,
            "RepositoryTest": 2,
            "SourceCallNumberTest": 3,
            "SourceSystemTest": 2,
            "SourceTest": 3,
            "StringTreeTest": 4,
            "SupportedVersionTest": 1,
            "TrailerTest": 2,
            "DateParserTest": 49,
            "FamilyEventTypeParseTest": 1,
            "FrenchRepublicanCalendarParserTest": 2,
            "GedcomParser551Test": 19,
            "GedcomParserExceptionTest": 4,
            "GedcomParserTest": 10,
            "HebrewCalendarParserTest": 1,
            "Issue100Test": 2,
            "Issue102Test": 3,
            "Issue32Test": 1,
            "Issue61Test": 2,
            "Issue62Test": 8,
            "Issue63Test": 1,
            "Issue64Test": 1,
            "Issue80ParserTest": 1,
            "Issue87Test": 1,
            "Issue96Test": 1,
            "Issue98Test": 3,
            "ParseAllSamplesTest": 1,
            "ParserProgressAndCancellationTest": 2,
            "StressFileSpecialCharacterReadTest": 4,
            "StringCanonicalizerTest": 4,
            "StringTreeBuilderTest": 1,
            "TagTest": 6,
            "AncestryCalculatorTest": 13,
            "RelationshipCalculatorTest": 8,
            "RelationshipTest": 5,
            "SimpleRelationshipTest": 3,
            "CitationValidatorTest": 1,
            "DuplicateEliminatorTest": 5,
            "FamilyValidatorTest": 8,
            "GedcomValidationFindingTest": 3,
            "GedcomValidatorTest": 4,
            "HeaderValidatorTest": 5,
            "IndividualEventValidatorTest": 1,
            "IndividualValidatorTest": 2,
            "Issue111Test": 1,
            "LdsSpouseSealingValidatorTest": 8,
            "MultimediaValidatorTest": 1,
            "NoteValidatorTest": 2,
            "PersonalNameValidatorTest": 9,
            "PersonalNameVariationValidatorTest": 1,
            "SeverityTest": 2,
            "SourceValidatorTest": 4,
            "SubmitterValidatorTest": 6,
            "EventsWithDescriptionsTest": 2,
            "GedcomWriter551Test": 15,
            "GedcomWriterConstructionProgressAndCancellationTest": 2,
            "GedcomWriterFileProgressAndCancellationTest": 12,
            "GedcomWriterTest": 10,
            "Issue80WriterTest": 1,
            "Issue89Test": 1,
            "Issue95Test": 1,
            "Issue97Test": 1
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+\t<version>4.0.0</version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<reuseForks>true</reuseForks>\n+\t\t\t\t\t<forkCount>2</forkCount>\n+\t\t\t\t\t<parallel>methods</parallel>\n+\t\t\t\t\t<useUnlimitedThreads>true</useUnlimitedThreads>\n+\t\t\t\t</configuration>\n+    @Override\n+    public ValidationException() {\n+    public ValidationException(String message) {\n+    public ValidationException(String message, Throwable cause) {\n+    public ValidationException(Throwable cause) {\n+        result.setHusband(new IndividualReference(father));\n+        result.setWife(new IndividualReference(mother));\n+        if (children != null) {\n+            for (Individual child : children) {\n+                result.getChildren(true).add(new IndividualReference(child));\n+            }\n+        String deathDateString = null;\n+        if (death != null) {\n+            deathDateString = new SimpleDateFormat(\"d MMM yyyy\", Locale.US).format(death).toUpperCase(Locale.US);\n+        }\n+        String birthDateString = null;\n+        if (birth != null) {\n+            birthDateString = new SimpleDateFormat(\"d MMM yyyy\", Locale.US).format(birth).toUpperCase(Locale.US);\n+        }\n+        return create(g, givenName, surname, sex, birthDateString, birthPlace, deathDateString, deathPlace);\n+    }\n+    @SuppressWarnings(\"checkstyle:ParameterNumber\")\n+    public Individual create(Gedcom g, String givenName, String surname, Sex sex, String birthDateString, String birthPlace,\n+            String deathDateString, String deathPlace) {\n+            result.setSex(new StringWithCustomFacts(sex.getCode()));\n+        if (birthDateString != null || birthPlace != null) {\n+            if (birthDateString != null) {\n+                b.setDate(new StringWithCustomFacts(birthDateString));\n+        if (deathDateString != null || deathPlace != null) {\n+            if (deathDateString != null) {\n+                b.setDate(new StringWithCustomFacts(deathDateString));\n+        return c >= 0x0300 && c <= 0x0333 || c >= 0xFE20 && c <= 0xFE23;\n+        return lineBufferIdx >= 7 && Character.isDigit(lineBuffer[lineBufferIdx - 7]) && lineBuffer[lineBufferIdx - 6] == ' '\n+                        - 3] == 'N' && lineBuffer[lineBufferIdx - 2] == 'C' && lineBuffer[lineBufferIdx - 1] == ' ';\n+            if (beginningOfFile && currChar1 == 0xFE && currChar2 == 0xFF) {\n+            if ((currChar1 == 0x00 && currChar2 == 0x0D || currChar1 == 0x00 && currChar2 == 0x0A) && lineBuffer.length() > 0) {\n+            if (beginningOfFile && currChar1 == 0xFF && currChar2 == 0xFE) {\n+            if (lineBuffer.length() > 0 && (currChar1 == 0x0D && currChar2 == 0x00 || currChar1 == 0x0A && currChar2 == 0x00)) {\n+        if (s != null && s.length() > 0 && s.charAt(0) == (char) 0xFEFF) {\n+    protected List<StringWithCustomFacts> emails = getEmails(Options.isCollectionInitializationEnabled());\n+    protected List<StringWithCustomFacts> faxNumbers = getFaxNumbers(Options.isCollectionInitializationEnabled());\n+    protected List<StringWithCustomFacts> phoneNumbers = getPhoneNumbers(Options.isCollectionInitializationEnabled());\n+    protected List<StringWithCustomFacts> wwwUrls = getWwwUrls(Options.isCollectionInitializationEnabled());\n+    public AbstractAddressableElement() {\n+    }\n+    public AbstractAddressableElement(AbstractAddressableElement other) {\n+        super(other);\n+        if (other.address != null) {\n+            address = new Address(other.address);\n+        }\n+        if (other.emails != null) {\n+            emails = new ArrayList<>();\n+            for (StringWithCustomFacts e : other.emails) {\n+                emails.add(new StringWithCustomFacts(e));\n+            }\n+        }\n+        if (other.faxNumbers != null) {\n+            faxNumbers = new ArrayList<>();\n+            for (StringWithCustomFacts swct : other.faxNumbers) {\n+                faxNumbers.add(new StringWithCustomFacts(swct));\n+            }\n+        }\n+        if (other.phoneNumbers != null) {\n+            phoneNumbers = new ArrayList<>();\n+            for (StringWithCustomFacts swct : other.phoneNumbers) {\n+                phoneNumbers.add(new StringWithCustomFacts(swct));\n+            }\n+        }\n+        if (other.wwwUrls != null) {\n+            wwwUrls = new ArrayList<>();\n+            for (StringWithCustomFacts swct : other.wwwUrls) {\n+                wwwUrls.add(new StringWithCustomFacts(swct));\n+            }\n+        }\n+    }\n+    public List<StringWithCustomFacts> getEmails() {\n+    public List<StringWithCustomFacts> getEmails(boolean initializeIfNeeded) {\n+    public List<StringWithCustomFacts> getFaxNumbers() {\n+    public List<StringWithCustomFacts> getFaxNumbers(boolean initializeIfNeeded) {\n+    public List<StringWithCustomFacts> getPhoneNumbers() {\n+    public List<StringWithCustomFacts> getPhoneNumbers(boolean initializeIfNeeded) {\n+    public List<StringWithCustomFacts> getWwwUrls() {\n+    public List<StringWithCustomFacts> getWwwUrls(boolean initializeIfNeeded) {\n+        result = prime * result + (address == null ? 0 : address.hashCode());\n+        result = prime * result + (emails == null ? 0 : emails.hashCode());\n+        result = prime * result + (faxNumbers == null ? 0 : faxNumbers.hashCode());\n+        result = prime * result + (phoneNumbers == null ? 0 : phoneNumbers.hashCode());\n+        result = prime * result + (wwwUrls == null ? 0 : wwwUrls.hashCode());\n+    protected StringWithCustomFacts certainty;\n+    protected List<MultimediaReference> multimedia = getMultimedia(Options.isCollectionInitializationEnabled());\n+    public AbstractCitation() {\n+    }\n+    public AbstractCitation(AbstractCitation other) {\n+        super(other);\n+    }\n+    public StringWithCustomFacts getCertainty() {\n+        return certainty;\n+    }\n+    public void setCertainty(String certainty) {\n+        this.certainty = certainty == null ? null : new StringWithCustomFacts(certainty);\n+    }\n+    public void setCertainty(StringWithCustomFacts certainty) {\n+        this.certainty = certainty;\n+    }\n+    public List<MultimediaReference> getMultimedia() {\n+        return multimedia;\n+    }\n+    public List<MultimediaReference> getMultimedia(boolean initializeIfNeeded) {\n+        if (initializeIfNeeded && multimedia == null) {\n+            multimedia = new ArrayList<>(0);\n+        }\n+        return multimedia;\n+    }\n+    protected List<CustomFact> customFacts = getCustomFacts(Options.isCollectionInitializationEnabled());\n+    public AbstractElement() {\n+        super();\n+    }\n+    public AbstractElement(AbstractElement other) {\n+        super();\n+        if (other.customFacts != null) {\n+            customFacts = new ArrayList<>();\n+            for (CustomFact cf : other.customFacts) {\n+                if (cf != null) {\n+                    customFacts.add(new CustomFact(cf));\n+                }\n+            }\n+        }\n+    }\n+        if (getCustomFacts() == null) {\n+            if (other.getCustomFacts() != null) {\n+        } else if (!getCustomFacts().equals(other.getCustomFacts())) {\n+    @Override\n+    public List<CustomFact> getCustomFacts() {\n+        return customFacts;\n+    @Override\n+    public List<CustomFact> getCustomFacts(boolean initializeIfNeeded) {\n+        if (initializeIfNeeded && customFacts == null) {\n+            customFacts = new ArrayList<>(0);\n+        return customFacts;\n+    }\n+    @Override\n+    public List<CustomFact> getCustomFactsWithTag(String tag) {\n+        List<CustomFact> result = new ArrayList<>();\n+        if (customFacts != null) {\n+            for (CustomFact cf : customFacts) {\n+                if (cf.getTag() != null && cf.getTag().equals(tag)) {\n+                    result.add(cf);\n+                }\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+        result = prime * result + (getCustomFacts() == null ? 0 : getCustomFacts().hashCode());\n+        if (customFacts != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+    private StringWithCustomFacts age;\n+    private StringWithCustomFacts cause;\n+    private StringWithCustomFacts date;\n+    private StringWithCustomFacts description;\n+    private List<MultimediaReference> multimedia = getMultimedia(Options.isCollectionInitializationEnabled());\n+    private StringWithCustomFacts religiousAffiliation;\n+    private StringWithCustomFacts respAgency;\n+    private StringWithCustomFacts restrictionNotice;\n+    private StringWithCustomFacts subType;\n+    public AbstractEvent() {\n+    }\n+    public AbstractEvent(AbstractEvent other) {\n+        super(other);\n+        if (other.age != null) {\n+            age = new StringWithCustomFacts(other.age);\n+        }\n+        if (other.cause != null) {\n+            cause = new StringWithCustomFacts(other.cause);\n+        }\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.date != null) {\n+            date = new StringWithCustomFacts(other.date);\n+        }\n+        if (other.description != null) {\n+            description = new StringWithCustomFacts(other.description);\n+        }\n+        if (other.multimedia != null) {\n+            multimedia = new ArrayList<>();\n+            for (MultimediaReference m : other.multimedia) {\n+                multimedia.add(new MultimediaReference(m));\n+            }\n+        }\n+        if (other.place != null) {\n+            place = new Place(other.place);\n+        }\n+        if (other.religiousAffiliation != null) {\n+            religiousAffiliation = new StringWithCustomFacts(other.religiousAffiliation);\n+        }\n+        if (other.respAgency != null) {\n+            respAgency = new StringWithCustomFacts(other.respAgency);\n+        }\n+        if (other.restrictionNotice != null) {\n+            restrictionNotice = new StringWithCustomFacts(other.restrictionNotice);\n+        }\n+        if (other.subType != null) {\n+            subType = new StringWithCustomFacts(other.subType);\n+        }\n+        yNull = other.yNull;\n+    }\n+    public StringWithCustomFacts getAge() {\n+    public StringWithCustomFacts getCause() {\n+    @Override\n+    @Override\n+    public StringWithCustomFacts getDate() {\n+    public StringWithCustomFacts getDescription() {\n+    public List<MultimediaReference> getMultimedia() {\n+    public List<MultimediaReference> getMultimedia(boolean initializeIfNeeded) {\n+    public StringWithCustomFacts getReligiousAffiliation() {\n+    public StringWithCustomFacts getRespAgency() {\n+    public StringWithCustomFacts getRestrictionNotice() {\n+    public StringWithCustomFacts getSubType() {\n+    public String getYNull() {\n+    public void setAge(String age) {\n+        this.age = age == null ? null : new StringWithCustomFacts(age);\n+    }\n+    public void setAge(StringWithCustomFacts age) {\n+    public void setCause(String cause) {\n+        this.cause = cause == null ? null : new StringWithCustomFacts(cause);\n+    }\n+    public void setCause(StringWithCustomFacts cause) {\n+    public void setDate(String date) {\n+        this.date = date == null ? null : new StringWithCustomFacts(date);\n+    }\n+    public void setDate(StringWithCustomFacts date) {\n+    public void setDescription(String description) {\n+        this.description = description == null ? null : new StringWithCustomFacts(description);\n+    }\n+    public void setDescription(StringWithCustomFacts description) {\n+    public void setReligiousAffiliation(String religiousAffiliation) {\n+        this.religiousAffiliation = religiousAffiliation == null ? null : new StringWithCustomFacts(religiousAffiliation);\n+    }\n+    public void setReligiousAffiliation(StringWithCustomFacts religiousAffiliation) {\n+    public void setRespAgency(String respAgency) {\n+        this.respAgency = respAgency == null ? null : new StringWithCustomFacts(respAgency);\n+    }\n+    public void setRespAgency(StringWithCustomFacts respAgency) {\n+    public void setRestrictionNotice(String restrictionNotice) {\n+        this.restrictionNotice = restrictionNotice == null ? null : new StringWithCustomFacts(restrictionNotice);\n+    }\n+    public void setRestrictionNotice(StringWithCustomFacts restrictionNotice) {\n+    public void setSubType(String subType) {\n+        this.subType = subType == null ? null : new StringWithCustomFacts(subType);\n+    }\n+    public void setSubType(StringWithCustomFacts subType) {\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public void setYNull(String yNull) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+    protected StringWithCustomFacts date;\n+    protected StringWithCustomFacts place;\n+    protected StringWithCustomFacts status;\n+    protected StringWithCustomFacts temple;\n+    public AbstractLdsOrdinance() {\n+    }\n+    public AbstractLdsOrdinance(AbstractLdsOrdinance other) {\n+        super(other);\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.date != null) {\n+            date = new StringWithCustomFacts(other.date);\n+        }\n+        if (other.place != null) {\n+            place = new StringWithCustomFacts(other.place);\n+        }\n+        if (other.status != null) {\n+            status = new StringWithCustomFacts(other.status);\n+        }\n+        if (other.temple != null) {\n+            temple = new StringWithCustomFacts(other.temple);\n+        }\n+    }\n+    @Override\n+    @Override\n+    public StringWithCustomFacts getDate() {\n+    public StringWithCustomFacts getPlace() {\n+    public StringWithCustomFacts getStatus() {\n+    public StringWithCustomFacts getTemple() {\n+    public void setDate(String date) {\n+        this.date = new StringWithCustomFacts(date);\n+    }\n+    public void setDate(StringWithCustomFacts date) {\n+    public void setPlace(String place) {\n+        this.place = new StringWithCustomFacts(place);\n+    }\n+    public void setPlace(StringWithCustomFacts place) {\n+    public void setStatus(String status) {\n+        this.status = new StringWithCustomFacts(status);\n+    }\n+    public void setStatus(StringWithCustomFacts status) {\n+    public void setTemple(String temple) {\n+        this.temple = new StringWithCustomFacts(temple);\n+    }\n+    public void setTemple(StringWithCustomFacts temple) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    protected StringWithCustomFacts variationType;\n+    public AbstractNameVariation() {\n+    }\n+    public AbstractNameVariation(AbstractNameVariation other) {\n+        super(other);\n+        variation = other.variation;\n+        if (other.variationType != null) {\n+            variationType = new StringWithCustomFacts(other.variationType);\n+        }\n+    }\n+    public StringWithCustomFacts getVariationType() {\n+    public void setVariationType(String variationType) {\n+        this.variationType = new StringWithCustomFacts(variationType);\n+    }\n+    public void setVariationType(StringWithCustomFacts variationType) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private List<NoteStructure> noteStructures = getNoteStructures(Options.isCollectionInitializationEnabled());\n+    public AbstractNotesElement() {\n+    }\n+    public AbstractNotesElement(AbstractNotesElement other) {\n+        super(other);\n+        if (other.getNoteStructures() != null) {\n+            noteStructures = new ArrayList<>();\n+            for (NoteStructure n : other.getNoteStructures()) {\n+                noteStructures.add(new NoteStructure(n));\n+            }\n+        }\n+    }\n+        if (noteStructures == null) {\n+            if (other.noteStructures != null) {\n+        } else if (!noteStructures.equals(other.noteStructures)) {\n+    @Override\n+    public List<NoteStructure> getNoteStructures() {\n+        return noteStructures;\n+    @Override\n+    public List<NoteStructure> getNoteStructures(boolean initializeIfNeeded) {\n+        if (initializeIfNeeded && noteStructures == null) {\n+            noteStructures = new ArrayList<>(0);\n+        return noteStructures;\n+        result = prime * result + (noteStructures == null ? 0 : noteStructures.hashCode());\n+        if (noteStructures != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(noteStructures);\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts addr1;\n+    private StringWithCustomFacts addr2;\n+    private StringWithCustomFacts addr3;\n+    private StringWithCustomFacts city;\n+    private StringWithCustomFacts country;\n+    private StringWithCustomFacts postalCode;\n+    private StringWithCustomFacts stateProvince;\n+    public Address() {\n+    }\n+    public Address(Address other) {\n+        super(other);\n+        if (other.addr1 != null) {\n+            addr1 = new StringWithCustomFacts(other.addr1);\n+        }\n+        if (other.addr2 != null) {\n+            addr2 = new StringWithCustomFacts(other.addr2);\n+        }\n+        if (other.city != null) {\n+            city = new StringWithCustomFacts(other.city);\n+        }\n+        if (other.country != null) {\n+            country = new StringWithCustomFacts(other.country);\n+        }\n+        if (other.lines != null) {\n+            lines = new ArrayList<>(other.lines);\n+        }\n+        if (other.postalCode != null) {\n+            postalCode = new StringWithCustomFacts(other.postalCode);\n+        }\n+        if (other.stateProvince != null) {\n+            stateProvince = new StringWithCustomFacts(other.stateProvince);\n+        }\n+    }\n+        if (addr3 == null) {\n+            if (other.addr3 != null) {\n+                return false;\n+            }\n+        } else if (!addr3.equals(other.addr3)) {\n+            return false;\n+        }\n+    public StringWithCustomFacts getAddr1() {\n+    public StringWithCustomFacts getAddr2() {\n+    public StringWithCustomFacts getAddr3() {\n+        return addr3;\n+    }\n+    public StringWithCustomFacts getCity() {\n+    public StringWithCustomFacts getCountry() {\n+    public StringWithCustomFacts getPostalCode() {\n+    public StringWithCustomFacts getStateProvince() {\n+        result = prime * result + (addr3 == null ? 0 : addr3.hashCode());\n+    public void setAddr1(String addr1) {\n+        if (this.addr1 == null) {\n+            this.addr1 = new StringWithCustomFacts(addr1);\n+        } else {\n+            this.addr1.setValue(addr1);\n+        }\n+    }\n+    public void setAddr1(StringWithCustomFacts addr1) {\n+    public void setAddr2(String addr2) {\n+        if (this.addr2 == null) {\n+            this.addr2 = new StringWithCustomFacts(addr2);\n+        } else {\n+            this.addr2.setValue(addr2);\n+        }\n+    }\n+    public void setAddr2(StringWithCustomFacts addr2) {\n+    public void setAddr3(String addr3) {\n+        if (this.addr3 == null) {\n+            this.addr3 = new StringWithCustomFacts(addr3);\n+        } else {\n+            this.addr3.setValue(addr3);\n+        }\n+    }\n+    public void setAddr3(StringWithCustomFacts addr3) {\n+        this.addr3 = addr3;\n+    }\n+    public void setCity(String city) {\n+        if (this.city == null) {\n+            this.city = new StringWithCustomFacts(city);\n+        } else {\n+            this.city.setValue(city);\n+        }\n+    }\n+    public void setCity(StringWithCustomFacts city) {\n+    public void setCountry(String country) {\n+        if (this.country == null) {\n+            this.country = new StringWithCustomFacts(country);\n+        } else {\n+            this.country.setValue(country);\n+        }\n+    }\n+    public void setCountry(StringWithCustomFacts country) {\n+    public void setPostalCode(String postalCode) {\n+        if (this.postalCode == null) {\n+            this.postalCode = new StringWithCustomFacts(postalCode);\n+        } else {\n+            this.postalCode.setValue(postalCode);\n+        }\n+    }\n+    public void setPostalCode(StringWithCustomFacts postalCode) {\n+    public void setStateProvince(String stateProvince) {\n+        if (this.stateProvince == null) {\n+            this.stateProvince = new StringWithCustomFacts(stateProvince);\n+        } else {\n+            this.stateProvince.setValue(stateProvince);\n+        }\n+    }\n+    public void setStateProvince(StringWithCustomFacts stateProvince) {\n+        if (addr3 != null) {\n+            builder.append(\"addr3=\");\n+            builder.append(addr3);\n+            builder.append(\", \");\n+        }\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts associatedEntityType;\n+    private StringWithCustomFacts relationship;\n+    public Association() {\n+    }\n+    public Association(Association other) {\n+        super(other);\n+        if (other.associatedEntityType != null) {\n+            associatedEntityType = new StringWithCustomFacts(other.associatedEntityType);\n+        }\n+        associatedEntityXref = other.associatedEntityXref;\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.relationship != null) {\n+            relationship = new StringWithCustomFacts(other.relationship);\n+        }\n+    }\n+    public StringWithCustomFacts getAssociatedEntityType() {\n+    public StringWithCustomFacts getRelationship() {\n+    public void setAssociatedEntityType(String associatedEntityType) {\n+        this.associatedEntityType = associatedEntityType == null ? null : new StringWithCustomFacts(associatedEntityType);\n+    }\n+    public void setAssociatedEntityType(StringWithCustomFacts associatedEntityType) {\n+    public void setRelationship(String relationship) {\n+        this.relationship = relationship == null ? null : new StringWithCustomFacts(relationship);\n+    }\n+    public void setRelationship(StringWithCustomFacts relationship) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts date;\n+    private StringWithCustomFacts time;\n+    public ChangeDate() {\n+    }\n+    public ChangeDate(ChangeDate other) {\n+        super(other);\n+        if (other.getDate() != null) {\n+            date = new StringWithCustomFacts(other.date);\n+        }\n+        if (other.getTime() != null) {\n+            time = new StringWithCustomFacts(other.time);\n+        }\n+    }\n+    public StringWithCustomFacts getDate() {\n+    public StringWithCustomFacts getTime() {\n+    public void setDate(String date) {\n+        this.date = date == null ? null : new StringWithCustomFacts(date);\n+    }\n+    public void setDate(StringWithCustomFacts date) {\n+    public void setTime(String time) {\n+        this.time = time == null ? null : new StringWithCustomFacts(time);\n+    }\n+    public void setTime(StringWithCustomFacts time) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts characterSetName = new StringWithCustomFacts(Encoding.ANSEL.toString());\n+    private StringWithCustomFacts versionNum;\n+    public CharacterSet() {\n+    }\n+    public CharacterSet(CharacterSet other) {\n+        super(other);\n+        if (other.characterSetName != null) {\n+            characterSetName = new StringWithCustomFacts(other.characterSetName);\n+        }\n+        if (other.versionNum != null) {\n+            versionNum = new StringWithCustomFacts(other.versionNum);\n+        }\n+    }\n+    public StringWithCustomFacts getCharacterSetName() {\n+    public StringWithCustomFacts getVersionNum() {\n+    public void setCharacterSetName(String characterSetName) {\n+        this.characterSetName = characterSetName == null ? null : new StringWithCustomFacts(characterSetName);\n+    }\n+    public void setCharacterSetName(StringWithCustomFacts characterSetName) {\n+    public void setVersionNum(String versionNum) {\n+        this.versionNum = versionNum == null ? null : new StringWithCustomFacts(versionNum);\n+    }\n+    public void setVersionNum(StringWithCustomFacts versionNum) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts entryDate;\n+    private List<MultiStringWithCustomFacts> sourceText = getSourceText(Options.isCollectionInitializationEnabled());\n+    public CitationData() {\n+    }\n+    public CitationData(CitationData other) {\n+        super(other);\n+        if (other.entryDate != null) {\n+            entryDate = new StringWithCustomFacts(other.entryDate);\n+        }\n+        if (other.sourceText != null) {\n+            sourceText = new ArrayList<>();\n+            for (MultiStringWithCustomFacts st : other.sourceText) {\n+                sourceText.add(new MultiStringWithCustomFacts(st));\n+            }\n+        }\n+    }\n+    public StringWithCustomFacts getEntryDate() {\n+    public List<MultiStringWithCustomFacts> getSourceText() {\n+    public List<MultiStringWithCustomFacts> getSourceText(boolean initializeIfNeeded) {\n+    public void setEntryDate(String entryDate) {\n+        this.entryDate = entryDate == null ? null : new StringWithCustomFacts(entryDate);\n+    }\n+    public void setEntryDate(StringWithCustomFacts entryDate) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts eventCited;\n+    private StringWithCustomFacts roleInEvent;\n+    private StringWithCustomFacts whereInSource;\n+    public CitationWithSource() {\n+    }\n+    public CitationWithSource(CitationWithSource other) {\n+        super(other);\n+        if (other.certainty != null) {\n+            certainty = new StringWithCustomFacts(other.certainty);\n+        }\n+        if (other.data != null) {\n+            data = new ArrayList<>();\n+            for (CitationData d : other.data) {\n+                data.add(new CitationData(d));\n+            }\n+        }\n+        if (other.eventCited != null) {\n+            eventCited = new StringWithCustomFacts(other.eventCited);\n+        }\n+        if (other.multimedia != null) {\n+            multimedia = new ArrayList<>();\n+            for (MultimediaReference m : other.multimedia) {\n+                multimedia.add(new MultimediaReference(m));\n+            }\n+        }\n+        if (other.roleInEvent != null) {\n+            roleInEvent = new StringWithCustomFacts(other.roleInEvent);\n+        }\n+        if (other.source != null) {\n+            source = new Source(other.source);\n+        }\n+        if (other.whereInSource != null) {\n+            whereInSource = new StringWithCustomFacts(other.whereInSource);\n+        }\n+    }\n+        if (!(obj instanceof CitationWithSource)) {\n+    public StringWithCustomFacts getEventCited() {\n+    public StringWithCustomFacts getRoleInEvent() {\n+    public StringWithCustomFacts getWhereInSource() {\n+        result = prime * result + ((data == null) ? 0 : data.hashCode());\n+        result = prime * result + ((eventCited == null) ? 0 : eventCited.hashCode());\n+        result = prime * result + ((roleInEvent == null) ? 0 : roleInEvent.hashCode());\n+        result = prime * result + ((source == null) ? 0 : source.hashCode());\n+        result = prime * result + ((whereInSource == null) ? 0 : whereInSource.hashCode());\n+    public void setEventCited(String eventCited) {\n+        this.eventCited = eventCited == null ? null : new StringWithCustomFacts(eventCited);\n+    public void setEventCited(StringWithCustomFacts eventCited) {\n+    public void setRoleInEvent(String roleInEvent) {\n+        this.roleInEvent = roleInEvent == null ? null : new StringWithCustomFacts(roleInEvent);\n+    }\n+    public void setRoleInEvent(StringWithCustomFacts roleInEvent) {\n+    public void setWhereInSource(String whereInSource) {\n+        this.whereInSource = whereInSource == null ? null : new StringWithCustomFacts(whereInSource);\n+    }\n+    public void setWhereInSource(StringWithCustomFacts whereInSource) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    public CitationWithoutSource() {\n+    }\n+    public CitationWithoutSource(CitationWithoutSource other) {\n+        super(other);\n+        if (other.description != null) {\n+            description = new ArrayList<>(other.description);\n+        }\n+        if (other.textFromSource != null) {\n+            textFromSource = new ArrayList<>();\n+            for (List<String> t : other.textFromSource) {\n+                textFromSource.add(new ArrayList<>(t));\n+            }\n+        }\n+    }\n+        if (!(obj instanceof CitationWithoutSource)) {\n+        result = prime * result + ((description == null) ? 0 : description.hashCode());\n+        result = prime * result + ((textFromSource == null) ? 0 : textFromSource.hashCode());\n+        StringBuilder builder = new StringBuilder(50);\n+        if (certainty != null) {\n+            builder.append(\"certainty=\");\n+            builder.append(certainty);\n+            builder.append(\", \");\n+        }\n+        if (multimedia != null) {\n+            builder.append(\"multimedia=\");\n+            builder.append(multimedia);\n+            builder.append(\", \");\n+        }\n+            builder.append(\", \");\n+        }\n+        if (getDescription() != null) {\n+            builder.append(\"description()=\");\n+            builder.append(getDescription());\n+            builder.append(\", \");\n+        }\n+        if (getTextFromSource() != null) {\n+            builder.append(\"textFromSource()=\");\n+            builder.append(getTextFromSource());\n+            builder.append(\", \");\n+        }\n+        if (getNoteStructures() != null) {\n+            builder.append(\"notes()=\");\n+            builder.append(getNoteStructures());\n+            builder.append(\", \");\n+        }\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts()=\");\n+            builder.append(getCustomFacts());\n+    public Corporation() {\n+    }\n+    public Corporation(Corporation other) {\n+        super(other);\n+        businessName = other.businessName;\n+    }\n+    private static final long serialVersionUID = 8140277678428809773L;\n+    public static long getSerialversionuid() {\n+        return serialVersionUID;\n+    }\n+    private List<AbstractCitation> citations = getCitations(Options.isCollectionInitializationEnabled());\n+    private StringWithCustomFacts date;\n+    private StringWithCustomFacts description;\n+    private Place place;\n+    private final String tag;\n+    private String xref;\n+    private StringWithCustomFacts type;\n+    private ChangeDate changeDate;\n+    public CustomFact(CustomFact other) {\n+        super(other);\n+        tag = other.tag;\n+        xref = other.xref;\n+        if (other.date != null) {\n+            date = new StringWithCustomFacts(other.date);\n+        }\n+        if (other.description != null) {\n+            description = new StringWithCustomFacts(other.description);\n+        }\n+        if (other.place != null) {\n+            place = new Place(other.place);\n+        }\n+        if (other.type != null) {\n+            type = new StringWithCustomFacts(other.type);\n+        }\n+        if (other.citations != null) {\n+            for (AbstractCitation c : other.citations) {\n+                if (c instanceof CitationWithoutSource) {\n+                    getCitations(true).add(new CitationWithoutSource((CitationWithoutSource) c));\n+                } else {\n+                    getCitations(true).add(new CitationWithSource((CitationWithSource) c));\n+                }\n+            }\n+        }\n+    }\n+    public CustomFact(String tag) {\n+        this.tag = tag;\n+    }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (!(obj instanceof CustomFact)) {\n+            return false;\n+        }\n+        CustomFact other = (CustomFact) obj;\n+        if (changeDate == null) {\n+            if (other.changeDate != null) {\n+                return false;\n+            }\n+        } else if (!changeDate.equals(other.changeDate)) {\n+            return false;\n+        }\n+        if (citations == null) {\n+            if (other.citations != null) {\n+                return false;\n+            }\n+        } else if (!citations.equals(other.citations)) {\n+            return false;\n+        }\n+        if (date == null) {\n+            if (other.date != null) {\n+                return false;\n+            }\n+        } else if (!date.equals(other.date)) {\n+            return false;\n+        }\n+        if (description == null) {\n+            if (other.description != null) {\n+                return false;\n+            }\n+        } else if (!description.equals(other.description)) {\n+            return false;\n+        }\n+        if (place == null) {\n+            if (other.place != null) {\n+                return false;\n+            }\n+        } else if (!place.equals(other.place)) {\n+            return false;\n+        }\n+        if (tag == null) {\n+            if (other.tag != null) {\n+                return false;\n+            }\n+        } else if (!tag.equals(other.tag)) {\n+            return false;\n+        }\n+        if (type == null) {\n+            if (other.type != null) {\n+                return false;\n+            }\n+        } else if (!type.equals(other.type)) {\n+            return false;\n+        }\n+        if (xref == null) {\n+            if (other.xref != null) {\n+                return false;\n+            }\n+        } else if (!xref.equals(other.xref)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public ChangeDate getChangeDate() {\n+        return changeDate;\n+    }\n+    @Override\n+    public List<AbstractCitation> getCitations() {\n+        return citations;\n+    }\n+    @Override\n+    public List<AbstractCitation> getCitations(boolean initializeIfNeeded) {\n+        if (initializeIfNeeded && citations == null) {\n+            citations = new ArrayList<>(0);\n+        }\n+        return citations;\n+    }\n+    public StringWithCustomFacts getDate() {\n+        return date;\n+    }\n+    public StringWithCustomFacts getDescription() {\n+        return description;\n+    }\n+    public Place getPlace() {\n+        return place;\n+    }\n+    public String getTag() {\n+        return tag;\n+    }\n+    public StringWithCustomFacts getType() {\n+        return type;\n+    }\n+    @Override\n+    public String getXref() {\n+        return xref;\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + ((changeDate == null) ? 0 : changeDate.hashCode());\n+        result = prime * result + ((citations == null) ? 0 : citations.hashCode());\n+        result = prime * result + ((date == null) ? 0 : date.hashCode());\n+        result = prime * result + ((description == null) ? 0 : description.hashCode());\n+        result = prime * result + ((place == null) ? 0 : place.hashCode());\n+        result = prime * result + ((tag == null) ? 0 : tag.hashCode());\n+        result = prime * result + ((type == null) ? 0 : type.hashCode());\n+        result = prime * result + ((xref == null) ? 0 : xref.hashCode());\n+        return result;\n+    }\n+    public void setChangeDate(ChangeDate changeDate) {\n+        this.changeDate = changeDate;\n+    }\n+    public void setDate(String dateString) {\n+        date = new StringWithCustomFacts(dateString);\n+    }\n+    public void setDate(StringWithCustomFacts date) {\n+        this.date = date;\n+    }\n+    public void setDescription(String string) {\n+        if (string != null) {\n+            description = new StringWithCustomFacts(string);\n+        } else {\n+            description = null;\n+        }\n+    }\n+    public void setDescription(StringWithCustomFacts description) {\n+        this.description = description;\n+    }\n+    public void setPlace(Place place) {\n+        this.place = place;\n+    }\n+    public void setType(String type) {\n+        this.type = new StringWithCustomFacts(type);\n+    }\n+    public void setType(StringWithCustomFacts type) {\n+        this.type = type;\n+    }\n+    public void setXref(String xref) {\n+        this.xref = xref;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder(50);\n+        builder.append(\"CustomFact [\");\n+        if (changeDate != null) {\n+            builder.append(\"changeDate=\");\n+            builder.append(changeDate);\n+            builder.append(\", \");\n+        }\n+        if (citations != null) {\n+            builder.append(\"citations=\");\n+            builder.append(citations);\n+            builder.append(\", \");\n+        }\n+        if (date != null) {\n+            builder.append(\"date=\");\n+            builder.append(date);\n+            builder.append(\", \");\n+        }\n+        if (description != null) {\n+            builder.append(\"description=\");\n+            builder.append(description);\n+            builder.append(\", \");\n+        }\n+        if (place != null) {\n+            builder.append(\"place=\");\n+            builder.append(place);\n+            builder.append(\", \");\n+        }\n+        if (tag != null) {\n+            builder.append(\"tag=\");\n+            builder.append(tag);\n+            builder.append(\", \");\n+        }\n+        if (xref != null) {\n+            builder.append(\"xref=\");\n+            builder.append(xref);\n+            builder.append(\", \");\n+        }\n+        if (type != null) {\n+            builder.append(\"type=\");\n+            builder.append(type);\n+            builder.append(\", \");\n+        }\n+        if (getNoteStructures() != null) {\n+            builder.append(\"getNotes()=\");\n+            builder.append(getNoteStructures());\n+            builder.append(\", \");\n+        }\n+        if (customFacts != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    private StringWithCustomFacts datePeriod;\n+    private StringWithCustomFacts eventType;\n+    private StringWithCustomFacts jurisdiction;\n+    public EventRecorded() {\n+    }\n+    public EventRecorded(EventRecorded other) {\n+        super(other);\n+        if (other.datePeriod != null) {\n+            datePeriod = new StringWithCustomFacts(other.datePeriod);\n+        }\n+        eventType = other.eventType;\n+        if (other.jurisdiction != null) {\n+            jurisdiction = new StringWithCustomFacts(other.jurisdiction);\n+        }\n+    }\n+    public StringWithCustomFacts getDatePeriod() {\n+    public StringWithCustomFacts getEventType() {\n+    public StringWithCustomFacts getJurisdiction() {\n+    public void setDatePeriod(String datePeriod) {\n+        this.datePeriod = datePeriod == null ? null : new StringWithCustomFacts(datePeriod);\n+    }\n+    public void setDatePeriod(StringWithCustomFacts datePeriod) {\n+        if (this.eventType == null) {\n+            this.eventType = new StringWithCustomFacts(eventType);\n+        } else {\n+            this.eventType.setValue(eventType);\n+        }\n+    }\n+    public void setEventType(StringWithCustomFacts eventType) {\n+    public void setJurisdiction(String jurisdiction) {\n+        this.jurisdiction = jurisdiction == null ? null : new StringWithCustomFacts(jurisdiction);\n+    }\n+    public void setJurisdiction(StringWithCustomFacts jurisdiction) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts automatedRecordId;\n+    private List<IndividualReference> children = getChildren(Options.isCollectionInitializationEnabled());\n+    private IndividualReference husband;\n+    private List<MultimediaReference> multimedia = getMultimedia(Options.isCollectionInitializationEnabled());\n+    private StringWithCustomFacts numChildren;\n+    private StringWithCustomFacts recFileNumber;\n+    private StringWithCustomFacts restrictionNotice;\n+    private List<SubmitterReference> submitters = getSubmitters(Options.isCollectionInitializationEnabled());\n+    private IndividualReference wife;\n+    public Family() {\n+    }\n+    public Family(Family other) {\n+        this(other, true);\n+    }\n+    public Family(Family other, boolean deep) {\n+        super(other);\n+        if (other.automatedRecordId != null) {\n+            automatedRecordId = new StringWithCustomFacts(other.automatedRecordId);\n+        }\n+        if (other.changeDate != null) {\n+            changeDate = new ChangeDate(other.changeDate);\n+        }\n+        if (deep && other.children != null) {\n+            children = new ArrayList<>();\n+            for (IndividualReference c : other.children) {\n+                children.add(new IndividualReference(c, false));\n+            }\n+        }\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.events != null) {\n+            events = new ArrayList<>();\n+            for (FamilyEvent e : other.events) {\n+                events.add(new FamilyEvent(e));\n+            }\n+        }\n+        if (deep && other.husband != null) {\n+            husband = new IndividualReference(other.husband, false);\n+        }\n+        if (other.ldsSpouseSealings != null) {\n+            ldsSpouseSealings = new ArrayList<>();\n+            for (LdsSpouseSealing lss : other.ldsSpouseSealings) {\n+                ldsSpouseSealings.add(new LdsSpouseSealing(lss));\n+            }\n+        }\n+        if (other.multimedia != null) {\n+            multimedia = new ArrayList<>();\n+            for (MultimediaReference m : other.multimedia) {\n+                multimedia.add(new MultimediaReference(m));\n+            }\n+        }\n+        if (other.numChildren != null) {\n+            numChildren = new StringWithCustomFacts(other.numChildren);\n+        }\n+        if (other.recFileNumber != null) {\n+            recFileNumber = new StringWithCustomFacts(other.recFileNumber);\n+        }\n+        if (other.restrictionNotice != null) {\n+            restrictionNotice = new StringWithCustomFacts(other.restrictionNotice);\n+        }\n+        if (other.submitters != null) {\n+            submitters = new ArrayList<>();\n+            for (SubmitterReference s : other.submitters) {\n+                submitters.add(new SubmitterReference(s));\n+            }\n+        }\n+        if (other.userReferences != null) {\n+            userReferences = new ArrayList<>();\n+            for (UserReference ur : other.userReferences) {\n+                userReferences.add(new UserReference(ur));\n+            }\n+        }\n+        if (deep && other.wife != null) {\n+            wife = new IndividualReference(other.wife, false);\n+        }\n+        xref = other.xref;\n+    }\n+    public StringWithCustomFacts getAutomatedRecordId() {\n+    public List<IndividualReference> getChildren() {\n+    public List<IndividualReference> getChildren(boolean initializeIfNeeded) {\n+    @Override\n+    @Override\n+    public IndividualReference getHusband() {\n+    public List<MultimediaReference> getMultimedia() {\n+    public List<MultimediaReference> getMultimedia(boolean initializeIfNeeded) {\n+    public StringWithCustomFacts getNumChildren() {\n+    public StringWithCustomFacts getRecFileNumber() {\n+    public StringWithCustomFacts getRestrictionNotice() {\n+    public List<SubmitterReference> getSubmitters() {\n+    public List<SubmitterReference> getSubmitters(boolean initializeIfNeeded) {\n+    public IndividualReference getWife() {\n+    @Override\n+    public void setAutomatedRecordId(String automatedRecordId) {\n+        this.automatedRecordId = automatedRecordId == null ? null : new StringWithCustomFacts(automatedRecordId);\n+    }\n+    public void setAutomatedRecordId(StringWithCustomFacts automatedRecordId) {\n+    public void setHusband(IndividualReference husband) {\n+    public void setNumChildren(String numChildren) {\n+        this.numChildren = numChildren == null ? null : new StringWithCustomFacts(numChildren);\n+    }\n+    public void setNumChildren(StringWithCustomFacts numChildren) {\n+    public void setRecFileNumber(String recFileNumber) {\n+        this.recFileNumber = recFileNumber == null ? null : new StringWithCustomFacts(recFileNumber);\n+    }\n+    public void setRecFileNumber(StringWithCustomFacts recFileNumber) {\n+    public void setRestrictionNotice(String restrictionNotice) {\n+        this.restrictionNotice = restrictionNotice == null ? null : new StringWithCustomFacts(restrictionNotice);\n+    }\n+    public void setRestrictionNotice(StringWithCustomFacts restrictionNotice) {\n+    public void setWife(IndividualReference wife) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts adoptedBy;\n+    private StringWithCustomFacts pedigree;\n+    private StringWithCustomFacts status;\n+    public FamilyChild() {\n+    }\n+    public FamilyChild(FamilyChild other) {\n+        this(other, true);\n+    }\n+    public FamilyChild(FamilyChild other, boolean deep) {\n+        super(other);\n+        if (other.adoptedBy != null) {\n+            adoptedBy = other.adoptedBy;\n+        }\n+        if (other.family != null) {\n+            family = new Family(other.family, deep);\n+        }\n+        if (other.pedigree != null) {\n+            pedigree = new StringWithCustomFacts(other.pedigree);\n+        }\n+        if (other.status != null) {\n+            status = new StringWithCustomFacts(other.status);\n+        }\n+    }\n+    public StringWithCustomFacts getAdoptedBy() {\n+    public StringWithCustomFacts getPedigree() {\n+    public StringWithCustomFacts getStatus() {\n+        this.adoptedBy = new StringWithCustomFacts(adoptedBy.toString());\n+    }\n+    public void setAdoptedBy(String adoptedBy) {\n+        this.adoptedBy = new StringWithCustomFacts(adoptedBy);\n+    }\n+    public void setAdoptedBy(StringWithCustomFacts adoptedBy) {\n+    public void setPedigree(String pedigree) {\n+        this.pedigree = pedigree == null ? null : new StringWithCustomFacts(pedigree);\n+    }\n+    public void setPedigree(StringWithCustomFacts pedigree) {\n+    public void setStatus(String status) {\n+        this.status = status == null ? null : new StringWithCustomFacts(status);\n+    }\n+    public void setStatus(StringWithCustomFacts status) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts husbandAge;\n+    private StringWithCustomFacts wifeAge;\n+    public FamilyEvent() {\n+    }\n+    public FamilyEvent(FamilyEvent other) {\n+        super(other);\n+        if (other.husbandAge != null) {\n+            husbandAge = new StringWithCustomFacts(other.husbandAge);\n+        }\n+        type = other.type;\n+        if (other.wifeAge != null) {\n+            wifeAge = new StringWithCustomFacts(other.wifeAge);\n+        }\n+    }\n+    public StringWithCustomFacts getHusbandAge() {\n+    public StringWithCustomFacts getWifeAge() {\n+    public void setHusbandAge(String husbandAge) {\n+        this.husbandAge = husbandAge == null ? null : new StringWithCustomFacts(husbandAge);\n+    }\n+    public void setHusbandAge(StringWithCustomFacts husbandAge) {\n+    public void setWifeAge(String wifeAge) {\n+        this.wifeAge = wifeAge == null ? null : new StringWithCustomFacts(wifeAge);\n+    }\n+    public void setWifeAge(StringWithCustomFacts wifeAge) {\n+    private static final long serialVersionUID = -1855269504871281907L;\n+    Family family;\n+    public FamilyReference() {\n+    }\n+    public FamilyReference(Family family) {\n+        this.family = family;\n+    }\n+    public FamilyReference(FamilyReference other, boolean deep) {\n+        super(other);\n+        family = new Family(other.family, deep);\n+    }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (!(obj instanceof FamilyReference)) {\n+            return false;\n+        }\n+        FamilyReference other = (FamilyReference) obj;\n+        if (family == null) {\n+            if (other.family != null) {\n+                return false;\n+            }\n+        } else if (!family.equals(other.family)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public Family getFamily() {\n+        return family;\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + ((family == null) ? 0 : family.hashCode());\n+        return result;\n+    }\n+    public void setFamily(Family family) {\n+        this.family = family;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder(25);\n+        builder.append(\"FamilyReference [\");\n+        if (family != null) {\n+            builder.append(\"family=\");\n+            builder.append(family);\n+            builder.append(\", \");\n+        }\n+        if (customFacts != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    public FamilySpouse() {\n+    }\n+    public FamilySpouse(FamilySpouse other) {\n+        this(other, true);\n+    }\n+    public FamilySpouse(FamilySpouse other, boolean deep) {\n+        super(other);\n+        if (other.family != null) {\n+            family = new Family(other.family, deep);\n+        }\n+    }\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts format;\n+    private StringWithCustomFacts mediaType;\n+    private StringWithCustomFacts referenceToFile;\n+    private StringWithCustomFacts title;\n+    public FileReference() {\n+    }\n+    public FileReference(FileReference other) {\n+        super(other);\n+        if (other.format != null) {\n+            format = new StringWithCustomFacts(other.format);\n+        }\n+        if (other.mediaType != null) {\n+            mediaType = new StringWithCustomFacts(other.mediaType);\n+        }\n+        if (other.referenceToFile != null) {\n+            referenceToFile = new StringWithCustomFacts(other.referenceToFile);\n+        }\n+        if (other.title != null) {\n+            title = new StringWithCustomFacts(other.title);\n+        }\n+    }\n+    public StringWithCustomFacts getFormat() {\n+    public StringWithCustomFacts getMediaType() {\n+    public StringWithCustomFacts getReferenceToFile() {\n+    public StringWithCustomFacts getTitle() {\n+    public void setFormat(String format) {\n+        this.format = format == null ? null : new StringWithCustomFacts(format);\n+    }\n+    public void setFormat(StringWithCustomFacts format) {\n+    public void setMediaType(String mediaType) {\n+        this.mediaType = mediaType == null ? null : new StringWithCustomFacts(mediaType);\n+    }\n+    public void setMediaType(StringWithCustomFacts mediaType) {\n+    public void setReferenceToFile(String referenceToFile) {\n+        this.referenceToFile = referenceToFile == null ? null : new StringWithCustomFacts(referenceToFile);\n+    }\n+    public void setReferenceToFile(StringWithCustomFacts referenceToFile) {\n+    public void setTitle(String title) {\n+        this.title = title == null ? null : new StringWithCustomFacts(title);\n+    }\n+    public void setTitle(StringWithCustomFacts title) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private final Map<String, NoteRecord> notes = new HashMap<>(0);\n+    public Gedcom() {\n+    }\n+    public Gedcom(Gedcom other) {\n+        super(other);\n+        for (Family f : other.families.values()) {\n+            families.put(f.getXref(), new Family(f));\n+        }\n+        if (other.header != null) {\n+            header = new Header(other.header);\n+        }\n+        for (Individual i : other.individuals.values()) {\n+            individuals.put(i.getXref(), new Individual(i));\n+        }\n+        for (Multimedia m : other.multimedia.values()) {\n+            multimedia.put(m.getXref(), new Multimedia(m));\n+        }\n+        for (NoteRecord n : other.notes.values()) {\n+            notes.put(n.getXref(), new NoteRecord(n));\n+        }\n+        for (Repository r : other.repositories.values()) {\n+            repositories.put(r.getXref(), new Repository(r));\n+        }\n+        for (Source r : other.sources.values()) {\n+            sources.put(r.getXref(), new Source(r));\n+        }\n+        if (other.submission != null) {\n+            submission = new Submission(other.submission);\n+        }\n+        for (Submitter s : other.submitters.values()) {\n+            submitters.put(s.getXref(), new Submitter(s));\n+        }\n+    }\n+    public Map<String, NoteRecord> getNotes() {\n+            builder.append(\"noteStructures=\");\n+    private StringWithCustomFacts gedcomForm = new StringWithCustomFacts(\"LINEAGE-LINKED\");\n+    private StringWithCustomFacts versionNumber = new StringWithCustomFacts(SupportedVersion.V5_5_1.toString());\n+    public GedcomVersion() {\n+    }\n+    public GedcomVersion(GedcomVersion other) {\n+        super(other);\n+        if (other.gedcomForm != null) {\n+            gedcomForm = new StringWithCustomFacts(other.gedcomForm);\n+        }\n+        versionNumber = other.versionNumber;\n+    }\n+    public StringWithCustomFacts getGedcomForm() {\n+    public StringWithCustomFacts getVersionNumber() {\n+    public void setGedcomForm(String gedcomForm) {\n+        this.gedcomForm = gedcomForm == null ? null : new StringWithCustomFacts(gedcomForm);\n+    }\n+    public void setGedcomForm(StringWithCustomFacts gedcomForm) {\n+    public void setVersionNumber(String versionNumber) {\n+        if (versionNumber != null) {\n+            this.versionNumber = new StringWithCustomFacts(versionNumber);\n+        } else {\n+            this.versionNumber = null;\n+        }\n+    }\n+    public void setVersionNumber(StringWithCustomFacts versionNumber) {\n+    public void setVersionNumber(SupportedVersion versionNumber) {\n+        if (versionNumber != null) {\n+            this.versionNumber = new StringWithCustomFacts(versionNumber.toString());\n+        } else {\n+            this.versionNumber = null;\n+        }\n+    }\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    List<StringWithCustomFacts> getEmails();\n+    List<StringWithCustomFacts> getEmails(boolean initializeIfNeeded);\n+    List<StringWithCustomFacts> getFaxNumbers();\n+    List<StringWithCustomFacts> getFaxNumbers(boolean initializeIfNeeded);\n+    List<StringWithCustomFacts> getPhoneNumbers();\n+    List<StringWithCustomFacts> getPhoneNumbers(boolean initializeIfNeeded);\n+    List<StringWithCustomFacts> getWwwUrls();\n+    List<StringWithCustomFacts> getWwwUrls(boolean initializeIfNeeded);\n+    List<CustomFact> getCustomFacts();\n+    List<CustomFact> getCustomFacts(boolean initializeIfNeeded);\n+    List<CustomFact> getCustomFactsWithTag(String tag);\n+    List<NoteStructure> getNoteStructures();\n+    List<NoteStructure> getNoteStructures(boolean initializeIfNeeded);\n+    private StringWithCustomFacts date;\n+    private StringWithCustomFacts destinationSystem;\n+    private StringWithCustomFacts fileName;\n+    private StringWithCustomFacts language;\n+    private StringWithCustomFacts placeHierarchy;\n+    private SubmissionReference submissionReference;\n+    private SubmitterReference submitterReference = new SubmitterReference(new Submitter(\"@SUBMITTER@\", \"UNSPECIFIED\"));\n+    private StringWithCustomFacts time;\n+    public Header() {\n+    }\n+    public Header(Header other) {\n+        super(other);\n+        if (other.characterSet != null) {\n+            characterSet = new CharacterSet(other.characterSet);\n+        }\n+        if (other.copyrightData != null) {\n+            copyrightData = new ArrayList<>(other.copyrightData);\n+        }\n+        if (other.date != null) {\n+            date = new StringWithCustomFacts(other.date);\n+        }\n+        if (other.destinationSystem != null) {\n+            destinationSystem = new StringWithCustomFacts(other.destinationSystem);\n+        }\n+        if (other.fileName != null) {\n+            fileName = new StringWithCustomFacts(other.fileName);\n+        }\n+        if (other.gedcomVersion != null) {\n+            gedcomVersion = new GedcomVersion(other.gedcomVersion);\n+        }\n+        if (other.language != null) {\n+            language = new StringWithCustomFacts(other.language);\n+        }\n+        if (other.placeHierarchy != null) {\n+            placeHierarchy = new StringWithCustomFacts(other.placeHierarchy);\n+        }\n+        if (other.sourceSystem != null) {\n+            sourceSystem = new SourceSystem(other.sourceSystem);\n+        }\n+        if (other.submissionReference != null) {\n+            submissionReference = new SubmissionReference(other.submissionReference);\n+        }\n+        if (other.submitterReference != null) {\n+            submitterReference = new SubmitterReference(other.submitterReference);\n+        }\n+        if (other.time != null) {\n+            time = new StringWithCustomFacts(other.time);\n+        }\n+    }\n+        if (submissionReference == null) {\n+            if (other.submissionReference != null) {\n+        } else if (!submissionReference.equals(other.submissionReference)) {\n+        if (submitterReference == null) {\n+            if (other.submitterReference != null) {\n+        } else if (!submitterReference.equals(other.submitterReference)) {\n+    public StringWithCustomFacts getDate() {\n+    public StringWithCustomFacts getDestinationSystem() {\n+    public StringWithCustomFacts getFileName() {\n+    public StringWithCustomFacts getLanguage() {\n+    public StringWithCustomFacts getPlaceHierarchy() {\n+    public SubmissionReference getSubmissionReference() {\n+        return submissionReference;\n+    public SubmitterReference getSubmitterReference() {\n+        return submitterReference;\n+    public StringWithCustomFacts getTime() {\n+        result = prime * result + (submissionReference == null ? 0 : submissionReference.hashCode());\n+        result = prime * result + (submitterReference == null ? 0 : submitterReference.hashCode());\n+    public void setDate(String date) {\n+        this.date = new StringWithCustomFacts(date);\n+    }\n+    public void setDate(StringWithCustomFacts date) {\n+    public void setDestinationSystem(String destinationSystem) {\n+        this.destinationSystem = destinationSystem == null ? null : new StringWithCustomFacts(destinationSystem);\n+    }\n+    public void setDestinationSystem(StringWithCustomFacts destinationSystem) {\n+    public void setFileName(String fileName) {\n+        this.fileName = fileName == null ? null : new StringWithCustomFacts(fileName);\n+    }\n+    public void setFileName(StringWithCustomFacts fileName) {\n+    public void setLanguage(String language) {\n+        this.language = language == null ? null : new StringWithCustomFacts(language);\n+    }\n+    public void setLanguage(StringWithCustomFacts language) {\n+    public void setPlaceHierarchy(String placeHierarchy) {\n+        this.placeHierarchy = placeHierarchy == null ? null : new StringWithCustomFacts(placeHierarchy);\n+    }\n+    public void setPlaceHierarchy(StringWithCustomFacts placeHierarchy) {\n+    public void setSubmissionReference(SubmissionReference submissionReference) {\n+        this.submissionReference = submissionReference;\n+    public void setSubmitterReference(SubmitterReference submitterReference) {\n+        this.submitterReference = submitterReference;\n+    }\n+    public void setTime(String time) {\n+        this.time = time == null ? null : new StringWithCustomFacts(time);\n+    public void setTime(StringWithCustomFacts time) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (submissionReference != null) {\n+            builder.append(\"submissionReference=\");\n+            builder.append(submissionReference);\n+        if (submitterReference != null) {\n+            builder.append(submitterReference);\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts copyright;\n+    private StringWithCustomFacts name = new StringWithCustomFacts(\"UNSPECIFIED\");\n+    private StringWithCustomFacts publishDate;\n+    public HeaderSourceData() {\n+    }\n+    public HeaderSourceData(HeaderSourceData other) {\n+        super(other);\n+        if (other.copyright != null) {\n+            copyright = new StringWithCustomFacts(other.copyright);\n+        }\n+        name = other.name;\n+        if (other.publishDate != null) {\n+            publishDate = new StringWithCustomFacts(other.publishDate);\n+        }\n+    }\n+    public StringWithCustomFacts getCopyright() {\n+    public StringWithCustomFacts getName() {\n+    public StringWithCustomFacts getPublishDate() {\n+    public void setCopyright(String copyright) {\n+        this.copyright = copyright == null ? null : new StringWithCustomFacts(copyright);\n+    }\n+    public void setCopyright(StringWithCustomFacts copyright) {\n+        if (this.name != null) {\n+            this.name.setValue(name);\n+        } else {\n+            this.name = new StringWithCustomFacts(name);\n+        }\n+    }\n+    public void setName(StringWithCustomFacts name) {\n+    public void setPublishDate(String publishDate) {\n+        this.publishDate = publishDate == null ? null : new StringWithCustomFacts(publishDate);\n+    }\n+    public void setPublishDate(StringWithCustomFacts publishDate) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private List<StringWithCustomFacts> aliases = getAliases(Options.isCollectionInitializationEnabled());\n+    private StringWithCustomFacts ancestralFileNumber;\n+    private List<MultimediaReference> multimedia = getMultimedia(Options.isCollectionInitializationEnabled());\n+    private StringWithCustomFacts permanentRecFileNumber;\n+    private StringWithCustomFacts recIdNumber;\n+    private StringWithCustomFacts restrictionNotice;\n+    private StringWithCustomFacts sex;\n+    public Individual() {\n+    }\n+    public Individual(Individual other) {\n+        this(other, true);\n+    }\n+    public Individual(Individual other, boolean deep) {\n+        super(other);\n+        if (other.aliases != null) {\n+            aliases = new ArrayList<>();\n+            for (StringWithCustomFacts swct : other.aliases) {\n+                aliases.add(new StringWithCustomFacts(swct));\n+            }\n+        }\n+        if (other.ancestorInterest != null) {\n+            ancestorInterest = new ArrayList<>();\n+            for (Submitter ai : other.ancestorInterest) {\n+                ancestorInterest.add(new Submitter(ai));\n+            }\n+        }\n+        if (other.ancestralFileNumber != null) {\n+            ancestralFileNumber = new StringWithCustomFacts(other.ancestralFileNumber);\n+        }\n+        if (other.associations != null) {\n+            associations = new ArrayList<>();\n+            for (Association a : other.associations) {\n+                associations.add(new Association(a));\n+            }\n+        }\n+        if (other.attributes != null) {\n+            attributes = new ArrayList<>();\n+            for (IndividualAttribute ia : other.attributes) {\n+                attributes.add(new IndividualAttribute(ia));\n+            }\n+        }\n+        if (other.changeDate != null) {\n+            changeDate = new ChangeDate(other.changeDate);\n+        }\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.descendantInterest != null) {\n+            descendantInterest = new ArrayList<>();\n+            for (Submitter ai : other.descendantInterest) {\n+                descendantInterest.add(new Submitter(ai));\n+            }\n+        }\n+        if (other.events != null) {\n+            events = new ArrayList<>();\n+            for (IndividualEvent e : other.events) {\n+                events.add(new IndividualEvent(e));\n+            }\n+        }\n+        if (other.familiesWhereChild != null) {\n+            familiesWhereChild = new ArrayList<>();\n+            for (FamilyChild fc : other.familiesWhereChild) {\n+                familiesWhereChild.add(new FamilyChild(fc, deep));\n+            }\n+        }\n+        if (other.familiesWhereSpouse != null) {\n+            familiesWhereSpouse = new ArrayList<>();\n+            for (FamilySpouse fs : other.familiesWhereSpouse) {\n+                familiesWhereSpouse.add(new FamilySpouse(fs, deep));\n+            }\n+        }\n+        if (other.ldsIndividualOrdinances != null) {\n+            ldsIndividualOrdinances = new ArrayList<>();\n+            for (LdsIndividualOrdinance lio : other.ldsIndividualOrdinances) {\n+                ldsIndividualOrdinances.add(new LdsIndividualOrdinance(lio));\n+            }\n+        }\n+        if (other.multimedia != null) {\n+            multimedia = new ArrayList<>();\n+            for (MultimediaReference m : other.multimedia) {\n+                multimedia.add(new MultimediaReference(m));\n+            }\n+        }\n+        if (other.names != null) {\n+            names = new ArrayList<>();\n+            for (PersonalName pn : other.names) {\n+                names.add(new PersonalName(pn));\n+            }\n+        }\n+        if (other.permanentRecFileNumber != null) {\n+            permanentRecFileNumber = new StringWithCustomFacts(other.permanentRecFileNumber);\n+        }\n+        if (other.recIdNumber != null) {\n+            recIdNumber = new StringWithCustomFacts(other.recIdNumber);\n+        }\n+        if (other.restrictionNotice != null) {\n+            restrictionNotice = new StringWithCustomFacts(other.restrictionNotice);\n+        }\n+        if (other.sex != null) {\n+            sex = new StringWithCustomFacts(other.sex);\n+        }\n+        if (other.submitters != null) {\n+            submitters = new ArrayList<>();\n+            for (Submitter s : other.submitters) {\n+                submitters.add(new Submitter(s));\n+            }\n+        }\n+        if (other.userReferences != null) {\n+            userReferences = new ArrayList<>();\n+            for (UserReference ur : other.userReferences) {\n+                userReferences.add(new UserReference(ur));\n+            }\n+        }\n+        xref = other.xref;\n+    }\n+    public List<StringWithCustomFacts> getAliases() {\n+    public List<StringWithCustomFacts> getAliases(boolean initializeIfNeeded) {\n+    public StringWithCustomFacts getAncestralFileNumber() {\n+    @Override\n+    @Override\n+    public List<MultimediaReference> getMultimedia() {\n+    public List<MultimediaReference> getMultimedia(boolean initializeIfNeeded) {\n+    public StringWithCustomFacts getPermanentRecFileNumber() {\n+    public StringWithCustomFacts getRecIdNumber() {\n+    public StringWithCustomFacts getRestrictionNotice() {\n+    public StringWithCustomFacts getSex() {\n+                if (fam.getHusband() != null && this != fam.getHusband().getIndividual()) {\n+                    result.add(fam.getHusband().getIndividual());\n+                if (fam.getWife() != null && this != fam.getWife().getIndividual()) {\n+                    result.add(fam.getWife().getIndividual());\n+    public Set<String> getSurnames() {\n+        TreeSet<String> result = new TreeSet<>();\n+        Pattern pattern = Pattern.compile(\".*\\\\/(.*)\\\\/.*\");\n+        for (PersonalName pn : getNames()) {\n+            if (\"<No /name>/\".equals(pn.getBasic())) {\n+                result.add(\"\");\n+                continue;\n+            }\n+            if (pn.getSurname() != null) {\n+                result.add(pn.getSurname().getValue());\n+            }\n+            if (pn.getBasic() != null) {\n+                Matcher matcher = pattern.matcher(pn.getBasic());\n+                while (matcher.find()) {\n+                    result.add(matcher.group(1));\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+    @Override\n+    public void setAncestralFileNumber(String ancestralFileNumber) {\n+        this.ancestralFileNumber = ancestralFileNumber == null ? null : new StringWithCustomFacts(ancestralFileNumber);\n+    }\n+    public void setAncestralFileNumber(StringWithCustomFacts ancestralFileNumber) {\n+    public void setPermanentRecFileNumber(String permanentRecFileNumber) {\n+        this.permanentRecFileNumber = permanentRecFileNumber == null ? null : new StringWithCustomFacts(permanentRecFileNumber);\n+    }\n+    public void setPermanentRecFileNumber(StringWithCustomFacts permanentRecFileNumber) {\n+    public void setRecIdNumber(String recIdNumber) {\n+        this.recIdNumber = recIdNumber == null ? null : new StringWithCustomFacts(recIdNumber);\n+    }\n+    public void setRecIdNumber(StringWithCustomFacts recIdNumber) {\n+    public void setRestrictionNotice(String restrictionNotice) {\n+        this.restrictionNotice = restrictionNotice == null ? null : new StringWithCustomFacts(restrictionNotice);\n+    }\n+    public void setRestrictionNotice(StringWithCustomFacts restrictionNotice) {\n+    public void setSex(String sex) {\n+        this.sex = sex == null ? null : new StringWithCustomFacts(sex);\n+    }\n+    public void setSex(StringWithCustomFacts sex) {\n+            for (StringWithCustomFacts n : aliases) {\n+                if (fam.getHusband() != null && fam.getHusband().getIndividual() == this) {\n+                    if (fam.getWife() != null && fam.getWife().getIndividual() != null) {\n+                        sb.append(fam.getWife().getIndividual().getFormattedName());\n+                    if (fam.getHusband() != null && fam.getHusband().getIndividual() != null) {\n+                        sb.append(fam.getHusband().getIndividual().getFormattedName());\n+                if (f.getFamily().getWife() != null && f.getFamily().getWife().getIndividual() != null) {\n+                    sb.append(f.getFamily().getWife().getIndividual().getFormattedName());\n+                if (f.getFamily().getHusband() == null || f.getFamily().getHusband().getIndividual() == null) {\n+                    sb.append(f.getFamily().getHusband().getIndividual().getFormattedName());\n+                Individual husband = null;\n+                if (f.getFamily() != null && f.getFamily().getHusband() != null) {\n+                    husband = f.getFamily().getHusband().getIndividual();\n+                }\n+                Individual wife = null;\n+                if (f.getFamily() != null && f.getFamily().getWife() != null) {\n+                    wife = f.getFamily().getWife().getIndividual();\n+                }\n+                    for (IndividualReference iRef : f.getFamily().getChildren()) {\n+                        if (iRef == null) {\n+                        Individual i = iRef.getIndividual();\n+                        boolean notSeenAlready = (i != this && !seenSoFar.contains(i));\n+                        boolean hasSpouses = i.getFamiliesWhereSpouse() != null && !i.getFamiliesWhereSpouse().isEmpty();\n+    public IndividualAttribute() {\n+    }\n+    public IndividualAttribute(IndividualAttribute other) {\n+        super(other);\n+        type = other.type;\n+    }\n+        return type == other.type;\n+    public IndividualEvent() {\n+    }\n+    public IndividualEvent(IndividualEvent other) {\n+        super(other);\n+        if (other.family != null) {\n+            family = new FamilyChild(other.family, false);\n+        }\n+        type = other.type;\n+    }\n+        return type == other.type;\n+    private static final long serialVersionUID = -1855269504871281907L;\n+    Individual individual;\n+    public IndividualReference() {\n+    }\n+    public IndividualReference(Individual individual) {\n+        this.individual = individual;\n+    }\n+    public IndividualReference(IndividualReference other, boolean deep) {\n+        super(other);\n+        individual = new Individual(other.individual, deep);\n+    }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (!(obj instanceof IndividualReference)) {\n+            return false;\n+        }\n+        IndividualReference other = (IndividualReference) obj;\n+        if (individual == null) {\n+            if (other.individual != null) {\n+                return false;\n+            }\n+        } else if (!individual.equals(other.individual)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public Individual getIndividual() {\n+        return individual;\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + ((individual == null) ? 0 : individual.hashCode());\n+        return result;\n+    }\n+    public void setIndividual(Individual individual) {\n+        this.individual = individual;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder(25);\n+        builder.append(\"IndividualReference [\");\n+        if (individual != null) {\n+            builder.append(\"individual=\");\n+            builder.append(individual);\n+            builder.append(\", \");\n+        }\n+        if (customFacts != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    public LdsIndividualOrdinance() {\n+    }\n+    public LdsIndividualOrdinance(LdsIndividualOrdinance other) {\n+        super(other);\n+        if (other.familyWhereChild != null) {\n+            familyWhereChild = new FamilyChild(other.familyWhereChild);\n+        }\n+        type = other.type;\n+        yNull = other.yNull;\n+    }\n+    public String getYNull() {\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public void setYNull(String yNull) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    public LdsSpouseSealing() {\n+    }\n+    public LdsSpouseSealing(LdsSpouseSealing other) {\n+        super(other);\n+    }\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private static final long serialVersionUID = 8355989906882622025L;\n+    private List<String> lines = getLines(Options.isCollectionInitializationEnabled());\n+    public MultiStringWithCustomFacts() {\n+    }\n+    public MultiStringWithCustomFacts(List<String> lines) {\n+        this.lines.clear();\n+        this.lines.addAll(lines);\n+    }\n+    public MultiStringWithCustomFacts(MultiStringWithCustomFacts other) {\n+        super(other);\n+        if (other.lines != null) {\n+            lines = new ArrayList<>(other.lines);\n+        }\n+    }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (!(obj instanceof MultiStringWithCustomFacts)) {\n+            return false;\n+        }\n+        MultiStringWithCustomFacts other = (MultiStringWithCustomFacts) obj;\n+        if (lines == null) {\n+            if (other.lines != null) {\n+                return false;\n+            }\n+        } else if (!lines.equals(other.lines)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public List<String> getLines() {\n+        return lines;\n+    }\n+    public List<String> getLines(boolean initializeIfNeeded) {\n+        if (initializeIfNeeded && lines == null) {\n+            lines = new ArrayList<>(0);\n+        }\n+        return lines;\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + ((lines == null) ? 0 : lines.hashCode());\n+        return result;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder(31);\n+        builder.append(\"MultiStringWithCustomFacts [\");\n+        if (lines != null) {\n+            builder.append(\"lines=\");\n+            builder.append(lines);\n+            builder.append(\", \");\n+        }\n+        if (customFacts != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    private MultimediaReference continuedObject;\n+    private StringWithCustomFacts embeddedMediaFormat;\n+    private StringWithCustomFacts embeddedTitle;\n+    private StringWithCustomFacts recIdNumber;\n+    public Multimedia() {\n+    }\n+    public Multimedia(Multimedia other) {\n+        super(other);\n+        if (other.blob != null) {\n+            blob = new ArrayList<>(other.blob);\n+        }\n+        if (other.changeDate != null) {\n+            changeDate = new ChangeDate(other.changeDate);\n+        }\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.continuedObject != null) {\n+            continuedObject = new MultimediaReference(other.continuedObject);\n+        }\n+        if (other.embeddedMediaFormat != null) {\n+            embeddedMediaFormat = new StringWithCustomFacts(other.embeddedMediaFormat);\n+        }\n+        if (other.embeddedTitle != null) {\n+            embeddedTitle = new StringWithCustomFacts(other.embeddedTitle);\n+        }\n+        if (other.fileReferences != null) {\n+            fileReferences = new ArrayList<>();\n+            for (FileReference fr : other.fileReferences) {\n+                fileReferences.add(new FileReference(fr));\n+            }\n+        }\n+        if (other.recIdNumber != null) {\n+            recIdNumber = new StringWithCustomFacts(other.recIdNumber);\n+        }\n+        if (other.userReferences != null) {\n+            userReferences = new ArrayList<>();\n+            for (UserReference ur : other.userReferences) {\n+                userReferences.add(new UserReference(ur));\n+            }\n+        }\n+        xref = other.xref;\n+    }\n+    @Override\n+    @Override\n+    public MultimediaReference getContinuedObject() {\n+    public StringWithCustomFacts getEmbeddedMediaFormat() {\n+    public StringWithCustomFacts getEmbeddedTitle() {\n+    public StringWithCustomFacts getRecIdNumber() {\n+    @Override\n+    public void setContinuedObject(MultimediaReference multimediaReference) {\n+        continuedObject = multimediaReference;\n+    }\n+    public void setEmbeddedMediaFormat(String embeddedMediaFormat) {\n+        this.embeddedMediaFormat = embeddedMediaFormat == null ? null : new StringWithCustomFacts(embeddedMediaFormat);\n+    public void setEmbeddedMediaFormat(StringWithCustomFacts embeddedMediaFormat) {\n+    public void setEmbeddedTitle(String embeddedTitle) {\n+        this.embeddedTitle = embeddedTitle == null ? null : new StringWithCustomFacts(embeddedTitle);\n+    }\n+    public void setEmbeddedTitle(StringWithCustomFacts embeddedTitle) {\n+    public void setRecIdNumber(String recIdNumber) {\n+        this.recIdNumber = recIdNumber == null ? null : new StringWithCustomFacts(recIdNumber);\n+    }\n+    public void setRecIdNumber(StringWithCustomFacts recIdNumber) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private static final long serialVersionUID = -1855269504871281907L;\n+    Multimedia multimedia;\n+    public MultimediaReference() {\n+    }\n+    public MultimediaReference(Multimedia multimedia) {\n+        this.multimedia = multimedia;\n+    }\n+    public MultimediaReference(MultimediaReference other) {\n+        super(other);\n+        if (other.multimedia != null) {\n+            multimedia = new Multimedia(other.multimedia);\n+        }\n+    }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (!(obj instanceof MultimediaReference)) {\n+            return false;\n+        }\n+        MultimediaReference other = (MultimediaReference) obj;\n+        if (multimedia == null) {\n+            if (other.multimedia != null) {\n+                return false;\n+            }\n+        } else if (!multimedia.equals(other.multimedia)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public Multimedia getMultimedia() {\n+        return multimedia;\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + ((multimedia == null) ? 0 : multimedia.hashCode());\n+        return result;\n+    }\n+    public void setMultimedia(Multimedia multimedia) {\n+        this.multimedia = multimedia;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder(25);\n+        builder.append(\"MultimediaReference [\");\n+        if (multimedia != null) {\n+            builder.append(\"multimedia=\");\n+            builder.append(multimedia);\n+            builder.append(\", \");\n+        }\n+        if (customFacts != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    private StringWithCustomFacts recIdNumber;\n+    public NoteRecord(NoteRecord other) {\n+        super(other);\n+        if (other.getChangeDate() != null) {\n+            changeDate = new ChangeDate(other.changeDate);\n+        }\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.lines != null) {\n+            lines = new ArrayList<>(other.lines);\n+        }\n+        if (other.recIdNumber != null) {\n+            recIdNumber = new StringWithCustomFacts(other.recIdNumber);\n+        }\n+        if (other.userReferences != null) {\n+            userReferences = new ArrayList<>();\n+            for (UserReference ur : other.userReferences) {\n+                userReferences.add(new UserReference(ur));\n+            }\n+        }\n+        xref = other.xref;\n+    }\n+    public NoteRecord(String xref) {\n+        this.xref = xref;\n+    }\n+        NoteRecord other = (NoteRecord) obj;\n+    @Override\n+    @Override\n+    public StringWithCustomFacts getRecIdNumber() {\n+    @Override\n+    public void setRecIdNumber(String recIdNumber) {\n+        this.recIdNumber = recIdNumber == null ? null : new StringWithCustomFacts(recIdNumber);\n+    }\n+    public void setRecIdNumber(StringWithCustomFacts recIdNumber) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private static final long serialVersionUID = 8355989906882622025L;\n+    private List<String> lines = getLines(Options.isCollectionInitializationEnabled());\n+    private NoteRecord noteReference;\n+    public NoteStructure() {\n+    }\n+    public NoteStructure(NoteStructure other) {\n+        super(other);\n+        if (other.lines != null) {\n+            lines = new ArrayList<>(other.lines);\n+        }\n+        if (other.noteReference != null) {\n+            noteReference = new NoteRecord(other.noteReference);\n+        }\n+    }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (!(obj instanceof NoteStructure)) {\n+            return false;\n+        }\n+        NoteStructure other = (NoteStructure) obj;\n+        if (lines == null) {\n+            if (other.lines != null) {\n+                return false;\n+            }\n+        } else if (!lines.equals(other.lines)) {\n+            return false;\n+        }\n+        if (noteReference == null) {\n+            if (other.noteReference != null) {\n+                return false;\n+            }\n+        } else if (!noteReference.equals(other.noteReference)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public List<String> getLines() {\n+        return lines;\n+    }\n+    public List<String> getLines(boolean initializeIfNeeded) {\n+        if (noteReference != null) {\n+            return Collections.unmodifiableList((List<String>) Collections.EMPTY_LIST);\n+        }\n+        if (initializeIfNeeded && lines == null) {\n+            lines = new ArrayList<>(0);\n+        }\n+        return lines;\n+    }\n+    public NoteRecord getNoteReference() {\n+        return noteReference;\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + ((lines == null) ? 0 : lines.hashCode());\n+        result = prime * result + ((noteReference == null) ? 0 : noteReference.hashCode());\n+        return result;\n+    }\n+    public void setNoteReference(NoteRecord noteReference) {\n+        if (noteReference != null && (lines != null && !lines.isEmpty())) {\n+            throw new IllegalArgumentException(\n+                    \"Cannot set a note reference when there are lines of text. Clear the lines of text or set the lines property to null first.\");\n+        }\n+        this.noteReference = noteReference;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder(20);\n+        builder.append(\"NoteStructure [\");\n+        if (lines != null) {\n+            builder.append(\"lines=\");\n+            builder.append(lines);\n+            builder.append(\", \");\n+        }\n+        if (noteReference != null) {\n+            builder.append(\"noteReference=\");\n+            builder.append(noteReference);\n+            builder.append(\", \");\n+        }\n+        if (customFacts != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    private StringWithCustomFacts givenName;\n+    private StringWithCustomFacts nickname;\n+    private StringWithCustomFacts prefix;\n+    private StringWithCustomFacts suffix;\n+    private StringWithCustomFacts surname;\n+    private StringWithCustomFacts surnamePrefix;\n+    private StringWithCustomFacts type;\n+    public PersonalName() {\n+    }\n+    public PersonalName(PersonalName other) {\n+        super(other);\n+        basic = other.basic;\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.givenName != null) {\n+            givenName = new StringWithCustomFacts(other.givenName);\n+        }\n+        if (other.nickname != null) {\n+            nickname = new StringWithCustomFacts(other.nickname);\n+        }\n+        if (other.phonetic != null) {\n+            phonetic = new ArrayList<>();\n+            for (AbstractNameVariation ph : other.phonetic) {\n+                phonetic.add(new PersonalNameVariation((PersonalNameVariation) ph));\n+            }\n+        }\n+        if (other.prefix != null) {\n+            prefix = new StringWithCustomFacts(other.prefix);\n+        }\n+        if (other.romanized != null) {\n+            romanized = new ArrayList<>();\n+            for (AbstractNameVariation ph : other.romanized) {\n+                romanized.add(new PersonalNameVariation((PersonalNameVariation) ph));\n+            }\n+        }\n+        if (other.suffix != null) {\n+            suffix = new StringWithCustomFacts(other.suffix);\n+        }\n+        if (other.surname != null) {\n+            surname = new StringWithCustomFacts(other.surname);\n+        }\n+        if (other.surnamePrefix != null) {\n+            surnamePrefix = new StringWithCustomFacts(other.surnamePrefix);\n+        }\n+        if (other.type != null) {\n+            type = new StringWithCustomFacts(other.type);\n+        }\n+    }\n+        if (type == null) {\n+            if (other.type != null) {\n+                return false;\n+            }\n+        } else if (!type.equals(other.type)) {\n+            return false;\n+        }\n+    @Override\n+    @Override\n+    public StringWithCustomFacts getGivenName() {\n+    public StringWithCustomFacts getNickname() {\n+    public StringWithCustomFacts getPrefix() {\n+    public StringWithCustomFacts getSuffix() {\n+    public StringWithCustomFacts getSurname() {\n+    public StringWithCustomFacts getSurnamePrefix() {\n+    public StringWithCustomFacts getType() {\n+        return type;\n+    }\n+        result = prime * result + (type == null ? 0 : type.hashCode());\n+    public void setGivenName(String givenName) {\n+        if (this.givenName == null) {\n+            this.givenName = new StringWithCustomFacts(givenName);\n+        } else {\n+            this.givenName.setValue(givenName);\n+        }\n+    }\n+    public void setGivenName(StringWithCustomFacts givenName) {\n+    public void setNickname(String nickname) {\n+        if (this.nickname == null) {\n+            this.nickname = new StringWithCustomFacts(nickname);\n+        } else {\n+            this.nickname.setValue(nickname);\n+        }\n+    }\n+    public void setNickname(StringWithCustomFacts nickname) {\n+    public void setPrefix(String prefix) {\n+        if (this.prefix == null) {\n+            this.prefix = new StringWithCustomFacts(prefix);\n+        } else {\n+            this.prefix.setValue(prefix);\n+        }\n+    }\n+    public void setPrefix(StringWithCustomFacts prefix) {\n+    public void setSuffix(String suffix) {\n+        if (this.suffix == null) {\n+            this.suffix = new StringWithCustomFacts(suffix);\n+        } else {\n+            this.suffix.setValue(suffix);\n+        }\n+    }\n+    public void setSuffix(StringWithCustomFacts suffix) {\n+    public void setSurname(String surname) {\n+        if (this.surname == null) {\n+            this.surname = new StringWithCustomFacts(surname);\n+        } else {\n+            this.surname.setValue(surname);\n+        }\n+    }\n+    public void setSurname(StringWithCustomFacts surname) {\n+    public void setSurnamePrefix(String surnamePrefix) {\n+        if (this.surnamePrefix == null) {\n+            this.surnamePrefix = new StringWithCustomFacts(surnamePrefix);\n+        } else {\n+            this.surnamePrefix.setValue(surnamePrefix);\n+        }\n+    }\n+    public void setSurnamePrefix(StringWithCustomFacts surnamePrefix) {\n+    public void setType(String type) {\n+        if (this.type == null) {\n+            this.type = new StringWithCustomFacts(type);\n+        } else {\n+            this.type.setValue(type);\n+        }\n+    }\n+    public void setType(StringWithCustomFacts type) {\n+        this.type = type;\n+    }\n+    private StringWithCustomFacts givenName;\n+    private StringWithCustomFacts nickname;\n+    private List<NoteStructure> noteStructures = getNoteStructures(Options.isCollectionInitializationEnabled());\n+    private StringWithCustomFacts prefix;\n+    private StringWithCustomFacts suffix;\n+    private StringWithCustomFacts surname;\n+    private StringWithCustomFacts surnamePrefix;\n+    public PersonalNameVariation() {\n+    }\n+    public PersonalNameVariation(PersonalNameVariation other) {\n+        super(other);\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.givenName != null) {\n+            givenName = new StringWithCustomFacts(other.givenName);\n+        }\n+        if (other.nickname != null) {\n+            nickname = new StringWithCustomFacts(other.nickname);\n+        }\n+        if (other.getNoteStructures() != null) {\n+            noteStructures = new ArrayList<>();\n+            for (NoteStructure n : other.getNoteStructures()) {\n+                noteStructures.add(new NoteStructure(n));\n+            }\n+        }\n+        if (other.prefix != null) {\n+            prefix = new StringWithCustomFacts(other.prefix);\n+        }\n+        if (other.suffix != null) {\n+            suffix = new StringWithCustomFacts(other.suffix);\n+        }\n+        if (other.surname != null) {\n+            surname = new StringWithCustomFacts(other.surname);\n+        }\n+        if (other.surnamePrefix != null) {\n+            surnamePrefix = new StringWithCustomFacts(other.surnamePrefix);\n+        }\n+    }\n+        if (noteStructures == null) {\n+            if (other.noteStructures != null) {\n+        } else if (!noteStructures.equals(other.noteStructures)) {\n+    @Override\n+    @Override\n+    public StringWithCustomFacts getGivenName() {\n+    public StringWithCustomFacts getNickname() {\n+    @Override\n+    public List<NoteStructure> getNoteStructures() {\n+        return noteStructures;\n+    @Override\n+    public List<NoteStructure> getNoteStructures(boolean initializeIfNeeded) {\n+        if (initializeIfNeeded && noteStructures == null) {\n+            noteStructures = new ArrayList<>(0);\n+        return noteStructures;\n+    public StringWithCustomFacts getPrefix() {\n+    public StringWithCustomFacts getSuffix() {\n+    public StringWithCustomFacts getSurname() {\n+    public StringWithCustomFacts getSurnamePrefix() {\n+        result = prime * result + (noteStructures == null ? 0 : noteStructures.hashCode());\n+    public void setGivenName(String givenName) {\n+        this.givenName = givenName == null ? null : new StringWithCustomFacts(givenName);\n+    }\n+    public void setGivenName(StringWithCustomFacts givenName) {\n+    public void setNickname(String nickname) {\n+        this.nickname = nickname == null ? null : new StringWithCustomFacts(nickname);\n+    }\n+    public void setNickname(StringWithCustomFacts nickname) {\n+    public void setPrefix(String prefix) {\n+        this.prefix = prefix == null ? null : new StringWithCustomFacts(prefix);\n+    }\n+    public void setPrefix(StringWithCustomFacts prefix) {\n+    public void setSuffix(String suffix) {\n+        this.suffix = suffix == null ? null : new StringWithCustomFacts(suffix);\n+    }\n+    public void setSuffix(StringWithCustomFacts suffix) {\n+    public void setSurname(String surname) {\n+        this.surname = surname == null ? null : new StringWithCustomFacts(surname);\n+    }\n+    public void setSurname(StringWithCustomFacts surname) {\n+    public void setSurnamePrefix(String surnamePrefix) {\n+        this.surnamePrefix = surnamePrefix == null ? null : new StringWithCustomFacts(surnamePrefix);\n+    }\n+    public void setSurnamePrefix(StringWithCustomFacts surnamePrefix) {\n+        if (noteStructures != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(noteStructures);\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+    private StringWithCustomFacts latitude;\n+    private StringWithCustomFacts longitude;\n+    private StringWithCustomFacts placeFormat;\n+    public Place() {\n+    }\n+    public Place(Place other) {\n+        super(other);\n+        if (other.citations != null) {\n+            citations = new ArrayList<>();\n+            for (AbstractCitation ac : other.citations) {\n+                if (ac instanceof CitationWithoutSource) {\n+                    citations.add(new CitationWithoutSource((CitationWithoutSource) ac));\n+                } else if (ac instanceof CitationWithSource) {\n+                    citations.add(new CitationWithSource((CitationWithSource) ac));\n+                }\n+            }\n+        }\n+        if (other.latitude != null) {\n+            latitude = new StringWithCustomFacts(other.latitude);\n+        }\n+        if (other.longitude != null) {\n+            longitude = new StringWithCustomFacts(other.longitude);\n+        }\n+        if (other.phonetic != null) {\n+            phonetic = new ArrayList<>();\n+            for (AbstractNameVariation ph : other.phonetic) {\n+                phonetic.add(new PlaceNameVariation((PlaceNameVariation) ph));\n+            }\n+        }\n+        if (other.placeFormat != null) {\n+            placeFormat = new StringWithCustomFacts(other.placeFormat);\n+        }\n+        placeName = other.placeName;\n+        if (other.romanized != null) {\n+            romanized = new ArrayList<>();\n+            for (AbstractNameVariation ph : other.romanized) {\n+                romanized.add(new PlaceNameVariation((PlaceNameVariation) ph));\n+            }\n+        }\n+    }\n+    @Override\n+    @Override\n+    public StringWithCustomFacts getLatitude() {\n+    public StringWithCustomFacts getLongitude() {\n+    public StringWithCustomFacts getPlaceFormat() {\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude == null ? null : new StringWithCustomFacts(latitude);\n+    }\n+    public void setLatitude(StringWithCustomFacts latitude) {\n+    public void setLongitude(String longitude) {\n+        this.longitude = longitude == null ? null : new StringWithCustomFacts(longitude);\n+    }\n+    public void setLongitude(StringWithCustomFacts longitude) {\n+    public void setPlaceFormat(String placeFormat) {\n+        this.placeFormat = placeFormat == null ? null : new StringWithCustomFacts(placeFormat);\n+    }\n+    public void setPlaceFormat(StringWithCustomFacts placeFormat) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    public PlaceNameVariation() {\n+    }\n+    public PlaceNameVariation(PlaceNameVariation other) {\n+        super(other);\n+    }\n+    private StringWithCustomFacts name;\n+    private StringWithCustomFacts recIdNumber;\n+    public Repository() {\n+    }\n+    public Repository(Repository other) {\n+        super(other);\n+        if (other.changeDate != null) {\n+            changeDate = new ChangeDate(other.changeDate);\n+        }\n+        if (other.name != null) {\n+            name = new StringWithCustomFacts(other.name);\n+        }\n+        if (other.recIdNumber != null) {\n+            recIdNumber = new StringWithCustomFacts(other.recIdNumber);\n+        }\n+        if (other.userReferences != null) {\n+            userReferences = new ArrayList<>();\n+            for (UserReference ur : other.userReferences) {\n+                userReferences.add(new UserReference(ur));\n+            }\n+        }\n+        xref = other.xref;\n+    }\n+    public StringWithCustomFacts getName() {\n+    public StringWithCustomFacts getRecIdNumber() {\n+    @Override\n+        result = prime * result + (changeDate == null ? 0 : changeDate.hashCode());\n+        result = prime * result + (name == null ? 0 : name.hashCode());\n+        result = prime * result + (recIdNumber == null ? 0 : recIdNumber.hashCode());\n+        result = prime * result + (userReferences == null ? 0 : userReferences.hashCode());\n+        result = prime * result + (xref == null ? 0 : xref.hashCode());\n+    public void setName(String name) {\n+        this.name = name == null ? null : new StringWithCustomFacts(name);\n+    }\n+    public void setName(StringWithCustomFacts name) {\n+    public void setRecIdNumber(String recIdNumber) {\n+        this.recIdNumber = recIdNumber == null ? null : new StringWithCustomFacts(recIdNumber);\n+    }\n+    public void setRecIdNumber(StringWithCustomFacts recIdNumber) {\n+    public RepositoryCitation() {\n+    }\n+    public RepositoryCitation(RepositoryCitation other) {\n+        super(other);\n+        if (other.callNumbers != null) {\n+            callNumbers = new ArrayList<>();\n+            for (SourceCallNumber cn : other.callNumbers) {\n+                callNumbers.add(new SourceCallNumber(cn));\n+            }\n+        }\n+        repositoryXref = other.repositoryXref;\n+    }\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private List<MultimediaReference> multimedia = getMultimedia(Options.isCollectionInitializationEnabled());\n+    private MultiStringWithCustomFacts originatorsAuthors;\n+    private MultiStringWithCustomFacts publicationFacts;\n+    private StringWithCustomFacts recIdNumber;\n+    private StringWithCustomFacts sourceFiledBy;\n+    private MultiStringWithCustomFacts sourceText;\n+    private MultiStringWithCustomFacts title;\n+    public Source() {\n+    }\n+    public Source(Source other) {\n+        super(other);\n+        if (other.changeDate != null) {\n+            changeDate = new ChangeDate(other.changeDate);\n+        }\n+        if (other.data != null) {\n+            data = new SourceData(other.data);\n+        }\n+        if (other.multimedia != null) {\n+            multimedia = new ArrayList<>();\n+            for (MultimediaReference m : other.multimedia) {\n+                multimedia.add(new MultimediaReference(m));\n+            }\n+        }\n+        if (other.originatorsAuthors != null) {\n+            originatorsAuthors = new MultiStringWithCustomFacts(other.originatorsAuthors);\n+        }\n+        if (other.publicationFacts != null) {\n+            publicationFacts = new MultiStringWithCustomFacts(other.publicationFacts);\n+        }\n+        if (other.recIdNumber != null) {\n+            recIdNumber = new StringWithCustomFacts(other.recIdNumber);\n+        }\n+        if (other.repositoryCitation != null) {\n+            repositoryCitation = new RepositoryCitation(other.repositoryCitation);\n+        }\n+        if (other.sourceFiledBy != null) {\n+            sourceFiledBy = new StringWithCustomFacts(other.sourceFiledBy);\n+        }\n+        if (other.sourceText != null) {\n+            sourceText = new MultiStringWithCustomFacts(other.sourceText);\n+        }\n+        if (other.title != null) {\n+            title = new MultiStringWithCustomFacts(other.title);\n+        }\n+        if (other.userReferences != null) {\n+            userReferences = new ArrayList<>();\n+            for (UserReference ur : other.userReferences) {\n+                userReferences.add(new UserReference(ur));\n+            }\n+        }\n+        xref = other.xref;\n+    }\n+    public List<MultimediaReference> getMultimedia() {\n+    public List<MultimediaReference> getMultimedia(boolean initializeIfNeeded) {\n+    public MultiStringWithCustomFacts getOriginatorsAuthors() {\n+    public MultiStringWithCustomFacts getPublicationFacts() {\n+    public StringWithCustomFacts getRecIdNumber() {\n+    public StringWithCustomFacts getSourceFiledBy() {\n+    public MultiStringWithCustomFacts getSourceText() {\n+    public MultiStringWithCustomFacts getTitle() {\n+    @Override\n+    public void setOriginatorsAuthors(MultiStringWithCustomFacts originatorsAuthors) {\n+        this.originatorsAuthors = originatorsAuthors;\n+    }\n+    public void setPublicationFacts(MultiStringWithCustomFacts publicationFacts) {\n+        this.publicationFacts = publicationFacts;\n+    }\n+    public void setRecIdNumber(String recIdNumber) {\n+        this.recIdNumber = recIdNumber == null ? null : new StringWithCustomFacts(recIdNumber);\n+    }\n+    public void setRecIdNumber(StringWithCustomFacts recIdNumber) {\n+    public void setSourceFiledBy(String sourceFiledBy) {\n+        this.sourceFiledBy = sourceFiledBy == null ? null : new StringWithCustomFacts(sourceFiledBy);\n+    }\n+    public void setSourceFiledBy(StringWithCustomFacts sourceFiledBy) {\n+    public void setSourceText(MultiStringWithCustomFacts sourceText) {\n+        this.sourceText = sourceText;\n+    }\n+    public void setTitle(MultiStringWithCustomFacts title) {\n+        this.title = title;\n+    }\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts callNumber;\n+    private StringWithCustomFacts mediaType;\n+    public SourceCallNumber() {\n+    }\n+    public SourceCallNumber(SourceCallNumber other) {\n+        super(other);\n+        if (other.callNumber != null) {\n+            callNumber = new StringWithCustomFacts(other.callNumber);\n+        }\n+        if (other.mediaType != null) {\n+            mediaType = new StringWithCustomFacts(other.mediaType);\n+        }\n+    }\n+    public StringWithCustomFacts getCallNumber() {\n+    public StringWithCustomFacts getMediaType() {\n+    public void setCallNumber(String callNumber) {\n+        this.callNumber = callNumber == null ? null : new StringWithCustomFacts(callNumber);\n+    }\n+    public void setCallNumber(StringWithCustomFacts callNumber) {\n+    public void setMediaType(String mediaType) {\n+        this.mediaType = mediaType == null ? null : new StringWithCustomFacts(mediaType);\n+    }\n+    public void setMediaType(StringWithCustomFacts mediaType) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts respAgency;\n+    public SourceData() {\n+    }\n+    public SourceData(SourceData other) {\n+        super(other);\n+        if (other.eventsRecorded != null) {\n+            eventsRecorded = new ArrayList<>();\n+            for (EventRecorded e : other.eventsRecorded) {\n+                eventsRecorded.add(new EventRecorded(e));\n+            }\n+        }\n+        if (other.respAgency != null) {\n+            respAgency = new StringWithCustomFacts(other.respAgency);\n+        }\n+    }\n+    public StringWithCustomFacts getRespAgency() {\n+    public void setRespAgency(String respAgency) {\n+        this.respAgency = respAgency == null ? null : new StringWithCustomFacts(respAgency);\n+    }\n+    public void setRespAgency(StringWithCustomFacts respAgency) {\n+        if (getNoteStructures() != null) {\n+            builder.append(\"noteStructures=\");\n+            builder.append(getNoteStructures());\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private StringWithCustomFacts productName;\n+    private StringWithCustomFacts versionNum;\n+    public SourceSystem() {\n+    }\n+    public SourceSystem(SourceSystem other) {\n+        super(other);\n+        if (other.corporation != null) {\n+            corporation = new Corporation(other.corporation);\n+        }\n+        if (other.productName != null) {\n+            productName = new StringWithCustomFacts(other.productName);\n+        }\n+        if (other.sourceData != null) {\n+            sourceData = new HeaderSourceData(other.sourceData);\n+        }\n+        systemId = other.systemId;\n+        if (other.versionNum != null) {\n+            versionNum = new StringWithCustomFacts(other.versionNum);\n+        }\n+    }\n+    public StringWithCustomFacts getProductName() {\n+    public StringWithCustomFacts getVersionNum() {\n+    public void setProductName(String productName) {\n+        this.productName = productName == null ? null : new StringWithCustomFacts(productName);\n+    }\n+    public void setProductName(StringWithCustomFacts productName) {\n+    public void setVersionNum(String versionNum) {\n+        this.versionNum = versionNum == null ? null : new StringWithCustomFacts(versionNum);\n+    }\n+    public void setVersionNum(StringWithCustomFacts versionNum) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private String xref;\n+    public StringTree() {\n+    }\n+    public StringTree(StringTree other) {\n+        xref = other.xref;\n+        level = other.level;\n+        lineNum = other.lineNum;\n+        tag = other.tag;\n+        value = other.value;\n+        parent = null; // Can't copy from other - up to caller to populate\n+        if (other.getChildren() != null) {\n+            children = new ArrayList<>();\n+            for (StringTree ch : other.children) {\n+                StringTree newCh = new StringTree(ch);\n+                newCh.setParent(this);\n+                children.add(newCh);\n+            }\n+        }\n+    }\n+        if (xref == null) {\n+            if (other.xref != null) {\n+        } else if (!xref.equals(other.xref)) {\n+    public String getXref() {\n+        return xref;\n+    }\n+        result = prime * result + (xref == null ? 0 : xref.hashCode());\n+    public void setXref(String xref) {\n+        this.xref = xref;\n+    }\n+        StringBuilder sb = new StringBuilder(\"Line \" + lineNum + \": \" + level + (xref == null ? \"\" : \" \" + xref) + \" \"\n+                + (tag == null ? \"(null tag)\" : tag) + \" \" + (value == null ? \"(null value)\" : value));\n+    String value;\n+    public StringWithCustomFacts() {\n+    public StringWithCustomFacts(String string) {\n+    public StringWithCustomFacts(StringWithCustomFacts other) {\n+        super(other);\n+        value = other.value;\n+        StringWithCustomFacts other = (StringWithCustomFacts) obj;\n+        return value;\n+    private StringWithCustomFacts ancestorsCount;\n+    private StringWithCustomFacts descendantsCount;\n+    private StringWithCustomFacts nameOfFamilyFile;\n+    private StringWithCustomFacts ordinanceProcessFlag;\n+    private StringWithCustomFacts recIdNumber;\n+    private StringWithCustomFacts templeCode;\n+    public Submission() {\n+    }\n+    public Submission(Submission other) {\n+        super(other);\n+        if (other.ancestorsCount != null) {\n+            ancestorsCount = new StringWithCustomFacts(other.ancestorsCount);\n+        }\n+        if (other.descendantsCount != null) {\n+            descendantsCount = new StringWithCustomFacts(other.descendantsCount);\n+        }\n+        if (other.nameOfFamilyFile != null) {\n+            nameOfFamilyFile = new StringWithCustomFacts(other.nameOfFamilyFile);\n+        }\n+        if (other.ordinanceProcessFlag != null) {\n+            ordinanceProcessFlag = new StringWithCustomFacts(other.ordinanceProcessFlag);\n+        }\n+        if (other.recIdNumber != null) {\n+            recIdNumber = new StringWithCustomFacts(other.recIdNumber);\n+        }\n+        if (other.submitter != null) {\n+            submitter = new Submitter(other.submitter);\n+        }\n+        if (other.templeCode != null) {\n+            templeCode = new StringWithCustomFacts(other.templeCode);\n+        }\n+        xref = other.xref;\n+    }\n+    public StringWithCustomFacts getAncestorsCount() {\n+    public StringWithCustomFacts getDescendantsCount() {\n+    public StringWithCustomFacts getNameOfFamilyFile() {\n+    public StringWithCustomFacts getOrdinanceProcessFlag() {\n+    public StringWithCustomFacts getRecIdNumber() {\n+    public StringWithCustomFacts getTempleCode() {\n+    @Override\n+    public void setAncestorsCount(String ancestorsCount) {\n+        this.ancestorsCount = ancestorsCount == null ? null : new StringWithCustomFacts(ancestorsCount);\n+    }\n+    public void setAncestorsCount(StringWithCustomFacts ancestorsCount) {\n+    public void setDescendantsCount(String descendantsCount) {\n+        this.descendantsCount = descendantsCount == null ? null : new StringWithCustomFacts(descendantsCount);\n+    }\n+    public void setDescendantsCount(StringWithCustomFacts descendantsCount) {\n+    public void setNameOfFamilyFile(String nameOfFamilyFile) {\n+        this.nameOfFamilyFile = nameOfFamilyFile == null ? null : new StringWithCustomFacts(nameOfFamilyFile);\n+    }\n+    public void setNameOfFamilyFile(StringWithCustomFacts nameOfFamilyFile) {\n+    public void setOrdinanceProcessFlag(String ordinanceProcessFlag) {\n+        this.ordinanceProcessFlag = ordinanceProcessFlag == null ? null : new StringWithCustomFacts(ordinanceProcessFlag);\n+    }\n+    public void setOrdinanceProcessFlag(StringWithCustomFacts ordinanceProcessFlag) {\n+    public void setRecIdNumber(String recIdNumber) {\n+        this.recIdNumber = recIdNumber == null ? null : new StringWithCustomFacts(recIdNumber);\n+    }\n+    public void setRecIdNumber(StringWithCustomFacts recIdNumber) {\n+    public void setTempleCode(String templeCode) {\n+        this.templeCode = templeCode == null ? null : new StringWithCustomFacts(templeCode);\n+    }\n+    public void setTempleCode(StringWithCustomFacts templeCode) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    private static final long serialVersionUID = -1855269504871281907L;\n+    Submission submission;\n+    public SubmissionReference() {\n+    }\n+    public SubmissionReference(Submission submission) {\n+        this.submission = submission;\n+    }\n+    public SubmissionReference(SubmissionReference other) {\n+        super(other);\n+        submission = new Submission(other.submission);\n+    }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (!(obj instanceof SubmissionReference)) {\n+            return false;\n+        }\n+        SubmissionReference other = (SubmissionReference) obj;\n+        if (submission == null) {\n+            if (other.submission != null) {\n+                return false;\n+            }\n+        } else if (!submission.equals(other.submission)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public Submission getSubmission() {\n+        return submission;\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + ((submission == null) ? 0 : submission.hashCode());\n+        return result;\n+    }\n+    public void setSubmission(Submission submission) {\n+        this.submission = submission;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder(25);\n+        builder.append(\"SubmissionReference [\");\n+        if (submission != null) {\n+            builder.append(\"submission=\");\n+            builder.append(submission);\n+            builder.append(\", \");\n+        }\n+        if (customFacts != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    private List<StringWithCustomFacts> languagePref = getLanguagePref(Options.isCollectionInitializationEnabled());\n+    private List<MultimediaReference> multimedia = getMultimedia(Options.isCollectionInitializationEnabled());\n+    private StringWithCustomFacts name;\n+    private StringWithCustomFacts recIdNumber;\n+    private StringWithCustomFacts regFileNumber;\n+    public Submitter() {\n+    }\n+    public Submitter(String xref, String submitterName) {\n+        this.xref = xref;\n+        name = new StringWithCustomFacts(submitterName);\n+    }\n+    public Submitter(Submitter other) {\n+        super(other);\n+        if (other.changeDate != null) {\n+            changeDate = new ChangeDate(other.changeDate);\n+        }\n+        if (other.languagePref != null) {\n+            languagePref = new ArrayList<>();\n+            for (StringWithCustomFacts swct : other.languagePref) {\n+                languagePref.add(new StringWithCustomFacts(swct));\n+            }\n+        }\n+        if (other.multimedia != null) {\n+            multimedia = new ArrayList<>();\n+            for (MultimediaReference m : other.multimedia) {\n+                multimedia.add(new MultimediaReference(m));\n+            }\n+        }\n+        if (other.name != null) {\n+            name = new StringWithCustomFacts(other.name);\n+        }\n+        if (other.recIdNumber != null) {\n+            recIdNumber = new StringWithCustomFacts(other.recIdNumber);\n+        }\n+        if (other.regFileNumber != null) {\n+            regFileNumber = new StringWithCustomFacts(other.regFileNumber);\n+        }\n+        if (other.userReferences != null) {\n+            userReferences = new ArrayList<>();\n+            for (UserReference ur : other.userReferences) {\n+                userReferences.add(new UserReference(ur));\n+            }\n+        }\n+        xref = other.xref;\n+    }\n+    public List<StringWithCustomFacts> getLanguagePref() {\n+    public List<StringWithCustomFacts> getLanguagePref(boolean initializeIfNeeded) {\n+    public List<MultimediaReference> getMultimedia() {\n+    public List<MultimediaReference> getMultimedia(boolean initializeIfNeeded) {\n+    public StringWithCustomFacts getName() {\n+    public StringWithCustomFacts getRecIdNumber() {\n+    public StringWithCustomFacts getRegFileNumber() {\n+    @Override\n+        result = prime * result + (changeDate == null ? 0 : changeDate.hashCode());\n+        result = prime * result + (languagePref == null ? 0 : languagePref.hashCode());\n+        result = prime * result + (multimedia == null ? 0 : multimedia.hashCode());\n+        result = prime * result + (name == null ? 0 : name.hashCode());\n+        result = prime * result + (recIdNumber == null ? 0 : recIdNumber.hashCode());\n+        result = prime * result + (regFileNumber == null ? 0 : regFileNumber.hashCode());\n+        result = prime * result + (userReferences == null ? 0 : userReferences.hashCode());\n+        result = prime * result + (xref == null ? 0 : xref.hashCode());\n+    public void setName(String name) {\n+        this.name = name == null ? null : new StringWithCustomFacts(name);\n+    }\n+    public void setName(StringWithCustomFacts name) {\n+    public void setRecIdNumber(String recIdNumber) {\n+        this.recIdNumber = recIdNumber == null ? null : new StringWithCustomFacts(recIdNumber);\n+    }\n+    public void setRecIdNumber(StringWithCustomFacts recIdNumber) {\n+    public void setRegFileNumber(String regFileNumber) {\n+        this.regFileNumber = regFileNumber == null ? null : new StringWithCustomFacts(regFileNumber);\n+    }\n+    public void setRegFileNumber(StringWithCustomFacts regFileNumber) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+            builder.append(\", \");\n+        }\n+    private static final long serialVersionUID = -1855269504871281907L;\n+    Submitter submitter;\n+    public SubmitterReference() {\n+    }\n+    public SubmitterReference(Submitter submitter) {\n+        this.submitter = submitter;\n+    }\n+    public SubmitterReference(SubmitterReference other) {\n+        super(other);\n+        if (other.submitter != null) {\n+            submitter = new Submitter(other.submitter);\n+        }\n+    }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (!(obj instanceof SubmitterReference)) {\n+            return false;\n+        }\n+        SubmitterReference other = (SubmitterReference) obj;\n+        if (submitter == null) {\n+            if (other.submitter != null) {\n+                return false;\n+            }\n+        } else if (!submitter.equals(other.submitter)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public Submitter getSubmitter() {\n+        return submitter;\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = super.hashCode();\n+        result = prime * result + ((submitter == null) ? 0 : submitter.hashCode());\n+        return result;\n+    }\n+    public void setSubmitter(Submitter submitter) {\n+        this.submitter = submitter;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder(25);\n+        builder.append(\"SubmitterReference [\");\n+        if (submitter != null) {\n+            builder.append(\"submitter=\");\n+            builder.append(submitter);\n+            builder.append(\", \");\n+        }\n+        if (customFacts != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(customFacts);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    private StringWithCustomFacts referenceNum;\n+    private StringWithCustomFacts type;\n+    public UserReference() {\n+    }\n+    public UserReference(UserReference other) {\n+        super(other);\n+        if (other.referenceNum != null) {\n+            referenceNum = new StringWithCustomFacts(other.referenceNum);\n+        }\n+        if (other.type != null) {\n+            type = new StringWithCustomFacts(other.type);\n+        }\n+    }\n+    public StringWithCustomFacts getReferenceNum() {\n+    public StringWithCustomFacts getType() {\n+    public void setReferenceNum(String referenceNum) {\n+        this.referenceNum = referenceNum == null ? null : new StringWithCustomFacts(referenceNum);\n+    }\n+    public void setReferenceNum(StringWithCustomFacts referenceNum) {\n+    public void setType(String type) {\n+        this.type = type == null ? null : new StringWithCustomFacts(type);\n+    }\n+    public void setType(StringWithCustomFacts type) {\n+        if (getCustomFacts() != null) {\n+            builder.append(\"customFacts=\");\n+            builder.append(getCustomFacts());\n+    WIFE\n+    CHALLENGED(\"challenged\", \"suspect but not proven or disproven\"),\n+    DISPROVEN(\"disproven\", \"there has been a challenge but linkage was disproven\"),\n+    PROVEN(\"proven\", \"there has been a challenge but linkage was proven\");\n+    public static ChildLinkageStatus getForCode(String code) {\n+        for (ChildLinkageStatus e : values()) {\n+            if (e.code.equals(code)) {\n+                return e;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String code;\n+    private final String description;\n+    ChildLinkageStatus(String code, String description) {\n+        this.code = code;\n+        this.description = description;\n+    }\n+    public String getCode() {\n+        return code;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    @Override\n+    public String toString() {\n+        return code;\n+    }\n+    AFRIKAANS(\"Afrikaans\", \"Afrikaans\"),\n+    ALBANIAN(\"Albanian\", \"Albanian\"),\n+    AMHARIC(\"Amharic\", \"Amharic\"),\n+    ANGLO(\"Anglo\", \"Anglo\"),\n+    ARABIC(\"Arabic\", \"Arabic\"),\n+    ARMENIAN(\"Armenian\", \"Armenian\"),\n+    ASSAMESE(\"Assamese\", \"Assamese\"),\n+    BELORUSIAN(\"Belorusian\", \"Belorusian\"),\n+    BENGALI(\"Bengali\", \"Bengali\"),\n+    BRAJ(\"Braj\", \"Braj\"),\n+    BULGARIAN(\"Bulgarian\", \"Bulgarian\"),\n+    BURMESE(\"Burmese\", \"Burmese\"),\n+    CANTONESE(\"Cantonese\", \"Cantonese\"),\n+    CATALAN(\"Catalan\", \"Catalan\"),\n+    CATALAN_SPN(\"Catalan_Spn\", \"Catalan_Spn\"),\n+    CHURCH(\"Church\", \"Church\"),\n+    CZECH(\"Czech\", \"Czech\"),\n+    DANISH(\"Danish\", \"Danish\"),\n+    DOGRI(\"Dogri\", \"Dogri\"),\n+    DUTCH(\"Dutch\", \"Dutch\"),\n+    ENGLISH(\"English\", \"English\"),\n+    ESPERANTO(\"Esperanto\", \"Esperanto\"),\n+    ESTONIAN(\"Estonian\", \"Estonian\"),\n+    FAROESE(\"Faroese\", \"Faroese\"),\n+    FINNISH(\"Finnish\", \"Finnish\"),\n+    FRENCH(\"French\", \"French\"),\n+    GEORGIAN(\"Georgian\", \"Georgian\"),\n+    GERMAN(\"German\", \"German\"),\n+    GREEK(\"Greek\", \"Greek\"),\n+    GUJARATI(\"Gujarati\", \"Gujarati\"),\n+    HAWAIIAN(\"Hawaiian\", \"Hawaiian\"),\n+    HEBREW(\"Hebrew\", \"Hebrew\"),\n+    HINDI(\"Hindi\", \"Hindi\"),\n+    HUNGARIAN(\"Hungarian\", \"Hungarian\"),\n+    ICELANDIC(\"Icelandic\", \"Icelandic\"),\n+    INDONESIAN(\"Indonesian\", \"Indonesian\"),\n+    ITALIAN(\"Italian\", \"Italian\"),\n+    JAPANESE(\"Japanese\", \"Japanese\"),\n+    KANNADA(\"Kannada\", \"Kannada\"),\n+    KHMER(\"Khmer\", \"Khmer\"),\n+    KONKANI(\"Konkani\", \"Konkani\"),\n+    KOREAN(\"Korean\", \"Korean\"),\n+    LAHNDA(\"Lahnda\", \"Lahnda\"),\n+    LAO(\"Lao\", \"Lao\"),\n+    LATVIAN(\"Latvian\", \"Latvian\"),\n+    LITHUANIAN(\"Lithuanian\", \"Lithuanian\"),\n+    MACEDONIAN(\"Macedonian\", \"Macedonian\"),\n+    MAITHILI(\"Maithili\", \"Maithili\"),\n+    MALAYALAM(\"Malayalam\", \"Malayalam\"),\n+    MANDRIN(\"Mandrin\", \"Mandrin\"),\n+    MANIPURI(\"Manipuri\", \"Manipuri\"),\n+    MARATHI(\"Marathi\", \"Marathi\"),\n+    MEWARI(\"Mewari\", \"Mewari\"),\n+    NAVAHO(\"Navaho\", \"Navaho\"),\n+    NEPALI(\"Nepali\", \"Nepali\"),\n+    NORWEGIAN(\"Norwegian\", \"Norwegian\"),\n+    ORIYA(\"Oriya\", \"Oriya\"),\n+    PAHARI(\"Pahari\", \"Pahari\"),\n+    PALI(\"Pali\", \"Pali\"),\n+    PANJABI(\"Panjabi\", \"Panjabi\"),\n+    PERSIAN(\"Persian\", \"Persian\"),\n+    POLISH(\"Polish\", \"Polish\"),\n+    PORTUGUESE(\"Portuguese\", \"Portuguese\"),\n+    PRAKRIT(\"Prakrit\", \"Prakrit\"),\n+    PUSTO(\"Pusto\", \"Pusto\"),\n+    RAJASTHANI(\"Rajasthani\", \"Rajasthani\"),\n+    ROMANIAN(\"Romanian\", \"Romanian\"),\n+    RUSSIAN(\"Russian\", \"Russian\"),\n+    SANSKRIT(\"Sanskrit\", \"Sanskrit\"),\n+    SAXON(\"Saxon\", \"Saxon\"),\n+    SERB(\"Serb\", \"Serb\"),\n+    SERBO_CROA(\"Serbo_Croa\", \"Serbo_Croa\"),\n+    SLAVIC(\"Slavic\", \"Slavic\"),\n+    SLOVAK(\"Slovak\", \"Slovak\"),\n+    SLOVENE(\"Slovene\", \"Slovene\"),\n+    SPANISH(\"Spanish\", \"Spanish\"),\n+    SWEDISH(\"Swedish\", \"Swedish\"),\n+    TAGALOG(\"Tagalog\", \"Tagalog\"),\n+    TAMIL(\"Tamil\", \"Tamil\"),\n+    TELUGU(\"Telugu\", \"Telugu\"),\n+    THAI(\"Thai\", \"Thai\"),\n+    TIBETAN(\"Tibetan\", \"Tibetan\"),\n+    TURKISH(\"Turkish\", \"Turkish\"),\n+    UKRAINIAN(\"Ukrainian\", \"Ukrainian\"),\n+    URDU(\"Urdu\", \"Urdu\"),\n+    VIETNAMESE(\"Vietnamese\", \"Vietnamese\"),\n+    YIDDISH(\"Yiddish\", \"Yiddish\");\n+    public static LanguageID getForCode(String code) {\n+        for (LanguageID e : values()) {\n+            if (e.code.equals(code)) {\n+                return e;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String code;\n+    private final String description;\n+    LanguageID(String code, String description) {\n+        this.code = code;\n+        this.description = description;\n+    }\n+    public String getCode() {\n+        return code;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    @Override\n+    public String toString() {\n+        return code;\n+    }\n+    CHILD(\"CHILD\", \"Died before becoming eight years old, baptism not required.\"),\n+    COMPLETED(\"COMPLETED\", \"Completed but the date is not known.\"),\n+    EXCLUDED(\"EXCLUDED\", \"Patron excluded this ordinance from being cleared in this submission.\"),\n+    PRE_1970(\"PRE-1970\", \"Ordinance from temple records of work completed before 1970, assumed complete.\"),\n+    STILLBORN(\"STILLBORN\", \"Stillborn, baptism not required.\"),\n+    SUBMITTED(\"SUBMITTED\", \"Ordinance was previously submitted.\"),\n+    UNCLEARED(\"UNCLEARED\", \"Data for clearing ordinance request was insufficient.\");\n+    public static LdsBaptismDateStatus getForCode(String code) {\n+        for (LdsBaptismDateStatus e : values()) {\n+            if (e.code.equals(code)) {\n+                return e;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String code;\n+    private final String description;\n+    LdsBaptismDateStatus(String code, String description) {\n+        this.code = code;\n+        this.description = description;\n+    }\n+    public String getCode() {\n+        return code;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    @Override\n+    public String toString() {\n+        return code;\n+    }\n+    BIC(\"BIC\", \"Born in the covenant receiving blessing of child to parent sealing\"),\n+    COMPLETED(\"COMPLETED\", \"Completed but the date is not known.\"),\n+    EXCLUDED(\"EXCLUDED\", \"Patron excluded this ordinance from being cleared in this submission.\"),\n+    DNS(\"DNS\", \"This ordinance is not authorized\"),\n+    PRE_1970(\"PRE-1970\", \"Ordinance from temple records of work completed before 1970, assumed complete.\"),\n+    STILLBORN(\"STILLBORN\", \"Stillborn, baptism not required.\"),\n+    SUBMITTED(\"SUBMITTED\", \"Ordinance was previously submitted.\"),\n+    UNCLEARED(\"UNCLEARED\", \"Data for clearing ordinance request was insufficient.\");\n+    public static LdsChildSealingDateStatus getForCode(String code) {\n+        for (LdsChildSealingDateStatus e : values()) {\n+            if (e.code.equals(code)) {\n+                return e;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String code;\n+    private final String description;\n+    LdsChildSealingDateStatus(String code, String description) {\n+        this.code = code;\n+        this.description = description;\n+    }\n+    public String getCode() {\n+        return code;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    @Override\n+    public String toString() {\n+        return code;\n+    }\n+    CHILD(\"CHILD\", \"Died before becoming eight years old.\"),\n+    COMPLETED(\"COMPLETED\", \"Completed but the date is not known.\"),\n+    EXCLUDED(\"EXCLUDED\", \"Patron excluded this ordinance from being cleared in this submission.\"),\n+    PRE_1970(\"PRE-1970\", \"Ordinance from temple records of work completed before 1970, assumed complete.\"),\n+    STILLBORN(\"STILLBORN\", \"Stillborn, baptism not required.\"),\n+    SUBMITTED(\"SUBMITTED\", \"Ordinance was previously submitted.\"),\n+    UNCLEARED(\"UNCLEARED\", \"Data for clearing ordinance request was insufficient.\");\n+    public static LdsEndowmentDateStatus getForCode(String code) {\n+        for (LdsEndowmentDateStatus e : values()) {\n+            if (e.code.equals(code)) {\n+                return e;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String code;\n+    private final String description;\n+    LdsEndowmentDateStatus(String code, String description) {\n+        this.code = code;\n+        this.description = description;\n+    }\n+    public String getCode() {\n+        return code;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    @Override\n+    public String toString() {\n+        return code;\n+    }\n+    CANCELED(\"CANCELED\", \"Canceled and considered invalid\"),\n+    COMPLETED(\"COMPLETED\", \"Completed but the date is not known\"),\n+    EXCLUDED(\"EXCLUDED\", \"Patron excluded this ordinance from being cleared in this submission\"),\n+    DNS(\"DNS\", \"This ordinance is not authorized\"),\n+    DNS_CAN(\"DNS/CAN\", \"This ordinance is not authorized, previous sealing cancelled\"),\n+    PRE_1970(\"PRE-1970\", \"From before 1970, assumed complete\"),\n+    SUBMITTED(\"SUBMITTED\", \"Ordinance was previously submitted\"),\n+    UNCLEARED(\"UNCLEARED\", \"Data for clearing ordinance request was insufficient\");\n+    public static LdsSpouseSealingDateStatus getForCode(String code) {\n+        for (LdsSpouseSealingDateStatus e : values()) {\n+            if (e.code.equals(code)) {\n+                return e;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String code;\n+    private final String description;\n+    LdsSpouseSealingDateStatus(String code, String description) {\n+        this.code = code;\n+        this.description = description;\n+    }\n+    public String getCode() {\n+        return code;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    @Override\n+    public String toString() {\n+        return code;\n+    }\n+    ADOPTED(\"adopted\", \"indicates adoptive parents\"),\n+    BIRTH(\"birth\", \"indicates birth parents\"),\n+    FOSTER(\"foster\", \"indicates child was included in a foster or guardian family\"),\n+    SEALING(\"sealing\", \"indicates child was sealed to parents other than birth parents\");\n+    public static PedigreeLinkageType getForCode(String code) {\n+        for (PedigreeLinkageType v : values()) {\n+            if (v.code.equals(code)) {\n+                return v;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String code;\n+    private final String description;\n+    PedigreeLinkageType(String code, String description) {\n+        this.code = code;\n+        this.description = description;\n+    }\n+    public String getCode() {\n+        return code;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    @Override\n+    public String toString() {\n+        return code;\n+    }\n+    CONFIDENTIAL(\"confidential\", \"Marked as confidential by user\"),\n+    LOCKED(\"locked\", \"Marked as unchangable by Ancestral File custodian\"),\n+    PRIVACY(\"privacy\", \"Information not disclosed to protect privacy\");\n+    public static RestrictionNoticeType getForCode(String code) {\n+        for (RestrictionNoticeType e : values()) {\n+            if (e.code.equals(code)) {\n+                return e;\n+            }\n+        }\n+        return null;\n+    }\n+    private final String code;\n+    private final String description;\n+    RestrictionNoticeType(String code, String description) {\n+        this.code = code;\n+        this.description = description;\n+    }\n+    public String getCode() {\n+        return code;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    @Override\n+    public String toString() {\n+        return code;\n+    }\n+    protected int clearCustomTagsOfType(HasCustomFacts hct, String tag) {\n+        int result = 0;\n+        List<CustomFact> customFacts = hct.getCustomFacts();\n+        if (customFacts != null) {\n+            for (int i = 0; i < customFacts.size();) {\n+                CustomFact cf = customFacts.get(i);\n+                if (tag.equals(cf.getTag())) {\n+                    customFacts.remove(i);\n+                    result++;\n+                } else {\n+                    i++;\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+    protected int clearCustomTagsOfTypeAndSubType(AbstractElement elem, String tag, String subType) {\n+        int result = 0;\n+        if (elem.getCustomFacts() == null) {\n+            return result;\n+        }\n+        int i = 0;\n+        while (i < elem.getCustomFacts().size()) {\n+            CustomFact fact = elem.getCustomFacts().get(i);\n+            if (fact.getTag().equals(tag) && fact.getType() != null && fact.getType().getValue() != null && fact.getType()\n+                    .getValue().equals(subType)) {\n+                elem.getCustomFacts().remove(i);\n+                result++;\n+            } else {\n+                i++;\n+            }\n+        }\n+        return result;\n+    }\n+    protected List<CustomFact> getCustomTagsWithTagAndType(AbstractElement elem, String tag, String type) {\n+        List<CustomFact> result = new ArrayList<>();\n+        if (elem.getCustomFacts() == null) {\n+            return result;\n+        }\n+        for (CustomFact fact : elem.getCustomFacts()) {\n+            if (fact.getTag().equals(tag) && fact.getType() != null && fact.getType().getValue() != null && fact.getType()\n+                    .getValue().equals(type)) {\n+                result.add(fact);\n+            }\n+        }\n+        return result;\n+    }\n+    protected String getDescriptionForCustomTag(HasCustomFacts hct, String tag) {\n+        List<CustomFact> cfs = hct.getCustomFactsWithTag(tag);\n+        for (CustomFact cf : cfs) {\n+            if (cf != null && cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    protected boolean isNonNullAndHasRequiredTag(CustomFact fact, String requiredTag) {\n+        return fact != null && requiredTag.equals(fact.getTag());\n+    }\n+    protected void replaceAllCustomFactsOfTypeWithNewFacts(HasCustomFacts hct, String tag, List<CustomFact> facts) {\n+        clearCustomTagsOfType(hct, tag);\n+        if (facts != null && !facts.isEmpty()) {\n+            hct.getCustomFacts(true).addAll(facts);\n+        }\n+    }\n+    protected void setDescriptionForCustomTag(HasCustomFacts hcf, String tag, String value) {\n+        clearCustomTagsOfType(hcf, tag);\n+        if (value != null && !value.trim().isEmpty()) {\n+            CustomFact cf = new CustomFact(tag);\n+            cf.setDescription(value);\n+            hcf.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void addDnaMarker(Individual individual, CustomFact dnaMarker) {\n+        if (dnaMarker == null) {\n+            throw new IllegalArgumentException(\"The dnaMarker argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(dnaMarker, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The dnaMarker argument had the wrong tag value; expected _DNA, found \" + dnaMarker\n+                    .getTag());\n+        }\n+        StringWithCustomFacts type = dnaMarker.getType();\n+        if (type != null && !\"DNA Markers\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\"The dnaMarker argument had the wrong type value; expected 'DNA Markers', found '\"\n+                    + type + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(dnaMarker);\n+    }\n+    public void addElected(Individual individual, CustomFact elected) {\n+        if (elected == null) {\n+            throw new IllegalArgumentException(\"The elected argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(elected, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The elected argument had the wrong tag value; expected _ATTR, found \" + elected\n+                    .getTag());\n+        }\n+        StringWithCustomFacts type = elected.getType();\n+        if (type != null && !\"Elected\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\"The elected argument had the wrong type value; expected 'Elected', found '\" + type\n+                    + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(elected);\n+    }\n+    public CustomFact addEmail(AbstractEvent event, String emailString) {\n+        CustomFact cf = newEmail(emailString);\n+        event.getCustomFacts(true).add(cf);\n+        return cf;\n+    }\n+    public CustomFact addEmail(CustomFact customFact, String emailString) {\n+        CustomFact cf = newEmail(emailString);\n+        customFact.getCustomFacts(true).add(cf);\n+        return cf;\n+    }\n+    public CustomFact addEmail(Repository repo, String emailString) {\n+        CustomFact cf = newEmail(emailString);\n+        repo.getCustomFacts(true).add(cf);\n+        return cf;\n+    }\n+    public CustomFact addEmail(Submitter submitter, String emailString) {\n+        CustomFact cf = newEmail(emailString);\n+        submitter.getCustomFacts(true).add(cf);\n+        return cf;\n+    }\n+    public void addEmployment(Individual individual, CustomFact employment) {\n+        if (employment == null) {\n+            throw new IllegalArgumentException(\"The employment argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(employment, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The employment argument had the wrong tag value; expected _ATTR, found \"\n+                    + employment.getTag());\n+        }\n+        StringWithCustomFacts type = employment.getType();\n+        if (type != null && !\"Employment\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\"The employment argument had the wrong type value; expected 'Employment', found '\"\n+                    + type + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(employment);\n+    }\n+    public void addHeight(Individual individual, CustomFact height) {\n+        if (height == null) {\n+            throw new IllegalArgumentException(\"The height argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(height, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The height argument had the wrong tag value; expected _ATTR, found \" + height\n+                    .getTag());\n+        }\n+        StringWithCustomFacts type = height.getType();\n+        if (type != null && !\"Height\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\"The height argument had the wrong type value; expected 'Height', found '\" + type\n+                    + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(height);\n+    }\n+    public void addMedicalCondition(Individual individual, CustomFact medicalCondition) {\n+        if (medicalCondition == null) {\n+            throw new IllegalArgumentException(\"The medicalCondition argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(medicalCondition, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The medicalCondition argument had the wrong tag value; expected _ATTR, found \"\n+                    + medicalCondition.getTag());\n+        }\n+        StringWithCustomFacts type = medicalCondition.getType();\n+        if (type != null && !\"Medical Condition\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\n+                    \"The medicalCondition argument had the wrong type value; expected 'Medical Condition', found '\" + type + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(medicalCondition);\n+    }\n+    public void addMilitaryId(Individual individual, CustomFact militaryId) {\n+        if (militaryId == null) {\n+            throw new IllegalArgumentException(\"The militaryId argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(militaryId, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The militaryId argument had the wrong tag value; expected _ATTR, found \"\n+                    + militaryId.getTag());\n+        }\n+        StringWithCustomFacts type = militaryId.getType();\n+        if (type != null && !\"Military ID\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\"The militaryId argument had the wrong type value; expected 'Military ID', found '\"\n+                    + type + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(militaryId);\n+    }\n+    public void addMilitaryService(Individual individual, CustomFact militaryService) {\n+        if (militaryService == null) {\n+            throw new IllegalArgumentException(\"The militaryService argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(militaryService, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The militaryService argument had the wrong tag value; expected _ATTR, found \"\n+                    + militaryService.getTag());\n+        }\n+        StringWithCustomFacts type = militaryService.getType();\n+        if (type != null && !\"Military Service\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\n+                    \"The militaryService argument had the wrong type value; expected 'Military Service', found '\" + type + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(militaryService);\n+    }\n+    public void addMission(Individual individual, CustomFact mission) {\n+        if (mission == null) {\n+            throw new IllegalArgumentException(\"The mission argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(mission, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The mission argument had the wrong tag value; expected _ATTR, found \" + mission\n+                    .getTag());\n+        }\n+        StringWithCustomFacts type = mission.getType();\n+        if (type != null && !\"Mission (LDS)\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\"The mission argument had the wrong type value; expected 'Mission (LDS)', found '\"\n+                    + type + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(mission);\n+    }\n+    public void addNamedList(Gedcom gedcom, CustomFact namedList) {\n+        if (namedList == null) {\n+            throw new IllegalArgumentException(\"namedList cannot be null\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(namedList, \"_LIST\")) {\n+            throw new IllegalArgumentException(\n+                    \"Custom fact supplied in namedList does not have the correct tag. Expected _LIST, found \" + namedList.getTag());\n+        }\n+        gedcom.getHeader().getCustomFacts(true).add(namedList);\n+    }\n+    public void addNamesake(Individual individual, CustomFact namesake) {\n+        if (namesake == null) {\n+            throw new IllegalArgumentException(\"The namesake argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(namesake, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The namesake argument had the wrong tag value; expected _ATTR, found \" + namesake\n+                    .getTag());\n+        }\n+        StringWithCustomFacts type = namesake.getType();\n+        if (type != null && !\"Namesake\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\"The namesake argument had the wrong type value; expected 'Namesake', found '\" + type\n+                    + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(namesake);\n+    }\n+    public void addOrdinance(Individual individual, CustomFact ordinance) {\n+        if (ordinance == null) {\n+            throw new IllegalArgumentException(\"The ordinance argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(ordinance, \"_ATTR\")) {\n+            throw new IllegalArgumentException(\"The ordinance argument had the wrong tag value; expected _ATTR, found \" + ordinance\n+                    .getTag());\n+        }\n+        StringWithCustomFacts type = ordinance.getType();\n+        if (type != null && !\"Ordinance\".equals(type.getValue())) {\n+            throw new IllegalArgumentException(\"The ordinance argument had the wrong type value; expected 'Ordinance', found '\"\n+                    + type + \"'\");\n+        }\n+        individual.getCustomFacts(true).add(ordinance);\n+    }\n+    public void addPlaceRecord(Gedcom gedcom, CustomFact place) {\n+        if (place == null) {\n+            throw new IllegalArgumentException(\"place must be non-null\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(place, \"_PLAC\")) {\n+            throw new IllegalArgumentException(\"place did not have the required custom tag; expected _PLAC, found \" + place\n+                    .getTag());\n+        }\n+        gedcom.getCustomFacts(true).add(place);\n+    }\n+    public void addUnrelatedWitness(IndividualEvent event, CustomFact unrelatedWitness) {\n+        if (unrelatedWitness == null) {\n+            throw new IllegalArgumentException(\"unrelatedWitness cannot be null\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(unrelatedWitness, \"_SHAN\")) {\n+            throw new IllegalArgumentException(\n+                    \"Custom fact supplied in unrelatedWitness does not have the correct tag. Expected _SHAN, found \"\n+                            + unrelatedWitness.getTag());\n+        }\n+        event.getCustomFacts(true).add(unrelatedWitness);\n+    }\n+    public CustomFact addWebUrl(AbstractEvent event, String webUrlString) {\n+        CustomFact cf = newWebUrl(webUrlString);\n+        event.getCustomFacts(true).add(cf);\n+        return cf;\n+    }\n+    public CustomFact addWebUrl(CustomFact customFact, String webUrlString) {\n+        CustomFact cf = newWebUrl(webUrlString);\n+        customFact.getCustomFacts(true).add(cf);\n+        return cf;\n+    }\n+    public CustomFact addWebUrl(Repository repo, String webUrlString) {\n+        CustomFact cf = newWebUrl(webUrlString);\n+        repo.getCustomFacts(true).add(cf);\n+        return cf;\n+    }\n+    public CustomFact addWebUrl(Submitter submitter, String webUrlString) {\n+        CustomFact cf = newWebUrl(webUrlString);\n+        submitter.getCustomFacts(true).add(cf);\n+        return cf;\n+    }\n+    public void addWitnessReference(Gedcom gedcom, IndividualEvent event, CustomFact witnessReference) {\n+        if (witnessReference == null) {\n+            throw new IllegalArgumentException(\"unrelatedWitness cannot be null\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(witnessReference, \"_SHAR\")) {\n+            throw new IllegalArgumentException(\n+                    \"Custom fact supplied in witnessReference does not have the correct tag. Expected _SHAR, found \"\n+                            + witnessReference.getTag());\n+        }\n+        if (witnessReference.getDescription() == null || witnessReference.getDescription().getValue().trim().isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"The witnessReference value supplied does not contain a cross-reference to an individual\");\n+        }\n+        String xref = witnessReference.getDescription().getValue();\n+        if (gedcom.getIndividuals().get(xref) == null) {\n+            throw new IllegalArgumentException(\"Individual referenced in the witnessReference value (xref=\" + xref\n+                    + \") could not be found in the gedcom supplied\");\n+        }\n+        event.getCustomFacts(true).add(witnessReference);\n+    }\n+    public List<CustomFact> getDnaMarkers(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"DNA Markers\");\n+    }\n+    public List<CustomFact> getElected(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"Elected\");\n+    }\n+    public List<String> getEmails(AbstractEvent event) {\n+        List<String> result = new ArrayList<>();\n+        for (CustomFact cf : event.getCustomFactsWithTag(\"_EMAIL\")) {\n+            if (cf != null && cf.getDescription() != null) {\n+                result.add(cf.getDescription().getValue());\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+    }\n+    public List<String> getEmails(CustomFact customFact) {\n+        List<String> result = new ArrayList<>();\n+        for (CustomFact cf : customFact.getCustomFactsWithTag(\"_EMAIL\")) {\n+            if (cf != null && cf.getDescription() != null) {\n+                result.add(cf.getDescription().getValue());\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+    }\n+    public List<String> getEmails(Repository repository) {\n+        List<String> result = new ArrayList<>();\n+        for (CustomFact cf : repository.getCustomFactsWithTag(\"_EMAIL\")) {\n+            if (cf != null && cf.getDescription() != null) {\n+                result.add(cf.getDescription().getValue());\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+    }\n+    public List<String> getEmails(Submitter submitter) {\n+        List<String> result = new ArrayList<>();\n+        for (CustomFact cf : submitter.getCustomFactsWithTag(\"_EMAIL\")) {\n+            if (cf != null && cf.getDescription() != null) {\n+                result.add(cf.getDescription().getValue());\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+    }\n+    public List<CustomFact> getEmployment(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"Employment\");\n+    }\n+    public String getFactSetSentenceTemplate(AbstractEvent eventFactAttribute) {\n+        if (eventFactAttribute.getCustomFacts() != null) {\n+            for (CustomFact cf : eventFactAttribute.getCustomFacts()) {\n+                if (\"_SENT\".equals(cf.getTag())) {\n+                    return cf.getDescription() == null ? null : cf.getDescription().getValue();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+    public String getFactSetSentenceTemplate(CustomFact customFact) {\n+        if (customFact.getCustomFacts() != null) {\n+            for (CustomFact cf : customFact.getCustomFacts()) {\n+                if (\"_SENT\".equals(cf.getTag())) {\n+                    return cf.getDescription() == null ? null : cf.getDescription().getValue();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+    public String getFamilyStatus(Family family) {\n+        List<CustomFact> stats = family.getCustomFactsWithTag(\"_STAT\");\n+        if (!stats.isEmpty() && stats.get(0).getDescription() != null) {\n+            return stats.get(0).getDescription().getValue();\n+        }\n+        return null;\n+    }\n+    public CustomFact getFlags(Individual individual) {\n+        List<CustomFact> facts = individual.getCustomFactsWithTag(\"_FLGS\");\n+        if (!facts.isEmpty()) {\n+            return facts.get(0);\n+        }\n+        return null;\n+    }\n+    public List<CustomFact> getHeight(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"Height\");\n+    }\n+    public List<CustomFact> getMedicalCondition(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"Medical Condition\");\n+    }\n+    public List<CustomFact> getMilitaryId(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"Military ID\");\n+    }\n+    public List<CustomFact> getMilitaryService(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"Military Service\");\n+    }\n+    public List<CustomFact> getMission(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"Mission (LDS)\");\n+    }\n+    public String getMultimediaDate(Multimedia multimedia) {\n+        for (CustomFact cf : multimedia.getCustomFactsWithTag(\"_DATE\")) {\n+            if (cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public String getMultimediaFile(Multimedia multimedia) {\n+        for (CustomFact cf : multimedia.getCustomFactsWithTag(\"_FILE\")) {\n+            if (cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public String getMultimediaKeys(Multimedia multimedia) {\n+        for (CustomFact cf : multimedia.getCustomFactsWithTag(\"_KEYS\")) {\n+            if (cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public String getMultimediaNote(Multimedia multimedia) {\n+        for (CustomFact cf : multimedia.getCustomFactsWithTag(\"_NOTE\")) {\n+            if (cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public String getMultimediaNoteArea(NoteStructure note) {\n+        for (CustomFact cf : note.getCustomFactsWithTag(\"_AREA\")) {\n+            if (cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public String getMultimediaNoteASID(NoteStructure note) {\n+        for (CustomFact cf : note.getCustomFactsWithTag(\"_ASID\")) {\n+            if (cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public String getMultimediaNoteCaption(NoteStructure note) {\n+        for (CustomFact cf : note.getCustomFactsWithTag(\"_CAPT\")) {\n+            if (cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public String getMultimediaNoteExclusion(NoteStructure note) {\n+        for (CustomFact cf : note.getCustomFactsWithTag(\"_EXCL\")) {\n+            if (cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public List<CustomFact> getNamedList(Gedcom gedcom, String listName) {\n+        if (listName == null) {\n+            throw new IllegalArgumentException(\"listName is a required argument\");\n+        }\n+        List<CustomFact> result = new ArrayList<>();\n+        for (CustomFact cf : gedcom.getHeader().getCustomFactsWithTag(\"_LIST\")) {\n+            if (cf.getDescription() != null && listName.equals(cf.getDescription().getValue())) {\n+                result.add(cf);\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+    }\n+    public List<CustomFact> getNamedLists(Gedcom gedcom) {\n+        return gedcom.getHeader().getCustomFactsWithTag(\"_LIST\");\n+    }\n+    public List<CustomFact> getNamesake(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"Namesake\");\n+    }\n+    public List<CustomFact> getNameUsed(PersonalName pn) {\n+        return pn.getCustomFactsWithTag(\"_USED\");\n+    }\n+    public List<CustomFact> getOrdinances(Individual individual) {\n+        return getCustomTagsWithTagAndType(individual, \"_ATTR\", \"Ordinance\");\n+    }\n+    public String getOtherPlaceName(IndividualEvent immigrationOrEmigrationEvent) {\n+        if (immigrationOrEmigrationEvent == null) {\n+            throw new IllegalArgumentException(\"immigrationOrEmigrationEvent is a required argument\");\n+        }\n+        if (immigrationOrEmigrationEvent.getType() != IndividualEventType.IMMIGRATION && immigrationOrEmigrationEvent\n+                .getType() != IndividualEventType.EMIGRATION) {\n+            throw new IllegalArgumentException(\"Other place names are only supported on \" + IndividualEventType.IMMIGRATION\n+                    + \" and \" + IndividualEventType.EMIGRATION + \" event types; \" + immigrationOrEmigrationEvent.getType()\n+                    + \" was supplied\");\n+        }\n+        for (CustomFact cf : immigrationOrEmigrationEvent.getCustomFactsWithTag(\"_PLAC\")) {\n+            if (cf != null && cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public CustomFact getPlaceRecord(Gedcom gedcom, String xref) {\n+        for (CustomFact cf : gedcom.getCustomFactsWithTag(\"_PLAC\")) {\n+            if (cf.getXref() != null && cf.getXref().equals(xref)) {\n+                return cf;\n+            }\n+        }\n+        return null;\n+    }\n+    public List<CustomFact> getPlaceRecords(Gedcom gedcom) {\n+        return gedcom.getCustomFactsWithTag(\"_PLAC\");\n+    }\n+    public Individual getRootIndividual(Gedcom gedcom) {\n+        List<CustomFact> cfs = gedcom.getHeader().getCustomFactsWithTag(\"_ROOT\");\n+        if (cfs != null && !cfs.isEmpty()) {\n+            CustomFact root = cfs.get(0);\n+            if (root != null && root.getDescription() != null) {\n+                return gedcom.getIndividuals().get(root.getDescription().getValue());\n+            }\n+        }\n+        return null;\n+    }\n+    public String getSourceType(Source src) {\n+        for (CustomFact cf : src.getCustomFactsWithTag(\"_TYPE\")) {\n+            if (cf.getDescription() != null) {\n+                return cf.getDescription().getValue();\n+            }\n+        }\n+        return null;\n+    }\n+    public String getUID(Gedcom gedcom) {\n+        List<CustomFact> customFactsWithTag = gedcom.getHeader().getCustomFactsWithTag(\"_UID\");\n+        if (customFactsWithTag != null && customFactsWithTag.size() == 1 && customFactsWithTag.get(0).getDescription() != null) {\n+            return customFactsWithTag.get(0).getDescription().getValue();\n+        }\n+        return null;\n+    }\n+    public List<CustomFact> getUnrelatedWitnesses(IndividualEvent event) {\n+        return event.getCustomFactsWithTag(\"_SHAN\");\n+    }\n+    public String getVariantExportFormat(Gedcom gedcom) {\n+        GedcomVersion gv = gedcom.getHeader().getGedcomVersion();\n+        if (gv == null) {\n+            return null;\n+        }\n+        return getDescriptionForCustomTag(gedcom.getHeader().getGedcomVersion(), \"_VAR\");\n+    }\n+    public List<String> getWebUrls(AbstractEvent event) {\n+        List<String> result = new ArrayList<>();\n+        for (CustomFact cf : event.getCustomFactsWithTag(\"_WEB\")) {\n+            if (cf != null && cf.getDescription() != null) {\n+                result.add(cf.getDescription().getValue());\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+    }\n+    public List<String> getWebUrls(CustomFact customFact) {\n+        List<String> result = new ArrayList<>();\n+        for (CustomFact cf : customFact.getCustomFactsWithTag(\"_WEB\")) {\n+            if (cf != null && cf.getDescription() != null) {\n+                result.add(cf.getDescription().getValue());\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+    }\n+    public List<String> getWebUrls(Repository repository) {\n+        List<String> result = new ArrayList<>();\n+        for (CustomFact cf : repository.getCustomFactsWithTag(\"_WEB\")) {\n+            if (cf != null && cf.getDescription() != null) {\n+                result.add(cf.getDescription().getValue());\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+    }\n+    public List<String> getWebUrls(Submitter submitter) {\n+        List<String> result = new ArrayList<>();\n+        for (CustomFact cf : submitter.getCustomFactsWithTag(\"_WEB\")) {\n+            if (cf != null && cf.getDescription() != null) {\n+                result.add(cf.getDescription().getValue());\n+            }\n+        }\n+        return Collections.unmodifiableList(result);\n+    }\n+    public List<CustomFact> getWitnessReferences(IndividualEvent event) {\n+        return event.getCustomFactsWithTag(\"_SHAR\");\n+    }\n+    public boolean isEditingEnabled(CustomFact namedList) {\n+        if (!isNonNullAndHasRequiredTag(namedList, \"_LIST\")) {\n+            throw new IllegalArgumentException(\"namedList supplied is not a named list\");\n+        }\n+        List<CustomFact> flags = namedList.getCustomFactsWithTag(\"_FLAG\");\n+        for (CustomFact flag : flags) {\n+            if (flag != null && flag.getDescription() != null && \"E\".equals(flag.getDescription().getValue())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    public CustomFact newDnaMarker(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"DNA Markers\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newElected(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"Elected\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newEmployment(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"Employment\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newFlags() {\n+        return new CustomFact(\"_FLGS\");\n+    }\n+    public CustomFact newHeight(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"Height\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newMedicalCondition(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"Medical Condition\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newMilitaryId(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"Military ID\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newMilitaryService(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"Military Service\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newMission(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"Mission (LDS)\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newNamedList(String string) {\n+        CustomFact result = new CustomFact(\"_LIST\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newNamesake(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"Namesake\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newOrdinance(String string) {\n+        CustomFact result = new CustomFact(\"_ATTR\");\n+        result.setType(\"Ordinance\");\n+        result.setDescription(string);\n+        return result;\n+    }\n+    public CustomFact newPlace(String xref, String placeName) {\n+        if (xref == null) {\n+            throw new IllegalArgumentException(\"xref is required\");\n+        }\n+        if (!xref.matches(\"\\\\@\\\\w+\\\\@\")) {\n+            throw new IllegalArgumentException(\"xref does not consist of letters and numbers between @-signs\");\n+        }\n+        if (placeName == null || placeName.trim().isEmpty()) {\n+            throw new IllegalArgumentException(\"placeName is required and must not be empty\");\n+        }\n+        CustomFact result = new CustomFact(\"_PLAC\");\n+        result.setXref(xref);\n+        result.setDescription(placeName);\n+        return result;\n+    }\n+    public CustomFact newUnrelatedWitness(String witnessName) {\n+        CustomFact result = new CustomFact(\"_SHAN\");\n+        result.setDescription(witnessName);\n+        return result;\n+    }\n+    public CustomFact newWitnessReference(Individual individual) {\n+        CustomFact result = new CustomFact(\"_SHAR\");\n+        result.setDescription(individual.getXref());\n+        return result;\n+    }\n+    public void removeDnaMarkers(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"DNA Markers\");\n+    }\n+    public void removeElected(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"Elected\");\n+    }\n+    public void removeEmails(AbstractEvent event) {\n+        clearCustomTagsOfType(event, \"_EMAIL\");\n+    }\n+    public void removeEmails(CustomFact customFact) {\n+        clearCustomTagsOfType(customFact, \"_EMAIL\");\n+    }\n+    public void removeEmails(Repository repo) {\n+        clearCustomTagsOfType(repo, \"_EMAIL\");\n+    }\n+    public void removeEmails(Submitter submitter) {\n+        clearCustomTagsOfType(submitter, \"_EMAIL\");\n+    }\n+    public void removeEmployment(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"Employment\");\n+    }\n+    public void removeHeight(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"Height\");\n+    }\n+    public void removeMedicalCondition(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"Medical Condition\");\n+    }\n+    public void removeMilitaryId(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"Military ID\");\n+    }\n+    public void removeMilitaryService(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"Military Service\");\n+    }\n+    public void removeMission(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"Mission (LDS)\");\n+    }\n+    public int removeNamedList(Gedcom gedcom, String listName) {\n+        if (listName == null) {\n+            throw new IllegalArgumentException(\"listName is q required argument\");\n+        }\n+        int result = 0;\n+        List<CustomFact> customFacts = gedcom.getHeader().getCustomFacts();\n+        if (customFacts != null) {\n+            int i = 0;\n+            while (i < customFacts.size()) {\n+                CustomFact cf = customFacts.get(i);\n+                if (cf.getDescription() != null && listName.equals(cf.getDescription().getValue())) {\n+                    customFacts.remove(i);\n+                    result++;\n+                } else {\n+                    i++;\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+    public void removeNamedLists(Gedcom gedcom) {\n+        clearCustomTagsOfType(gedcom.getHeader(), \"_LIST\");\n+    }\n+    public void removeNamesake(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"Namesake\");\n+    }\n+    public void removeOrdinances(Individual individual) {\n+        clearCustomTagsOfTypeAndSubType(individual, \"_ATTR\", \"Ordinance\");\n+    }\n+    public boolean removePlaceRecord(Gedcom gedcom, String xref) {\n+        if (gedcom.getCustomFacts() == null) {\n+            return false;\n+        }\n+        int i = 0;\n+        while (i < gedcom.getCustomFacts().size()) {\n+            CustomFact cf = gedcom.getCustomFacts().get(i);\n+            if (\"_PLAC\".equals(cf.getTag()) && cf.getXref() != null && cf.getXref().equals(xref)) {\n+                gedcom.getCustomFacts().remove(i);\n+                return true;\n+            }\n+            i++;\n+        }\n+        return false;\n+    }\n+    public void removePlaceRecords(Gedcom gedcom) {\n+        clearCustomTagsOfType(gedcom, \"_PLAC\");\n+    }\n+    public void removeUnrelatedWitnesses(IndividualEvent event) {\n+        clearCustomTagsOfType(event, \"_SHAN\");\n+    }\n+    public void removeWebUrls(AbstractEvent event) {\n+        clearCustomTagsOfType(event, \"_WEB\");\n+    }\n+    public void removeWebUrls(CustomFact customFact) {\n+        clearCustomTagsOfType(customFact, \"_WEB\");\n+    }\n+    public void removeWebUrls(Repository repo) {\n+        clearCustomTagsOfType(repo, \"_WEB\");\n+    }\n+    public void removeWebUrls(Submitter submitter) {\n+        clearCustomTagsOfType(submitter, \"_WEB\");\n+    }\n+    public void removeWitnessReferences(IndividualEvent event) {\n+        clearCustomTagsOfType(event, \"_SHAR\");\n+    }\n+    public void setEditingEnabled(CustomFact namedList, boolean enabled) {\n+        if (!isNonNullAndHasRequiredTag(namedList, \"_LIST\")) {\n+            throw new IllegalArgumentException(\"namedList supplied is not a named list\");\n+        }\n+        clearCustomTagsOfType(namedList, \"_FLAG\");\n+        CustomFact flag = new CustomFact(\"_FLAG\");\n+        flag.setDescription(enabled ? \"E\" : null);\n+        namedList.getCustomFacts(true).add(flag);\n+    }\n+    public void setFactSetSentenceTemplate(AbstractEvent eventFactAttribute, String string) {\n+        clearCustomTagsOfType(eventFactAttribute, \"_SENT\");\n+        if (string != null) {\n+            CustomFact fsst = new CustomFact(\"_SENT\");\n+            fsst.setDescription(string);\n+            eventFactAttribute.getCustomFacts(true).add(fsst);\n+        }\n+    }\n+    public void setFactSetSentenceTemplate(CustomFact customFact, String string) {\n+        clearCustomTagsOfType(customFact, \"_SENT\");\n+        if (string != null) {\n+            CustomFact fsst = new CustomFact(\"_SENT\");\n+            fsst.setDescription(string);\n+            customFact.getCustomFacts(true).add(fsst);\n+        }\n+    }\n+    public void setFamilyStatus(Family family, String familyStatus) {\n+        clearCustomTagsOfType(family, \"_STAT\");\n+        if (familyStatus != null) {\n+            CustomFact cf = new CustomFact(\"_STAT\");\n+            cf.setDescription(familyStatus);\n+            family.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void setFlags(Individual individual, CustomFact flags) {\n+        if (flags != null && !isNonNullAndHasRequiredTag(flags, \"_FLGS\")) {\n+            throw new IllegalArgumentException(\"flags custom fact did not have the expected tag type of _FLGS - found \" + flags\n+                    .getTag());\n+        }\n+        clearCustomTagsOfType(individual, \"_FLGS\");\n+        if (flags != null) {\n+            individual.getCustomFacts(true).add(flags);\n+        }\n+    }\n+    public void setMultimediaDate(Multimedia multimedia, String multimediaDate) {\n+        clearCustomTagsOfType(multimedia, \"_DATE\");\n+        if (multimediaDate != null) {\n+            CustomFact cf = new CustomFact(\"_DATE\");\n+            cf.setDescription(multimediaDate);\n+            multimedia.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void setMultimediaFile(Multimedia multimedia, String multimediaFile) {\n+        clearCustomTagsOfType(multimedia, \"_FILE\");\n+        if (multimediaFile != null) {\n+            CustomFact cf = new CustomFact(\"_FILE\");\n+            cf.setDescription(multimediaFile);\n+            multimedia.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void setMultimediaKeys(Multimedia multimedia, String multimediaKeys) {\n+        clearCustomTagsOfType(multimedia, \"_KEYS\");\n+        if (multimediaKeys != null) {\n+            CustomFact cf = new CustomFact(\"_KEYS\");\n+            cf.setDescription(multimediaKeys);\n+            multimedia.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void setMultimediaNote(Multimedia multimedia, String multimediaNote) {\n+        clearCustomTagsOfType(multimedia, \"_NOTE\");\n+        if (multimediaNote != null) {\n+            CustomFact cf = new CustomFact(\"_NOTE\");\n+            cf.setDescription(multimediaNote);\n+            multimedia.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void setMultimediaNoteArea(NoteStructure note, String multimediaArea) {\n+        clearCustomTagsOfType(note, \"_AREA\");\n+        if (multimediaArea != null) {\n+            CustomFact cf = new CustomFact(\"_AREA\");\n+            cf.setDescription(multimediaArea);\n+            note.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void setMultimediaNoteASID(NoteStructure note, String multimediaASID) {\n+        setDescriptionForCustomTag(note, \"_ASID\", multimediaASID);\n+    }\n+    public void setMultimediaNoteCaption(NoteStructure note, String multimediaCaption) {\n+        setDescriptionForCustomTag(note, \"_CAPT\", multimediaCaption);\n+    }\n+    public void setMultimediaNoteExclusion(NoteStructure note, String multimediaExclusion) {\n+        setDescriptionForCustomTag(note, \"_EXCL\", multimediaExclusion);\n+    }\n+    public void setNameUsed(PersonalName pn, String nameUsed) {\n+        setDescriptionForCustomTag(pn, \"_USED\", nameUsed);\n+    }\n+    public void setOtherPlaceName(IndividualEvent immigrationOrEmigrationEvent, String otherPlaceName) {\n+        if (immigrationOrEmigrationEvent == null) {\n+            throw new IllegalArgumentException(\"immigrationOrEmigrationEvent is a required argument\");\n+        }\n+        if (immigrationOrEmigrationEvent.getType() != IndividualEventType.IMMIGRATION && immigrationOrEmigrationEvent\n+                .getType() != IndividualEventType.EMIGRATION) {\n+            throw new IllegalArgumentException(\"Other place names are only supported on \" + IndividualEventType.IMMIGRATION\n+                    + \" and \" + IndividualEventType.EMIGRATION + \" event types; \" + immigrationOrEmigrationEvent.getType()\n+                    + \" was supplied\");\n+        }\n+        setDescriptionForCustomTag(immigrationOrEmigrationEvent, \"_PLAC\", otherPlaceName);\n+    }\n+    public void setRootIndividual(Gedcom gedcom, Individual newRootIndividual) {\n+        if (newRootIndividual == null) {\n+            throw new IllegalArgumentException(\"Individual being set as root individual is a required argument\");\n+        }\n+        Individual i = gedcom.getIndividuals().get(newRootIndividual.getXref());\n+        if (!newRootIndividual.equals(i)) {\n+            throw new IllegalArgumentException(\"Individual being set as root individual does not exist in the supplied gedcom\");\n+        }\n+        Header h = gedcom.getHeader();\n+        setDescriptionForCustomTag(h, \"_ROOT\", newRootIndividual.getXref());\n+    }\n+    public void setSourceType(Source src, String sourceType) {\n+        setDescriptionForCustomTag(src, \"_TYPE\", sourceType);\n+    }\n+    public void setUID(Gedcom gedcom, String uid) {\n+        setDescriptionForCustomTag(gedcom.getHeader(), \"_UID\", uid);\n+    }\n+    public void setVariantExportFormat(Gedcom gedcom, String variantExportFormat) {\n+        if (gedcom.getHeader().getGedcomVersion() == null) {\n+            gedcom.getHeader().setGedcomVersion(new GedcomVersion());\n+        }\n+        setDescriptionForCustomTag(gedcom.getHeader().getGedcomVersion(), \"_VAR\", variantExportFormat);\n+    }\n+    private CustomFact newEmail(String emailString) {\n+        CustomFact result = new CustomFact(\"_EMAIL\");\n+        result.setDescription(emailString);\n+        return result;\n+    }\n+    private CustomFact newWebUrl(String webUrlString) {\n+        CustomFact result = new CustomFact(\"_WEB\");\n+        result.setDescription(webUrlString);\n+        return result;\n+    }\n+    public List<CustomFact> getCauseOfDeath(Individual i) {\n+        return i.getCustomFactsWithTag(\"_DCAUSE\");\n+    }\n+    public List<CustomFact> getCertaintyJustification(AbstractCitation cws) {\n+        return cws.getCustomFactsWithTag(\"_JUST\");\n+    }\n+    public List<CustomFact> getCircumcision(Individual i) {\n+        return i.getCustomFactsWithTag(\"_CIRC\");\n+    }\n+    public List<CustomFact> getDestinations(Individual i) {\n+        return i.getCustomFactsWithTag(\"_DEST\");\n+    }\n+    public List<CustomFact> getDnaMarkers(Individual i) {\n+        return i.getCustomFactsWithTag(\"_DNA\");\n+    }\n+    public List<CustomFact> getElected(Individual i) {\n+        return i.getCustomFactsWithTag(\"_ELEC\");\n+    }\n+    public List<CustomFact> getEmployment(Individual i) {\n+        return i.getCustomFactsWithTag(\"_EMPLOY\");\n+    }\n+    public List<CustomFact> getExcommunication(Individual i) {\n+        return i.getCustomFactsWithTag(\"_EXCM\");\n+    }\n+    public List<CustomFact> getFatherRelationship(IndividualReference familySpecificChildReference) {\n+        return familySpecificChildReference.getCustomFactsWithTag(\"_FREL\");\n+    }\n+    public List<CustomFact> getFuneral(Individual i) {\n+        return i.getCustomFactsWithTag(\"_FUN\");\n+    }\n+    public List<CustomFact> getHeights(Individual i) {\n+        return i.getCustomFactsWithTag(\"_HEIG\");\n+    }\n+    public List<CustomFact> getInitiatory(Individual i) {\n+        return i.getCustomFactsWithTag(\"_INIT\");\n+    }\n+    public List<CustomFact> getMedical(Individual i) {\n+        return i.getCustomFactsWithTag(\"_MDCL\");\n+    }\n+    public List<CustomFact> getMilitary(Individual i) {\n+        return i.getCustomFactsWithTag(\"_MILT\");\n+    }\n+    public List<CustomFact> getMilitaryId(Individual i) {\n+        return i.getCustomFactsWithTag(\"_MILTID\");\n+    }\n+    public List<CustomFact> getMission(Individual i) {\n+        return i.getCustomFactsWithTag(\"_MISN\");\n+    }\n+    public List<CustomFact> getMotherRelationship(IndividualReference familySpecificChildReference) {\n+        return familySpecificChildReference.getCustomFactsWithTag(\"_MREL\");\n+    }\n+    public List<CustomFact> getNamesake(Individual i) {\n+        return i.getCustomFactsWithTag(\"_NAMS\");\n+    }\n+    public List<CustomFact> getOrdinance(Individual i) {\n+        return i.getCustomFactsWithTag(\"_ORDI\");\n+    }\n+    public List<CustomFact> getOrigin(Individual i) {\n+        return i.getCustomFactsWithTag(\"_ORIG\");\n+    }\n+    public List<CustomFact> getPhoto(Individual i) {\n+        return i.getCustomFactsWithTag(\"_PHOTO\");\n+    }\n+    public List<CustomFact> getSeparation(Family family) {\n+        return family.getCustomFactsWithTag(\"_SEPR\");\n+    }\n+    public List<CustomFact> getWebLink(AbstractCitation cws) {\n+        return cws.getCustomFactsWithTag(\"_LINK\");\n+    }\n+    public List<CustomFact> getWeight(Individual i) {\n+        return i.getCustomFactsWithTag(\"_WEIG\");\n+    }\n+    public CustomFact newCauseOfDeathCustomFact() {\n+        return new CustomFact(\"_DCAUSE\");\n+    }\n+    public CustomFact newCertaintyJustificationCustomFact() {\n+        return new CustomFact(\"_JUST\");\n+    }\n+    public CustomFact newCircumcisionCustomFact() {\n+        return new CustomFact(\"_CIRC\");\n+    }\n+    public CustomFact newDestinationCustomFact() {\n+        return new CustomFact(\"_DEST\");\n+    }\n+    public CustomFact newDnaMarkerCustomFact() {\n+        return new CustomFact(\"_DNA\");\n+    }\n+    public CustomFact newElectedCustomFact() {\n+        return new CustomFact(\"_ELEC\");\n+    }\n+    public CustomFact newEmploymentCustomFact() {\n+        return new CustomFact(\"_EMPLOY\");\n+    }\n+    public CustomFact newExcommunicationCustomFact() {\n+        return new CustomFact(\"_EXCM\");\n+    }\n+    public CustomFact newFatherRelationshipCustomFact() {\n+        return new CustomFact(\"_FREL\");\n+    }\n+    public CustomFact newFuneralCustomFact() {\n+        return new CustomFact(\"_FUN\");\n+    }\n+    public CustomFact newHeightCustomFact() {\n+        return new CustomFact(\"_HEIG\");\n+    }\n+    public CustomFact newInitiatoryCustomFact() {\n+        return new CustomFact(\"_INIT\");\n+    }\n+    public CustomFact newMedicalCustomFact() {\n+        return new CustomFact(\"_MDCL\");\n+    }\n+    public CustomFact newMilitaryCustomFact() {\n+        return new CustomFact(\"_MILT\");\n+    }\n+    public CustomFact newMilitaryIdCustomFact() {\n+        return new CustomFact(\"_MILTID\");\n+    }\n+    public CustomFact newMissionCustomFact() {\n+        return new CustomFact(\"_MISN\");\n+    }\n+    public CustomFact newMotherRelationshipCustomFact() {\n+        return new CustomFact(\"_MREL\");\n+    }\n+    public CustomFact newNamesakeCustomFact() {\n+        return new CustomFact(\"_NAMS\");\n+    }\n+    public CustomFact newOrdinanceCustomFact() {\n+        return new CustomFact(\"_ORDI\");\n+    }\n+    public CustomFact newOriginCustomFact() {\n+        return new CustomFact(\"_ORIG\");\n+    }\n+    public CustomFact newPhotoCustomFact() {\n+        return new CustomFact(\"_PHOTO\");\n+    }\n+    public CustomFact newSeparationCustomFact() {\n+        return new CustomFact(\"_SEPR\");\n+    }\n+    public CustomFact newWebLinkCustomFact() {\n+        return new CustomFact(\"_LINK\");\n+    }\n+    public CustomFact newWeightCustomFact() {\n+        return new CustomFact(\"_WEIG\");\n+    }\n+    public void setCausesOfDeath(Individual i, List<CustomFact> causes) {\n+        clearCustomTagsOfType(i, \"_DCAUSE\");\n+        i.getCustomFacts(true).addAll(causes);\n+    }\n+    public void setCertaintyJustification(AbstractCitation cws, List<CustomFact> justifications) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(cws, \"_WEIG\", justifications);\n+    }\n+    public void setCircumcision(Individual i, List<CustomFact> circumcisions) {\n+        clearCustomTagsOfType(i, \"_CIRC\");\n+        i.getCustomFacts(true).addAll(circumcisions);\n+    }\n+    public void setDestinations(Individual i, List<CustomFact> destinations) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_DEST\", destinations);\n+    }\n+    public void setDnaMarkers(Individual i, List<CustomFact> dnaMarkers) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_DNA\", dnaMarkers);\n+    }\n+    public void setElected(Individual i, List<CustomFact> elected) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_ELEC\", elected);\n+    }\n+    public void setEmployment(Individual i, List<CustomFact> employment) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_EMPLOY\", employment);\n+    }\n+    public void setExcommunication(Individual i, List<CustomFact> excommunication) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_EXCM\", excommunication);\n+    }\n+    public void setFatherRelationship(IndividualReference familySpecificChildReference, List<CustomFact> facts) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(familySpecificChildReference, \"_FREL\", facts);\n+    }\n+    public void setFuneral(Individual i, List<CustomFact> funeral) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_FUN\", funeral);\n+    }\n+    public void setHeights(Individual i, List<CustomFact> heights) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_HEIG\", heights);\n+    }\n+    public void setInitiatory(Individual i, List<CustomFact> initiatoryInfo) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_INIT\", initiatoryInfo);\n+    }\n+    public void setMedical(Individual i, List<CustomFact> medical) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_MDCL\", medical);\n+    }\n+    public void setMilitary(Individual i, List<CustomFact> military) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_MILT\", military);\n+    }\n+    public void setMilitaryId(Individual i, List<CustomFact> militaryIds) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_MILTID\", militaryIds);\n+    }\n+    public void setMission(Individual i, List<CustomFact> missions) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_MISN\", missions);\n+    }\n+    public void setMotherRelationship(IndividualReference familySpecificChildReference, List<CustomFact> facts) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(familySpecificChildReference, \"_MREL\", facts);\n+    }\n+    public void setNamesake(Individual i, List<CustomFact> namesake) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_NAMS\", namesake);\n+    }\n+    public void setOrdinance(Individual i, List<CustomFact> ordinance) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_ORDI\", ordinance);\n+    }\n+    public void setOrigin(Individual i, List<CustomFact> origin) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_ORIG\", origin);\n+    }\n+    public void setPhoto(Individual i, List<CustomFact> photo) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_PHOTO\", photo);\n+    }\n+    public void setSeparation(Family family, List<CustomFact> separations) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(family, \"_SEPR\", separations);\n+    }\n+    public void setWeight(Individual i, List<CustomFact> weight) {\n+        replaceAllCustomFactsOfTypeWithNewFacts(i, \"_WEIG\", weight);\n+    }\n+    public enum AddressMailingList {\n+        NEWSLETTER,\n+        FAMILY_ASSOCIATION,\n+        BIRTHDAY,\n+        RESEARCH,\n+        CHRISTMAS,\n+        HOLIDAY\n+    }\n+    public void addToDo(HasCustomFacts hasCustomFacts, CustomFact todo) {\n+        if (todo == null) {\n+            throw new IllegalArgumentException(\"The todo argument is required.\");\n+        }\n+        if (!isNonNullAndHasRequiredTag(todo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"The Todo did not have the expected custom tag. Expected _TODO, found \" + todo\n+                    .getTag());\n+        }\n+        hasCustomFacts.getCustomFacts(true).add(todo);\n+    }\n+    public String getAddressEmail(Address address) {\n+        return getDescriptionForCustomTag(address, \"_EMAIL\");\n+    }\n+    public String getAddressListFlag(Address address, AddressMailingList listNum) {\n+        return getDescriptionForCustomTag(address, \"_LIST\" + (1 + listNum.ordinal()));\n+    }\n+    public String getAddressPrivateFlag(Address address) {\n+        return getDescriptionForCustomTag(address, \"_PRIV\");\n+    }\n+    public String getAddressSortValue(Address addr) {\n+        return getDescriptionForCustomTag(addr, \"_SORT\");\n+    }\n+    public String getFamilyEventPrivateFlag(FamilyEvent famEvent) {\n+        return getDescriptionForCustomTag(famEvent, \"_PRIV\");\n+    }\n+    public String getFamilyMemberPreferredFlag(Family family, Individual individual) {\n+        if (family == null) {\n+            throw new IllegalArgumentException(\"family is required\");\n+        }\n+        if (individual == null) {\n+            throw new IllegalArgumentException(\"individual is required\");\n+        }\n+        if (family.getWife() != null && family.getWife().getIndividual().equals(individual)) {\n+            return getDescriptionForCustomTag(family.getWife(), \"_PREF\");\n+        }\n+        if (family.getHusband() != null && family.getHusband().getIndividual().equals(individual)) {\n+            return getDescriptionForCustomTag(family.getHusband(), \"_PREF\");\n+        }\n+        if (family.getChildren() != null) {\n+            for (IndividualReference iRef : family.getChildren()) {\n+                if (iRef != null && individual.equals(iRef.getIndividual())) {\n+                    return getDescriptionForCustomTag(iRef, \"_PREF\");\n+                }\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Individual was not found in the supplied family\");\n+    }\n+    public String getIndividualEventPrivateFlag(IndividualEvent indEvent) {\n+        return getDescriptionForCustomTag(indEvent, \"_PRIV\");\n+    }\n+    public String getIndividualUID(Individual ind) {\n+        return getDescriptionForCustomTag(ind, \"_UID\");\n+    }\n+    public String getMultimediaDate(Multimedia mm) {\n+        return getDescriptionForCustomTag(mm, \"_DATE\");\n+    }\n+    public String getMultimediaPrimaryFlag(Multimedia mm) {\n+        return getDescriptionForCustomTag(mm, \"_PRIM\");\n+    }\n+    public String getMultimediaScrapbookTag(Multimedia mm) {\n+        return getDescriptionForCustomTag(mm, \"_SCBK\");\n+    }\n+    public String getMultimediaSound(Multimedia mm) {\n+        return getDescriptionForCustomTag(mm, \"_SOUND\");\n+    }\n+    public String getMultimediaType(Multimedia mm) {\n+        return getDescriptionForCustomTag(mm, \"_TYPE\");\n+    }\n+    public String getNameAtAddress(Address addr) {\n+        return getDescriptionForCustomTag(addr, \"_NAME\");\n+    }\n+    public String getSourceInItalicsFlag(Source src) {\n+        return getDescriptionForCustomTag(src, \"_ITALIC\");\n+    }\n+    public String getSourceInParensFlag(Source src) {\n+        return getDescriptionForCustomTag(src, \"_PAREN\");\n+    }\n+    public String getSourceInQuotesFlag(Source src) {\n+        return getDescriptionForCustomTag(src, \"_QUOTED\");\n+    }\n+    public String getToDoCategory(CustomFact toDo) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        return getDescriptionForCustomTag(toDo, \"_CAT\");\n+    }\n+    public String getToDoClosedDate(CustomFact toDo) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        return getDescriptionForCustomTag(toDo, \"_CDATE\");\n+    }\n+    public String getToDoDescription(CustomFact toDo) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        return getDescriptionForCustomTag(toDo, \"DESC\");\n+    }\n+    public String getToDoLocality(CustomFact toDo) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        return getDescriptionForCustomTag(toDo, \"_LOCL\");\n+    }\n+    public String getToDoReminderDate(CustomFact toDo) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        return getDescriptionForCustomTag(toDo, \"_RDATE\");\n+    }\n+    public List<CustomFact> getToDos(HasCustomFacts hasCustomFacts) {\n+        return hasCustomFacts.getCustomFactsWithTag(\"_TODO\");\n+    }\n+    public boolean isAddressTagged(Address address) {\n+        List<CustomFact> cfs = address.getCustomFactsWithTag(\"_TAG\");\n+        return (cfs != null && !cfs.isEmpty());\n+    }\n+    public boolean isFamilyHadNoChildren(Family family) {\n+        List<CustomFact> cfs = family.getCustomFactsWithTag(\"_NONE\");\n+        return (cfs != null && !cfs.isEmpty());\n+    }\n+    public boolean isIndividualTagged(Individual individual) {\n+        List<CustomFact> cfs = individual.getCustomFactsWithTag(\"_TAG\");\n+        return (cfs != null && !cfs.isEmpty());\n+    }\n+    public CustomFact newToDo() {\n+        return new CustomFact(\"_TODO\");\n+    }\n+    public int removeTodo(HasCustomFacts hasCustomFacts, CustomFact todo) {\n+        int result = 0;\n+        if (hasCustomFacts.getCustomFacts() == null) {\n+            return result;\n+        }\n+        int i = 0;\n+        while (i < hasCustomFacts.getCustomFacts().size()) {\n+            CustomFact cf = hasCustomFacts.getCustomFacts().get(i);\n+            if (cf.equals(todo)) {\n+                hasCustomFacts.getCustomFacts().remove(i);\n+                result++;\n+            } else {\n+                i++;\n+            }\n+        }\n+        return result;\n+    }\n+    public int removeToDos(HasCustomFacts hasCustomFacts) {\n+        return clearCustomTagsOfType(hasCustomFacts, \"_TODO\");\n+    }\n+    public void setAddressEmail(Address address, String email) {\n+        setDescriptionForCustomTag(address, \"_EMAIL\", email);\n+    }\n+    public void setAddressListFlag(Address address, AddressMailingList listNum, String listFlag) {\n+        setDescriptionForCustomTag(address, \"_LIST\" + (1 + listNum.ordinal()), listFlag);\n+    }\n+    public void setAddressPrivateFlag(Address address, String privateFlag) {\n+        setDescriptionForCustomTag(address, \"_PRIV\", privateFlag);\n+    }\n+    public void setAddressSortValue(Address addr, String nameAtAddress) {\n+        setDescriptionForCustomTag(addr, \"_SORT\", nameAtAddress);\n+    }\n+    public void setAddressTagged(Address family, boolean hadNoChildren) {\n+        clearCustomTagsOfType(family, \"_TAG\");\n+        if (hadNoChildren) {\n+            CustomFact cf = new CustomFact(\"_TAG\");\n+            family.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void setFamilyEventPrivateFlag(FamilyEvent famEvent, String privateFlag) {\n+        setDescriptionForCustomTag(famEvent, \"_PRIV\", privateFlag);\n+    }\n+    public void setFamilyHadNoChildren(Family family, boolean hadNoChildren) {\n+        clearCustomTagsOfType(family, \"_NONE\");\n+        if (hadNoChildren) {\n+            CustomFact cf = new CustomFact(\"_NONE\");\n+            family.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void setFamilyMemberPreferredFlag(Family family, Individual individual, String familyMemberPreferredFlag) {\n+        if (family == null) {\n+            throw new IllegalArgumentException(\"family is required\");\n+        }\n+        if (individual == null) {\n+            throw new IllegalArgumentException(\"individual is required\");\n+        }\n+        if (family.getWife() != null && family.getWife().getIndividual().equals(individual)) {\n+            setDescriptionForCustomTag(family.getWife(), \"_PREF\", familyMemberPreferredFlag);\n+            return;\n+        }\n+        if (family.getHusband() != null && family.getHusband().getIndividual().equals(individual)) {\n+            setDescriptionForCustomTag(family.getHusband(), \"_PREF\", familyMemberPreferredFlag);\n+            return;\n+        }\n+        if (family.getChildren() != null) {\n+            for (IndividualReference iRef : family.getChildren()) {\n+                if (iRef != null && individual.equals(iRef.getIndividual())) {\n+                    setDescriptionForCustomTag(iRef, \"_PREF\", familyMemberPreferredFlag);\n+                    return;\n+                }\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Individual was not found in the supplied family\");\n+    }\n+    public void setIndividualEventPrivateFlag(IndividualEvent indEvent, String privateFlag) {\n+        setDescriptionForCustomTag(indEvent, \"_PRIV\", privateFlag);\n+    }\n+    public void setIndividualTagged(Individual individual, boolean tagged) {\n+        clearCustomTagsOfType(individual, \"_TAG\");\n+        if (tagged) {\n+            CustomFact cf = new CustomFact(\"_TAG\");\n+            individual.getCustomFacts(true).add(cf);\n+        }\n+    }\n+    public void setIndividualUID(Individual ind, String individualUid) {\n+        setDescriptionForCustomTag(ind, \"_UID\", individualUid);\n+    }\n+    public void setMultimediaDate(Multimedia mm, String multimediaDate) {\n+        setDescriptionForCustomTag(mm, \"_DATE\", multimediaDate);\n+    }\n+    public void setMultimediaPrimaryFlag(Multimedia mm, String multimediaPrimaryFlag) {\n+        setDescriptionForCustomTag(mm, \"_PRIM\", multimediaPrimaryFlag);\n+    }\n+    public void setMultimediaScrapbookTag(Multimedia mm, String multimediaScrapbookTag) {\n+        setDescriptionForCustomTag(mm, \"_SCBK\", multimediaScrapbookTag);\n+    }\n+    public void setMultimediaSound(Multimedia mm, String multimediaSound) {\n+        setDescriptionForCustomTag(mm, \"_SOUND\", multimediaSound);\n+    }\n+    public void setMultimediaType(Multimedia mm, String multimediaType) {\n+        setDescriptionForCustomTag(mm, \"_TYPE\", multimediaType);\n+    }\n+    public void setNameAtAddress(Address addr, String nameAtAddress) {\n+        setDescriptionForCustomTag(addr, \"_NAME\", nameAtAddress);\n+    }\n+    public void setSourceInItalicsFlag(Source src, String italicsFlag) {\n+        setDescriptionForCustomTag(src, \"_ITALIC\", italicsFlag);\n+    }\n+    public void setSourceInParensFlag(Source src, String parensFlag) {\n+        setDescriptionForCustomTag(src, \"_PAREN\", parensFlag);\n+    }\n+    public void setSourceInQuotesFlag(Source src, String quotesFlag) {\n+        setDescriptionForCustomTag(src, \"_QUOTED\", quotesFlag);\n+    }\n+    public void setToDoCategory(CustomFact toDo, String category) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        setDescriptionForCustomTag(toDo, \"_CAT\", category);\n+    }\n+    public void setToDoClosedDate(CustomFact toDo, String closedDate) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        setDescriptionForCustomTag(toDo, \"_CDATE\", closedDate);\n+    }\n+    public void setToDoDescription(CustomFact toDo, String description) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        setDescriptionForCustomTag(toDo, \"DESC\", description);\n+    }\n+    public void setToDoLocality(CustomFact toDo, String locality) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        setDescriptionForCustomTag(toDo, \"_LOCL\", locality);\n+    }\n+    public void setToDoReminderDate(CustomFact toDo, String reminderDate) {\n+        if (!isNonNullAndHasRequiredTag(toDo, \"_TODO\")) {\n+            throw new IllegalArgumentException(\"toDo is required and must have correct custom tag\");\n+        }\n+        setDescriptionForCustomTag(toDo, \"_RDATE\", reminderDate);\n+    }\n+            loadInto.setYNull(stringTree.getValue());\n+            loadInto.setDescription((String) null);\n+            loadInto.setYNull(null);\n+            loadInto.setDescription((String) null);\n+            loadInto.setYNull(null);\n+            loadInto.setDescription(new StringWithCustomFacts(stringTree.getValue()));\n+        this.gedcomParser = gedcomParser == null && this instanceof GedcomParser ? (GedcomParser) this : gedcomParser;\n+        return g != null && g.getHeader() != null && g.getHeader().getGedcomVersion() != null && g.getHeader().getGedcomVersion()\n+                .getVersionNumber() != null && SupportedVersion.V5_5.toString().equals(g.getHeader().getGedcomVersion()\n+                        .getVersionNumber().getValue());\n+    protected NoteRecord getNoteRecord(String xref) {\n+        NoteRecord nr;\n+        nr = gedcomParser.getGedcom().getNotes().get(xref);\n+        if (nr == null) {\n+            nr = new NoteRecord(xref);\n+            gedcomParser.getGedcom().getNotes().put(xref, nr);\n+        }\n+        return nr;\n+    }\n+            s.setName(\"UNSPECIFIED\");\n+    protected void loadMultiStringWithCustomFacts(StringTree stringTreeWithLinesOfText, MultiStringWithCustomFacts multiString) {\n+        List<String> listOfString = multiString.getLines(true);\n+        if (stringTreeWithLinesOfText.getValue() != null) {\n+            listOfString.add(stringTreeWithLinesOfText.getValue());\n+        }\n+        if (stringTreeWithLinesOfText.getChildren() != null) {\n+            for (StringTree ch : stringTreeWithLinesOfText.getChildren()) {\n+                if (Tag.CONTINUATION.equalsText(ch.getTag())) {\n+                    if (ch.getValue() == null) {\n+                        listOfString.add(\"\");\n+                    } else {\n+                        listOfString.add(ch.getValue());\n+                    }\n+                } else if (Tag.CONCATENATION.equalsText(ch.getTag())) {\n+                    if (ch.getValue() != null) {\n+                        if (listOfString.isEmpty()) {\n+                            listOfString.add(ch.getValue());\n+                        } else {\n+                            listOfString.set(listOfString.size() - 1, listOfString.get(listOfString.size() - 1) + ch.getValue());\n+                        }\n+                    }\n+                } else {\n+                    unknownTag(ch, multiString);\n+                }\n+            }\n+        }\n+    }\n+    protected StringWithCustomFacts parseStringWithCustomFacts(StringTree ch) {\n+        StringWithCustomFacts swcf = new StringWithCustomFacts(ch.getValue());\n+        if (ch.getChildren() != null) {\n+            for (StringTree gch : ch.getChildren()) {\n+                CustomFact cf = new CustomFact(gch.getTag());\n+                swcf.getCustomFacts(true).add(cf);\n+                cf.setXref(gch.getXref());\n+                new CustomFactParser(gedcomParser, gch, cf).parse();\n+            }\n+        }\n+        return swcf;\n+    }\n+    protected void remainingChildrenAreCustomTags(StringTree st, HasCustomFacts into) {\n+        if (st == null || st.getChildren() == null) {\n+            return;\n+        }\n+        for (StringTree ch : st.getChildren()) {\n+            unknownTag(ch, into);\n+        }\n+    }\n+    protected void unknownTag(StringTree node, HasCustomFacts element) {\n+        if (gedcomParser.isIgnoreCustomTags()) {\n+            return;\n+        }\n+        boolean beginsWithUnderscore = node.getTag().length() > 0 && node.getTag().charAt(0) == '_';\n+        if (beginsWithUnderscore || !gedcomParser.isStrictCustomTags() || gedcomParser.isInsideCustomTag()) {\n+            CustomFact cf = new CustomFact(node.getTag());\n+            element.getCustomFacts(true).add(cf);\n+            cf.setXref(node.getXref());\n+            cf.setDescription(node.getValue());\n+            boolean saveIsInsideCustomTag = gedcomParser.isInsideCustomTag();\n+            gedcomParser.setInsideCustomTag(true);\n+            new CustomFactParser(gedcomParser, node, cf).parse();\n+            gedcomParser.setInsideCustomTag(saveIsInsideCustomTag);\n+            if (st.getXref() != null) {\n+                sb.append(\" \").append(st.getXref());\n+                    loadInto.setAddr1(parseStringWithCustomFacts(ch));\n+                    loadInto.setAddr2(parseStringWithCustomFacts(ch));\n+                } else if (Tag.ADDRESS_3.equalsText(ch.getTag())) {\n+                    loadInto.setAddr3(parseStringWithCustomFacts(ch));\n+                    loadInto.setCity(parseStringWithCustomFacts(ch));\n+                    loadInto.setStateProvince(parseStringWithCustomFacts(ch));\n+                    loadInto.setPostalCode(parseStringWithCustomFacts(ch));\n+                    loadInto.setCountry(parseStringWithCustomFacts(ch));\n+                    loadInto.setRelationship(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    loadInto.setAssociatedEntityType(parseStringWithCustomFacts(ch));\n+                    loadInto.setDate(new StringWithCustomFacts(ch.getValue()));\n+                    if (ch.getChildren() != null) {\n+                        for (StringTree gch : ch.getChildren()) {\n+                            if (\"TIME\".equals(gch.getTag())) {\n+                                loadInto.setTime(parseStringWithCustomFacts(gch));\n+                            } else {\n+                                unknownTag(gch, loadInto.getDate());\n+                            }\n+                        }\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    d.setEntryDate(parseStringWithCustomFacts(ch));\n+                    MultiStringWithCustomFacts ms = new MultiStringWithCustomFacts();\n+                    d.getSourceText(true).add(ms);\n+                    loadMultiStringWithCustomFacts(ch, ms);\n+                    new NoteStructureListParser(gedcomParser, ch, cws.getNoteStructures(true)).parse();\n+                } else if (Tag.QUALITY.equalsText(ch.getTag())) {\n+                    cws.setCertainty(parseStringWithCustomFacts(ch));\n+                } else if (Tag.OBJECT_MULTIMEDIA.equalsText(ch.getTag())) {\n+                    List<MultimediaReference> multimedia = cws.getMultimedia(true);\n+                    new MultimediaLinkParser(gedcomParser, ch, multimedia).parse();\n+                    cws.setWhereInSource(parseStringWithCustomFacts(ch));\n+                    cws.setEventCited(new StringWithCustomFacts(ch.getValue()));\n+                                cws.setRoleInEvent(parseStringWithCustomFacts(gc));\n+                    cws.setCertainty(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = cws.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    List<MultimediaReference> multimedia = cws.getMultimedia(true);\n+                    loadInto.getPhoneNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getWwwUrls(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getFaxNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getEmails(true).add(parseStringWithCustomFacts(ch));\n+    CustomFactParser(GedcomParser gedcomParser, StringTree stringTree, CustomFact loadInto) {\n+        super(gedcomParser, stringTree, loadInto);\n+    }\n+    @Override\n+    void parse() {\n+        loadInto.setXref(stringTree.getXref());\n+        loadInto.setDescription(stringTree.getValue());\n+        if (stringTree.getChildren() != null) {\n+            for (StringTree ch : stringTree.getChildren()) {\n+                if (Tag.TYPE.equalsText(ch.getTag())) {\n+                    loadInto.setType(parseStringWithCustomFacts(ch));\n+                } else if (Tag.CHANGED_DATETIME.equalsText(ch.getTag())) {\n+                    ChangeDate changeDate = new ChangeDate();\n+                    loadInto.setChangeDate(changeDate);\n+                    new ChangeDateParser(gedcomParser, ch, changeDate).parse();\n+                } else if (Tag.DATE.equalsText(ch.getTag())) {\n+                    loadInto.setDate(ch.getValue());\n+                } else if (Tag.PLACE.equalsText(ch.getTag())) {\n+                    Place place = new Place();\n+                    loadInto.setPlace(place);\n+                    new PlaceParser(gedcomParser, ch, place).parse();\n+                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                } else if (Tag.SOURCE.equalsText(ch.getTag())) {\n+                    List<AbstractCitation> citations = loadInto.getCitations(true);\n+                    new CitationListParser(gedcomParser, ch, citations).parse();\n+                } else if (Tag.CONCATENATION.equalsText(ch.getTag())) {\n+                    if (loadInto.getDescription() == null) {\n+                        loadInto.setDescription(parseStringWithCustomFacts(ch));\n+                    } else {\n+                        loadInto.getDescription().setValue(loadInto.getDescription().getValue() + ch.getValue());\n+                    }\n+                } else if (Tag.CONTINUATION.equalsText(ch.getTag())) {\n+                    if (loadInto.getDescription() == null) {\n+                        loadInto.setDescription(new StringWithCustomFacts(ch.getValue() == null ? \"\" : ch.getValue()));\n+                    } else {\n+                        loadInto.getDescription().setValue(loadInto.getDescription().getValue() + \"\\n\" + ch.getValue());\n+                    }\n+                } else {\n+                    unknownTag(ch, loadInto);\n+                }\n+            }\n+        }\n+    }\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    loadInto.setPedigree(parseStringWithCustomFacts(ch));\n+                    loadInto.setStatus(parseStringWithCustomFacts(ch));\n+                    loadInto.setSubType(parseStringWithCustomFacts(ch));\n+                    loadInto.setDate(parseStringWithCustomFacts(ch));\n+                    List<MultimediaReference> multimedia = loadInto.getMultimedia(true);\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    loadInto.setRestrictionNotice(parseStringWithCustomFacts(ch));\n+                    loadInto.setReligiousAffiliation(parseStringWithCustomFacts(ch));\n+                    loadInto.setAge(parseStringWithCustomFacts(ch));\n+                    loadInto.setCause(parseStringWithCustomFacts(ch));\n+                    loadInto.setRespAgency(parseStringWithCustomFacts(ch));\n+                    loadInto.getPhoneNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getWwwUrls(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getFaxNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getEmails(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.setHusbandAge(parseStringWithCustomFacts(ch.getChildren().get(0)));\n+                    loadInto.setWifeAge(parseStringWithCustomFacts(ch.getChildren().get(0)));\n+                        loadInto.setDescription(parseStringWithCustomFacts(ch));\n+                        loadInto.setDescription(new StringWithCustomFacts(ch.getValue() == null ? \"\" : ch.getValue()));\n+                    IndividualReference husband = new IndividualReference(getIndividual(ch.getValue()));\n+                    loadInto.setHusband(husband);\n+                    if (ch.getChildren() != null) {\n+                        for (StringTree gch : ch.getChildren()) {\n+                            CustomFact cf = new CustomFact(gch.getTag());\n+                            husband.getCustomFacts(true).add(cf);\n+                            new CustomFactParser(gedcomParser, gch, cf).parse();\n+                        }\n+                    }\n+                    IndividualReference wife = new IndividualReference(getIndividual(ch.getValue()));\n+                    loadInto.setWife(wife);\n+                    if (ch.getChildren() != null) {\n+                        for (StringTree gch : ch.getChildren()) {\n+                            CustomFact cf = new CustomFact(gch.getTag());\n+                            wife.getCustomFacts(true).add(cf);\n+                            new CustomFactParser(gedcomParser, gch, cf).parse();\n+                        }\n+                    }\n+                    IndividualReference child = new IndividualReference(getIndividual(ch.getValue()));\n+                    loadInto.getChildren(true).add(child);\n+                    if (ch.getChildren() != null) {\n+                        for (StringTree gch : ch.getChildren()) {\n+                            CustomFact cf = new CustomFact(gch.getTag());\n+                            child.getCustomFacts(true).add(cf);\n+                            new CustomFactParser(gedcomParser, gch, cf).parse();\n+                        }\n+                    }\n+                    loadInto.setNumChildren(parseStringWithCustomFacts(ch));\n+                    List<MultimediaReference> multimedia = loadInto.getMultimedia(true);\n+                    loadInto.setAutomatedRecordId(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    loadInto.setRestrictionNotice(parseStringWithCustomFacts(ch));\n+                    loadInto.setRecFileNumber(parseStringWithCustomFacts(ch));\n+                    loadInto.getSubmitters(true).add(new SubmitterReference(getSubmitter(ch.getValue())));\n+        loadInto.setReferenceToFile(new StringWithCustomFacts(stringTree.getValue()));\n+                    loadInto.setTitle(parseStringWithCustomFacts(fileChild));\n+                    unknownTag(fileChild, loadInto.getReferenceToFile());\n+        loadInto.setFormat(new StringWithCustomFacts(form.getValue()));\n+                    loadInto.setMediaType(parseStringWithCustomFacts(formChild));\n+                    typeCount++;\n+                } else if (Tag.MEDIA.equalsText(formChild.getTag())) {\n+                    loadInto.setMediaType(parseStringWithCustomFacts(formChild));\n+                    unknownTag(formChild, loadInto.getFormat());\n+                addError(\"Media type was specified more than once for the FORM tag on line \" + form.getLineNum());\n+                return frenchRepublicanYear % 400 == 0;\n+    private boolean ignoreCustomTags = false;\n+    private boolean insideCustomTag;\n+    public boolean isIgnoreCustomTags() {\n+        return ignoreCustomTags;\n+    }\n+    public void setIgnoreCustomTags(boolean ignoreCustomTags) {\n+        this.ignoreCustomTags = ignoreCustomTags;\n+    }\n+    boolean isInsideCustomTag() {\n+        return insideCustomTag;\n+    }\n+    void setInsideCustomTag(boolean insideCustomTag) {\n+        this.insideCustomTag = insideCustomTag;\n+    }\n+            Submitter submitter = getSubmitter(rootLevelItem.getXref());\n+            Individual i = getIndividual(rootLevelItem.getXref());\n+            Submission s = new Submission(rootLevelItem.getXref());\n+            if (gedcom.getHeader().getSubmissionReference() == null) {\n+                gedcom.getHeader().setSubmissionReference(new SubmissionReference(s));\n+            NoteRecord nr = getNoteRecord(rootLevelItem.getXref());\n+            new NoteRecordParser(this, rootLevelItem, nr).parse();\n+            Family f = getFamily(rootLevelItem.getXref());\n+            Source s = getSource(rootLevelItem.getXref());\n+            Repository r = getRepository(rootLevelItem.getXref());\n+            Multimedia multimedia = getMultimedia(rootLevelItem.getXref());\n+            new MultimediaParser(this, rootLevelItem, multimedia).parse();\n+                    remainingChildrenAreCustomTags(ch, loadInto.getVersionNumber());\n+                    loadInto.setGedcomForm(parseStringWithCustomFacts(ch));\n+                    loadInto.setDestinationSystem(parseStringWithCustomFacts(ch));\n+                    loadInto.setDate(parseStringWithCustomFacts(ch));\n+                    if (ch.getChildren() != null) {\n+                        for (StringTree gch : ch.getChildren()) {\n+                            if (\"TIME\".equals(gch.getTag())) {\n+                                loadInto.setTime(parseStringWithCustomFacts(gch));\n+                            } else {\n+                                unknownTag(gch, loadInto.getDate());\n+                            }\n+                        }\n+                    loadInto.getCharacterSet().setCharacterSetName(parseStringWithCustomFacts(ch));\n+                        for (StringTree gch : ch.getChildren()) {\n+                            if (\"VERS\".equals(gch.getTag())) {\n+                                loadInto.getCharacterSet().setVersionNum(parseStringWithCustomFacts(gch));\n+                            } else {\n+                                unknownTag(gch, loadInto.getCharacterSet());\n+                            }\n+                        }\n+                    loadInto.setSubmitterReference(new SubmitterReference(getSubmitter(ch.getValue())));\n+                    remainingChildrenAreCustomTags(ch, loadInto.getSubmitterReference());\n+                    loadInto.setFileName(parseStringWithCustomFacts(ch));\n+                    if (loadInto.getSubmissionReference() == null) {\n+                        loadInto.setSubmissionReference(new SubmissionReference(gedcomParser.getGedcom().getSubmission()));\n+                        remainingChildrenAreCustomTags(ch, loadInto.getSubmissionReference());\n+                    loadInto.setLanguage(parseStringWithCustomFacts(ch));\n+                    loadInto.setPlaceHierarchy(parseStringWithCustomFacts(ch.getChildren().get(0)));\n+                    new NoteStructureListParser(gedcomParser, ch, loadInto.getNoteStructures(true)).parse();\n+                    loadInto.setPublishDate(parseStringWithCustomFacts(ch));\n+                    loadInto.setCopyright(parseStringWithCustomFacts(ch));\n+        boolean haserYear = lenHebrewYear == 353 || lenHebrewYear == 383;\n+        boolean shalemYear = lenHebrewYear == 355 || lenHebrewYear == 385;\n+            monthLength = leapYear ? 30 : 0;\n+            monthLength = shalemYear ? 30 : 29;\n+            monthLength = haserYear ? 29 : 30;\n+        if (!isLeapYear(hebrewYear) && dayOfWeek == 3 && hours * 1080 + chalakim >= 9 * 1080 + 204) {\n+        } else if (isLeapYear(hebrewYear - 1) && dayOfWeek == 2 && hours * 1080 + chalakim >= 15 * 1080 + 589) {\n+        return yearInCycle == 3 || yearInCycle == 6 || yearInCycle == 8 || yearInCycle == 11 || yearInCycle == 14\n+                || yearInCycle == 17 || yearInCycle == 0;\n+        loadInto.setDescription(new StringWithCustomFacts(stringTree.getValue()));\n+                    loadInto.setSubType(parseStringWithCustomFacts(ch));\n+                    loadInto.setDate(parseStringWithCustomFacts(ch));\n+                    loadInto.setAge(parseStringWithCustomFacts(ch));\n+                    loadInto.setCause(parseStringWithCustomFacts(ch));\n+                    loadInto.setRespAgency(parseStringWithCustomFacts(ch));\n+                    loadInto.getPhoneNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getWwwUrls(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getFaxNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getEmails(true).add(parseStringWithCustomFacts(ch));\n+                    List<MultimediaReference> multimedia = loadInto.getMultimedia(true);\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                        loadInto.setDescription(parseStringWithCustomFacts(ch));\n+                    loadInto.setSubType(parseStringWithCustomFacts(ch));\n+                    loadInto.setDate(parseStringWithCustomFacts(ch));\n+                    List<MultimediaReference> multimedia = loadInto.getMultimedia(true);\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    loadInto.setAge(parseStringWithCustomFacts(ch));\n+                    loadInto.setCause(parseStringWithCustomFacts(ch));\n+                    loadInto.setRespAgency(parseStringWithCustomFacts(ch));\n+                    loadInto.setRestrictionNotice(parseStringWithCustomFacts(ch));\n+                    loadInto.setReligiousAffiliation(parseStringWithCustomFacts(ch));\n+                    loadInto.getPhoneNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getWwwUrls(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getFaxNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getEmails(true).add(parseStringWithCustomFacts(ch));\n+                        loadInto.setDescription(parseStringWithCustomFacts(ch));\n+                        loadInto.setDescription(new StringWithCustomFacts(ch.getValue() == null ? \"\" : ch.getValue()));\n+                    loadInto.setSex(parseStringWithCustomFacts(ch));\n+                    loadInto.getPhoneNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getWwwUrls(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getFaxNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getEmails(true).add(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    loadInto.setRecIdNumber(parseStringWithCustomFacts(ch));\n+                    loadInto.setPermanentRecFileNumber(parseStringWithCustomFacts(ch));\n+                    List<MultimediaReference> multimedia = loadInto.getMultimedia(true);\n+                    loadInto.setRestrictionNotice(parseStringWithCustomFacts(ch));\n+                    loadInto.getAliases(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.setAncestralFileNumber(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = fs.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+        loadInto.setYNull(stringTree.getValue());\n+                    loadInto.setDate(parseStringWithCustomFacts(ch));\n+                    loadInto.setPlace(parseStringWithCustomFacts(ch));\n+                    loadInto.setStatus(parseStringWithCustomFacts(ch));\n+                    loadInto.setTemple(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    loadInto.setDate(parseStringWithCustomFacts(ch));\n+                    loadInto.setPlace(parseStringWithCustomFacts(ch));\n+                    loadInto.setStatus(parseStringWithCustomFacts(ch));\n+                    loadInto.setTemple(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+        if ('@' == chars[currCharIdx]) {\n+    MultimediaLinkParser(GedcomParser gedcomParser, StringTree stringTree, List<MultimediaReference> loadInto) {\n+        MultimediaReference mr;\n+            mr = new MultimediaReference(m);\n+            remainingChildrenAreCustomTags(stringTree, mr);\n+            mr = new MultimediaReference(m);\n+        loadInto.add(mr);\n+                    currentFileRef.setFormat(parseStringWithCustomFacts(ch));\n+                    m.setEmbeddedTitle(parseStringWithCustomFacts(ch));\n+                    currentFileRef.setReferenceToFile(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = m.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                            fr.setTitle(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = m.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+    MultimediaParser(GedcomParser gedcomParser, StringTree stringTree, Multimedia loadInto) {\n+                    break;\n+                    loadInto.setEmbeddedMediaFormat(parseStringWithCustomFacts(ch));\n+                    loadInto.setEmbeddedTitle(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    List<MultimediaReference> continuedObjects = new ArrayList<>();\n+                    loadInto.setRecIdNumber(parseStringWithCustomFacts(ch));\n+        Multimedia m = getMultimedia(obje.getXref());\n+                    List<NoteStructure> notes = m.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    m.setRecIdNumber(parseStringWithCustomFacts(ch));\n+    NoteRecordParser(GedcomParser gedcomParser, StringTree stringTree, NoteRecord loadInto) {\n+        if (stringTree.getXref() != null && !stringTree.getXref().isEmpty() && referencesAnotherNode(stringTree)) {\n+            addWarning(\"NOTE line has both an XREF_ID (\" + stringTree.getXref() + \") and SUBMITTER_TEXT (\" + stringTree.getValue()\n+                    + \") value between @ signs - \" + \"treating SUBMITTER_TEXT as string, not a cross-reference\");\n+        loadInto.getLines(true).add(stringTree.getValue());\n+                    if (loadInto.getLines().isEmpty()) {\n+                        loadInto.getLines(true).add(ch.getValue());\n+                        String lastNote = loadInto.getLines().get(loadInto.getLines().size() - 1);\n+                            loadInto.getLines().set(loadInto.getLines().size() - 1, ch.getValue());\n+                            loadInto.getLines().set(loadInto.getLines().size() - 1, lastNote + ch.getValue());\n+                    loadInto.getLines(true).add(ch.getValue() == null ? \"\" : ch.getValue());\n+                    new CitationListParser(gedcomParser, ch, loadInto.getCitations(true)).parse();\n+                    loadInto.getUserReferences(true).add(u);\n+                    loadInto.setRecIdNumber(parseStringWithCustomFacts(ch));\n+                    loadInto.setChangeDate(changeDate);\n+                    unknownTag(ch, loadInto);\n+    NoteStructureListParser(GedcomParser gedcomParser, StringTree stringTree, List<NoteStructure> loadInto) {\n+        super(gedcomParser, stringTree, loadInto);\n+    }\n+    @Override\n+    void parse() {\n+        NoteStructure noteStructure = new NoteStructure();\n+        if (stringTree.getXref() == null && referencesAnotherNode(stringTree)) {\n+            noteStructure.setNoteReference(getNote(stringTree.getValue()));\n+            loadInto.add(noteStructure);\n+            remainingChildrenAreCustomTags(stringTree, noteStructure);\n+            return;\n+        }\n+        noteStructure = new NoteStructure();\n+        loadInto.add(noteStructure);\n+        noteStructure.getLines(true).add(stringTree.getValue());\n+        if (stringTree.getChildren() != null) {\n+            for (StringTree ch : stringTree.getChildren()) {\n+                if (Tag.CONCATENATION.equalsText(ch.getTag())) {\n+                    if (noteStructure.getLines().isEmpty()) {\n+                        noteStructure.getLines(true).add(ch.getValue());\n+                    } else {\n+                        String lastNote = noteStructure.getLines().get(noteStructure.getLines().size() - 1);\n+                        if (lastNote == null || lastNote.length() == 0) {\n+                            noteStructure.getLines().set(noteStructure.getLines().size() - 1, ch.getValue());\n+                        } else {\n+                            noteStructure.getLines().set(noteStructure.getLines().size() - 1, lastNote + ch.getValue());\n+                        }\n+                    }\n+                } else if (Tag.CONTINUATION.equalsText(ch.getTag())) {\n+                    noteStructure.getLines(true).add(ch.getValue() == null ? \"\" : ch.getValue());\n+                } else {\n+                    unknownTag(ch, noteStructure);\n+                }\n+            }\n+        }\n+    }\n+    private NoteRecord getNote(String xref) {\n+        NoteRecord note;\n+        note = gedcomParser.getGedcom().getNotes().get(xref);\n+        if (note == null) {\n+            note = new NoteRecord(xref);\n+            gedcomParser.getGedcom().getNotes().put(xref, note);\n+        }\n+        return note;\n+    }\n+                    loadInto.setPrefix(parseStringWithCustomFacts(ch));\n+                    loadInto.setGivenName(parseStringWithCustomFacts(ch));\n+                    loadInto.setNickname(parseStringWithCustomFacts(ch));\n+                    loadInto.setSurnamePrefix(parseStringWithCustomFacts(ch));\n+                    loadInto.setSurname(parseStringWithCustomFacts(ch));\n+                    loadInto.setSuffix(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                } else if (Tag.TYPE.equalsText(ch.getTag())) {\n+                    loadInto.setType(parseStringWithCustomFacts(ch));\n+                    pnv.setPrefix(parseStringWithCustomFacts(ch));\n+                    pnv.setGivenName(parseStringWithCustomFacts(ch));\n+                    pnv.setNickname(parseStringWithCustomFacts(ch));\n+                    pnv.setSurnamePrefix(parseStringWithCustomFacts(ch));\n+                    pnv.setSurname(parseStringWithCustomFacts(ch));\n+                    pnv.setSuffix(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = pnv.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    pnv.setVariationType(parseStringWithCustomFacts(ch));\n+                    loadInto.setPlaceFormat(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                                nv.setVariationType(parseStringWithCustomFacts(gch));\n+                                nv.setVariationType(parseStringWithCustomFacts(gch));\n+                                loadInto.setLatitude(parseStringWithCustomFacts(gch));\n+                                loadInto.setLongitude(parseStringWithCustomFacts(gch));\n+                    loadInto.setName(parseStringWithCustomFacts(ch));\n+                    loadInto.getPhoneNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getWwwUrls(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getFaxNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getEmails(true).add(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    loadInto.setRecIdNumber(parseStringWithCustomFacts(ch));\n+                    MultiStringWithCustomFacts title = new MultiStringWithCustomFacts();\n+                    loadInto.setTitle(title);\n+                    loadMultiStringWithCustomFacts(ch, title);\n+                    MultiStringWithCustomFacts publicationFacts = new MultiStringWithCustomFacts();\n+                    loadInto.setPublicationFacts(publicationFacts);\n+                    loadMultiStringWithCustomFacts(ch, publicationFacts);\n+                    MultiStringWithCustomFacts srcText = new MultiStringWithCustomFacts();\n+                    loadInto.setSourceText(srcText);\n+                    loadMultiStringWithCustomFacts(ch, srcText);\n+                    loadInto.setSourceFiledBy(parseStringWithCustomFacts(ch));\n+                    MultiStringWithCustomFacts originatorsAuthors = new MultiStringWithCustomFacts();\n+                    loadInto.setOriginatorsAuthors(originatorsAuthors);\n+                    loadMultiStringWithCustomFacts(ch, originatorsAuthors);\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    List<MultimediaReference> multimedia = loadInto.getMultimedia(true);\n+                    loadInto.setRecIdNumber(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = r.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    scn.setCallNumber(new StringWithCustomFacts(ch.getValue()));\n+                                scn.setMediaType(parseStringWithCustomFacts(gch));\n+                    List<NoteStructure> notes = sourceData.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+                    sourceData.setRespAgency(parseStringWithCustomFacts(ch));\n+                    e.setDatePeriod(parseStringWithCustomFacts(ch));\n+                    e.setJurisdiction(parseStringWithCustomFacts(ch));\n+                    unknownTag(ch, e);\n+                    loadInto.setVersionNum(parseStringWithCustomFacts(ch));\n+                    loadInto.setProductName(parseStringWithCustomFacts(ch));\n+        numEvictedCumulative += before - after;\n+        if (before - after < 2) {\n+        treeForCurrentLine.setXref(lp.id);\n+                    loadInto.setNameOfFamilyFile(parseStringWithCustomFacts(ch));\n+                    remainingChildrenAreCustomTags(ch, loadInto.getNameOfFamilyFile());\n+                    loadInto.setTempleCode(parseStringWithCustomFacts(ch));\n+                    remainingChildrenAreCustomTags(ch, loadInto.getTempleCode());\n+                    loadInto.setAncestorsCount(parseStringWithCustomFacts(ch));\n+                    remainingChildrenAreCustomTags(ch, loadInto.getAncestorsCount());\n+                    loadInto.setDescendantsCount(parseStringWithCustomFacts(ch));\n+                    remainingChildrenAreCustomTags(ch, loadInto.getDescendantsCount());\n+                    loadInto.setOrdinanceProcessFlag(parseStringWithCustomFacts(ch));\n+                    remainingChildrenAreCustomTags(ch, loadInto.getOrdinanceProcessFlag());\n+                    loadInto.setRecIdNumber(parseStringWithCustomFacts(ch));\n+                    remainingChildrenAreCustomTags(ch, loadInto.getRecIdNumber());\n+                    loadInto.setName(parseStringWithCustomFacts(ch));\n+                    loadInto.getPhoneNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getWwwUrls(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getFaxNumbers(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getEmails(true).add(parseStringWithCustomFacts(ch));\n+                    loadInto.getLanguagePref(true).add(parseStringWithCustomFacts(ch));\n+                    List<MultimediaReference> multimedia = loadInto.getMultimedia(true);\n+                    loadInto.setRecIdNumber(parseStringWithCustomFacts(ch));\n+                    loadInto.setRegFileNumber(parseStringWithCustomFacts(ch));\n+                    List<NoteStructure> notes = loadInto.getNoteStructures(true);\n+                    new NoteStructureListParser(gedcomParser, ch, notes).parse();\n+    ADDRESS_3(\"ADR3\"),\n+        loadInto.setReferenceNum(new StringWithCustomFacts(stringTree.getValue()));\n+                    loadInto.setType(parseStringWithCustomFacts(ch));\n+                    unknownTag(ch, loadInto.getReferenceNum());\n+                    if ((surname == null || n.getSurname() != null && surname.equalsIgnoreCase(n.getSurname().getValue()))\n+                            && (given == null || n.getGivenName() != null && given.equalsIgnoreCase(n.getGivenName().getValue()))) {\n+        return sdx1 == null && sdx2 == null || sdx1 != null && sdx1.equals(sdx2);\n+        Individual dad = (fc.getFamily().getHusband() == null ? null : fc.getFamily().getHusband().getIndividual());\n+                Individual dadsWife = (fs.getFamily().getWife() == null ? null : fs.getFamily().getWife().getIndividual());\n+                Individual dad = fc.getFamily().getHusband() == null ? null : fc.getFamily().getHusband().getIndividual();\n+                if (!checkedAlready.contains(dad)) {\n+                    checkParent(level, set, dad);\n+                Individual mom = fc.getFamily().getWife() == null ? null : fc.getFamily().getWife().getIndividual();\n+                if (!checkedAlready.contains(mom)) {\n+                    checkParent(level, set, mom);\n+                Individual dad = (fc.getFamily().getHusband() == null ? null : fc.getFamily().getHusband().getIndividual());\n+                Individual mom = (fc.getFamily().getWife() == null ? null : fc.getFamily().getWife().getIndividual());\n+        Individual mom = (fc.getFamily().getWife() == null ? null : fc.getFamily().getWife().getIndividual());\n+                Individual momsHusband = (fs.getFamily().getHusband() == null ? null : fs.getFamily().getHusband().getIndividual());\n+        if (fam.getHusband() != null && fam.getHusband().getIndividual() == i) {\n+            return (fam.getWife() == null ? null : fam.getWife().getIndividual());\n+        if (fam.getWife() != null && fam.getWife().getIndividual() == i) {\n+            return (fam.getHusband() == null ? null : fam.getHusband().getIndividual());\n+                Individual w = f.getWife() == null ? null : f.getWife().getIndividual();\n+                Individual h = f.getHusband() == null ? null : f.getHusband().getIndividual();\n+                if (ancestor.equals(h) || ancestor.equals(w)) {\n+                } else if (lookForAncestor(h, ancestor)) {\n+                } else if (lookForAncestor(w, ancestor)) {\n+    @Override\n+                    if (!lookedAt.contains((family.getHusband() == null ? null : family.getHusband().getIndividual()))) {\n+                        examineFather(personBeingExamined, (family.getHusband() == null ? null\n+                                : family.getHusband().getIndividual()));\n+                    if (!lookedAt.contains((family.getWife() == null ? null : family.getWife().getIndividual()))) {\n+                        examineMother(personBeingExamined, (family.getWife() == null ? null : family.getWife().getIndividual()));\n+                    Individual h = family.getHusband() == null ? null : family.getHusband().getIndividual();\n+                    if (h == personBeingExamined) { // NOPMD - deliberately using ==\n+                        if (lookedAt.contains((family.getWife() == null ? null : family.getWife().getIndividual()))) {\n+                    } else {\n+                        Individual w = family.getWife() == null ? null : family.getWife().getIndividual();\n+                        if (w == personBeingExamined) { // NOPMD - deliberately using ==\n+                            if (lookedAt.contains((family.getHusband() == null ? null : family.getHusband().getIndividual()))) {\n+                                continue;\n+                            }\n+                            examineHusband(personBeingExamined, fs);\n+                        for (IndividualReference c : family.getChildren()) {\n+                            if (lookedAt.contains(c.getIndividual())) {\n+                            Individual h2 = family.getHusband() == null ? null : family.getHusband().getIndividual();\n+                            if (h2 == personBeingExamined) { // NOPMD - deliberately using ==\n+                                examineChild(personBeingExamined, c.getIndividual(), FATHER);\n+                            } else {\n+                                Individual w2 = family.getWife() == null ? null : family.getWife().getIndividual();\n+                                if (w2 == personBeingExamined) { // NOPMD - deliberately using ==\n+                                    examineChild(personBeingExamined, c.getIndividual(), MOTHER);\n+                                }\n+        r.setIndividual2(fs.getFamily().getHusband() == null ? null : fs.getFamily().getHusband().getIndividual());\n+        r.setIndividual2(fs.getFamily().getWife() == null ? null : fs.getFamily().getWife().getIndividual());\n+    private RelationshipName getReverseRelationship(RelationshipName relationship, StringWithCustomFacts sex) {\n+        return reverseName == other.reverseName;\n+    private static final long serialVersionUID = -4649410344505048925L;\n+    private static final Pattern XREF_PATTERN = Pattern.compile(\"^\\\\@.+\\\\@$\");\n+    private static final Pattern EMAIL_PATTERN = Pattern.compile(\"^([a-zA-Z0-9_\\\\-\\\\.]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\");\n+    private static final Pattern URL_PATTERN = Pattern.compile(\n+            \"^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]\");\n+    private final Validator validator;\n+    AbstractValidator(Validator v) {\n+        validator = v;\n+    protected void checkAlternateXref(ModelElement objectContainingXref, String fieldName) {\n+        String xref;\n+        try {\n+            xref = (String) get(objectContainingXref, fieldName);\n+        } catch (ClassCastException e) {\n+            throw new ValidationException(\"Field \" + fieldName + \" on object of type \" + objectContainingXref.getClass().getName()\n+                    + \" did not return a string\", e);\n+        }\n+        if (!isSpecified(xref)) {\n+            validator.newFinding(objectContainingXref, Severity.ERROR, org.gedcom4j.validate.ProblemCode.MISSING_REQUIRED_VALUE,\n+                    \"xref\");\n+        } else {\n+            if (!XREF_PATTERN.matcher(xref).matches()) {\n+                validator.newFinding(objectContainingXref, Severity.ERROR, org.gedcom4j.validate.ProblemCode.XREF_INVALID, \"xref\");\n+            }\n+        }\n+    protected void checkChangeDate(ChangeDate changeDate, ModelElement objectWithChangeDate) {\n+        mustHaveValue(changeDate, \"date\");\n+        mustBeDateIfSpecified(changeDate, \"date\");\n+        mustHaveValueOrBeOmitted(changeDate, \"time\");\n+        if (objectWithChangeDate instanceof HasNotes) {\n+            checkUninitializedCollection(changeDate, \"noteStructures\");\n+        checkNotes(changeDate);\n+    }\n+    protected void checkCitations(HasCitations objectWithCitations) {\n+        checkUninitializedCollection(objectWithCitations, \"citations\");\n+        List<AbstractCitation> citations = objectWithCitations.getCitations();\n+        if (citations == null) {\n+            return;\n+        }\n+        DuplicateHandler<AbstractCitation> dh = new DuplicateHandler<>(citations);\n+        if (dh.count() > 0) {\n+            Finding finding = validator.newFinding(objectWithCitations, Severity.ERROR,\n+                    org.gedcom4j.validate.ProblemCode.DUPLICATE_VALUE, \"citations\");\n+            if (validator.mayRepair(finding)) {\n+                ModelElement before = makeCopy(objectWithCitations);\n+                dh.remove();\n+                finding.addRepair(new AutoRepair(before, makeCopy(objectWithCitations)));\n+            }\n+        }\n+        for (AbstractCitation c : citations) {\n+            new CitationValidator(validator, c).validate();\n+        }\n+    protected void checkCustomFacts(HasCustomFacts o) {\n+        if (o == null) {\n+            return; // Nothing to check!\n+        checkUninitializedCollection(o, \"customFacts\");\n+        if (o.getCustomFacts() == null) {\n+        int i = 0;\n+        while (i < o.getCustomFacts().size()) {\n+            CustomFact cf = o.getCustomFacts().get(i);\n+            if (cf == null) {\n+                Finding vf = validator.newFinding(o, Severity.ERROR, org.gedcom4j.validate.ProblemCode.LIST_WITH_NULL_VALUE,\n+                        \"customFacts\");\n+                if (validator.mayRepair(vf)) {\n+                    ModelElement before = makeCopy(o);\n+                    o.getCustomFacts().remove(i);\n+                    vf.addRepair(new AutoRepair(before, makeCopy(o)));\n+                } else {\n+                    i++;\n+                mustBeDateIfSpecified(cf, \"date\");\n+                if (cf.getPlace() != null) {\n+                    new PlaceValidator(getValidator(), cf.getPlace()).validate();\n+                }\n+                checkNotes(cf);\n+                checkCitations(cf);\n+                checkCustomFacts(cf);\n+                i++;\n+    protected void checkEmails(AbstractAddressableElement itemWithAddresses) {\n+        checkUninitializedCollection(itemWithAddresses, \"emails\");\n+        if (itemWithAddresses.getEmails() == null) {\n+            return;\n+        }\n+        checkListOfModelElementsForDups(itemWithAddresses, \"emails\");\n+        checkListOfModelElementsForNulls(itemWithAddresses, \"emails\");\n+        for (StringWithCustomFacts swct : itemWithAddresses.getEmails()) {\n+            mustHaveValue(swct, \"value\");\n+            if (swct.getValue() != null && !EMAIL_PATTERN.matcher(swct.getValue()).matches()) {\n+                validator.newFinding(swct, Severity.WARNING, org.gedcom4j.validate.ProblemCode.NOT_VALID_EMAIL_ADDRESS, \"value\");\n+            }\n+    protected void checkFaxNumbers(AbstractAddressableElement itemWithAddresses) {\n+        checkUninitializedCollection(itemWithAddresses, \"faxNumbers\");\n+        if (itemWithAddresses.getFaxNumbers() == null) {\n+            return;\n+        }\n+        checkListOfModelElementsForDups(itemWithAddresses, \"faxNumbers\");\n+        checkListOfModelElementsForNulls(itemWithAddresses, \"faxNumbers\");\n+        for (StringWithCustomFacts swct : itemWithAddresses.getFaxNumbers()) {\n+            mustHaveValue(swct, \"value\");\n+    protected void checkForNullEntries(ModelElement modelElement, String listName) {\n+        Object object = get(modelElement, listName);\n+        if (!(object instanceof List)) {\n+            throw new ValidationException(\"Could not find a List named \" + listName + \" on object of type \" + modelElement\n+                    .getClass().getName());\n+        }\n+        @SuppressWarnings(\"rawtypes\")\n+        List list = (List) object;\n+        int i = 0;\n+        while (i < list.size()) {\n+            Object o = list.get(i);\n+            if (o != null) {\n+                i++;\n+                continue;\n+            }\n+            Finding vf = validator.newFinding(modelElement, Severity.ERROR, org.gedcom4j.validate.ProblemCode.LIST_WITH_NULL_VALUE,\n+                    listName);\n+            if (validator.mayRepair(vf)) {\n+                list.remove(i);\n+            } else {\n+                i++;\n+            }\n+    @SuppressWarnings(\"checkstyle:NoWhitespaceBefore\")\n+    protected <L extends ModelElement, M extends ModelElement> void checkListOfModelElementsForDups(M modelElement,\n+            String listName) {\n+        Object l = get(modelElement, listName);\n+        if (l == null) {\n+            return;\n+        }\n+        if (!(l instanceof List)) {\n+            throw new ValidationException(\"Property \" + listName + \" on \" + modelElement.getClass().getName()\n+                    + \" did not return a List, but a \" + l.getClass().getName());\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        List<L> list = (List<L>) l;\n+        DuplicateHandler<L> dh = new DuplicateHandler<>(list);\n+        if (dh.count() > 0) {\n+            Finding vf = validator.newFinding(modelElement, Severity.ERROR, org.gedcom4j.validate.ProblemCode.DUPLICATE_VALUE,\n+                    listName);\n+            if (validator.mayRepair(vf)) {\n+                @SuppressWarnings(\"unchecked\")\n+                M before = (M) makeCopy(modelElement);\n+                dh.remove();\n+                vf.addRepair(new AutoRepair(before, makeCopy(modelElement)));\n+            }\n+    @SuppressWarnings(\"checkstyle:NoWhitespaceBefore\")\n+    protected <L extends ModelElement, M extends ModelElement> void checkListOfModelElementsForNulls(M modelElement,\n+            String listName) {\n+        Object l = get(modelElement, listName);\n+        if (l == null) {\n+            return;\n+        }\n+        if (!(l instanceof List)) {\n+            throw new ValidationException(\"Property \" + listName + \" on \" + modelElement.getClass().getName()\n+                    + \" did not return a List, but a \" + l.getClass().getName());\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        List<L> list = (List<L>) l;\n+        NullHandler<L> dh = new NullHandler<>(list);\n+        if (dh.count() > 0) {\n+            Finding vf = validator.newFinding(modelElement, Severity.ERROR, org.gedcom4j.validate.ProblemCode.LIST_WITH_NULL_VALUE,\n+                    listName);\n+            if (validator.mayRepair(vf)) {\n+                @SuppressWarnings(\"unchecked\")\n+                M before = (M) makeCopy(modelElement);\n+                dh.remove();\n+                vf.addRepair(new AutoRepair(before, makeCopy(modelElement)));\n+    protected void checkNotes(HasNotes objectWithNotes) {\n+        new NoteStructureListValidator(validator, objectWithNotes).validate();\n+    }\n+    protected void checkPhoneNumbers(AbstractAddressableElement itemWithAddresses) {\n+        checkUninitializedCollection(itemWithAddresses, \"phoneNumbers\");\n+        if (itemWithAddresses.getPhoneNumbers() == null) {\n+            return;\n+        checkListOfModelElementsForDups(itemWithAddresses, \"phoneNumbers\");\n+        checkListOfModelElementsForNulls(itemWithAddresses, \"phoneNumbers\");\n+        for (StringWithCustomFacts swct : itemWithAddresses.getPhoneNumbers()) {\n+            mustHaveValue(swct, \"value\");\n+        }\n+    }\n+    @SuppressWarnings(\"unchecked\")\n+    protected void checkStringList(ModelElement modelElement, String listName, boolean blankStringsAllowed) {\n+        checkUninitializedCollection(modelElement, listName);\n+        Object o = get(modelElement, listName);\n+        if (o == null) {\n+            return;\n+        }\n+        if (!(o instanceof List)) {\n+            throw new ValidationException(\"Field \" + listName + \" on object of type \" + modelElement.getClass().getName()\n+                    + \" is not a List\");\n+        }\n+        if (modelElement instanceof HasCustomFacts) {\n+            List<StringWithCustomFacts> list = (List<StringWithCustomFacts>) o;\n+            int i = 0;\n+            while (i < list.size()) {\n+                Object s = list.get(i);\n+                if (s instanceof StringWithCustomFacts) {\n+                    StringWithCustomFacts swct = list.get(i);\n+                    if (swct != null && (blankStringsAllowed || isSpecified(swct.getValue()))) {\n+                        checkCustomFacts(swct);\n+                        i++;\n+                    } else {\n+                        Finding vf = validator.newFinding(modelElement, Severity.ERROR,\n+                                org.gedcom4j.validate.ProblemCode.LIST_WITH_NULL_VALUE, listName);\n+                        if (validator.mayRepair(vf)) {\n+                            ModelElement before = makeCopy(modelElement);\n+                            list.remove(i);\n+                            vf.addRepair(new AutoRepair(before, makeCopy(modelElement)));\n+                        } else {\n+                            i++;\n+                        }\n+                } else if (s instanceof String) {\n+                    String st = (String) s;\n+                    if (blankStringsAllowed || isSpecified(st)) {\n+                        i++;\n+                    } else {\n+                        Finding vf = validator.newFinding(modelElement, Severity.ERROR,\n+                                org.gedcom4j.validate.ProblemCode.LIST_WITH_NULL_VALUE, listName);\n+                        if (validator.mayRepair(vf)) {\n+                            ModelElement before = makeCopy(modelElement);\n+                            list.remove(i);\n+                            vf.addRepair(new AutoRepair(before, makeCopy(modelElement)));\n+                        } else {\n+                            i++;\n+                        }\n+        } else {\n+            if (blankStringsAllowed) {\n+                return;\n+            }\n+            List<String> list = (List<String>) o;\n+            int i = 0;\n+            while (i < list.size()) {\n+                String s = list.get(i);\n+                if (!isSpecified(s)) {\n+                    Finding vf = validator.newFinding(modelElement, Severity.ERROR,\n+                            org.gedcom4j.validate.ProblemCode.LIST_WITH_NULL_VALUE, listName);\n+                    if (validator.mayRepair(vf)) {\n+                        ModelElement before = makeCopy(modelElement);\n+                        list.remove(i);\n+                        vf.addRepair(new AutoRepair(before, makeCopy(modelElement)));\n+                    } else {\n+                        i++;\n+                    }\n+                } else {\n+                    i++;\n+                }\n+            }\n+        }\n+    }\n+    protected void checkUninitializedCollection(ModelElement objectWithCollection, String collectionName) {\n+        if (!Options.isCollectionInitializationEnabled()) {\n+            return;\n+        }\n+        if (get(objectWithCollection, collectionName) == null) {\n+            Finding vf = validator.newFinding(objectWithCollection, Severity.INFO,\n+                    org.gedcom4j.validate.ProblemCode.UNINITIALIZED_COLLECTION, collectionName);\n+            initializeCollectionIfAllowed(vf);\n+    protected void checkUserReferences(List<UserReference> userReferences, ModelElement objectWithUserReferences) {\n+        checkUninitializedCollection(objectWithUserReferences, \"userReferences\");\n+        if (userReferences == null) {\n+            return;\n+        }\n+        int i = 0;\n+        while (i < userReferences.size()) {\n+            UserReference ur = userReferences.get(i);\n+            if (ur == null) {\n+                Finding vf = validator.newFinding(objectWithUserReferences, Severity.ERROR,\n+                        org.gedcom4j.validate.ProblemCode.LIST_WITH_NULL_VALUE, \"userReferences\");\n+                if (validator.mayRepair(vf)) {\n+                    ModelElement before = makeCopy(objectWithUserReferences);\n+                    userReferences.remove(i);\n+                    vf.addRepair(new AutoRepair(before, makeCopy(objectWithUserReferences)));\n+                    i++;\n+            } else {\n+                mustHaveValue(ur, \"referenceNum\");\n+                mustHaveValueOrBeOmitted(ur, \"type\");\n+                i++;\n+    protected void checkWwwUrls(AbstractAddressableElement itemWithAddresses) {\n+        checkUninitializedCollection(itemWithAddresses, \"wwwUrls\");\n+        if (itemWithAddresses.getWwwUrls() == null) {\n+            return;\n+        }\n+        checkListOfModelElementsForDups(itemWithAddresses, \"wwwUrls\");\n+        checkListOfModelElementsForNulls(itemWithAddresses, \"wwwUrls\");\n+        for (StringWithCustomFacts swct : itemWithAddresses.getWwwUrls()) {\n+            mustHaveValue(swct, \"value\");\n+            if (swct.getValue() != null && !URL_PATTERN.matcher(swct.getValue()).matches()) {\n+                validator.newFinding(swct, Severity.WARNING, org.gedcom4j.validate.ProblemCode.NOT_VALID_WWW_URL, \"value\");\n+            }\n+        }\n+    protected Object get(Object object, String fieldName) {\n+        Method getter = getGetter(object, fieldName);\n+            return getter.invoke(object);\n+        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+            throw new ValidationException(\"Unable to invoke getter method for field '\" + fieldName + \"' on object of type \" + object\n+                    .getClass().getName(), e);\n+        }\n+    }\n+    protected IndividualEvent getEarliestEventOfType(Individual i, IndividualEventType type) {\n+        if (i == null) {\n+            return null;\n+        }\n+        IndividualEvent result = null;\n+        List<IndividualEvent> eventsOfType = i.getEventsOfType(type);\n+        DateParser dp = new DateParser();\n+        Date earliestSoFar = new Date(Long.MAX_VALUE);\n+        for (IndividualEvent e : eventsOfType) {\n+            if (e.getDate() != null && e.getDate().getValue() != null) {\n+                Date d = dp.parse(e.getDate().getValue(), ImpreciseDatePreference.FAVOR_EARLIEST);\n+                if (d != null && d.before(earliestSoFar)) {\n+                    result = e;\n+                    earliestSoFar = d;\n+            }\n+        }\n+        return result;\n+    }\n+    protected IndividualEvent getLatestEventOfType(Individual i, IndividualEventType type) {\n+        if (i == null) {\n+            return null;\n+        }\n+        IndividualEvent result = null;\n+        List<IndividualEvent> eventsOfType = i.getEventsOfType(type);\n+        DateParser dp = new DateParser();\n+        Date latestSoFar = new Date(Long.MIN_VALUE);\n+        for (IndividualEvent e : eventsOfType) {\n+            if (e.getDate() != null && e.getDate().getValue() != null) {\n+                Date d = dp.parse(e.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+                if (d != null && d.after(latestSoFar)) {\n+                    result = e;\n+                    latestSoFar = d;\n+        return result;\n+    protected Validator getValidator() {\n+        return validator;\n+    }\n+    @SuppressWarnings(\"rawtypes\")\n+    protected void initializeCollectionIfAllowed(Finding finding) {\n+        if (validator.mayRepair(finding)) {\n+            @SuppressWarnings(\"PMD.PrematureDeclaration\")\n+            ModelElement before = makeCopy(finding.getItemOfConcern());\n+            try {\n+                Field f = finding.getItemOfConcern().getClass().getField(finding.getFieldNameOfConcern());\n+                f.set(finding.getItemOfConcern(), new ArrayList(0));\n+            } catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {\n+                throw new ValidationException(\"Unable to initialize collection '\" + finding.getFieldNameOfConcern()\n+                        + \"' on object of class \" + finding.getItemOfConcern().getClass().getName(), e);\n+            }\n+            ModelElement after = makeCopy(finding.getItemOfConcern());\n+            finding.addRepair(new AutoRepair(before, after));\n+    protected boolean isSpecified(String s) {\n+    protected ModelElement makeCopy(ModelElement modelElement) {\n+        ModelElement before;\n+        try {\n+            Constructor<ModelElement> copyConstructor = getCopyConstructor(modelElement);\n+            before = copyConstructor.newInstance(modelElement);\n+        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+            throw new ValidationException(\"Unable to invoke copy constructor on object of class \" + modelElement.getClass()\n+                    .getName(), e);\n+        }\n+        return before;\n+    }\n+    protected boolean mayRepair(Finding validationFinding) {\n+        return validator.mayRepair(validationFinding);\n+    }\n+    protected void mustBeDateIfSpecified(ModelElement modelElement, String dateFieldName) {\n+        Object object = get(modelElement, dateFieldName);\n+        if (object == null) {\n+            return;\n+        }\n+        String dateToValidate = null;\n+        if (object instanceof String) {\n+            dateToValidate = (String) object;\n+        } else if (object instanceof StringWithCustomFacts) {\n+            dateToValidate = ((StringWithCustomFacts) object).getValue();\n+        }\n+        if (!isSpecified(dateToValidate)) {\n+            return;\n+        }\n+        DateParser dp = new DateParser();\n+        if (dp.parse(dateToValidate) == null) {\n+            validator.newFinding(modelElement, Severity.ERROR, ProblemCode.INVALID_DATE, dateFieldName);\n+        }\n+    }\n+    @SuppressWarnings({ \"checkstyle:NoWhitespaceBefore\", \"PMD.EmptyCatchBlock\" })\n+    protected <E extends Enum<E>> void mustBeInEnumIfSpecified(Class<E> e, ModelElement modelElement, String fieldName) {\n+        if (!e.isEnum()) {\n+            throw new ValidationException(\"Class of type \" + e.getClass().getName() + \" is not an enum\");\n+        }\n+        Object object = get(modelElement, fieldName);\n+        if (object == null) {\n+            return;\n+        }\n+        for (Enum<E> c : e.getEnumConstants()) {\n+            if (c.equals(object)) {\n+                return;\n+            }\n+        }\n+        String val = null;\n+        if (object instanceof StringWithCustomFacts) {\n+            val = ((StringWithCustomFacts) object).getValue();\n+        } else if (object instanceof String) {\n+            val = (String) object;\n+        }\n+        if (val == null) {\n+            return;\n+        }\n+        for (Enum<E> c : e.getEnumConstants()) {\n+            if (c.name().equals(val)) {\n+                return;\n+            }\n+            try {\n+                Object enumCode = get(c, \"code\");\n+                if (val.equals(enumCode)) {\n+                    return;\n+                }\n+            } catch (@SuppressWarnings(\"unused\") ValidationException ignored) {\n+            }\n+        }\n+        validator.newFinding(modelElement, Severity.ERROR, ProblemCode.ILLEGAL_VALUE, fieldName);\n+    }\n+    protected void mustHaveValue(ModelElement modelElement, String fieldName) {\n+        Object value = get(modelElement, fieldName);\n+        if (value == null) {\n+            validator.newFinding(modelElement, Severity.ERROR, org.gedcom4j.validate.ProblemCode.MISSING_REQUIRED_VALUE, fieldName);\n+            return;\n+        }\n+        if (value instanceof String) {\n+            if (!isSpecified((String) value)) {\n+                validator.newFinding(modelElement, Severity.ERROR, org.gedcom4j.validate.ProblemCode.MISSING_REQUIRED_VALUE,\n+                        fieldName);\n+            }\n+        } else if (value instanceof StringWithCustomFacts) {\n+            StringWithCustomFacts swct = (StringWithCustomFacts) value;\n+            if (swct.getValue() != null && !isSpecified(swct.getValue())) {\n+                validator.newFinding(modelElement, Severity.ERROR, org.gedcom4j.validate.ProblemCode.MISSING_REQUIRED_VALUE,\n+                        fieldName);\n+            }\n+        }\n+        if (modelElement instanceof HasCustomFacts) {\n+            checkCustomFacts((HasCustomFacts) modelElement);\n+        }\n+    }\n+    protected void mustHaveValueOrBeOmitted(ModelElement modelElement, String fieldName) {\n+        Object value = get(modelElement, fieldName);\n+        if (value == null) {\n+            return;\n+        }\n+        if (value instanceof String) {\n+            if (!isSpecified((String) value)) {\n+                validator.newFinding(modelElement, Severity.ERROR, org.gedcom4j.validate.ProblemCode.MISSING_REQUIRED_VALUE,\n+                        fieldName);\n+            }\n+        } else if (value instanceof StringWithCustomFacts) {\n+            StringWithCustomFacts swct = (StringWithCustomFacts) value;\n+            if (swct.getValue() == null || !isSpecified(swct.getValue())) {\n+                validator.newFinding(modelElement, Severity.ERROR, org.gedcom4j.validate.ProblemCode.MISSING_REQUIRED_VALUE,\n+                        fieldName);\n+            }\n+        } else {\n+            throw new ValidationException(\"Don't know how to handle result of type \" + value.getClass().getName());\n+        }\n+        if (modelElement instanceof HasCustomFacts) {\n+            checkCustomFacts((HasCustomFacts) modelElement);\n+        }\n+    }\n+    @SuppressWarnings(\"rawtypes\")\n+    protected void mustNotHaveValue(ModelElement modelElement, String fieldName) {\n+        Object value = get(modelElement, fieldName);\n+        if (value == null) {\n+            return;\n+        }\n+        if (value instanceof List && ((List) value).isEmpty()) {\n+            return;\n+        }\n+        validator.newFinding(modelElement, Severity.ERROR, org.gedcom4j.validate.ProblemCode.ILLEGAL_VALUE, fieldName);\n+    }\n+    protected Finding newFinding(ModelElement itemOfConcern, Severity severity, ProblemCode problemCode,\n+            String fieldNameOfConcern) {\n+        return validator.newFinding(itemOfConcern, severity, problemCode, fieldNameOfConcern);\n+    }\n+    protected abstract void validate();\n+    protected void xrefMustBePresentAndWellFormed(HasXref objectContainingXref) {\n+        String xref = objectContainingXref.getXref();\n+        if (!isSpecified(xref)) {\n+            validator.newFinding(objectContainingXref, Severity.ERROR, org.gedcom4j.validate.ProblemCode.MISSING_REQUIRED_VALUE,\n+                    \"xref\");\n+        } else {\n+            if (!XREF_PATTERN.matcher(xref).matches()) {\n+                validator.newFinding(objectContainingXref, Severity.ERROR, org.gedcom4j.validate.ProblemCode.XREF_INVALID, \"xref\");\n+            }\n+        }\n+    }\n+    @SuppressWarnings(\"unchecked\")\n+    private Constructor<ModelElement> getCopyConstructor(ModelElement modelElement) {\n+        Constructor<ModelElement> result;\n+        try {\n+            result = (Constructor<ModelElement>) modelElement.getClass().getConstructor(modelElement.getClass());\n+        } catch (NoSuchMethodException | SecurityException | IllegalArgumentException e) {\n+            throw new ValidationException(\"Unable to find copy constructor on object of class \" + modelElement.getClass().getName(),\n+                    e);\n+        }\n+        return result;\n+    }\n+    @SuppressWarnings(\"PMD.PreserveStackTrace\")\n+    private Method getGetter(Object object, String fieldName) {\n+        Method result = null;\n+        try {\n+            String getterName = \"get\" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);\n+            result = object.getClass().getMethod(getterName);\n+        } catch (@SuppressWarnings(\"unused\") NoSuchMethodException | SecurityException ignored) {\n+            try {\n+                String getterName = \"is\" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);\n+                result = object.getClass().getMethod(getterName);\n+            } catch (NoSuchMethodException | SecurityException e1) {\n+                throw new ValidationException(\"Unable to find getter method for field '\" + fieldName + \"' on object of type \"\n+                        + object.getClass().getName(), e1);\n+            }\n+        }\n+        return result;\n+    }\n+    private static final long serialVersionUID = 3107623401886842041L;\n+    AddressValidator(Validator validator, Address address) {\n+        super(validator);\n+        checkStringList(address, \"lines\", false);\n+        mustHaveValueOrBeOmitted(address, \"addr1\");\n+        mustHaveValueOrBeOmitted(address, \"addr2\");\n+        mustHaveValueOrBeOmitted(address, \"city\");\n+        mustHaveValueOrBeOmitted(address, \"stateProvince\");\n+        mustHaveValueOrBeOmitted(address, \"postalCode\");\n+        mustHaveValueOrBeOmitted(address, \"country\");\n+    private static final long serialVersionUID = -1100951640663586984L;\n+    private final ModelElement after;\n+    private final ModelElement before;\n+    public AutoRepair(ModelElement before, ModelElement after) {\n+        if (before != null && after != null && !before.getClass().equals(after.getClass())) {\n+            throw new IllegalArgumentException(\"The before object (\" + before.getClass().getName()\n+                    + \") is not the same type as the after object (\" + after.getClass().getName() + \").\");\n+        }\n+        this.before = before;\n+        this.after = after;\n+    }\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (!(obj instanceof AutoRepair)) {\n+            return false;\n+        }\n+        AutoRepair other = (AutoRepair) obj;\n+        if (after == null) {\n+            if (other.after != null) {\n+                return false;\n+            }\n+        } else if (!after.equals(other.after)) {\n+            return false;\n+        }\n+        if (before == null) {\n+            if (other.before != null) {\n+                return false;\n+            }\n+        } else if (!before.equals(other.before)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+    public ModelElement getAfter() {\n+        return after;\n+    }\n+    public ModelElement getBefore() {\n+        return before;\n+    }\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + (after == null ? 0 : after.hashCode());\n+        result = prime * result + (before == null ? 0 : before.hashCode());\n+        return result;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(\"AutoRepair [\");\n+        if (before != null) {\n+            builder.append(\"before=\");\n+            builder.append(before);\n+            builder.append(\", \");\n+        }\n+        if (after != null) {\n+            builder.append(\"after=\");\n+            builder.append(after);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    boolean mayRepair(Validator.Finding repairableValidationFinding);\n+    private static final long serialVersionUID = 7175832620872775457L;\n+    private static final long MILLIS_IN_SIXTY_YEARS = (long) (60 * 365.25 * 24 * 60 * 60 * 1000);\n+    public BirthsToOldParentsValidator(Validator v) {\n+        super(v);\n+    }\n+    @Override\n+    protected void validate() {\n+        DateParser dp = new DateParser();\n+        for (Family f : getValidator().getGedcom().getFamilies().values()) {\n+            if (f.getChildren() == null || f.getChildren().isEmpty()) {\n+                continue;\n+            }\n+            Individual husband = (f.getHusband() == null ? null : f.getHusband().getIndividual());\n+            IndividualEvent husbandLatestBirth = getLatestEventOfType(husband, IndividualEventType.BIRTH);\n+            Date husbandLatestBirthDate = null;\n+            if (husbandLatestBirth != null) {\n+                husbandLatestBirthDate = dp.parse(husbandLatestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+            }\n+            IndividualEvent husbandEarliestDeath = getEarliestEventOfType(husband, IndividualEventType.DEATH);\n+            Date husbandEarliestDeathDate = null;\n+            if (husbandEarliestDeath != null) {\n+                husbandEarliestDeathDate = dp.parse(husbandEarliestDeath.getDate().getValue(),\n+                        ImpreciseDatePreference.FAVOR_EARLIEST);\n+            }\n+            Individual wife = (f.getWife() == null ? null : f.getWife().getIndividual());\n+            IndividualEvent wifeLatestBirth = getLatestEventOfType(wife, IndividualEventType.BIRTH);\n+            Date wifeLatestBirthDate = null;\n+            if (wifeLatestBirth != null) {\n+                wifeLatestBirthDate = dp.parse(wifeLatestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+            }\n+            IndividualEvent wifeEarliestDeath = getEarliestEventOfType(wife, IndividualEventType.DEATH);\n+            Date wifeEarliestDeathDate = null;\n+            if (wifeEarliestDeath != null) {\n+                wifeEarliestDeathDate = dp.parse(wifeEarliestDeath.getDate().getValue(), ImpreciseDatePreference.FAVOR_EARLIEST);\n+            }\n+            if (husbandLatestBirthDate == null && wifeLatestBirthDate == null) {\n+                continue;\n+            }\n+            for (IndividualReference kidRef : f.getChildren()) {\n+                Individual kid = (kidRef == null ? null : kidRef.getIndividual());\n+                IndividualEvent kidEarliestBirth = getEarliestEventOfType(kid, IndividualEventType.BIRTH);\n+                if (kidEarliestBirth == null) {\n+                    continue;\n+                }\n+                Date kidEarliestBirthDate = dp.parse(kidEarliestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+                if (wifeLatestBirthDate != null) {\n+                    long momMillisDiff = kidEarliestBirthDate.getTime() - wifeLatestBirthDate.getTime();\n+                    if (momMillisDiff >= MILLIS_IN_SIXTY_YEARS) {\n+                        if (wifeEarliestDeathDate != null && wifeEarliestDeathDate.before(kidEarliestBirthDate)) {\n+                            Finding newFinding = newFinding(kidEarliestBirth, Severity.WARNING,\n+                                    ProblemCode.MOTHER_MAY_HAVE_BEEN_DECEASED, \"date\");\n+                            newFinding.getRelatedItems(true).add(kid);\n+                            newFinding.getRelatedItems().add(wife);\n+                        } else {\n+                            Finding newFinding = newFinding(kidEarliestBirth, Severity.WARNING,\n+                                    ProblemCode.MOTHER_WAS_SIXTY_OR_OLDER, \"date\");\n+                            newFinding.getRelatedItems(true).add(kid);\n+                            newFinding.getRelatedItems().add(wife);\n+                        }\n+                    }\n+                }\n+                if (husbandLatestBirth != null && husbandLatestBirthDate != null) {\n+                    long dadMillisDiff = kidEarliestBirthDate.getTime() - husbandLatestBirthDate.getTime();\n+                    if (dadMillisDiff >= MILLIS_IN_SIXTY_YEARS) {\n+                        if (husbandEarliestDeathDate != null && husbandEarliestDeathDate.before(kidEarliestBirthDate)) {\n+                            Finding newFinding = newFinding(kidEarliestBirth, Severity.WARNING,\n+                                    ProblemCode.FATHER_MAY_HAVE_BEEN_DECEASED, \"date\");\n+                            newFinding.getRelatedItems(true).add(kid);\n+                            newFinding.getRelatedItems().add(husband);\n+                        } else {\n+                            Finding newFinding = newFinding(kidEarliestBirth, Severity.WARNING,\n+                                    ProblemCode.FATHER_WAS_SIXTY_OR_OLDER, \"date\");\n+                            newFinding.getRelatedItems(true).add(kid);\n+                            newFinding.getRelatedItems().add(husband);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = 7175832620872775457L;\n+    private static final long MILLIS_IN_SIXTEEN_YEARS = (long) (16 * 365.25 * 24 * 60 * 60 * 1000);\n+    public BirthsToYoungParentsValidator(Validator v) {\n+        super(v);\n+    }\n+    @Override\n+    protected void validate() {\n+        DateParser dp = new DateParser();\n+        for (Family f : getValidator().getGedcom().getFamilies().values()) {\n+            if (f.getChildren() == null || f.getChildren().isEmpty()) {\n+                continue;\n+            }\n+            Individual husband = (f.getHusband() == null ? null : f.getHusband().getIndividual());\n+            IndividualEvent husbandLatestBirth = getLatestEventOfType(husband, IndividualEventType.BIRTH);\n+            Date husbandLatestBirthDate = null;\n+            if (husbandLatestBirth != null) {\n+                husbandLatestBirthDate = dp.parse(husbandLatestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+            }\n+            Individual wife = (f.getWife() == null ? null : f.getWife().getIndividual());\n+            IndividualEvent wifeLatestBirth = getLatestEventOfType(wife, IndividualEventType.BIRTH);\n+            Date wifeLatestBirthDate = null;\n+            if (wifeLatestBirth != null) {\n+                wifeLatestBirthDate = dp.parse(wifeLatestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+            }\n+            if (husbandLatestBirthDate == null && wifeLatestBirthDate == null) {\n+                continue;\n+            }\n+            for (IndividualReference kidRef : f.getChildren()) {\n+                Individual kid = (kidRef == null ? null : kidRef.getIndividual());\n+                IndividualEvent kidEarliestBirth = getEarliestEventOfType(kid, IndividualEventType.BIRTH);\n+                if (kidEarliestBirth == null) {\n+                    continue;\n+                }\n+                Date kidEarliestBirthDate = dp.parse(kidEarliestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_EARLIEST);\n+                if (wifeLatestBirthDate != null) {\n+                    long momMillisDiff = kidEarliestBirthDate.getTime() - wifeLatestBirthDate.getTime();\n+                    if (momMillisDiff <= MILLIS_IN_SIXTEEN_YEARS) {\n+                        if (wifeLatestBirthDate.after(kidEarliestBirthDate)) {\n+                            Finding newFinding = newFinding(kidEarliestBirth, Severity.WARNING,\n+                                    ProblemCode.MOTHER_MAY_NOT_HAVE_BEEN_BORN_YET, \"date\");\n+                            newFinding.getRelatedItems(true).add(kid);\n+                            newFinding.getRelatedItems().add(wife);\n+                        } else {\n+                            Finding newFinding = newFinding(kidEarliestBirth, Severity.WARNING,\n+                                    ProblemCode.MOTHER_WAS_LESS_THAN_SIXTEEN, \"date\");\n+                            newFinding.getRelatedItems(true).add(kid);\n+                            newFinding.getRelatedItems().add(wife);\n+                        }\n+                    }\n+                }\n+                if (husbandLatestBirth != null && husbandLatestBirthDate != null) {\n+                    long dadMillisDiff = kidEarliestBirthDate.getTime() - husbandLatestBirthDate.getTime();\n+                    if (dadMillisDiff <= MILLIS_IN_SIXTEEN_YEARS) {\n+                        if (husbandLatestBirthDate.after(kidEarliestBirthDate)) {\n+                            Finding newFinding = newFinding(kidEarliestBirth, Severity.WARNING,\n+                                    ProblemCode.FATHER_MAY_NOT_HAVE_BEEN_BORN_YET, \"date\");\n+                            newFinding.getRelatedItems(true).add(kid);\n+                            newFinding.getRelatedItems().add(husband);\n+                        } else {\n+                            Finding newFinding = newFinding(kidEarliestBirth, Severity.WARNING,\n+                                    ProblemCode.FATHER_WAS_LESS_THAN_SIXTEEN, \"date\");\n+                            newFinding.getRelatedItems(true).add(kid);\n+                            newFinding.getRelatedItems().add(husband);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = -9011648733929347548L;\n+    public BornBeforeAncestorsValidator(Validator validator) {\n+        super(validator);\n+    }\n+    @Override\n+    protected void validate() {\n+        DateParser dp = new DateParser();\n+        for (Individual i : getValidator().getGedcom().getIndividuals().values()) {\n+            IndividualEvent ib = getEarliestEventOfType(i, IndividualEventType.BIRTH);\n+            if (ib == null || ib.getDate() == null || ib.getDate().getValue() == null) {\n+                continue;\n+            }\n+            Date ibd = dp.parse(ib.getDate().getValue(), ImpreciseDatePreference.FAVOR_EARLIEST);\n+            if (ibd == null) {\n+                continue;\n+            }\n+            for (Individual a : i.getAncestors()) {\n+                if (a == i) { // NOPMD - deliberate checking if same individual\n+                    continue;\n+                }\n+                IndividualEvent ab = getLatestEventOfType(a, IndividualEventType.BIRTH);\n+                if (ab == null || ab.getDate() == null || ab.getDate().getValue() == null) {\n+                    continue;\n+                }\n+                Date abd = dp.parse(ab.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+                if (abd != null && abd.after(ibd)) {\n+                    newFinding(i, Severity.WARNING, ProblemCode.DESCENDANT_BORN_BEFORE_ANCESTOR, null).getRelatedItems(true).add(a);\n+                }\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = 8632496421513471225L;\n+    public CircularAncestryValidator(Validator validator) {\n+        super(validator);\n+    }\n+    @Override\n+    protected void validate() {\n+        RelationshipCalculator rc = new RelationshipCalculator();\n+        for (Individual i : getValidator().getGedcom().getIndividuals().values()) {\n+            if (i.getFamiliesWhereChild() != null) {\n+                for (FamilyChild fc : i.getFamiliesWhereChild()) {\n+                    Family f = fc.getFamily();\n+                    Individual father = (f.getHusband() == null ? null : f.getHusband().getIndividual());\n+                    if (father != null && father.getAncestors().contains(i)) {\n+                        Finding finding = newFinding(i, Severity.ERROR, ProblemCode.CIRCULAR_ANCESTRAL_RELATIONSHIP,\n+                                \"familiesWhereChild\");\n+                        rc.calculateRelationships(father, i, false);\n+                        for (Relationship r : rc.getRelationshipsFound()) {\n+                            finding.getRelatedItems(true).add(r.getIndividual2());\n+                        }\n+                    }\n+                    Individual mother = (f.getWife() == null ? null : f.getWife().getIndividual());\n+                    if (mother != null && mother.getAncestors().contains(i)) {\n+                        Finding finding = newFinding(i, Severity.ERROR, ProblemCode.CIRCULAR_ANCESTRAL_RELATIONSHIP,\n+                                \"familiesWhereChild\");\n+                        rc.calculateRelationships(mother, i, false);\n+                        for (Relationship r : rc.getRelationshipsFound()) {\n+                            finding.getRelatedItems(true).add(r.getIndividual2());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = -5330593557253049349L;\n+    CitationValidator(Validator validator, AbstractCitation citation) {\n+        super(validator);\n+            validateCitationWithSource();\n+            validateCitationWithoutSource();\n+        checkNotes(citation);\n+        checkCustomFacts(citation);\n+    }\n+    private void validateCitationWithoutSource() {\n+        CitationWithoutSource c = (CitationWithoutSource) citation;\n+        checkNotes(c);\n+        checkStringList(c, \"description\", true);\n+        checkUninitializedCollection(c, \"textFromSource\");\n+        List<List<String>> textFromSource = c.getTextFromSource();\n+        if (textFromSource == null || textFromSource.isEmpty()) {\n+            return;\n+        }\n+        DuplicateHandler<List<String>> dh = new DuplicateHandler<>(textFromSource);\n+        if (dh.count() > 0) {\n+            Finding vf = newFinding(c, Severity.ERROR, ProblemCode.DUPLICATE_VALUE, \"textFromSource\");\n+            if (mayRepair(vf)) {\n+                CitationWithoutSource before = new CitationWithoutSource(c);\n+                dh.remove();\n+                vf.addRepair(new AutoRepair(before, new CitationWithoutSource(c)));\n+        checkForNullEntries(c, \"textFromSource\");\n+    }\n+    private void validateCitationWithSource() {\n+        CitationWithSource c = (CitationWithSource) citation;\n+        if (c.getSource() == null) {\n+            newFinding(c, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"source\");\n+        }\n+        mustHaveValueOrBeOmitted(c, \"whereInSource\");\n+        mustHaveValueOrBeOmitted(c, \"eventCited\");\n+        if (c.getEventCited() == null) {\n+            mustNotHaveValue(c, \"roleInEvent\");\n+        } else {\n+            mustHaveValueOrBeOmitted(c, \"roleInEvent\");\n+        }\n+        mustHaveValueOrBeOmitted(c, \"certainty\");\n+        if (c.getCertainty() != null && c.getCertainty().getValue() != null && !\"0\".equals(c.getCertainty().getValue()) && !\"1\"\n+                .equals(c.getCertainty().getValue()) && !\"2\".equals(c.getCertainty().getValue()) && !\"3\".equals(c.getCertainty()\n+                        .getValue())) {\n+            newFinding(c, Severity.ERROR, ProblemCode.ILLEGAL_VALUE, \"certainty\");\n+        }\n+        checkUninitializedCollection(c, \"data\");\n+        checkListOfModelElementsForDups(c, \"data\");\n+        checkListOfModelElementsForNulls(c, \"data\");\n+        if (c.getData() != null) {\n+            for (CitationData cd : c.getData()) {\n+                checkCustomFacts(cd);\n+                mustBeDateIfSpecified(cd, \"entryDate\");\n+                checkUninitializedCollection(cd, \"sourceText\");\n+            }\n+        }\n+    private static final long serialVersionUID = -602931269419442765L;\n+    private static final long MILLIS_IN_FIFTEEN_YEARS = (long) (15 * 365.25 * 24 * 60 * 60 * 1000);\n+    public CouplesWithLargeAgeDifferencesValidator(Validator validator) {\n+        super(validator);\n+    }\n+    @Override\n+    protected void validate() {\n+        DateParser dp = new DateParser();\n+        for (Family f : getValidator().getGedcom().getFamilies().values()) {\n+            if (f.getHusband() == null || f.getWife() == null) {\n+                continue;\n+            }\n+            Individual husband = (f.getHusband() == null ? null : f.getHusband().getIndividual());\n+            IndividualEvent husbandLatestBirth = getLatestEventOfType(husband, IndividualEventType.BIRTH);\n+            Date husbandLatestBirthDate = null;\n+            if (husbandLatestBirth != null) {\n+                husbandLatestBirthDate = dp.parse(husbandLatestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+            }\n+            Individual wife = (f.getWife() == null ? null : f.getWife().getIndividual());\n+            IndividualEvent wifeLatestBirth = getLatestEventOfType(wife, IndividualEventType.BIRTH);\n+            Date wifeLatestBirthDate = null;\n+            if (wifeLatestBirth != null) {\n+                wifeLatestBirthDate = dp.parse(wifeLatestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+            }\n+            if ((husbandLatestBirthDate == null || wifeLatestBirthDate == null)) {\n+                continue;\n+            }\n+            long diff = Math.abs(husbandLatestBirthDate.getTime() - wifeLatestBirthDate.getTime());\n+            if (diff >= MILLIS_IN_FIFTEEN_YEARS) {\n+                newFinding(f, Severity.WARNING, ProblemCode.COUPLE_MORE_THAN_FIFTEEN_YEARS_AGE_DIFFERENCE, null);\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = 7793203956142651668L;\n+    public DifferentSurnamesThanParentsValidator(Validator validator) {\n+        super(validator);\n+    }\n+    @Override\n+    protected void validate() {\n+        for (Individual i : getValidator().getGedcom().getIndividuals().values()) {\n+            if (i.getFamiliesWhereChild() == null || i.getFamiliesWhereChild().isEmpty()) {\n+                continue;\n+            }\n+            Set<String> personSurnames = i.getSurnames();\n+            Set<String> allParentSurnames = new TreeSet<>();\n+            Set<Individual> parents = new HashSet<>();\n+            for (FamilyChild fc : i.getFamiliesWhereChild()) {\n+                if (fc.getFamily().getHusband() != null && fc.getFamily().getHusband().getIndividual() != null) {\n+                    Individual h = fc.getFamily().getHusband().getIndividual();\n+                    parents.add(h);\n+                    allParentSurnames.addAll(h.getSurnames());\n+                }\n+                if (fc.getFamily().getWife() != null && fc.getFamily().getWife().getIndividual() != null) {\n+                    Individual w = fc.getFamily().getWife().getIndividual();\n+                    parents.add(w);\n+                    allParentSurnames.addAll(w.getSurnames());\n+                }\n+            }\n+            if (allParentSurnames.isEmpty()) {\n+                continue;\n+            }\n+            Set<String> commonSurnames = new TreeSet<>(allParentSurnames);\n+            commonSurnames.retainAll(personSurnames);\n+            if (commonSurnames.isEmpty()) {\n+                Finding newFinding = newFinding(i, Severity.WARNING, ProblemCode.SURNAMES_DONT_MATCH_PARENTS, \"surnames\");\n+                newFinding.getRelatedItems(true).addAll(parents);\n+            }\n+        }\n+    }\n+    private final List<T> items;\n+    DuplicateHandler(List<T> items) {\n+        this.items = items;\n+    }\n+    public int remove() {\n+        return process(true);\n+    }\n+    int count() {\n+        return process(false);\n+    }\n+    private int process(boolean remove) {\n+        if (items == null || items.isEmpty()) {\n+            return 0;\n+        }\n+        int result = 0;\n+        HashSet<T> unique = new HashSet<>();\n+        int i = 0;\n+        while (i < items.size()) {\n+            T item = items.get(i);\n+            if (unique.contains(item)) {\n+                result++;\n+                if (remove) {\n+                    items.remove(i);\n+                } else {\n+                    i++;\n+                }\n+            } else {\n+                unique.add(item);\n+                i++;\n+            }\n+        }\n+        return result;\n+    }\n+    private static final long serialVersionUID = -1272765738333620248L;\n+    private static final String[] AGE_FORMATS = { \"CHILD\", \"INFANT\", \"STILLBORN\", \"[<>]?\\\\s?\\\\d+y\", \"[<>]?\\\\s?\\\\d+m\",\n+            \"[<>]\\\\s?\\\\d+d\", \"[<>]\\\\s?\\\\d+y \\\\d+m \\\\d+d\", \"[<>]\\\\s?\\\\d+y \\\\d+m\", \"[<>]\\\\s?\\\\d+y \\\\d+d\", \"[<>]\\\\s?\\\\d+m \\\\d+d\" };\n+    EventValidator(Validator validator, AbstractEvent e) {\n+        super(validator);\n+        if (e instanceof IndividualEvent) {\n+            IndividualEvent ie = (IndividualEvent) e;\n+            mustHaveValue(ie, \"type\");\n+            if (ie.getType() == IndividualEventType.BIRTH || ie.getType() == IndividualEventType.CHRISTENING || ie\n+                    .getType() == IndividualEventType.DEATH) {\n+                mustHaveValueOrBeOmitted(ie, \"yNull\");\n+                mustNotHaveValue(ie, \"yNull\");\n+            if (ie.getType() != IndividualEventType.BIRTH && ie.getType() != IndividualEventType.CHRISTENING && ie\n+                    .getType() != IndividualEventType.ADOPTION) {\n+                mustNotHaveValue(ie, \"family\");\n+        } else if (e instanceof FamilyEvent) {\n+            FamilyEvent fe = (FamilyEvent) e;\n+            mustHaveValue(fe, \"type\");\n+            if (fe.getType() == FamilyEventType.MARRIAGE) {\n+                mustHaveValueOrBeOmitted(fe, \"yNull\");\n+                mustNotHaveValue(fe, \"yNull\");\n+            if (fe.getType() == FamilyEventType.EVENT) {\n+                mustHaveValueOrBeOmitted(fe, \"description\");\n+                mustNotHaveValue(fe, \"description\");\n+            mustBeAgeFormatIfSpecified(fe, fe.getHusbandAge(), \"husbandAge\");\n+            mustBeAgeFormatIfSpecified(fe, fe.getWifeAge(), \"husbandAge\");\n+            mustNotHaveValue(fe, \"age\");\n+        }\n+        if (e.getAddress() != null) {\n+            new AddressValidator(getValidator(), e.getAddress()).validate();\n+        }\n+        mustBeAgeFormatIfSpecified(e, e.getAge(), \"age\");\n+        mustHaveValueOrBeOmitted(e, \"cause\");\n+        checkCitations(e);\n+        checkCustomFacts(e);\n+        mustHaveValueOrBeOmitted(e, \"date\");\n+        mustBeDateIfSpecified(e, \"date\");\n+        if (e.getDescription() != null && e.getDescription().trim().length() != 0 && !\"Y\".equals(e.getDescription().trim())) {\n+            Finding vf = newFinding(e, Severity.ERROR, ProblemCode.ILLEGAL_VALUE, \"description\");\n+            if (mayRepair(vf)) {\n+                ModelElement before = makeCopy(e);\n+                NoteStructure n = new NoteStructure();\n+                n.getLines(true).add(e.getDescription().getValue());\n+                e.getNoteStructures(true).add(n);\n+                e.getDescription().setValue(null);\n+                vf.addRepair(new AutoRepair(before, makeCopy(e)));\n+        checkEmails(e);\n+        checkFaxNumbers(e);\n+        checkMultimedia();\n+        new NoteStructureListValidator(getValidator(), e).validate();\n+        checkPhoneNumbers(e);\n+        mustHaveValueOrBeOmitted(e, \"religiousAffiliation\");\n+        mustHaveValueOrBeOmitted(e, \"respAgency\");\n+        mustHaveValueOrBeOmitted(e, \"restrictionNotice\");\n+        if (e.getRestrictionNotice() != null) {\n+            mustBeInEnumIfSpecified(RestrictionNoticeType.class, e, \"restrictionNotice\");\n+        }\n+        if (e.getPlace() != null) {\n+            new PlaceValidator(getValidator(), e.getPlace()).validate();\n+        }\n+        checkWwwUrls(e);\n+        checkUninitializedCollection(e, \"multimedia\");\n+        List<MultimediaReference> multimedia = e.getMultimedia();\n+        if (multimedia != null) {\n+            checkListOfModelElementsForDups(e, \"multimedia\");\n+            checkListOfModelElementsForNulls(e, \"multimedia\");\n+            for (MultimediaReference mRef : multimedia) {\n+                if (mRef == null) {\n+                    continue;\n+                new MultimediaValidator(getValidator(), mRef.getMultimedia()).validate();\n+    private void mustBeAgeFormatIfSpecified(AbstractEvent ev, StringWithCustomFacts val, String fieldName) {\n+        if (val == null || !isSpecified(val.getValue())) {\n+            return;\n+        String s = val.getValue().trim();\n+        for (String regex : AGE_FORMATS) {\n+            if (regex.matches(s)) {\n+                return;\n+        newFinding(ev, Severity.ERROR, ProblemCode.ILLEGAL_VALUE, fieldName);\n+    private static final long serialVersionUID = -4229277765495507049L;\n+    private final FamilyChild fc;\n+    public FamilyChildValidator(Validator validator, FamilyChild fc) {\n+        super(validator);\n+        this.fc = fc;\n+    }\n+    @Override\n+    protected void validate() {\n+        mustBeInEnumIfSpecified(ChildLinkageStatus.class, fc, \"status\");\n+        mustBeInEnumIfSpecified(PedigreeLinkageType.class, fc, \"pedigree\");\n+        checkNotes(fc);\n+        mustHaveValue(fc, \"family\");\n+    }\n+    private static final long serialVersionUID = -4229277765495507049L;\n+    private final FamilySpouse fs;\n+    public FamilySpouseValidator(Validator validator, FamilySpouse fs) {\n+        super(validator);\n+        this.fs = fs;\n+    }\n+    @Override\n+    protected void validate() {\n+        checkNotes(fs);\n+        mustHaveValue(fs, \"family\");\n+    }\n+    private static final long serialVersionUID = -2719392556810437421L;\n+    FamilyValidator(Validator validator, Family f) {\n+        super(validator);\n+        mustHaveValueOrBeOmitted(f, \"automatedRecordId\");\n+        checkCitations(f);\n+        checkCustomFacts(f);\n+                new EventValidator(getValidator(), ev).validate();\n+            new IndividualValidator(getValidator(), (f.getHusband() == null ? null : f.getHusband().getIndividual())).validate();\n+            new IndividualValidator(getValidator(), (f.getWife() == null ? null : f.getWife().getIndividual())).validate();\n+        new NoteStructureListValidator(getValidator(), f).validate();\n+        mustHaveValueOrBeOmitted(f, \"numChildren\");\n+        mustHaveValueOrBeOmitted(f, \"recFileNumber\");\n+        mustHaveValueOrBeOmitted(f, \"restrictionNotice\");\n+        if (f.getRestrictionNotice() != null) {\n+            mustBeInEnumIfSpecified(RestrictionNoticeType.class, f, \"restrictionNotice\");\n+        }\n+        checkUninitializedCollection(f, \"children\");\n+        List<IndividualReference> children = f.getChildren();\n+        if (children != null) {\n+            checkListOfModelElementsForDups(f, \"children\");\n+            checkListOfModelElementsForNulls(f, \"children\");\n+        checkUninitializedCollection(f, \"ldsSpouseSealings\");\n+        if (ldsSpouseSealings != null) {\n+            checkListOfModelElementsForDups(f, \"ldsSpouseSealings\");\n+            checkListOfModelElementsForNulls(f, \"ldsSpouseSealings\");\n+            for (LdsSpouseSealing s : ldsSpouseSealings) {\n+                new LdsSpouseSealingValidator(getValidator(), s).validate();\n+        checkUninitializedCollection(f, \"multimedia\");\n+        List<MultimediaReference> multimedia = f.getMultimedia();\n+        if (multimedia != null) {\n+            checkListOfModelElementsForDups(f, \"multimedia\");\n+            checkListOfModelElementsForNulls(f, \"multimedia\");\n+            for (MultimediaReference mRef : multimedia) {\n+                if (mRef == null) {\n+                    continue;\n+                new MultimediaValidator(getValidator(), mRef.getMultimedia()).validate();\n+        checkUninitializedCollection(f, \"submitters\");\n+        List<SubmitterReference> submitters = f.getSubmitters();\n+        if (submitters != null) {\n+            checkListOfModelElementsForDups(f, \"submitters\");\n+            checkListOfModelElementsForNulls(f, \"submitters\");\n+            for (SubmitterReference sRef : submitters) {\n+                Submitter s = sRef.getSubmitter();\n+                new SubmitterValidator(getValidator(), s).validate();\n+    private static final long serialVersionUID = -8668522986153083890L;\n+    private final DateParser dp = new DateParser();\n+    private final Date now = new Date();\n+    public FutureBirthOrDeathValidator(Validator validator) {\n+        super(validator);\n+    }\n+    @Override\n+    protected void validate() {\n+        for (Individual i : getValidator().getGedcom().getIndividuals().values()) {\n+            List<IndividualEvent> births = i.getEventsOfType(IndividualEventType.BIRTH);\n+            for (IndividualEvent b : births) {\n+                if (b.getDate() != null && b.getDate().getValue() != null && !b.getDate().getValue().isEmpty()) {\n+                    String dateString = b.getDate().getValue();\n+                    Date bd = dp.parse(dateString);\n+                    if (bd != null && now.before(bd)) {\n+                        newFinding(b, Severity.ERROR, ProblemCode.DATE_IN_FUTURE, \"date\").getRelatedItems(true).add(i);\n+                    }\n+                }\n+            }\n+            List<IndividualEvent> deaths = i.getEventsOfType(IndividualEventType.DEATH);\n+            for (IndividualEvent d : deaths) {\n+                if (d.getDate() != null && d.getDate().getValue() != null && !d.getDate().getValue().isEmpty()) {\n+                    String dateString = d.getDate().getValue();\n+                    Date dd = dp.parse(dateString);\n+                    if (dd != null && now.before(dd)) {\n+                        newFinding(d, Severity.ERROR, ProblemCode.DATE_IN_FUTURE, \"date\").getRelatedItems(true).add(i);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = 6219406585813356753L;\n+    HeaderValidator(Validator validator, Header header) {\n+        super(validator);\n+        checkUninitializedCollection(header, \"copyrightData\");\n+        checkCustomFacts(header);\n+        mustHaveValueOrBeOmitted(header, \"date\");\n+        mustBeDateIfSpecified(header, \"date\");\n+        mustHaveValueOrBeOmitted(header, \"destinationSystem\");\n+        mustHaveValueOrBeOmitted(header, \"fileName\");\n+        checkGedcomVersion();\n+        mustHaveValueOrBeOmitted(header, \"language\");\n+        mustBeInEnumIfSpecified(LanguageID.class, header, \"language\");\n+        new NoteStructureListValidator(getValidator(), header).validate();\n+        mustHaveValueOrBeOmitted(header, \"placeHierarchy\");\n+        checkSubmitter();\n+        mustHaveValueOrBeOmitted(header, \"time\");\n+            Finding vf = newFinding(header, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"characterSet\");\n+            if (mayRepair(vf)) {\n+                Header before = new Header(header);\n+                vf.addRepair(new AutoRepair(before, new Header(header)));\n+            Finding vf = newFinding(header.getCharacterSet(), Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE,\n+                    \"characterSetName\");\n+            if (mayRepair(vf)) {\n+                CharacterSet before = new CharacterSet(header.getCharacterSet());\n+                header.getCharacterSet().setCharacterSetName(\"ANSEL\");\n+                vf.addRepair(new AutoRepair(before, new CharacterSet(header.getCharacterSet())));\n+            newFinding(header.getCharacterSet().getCharacterSetName(), Severity.ERROR, ProblemCode.ILLEGAL_VALUE, \"value\");\n+        }\n+        mustHaveValueOrBeOmitted(header.getCharacterSet(), \"characterSetName\");\n+        mustHaveValueOrBeOmitted(header.getCharacterSet(), \"versionNum\");\n+        checkCustomFacts(header.getCharacterSet());\n+    }\n+    private void checkGedcomVersion() {\n+        GedcomVersion gv = header.getGedcomVersion();\n+        if (gv == null) {\n+            Finding vf = newFinding(header, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"gedcomVersion\");\n+            if (mayRepair(vf)) {\n+                Header before = new Header(header);\n+                header.setGedcomVersion(new GedcomVersion());\n+                vf.addRepair(new AutoRepair(before, new Header(header)));\n+            }\n+        } else {\n+            if (gv.getVersionNumber() == null) {\n+                Finding vf = newFinding(gv, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"versionNumber\");\n+                if (mayRepair(vf)) {\n+                    GedcomVersion before = new GedcomVersion(gv);\n+                    gv.setVersionNumber(SupportedVersion.V5_5_1);\n+                    vf.addRepair(new AutoRepair(before, new GedcomVersion(gv)));\n+                }\n+            }\n+            checkCustomFacts(gv);\n+            Finding vf = newFinding(header, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"sourceSystem\");\n+            if (mayRepair(vf)) {\n+                Header before = new Header(header);\n+                vf.addRepair(new AutoRepair(before, new Header(header)));\n+        checkCustomFacts(ss);\n+            checkCustomFacts(c);\n+                new AddressValidator(getValidator(), c.getAddress()).validate();\n+            if (c.getBusinessName() == null || !isSpecified(c.getBusinessName())) {\n+                Finding vf = newFinding(c, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"businessName\");\n+                if (mayRepair(vf)) {\n+                    Corporation before = new Corporation(c);\n+                    vf.addRepair(new AutoRepair(before, new Corporation(c)));\n+        mustHaveValueOrBeOmitted(ss, \"productName\");\n+                Finding vf = newFinding(sd, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"name\");\n+                if (mayRepair(vf)) {\n+                    HeaderSourceData before = new HeaderSourceData(sd);\n+                    vf.addRepair(new AutoRepair(before, new HeaderSourceData(sd)));\n+            mustHaveValueOrBeOmitted(sd, \"copyright\");\n+            mustBeDateIfSpecified(sd, \"publishDate\");\n+            checkCustomFacts(sd);\n+            Finding vf = newFinding(ss, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"systemId\");\n+            if (mayRepair(vf)) {\n+                SourceSystem before = new SourceSystem(ss);\n+                vf.addRepair(new AutoRepair(before, new SourceSystem(ss)));\n+            }\n+        }\n+        mustHaveValueOrBeOmitted(ss, \"versionNum\");\n+    }\n+    private void checkSubmitter() {\n+        if (header.getSubmitterReference() == null) {\n+            Finding vf = newFinding(header, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"submitter\");\n+            Submitter submitter = null;\n+            if (getValidator().getGedcom().getSubmitters() != null && !getValidator().getGedcom().getSubmitters().isEmpty()) {\n+                submitter = getValidator().getGedcom().getSubmitters().values().iterator().next();\n+            }\n+            if (submitter != null && mayRepair(vf)) {\n+                Header before = new Header(header);\n+                header.setSubmitterReference(new SubmitterReference(submitter));\n+                vf.addRepair(new AutoRepair(before, new Header(header)));\n+        if (header.getSubmitterReference() != null) {\n+            new SubmitterValidator(getValidator(), header.getSubmitterReference().getSubmitter()).validate();\n+        }\n+    private static final long serialVersionUID = 9121742173084690556L;\n+    private static final String[] AGE_FORMATS = { \"CHILD\", \"INFANT\", \"STILLBORN\", \"[<>]?\\\\s?\\\\d+y\", \"[<>]?\\\\s?\\\\d+m\",\n+            \"[<>]\\\\s?\\\\d+d\", \"[<>]\\\\s?\\\\d+y \\\\d+m \\\\d+d\", \"[<>]\\\\s?\\\\d+y \\\\d+m\", \"[<>]\\\\s?\\\\d+y \\\\d+d\", \"[<>]\\\\s?\\\\d+m \\\\d+d\" };\n+    private final IndividualAttribute ia;\n+    public IndividualAttributeValidator(Validator validator, IndividualAttribute ia) {\n+        super(validator);\n+        this.ia = ia;\n+    }\n+    @Override\n+    protected void validate() {\n+        mustHaveValue(ia, \"type\");\n+        if (ia.getType() == IndividualAttributeType.FACT) {\n+            mustHaveValue(ia, \"subType\");\n+        }\n+        if (ia.getType() != IndividualAttributeType.RESIDENCE) {\n+            mustHaveValue(ia, \"description\");\n+        }\n+        if (ia.getPlace() != null) {\n+            new PlaceValidator(getValidator(), ia.getPlace()).validate();\n+        }\n+        mustBeAgeFormatIfSpecified(ia, ia.getAge(), \"age\");\n+        mustHaveValueOrBeOmitted(ia, \"cause\");\n+        checkCitations(ia);\n+        checkCustomFacts(ia);\n+        mustHaveValueOrBeOmitted(ia, \"date\");\n+        mustBeDateIfSpecified(ia, \"date\");\n+        checkEmails(ia);\n+        checkFaxNumbers(ia);\n+        checkMultimedia();\n+        new NoteStructureListValidator(getValidator(), ia).validate();\n+        checkPhoneNumbers(ia);\n+        mustHaveValueOrBeOmitted(ia, \"religiousAffiliation\");\n+        mustHaveValueOrBeOmitted(ia, \"respAgency\");\n+        mustHaveValueOrBeOmitted(ia, \"restrictionNotice\");\n+        if (ia.getPlace() != null) {\n+            new PlaceValidator(getValidator(), ia.getPlace()).validate();\n+        }\n+        checkWwwUrls(ia);\n+    }\n+    private void checkMultimedia() {\n+        checkUninitializedCollection(ia, \"multimedia\");\n+        List<MultimediaReference> multimedia = ia.getMultimedia();\n+        if (multimedia != null) {\n+            checkListOfModelElementsForDups(ia, \"multimedia\");\n+            checkListOfModelElementsForNulls(ia, \"multimedia\");\n+            for (MultimediaReference mRef : multimedia) {\n+                if (mRef == null) {\n+                    continue;\n+                }\n+                new MultimediaValidator(getValidator(), mRef.getMultimedia()).validate();\n+            }\n+        }\n+    }\n+    private void mustBeAgeFormatIfSpecified(AbstractEvent ev, StringWithCustomFacts val, String fieldName) {\n+        if (val == null || !isSpecified(val.getValue())) {\n+            return;\n+        }\n+        String s = val.getValue().trim();\n+        for (String regex : AGE_FORMATS) {\n+            if (regex.matches(s)) {\n+                return;\n+            }\n+        }\n+        newFinding(ev, Severity.ERROR, ProblemCode.ILLEGAL_VALUE, fieldName);\n+    }\n+    private static final long serialVersionUID = -4569551561960734159L;\n+    IndividualValidator(Validator validator, Individual individual) {\n+        super(validator);\n+        xrefMustBePresentAndWellFormed(individual);\n+        checkUninitializedCollection(individual, \"names\");\n+        if (names != null) {\n+            checkListOfModelElementsForDups(individual, \"names\");\n+            checkListOfModelElementsForNulls(individual, \"names\");\n+            for (PersonalName pn : names) {\n+                if (pn != null) {\n+                    new PersonalNameValidator(getValidator(), pn).validate();\n+        checkUninitializedCollection(individual, \"familiesWhereChild\");\n+        if (individual.getFamiliesWhereChild() != null) {\n+            checkListOfModelElementsForDups(individual, \"familiesWhereChild\");\n+            checkListOfModelElementsForNulls(individual, \"familiesWhereChild\");\n+            for (FamilyChild fc : individual.getFamiliesWhereChild()) {\n+                new FamilyChildValidator(getValidator(), fc).validate();\n+        checkUninitializedCollection(individual, \"familiesWhereSpouse\");\n+        if (individual.getFamiliesWhereSpouse() != null) {\n+            checkListOfModelElementsForDups(individual, \"familiesWhereSpouse\");\n+            checkListOfModelElementsForNulls(individual, \"familiesWhereSpouse\");\n+            for (FamilySpouse fs : individual.getFamiliesWhereSpouse()) {\n+                new FamilySpouseValidator(getValidator(), fs).validate();\n+        if (individual.getRestrictionNotice() != null) {\n+            mustBeInEnumIfSpecified(RestrictionNoticeType.class, individual, \"restrictionNotice\");\n+        }\n+        checkCitations(individual);\n+        checkLdsIndividualOrdinances();\n+        checkNotes(individual);\n+        checkUninitializedCollection(individual, \"aliases\");\n+        if (individual.getAliases() != null) {\n+            checkListOfModelElementsForDups(individual, \"aliases\");\n+            checkListOfModelElementsForNulls(individual, \"aliases\");\n+            checkStringList(individual, \"aliases\", false);\n+        checkUninitializedCollection(individual, \"associations\");\n+        if (individual.getAssociations() != null) {\n+            checkListOfModelElementsForDups(individual, \"associations\");\n+            checkListOfModelElementsForNulls(individual, \"associations\");\n+            for (Association a : individual.getAssociations()) {\n+                mustHaveValue(a, \"associatedEntityType\");\n+                checkAlternateXref(a, \"associatedEntityXref\");\n+    private void checkIndividualAttributes() {\n+        checkUninitializedCollection(individual, \"attributes\");\n+        if (individual.getAttributes() != null) {\n+            checkListOfModelElementsForDups(individual, \"attributes\");\n+            checkListOfModelElementsForNulls(individual, \"attributes\");\n+            for (IndividualAttribute a : individual.getAttributes()) {\n+                new IndividualAttributeValidator(getValidator(), a).validate();\n+    private void checkIndividualEvents() {\n+        checkUninitializedCollection(individual, \"events\");\n+        if (individual.getEvents() != null) {\n+            checkListOfModelElementsForDups(individual, \"events\");\n+            checkListOfModelElementsForNulls(individual, \"events\");\n+            for (IndividualEvent a : individual.getEvents()) {\n+                new EventValidator(getValidator(), a).validate();\n+    private void checkLdsIndividualOrdinances() {\n+        checkUninitializedCollection(individual, \"ldsIndividualOrdinances\");\n+        if (individual.getLdsIndividualOrdinances() != null) {\n+            checkListOfModelElementsForDups(individual, \"ldsIndividualOrdinances\");\n+            checkListOfModelElementsForNulls(individual, \"ldsIndividualOrdinances\");\n+            for (LdsIndividualOrdinance o : individual.getLdsIndividualOrdinances()) {\n+                new LdsIndividualOrdinanceValidator(getValidator(), o).validate();\n+        checkUninitializedCollection(individual, \"ancestorInterest\");\n+        if (individual.getAncestorInterest() != null) {\n+            for (Submitter submitter : individual.getAncestorInterest()) {\n+                new SubmitterValidator(getValidator(), submitter).validate();\n+        checkUninitializedCollection(individual, \"descendantInterest\");\n+        if (individual.getDescendantInterest() != null) {\n+            for (Submitter submitter : individual.getDescendantInterest()) {\n+                new SubmitterValidator(getValidator(), submitter).validate();\n+    private static final long serialVersionUID = -4147867708714711190L;\n+    private final LdsIndividualOrdinance o;\n+    public LdsIndividualOrdinanceValidator(Validator validator, LdsIndividualOrdinance o) {\n+        super(validator);\n+        this.o = o;\n+    }\n+    @Override\n+    protected void validate() {\n+        checkCitations(o);\n+        checkCustomFacts(o);\n+        checkNotes(o);\n+        mustHaveValue(o, \"type\");\n+        mustNotHaveValue(o, \"yNull\");\n+        mustHaveValueOrBeOmitted(o, \"date\");\n+        mustBeDateIfSpecified(o, \"date\");\n+        mustHaveValueOrBeOmitted(o, \"temple\");\n+        mustHaveValueOrBeOmitted(o, \"place\");\n+        mustHaveValueOrBeOmitted(o, \"status\");\n+        if (o.getStatus() != null) {\n+            mustHaveValue(o, \"date\");\n+        }\n+        if (o.getType() != null) {\n+            switch (o.getType()) {\n+                case BAPTISM:\n+                case CONFIRMATION:\n+                    mustBeInEnumIfSpecified(LdsBaptismDateStatus.class, o, \"status\");\n+                    break;\n+                case CHILD_SEALING:\n+                    mustBeInEnumIfSpecified(LdsChildSealingDateStatus.class, o, \"status\");\n+                    mustHaveValue(o, \"familyWhereChild\");\n+                    break;\n+                case ENDOWMENT:\n+                    mustBeInEnumIfSpecified(LdsEndowmentDateStatus.class, o, \"status\");\n+                    break;\n+                default:\n+                    break;\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = -7894442750246320800L;\n+    LdsSpouseSealingValidator(Validator validator, LdsSpouseSealing s) {\n+        super(validator);\n+        checkCitations(s);\n+        checkCustomFacts(s);\n+        new NoteStructureListValidator(getValidator(), s).validate();\n+        mustHaveValueOrBeOmitted(s, \"place\");\n+        mustBeInEnumIfSpecified(LdsSpouseSealingDateStatus.class, s, \"status\");\n+        if (s.getStatus() != null && isSpecified(s.getStatus().getValue())) {\n+            mustHaveValue(s, \"date\");\n+            mustBeDateIfSpecified(s, \"date\");\n+            mustNotHaveValue(s, \"date\");\n+        mustHaveValueOrBeOmitted(s, \"temple\");\n+    private static final long serialVersionUID = -4550089051329074667L;\n+    public MaleWivesFemaleHusbandsValidator(Validator validator) {\n+        super(validator);\n+    }\n+    @Override\n+    protected void validate() {\n+        for (Family f : getValidator().getGedcom().getFamilies().values()) {\n+            Individual w = (f.getWife() == null ? null : f.getWife().getIndividual());\n+            Individual h = (f.getHusband() == null ? null : f.getHusband().getIndividual());\n+            if (w != null && w.getSex() != null && \"M\".equals(w.getSex().getValue())) {\n+                newFinding(f, Severity.WARNING, ProblemCode.WIFE_IS_MALE, \"wife\");\n+            }\n+            if (h != null && h.getSex() != null && \"F\".equals(h.getSex().getValue())) {\n+                newFinding(f, Severity.WARNING, ProblemCode.HUSBAND_IS_FEMALE, \"husband\");\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = -7265936570396961027L;\n+    private static final long MILLIS_IN_SIXTEEN_YEARS = (long) (16 * 365.25 * 24 * 60 * 60 * 1000);\n+    private final DateParser dp = new DateParser();\n+    public MarriedAtYoungAgeValidator(Validator validator) {\n+        super(validator);\n+    }\n+    @Override\n+    protected void validate() {\n+        for (Family f : getValidator().getGedcom().getFamilies().values()) {\n+            if (f.getHusband() == null || f.getWife() == null || f.getEvents() == null || f.getEvents().isEmpty()) {\n+                continue;\n+            }\n+            FamilyEvent earliestMarriage = null;\n+            Date earliestMarriageDate = new Date();\n+            for (FamilyEvent e : f.getEvents()) {\n+                if (e.getType() == FamilyEventType.MARRIAGE && e.getDate() != null && e.getDate().getValue() != null) {\n+                    Date d = dp.parse(e.getDate().getValue());\n+                    if (d != null && d.before(earliestMarriageDate)) {\n+                        earliestMarriage = e;\n+                        earliestMarriageDate = d;\n+                    }\n+                }\n+            }\n+            if (earliestMarriage == null) {\n+                continue;\n+            }\n+            checkHusband(f, earliestMarriage, earliestMarriageDate);\n+            checkWife(f, earliestMarriage, earliestMarriageDate);\n+        }\n+    }\n+    private void checkHusband(Family f, FamilyEvent earliestMarriage, Date earliestMarriageDate) {\n+        Individual husband = (f.getHusband() == null ? null : f.getHusband().getIndividual());\n+        IndividualEvent husbandLatestBirth = getLatestEventOfType(husband, IndividualEventType.BIRTH);\n+        if (husbandLatestBirth == null) {\n+            return;\n+        }\n+        Date husbandLatestBirthDate = dp.parse(husbandLatestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+        if (husbandLatestBirthDate != null) {\n+            long hDiff = earliestMarriageDate.getTime() - husbandLatestBirthDate.getTime();\n+            if (hDiff <= MILLIS_IN_SIXTEEN_YEARS) {\n+                Finding finding = newFinding(earliestMarriage, Severity.WARNING, ProblemCode.HUSBAND_WAS_LESS_THAN_SIXTEEN, \"date\");\n+                finding.getRelatedItems(true).add(husband);\n+            }\n+        }\n+    }\n+    private void checkWife(Family f, FamilyEvent earliestMarriage, Date earliestMarriageDate) {\n+        Individual wife = (f.getWife() == null ? null : f.getWife().getIndividual());\n+        IndividualEvent wifeLatestBirth = getLatestEventOfType(wife, IndividualEventType.BIRTH);\n+        if (wifeLatestBirth == null) {\n+            return;\n+        }\n+        Date wifeLatestBirthDate = dp.parse(wifeLatestBirth.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+        if (wifeLatestBirthDate != null) {\n+            long wDiff = earliestMarriageDate.getTime() - wifeLatestBirthDate.getTime();\n+            if (wDiff <= MILLIS_IN_SIXTEEN_YEARS) {\n+                Finding finding = newFinding(earliestMarriage, Severity.WARNING, ProblemCode.WIFE_WAS_LESS_THAN_SIXTEEN, \"date\");\n+                finding.getRelatedItems(true).add(wife);\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = -4969512119892429424L;\n+    private StringWithCustomFacts gedcomVersion;\n+    MultimediaValidator(Validator validator, Multimedia multimedia) {\n+        super(validator);\n+        if (validator == null) {\n+            throw new ValidationException(\"Validator passed in to MultimediaValidator constructor was null\");\n+        if (validator.getGedcom() == null || validator.getGedcom().getHeader() == null || validator.getGedcom().getHeader()\n+                .getGedcomVersion() == null || validator.getGedcom().getHeader().getGedcomVersion().getVersionNumber() == null) {\n+            Finding vf = newFinding(mm, Severity.INFO, ProblemCode.UNABLE_TO_DETERMINE_GEDCOM_VERSION, null);\n+            if (mayRepair(vf)) {\n+                Multimedia before = new Multimedia(mm);\n+                gedcomVersion = new StringWithCustomFacts(SupportedVersion.V5_5_1.toString());\n+                vf.addRepair(new AutoRepair(before, new Multimedia(mm)));\n+            gedcomVersion = validator.getGedcom().getHeader().getGedcomVersion().getVersionNumber();\n+    protected boolean v551() {\n+        return SupportedVersion.V5_5_1.toString().equals(gedcomVersion.getValue());\n+    }\n+        mustHaveValue(fr, \"format\");\n+        mustHaveValueOrBeOmitted(fr, \"mediaType\");\n+        mustHaveValueOrBeOmitted(fr, \"title\");\n+        mustHaveValue(fr, \"referenceToFile\");\n+        checkUninitializedCollection(mm, \"userReferences\");\n+        if (mm.getUserReferences() == null) {\n+            return;\n+        List<UserReference> userReferences = mm.getUserReferences();\n+        checkListOfModelElementsForDups(mm, \"userReferences\");\n+        checkListOfModelElementsForNulls(mm, \"userReferences\");\n+        for (UserReference u : userReferences) {\n+            mustHaveValue(u, \"referenceNum\");\n+            checkCustomFacts(u);\n+        xrefMustBePresentAndWellFormed(mm);\n+        if (getValidator().getGedcom().getMultimedia().get(mm.getXref()) != mm) {\n+            newFinding(mm, Severity.ERROR, ProblemCode.CROSS_REFERENCE_NOT_FOUND, \"xref\");\n+        mustHaveValue(mm, \"blob\");\n+        mustHaveValue(mm, \"embeddedMediaFormat\");\n+            Finding vf = newFinding(mm, Severity.ERROR, ProblemCode.NOT_ALLOWED_IN_GEDCOM_55, \"\");\n+            if (mayRepair(vf)) {\n+                Multimedia before = new Multimedia(mm);\n+                before.getCitations().clear();\n+                vf.addRepair(new AutoRepair(before, new Multimedia(mm)));\n+        checkUninitializedCollection(mm, \"fileReferences\");\n+            checkListOfModelElementsForDups(mm, \"fileReferences\");\n+            checkListOfModelElementsForNulls(mm, \"fileReferences\");\n+            Finding vf = newFinding(mm, Severity.ERROR, ProblemCode.NOT_ALLOWED_IN_GEDCOM_551, \"blob\");\n+            if (mayRepair(vf)) {\n+                Multimedia before = new Multimedia(mm);\n+                mm.getBlob(true).clear();\n+                vf.addRepair(new AutoRepair(before, new Multimedia(mm)));\n+            Finding vf = newFinding(mm, Severity.ERROR, ProblemCode.NOT_ALLOWED_IN_GEDCOM_551, \"embeddedMediaFormat\");\n+            if (mayRepair(vf)) {\n+                Multimedia before = new Multimedia(mm);\n+                mm.setEmbeddedMediaFormat((String) null);\n+                vf.addRepair(new AutoRepair(before, new Multimedia(mm)));\n+        checkCitations(mm);\n+        mustHaveValueOrBeOmitted(mm, \"recIdNumber\");\n+        checkCitations(mm);\n+        if (mm.getContinuedObject() != null && mm.getContinuedObject().getMultimedia() != null) {\n+            new MultimediaValidator(getValidator(), mm.getContinuedObject().getMultimedia()).validate();\n+            checkCustomFacts(mm.getContinuedObject());\n+        checkUninitializedCollection(mm, \"blob\");\n+        new NoteStructureListValidator(getValidator(), mm).validate();\n+    private static final Date FAR_IN_THE_FUTURE = new Date(10000L * 365 * 24 * 60 * 60 * 1000);\n+    private static final Date FAR_IN_THE_PAST = new Date(-10000L * 365 * 24 * 60 * 60 * 1000);\n+    private static final long serialVersionUID = -3991408212675640583L;\n+    public MultipleChildrenWithSameGivenNameValidator(Validator validator) {\n+        super(validator);\n+    }\n+    @Override\n+    protected void validate() {\n+        for (Family f : getValidator().getGedcom().getFamilies().values()) {\n+            if (f.getChildren() == null) {\n+                continue;\n+            }\n+            Map<String, Set<Individual>> kidsByFirstName = getKidsByGivenName(f);\n+            for (Entry<String, Set<Individual>> e : kidsByFirstName.entrySet()) {\n+                if (e.getValue().size() > 1 && isSpecified(e.getKey())) {\n+                    checkOverlappingLifespans(e.getValue(), f);\n+                }\n+            }\n+        }\n+    }\n+    private void checkOverlappingLifespans(Set<Individual> kidsWithSameGivenName, Family f) {\n+        List<Individual> peopleWithSameGivenName = new ArrayList<>(kidsWithSameGivenName);\n+        for (int m = 0; m < peopleWithSameGivenName.size() - 1; m++) {\n+            Individual i1 = peopleWithSameGivenName.get(m);\n+            Date i1birth = getEarliestBirthDate(i1);\n+            Date i1death = getLatestDeathDate(i1);\n+            for (int n = m + 1; n < peopleWithSameGivenName.size(); n++) {\n+                Individual i2 = peopleWithSameGivenName.get(n);\n+                Date i2birth = getEarliestBirthDate(i2);\n+                Date i2death = getLatestDeathDate(i2);\n+                boolean i1LifeBeforeI2Born = i1birth.before(i2birth) && i1death.before(i2birth);\n+                boolean i2LifeBeforeI1Born = i2birth.before(i1birth) && i2death.before(i1birth);\n+                boolean i1LifeAfterI2Died = i1birth.after(i2death) && i1death.after(i2death);\n+                boolean i2LifeAfterI1Died = i2birth.after(i1death) && i2death.after(i1death);\n+                if (i1LifeBeforeI2Born || i2LifeBeforeI1Born || i1LifeAfterI2Died || i2LifeAfterI1Died) {\n+                    continue;\n+                }\n+                Finding newFinding = newFinding(f, Severity.WARNING, ProblemCode.MULTIPLE_CHILDREN_WITH_SAME_GIVEN_NAME,\n+                        \"children\");\n+                newFinding.getRelatedItems(true).add(i1);\n+                newFinding.getRelatedItems(true).add(i2);\n+            }\n+        }\n+    }\n+    private Date getEarliestBirthDate(Individual ind) {\n+        IndividualEvent e = getEarliestEventOfType(ind, IndividualEventType.BIRTH);\n+        if (e == null || e.getDate() == null || e.getDate().getValue() == null) {\n+            return FAR_IN_THE_PAST;\n+        }\n+        DateParser dp = new DateParser();\n+        Date d = dp.parse(e.getDate().getValue(), ImpreciseDatePreference.FAVOR_EARLIEST);\n+        if (d == null) {\n+            return FAR_IN_THE_PAST;\n+        }\n+        return d;\n+    }\n+    private Map<String, Set<Individual>> getKidsByGivenName(Family f) {\n+        Map<String, Set<Individual>> result = new HashMap<>();\n+        for (IndividualReference kidRef : f.getChildren()) {\n+            if (kidRef == null) {\n+                continue;\n+            }\n+            Individual kid = kidRef.getIndividual();\n+            for (PersonalName pn : kid.getNames(true)) {\n+                String gn = null;\n+                if (pn.getGivenName() != null && isSpecified(pn.getGivenName().getValue())) {\n+                    gn = pn.getGivenName().getValue();\n+                } else if (isSpecified(pn.getBasic())) {\n+                    gn = pn.getBasic().trim();\n+                    int firstSlash = gn.indexOf('/');\n+                    if (firstSlash > 0) {\n+                        gn = gn.substring(0, firstSlash).trim();\n+                    } else {\n+                        gn = null;\n+                    }\n+                }\n+                if (isSpecified(gn)) {\n+                    Set<Individual> kidsWithThisFirstName = result.get(gn);\n+                    if (kidsWithThisFirstName == null) {\n+                        kidsWithThisFirstName = new HashSet<>();\n+                        result.put(gn, kidsWithThisFirstName);\n+                    }\n+                    kidsWithThisFirstName.add(kid);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+    private Date getLatestDeathDate(Individual ind) {\n+        IndividualEvent e = getLatestEventOfType(ind, IndividualEventType.DEATH);\n+        if (e == null || e.getDate() == null || e.getDate().getValue() == null) {\n+            e = getLatestEventOfType(ind, IndividualEventType.BURIAL);\n+        }\n+        if (e == null || e.getDate() == null || e.getDate().getValue() == null) {\n+            return FAR_IN_THE_FUTURE;\n+        }\n+        DateParser dp = new DateParser();\n+        Date d = dp.parse(e.getDate().getValue(), ImpreciseDatePreference.FAVOR_LATEST);\n+        if (d == null) {\n+            return FAR_IN_THE_FUTURE;\n+        }\n+        return d;\n+    }\n+    private static final long serialVersionUID = -7681092157410982602L;\n+    NameVariationValidator(Validator validator, AbstractNameVariation nv) {\n+        super(validator);\n+        checkCustomFacts(nv);\n+        mustHaveValue(nv, \"variation\");\n+        mustHaveValueOrBeOmitted(nv, \"variationType\");\n+    private static final long serialVersionUID = 7426278912021230776L;\n+    private final NoteRecord noteRecord;\n+    NoteRecordValidator(Validator validator, NoteRecord noteRecord) {\n+        super(validator);\n+        this.noteRecord = noteRecord;\n+    }\n+    @Override\n+    protected void validate() {\n+        checkUninitializedCollection(noteRecord, \"lines\");\n+        if (noteRecord.getXref() == null || !noteRecord.getXref().matches(\"^\\\\@\\\\w+\\\\@$\")) {\n+            newFinding(noteRecord, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"xref\");\n+        }\n+        if (noteRecord.getXref() == null && (noteRecord.getLines() == null || noteRecord.getLines().isEmpty())) {\n+            newFinding(noteRecord, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"lines\");\n+        }\n+        mustHaveValueOrBeOmitted(noteRecord, \"recIdNumber\");\n+        checkCitations(noteRecord);\n+        checkUserReferences(noteRecord.getUserReferences(), noteRecord);\n+        checkChangeDate(noteRecord.getChangeDate(), noteRecord);\n+    }\n+    private static final long serialVersionUID = -7836612973656530761L;\n+    private List<NoteStructure> notes;\n+    private final ModelElement parentObject;\n+    @SuppressWarnings(\"unchecked\")\n+    NoteStructureListValidator(Validator validator, ModelElement parentObject) {\n+        super(validator);\n+        this.parentObject = parentObject;\n+        try {\n+            notes = (List<NoteStructure>) get(parentObject, \"noteStructures\");\n+        } catch (ClassCastException e) {\n+            throw new ValidationException(\"Field notestructures on object of type \" + parentObject.getClass().getName()\n+                    + \"did not return a List<Note>\", e);\n+        }\n+    }\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void validate() {\n+        checkUninitializedCollection(parentObject, \"noteStructures\");\n+        try {\n+            notes = (List<NoteStructure>) get(parentObject, \"noteStructures\");\n+        } catch (ClassCastException e) {\n+            throw new ValidationException(\"Field noteStructures on object of type \" + parentObject.getClass().getName()\n+                    + \"did not return a List<NoteStructure\", e);\n+        }\n+        if (notes == null) {\n+            return;\n+        }\n+        DuplicateHandler<NoteStructure> dhn = new DuplicateHandler<>(notes);\n+        if (dhn.count() > 0) {\n+            Finding vf = newFinding(parentObject, Severity.WARNING, ProblemCode.DUPLICATE_VALUE, \"noteStructures\");\n+            if (mayRepair(vf)) {\n+                ModelElement before = makeCopy(parentObject);\n+                dhn.remove();\n+                vf.addRepair(new AutoRepair(before, makeCopy(parentObject)));\n+            }\n+        }\n+        checkForNullEntries(parentObject, \"noteStructures\");\n+        for (NoteStructure n : notes) {\n+            new NoteStructureValidator(getValidator(), n).validate();\n+        }\n+    }\n+    private static final long serialVersionUID = 7426278912021230776L;\n+    private final NoteStructure noteStructure;\n+    NoteStructureValidator(Validator validator, NoteStructure noteStructure) {\n+        super(validator);\n+        this.noteStructure = noteStructure;\n+    }\n+    @Override\n+    protected void validate() {\n+        checkUninitializedCollection(noteStructure, \"lines\");\n+        if (noteStructure.getNoteReference() == null && (noteStructure.getLines() == null || noteStructure.getLines().isEmpty())) {\n+            newFinding(noteStructure, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"lines\");\n+        }\n+    }\n+    NullHandler(List<T> items) {\n+    public int remove() {\n+        return process(true);\n+    }\n+    int count() {\n+        return process(false);\n+    }\n+    private int process(boolean remove) {\n+            if (item == null) {\n+                if (remove) {\n+                    items.remove(i);\n+                } else {\n+                    i++;\n+                }\n+    private static final long serialVersionUID = -2718066344479251436L;\n+    PersonalNameValidator(Validator validator, PersonalName pn) {\n+        super(validator);\n+        mustHaveValue(pn, \"basic\");\n+        checkCitations(pn);\n+        checkCitations(pn);\n+        checkCustomFacts(pn);\n+        mustHaveValueOrBeOmitted(pn, \"givenName\");\n+        mustHaveValueOrBeOmitted(pn, \"nickname\");\n+        mustHaveValueOrBeOmitted(pn, \"prefix\");\n+        mustHaveValueOrBeOmitted(pn, \"suffix\");\n+        mustHaveValueOrBeOmitted(pn, \"surname\");\n+        mustHaveValueOrBeOmitted(pn, \"surnamePrefix\");\n+        if (!getValidator().isV551()) {\n+            mustNotHaveValue(pn, \"type\");\n+            mustHaveValueOrBeOmitted(pn, \"type\");\n+        new NoteStructureListValidator(getValidator(), pn).validate();\n+        checkPhoneticVariations();\n+        checkRomanizedVariations();\n+    }\n+    private void checkPhoneticVariations() {\n+        checkUninitializedCollection(pn, \"phonetic\");\n+        if (pn.getPhonetic() == null) {\n+            return;\n+        }\n+        if (!getValidator().isV551()) {\n+            mustNotHaveValue(pn, \"phonetic\");\n+            return;\n+        }\n+        checkListOfModelElementsForDups(pn, \"phonetic\");\n+        checkListOfModelElementsForNulls(pn, \"phonetic\");\n+        for (AbstractNameVariation nv : pn.getPhonetic()) {\n+            new NameVariationValidator(getValidator(), nv).validate();\n+    private void checkRomanizedVariations() {\n+        checkUninitializedCollection(pn, \"romanized\");\n+        if (pn.getRomanized() == null) {\n+            return;\n+        }\n+        if (!getValidator().isV551()) {\n+            mustNotHaveValue(pn, \"romanized\");\n+            return;\n+        }\n+        checkListOfModelElementsForDups(pn, \"romanized\");\n+        checkListOfModelElementsForNulls(pn, \"romanized\");\n+        for (AbstractNameVariation nv : pn.getRomanized()) {\n+            new NameVariationValidator(getValidator(), nv).validate();\n+        }\n+    }\n+    private static final long serialVersionUID = -1410145014070374415L;\n+    PersonalNameVariationValidator(Validator validator, PersonalNameVariation pnv) {\n+        super(validator, pnv);\n+        checkCitations(pnv);\n+        mustHaveValueOrBeOmitted(pnv, \"givenName\");\n+        mustHaveValueOrBeOmitted(pnv, \"nickname\");\n+        mustHaveValueOrBeOmitted(pnv, \"prefix\");\n+        mustHaveValueOrBeOmitted(pnv, \"suffix\");\n+        mustHaveValueOrBeOmitted(pnv, \"surname\");\n+        mustHaveValueOrBeOmitted(pnv, \"surnamePrefix\");\n+        new NoteStructureListValidator(getValidator(), pnv).validate();\n+    private static final long serialVersionUID = 3340140076536125787L;\n+    PlaceValidator(Validator validator, Place place) {\n+        super(validator);\n+        checkCitations(place);\n+        checkCustomFacts(place);\n+        mustHaveValueOrBeOmitted(place, \"latitude\");\n+        mustHaveValueOrBeOmitted(place, \"longitude\");\n+        new NoteStructureListValidator(getValidator(), place).validate();\n+        mustHaveValueOrBeOmitted(place, \"placeFormat\");\n+            newFinding(place, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"placeName\");\n+        checkPhoneticVariations();\n+        checkRomanizedVariations();\n+    }\n+    private void checkPhoneticVariations() {\n+        checkUninitializedCollection(place, \"phonetic\");\n+        if (place.getPhonetic() == null) {\n+            return;\n+        checkListOfModelElementsForDups(place, \"phonetic\");\n+        checkListOfModelElementsForNulls(place, \"phonetic\");\n+        for (AbstractNameVariation nv : place.getPhonetic()) {\n+            new NameVariationValidator(getValidator(), nv).validate();\n+    }\n+    private void checkRomanizedVariations() {\n+        checkUninitializedCollection(place, \"romanized\");\n+        if (place.getRomanized() == null) {\n+            return;\n+        }\n+        checkListOfModelElementsForDups(place, \"romanized\");\n+        checkListOfModelElementsForNulls(place, \"romanized\");\n+        for (AbstractNameVariation nv : place.getRomanized()) {\n+            new NameVariationValidator(getValidator(), nv).validate();\n+    CROSS_REFERENCE_NOT_FOUND(0, \"Cross-referenced item could not be found in the GEDCOM\"),\n+    DUPLICATE_VALUE(1, \"Value is a duplicate\"),\n+    ILLEGAL_VALUE(2, \"Value supplied is not allowed\"),\n+    LIST_WITH_NULL_VALUE(3, \"List contains null value\"),\n+    MISSING_REQUIRED_VALUE(4, \"Required value is missing\"),\n+    NOT_ALLOWED_IN_GEDCOM_55(5, \"Not allowed in GEDCOM 5.5, only in GEDCOM 5.5.1\"),\n+    NOT_ALLOWED_IN_GEDCOM_551(6, \"Not allowed in GEDCOM 5.5.1, only in GEDCOM 5.5\"),\n+    TOO_MANY_VALUES(7, \"Number of items exceeds maximum\"),\n+    UNINITIALIZED_COLLECTION(8, \"Collection is uninitialized\"),\n+    XREF_INVALID(9, \"Xref is malformed - should begin and end with @-sign, and have at least one character in between\"),\n+    UNABLE_TO_DETERMINE_GEDCOM_VERSION(10, \"Unable to determine GEDCOM version - assuming v5.5.1\"),\n+    NOT_VALID_EMAIL_ADDRESS(11, \"Invalid email address\"),\n+    NOT_VALID_WWW_URL(12, \"Invalid WWW URL\"),\n+    INVALID_DATE(13, \"Invalid date\"),\n+    SURNAMES_DONT_MATCH_PARENTS(14, \"Child has surname(s) that do not match those of either parent\"),\n+    MOTHER_MAY_NOT_HAVE_BEEN_BORN_YET(15, \"Mother may not have been born yet\"),\n+    MOTHER_WAS_LESS_THAN_SIXTEEN(16, \"Mother may not have been 16 yet at the time\"),\n+    FATHER_MAY_NOT_HAVE_BEEN_BORN_YET(17, \"Father may not have been born yet\"),\n+    FATHER_WAS_LESS_THAN_SIXTEEN(18, \"Mother may not have been 16 yet at the time\"),\n+    MOTHER_MAY_HAVE_BEEN_DECEASED(19, \"Mother may have been deceased at the time\"),\n+    FATHER_MAY_HAVE_BEEN_DECEASED(20, \"Father may have been deceased at the time\"),\n+    MOTHER_WAS_SIXTY_OR_OLDER(21, \"Mother was sixty or older at the time\"),\n+    FATHER_WAS_SIXTY_OR_OLDER(22, \"Father was sixty or older at the time\"),\n+    HUSBAND_WAS_LESS_THAN_SIXTEEN(23, \"Husband less than sixteen years old at the time\"),\n+    WIFE_WAS_LESS_THAN_SIXTEEN(24, \"Wife less than sixteen years old at the time\"),\n+    DATE_IN_FUTURE(25, \"Date is in the future\"),\n+    HUSBAND_IS_FEMALE(26, \"Husband is female\"),\n+    WIFE_IS_MALE(27, \"Wife is male\"),\n+    COUPLE_MORE_THAN_FIFTEEN_YEARS_AGE_DIFFERENCE(28, \"Couple has more than 15 years age difference\"),\n+    DESCENDANT_BORN_BEFORE_ANCESTOR(29, \"Descendant born before ancestor\"),\n+    MULTIPLE_CHILDREN_WITH_SAME_GIVEN_NAME(30, \"Family has multiple children with the same given name\"),\n+    CIRCULAR_ANCESTRAL_RELATIONSHIP(31, \"Circular ancestral relationship detected\"),\n+    SIMULTANEOUS_BIRTHS_IN_MULTIPLE_LOCATIONS(32, \"Simultaneous births in multiple locations\"),\n+    MORE_THAN_THREE_CHILDREN_BORN_WITHIN_48_HOURS(33, \"More than three children born within 48 hours\");\n+    static {\n+        for (int i = 0; i < values().length; i++) {\n+            if (getForCode(i) == null) {\n+                throw new IllegalStateException(\"No value found for code number \" + i);\n+            }\n+        }\n+    }\n+    public static ProblemCode getForCode(int n) {\n+        for (ProblemCode pc : values()) {\n+            if (pc.code == n) {\n+                return pc;\n+            }\n+        }\n+        return null;\n+    }\n+    private final int code;\n+    private final String description;\n+    ProblemCode(int code, String description) {\n+        this.code = code;\n+        this.description = description;\n+    }\n+    public int getCode() {\n+        return code;\n+    }\n+    public String getDescription() {\n+        return description;\n+    }\n+    @Override\n+    public String toString() {\n+        return code + \": \" + description;\n+    }\n+    private static final long serialVersionUID = -109510055319633255L;\n+    public QuadrupletsAndMoreValidator(Validator validator) {\n+        super(validator);\n+    }\n+    @Override\n+    protected void validate() {\n+        for (Family f : getValidator().getGedcom().getFamilies().values()) {\n+            if (f.getChildren() == null || f.getChildren().size() < 4) {\n+                continue;\n+            }\n+            Map<Date, Set<Individual>> births = new HashMap<>();\n+            for (IndividualReference iRef : f.getChildren()) {\n+                if (iRef == null) {\n+                    continue;\n+                }\n+                Individual i = iRef.getIndividual();\n+                Date birthDate = getEarliestBirthDate(i);\n+                if (birthDate == null) {\n+                    continue;\n+                }\n+                boolean added = false;\n+                for (Entry<Date, Set<Individual>> birth : births.entrySet()) {\n+                    Date d = birth.getKey();\n+                    if (Math.abs(d.getTime() - birthDate.getTime()) < 48L * 60 * 60 * 1000) {\n+                        birth.getValue().add(i);\n+                        added = true;\n+                    }\n+                }\n+                if (!added) {\n+                    Set<Individual> birthsOnDate = new HashSet<>();\n+                    birthsOnDate.add(i);\n+                    births.put(birthDate, birthsOnDate);\n+                }\n+            }\n+            for (Entry<Date, Set<Individual>> e : births.entrySet()) {\n+                if (e.getValue().size() >= 4) {\n+                    newFinding(f, Severity.WARNING, ProblemCode.MORE_THAN_THREE_CHILDREN_BORN_WITHIN_48_HOURS, \"children\")\n+                            .getRelatedItems(true).addAll(e.getValue());\n+                }\n+            }\n+        }\n+    }\n+    private Date getEarliestBirthDate(Individual ind) {\n+        IndividualEvent e = getEarliestEventOfType(ind, IndividualEventType.BIRTH);\n+        if (e == null || e.getDate() == null || e.getDate().getValue() == null) {\n+            return null;\n+        }\n+        DateParser dp = new DateParser();\n+        return dp.parse(e.getDate().getValue(), ImpreciseDatePreference.FAVOR_EARLIEST);\n+    }\n+    private static final long serialVersionUID = 7390239858953711209L;\n+    RepositoryValidator(Validator validator, Repository repository) {\n+        super(validator);\n+        xrefMustBePresentAndWellFormed(repository);\n+        mustHaveValueOrBeOmitted(repository, \"name\");\n+        checkStringList(repository, \"emails\", false);\n+        mustHaveValueOrBeOmitted(repository, \"recIdNumber\");\n+        checkStringList(repository, \"phoneNumbers\", false);\n+        new NoteStructureListValidator(getValidator(), repository).validate();\n+            new AddressValidator(getValidator(), a).validate();\n+    private static class Birth {\n+        private Individual person;\n+        private IndividualEvent birthEvent;\n+        public IndividualEvent getBirthEvent() {\n+            return birthEvent;\n+        }\n+        public Individual getPerson() {\n+            return person;\n+        }\n+        public void setBirthEvent(IndividualEvent birthEvent) {\n+            this.birthEvent = birthEvent;\n+        }\n+        public void setPerson(Individual person) {\n+            this.person = person;\n+        }\n+    }\n+    private static final long serialVersionUID = 6667370628936043626L;\n+    public SimultaneousBirthsInMultipleLocationsValidator(Validator validator) {\n+        super(validator);\n+    }\n+    protected Map<Date, Set<Birth>> groupChildrenByBirthDate(Family f) {\n+        Map<Date, Set<Birth>> birthsByDate = new HashMap<>();\n+        DateParser dp = new DateParser();\n+        for (IndividualReference iRef : f.getChildren()) {\n+            if (iRef == null) {\n+                continue;\n+            }\n+            Individual i = iRef.getIndividual();\n+            List<IndividualEvent> birthEvents = i.getEventsOfType(IndividualEventType.BIRTH);\n+            for (IndividualEvent birthEvent : birthEvents) {\n+                if (birthEvent.getDate() == null) {\n+                    continue;\n+                }\n+                Date birthDate = dp.parse(birthEvent.getDate().getValue());\n+                if (birthDate == null) {\n+                    continue;\n+                }\n+                boolean added = false;\n+                for (Entry<Date, Set<Birth>> birthByDate : birthsByDate.entrySet()) {\n+                    Date bd = birthByDate.getKey();\n+                    if (Math.abs(bd.getTime() - birthDate.getTime()) < 48L * 60 * 60 * 1000) {\n+                        Birth b = new Birth();\n+                        b.setBirthEvent(birthEvent);\n+                        b.setPerson(i);\n+                        birthByDate.getValue().add(b);\n+                        added = true;\n+                    }\n+                }\n+                if (!added) {\n+                    Set<Birth> birthsOnDate = new HashSet<>();\n+                    Birth b = new Birth();\n+                    b.setBirthEvent(birthEvent);\n+                    b.setPerson(i);\n+                    birthsOnDate.add(b);\n+                    birthsByDate.put(birthDate, birthsOnDate);\n+                }\n+            }\n+        }\n+        return birthsByDate;\n+    }\n+    @Override\n+    protected void validate() {\n+        for (Family f : getValidator().getGedcom().getFamilies().values()) {\n+            if (f.getChildren() == null || f.getChildren().size() < 2) {\n+                continue;\n+            }\n+            for (Entry<Date, Set<Birth>> e : groupChildrenByBirthDate(f).entrySet()) {\n+                Set<Birth> birthsOnDate = e.getValue();\n+                Set<Place> places = new HashSet<>();\n+                Set<Individual> kids = new HashSet<>();\n+                for (Birth b : birthsOnDate) {\n+                    places.add(b.getBirthEvent().getPlace());\n+                    kids.add(b.getPerson());\n+                }\n+                if (places.size() > 1) {\n+                    Finding vf = newFinding(f, Severity.WARNING, ProblemCode.SIMULTANEOUS_BIRTHS_IN_MULTIPLE_LOCATIONS, \"children\");\n+                    vf.getRelatedItems(true).addAll(kids);\n+                }\n+            }\n+        }\n+    }\n+    private static final long serialVersionUID = -1329075355558483196L;\n+    SourceValidator(Validator validator, Source source) {\n+        super(validator);\n+        xrefMustBePresentAndWellFormed(source);\n+            new NoteStructureListValidator(getValidator(), sd).validate();\n+            mustHaveValueOrBeOmitted(sd, \"respAgency\");\n+                Finding vf = newFinding(sd, Severity.INFO, ProblemCode.UNINITIALIZED_COLLECTION, \"eventsRecorded\");\n+                initializeCollectionIfAllowed(vf);\n+                checkListOfModelElementsForDups(sd, \"eventsRecorded\");\n+                checkListOfModelElementsForNulls(sd, \"eventsRecorded\");\n+                    mustHaveValueOrBeOmitted(er, \"datePeriod\");\n+                    mustHaveValueOrBeOmitted(er, \"eventType\");\n+                    mustHaveValueOrBeOmitted(er, \"jurisdiction\");\n+        checkUninitializedCollection(source, \"multimedia\");\n+        if (source.getMultimedia() != null) {\n+            checkListOfModelElementsForDups(source, \"multimedia\");\n+            checkListOfModelElementsForNulls(source, \"multimedia\");\n+            for (MultimediaReference mRef : source.getMultimedia()) {\n+                if (mRef == null) {\n+                    continue;\n+                new MultimediaValidator(getValidator(), mRef.getMultimedia()).validate();\n+        new NoteStructureListValidator(getValidator(), source).validate();\n+        checkStringList(source, \"originatorsAuthors\", false);\n+        checkStringList(source, \"publicationFacts\", false);\n+        mustHaveValueOrBeOmitted(source, \"recIdNumber\");\n+        checkStringList(source, \"sourceText\", true);\n+        mustHaveValueOrBeOmitted(source, \"sourceFiledBy\");\n+        checkStringList(source, \"title\", true);\n+            new NoteStructureListValidator(getValidator(), c).validate();\n+            mustHaveValue(c, \"repositoryXref\");\n+        checkUninitializedCollection(citation, \"callNumbers\");\n+        if (citation.getCallNumbers() != null) {\n+            checkListOfModelElementsForDups(citation, \"callNumbers\");\n+            checkListOfModelElementsForNulls(citation, \"callNumbers\");\n+            for (SourceCallNumber scn : citation.getCallNumbers()) {\n+                mustHaveValueOrBeOmitted(scn, \"callNumber\");\n+                if (scn.getCallNumber() == null) {\n+                    if (scn.getMediaType() != null) {\n+                        newFinding(scn, Severity.ERROR, ProblemCode.ILLEGAL_VALUE, \"mediaType\");\n+                } else {\n+                    mustHaveValueOrBeOmitted(scn, \"mediaType\");\n+    private static final long serialVersionUID = -1499277826314233624L;\n+    private final Submission submission;\n+    public SubmissionValidator(Validator validator, Submission submission) {\n+        super(validator);\n+        this.submission = submission;\n+    }\n+    @Override\n+    protected void validate() {\n+        xrefMustBePresentAndWellFormed(submission);\n+        mustHaveValueOrBeOmitted(submission, \"ancestorsCount\");\n+        mustHaveValueOrBeOmitted(submission, \"descendantsCount\");\n+        mustHaveValueOrBeOmitted(submission, \"nameOfFamilyFile\");\n+        mustHaveValueOrBeOmitted(submission, \"ordinanceProcessFlag\");\n+        if (submission.getOrdinanceProcessFlag() != null && submission.getOrdinanceProcessFlag().getValue() != null && !\"yes\"\n+                .equals(submission.getOrdinanceProcessFlag().getValue()) && !\"no\".equals(submission.getOrdinanceProcessFlag()\n+                        .getValue())) {\n+            newFinding(submission, Severity.ERROR, ProblemCode.ILLEGAL_VALUE, \"ordinanceProcessFlag\");\n+        }\n+        mustHaveValueOrBeOmitted(submission, \"recIdNumber\");\n+        mustHaveValueOrBeOmitted(submission, \"templeCode\");\n+    }\n+    private static final long serialVersionUID = 3930055974247055871L;\n+    SubmitterValidator(Validator validator, Submitter submitter) {\n+        super(validator);\n+        xrefMustBePresentAndWellFormed(submitter);\n+        mustHaveValue(submitter, \"name\");\n+        mustHaveValueOrBeOmitted(submitter, \"recIdNumber\");\n+        mustHaveValueOrBeOmitted(submitter, \"regFileNumber\");\n+            new AddressValidator(getValidator(), submitter.getAddress()).validate();\n+        new NoteStructureListValidator(getValidator(), submitter).validate();\n+        checkUninitializedCollection(submitter, \"languagePref\");\n+        List<StringWithCustomFacts> languagePref = submitter.getLanguagePref();\n+        if (languagePref == null) {\n+            return;\n+        DuplicateHandler<StringWithCustomFacts> dh = new DuplicateHandler<>(languagePref);\n+        int dups = dh.count();\n+        if (dups > 0) {\n+            Finding finding = newFinding(submitter, Severity.ERROR, ProblemCode.DUPLICATE_VALUE, \"languagePref\");\n+            if (mayRepair(finding)) {\n+                Submitter before = new Submitter(submitter);\n+                dh.remove();\n+                finding.addRepair(new AutoRepair(before, new Submitter(submitter)));\n+        if (languagePref.size() > 3) {\n+            newFinding(submitter, Severity.ERROR, ProblemCode.TOO_MANY_VALUES, \"languagePref\");\n+        }\n+        for (StringWithCustomFacts s : languagePref) {\n+            mustBeInEnumIfSpecified(LanguageID.class, s, \"value\");\n+        }\n+    private static final long serialVersionUID = 7657208202992645360L;\n+    private final List<Finding> allFindings = new ArrayList<>();\n+    private final Map<ModelElement, List<Finding>> findingsByObject = new HashMap<>();\n+    public void add(Finding vf) {\n+        allFindings.add(vf);\n+        List<Finding> list = findingsByObject.get(vf.getItemOfConcern());\n+        if (list == null) {\n+            list = new ArrayList<>();\n+            findingsByObject.put(vf.getItemOfConcern(), list);\n+        }\n+        list.add(vf);\n+    }\n+    public void clear() {\n+        allFindings.clear();\n+        findingsByObject.clear();\n+    }\n+    public List<Finding> getAllFindings() {\n+        return allFindings;\n+    }\n+    public List<Finding> getByCode(int problemCode) {\n+        List<Finding> result = new ArrayList<>();\n+        for (Finding vf : allFindings) {\n+            if (vf.getProblemCode() == problemCode) {\n+                result.add(vf);\n+            }\n+        }\n+        return result;\n+    }\n+    public List<Finding> getByCode(ProblemCode problemCode) {\n+        if (problemCode == null) {\n+            throw new IllegalArgumentException(\"problemCode is a required argument\");\n+        }\n+        return getByCode(problemCode.getCode());\n+    }\n+    public List<Finding> getBySeverity(Severity s) {\n+        if (s == null) {\n+            throw new IllegalArgumentException(\"Severity is a required argument\");\n+        }\n+        List<Finding> result = new ArrayList<>();\n+        for (Finding vf : allFindings) {\n+            if (vf.getSeverity() == s) {\n+                result.add(vf);\n+            }\n+        }\n+        return result;\n+    }\n+    public List<Finding> getFindingsForObject(ModelElement modelElement) {\n+        List<Finding> result = findingsByObject.get(modelElement);\n+        if (result == null) {\n+            result = new ArrayList<>(0);\n+        }\n+        return result;\n+    }\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder(25);\n+        builder.append(\"ValidationResults [\");\n+        if (allFindings != null) {\n+            builder.append(\"allFindings=\");\n+            builder.append(allFindings);\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    public static class Finding implements Serializable {\n+        private static final long serialVersionUID = 2148459753130687833L;\n+        private String fieldNameOfConcern;\n+        private ModelElement itemOfConcern;\n+        private int problemCode;\n+        private String problemDescription;\n+        private List<ModelElement> relatedItems = Options.isCollectionInitializationEnabled() ? new ArrayList<ModelElement>(0)\n+                : null;\n+        private List<AutoRepair> repairs = Options.isCollectionInitializationEnabled() ? new ArrayList<AutoRepair>(0) : null;\n+        private Severity severity;\n+        private final String stackTrace;\n+        Finding() {\n+            Writer result = new StringWriter();\n+            PrintWriter printWriter = new PrintWriter(result);\n+            new ValidationException().printStackTrace(printWriter);\n+            stackTrace = result.toString();\n+        }\n+        public void addRepair(AutoRepair autoRepair) {\n+            getRepairs(true).add(autoRepair);\n+        }\n+        public String getFieldNameOfConcern() {\n+            return fieldNameOfConcern;\n+        }\n+        public ModelElement getItemOfConcern() {\n+            return itemOfConcern;\n+        }\n+        public int getProblemCode() {\n+            return problemCode;\n+        }\n+        public String getProblemDescription() {\n+            return problemDescription;\n+        }\n+        public List<ModelElement> getRelatedItems() {\n+            return relatedItems;\n+        }\n+        public List<ModelElement> getRelatedItems(boolean initializeIfNeeded) {\n+            if (initializeIfNeeded && relatedItems == null) {\n+                relatedItems = new ArrayList<>();\n+            }\n+            return relatedItems;\n+        }\n+        public List<AutoRepair> getRepairs() {\n+            return repairs;\n+        }\n+        public List<AutoRepair> getRepairs(boolean initializeIfNeeded) {\n+            if (initializeIfNeeded && repairs == null) {\n+                repairs = new ArrayList<>(0);\n+            }\n+            return repairs;\n+        }\n+        public Severity getSeverity() {\n+            return severity;\n+        }\n+        public String getStackTrace() {\n+            return stackTrace;\n+        }\n+        public void setProblemCode(int problemCode) {\n+            if (problemCode < 0) {\n+                throw new IllegalArgumentException(\"Problem code must be a positive integer - received \" + problemCode);\n+            }\n+            if (problemCode < 1000) {\n+                throw new IllegalArgumentException(\"Values under 1000 are reserved for gedcom4j - received \" + problemCode);\n+            }\n+            this.problemCode = problemCode;\n+        }\n+        public void setProblemDescription(String problemDescription) {\n+            if (problemCode < 1000) {\n+                throw new IllegalArgumentException(\n+                        \"Cannot set descriptions for problems with codes under 1000, which are reserved for gedcom4j\");\n+            }\n+            this.problemDescription = problemDescription;\n+        }\n+        @Override\n+        public String toString() {\n+            StringBuilder builder = new StringBuilder(50);\n+            builder.append(\"Finding [\");\n+            if (fieldNameOfConcern != null) {\n+                builder.append(\"fieldNameOfConcern=\");\n+                builder.append(fieldNameOfConcern);\n+                builder.append(\", \");\n+            }\n+            if (itemOfConcern != null) {\n+                builder.append(\"itemOfConcern=\");\n+                builder.append(itemOfConcern);\n+                builder.append(\", \");\n+            }\n+            if (severity != null) {\n+                builder.append(\"severity=\");\n+                builder.append(severity);\n+                builder.append(\", \");\n+            }\n+            builder.append(\"problemCode=\");\n+            builder.append(problemCode);\n+            builder.append(\", \");\n+            if (problemDescription != null) {\n+                builder.append(\"problemDescription=\");\n+                builder.append(problemDescription);\n+                builder.append(\", \");\n+            }\n+            if (relatedItems != null) {\n+                builder.append(\"relatedItems=\");\n+                builder.append(relatedItems);\n+                builder.append(\", \");\n+            }\n+            if (repairs != null) {\n+                builder.append(\"repairs=\");\n+                builder.append(repairs);\n+            }\n+            builder.append(\"]\");\n+            return builder.toString();\n+        }\n+        void setFieldNameOfConcern(String fieldNameOfConcern) {\n+            this.fieldNameOfConcern = fieldNameOfConcern;\n+        }\n+        void setItemOfConcern(ModelElement itemOfConcern) {\n+            this.itemOfConcern = itemOfConcern;\n+        }\n+        void setProblem(ProblemCode pc) {\n+            problemCode = pc.getCode();\n+            problemDescription = pc.getDescription();\n+        }\n+        void setRelatedItems(List<ModelElement> relatedItems) {\n+            this.relatedItems = relatedItems;\n+        }\n+        void setRepairs(List<AutoRepair> repairs) {\n+            this.repairs = repairs;\n+        }\n+        void setSeverity(Severity severity) {\n+            if (severity == null) {\n+                throw new IllegalArgumentException(\"severity is a required argument.\");\n+            }\n+            this.severity = severity;\n+        }\n+    }\n+    private static final long serialVersionUID = -5828898693076973667L;\n+    public static final AutoRepairResponder AUTO_REPAIR_ALL = new AutoRepairResponder() {\n+        private static final long serialVersionUID = -7286303303501153069L;\n+        @Override\n+        public boolean mayRepair(Finding repairableValidationFinding) {\n+            return true;\n+        }\n+    };\n+    public static final AutoRepairResponder AUTO_REPAIR_NONE = new AutoRepairResponder() {\n+        private static final long serialVersionUID = -4162579589370187101L;\n+        @Override\n+        public boolean mayRepair(Finding repairableValidationFinding) {\n+            return false;\n+        }\n+    };\n+    private AutoRepairResponder autoRepairResponder = AUTO_REPAIR_NONE;\n+    private final Gedcom gedcom;\n+    private final ValidationResults results = new ValidationResults();\n+    @SuppressWarnings(\"checkstyle:WhitespaceAround\")\n+    private final Set<Class<? extends AbstractValidator>> supplementaryValidators = new HashSet<>();\n+    private boolean v551 = true;\n+    @SuppressWarnings(\"PMD.ConstructorCallsOverridableMethod\")\n+    public Validator(Gedcom gedcom) {\n+        if (gedcom == null) {\n+            throw new IllegalArgumentException(\"gedcom is a required argument\");\n+        }\n+        this.gedcom = gedcom;\n+        determineGedcomSpecVersion(gedcom);\n+        supplementaryValidators.add(DifferentSurnamesThanParentsValidator.class);\n+        supplementaryValidators.add(BirthsToYoungParentsValidator.class);\n+        supplementaryValidators.add(BirthsToOldParentsValidator.class);\n+        supplementaryValidators.add(MarriedAtYoungAgeValidator.class);\n+        supplementaryValidators.add(FutureBirthOrDeathValidator.class);\n+        supplementaryValidators.add(MaleWivesFemaleHusbandsValidator.class);\n+        supplementaryValidators.add(CouplesWithLargeAgeDifferencesValidator.class);\n+        supplementaryValidators.add(BornBeforeAncestorsValidator.class);\n+        supplementaryValidators.add(MultipleChildrenWithSameGivenNameValidator.class);\n+        supplementaryValidators.add(CircularAncestryValidator.class);\n+        supplementaryValidators.add(SimultaneousBirthsInMultipleLocationsValidator.class);\n+        supplementaryValidators.add(QuadrupletsAndMoreValidator.class);\n+    }\n+    public AutoRepairResponder getAutoRepairResponder() {\n+        return autoRepairResponder;\n+    }\n+    public Gedcom getGedcom() {\n+        return gedcom;\n+    }\n+    public ValidationResults getResults() {\n+        return results;\n+    }\n+    @SuppressWarnings(\"checkstyle:WhitespaceAround\")\n+    public Set<Class<? extends AbstractValidator>> getSupplementaryValidators() {\n+        return supplementaryValidators;\n+    }\n+    public Finding newFinding(ModelElement itemOfConcern, Severity severity, ProblemCode problemCode, String fieldNameOfConcern) {\n+        if (itemOfConcern == null) {\n+            throw new IllegalArgumentException(\"itemOfConcern is a required argument.\");\n+        }\n+        if (severity == null) {\n+            throw new IllegalArgumentException(\"severity is a required argument.\");\n+        }\n+        if (problemCode == null) {\n+            throw new IllegalArgumentException(\"problemCode is a required argument.\");\n+        }\n+        Finding f = new Finding();\n+        f.itemOfConcern = itemOfConcern;\n+        f.severity = severity;\n+        f.problemCode = problemCode.getCode();\n+        f.problemDescription = problemCode.getDescription();\n+        f.fieldNameOfConcern = fieldNameOfConcern;\n+        results.add(f);\n+        return f;\n+    }\n+    public void setAutoRepairResponder(AutoRepairResponder autoRepairResponder) {\n+        this.autoRepairResponder = autoRepairResponder;\n+    }\n+    @Override\n+    @SuppressWarnings(\"PMD.CompareObjectsWithEquals\")\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(\"Validator [\");\n+        if (results != null) {\n+            builder.append(\"results=\");\n+            builder.append(results);\n+            builder.append(\", \");\n+        }\n+        if (autoRepairResponder != null) {\n+            builder.append(\"autoRepairResponder=\");\n+            if (autoRepairResponder == AUTO_REPAIR_ALL) {\n+                builder.append(\"AUTO_REPAIR_ALL\");\n+            } else if (autoRepairResponder == AUTO_REPAIR_NONE) {\n+                builder.append(\"AUTO_REPAIR_NONE\");\n+            } else {\n+                builder.append(autoRepairResponder);\n+            }\n+        }\n+        builder.append(\"]\");\n+        return builder.toString();\n+    }\n+    @SuppressWarnings(\"checkstyle:WhitespaceAround\")\n+    public void validate() {\n+        results.clear();\n+        checkHeader();\n+        checkSubmission();\n+        checkFamilies();\n+        checkIndividuals();\n+        checkMultimedia();\n+        checkNotes();\n+        checkRepositories();\n+        checkNotes();\n+        checkSubmitters();\n+        if (gedcom.getTrailer() == null) {\n+            Finding vf = newFinding(gedcom, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"trailer\");\n+            if (mayRepair(vf)) {\n+                gedcom.setTrailer(new Trailer());\n+                vf.addRepair(new AutoRepair(null, new Trailer()));\n+            }\n+        }\n+        for (Class<? extends AbstractValidator> avc : supplementaryValidators) {\n+            try {\n+                AbstractValidator av = avc.getConstructor(Validator.class).newInstance(this);\n+                av.validate();\n+            } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\n+                    | NoSuchMethodException | SecurityException e) {\n+                throw new ValidationException(\"Unable to instantiate and invoke custom validator \" + avc.getName(), e);\n+            }\n+        }\n+    }\n+    protected boolean isV551() {\n+        return v551;\n+    }\n+    void checkIndividuals() {\n+        for (Entry<String, Individual> entry : gedcom.getIndividuals().entrySet()) {\n+            if (entry.getValue() == null || entry.getKey() == null) {\n+                Finding vf = newFinding(gedcom, Severity.ERROR, ProblemCode.LIST_WITH_NULL_VALUE, \"individuals\");\n+                if (mayRepair(vf)) {\n+                    vf.addRepair(new AutoRepair(null, null));\n+                    gedcom.getIndividuals().remove(entry.getKey());\n+                }\n+            } else {\n+                new IndividualValidator(this, entry.getValue()).validate();\n+            }\n+        }\n+    }\n+    boolean mayRepair(Finding validationFinding) {\n+        if (autoRepairResponder != null) {\n+            return autoRepairResponder.mayRepair(validationFinding);\n+        }\n+        return false;\n+    }\n+    private void checkFamilies() {\n+        for (Entry<String, Family> entry : gedcom.getFamilies().entrySet()) {\n+            if (entry.getValue() == null || entry.getKey() == null) {\n+                Finding vf = newFinding(gedcom, Severity.ERROR, ProblemCode.LIST_WITH_NULL_VALUE, \"submitter\");\n+                if (mayRepair(vf)) {\n+                    vf.addRepair(new AutoRepair(null, null));\n+                    gedcom.getFamilies().remove(entry.getKey());\n+                }\n+            } else {\n+                new FamilyValidator(this, entry.getValue()).validate();\n+            }\n+        }\n+    }\n+    private void checkHeader() {\n+        if (gedcom.getHeader() == null) {\n+            Header header = new Header();\n+            gedcom.setHeader(header);\n+        }\n+        new HeaderValidator(this, gedcom.getHeader()).validate();\n+    }\n+    private void checkMultimedia() {\n+        for (Entry<String, Multimedia> entry : gedcom.getMultimedia().entrySet()) {\n+            if (entry.getValue() == null || entry.getKey() == null) {\n+                Finding vf = newFinding(gedcom, Severity.ERROR, ProblemCode.LIST_WITH_NULL_VALUE, \"multimedia\");\n+                if (mayRepair(vf)) {\n+                    vf.addRepair(new AutoRepair(null, null));\n+                    gedcom.getMultimedia().remove(entry.getKey());\n+                }\n+            } else {\n+                new MultimediaValidator(this, entry.getValue()).validate();\n+            }\n+        }\n+    }\n+    private void checkNotes() {\n+        for (NoteRecord note : gedcom.getNotes().values()) {\n+            if (note == null) {\n+                newFinding(gedcom, Severity.ERROR, ProblemCode.LIST_WITH_NULL_VALUE, \"notes\");\n+                continue;\n+            }\n+            if (!isSpecified(note.getXref())) {\n+                newFinding(note, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"xref\");\n+            }\n+            new NoteRecordValidator(this, note).validate();\n+        }\n+    }\n+    private void checkRepositories() {\n+        for (Entry<String, Repository> entry : gedcom.getRepositories().entrySet()) {\n+            if (entry.getValue() == null || entry.getKey() == null) {\n+                Finding vf = newFinding(gedcom, Severity.ERROR, ProblemCode.LIST_WITH_NULL_VALUE, \"repositories\");\n+                if (mayRepair(vf)) {\n+                    vf.addRepair(new AutoRepair(null, null));\n+                    gedcom.getRepositories().remove(entry.getKey());\n+                }\n+            } else {\n+                new RepositoryValidator(this, entry.getValue()).validate();\n+            }\n+        }\n+    }\n+    private void checkSubmission() {\n+        if (gedcom.getSubmission() != null) {\n+            new SubmissionValidator(this, gedcom.getSubmission()).validate();\n+        } else {\n+            Finding vf = newFinding(gedcom, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, \"submission\");\n+            if (mayRepair(vf)) {\n+                gedcom.setSubmission(new Submission(\"@SUBMISSION@\"));\n+                vf.addRepair(new AutoRepair(null, new Submission(gedcom.getSubmission())));\n+            }\n+        }\n+    }\n+    private void checkSubmitters() {\n+        for (Entry<String, Submitter> entry : gedcom.getSubmitters().entrySet()) {\n+            if (entry.getValue() == null || entry.getKey() == null) {\n+                Finding vf = newFinding(gedcom, Severity.ERROR, ProblemCode.LIST_WITH_NULL_VALUE, \"submitter\");\n+                if (mayRepair(vf)) {\n+                    vf.addRepair(new AutoRepair(null, null));\n+                    gedcom.getSubmitters().remove(entry.getKey());\n+                }\n+            } else {\n+                new SubmitterValidator(this, entry.getValue()).validate();\n+            }\n+        }\n+    }\n+    private void determineGedcomSpecVersion(Gedcom g) {\n+        Header h = g.getHeader();\n+        if (h == null || h.getGedcomVersion() == null || h.getGedcomVersion().getVersionNumber() == null) {\n+            Finding vf = newFinding(h, Severity.INFO, ProblemCode.UNABLE_TO_DETERMINE_GEDCOM_VERSION, null);\n+            if (mayRepair(vf)) {\n+                if (h == null) {\n+                    h = new Header();\n+                    g.setHeader(h);\n+                    vf.addRepair(new AutoRepair(null, h));\n+                }\n+                GedcomVersion gv = h.getGedcomVersion();\n+                if (h.getGedcomVersion() == null) {\n+                    gv = new GedcomVersion();\n+                    h.setGedcomVersion(gv);\n+                    vf.addRepair(new AutoRepair(null, gv));\n+                }\n+                StringWithCustomFacts vn = gv.getVersionNumber();\n+                if (vn == null || vn.getValue() == null || !(SupportedVersion.V5_5.toString().equals(vn.getValue())\n+                        || SupportedVersion.V5_5_1.toString().equals(vn.getValue()))) {\n+                    gv.setVersionNumber(SupportedVersion.V5_5_1.toString());\n+                    vf.addRepair(new AutoRepair(vn, gv.getVersionNumber()));\n+                }\n+            }\n+        } else {\n+            StringWithCustomFacts gedcomVersion = g.getHeader().getGedcomVersion().getVersionNumber();\n+            if (SupportedVersion.V5_5.toString().equals(gedcomVersion.getValue())) {\n+                v551 = false;\n+            }\n+        }\n+    }\n+    private boolean isSpecified(String s) {\n+        if (s == null || s.isEmpty()) {\n+            return false;\n+        }\n+        for (int i = 0; i < s.length(); i++) {\n+            if (!Character.isWhitespace(s.charAt(i))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    protected void emitLinesOfText(int level, String startingTag, MultiStringWithCustomFacts multiLine)\n+            throws WriterCancelledException, GedcomWriterException {\n+        if (multiLine == null) {\n+            return;\n+        }\n+        emitLinesOfText(level, null, startingTag, multiLine.getLines());\n+        emitCustomFacts(level + 1, multiLine);\n+    }\n+    protected void emitStringsWithCustomFacts(int level, List<StringWithCustomFacts> strings, String tagValue)\n+            for (StringWithCustomFacts f : strings) {\n+    protected void emitTagIfValueNotNull(int level, String tag, HasCustomFacts value) throws WriterCancelledException,\n+            GedcomWriterException {\n+    protected void emitTagWithOptionalValueAndCustomSubtags(int level, String tag, StringWithCustomFacts valueToRightOfTag)\n+                emitCustomFacts(level + 1, valueToRightOfTag.getCustomFacts());\n+        emitCustomFacts(level + 1, valueToRightOfTag.getCustomFacts());\n+        emitTagWithRequiredValue(level, null, tag, new StringWithCustomFacts(value));\n+    protected void emitTagWithRequiredValue(int level, String tag, StringWithCustomFacts value) throws GedcomWriterException {\n+                .getGedcomVersion() != null && SupportedVersion.V5_5.toString().equals(baseWriter.writeFrom.getHeader()\n+                        .getGedcomVersion().getVersionNumber().getValue());\n+    }\n+    void emitCustomFacts(int level, HasCustomFacts thingWithCustomFacts) throws WriterCancelledException, GedcomWriterException {\n+        if (thingWithCustomFacts != null && thingWithCustomFacts.getCustomFacts() != null) {\n+            emitCustomFacts(level, thingWithCustomFacts.getCustomFacts());\n+        }\n+    void emitCustomFacts(int level, List<CustomFact> customFacts) throws WriterCancelledException, GedcomWriterException {\n+        if (customFacts != null) {\n+            for (CustomFact cf : customFacts) {\n+                if (cf == null) {\n+                    continue;\n+                }\n+                if (cf.getXref() != null && cf.getXref().trim().length() > 0) {\n+                    line.append(cf.getXref()).append(\" \");\n+                line.append(cf.getTag());\n+                if (cf.getDescription() != null && cf.getDescription().getValue() != null && cf.getDescription().getValue().trim()\n+                        .length() > 0) {\n+                    line.append(\" \").append(cf.getDescription());\n+                emitAndSplit(level, line.toString());\n+                new ChangeDateEmitter(baseWriter, level + 1, cf.getChangeDate()).emit();\n+                new CitationEmitter(baseWriter, level + 1, cf.getCitations()).emit();\n+                emitTagIfValueNotNull(level + 1, \"DATE\", cf.getDate());\n+                new NoteStructureEmitter(baseWriter, level + 1, cf.getNoteStructures()).emit();\n+                new PlaceEmitter(baseWriter, level + 1, cf.getPlace()).emit();\n+                emitTagIfValueNotNull(level + 1, \"TYPE\", cf.getType());\n+                emitCustomFacts(level + 1, cf.getCustomFacts());\n+    private void emitTagIfValueNotNull(int level, String xref, String tag, HasCustomFacts value) throws WriterCancelledException,\n+            GedcomWriterException {\n+            List<String> valueLines = splitLinesOnBreakingCharacters(temp);\n+            emitCustomFacts(level + 1, value.getCustomFacts());\n+    private void emitTagWithRequiredValue(int level, String xref, String tag, StringWithCustomFacts e)\n+            throws GedcomWriterException {\n+        emitCustomFacts(level + 1, e.getCustomFacts());\n+        emitTagIfValueNotNull(startLevel + 1, \"ADR3\", writeFrom.getAddr3());\n+        emitCustomFacts(startLevel + 1, writeFrom.getCustomFacts());\n+            new NoteStructureEmitter(baseWriter, startLevel + 1, writeFrom.getNoteStructures()).emit();\n+            emitCustomFacts(startLevel + 1, writeFrom.getCustomFacts());\n+    protected CitationEmitter(GedcomWriter baseWriter, int startLevel, List<AbstractCitation> writeFrom)\n+        new MultimediaLinksEmitter(baseWriter, level + 1, cws.getMultimedia()).emit();\n+        new NoteStructureEmitter(baseWriter, level + 1, cws.getNoteStructures()).emit();\n+        emitTagIfValueNotNull(level + 1, \"QUAY\", cws.getCertainty());\n+        emitCustomFacts(level + 1, cws.getCustomFacts());\n+                for (MultiStringWithCustomFacts linesOfText : cd.getSourceText()) {\n+                emitCustomFacts(level + 2, cd);\n+        new NoteStructureEmitter(baseWriter, level + 1, cws.getNoteStructures()).emit();\n+        emitCustomFacts(level + 1, cws.getCustomFacts());\n+        new CitationEmitter(baseWriter, startLevel, writeFrom.getCitations()).emit();\n+        new NoteStructureEmitter(baseWriter, startLevel, writeFrom.getNoteStructures()).emit();\n+        emitCustomFacts(startLevel, writeFrom.getCustomFacts());\n+            if (f.getHusband() != null && f.getHusband().getIndividual() != null) {\n+                emitTagWithRequiredValue(1, \"HUSB\", f.getHusband().getIndividual().getXref());\n+                emitCustomFacts(2, f.getHusband().getCustomFacts());\n+            if (f.getWife() != null && f.getWife().getIndividual() != null) {\n+                emitTagWithRequiredValue(1, \"WIFE\", f.getWife().getIndividual().getXref());\n+                emitCustomFacts(2, f.getWife().getCustomFacts());\n+                for (IndividualReference iRef : f.getChildren()) {\n+                    if (iRef == null) {\n+                        continue;\n+                    }\n+                    Individual i = iRef.getIndividual();\n+                    emitCustomFacts(2, iRef.getCustomFacts());\n+                for (SubmitterReference sRef : f.getSubmitters()) {\n+                    Submitter s = sRef.getSubmitter();\n+            new CitationEmitter(baseWriter, 1, f.getCitations()).emit();\n+            new NoteStructureEmitter(baseWriter, 1, f.getNoteStructures()).emit();\n+            emitCustomFacts(1, f.getCustomFacts());\n+        emitTagWithOptionalValue(level, e.getType().getTag(), e.getYNull());\n+        new CitationEmitter(baseWriter, level + 1, sealings.getCitations()).emit();\n+        new NoteStructureEmitter(baseWriter, level + 1, sealings.getNoteStructures()).emit();\n+        emitCustomFacts(level + 1, sealings.getCustomFacts());\n+    private AutoRepairResponder autoRepairResponder;\n+    private LineTerminator lineTerminator = LineTerminator.getDefaultLineTerminator();\n+    private boolean useLittleEndianForUnicode = true;\n+    private boolean validationSuppressed = false;\n+    private Validator validator;\n+    public AutoRepairResponder getAutoRepairResponder() {\n+        return autoRepairResponder;\n+    }\n+    public Validator getValidator() {\n+        return validator;\n+    public boolean isValidationSuppressed() {\n+        return validationSuppressed;\n+    }\n+    public void setAutoRepairResponder(AutoRepairResponder autoRepairResponder) {\n+        this.autoRepairResponder = autoRepairResponder;\n+    public void setValidationSuppressed(boolean validationSuppressed) {\n+        this.validationSuppressed = validationSuppressed;\n+    }\n+        if (writeFrom.getHeader().getFileName() != null) {\n+            writeFrom.getHeader().getFileName().setValue(file.getName());\n+        } else {\n+            writeFrom.getHeader().setFileName(new StringWithCustomFacts(file.getName()));\n+        }\n+            validator = new Validator(writeFrom);\n+            validator.setAutoRepairResponder(getAutoRepairResponder());\n+            validator.validate();\n+            int numUnrepairedErrorFindings = 0;\n+            for (Finding f : validator.getResults().getAllFindings()) {\n+                if (f.getSeverity() == Severity.ERROR && (f.getRepairs() == null || f.getRepairs().isEmpty())) {\n+                    numUnrepairedErrorFindings++;\n+            if (numUnrepairedErrorFindings > 0) {\n+                throw new GedcomWriterException(\"Cannot write file - \" + numUnrepairedErrorFindings\n+                        + \" error(s) found during validation requiring repair.  Review the validation findings to determine root cause.\");\n+        new NoteRecordEmitter(baseWriter, 0, writeFrom.getNotes().values()).emit();\n+        emitCustomFacts(0, writeFrom.getCustomFacts());\n+        if (lines.size() - lastLineCountNotified > constructionNotificationRate) {\n+        if (SupportedVersion.V5_5.toString().equals(writeFrom.getHeader().getGedcomVersion().getVersionNumber().getValue())) {\n+        if (header.getSubmitterReference() != null) {\n+            emitTagWithRequiredValue(1, \"SUBM\", header.getSubmitterReference().getSubmitter().getXref());\n+            emitCustomFacts(2, header.getSubmitterReference());\n+        if (header.getSubmissionReference() != null) {\n+            emitTagWithRequiredValue(1, \"SUBN\", header.getSubmissionReference().getSubmission().getXref());\n+            emitCustomFacts(2, header.getSubmissionReference());\n+        emitCustomFacts(3, header.getGedcomVersion().getVersionNumber());\n+        emitCustomFacts(2, header.getGedcomVersion());\n+        new NoteStructureEmitter(baseWriter, 1, header.getNoteStructures()).emit();\n+        emitCustomFacts(1, header.getCustomFacts());\n+            emitStringsWithCustomFacts(3, corporation.getPhoneNumbers(), \"PHON\");\n+            emitStringsWithCustomFacts(3, corporation.getFaxNumbers(), \"FAX\");\n+            emitStringsWithCustomFacts(3, corporation.getWwwUrls(), \"WWW\");\n+            emitStringsWithCustomFacts(3, corporation.getEmails(), \"EMAIL\");\n+            emitCustomFacts(3, corporation);\n+            emitCustomFacts(3, sourceData);\n+        emitCustomFacts(2, sourceSystem.getCustomFacts());\n+                for (StringWithCustomFacts s : i.getAliases()) {\n+            new CitationEmitter(baseWriter, 1, i.getCitations()).emit();\n+            new NoteStructureEmitter(baseWriter, 1, i.getNoteStructures()).emit();\n+            emitCustomFacts(1, i.getCustomFacts());\n+                new NoteStructureEmitter(baseWriter, level + 1, a.getNoteStructures()).emit();\n+                new CitationEmitter(baseWriter, level + 1, a.getCitations()).emit();\n+                emitCustomFacts(level + 1, a.getCustomFacts());\n+                new NoteStructureEmitter(baseWriter, level + 1, familyChild.getNoteStructures()).emit();\n+                emitCustomFacts(level + 1, familyChild.getCustomFacts());\n+                emitStringsWithCustomFacts(level + 1, a.getPhoneNumbers(), \"PHON\");\n+                emitStringsWithCustomFacts(level + 1, a.getWwwUrls(), \"WWW\");\n+                emitStringsWithCustomFacts(level + 1, a.getFaxNumbers(), \"FAX\");\n+                emitStringsWithCustomFacts(level + 1, a.getEmails(), \"EMAIL\");\n+                emitTagWithOptionalValue(level, e.getType().getTag(), e.getYNull());\n+                emitTagWithOptionalValue(level, o.getType().getTag(), o.getYNull());\n+                new CitationEmitter(baseWriter, level + 1, o.getCitations()).emit();\n+                new NoteStructureEmitter(baseWriter, level + 1, o.getNoteStructures()).emit();\n+                emitCustomFacts(level + 1, o.getCustomFacts());\n+                emitTagIfValueNotNull(level + 1, \"TYPE\", n.getType());\n+                new CitationEmitter(baseWriter, level + 1, n.getCitations()).emit();\n+                new NoteStructureEmitter(baseWriter, level + 1, n.getNoteStructures()).emit();\n+                emitCustomFacts(level + 1, n.getCustomFacts());\n+        new CitationEmitter(baseWriter, level + 1, pnv.getCitations()).emit();\n+        new NoteStructureEmitter(baseWriter, level + 1, pnv.getNoteStructures()).emit();\n+        emitCustomFacts(level + 1, pnv.getCustomFacts());\n+                new NoteStructureEmitter(baseWriter, level + 1, familySpouse.getNoteStructures()).emit();\n+                emitCustomFacts(level + 1, familySpouse.getCustomFacts());\n+                    emitCustomFacts(2, fr.getCustomFacts());\n+            new CitationEmitter(baseWriter, 1, m.getCitations()).emit();\n+            new NoteStructureEmitter(baseWriter, 1, m.getNoteStructures()).emit();\n+            emitCustomFacts(1, m.getCustomFacts());\n+            new NoteStructureEmitter(baseWriter, 1, m.getNoteStructures()).emit();\n+            if (m.getContinuedObject() != null && m.getContinuedObject().getMultimedia() != null && m.getContinuedObject()\n+                    .getMultimedia().getXref() != null) {\n+                emitTagWithRequiredValue(1, \"OBJE\", m.getContinuedObject().getMultimedia().getXref());\n+            emitCustomFacts(1, m.getCustomFacts());\n+    MultimediaLinksEmitter(GedcomWriter baseWriter, int startLevel, List<MultimediaReference> writeFrom)\n+            throws WriterCancelledException {\n+        for (MultimediaReference mr : writeFrom) {\n+            if (mr == null) {\n+                continue;\n+            }\n+            Multimedia m = mr.getMultimedia();\n+            if (m == null) {\n+                continue;\n+            }\n+                emitTag(startLevel, \"OBJE\");\n+                    new NoteStructureEmitter(baseWriter, startLevel + 1, m.getNoteStructures()).emit();\n+                    if (m.getNoteStructures() != null && !m.getNoteStructures().isEmpty()) {\n+            emitCustomFacts(startLevel + 1, m.getCustomFacts());\n+            emitCustomFacts(startLevel + 1, mr.getCustomFacts());\n+    NoteRecordEmitter(GedcomWriter baseWriter, int startLevel, Collection<NoteRecord> collection) throws WriterCancelledException {\n+            for (NoteRecord n : writeFrom) {\n+                emitNoteRecord(n);\n+    private void emitNoteRecord(NoteRecord note) throws GedcomWriterException {\n+        if (note.getXref() == null || note.getXref().trim().isEmpty()) {\n+            throw new GedcomWriterException(NoteRecord.class.getName() + \" has no xref\");\n+        emitLinesOfText(0, note.getXref(), \"NOTE\", note.getLines());\n+        new CitationEmitter(baseWriter, 1, note.getCitations()).emit();\n+                emitTagWithRequiredValue(1, \"REFN\", u.getReferenceNum());\n+                emitTagIfValueNotNull(2, \"TYPE\", u.getType());\n+        emitTagIfValueNotNull(1, \"RIN\", note.getRecIdNumber());\n+        new ChangeDateEmitter(baseWriter, 1, note.getChangeDate()).emit();\n+        emitCustomFacts(1, note.getCustomFacts());\n+    NoteStructureEmitter(GedcomWriter baseWriter, int startLevel, Collection<NoteStructure> collection)\n+            throws WriterCancelledException {\n+        super(baseWriter, startLevel, collection);\n+    }\n+    @Override\n+    protected void emit() throws GedcomWriterException {\n+        if (writeFrom != null) {\n+            for (NoteStructure n : writeFrom) {\n+                emitNoteStructure(startLevel, n);\n+                if (baseWriter.isCancelled()) {\n+                    throw new WriterCancelledException(\"Construction and writing of GEDCOM cancelled\");\n+                }\n+            }\n+        }\n+    }\n+    private void emitNoteStructure(int level, NoteStructure note) throws GedcomWriterException {\n+        if (note.getNoteReference() == null) {\n+            emitLinesOfText(level, null, \"NOTE\", note.getLines());\n+        } else {\n+            emitTagWithRequiredValue(level, \"NOTE\", note.getNoteReference().getXref());\n+        }\n+        emitCustomFacts(level + 1, note.getCustomFacts());\n+    }\n+        new CitationEmitter(baseWriter, startLevel + 1, writeFrom.getCitations()).emit();\n+        new NoteStructureEmitter(baseWriter, startLevel + 1, writeFrom.getNoteStructures()).emit();\n+        emitCustomFacts(startLevel + 1, writeFrom.getCustomFacts());\n+            new NoteStructureEmitter(baseWriter, 1, r.getNoteStructures()).emit();\n+            emitStringsWithCustomFacts(1, r.getPhoneNumbers(), \"PHON\");\n+            emitStringsWithCustomFacts(1, r.getWwwUrls(), \"WWW\");\n+            emitStringsWithCustomFacts(1, r.getFaxNumbers(), \"FAX\");\n+            emitStringsWithCustomFacts(1, r.getEmails(), \"EMAIL\");\n+            emitCustomFacts(1, r.getCustomFacts());\n+                    if (e.getEventType() != null) {\n+                        emitTagWithOptionalValue(2, \"EVEN\", e.getEventType().getValue());\n+                    }\n+                    emitCustomFacts(3, e.getCustomFacts());\n+                new NoteStructureEmitter(baseWriter, 2, d.getNoteStructures()).emit();\n+                emitCustomFacts(2, d.getCustomFacts());\n+            new NoteStructureEmitter(baseWriter, 1, s.getNoteStructures()).emit();\n+            emitCustomFacts(1, s.getCustomFacts());\n+            new NoteStructureEmitter(baseWriter, level + 1, repositoryCitation.getNoteStructures()).emit();\n+            emitCustomFacts(level + 1, repositoryCitation.getCustomFacts());\n+        emitCustomFacts(1, writeFrom.getCustomFacts());\n+                for (StringWithCustomFacts l : s.getLanguagePref()) {\n+            emitStringsWithCustomFacts(1, s.getPhoneNumbers(), \"PHON\");\n+            emitStringsWithCustomFacts(1, s.getWwwUrls(), \"WWW\");\n+            emitStringsWithCustomFacts(1, s.getFaxNumbers(), \"FAX\");\n+            emitStringsWithCustomFacts(1, s.getEmails(), \"EMAIL\");\n+            emitCustomFacts(1, s.getCustomFacts());\n+    @Test\n+    public void testCustomTags() throws Exception {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/customtagstorture.ged\");\n+        GedcomWriter gw = new GedcomWriter(gp.getGedcom());\n+        gw.write(\"tmp/customtagstorture.ged\");\n+        List<String> original = new ArrayList<>();\n+        try (FileReader fr = new FileReader(\"sample/customtagstorture.ged\"); BufferedReader br = new BufferedReader(fr)) {\n+            String s = br.readLine();\n+            while (s != null) {\n+                original.add(s);\n+                s = br.readLine();\n+            }\n+        }\n+        List<String> copy = new ArrayList<>();\n+        try (FileReader fr = new FileReader(\"tmp/customtagstorture.ged\"); BufferedReader br = new BufferedReader(fr)) {\n+            String s = br.readLine();\n+            while (s != null) {\n+                copy.add(s);\n+                s = br.readLine();\n+            }\n+        }\n+        for (String s : original) {\n+            assertTrue(\"Could not find original line in copy: \" + s, copy.contains(s));\n+        }\n+        for (String s : copy) {\n+            assertTrue(\"Could not find copy line in original: \" + s, original.contains(s));\n+        }\n+        assertEquals(original.size(), copy.size());\n+    }\n+        bd.setDate(new StringWithCustomFacts(birthDateString));\n+    public void testValidationException() {\n+            throw new ValidationException();\n+        } catch (ValidationException e) {\n+    public void testValidationExceptionString() {\n+            throw new ValidationException(\"Yo\");\n+        } catch (ValidationException e) {\n+    public void testValidationExceptionStringThrowable() {\n+            throw new ValidationException(new RuntimeException());\n+        } catch (ValidationException e) {\n+    public void testValidationExceptionThrowable() {\n+            throw new ValidationException(\"Yo\", new RuntimeException());\n+        } catch (ValidationException e) {\n+        assertSame(father, f.getHusband().getIndividual());\n+        assertSame(mother, f.getWife().getIndividual());\n+        assertTrue(f.getChildren().contains(new IndividualReference(kid1)));\n+        assertTrue(f.getChildren().contains(new IndividualReference(kid2)));\n+        assertEquals(\"FileProgressEvent [complete=true, linesProcessed=-1, bytesProcessed=5]\", e.toString());\n+        assertEquals(\"FileProgressEvent [complete=false, linesProcessed=50, bytesProcessed=-2147483648]\", e.toString());\n+    @Test\n+    public void testAscii() throws IOException, GedcomParserException {\n+        try (InputStream is = new FileInputStream(\"sample/willis-ascii.ged\");\n+                BufferedInputStream bis = new BufferedInputStream(is)) {\n+            GedcomFileReader gfr = new GedcomFileReader(new GedcomParser(), bis);\n+            assertNotNull(gfr.nextLine());\n+        }\n+    }\n+        assertEquals(1, e.getNoteStructures().size());\n+        NoteStructure note = e.getNoteStructures().get(0);\n+            NoteRecord n = gp.getGedcom().getNotes().get(\"@N1@\");\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // Cleanup whatever can be cleaned up\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+        gw.write(new NullOutputStream());\n+        g.getHeader().setSubmissionReference(new SubmissionReference(g.getSubmission()));\n+        s.setName(\"Joe Tester\");\n+        g.getHeader().setSubmitterReference(new SubmitterReference(s));\n+    protected Gedcom getLoadedGedcom() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/willis.ged\");\n+        return gp.getGedcom();\n+    }\n+    protected Address getTestAddress() {\n+        Address result = new Address();\n+        result.setAddr1(\"123 Main St.\");\n+        result.setCity(\"Anytown\");\n+        result.setStateProvince(\"ME\");\n+        result.setCountry(\"USA\");\n+        result.getLines(true).add(\"XXX\");\n+        result.getCustomFacts(true).add(getTestCustomFact());\n+        return result;\n+    }\n+    protected AbstractCitation getTestCitation() {\n+        CitationWithoutSource result = new CitationWithoutSource();\n+        result.getCustomFacts(true).add(getTestCustomFact());\n+        result.getNoteStructures(true).add(getTestNoteStructure());\n+        List<String> ls = new ArrayList<>();\n+        ls.add(\"Foo\");\n+        ls.add(\"Bar\");\n+        result.getTextFromSource(true).add(ls);\n+        result.getDescription(true).add(\"Test Citation\");\n+        return result;\n+    }\n+    protected CustomFact getTestCustomFact() {\n+        CustomFact result = new CustomFact(\"_HOWDY\");\n+        result.setDescription(\"Pardners\");\n+        Place p = new Place();\n+        p.setPlaceName(\"TV Land\");\n+        result.setPlace(p);\n+        result.getNoteStructures(true).add(getTestNoteStructure());\n+        result.setDate(\"11 SEP 1911\");\n+        CustomFact subFact = new CustomFact(\"_XXXX\");\n+        subFact.setDescription(\"More input\");\n+        result.getCustomFacts(true).add(subFact);\n+        return result;\n+    }\n+    protected NoteRecord getTestNoteRecord() {\n+        NoteRecord result = new NoteRecord(\"@N0001@\");\n+        ChangeDate cd = new ChangeDate();\n+        cd.setDate(\"1 JAN 1980\");\n+        cd.setTime(\"12:00 AM\");\n+        result.setChangeDate(cd);\n+        CustomFact n2 = new CustomFact(\"_QWER\");\n+        result.getCustomFacts(true).add(n2);\n+        result.setRecIdNumber(\"YYY\");\n+        result.getLines(true).add(\"Test Note Line 1\");\n+        return result;\n+    }\n+    protected NoteStructure getTestNoteStructure() {\n+        NoteStructure result = new NoteStructure();\n+        result.getLines(true).add(\"This is a test\");\n+        return result;\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Address(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Address orig = new Address();\n+        Address copy = new Address(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Address orig = new Address();\n+        orig.setAddr1(\"123 Main St.\");\n+        orig.setCity(\"Anytown\");\n+        orig.setStateProvince(\"ME\");\n+        orig.setCountry(\"USA\");\n+        orig.getLines(true).add(\"XXX\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        Address copy = new Address(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Association(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Association orig = new Association();\n+        Association copy = new Association(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Association orig = new Association();\n+        orig.setAssociatedEntityType(\"AAA\");\n+        orig.setAssociatedEntityXref(\"BBB\");\n+        orig.setRelationship(\"CCC\");\n+        AbstractCitation c = getTestCitation();\n+        orig.getCitations(true).add(c);\n+        Association copy = new Association(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        c.getNoteStructures(true).get(0).getLines(true).set(0, \"Changed value\");\n+        assertFalse(\"Copy shouldn't match when original gets changed\", orig.equals(copy));\n+        assertEquals(\"This is a test\", copy.getCitations().get(0).getNoteStructures().get(0).getLines().get(0));\n+    }\n+        a1.setAssociatedEntityType(\"Frying Pan\");\n+        a2.setAssociatedEntityType(\"Frying Pan\");\n+        a1.setAssociatedEntityType((String) null);\n+        a2.setAssociatedEntityType((String) null);\n+        a1.setRelationship(\"Frying Pan\");\n+        a2.setRelationship(\"Frying Pan\");\n+        a1.setRelationship((String) null);\n+        a2.setRelationship((String) null);\n+        a1.getNoteStructures(true).add(new NoteStructure());\n+        a2.getNoteStructures(true).add(new NoteStructure());\n+        a1.getNoteStructures().clear();\n+        a2.getNoteStructures().clear();\n+        a1.setAssociatedEntityType(\"Frying Pan\");\n+        a2.setAssociatedEntityType(\"Frying Pan\");\n+        a1.setAssociatedEntityType((String) null);\n+        a2.setAssociatedEntityType((String) null);\n+        a1.setRelationship(\"Frying Pan\");\n+        a2.setRelationship(\"Frying Pan\");\n+        a1.setRelationship((String) null);\n+        a2.setRelationship((String) null);\n+        a1.getNoteStructures(true).add(new NoteStructure());\n+        a2.getNoteStructures(true).add(new NoteStructure());\n+        a1.getNoteStructures().clear();\n+        a2.getNoteStructures().clear();\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new ChangeDate(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        ChangeDate orig = new ChangeDate();\n+        ChangeDate copy = new ChangeDate(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testValues() {\n+        ChangeDate orig = new ChangeDate();\n+        orig.setDate(\"5 MAY 1905\");\n+        orig.setTime(\"12:00:00 Eastern\");\n+        NoteStructure n = new NoteStructure();\n+        n.getLines(true).add(\"Frying Pan\");\n+        n.getLines().add(\"Tomato sauce\");\n+        orig.getNoteStructures(true).add(n);\n+        ChangeDate copy = new ChangeDate(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(1, copy.getNoteStructures().size());\n+        assertEquals(2, copy.getNoteStructures().get(0).getLines().size());\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.getDate().setValue(\"31 DEC 2001\");\n+        assertEquals(\"Copy should not change when original does\", \"5 MAY 1905\", copy.getDate().getValue());\n+        orig.getNoteStructures().get(0).getLines().add(0, \"Inserted line in original\");\n+        assertEquals(\"Copy should not change when original does\", \"Frying Pan\", copy.getNoteStructures().get(0).getLines().get(0));\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new CharacterSet(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        CharacterSet orig = new CharacterSet();\n+        CharacterSet copy = new CharacterSet(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        CharacterSet orig = new CharacterSet();\n+        orig.setCharacterSetName(\"AAA\");\n+        orig.setVersionNum(\"BBB\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        CharacterSet copy = new CharacterSet(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        cs1.setCharacterSetName(\"Frying Pan\");\n+        cs2.setCharacterSetName(\"Frying Pan\");\n+        cs1.setCharacterSetName(\"Frying Pan\");\n+        cs2.setCharacterSetName(\"Frying Pan\");\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new CitationData(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        CitationData orig = new CitationData();\n+        CitationData copy = new CitationData(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        CitationData orig = new CitationData();\n+        orig.setEntryDate(\"1 JAN 1990\");\n+        MultiStringWithCustomFacts ls = new MultiStringWithCustomFacts();\n+        ls.getLines(true).add(\"Line 1\");\n+        ls.getLines().add(\"Line 2\");\n+        ls.getLines().add(\"Line 5 (no 3!)\");\n+        orig.getSourceText(true).add(ls);\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        CitationData copy = new CitationData(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        c1.customFacts = null;\n+        c1.getCustomFacts(true).addAll(new ArrayList<CustomFact>());\n+        c1.setEntryDate(\"Frying Pan\");\n+        c2.setEntryDate(\"Frying Pan\");\n+        c1.getSourceText(true).add(new MultiStringWithCustomFacts());\n+        c2.getSourceText(true).add(new MultiStringWithCustomFacts());\n+        c1.customFacts = null;\n+        c1.getCustomFacts(true).addAll(new ArrayList<CustomFact>());\n+        c1.setEntryDate(\"Frying Pan\");\n+        c2.setEntryDate(\"Frying Pan\");\n+        c1.getSourceText(true).add(new MultiStringWithCustomFacts());\n+        c2.getSourceText(true).add(new MultiStringWithCustomFacts());\n+        c1.customFacts = null;\n+        c1.setEntryDate(\"Frying Pan\");\n+        c1.getSourceText(true).add(new MultiStringWithCustomFacts());\n+        assertEquals(\"CitationData [entryDate=Frying Pan, sourceText=[MultiStringWithCustomFacts []], ]\", c1.toString());\n+        assertEquals(\"CitationData [sourceText=[], customFacts=[]]\", c1.toString());\n+        c1.customFacts = null;\n+        c1.setEntryDate(\"Frying Pan\");\n+        c1.getSourceText(true).add(new MultiStringWithCustomFacts());\n+        assertEquals(\"CitationData [entryDate=Frying Pan, sourceText=[MultiStringWithCustomFacts [lines=[], customFacts=[]]], ]\", c1\n+                .toString());\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new CitationWithSource(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        CitationWithSource orig = new CitationWithSource();\n+        AbstractCitation copy = new CitationWithSource(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        CitationWithSource orig = new CitationWithSource();\n+        orig.setCertainty(\"High\");\n+        orig.setEventCited(\"You know, that thing that happened\");\n+        orig.setRoleInEvent(\"You had to be there\");\n+        Source s = new Source();\n+        s.setXref(\"@S1@\");\n+        orig.setSource(s);\n+        orig.setWhereInSource(\"Page 394\");\n+        CitationData cd = new CitationData();\n+        MultiStringWithCustomFacts ls = new MultiStringWithCustomFacts();\n+        ls.getLines(true).add(\"line 1\");\n+        ls.getLines().add(\"line 2\");\n+        cd.getSourceText(true).add(ls);\n+        cd.getCustomFacts(true).add(getTestCustomFact());\n+        cd.setEntryDate(\"30 Jun 1998\");\n+        orig.getData(true).add(cd);\n+        AbstractCitation copy = new CitationWithSource(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new CitationWithoutSource(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        CitationWithoutSource orig = new CitationWithoutSource();\n+        CitationWithoutSource copy = new CitationWithoutSource(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        CitationWithoutSource orig = new CitationWithoutSource();\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        orig.getDescription(true).add(\"Description Line 1\");\n+        orig.getDescription().add(\"Description Line 2\");\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        List<String> ls = new ArrayList<>();\n+        ls.add(\"Line 1\");\n+        ls.add(\"Line 2\");\n+        ls.add(\"Line 3\");\n+        orig.getTextFromSource(true).add(ls);\n+        CitationWithoutSource copy = new CitationWithoutSource(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.getTextFromSource().get(0).set(0, \"XXXXXXX\");\n+        assertFalse(\"Copy shouldn't match when original is changed\", orig.equals(copy));\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Corporation(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Corporation orig = new Corporation();\n+        Corporation copy = new Corporation(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Corporation orig = new Corporation();\n+        Address a = new Address();\n+        a.setAddr1(\"ZZZ\");\n+        a.setCity(\"YYY\");\n+        a.setStateProvince(\"XXX\");\n+        a.setCountry(\"WWW\");\n+        orig.setAddress(a);\n+        orig.setBusinessName(\"Bob's Genalogy Shop\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        orig.getFaxNumbers(true).add(new StringWithCustomFacts(\"555-1212\"));\n+        orig.getPhoneNumbers(true).add(new StringWithCustomFacts(\"555-1313\"));\n+        orig.getWwwUrls(true).add(new StringWithCustomFacts(\"www.nowhere.com\"));\n+        orig.getEmails(true).add(new StringWithCustomFacts(\"nobody@nowwhere.com\"));\n+        Corporation copy = new Corporation(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new EventRecorded(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        EventRecorded orig = new EventRecorded();\n+        EventRecorded copy = new EventRecorded(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        EventRecorded orig = new EventRecorded();\n+        orig.setDatePeriod(\"AAA\");\n+        orig.setEventType(\"BBB\");\n+        orig.setJurisdiction(\"CCC\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        EventRecorded copy = new EventRecorded(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.setDatePeriod((String) null);\n+        orig.getJurisdiction().setValue(\"DDD\");\n+        assertNotNull(\"Copy should not change when original does\", copy.getDatePeriod());\n+        assertEquals(\"CCC\", copy.getJurisdiction().getValue());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new FamilyChild(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        FamilyChild orig = new FamilyChild();\n+        FamilyChild copy = new FamilyChild(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        FamilyChild orig = new FamilyChild();\n+        orig.setAdoptedBy(AdoptedByWhichParent.WIFE);\n+        Family f = new Family();\n+        Individual h = new Individual();\n+        h.setXref(\"@I1@\");\n+        f.setHusband(new IndividualReference(h));\n+        Individual w = new Individual();\n+        w.setXref(\"@I2@\");\n+        f.setWife(new IndividualReference(w));\n+        Individual k = new Individual();\n+        k.setXref(\"@I3@\");\n+        f.getChildren(true).add(new IndividualReference(k));\n+        orig.setFamily(f);\n+        orig.setPedigree(\"OMG\");\n+        orig.setStatus(\"AOK\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        FamilyChild copy = new FamilyChild(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Family(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Family orig = new Family();\n+        Family copy = new Family(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithLoadedFile() throws IOException, GedcomParserException {\n+        Gedcom loadedGedcom = getLoadedGedcom();\n+        for (Family original : loadedGedcom.getFamilies().values()) {\n+            Family copy = new Family(original);\n+            assertNotSame(original, copy);\n+            assertEquals(original, copy);\n+        }\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Family orig = new Family();\n+        orig.setAutomatedRecordId(\"123\");\n+        ChangeDate cd = new ChangeDate();\n+        cd.setTime(\"12:21a\");\n+        orig.setChangeDate(cd);\n+        orig.setNumChildren(\"1\");\n+        Individual h = new Individual();\n+        h.setXref(\"@I1@\");\n+        orig.setHusband(new IndividualReference(h));\n+        Individual w = new Individual();\n+        w.setXref(\"@I2@\");\n+        orig.setWife(new IndividualReference(w));\n+        Individual k = new Individual();\n+        k.setXref(\"@I3@\");\n+        orig.getChildren(true).add(new IndividualReference(k));\n+        orig.setRecFileNumber(\"123\");\n+        orig.setRestrictionNotice(\"UNRESTRICTED\");\n+        orig.getCitations(true).add(getTestCitation());\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        FamilyEvent e = new FamilyEvent();\n+        e.setType(FamilyEventType.ANNULMENT);\n+        e.setDate(\"10 OCT 1910\");\n+        e.setDescription(\"Never happened\");\n+        orig.getEvents(true).add(e);\n+        LdsSpouseSealing lss = new LdsSpouseSealing();\n+        lss.setStatus(\"Complete\");\n+        orig.getLdsSpouseSealings(true).add(lss);\n+        Multimedia mm = new Multimedia();\n+        mm.getBlob(true).add(\"qwpeoklskfsekrpweoalksfnsleorpwqoewklsfjlskjfpoeriwpeori\");\n+        MultimediaReference mr = new MultimediaReference(mm);\n+        orig.getMultimedia(true).add(mr);\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        Submitter s = new Submitter();\n+        s.setName(\"Eloise /King/\");\n+        orig.getSubmitters(true).add(new SubmitterReference(s));\n+        UserReference u = new UserReference();\n+        u.setType(\"Any type you like\");\n+        orig.getUserReferences(true).add(u);\n+        Family copy = new Family(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new FamilyEvent(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        FamilyEvent orig = new FamilyEvent();\n+        FamilyEvent copy = new FamilyEvent(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        FamilyEvent orig = new FamilyEvent();\n+        orig.setAddress(getTestAddress());\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        orig.getFaxNumbers(true).add(new StringWithCustomFacts(\"555-1212\"));\n+        orig.getPhoneNumbers(true).add(new StringWithCustomFacts(\"555-1313\"));\n+        orig.getWwwUrls(true).add(new StringWithCustomFacts(\"www.nowhere.com\"));\n+        orig.getEmails(true).add(new StringWithCustomFacts(\"nobody@nowwhere.com\"));\n+        orig.setAge(\"1\");\n+        orig.setCause(\"Just because\");\n+        orig.setDate(\"03 MAR 1903\");\n+        orig.setDescription(\"That thing with the stuff\");\n+        orig.setHusbandAge(\"123\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Right there\");\n+        orig.setPlace(p);\n+        orig.setReligiousAffiliation(\"None\");\n+        orig.setRespAgency(\"The Avengers\");\n+        orig.setRestrictionNotice(\"Don't tell anyone....sssssshhh!\");\n+        orig.setSubType(\"mnbvcxz\");\n+        orig.setType(FamilyEventType.EVENT);\n+        orig.getCitations(true).add(getTestCitation());\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        orig.setWifeAge(\"124\");\n+        orig.setYNull(\"Y\");\n+        Multimedia m = new Multimedia();\n+        m.setXref(\"@M123@\");\n+        orig.getMultimedia(true).add(new MultimediaReference(m));\n+        FamilyEvent copy = new FamilyEvent(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        e1.setAge(\"Foo\");\n+        e2.setAge(\"Foo\");\n+        e1.setCause(\"Foo\");\n+        e2.setCause(\"Foo\");\n+        e1.setDate(\"Foo\");\n+        e2.setDate(\"Foo\");\n+        e1.setDescription(\"Foo\");\n+        e2.setDescription(\"Foo\");\n+        e1.setHusbandAge(\"Foo\");\n+        e2.setHusbandAge(\"Foo\");\n+        e1.getNoteStructures(true);\n+        e2.getNoteStructures(true);\n+        e1.setRespAgency(\"Foo\");\n+        e2.setRespAgency(\"Foo\");\n+        e1.setSubType(\"Foo\");\n+        e2.setSubType(\"Foo\");\n+        e1.setWifeAge(\"Foo\");\n+        e2.setWifeAge(\"Foo\");\n+        e1.setYNull(\"Foo\");\n+        e2.setYNull(\"Foo\");\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new FamilySpouse(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        FamilySpouse orig = new FamilySpouse();\n+        FamilySpouse copy = new FamilySpouse(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        FamilySpouse orig = new FamilySpouse();\n+        Family f = new Family();\n+        Individual h = new Individual();\n+        h.setXref(\"@I1@\");\n+        f.setHusband(new IndividualReference(h));\n+        Individual w = new Individual();\n+        w.setXref(\"@I2@\");\n+        f.setWife(new IndividualReference(w));\n+        Individual k = new Individual();\n+        k.setXref(\"@I3@\");\n+        f.getChildren(true).add(new IndividualReference(k));\n+        orig.setFamily(f);\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        FamilySpouse copy = new FamilySpouse(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        family1.setHusband(new IndividualReference(new Individual()));\n+        family1.getHusband().getIndividual().getNames(true).add(hn1);\n+        family1.getHusband().getIndividual().getFamiliesWhereSpouse(true).add(fs1);\n+        family1.setWife(new IndividualReference(new Individual()));\n+        family1.getWife().getIndividual().getNames(true).add(wn1);\n+        family1.getWife().getIndividual().getFamiliesWhereSpouse(true).add(fs1);\n+        family2.setHusband(new IndividualReference(new Individual()));\n+        family2.getHusband().getIndividual().getNames(true).add(hn2);\n+        family2.getHusband().getIndividual().getFamiliesWhereSpouse(true).add(fs2);\n+        family2.setWife(new IndividualReference(new Individual()));\n+        family2.getWife().getIndividual().getNames(true).add(wn2);\n+        family2.getWife().getIndividual().getFamiliesWhereSpouse(true).add(fs2);\n+        assertEquals(\"Family [husband=IndividualReference [individual=Fred /Astaire/, spouse of Ginger /Rogers/, ], \"\n+                + \"wife=IndividualReference [individual=Ginger /Rogers/, spouse of Fred /Astaire/, ], ]\", family1.toString());\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new FileReference(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        FileReference orig = new FileReference();\n+        FileReference copy = new FileReference(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        FileReference orig = new FileReference();\n+        orig.setFormat(\"AAA\");\n+        orig.setMediaType(\"BBB\");\n+        orig.setReferenceToFile(\"CCC\");\n+        orig.setTitle(\"DDD\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        FileReference copy = new FileReference(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.setTitle(\"XXX\");\n+        assertFalse(\"Copy shouldn't match if original changes\", orig.equals(copy));\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Gedcom(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Gedcom orig = new Gedcom();\n+        Gedcom copy = new Gedcom(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithLoadedFile() throws IOException, GedcomParserException {\n+        Gedcom loadedGedcom = getLoadedGedcom();\n+        Gedcom copy = new Gedcom(loadedGedcom);\n+        assertEquals(loadedGedcom, copy);\n+        assertNotSame(loadedGedcom, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Gedcom orig = new Gedcom();\n+        Header hdr = new Header();\n+        hdr.setLanguage(\"Pig Latin\");\n+        orig.setHeader(hdr);\n+        Submission s = new Submission();\n+        s.setXref(\"@SBM1@\");\n+        s.setRecIdNumber(\"40404040\");\n+        orig.setSubmission(s);\n+        orig.setTrailer(new Trailer());\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        DateParser dp = new DateParser();\n+        IndividualFactory ifact = new IndividualFactory();\n+        FamilyFactory ffact = new FamilyFactory();\n+        Individual h = ifact.create(orig, \"Fred\", \"Frederickson\", Sex.MALE, dp.parse(\"01 JAN 1980\"), \"New Mexico\", new Date(),\n+                \"Antarctica\");\n+        Individual w = ifact.create(orig, \"Gladys\", \"Gladstone\", Sex.FEMALE, dp.parse(\"11 NOV 1979\"), \"Arizona\", null, null);\n+        Individual k = ifact.create(orig, \"Frank\", \"Frederickson\", Sex.MALE, dp.parse(\"6 JUN 2010\"), \"Wyoming\", null, null);\n+        ffact.create(orig, h, w, k);\n+        Multimedia m = new Multimedia();\n+        m.getBlob(true).add(\"wpeoirpweoirpwoirpwoeirpwoeirpwoeirwe\");\n+        orig.getMultimedia().put(m.getXref(), m);\n+        Source src = new Source();\n+        src.setXref(\"@SRC1@\");\n+        src.setRecIdNumber(\"987\");\n+        orig.getSources().put(src.getXref(), src);\n+        NoteRecord n = getTestNoteRecord();\n+        n.setXref(\"@N1@\");\n+        orig.getNotes().put(n.getXref(), n);\n+        Repository r = new Repository();\n+        r.setXref(\"@R1@\");\n+        r.setName(\"Repository of all truth and wisdom\");\n+        orig.getRepositories().put(r.getXref(), r);\n+        Submitter sbr = new Submitter();\n+        sbr.setXref(\"@SBR1@\");\n+        sbr.setName(\"Steve /Submitter/\");\n+        orig.getSubmitters().put(sbr.getXref(), sbr);\n+        Gedcom copy = new Gedcom(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new GedcomVersion(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        GedcomVersion orig = new GedcomVersion();\n+        GedcomVersion copy = new GedcomVersion(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        GedcomVersion orig = new GedcomVersion();\n+        orig.setGedcomForm(\"foo\");\n+        orig.setVersionNumber(SupportedVersion.V5_5);\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        GedcomVersion copy = new GedcomVersion(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        gv1.setGedcomForm(\"Frying Pan\");\n+        gv2.setGedcomForm(\"Frying Pan\");\n+        gv1.setGedcomForm(\"Frying Pan\");\n+        gv2.setGedcomForm(\"Frying Pan\");\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Header(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Header orig = new Header();\n+        Header copy = new Header(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Header orig = new Header();\n+        CharacterSet cs = new CharacterSet();\n+        cs.setCharacterSetName(\"AA\");\n+        cs.setVersionNum(\"1\");\n+        orig.setCharacterSet(cs);\n+        orig.setDate(\"5 MAY 1905\");\n+        orig.setDestinationSystem(\"Black Hole\");\n+        orig.setFileName(\"foo.ged\");\n+        GedcomVersion gv = new GedcomVersion();\n+        gv.setGedcomForm(\"XXX\");\n+        gv.setVersionNumber(SupportedVersion.V5_5_1);\n+        orig.setGedcomVersion(gv);\n+        orig.setLanguage(\"Klingon\");\n+        orig.setPlaceHierarchy(\"Solar System\");\n+        SourceSystem ss = new SourceSystem();\n+        ss.setProductName(\"gedcom4j\");\n+        orig.setSourceSystem(ss);\n+        Submission s = new Submission(\"@SBM123@\");\n+        s.setRecIdNumber(\"999\");\n+        orig.setSubmissionReference(new SubmissionReference(s));\n+        Submitter submitter = new Submitter();\n+        submitter.setName(\"Matt /Harrah/\");\n+        orig.setSubmitterReference(new SubmitterReference(submitter));\n+        orig.setTime(\"12:34pm\");\n+        orig.getCopyrightData(true).add(\"(c) 932 AD\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        Header copy = new Header(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new HeaderSourceData(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        HeaderSourceData orig = new HeaderSourceData();\n+        HeaderSourceData copy = new HeaderSourceData(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        HeaderSourceData orig = new HeaderSourceData();\n+        orig.setCopyright(\"(c) 1776 George Washington\");\n+        orig.setName(\"AAA\");\n+        orig.setPublishDate(\"04 APR 1804\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        HeaderSourceData copy = new HeaderSourceData(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        h1.setCopyright(\"Frying Pan\");\n+        h2.setCopyright(\"Frying Pan\");\n+        h1.setCopyright((String) null);\n+        h2.setCopyright((String) null);\n+        h1.setName((String) null);\n+        h2.setName((String) null);\n+        h1.setPublishDate(\"Frying Pan\");\n+        h2.setPublishDate(\"Frying Pan\");\n+        h1.setPublishDate((String) null);\n+        h2.setPublishDate((String) null);\n+        h1.setCopyright(\"Frying Pan\");\n+        h2.setCopyright(\"Frying Pan\");\n+        h1.setCopyright((String) null);\n+        h2.setCopyright((String) null);\n+        h1.setName((String) null);\n+        h2.setName((String) null);\n+        h1.setPublishDate(\"Frying Pan\");\n+        h2.setPublishDate(\"Frying Pan\");\n+        h1.setPublishDate((String) null);\n+        h2.setPublishDate((String) null);\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new IndividualAttribute(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        IndividualAttribute orig = new IndividualAttribute();\n+        IndividualAttribute copy = new IndividualAttribute(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        IndividualAttribute orig = new IndividualAttribute();\n+        Address a = new Address();\n+        a.setAddr1(\"AAA\");\n+        orig.setAddress(a);\n+        orig.setAge(\"BBB\");\n+        orig.setCause(\"CCC\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        orig.setDate(\"DDD\");\n+        orig.setDescription(\"EEE\");\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        Place p = new Place();\n+        p.setLatitude(\"50.2N\");\n+        p.setLongitude(\"172.4W\");\n+        orig.setPlace(p);\n+        orig.setReligiousAffiliation(\"FFF\");\n+        orig.setRespAgency(\"GGG\");\n+        orig.setSubType(\"HHH\");\n+        orig.setYNull(\"Y\");\n+        IndividualAttribute copy = new IndividualAttribute(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        i1.setAge(\"One\");\n+        i2.setAge(\"One\");\n+        i1.setCause(\"Two\");\n+        i2.setCause(\"Two\");\n+        i1.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        i2.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        i1.setDate(\"Three\");\n+        i2.setDate(\"Three\");\n+        i1.setDescription(\"Four\");\n+        i2.setDescription(\"Four\");\n+        i1.getEmails(true).add(new StringWithCustomFacts(\"Five\"));\n+        i2.getEmails(true).add(new StringWithCustomFacts(\"Five\"));\n+        i1.getFaxNumbers(true).add(new StringWithCustomFacts(\"Six\"));\n+        i2.getFaxNumbers(true).add(new StringWithCustomFacts(\"Six\"));\n+        i1.getMultimedia(true).add(new MultimediaReference(new Multimedia()));\n+        i2.getMultimedia(true).add(new MultimediaReference(new Multimedia()));\n+        i1.getNoteStructures(true).add(new NoteStructure());\n+        i2.getNoteStructures(true).add(new NoteStructure());\n+        i1.getPhoneNumbers(true).add(new StringWithCustomFacts(\"Seven\"));\n+        i2.getPhoneNumbers(true).add(new StringWithCustomFacts(\"Seven\"));\n+        i1.setReligiousAffiliation(\"Eight\");\n+        i2.setReligiousAffiliation(\"Eight\");\n+        i1.setRespAgency(\"Nine\");\n+        i2.setRespAgency(\"Nine\");\n+        i1.setRestrictionNotice(\"Ten\");\n+        i2.setRestrictionNotice(\"Ten\");\n+        i1.setSubType(\"Eleven\");\n+        i2.setSubType(\"Eleven\");\n+        i1.getWwwUrls(true).add(new StringWithCustomFacts(\"Twelve\"));\n+        i2.getWwwUrls(true).add(new StringWithCustomFacts(\"Twelve\"));\n+        i1.setYNull(\"Thirteen\");\n+        i2.setYNull(\"Thirteen\");\n+        i1.setAge(\"One\");\n+        i2.setAge(\"One\");\n+        i1.setCause(\"Two\");\n+        i2.setCause(\"Two\");\n+        i1.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        i2.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        i1.setDate(\"Three\");\n+        i2.setDate(\"Three\");\n+        i1.setDescription(\"Four\");\n+        i2.setDescription(\"Four\");\n+        i1.getEmails(true).add(new StringWithCustomFacts(\"Five\"));\n+        i2.getEmails(true).add(new StringWithCustomFacts(\"Five\"));\n+        i1.getFaxNumbers(true).add(new StringWithCustomFacts(\"Six\"));\n+        i2.getFaxNumbers(true).add(new StringWithCustomFacts(\"Six\"));\n+        i1.getMultimedia(true).add(new MultimediaReference(new Multimedia()));\n+        i2.getMultimedia(true).add(new MultimediaReference(new Multimedia()));\n+        i1.getNoteStructures(true).add(new NoteStructure());\n+        i2.getNoteStructures(true).add(new NoteStructure());\n+        i1.getPhoneNumbers(true).add(new StringWithCustomFacts(\"Seven\"));\n+        i2.getPhoneNumbers(true).add(new StringWithCustomFacts(\"Seven\"));\n+        i1.setReligiousAffiliation(\"Eight\");\n+        i2.setReligiousAffiliation(\"Eight\");\n+        i1.setRespAgency(\"Nine\");\n+        i2.setRespAgency(\"Nine\");\n+        i1.setRestrictionNotice(\"Ten\");\n+        i2.setRestrictionNotice(\"Ten\");\n+        i1.setSubType(\"Eleven\");\n+        i2.setSubType(\"Eleven\");\n+        i1.getWwwUrls(true).add(new StringWithCustomFacts(\"Twelve\"));\n+        i2.getWwwUrls(true).add(new StringWithCustomFacts(\"Twelve\"));\n+        i1.setYNull(\"Thirteen\");\n+        i2.setYNull(\"Thirteen\");\n+        i.setAge(\"One\");\n+        i.setCause(\"Two\");\n+        i.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        i.setDate(\"Three\");\n+        i.setDescription(\"Four\");\n+        i.getEmails(true).add(new StringWithCustomFacts(\"Five\"));\n+        i.getFaxNumbers(true).add(new StringWithCustomFacts(\"Six\"));\n+        i.getMultimedia(true).add(new MultimediaReference(new Multimedia()));\n+        i.getNoteStructures(true).add(new NoteStructure());\n+        i.getPhoneNumbers(true).add(new StringWithCustomFacts(\"Seven\"));\n+        i.setReligiousAffiliation(\"Eight\");\n+        i.setRespAgency(\"Nine\");\n+        i.setRestrictionNotice(\"Ten\");\n+        i.setSubType(\"Eleven\");\n+        i.getWwwUrls(true).add(new StringWithCustomFacts(\"Twelve\"));\n+        i.setYNull(\"Thirteen\");\n+        assertEquals(\"IndividualAttribute [type=Fact, age=One, cause=Two, citations=[CitationWithoutSource []], date=Three, \"\n+                + \"description=Four, multimedia=[MultimediaReference [multimedia=Multimedia [], ]], \"\n+                + \"noteStructures=[NoteStructure []], place=Place [], religiousAffiliation=Eight, respAgency=Nine, \"\n+                + \"restrictionNotice=Ten, subType=Eleven, yNull=Thirteen, address=Address [], emails=[Five], faxNumbers=[Six], \"\n+                + \"phoneNumbers=[Seven], wwwUrls=[Twelve], customFacts=[CustomFact [tag=_FOO, ]]]\", i.toString());\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Individual(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Individual orig = new Individual();\n+        Individual copy = new Individual(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithLoadedFile() throws IOException, GedcomParserException {\n+        Gedcom loadedGedcom = getLoadedGedcom();\n+        for (Individual original : loadedGedcom.getIndividuals().values()) {\n+            Individual copy = new Individual(original);\n+            assertNotSame(original, copy);\n+            assertEquals(original, copy);\n+        }\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Individual orig = new Individual();\n+        orig.setAddress(getTestAddress());\n+        ChangeDate cd = new ChangeDate();\n+        cd.setDate(\"06 JUN 1906\");\n+        orig.setChangeDate(cd);\n+        orig.setRecIdNumber(\"321\");\n+        orig.setXref(\"@I1@\");\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        orig.getFaxNumbers(true).add(new StringWithCustomFacts(\"555-1212\"));\n+        orig.getPhoneNumbers(true).add(new StringWithCustomFacts(\"555-1313\"));\n+        orig.getWwwUrls(true).add(new StringWithCustomFacts(\"www.nowhere.net\"));\n+        orig.getEmails(true).add(new StringWithCustomFacts(\"nobody@nowwhere.net\"));\n+        orig.setAncestralFileNumber(\"LLL\");\n+        orig.setPermanentRecFileNumber(\"MMM\");\n+        orig.setRestrictionNotice(\"RESTRICTED\");\n+        orig.setSex(\"M\");\n+        orig.getAliases(true).add(new StringWithCustomFacts(\"Grace\"));\n+        Submitter s = new Submitter();\n+        s.setName(\"Harry\");\n+        orig.getAncestorInterest(true).add(s);\n+        Association a = new Association();\n+        a.setAssociatedEntityType(\"Fraternal\");\n+        orig.getAssociations(true).add(a);\n+        IndividualAttribute ia = new IndividualAttribute();\n+        ia.setType(IndividualAttributeType.FACT);\n+        ia.setSubType(\"Favorite color\");\n+        ia.setDescription(\"Green\");\n+        orig.getAttributes(true).add(ia);\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        orig.getCitations(true).add(getTestCitation());\n+        orig.getDescendantInterest(true).add(s);\n+        IndividualEvent e = new IndividualEvent();\n+        e.setType(IndividualEventType.EVENT);\n+        e.setSubType(\"Stubbed toe\");\n+        e.setDate(\"8 AUG 1908\");\n+        orig.getEvents(true).add(e);\n+        FamilyChild fc = new FamilyChild();\n+        orig.getFamiliesWhereChild(true).add(fc);\n+        fc.setFamily(new Family());\n+        FamilySpouse fs = new FamilySpouse();\n+        fs.setFamily(new Family());\n+        orig.getFamiliesWhereSpouse(true).add(fs);\n+        LdsIndividualOrdinance lio = new LdsIndividualOrdinance();\n+        lio.setDate(\"09 SEP 1909\");\n+        orig.getLdsIndividualOrdinances(true).add(lio);\n+        Multimedia m = new Multimedia();\n+        m.setXref(\"@M1@\");\n+        orig.getMultimedia(true).add(new MultimediaReference(m));\n+        PersonalName pn = new PersonalName();\n+        pn.setBasic(\"Gloria /Gleeson/\");\n+        orig.getNames(true).add(pn);\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        Submitter sbm = new Submitter();\n+        sbm.setName(\"Paul /Paulson/\");\n+        orig.getSubmitters(true).add(sbm);\n+        UserReference u = new UserReference();\n+        u.setReferenceNum(\"12345\");\n+        orig.getUserReferences(true).add(u);\n+        Individual copy = new Individual(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new IndividualEvent(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        IndividualEvent orig = new IndividualEvent();\n+        IndividualEvent copy = new IndividualEvent(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        IndividualEvent orig = new IndividualEvent();\n+        orig.setAddress(getTestAddress());\n+        orig.setAge(\"890\");\n+        orig.setCause(\"Mom said so\");\n+        orig.setDate(\"04 SEP 1905\");\n+        orig.setDescription(\"It was glorious.\");\n+        FamilyChild fc = new FamilyChild();\n+        fc.setStatus(\"XXX\");\n+        orig.setFamily(fc);\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        orig.getFaxNumbers(true).add(new StringWithCustomFacts(\"555-1212\"));\n+        orig.getPhoneNumbers(true).add(new StringWithCustomFacts(\"555-1313\"));\n+        orig.getWwwUrls(true).add(new StringWithCustomFacts(\"www.nowhere.com\"));\n+        orig.getEmails(true).add(new StringWithCustomFacts(\"nobody@nowwhere.com\"));\n+        Place p = new Place();\n+        p.setPlaceName(\"Charleston, WV\");\n+        orig.setPlace(p);\n+        orig.setReligiousAffiliation(\"XXX\");\n+        orig.setRespAgency(\"YYY\");\n+        orig.setRestrictionNotice(\"ZZZ\");\n+        orig.setSubType(\"!@#\");\n+        orig.setType(IndividualEventType.PROBATE);\n+        orig.setSubType(\"000\");\n+        IndividualEvent copy = new IndividualEvent(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    private static void addAttributeOfType(Individual i, IndividualAttributeType t) {\n+        IndividualAttribute e = new IndividualAttribute();\n+        e.setType(t);\n+        e.setDescription(\"Random text for uniqueness \" + Math.random());\n+        i.getAttributes(true).add(e);\n+    }\n+    private static void addBasicName(Individual i, String string) {\n+        PersonalName pn = new PersonalName();\n+        pn.setBasic(string);\n+        i.getNames(true).add(pn);\n+    }\n+    private static void addEventOfType(Individual i, IndividualEventType t) {\n+        IndividualEvent e = new IndividualEvent();\n+        e.setType(t);\n+        e.setDescription(\"Random text for uniqueness \" + Math.random());\n+        i.getEvents(true).add(e);\n+    }\n+    private static Individual getPerson(Gedcom gedcom, String surname, String givenName) {\n+        Individual result = new Finder(gedcom).findByName(surname, givenName).get(0);\n+        assertNotNull(\"Couldn't find \" + givenName + \" \" + surname + \" by name in the gedcom\", result);\n+        return result;\n+    }\n+        f.getFamily().setHusband(new IndividualReference(i));\n+        f.getFamily().setWife(new IndividualReference(new Individual()));\n+        addBasicName(f.getFamily().getWife().getIndividual(), \"Anna //\");\n+        f.getFamily().setHusband(new IndividualReference(i));\n+        f.getFamily().setWife(new IndividualReference(new Individual()));\n+        addBasicName(f.getFamily().getWife().getIndividual(), \"Elizabeth /Hofstadt/\");\n+        f.getFamily().setHusband(new IndividualReference(i));\n+        f.getFamily().setWife(new IndividualReference(new Individual()));\n+        addBasicName(f.getFamily().getWife().getIndividual(), \"Anna //\");\n+        f.getFamily().setHusband(new IndividualReference(i));\n+        f.getFamily().setWife(new IndividualReference(new Individual()));\n+        addBasicName(f.getFamily().getWife().getIndividual(), \"Elizabeth /Hofstadt/\");\n+        f.setHusband(new IndividualReference(i1));\n+        f.getChildren(true).add(new IndividualReference(i2));\n+        birth.setDate(\"1/1/1950\");\n+        birth.setDate(\"1/1/1950\");\n+        death.setDate(\"12/31/1999\");\n+        death.setDate(\"12/31/1999\");\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new LdsIndividualOrdinance(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        LdsIndividualOrdinance orig = new LdsIndividualOrdinance();\n+        LdsIndividualOrdinance copy = new LdsIndividualOrdinance(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testValues() {\n+        LdsIndividualOrdinance orig = new LdsIndividualOrdinance();\n+        orig.setDate(\"A\");\n+        FamilyChild fc = new FamilyChild();\n+        fc.setStatus(\"B\");\n+        fc.setPedigree(\"C\");\n+        fc.setAdoptedBy(AdoptedByWhichParent.HUSB);\n+        Family f = new Family();\n+        fc.setFamily(f);\n+        orig.setFamilyWhereChild(fc);\n+        LdsIndividualOrdinance copy = new LdsIndividualOrdinance(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.getFamilyWhereChild().setAdoptedBy((String) null);\n+        assertFalse(\"Copy shoul not match if original is changed\", orig.equals(copy));\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new LdsSpouseSealing(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        LdsSpouseSealing orig = new LdsSpouseSealing();\n+        LdsSpouseSealing copy = new LdsSpouseSealing(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testValues() {\n+        LdsSpouseSealing orig = new LdsSpouseSealing();\n+        orig.setDate(\"A\");\n+        orig.setPlace(\"B\");\n+        orig.setStatus(\"C\");\n+        orig.setStatus(\"D\");\n+        orig.getNoteStructures(true);\n+        orig.customFacts = null;\n+        LdsSpouseSealing copy = new LdsSpouseSealing(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        assertNotNull(orig.getNoteStructures());\n+        assertNotNull(copy.getNoteStructures());\n+        assertNull(orig.getCustomFacts());\n+        assertNull(copy.getCustomFacts());\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        l1.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        l2.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        l1.date = new StringWithCustomFacts(\"Frying Pan\");\n+        l2.date = new StringWithCustomFacts(\"Frying Pan\");\n+        l1.place = new StringWithCustomFacts(\"Howdy\");\n+        l2.place = new StringWithCustomFacts(\"Howdy\");\n+        l1.status = new StringWithCustomFacts(\"Test\");\n+        l2.status = new StringWithCustomFacts(\"Test\");\n+        l1.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        l2.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        l1.date = new StringWithCustomFacts(\"Frying Pan\");\n+        l2.date = new StringWithCustomFacts(\"Frying Pan\");\n+        l1.place = new StringWithCustomFacts(\"Howdy\");\n+        l2.place = new StringWithCustomFacts(\"Howdy\");\n+        l1.status = new StringWithCustomFacts(\"Test\");\n+        l2.status = new StringWithCustomFacts(\"Test\");\n+        l.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        l.date = new StringWithCustomFacts(\"Frying Pan\");\n+        l.place = new StringWithCustomFacts(\"Howdy\");\n+        l.status = new StringWithCustomFacts(\"Test\");\n+                + \"status=Test, customFacts=[CustomFact [tag=_FOO, ]]]\", l.toString());\n+    @Test\n+    public void testLines() {\n+        MultiStringWithCustomFacts orig = new MultiStringWithCustomFacts();\n+        orig.getLines(true).add(\"Line 1\");\n+        orig.getLines(true).add(\"Line 2\");\n+        orig.getLines(true).add(\"Line 3\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        MultiStringWithCustomFacts copy = new MultiStringWithCustomFacts(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.getLines().set(0, \"0th Line\");\n+        assertEquals(\"Copy should not change when original does\", \"Line 1\", copy.getLines().get(0));\n+        orig.getCustomFacts().clear();\n+        assertEquals(\"Copy should not change when original does\", \"_HOWDY\", copy.getCustomFacts().get(0).getTag());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testNull() {\n+        new MultiStringWithCustomFacts((MultiStringWithCustomFacts) null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        MultiStringWithCustomFacts orig = new MultiStringWithCustomFacts();\n+        MultiStringWithCustomFacts copy = new MultiStringWithCustomFacts(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Multimedia(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Multimedia orig = new Multimedia();\n+        Multimedia copy = new Multimedia(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Multimedia orig = new Multimedia();\n+        ChangeDate cd = new ChangeDate();\n+        cd.setDate(\"1 JAN 1911\");\n+        orig.setChangeDate(cd);\n+        orig.setContinuedObject(new MultimediaReference(new Multimedia()));\n+        orig.setEmbeddedMediaFormat(\"MPG\");\n+        orig.setEmbeddedTitle(\"Movie.mpg\");\n+        orig.setRecIdNumber(\"123\");\n+        orig.setXref(\"@M1@\");\n+        orig.getBlob(true).add(\"qqwpeoiqpwoeiqpoweiqpowiepqowiepqowiepqowi\");\n+        orig.getBlob().add(\"asdlkajsdlkajlaksjdlaksjdlaskjda\");\n+        orig.getBlob().add(\"zxmcnbzmxncbmxnvbmnxbx\");\n+        orig.getCitations(true).add(getTestCitation());\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        FileReference fr = new FileReference();\n+        fr.setFormat(\"MPG\");\n+        fr.setMediaType(\"Movie\");\n+        fr.setReferenceToFile(\"foo.mpg\");\n+        fr.setTitle(\"Super movie!\");\n+        orig.getFileReferences(true).add(fr);\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        UserReference u = new UserReference();\n+        u.setReferenceNum(\"123\");\n+        orig.getUserReferences(true).add(u);\n+        Multimedia copy = new Multimedia(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new MultimediaReference((MultimediaReference) null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        MultimediaReference orig = new MultimediaReference();\n+        MultimediaReference copy = new MultimediaReference(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        MultimediaReference orig = new MultimediaReference();\n+        orig.multimedia = new Multimedia();\n+        orig.multimedia.setEmbeddedTitle(\"Foo\");\n+        CustomFact ct = new CustomFact(\"_RRR\");\n+        ct.setDescription(\"SSS\");\n+        ct.setXref(\"@TTT@\");\n+        orig.getCustomFacts(true).add(ct);\n+        MultimediaReference copy = new MultimediaReference(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.setMultimedia(new Multimedia());\n+        assertEquals(\"Copy should not change if original does\", \"Foo\", copy.getMultimedia().getEmbeddedTitle().getValue());\n+    }\n+        nv1.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        nv1.getCustomFacts().clear();\n+        nv2.getCustomFacts(true).clear();\n+        nv1.variationType = new StringWithCustomFacts(\"Yo\");\n+        nv1.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        nv1.getCustomFacts().clear();\n+        nv2.getCustomFacts(true).clear();\n+        nv1.variationType = new StringWithCustomFacts(\"Yo\");\n+        nv.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        nv.variationType = new StringWithCustomFacts(\"All\");\n+        assertEquals(\"PersonalNameVariation [variation=Frying Pan, variationType=All, customFacts=[CustomFact [tag=_FOO, ]]]\", nv\n+                .toString());\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new NoteRecord((NoteRecord) null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        NoteRecord orig = new NoteRecord(\"@N1@\");\n+        NoteRecord copy = new NoteRecord(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testValues() {\n+        NoteRecord orig = new NoteRecord(\"@N1@\");\n+        ChangeDate changeDate = new ChangeDate();\n+        changeDate.setDate(\"01 JAN 1970\");\n+        orig.setChangeDate(changeDate);\n+        orig.setRecIdNumber(\"A\");\n+        orig.setXref(\"B\");\n+        orig.getLines(true).add(\"Line 1\");\n+        orig.getLines(true).add(\"Line 2\");\n+        orig.getLines(true).add(\"Line 3\");\n+        orig.getCitations(true).add(getTestCitation());\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        NoteRecord copy = new NoteRecord(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.getLines().set(0, \"0th Line\");\n+        assertEquals(\"Copy should not change when original does\", \"Line 1\", copy.getLines().get(0));\n+        orig.getCustomFacts().clear();\n+        assertEquals(\"Copy should not change when original does\", \"_HOWDY\", copy.getCustomFacts().get(0).getTag());\n+    }\n+    @Test\n+    public void testWithLoadedFile() throws IOException, GedcomParserException {\n+        Gedcom loadedGedcom = getLoadedGedcom();\n+        for (NoteRecord original : loadedGedcom.getNotes().values()) {\n+            NoteRecord copy = new NoteRecord(original);\n+            assertNotSame(original, copy);\n+            assertEquals(original, copy);\n+        }\n+    }\n+    @Test\n+    public void testLines() {\n+        NoteStructure orig = new NoteStructure();\n+        orig.getLines(true).add(\"Line 1\");\n+        orig.getLines(true).add(\"Line 2\");\n+        orig.getLines(true).add(\"Line 3\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        NoteStructure copy = new NoteStructure(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.getLines().set(0, \"0th Line\");\n+        assertEquals(\"Copy should not change when original does\", \"Line 1\", copy.getLines().get(0));\n+        orig.getCustomFacts().clear();\n+        assertEquals(\"Copy should not change when original does\", \"_HOWDY\", copy.getCustomFacts().get(0).getTag());\n+    }\n+    @Test\n+    public void testNoteRecordReference() {\n+        NoteStructure orig = new NoteStructure();\n+        orig.setNoteReference(new NoteRecord(\"@N0@\"));\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        NoteStructure copy = new NoteStructure(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.setNoteReference(new NoteRecord(\"@N9999999@\"));\n+        assertEquals(\"Copy should not change when original does\", \"@N0@\", copy.getNoteReference().getXref());\n+        orig.getCustomFacts().clear();\n+        assertEquals(\"Copy should not change when original does\", \"_HOWDY\", copy.getCustomFacts().get(0).getTag());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testNull() {\n+        new NoteStructure(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        NoteStructure orig = new NoteStructure();\n+        NoteStructure copy = new NoteStructure(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new PersonalName(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        PersonalName orig = new PersonalName();\n+        PersonalName copy = new PersonalName(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        PersonalName orig = new PersonalName();\n+        orig.setBasic(\"Qwerty I /Op/\");\n+        orig.setGivenName(\"Qwerty I\");\n+        orig.setNickname(\"Shifty\");\n+        orig.setPrefix(\"Prof.\");\n+        orig.setSuffix(\"III\");\n+        orig.setSurname(\"Op\");\n+        orig.setSurnamePrefix(\"[]\");\n+        orig.setType(\"immigrant\");\n+        orig.getSurnamePrefix().getCustomFacts(true).add(getTestCustomFact());\n+        orig.getCitations(true).add(getTestCitation());\n+        PersonalName copy = new PersonalName(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.getSurnamePrefix().getCustomFacts().clear();\n+        assertFalse(\"Copy shouldn't match if original changes\", orig.equals(copy));\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new PersonalNameVariation(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        PersonalNameVariation orig = new PersonalNameVariation();\n+        PersonalNameVariation copy = new PersonalNameVariation(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        PersonalNameVariation orig = new PersonalNameVariation();\n+        orig.setGivenName(\"Gilbert\");\n+        orig.setNickname(\"Gilly\");\n+        orig.setPrefix(\"Dr.\");\n+        orig.setSuffix(\"Jr.\");\n+        orig.setSurname(\"Gilbertson\");\n+        orig.setSurnamePrefix(\"del\");\n+        orig.setVariation(\"gilburtson\");\n+        orig.setVariationType(\"foo\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        orig.getCitations(true).add(getTestCitation());\n+        PersonalNameVariation copy = new PersonalNameVariation(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        pnv1.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        pnv1.getCustomFacts().clear();\n+        pnv2.getCustomFacts(true).clear();\n+        pnv1.setGivenName(\"Yo\");\n+        pnv1.setGivenName((String) null);\n+        pnv1.setNickname(\"Yo\");\n+        pnv1.setNickname((String) null);\n+        pnv1.getNoteStructures(true).add(new NoteStructure());\n+        pnv1.getNoteStructures().clear();\n+        pnv2.getNoteStructures(true).clear();\n+        pnv1.setPrefix(\"Yo\");\n+        pnv1.setPrefix((String) null);\n+        pnv1.setSuffix(\"Yo\");\n+        pnv1.setSuffix((String) null);\n+        pnv1.setSurname(\"Yo\");\n+        pnv1.setSurname((String) null);\n+        pnv1.setSurnamePrefix(\"Yo\");\n+        pnv1.setSurnamePrefix((String) null);\n+        pnv1.variationType = new StringWithCustomFacts(\"Yo\");\n+        pnv1.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        pnv1.getCustomFacts().clear();\n+        pnv2.getCustomFacts(true).clear();\n+        pnv1.setGivenName(\"Yo\");\n+        pnv1.setGivenName((String) null);\n+        pnv1.setNickname(\"Yo\");\n+        pnv1.setNickname((String) null);\n+        pnv1.getNoteStructures(true).add(new NoteStructure());\n+        pnv1.getNoteStructures().clear();\n+        pnv2.getNoteStructures(true).clear();\n+        pnv1.setPrefix(\"Yo\");\n+        pnv1.setPrefix((String) null);\n+        pnv1.setSuffix(\"Yo\");\n+        pnv1.setSuffix((String) null);\n+        pnv1.setSurname(\"Yo\");\n+        pnv1.setSurname((String) null);\n+        pnv1.setSurnamePrefix(\"Yo\");\n+        pnv1.setSurnamePrefix((String) null);\n+        pnv1.variationType = new StringWithCustomFacts(\"Yo\");\n+        pnv.getCustomFacts(true).add(new CustomFact(\"_FOO\"));\n+        pnv.setGivenName(\"Now\");\n+        pnv.setNickname(\"Is\");\n+        pnv.getNoteStructures(true).add(new NoteStructure());\n+        pnv.setSuffix(\"The\");\n+        pnv.setSurname(\"Time\");\n+        pnv.setSurnamePrefix(\"For\");\n+        pnv.variationType = new StringWithCustomFacts(\"All\");\n+                \"PersonalNameVariation [givenName=Now, nickname=Is, noteStructures=[NoteStructure []], suffix=The, surname=Time, surnamePrefix=For, \"\n+                        + \"variation=Frying Pan, variationType=All, customFacts=[CustomFact [tag=_FOO, ]]]\", pnv.toString());\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Place(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Place orig = new Place();\n+        Place copy = new Place(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Place orig = new Place();\n+        orig.setLatitude(\"38N\");\n+        orig.setLatitude(\"175W\");\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        orig.setPlaceFormat(\"FooFormat\");\n+        orig.setPlaceName(\"Some place\");\n+        orig.getCitations(true).add(getTestCitation());\n+        Place copy = new Place(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new PlaceNameVariation(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        PlaceNameVariation orig = new PlaceNameVariation();\n+        PlaceNameVariation copy = new PlaceNameVariation(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        PlaceNameVariation orig = new PlaceNameVariation();\n+        orig.setVariation(\"FryingPan\");\n+        orig.setVariationType(\"VWXYZ\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        PlaceNameVariation copy = new PlaceNameVariation(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new RepositoryCitation(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        RepositoryCitation orig = new RepositoryCitation();\n+        RepositoryCitation copy = new RepositoryCitation(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        RepositoryCitation orig = new RepositoryCitation();\n+        orig.setRepositoryXref(\"ABC\");\n+        NoteStructure n = new NoteStructure();\n+        n.getLines(true).add(\"Frying Pan\");\n+        orig.getNoteStructures(true).add(n);\n+        RepositoryCitation copy = new RepositoryCitation(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.getNoteStructures().clear();\n+        assertFalse(\"Copy should not change when original changes\", copy.getNoteStructures().isEmpty());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Repository(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Repository orig = new Repository();\n+        Repository copy = new Repository(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithLoadedFile() throws IOException, GedcomParserException {\n+        Gedcom loadedGedcom = getLoadedGedcom();\n+        for (Repository original : loadedGedcom.getRepositories().values()) {\n+            Repository copy = new Repository(original);\n+            assertNotSame(original, copy);\n+            assertEquals(original, copy);\n+        }\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Repository orig = new Repository();\n+        orig.setAddress(getTestAddress());\n+        ChangeDate cd = new ChangeDate();\n+        cd.setDate(\"04 APR 1904\");\n+        orig.setChangeDate(cd);\n+        orig.setName(\"Bob's Repository\");\n+        orig.setRecIdNumber(\"123\");\n+        orig.setXref(\"@R1@\");\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        orig.getFaxNumbers(true).add(new StringWithCustomFacts(\"555-1212\"));\n+        orig.getPhoneNumbers(true).add(new StringWithCustomFacts(\"555-1313\"));\n+        orig.getWwwUrls(true).add(new StringWithCustomFacts(\"www.nowhere.com\"));\n+        orig.getEmails(true).add(new StringWithCustomFacts(\"nobody@nowwhere.com\"));\n+        Repository copy = new Repository(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        r1.getEmails(true).add(new StringWithCustomFacts(\"Frying Pan\"));\n+        r2.getEmails(true).add(new StringWithCustomFacts(\"Frying Pan\"));\n+        r1.setName(\"Frying Pan\");\n+        r2.setName(\"Frying Pan\");\n+        r1.setName((String) null);\n+        r2.setName((String) null);\n+        r1.getNoteStructures(true).add(new NoteStructure());\n+        r2.getNoteStructures(true).add(new NoteStructure());\n+        r1.getNoteStructures().clear();\n+        r2.getNoteStructures().clear();\n+        r1.getPhoneNumbers(true).add(new StringWithCustomFacts(\"Frying Pan\"));\n+        r2.getPhoneNumbers(true).add(new StringWithCustomFacts(\"Frying Pan\"));\n+        r1.setRecIdNumber(\"Frying Pan\");\n+        r2.setRecIdNumber(\"Frying Pan\");\n+        r1.setRecIdNumber((String) null);\n+        r2.setRecIdNumber((String) null);\n+        r1.getEmails(true).add(new StringWithCustomFacts(\"Frying Pan\"));\n+        r2.getEmails(true).add(new StringWithCustomFacts(\"Frying Pan\"));\n+        r1.setName(\"Frying Pan\");\n+        r2.setName(\"Frying Pan\");\n+        r1.setName((String) null);\n+        r2.setName((String) null);\n+        r1.getNoteStructures(true).add(new NoteStructure());\n+        r2.getNoteStructures(true).add(new NoteStructure());\n+        r1.getNoteStructures().clear();\n+        r2.getNoteStructures().clear();\n+        r1.getPhoneNumbers(true).add(new StringWithCustomFacts(\"Frying Pan\"));\n+        r2.getPhoneNumbers(true).add(new StringWithCustomFacts(\"Frying Pan\"));\n+        r1.setRecIdNumber(\"Frying Pan\");\n+        r2.setRecIdNumber(\"Frying Pan\");\n+        r1.setRecIdNumber((String) null);\n+        r2.setRecIdNumber((String) null);\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new SourceCallNumber(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        SourceCallNumber orig = new SourceCallNumber();\n+        SourceCallNumber copy = new SourceCallNumber(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        SourceCallNumber orig = new SourceCallNumber();\n+        orig.setCallNumber(\"AAA\");\n+        orig.setMediaType(\"BBB\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        SourceCallNumber copy = new SourceCallNumber(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.setCallNumber(\"CCC\");\n+        assertFalse(\"Copy should not match when original is changed\", orig.equals(copy));\n+    }\n+        scn1.setCallNumber(\"Foo\");\n+        scn2.setCallNumber(\"Foo\");\n+        scn1.setMediaType(\"Foo\");\n+        scn2.setMediaType(\"Foo\");\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Source((Source) null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Source orig = new Source();\n+        Source copy = new Source(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithLoadedFile() throws IOException, GedcomParserException {\n+        Gedcom loadedGedcom = getLoadedGedcom();\n+        for (Source original : loadedGedcom.getSources().values()) {\n+            Source copy = new Source(original);\n+            assertNotSame(original, copy);\n+            assertEquals(original, copy);\n+        }\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Source orig = new Source();\n+        ChangeDate changeDate = new ChangeDate();\n+        changeDate.setDate(\"01 JAN 1970\");\n+        orig.setChangeDate(changeDate);\n+        orig.setRecIdNumber(\"A\");\n+        orig.setXref(\"B\");\n+        SourceData data = new SourceData();\n+        data.getNoteStructures(true).add(getTestNoteStructure());\n+        orig.setData(data);\n+        RepositoryCitation rc = new RepositoryCitation();\n+        rc.setRepositoryXref(\"@R123@\");\n+        SourceCallNumber scn = new SourceCallNumber();\n+        scn.setCallNumber(\"890\");\n+        rc.getCallNumbers(true).add(scn);\n+        orig.setRepositoryCitation(rc);\n+        Source copy = new Source(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new SourceData(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        SourceData orig = new SourceData();\n+        SourceData copy = new SourceData(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        SourceData orig = new SourceData();\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        EventRecorded e = new EventRecorded();\n+        e.setEventType(\"Foo\");\n+        orig.getEventsRecorded(true).add(e);\n+        orig.setRespAgency(\"Super Agency of Responsible Responsibility\");\n+        orig.getNoteStructures(true).add(getTestNoteStructure());\n+        SourceData copy = new SourceData(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new SourceSystem(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        SourceSystem orig = new SourceSystem();\n+        SourceSystem copy = new SourceSystem(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        SourceSystem orig = new SourceSystem();\n+        Corporation c = new Corporation();\n+        Address a = new Address();\n+        a.setAddr1(\"123 Main St.\");\n+        a.setCity(\"Anytown\");\n+        a.setStateProvince(\"ME\");\n+        a.setCountry(\"USA\");\n+        c.setAddress(a);\n+        c.setBusinessName(\"Bob's Genalogy Shop\");\n+        c.getCustomFacts(true).add(getTestCustomFact());\n+        c.getNoteStructures(true).add(getTestNoteStructure());\n+        orig.setCorporation(c);\n+        orig.setProductName(\"Genillogical\");\n+        HeaderSourceData hsd = new HeaderSourceData();\n+        hsd.setCopyright(\"(c) 1882 Bogus\");\n+        hsd.setName(\"Bob\");\n+        hsd.setPublishDate(\"5 MAY 1805\");\n+        orig.setSourceData(hsd);\n+        orig.setSystemId(\"MONKEY\");\n+        orig.setVersionNum(\"Banana\");\n+        SourceSystem copy = new SourceSystem(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+        ss1.setProductName(\"Frying Pan\");\n+        ss2.setProductName(\"Frying Pan\");\n+        ss1.setProductName((String) null);\n+        ss2.setProductName((String) null);\n+        ss1.setProductName(\"Frying Pan\");\n+        ss2.setProductName(\"Frying Pan\");\n+        s1.customFacts = null;\n+        s1.getCustomFacts(true).clear();\n+        s2.getCustomFacts(true).clear();\n+        s1.getMultimedia(true).add(new MultimediaReference(new Multimedia()));\n+        s2.getMultimedia(true).add(new MultimediaReference(new Multimedia()));\n+        s1.getNoteStructures(true).add(new NoteStructure());\n+        s2.getNoteStructures(true).add(new NoteStructure());\n+        s1.setOriginatorsAuthors(new MultiStringWithCustomFacts());\n+        s2.setOriginatorsAuthors(new MultiStringWithCustomFacts());\n+        s1.getOriginatorsAuthors().getLines(true).add(\"qweqwe\");\n+        s2.getOriginatorsAuthors().getLines(true).add(\"qweqwe\");\n+        s1.setPublicationFacts(new MultiStringWithCustomFacts());\n+        s2.setPublicationFacts(new MultiStringWithCustomFacts());\n+        assertEquals(s1, s2);\n+        s1.getPublicationFacts().getLines(true).add(\"foo\");\n+        assertTrue(s1.hashCode() != s2.hashCode());\n+        s2.getPublicationFacts().getLines(true).add(\"foo\");\n+        assertEquals(s1, s2);\n+        s1.setRecIdNumber(\"Foo\");\n+        assertTrue(s1.hashCode() != s2.hashCode());\n+        s2.setRecIdNumber(\"Foo\");\n+        s1.setSourceFiledBy(\"Bar\");\n+        assertTrue(s1.hashCode() != s2.hashCode());\n+        s2.setSourceFiledBy(\"Bar\");\n+        assertEquals(s1, s2);\n+        s1.setSourceText(new MultiStringWithCustomFacts());\n+        assertTrue(s1.hashCode() != s2.hashCode());\n+        s2.setSourceText(new MultiStringWithCustomFacts());\n+        assertEquals(s1, s2);\n+        s1.getSourceText().getLines(true).add(\"bar\");\n+        s2.getSourceText().getLines(true).add(\"bar\");\n+        s1.setTitle(new MultiStringWithCustomFacts());\n+        s2.setTitle(new MultiStringWithCustomFacts());\n+        s1.getTitle().getLines(true).add(\"baz\");\n+        s2.getTitle().getLines(true).add(\"baz\");\n+        s1.customFacts = null;\n+        s1.getCustomFacts(true).clear();\n+        s2.getCustomFacts(true).clear();\n+        s1.getMultimedia(true).add(new MultimediaReference(new Multimedia()));\n+        s2.getMultimedia(true).add(new MultimediaReference(new Multimedia()));\n+        s1.getNoteStructures(true).add(new NoteStructure());\n+        s2.getNoteStructures(true).add(new NoteStructure());\n+        s1.setOriginatorsAuthors(new MultiStringWithCustomFacts());\n+        s2.setOriginatorsAuthors(new MultiStringWithCustomFacts());\n+        s1.getOriginatorsAuthors().getLines(true).add(\"foo\");\n+        s2.getOriginatorsAuthors().getLines(true).add(\"foo\");\n+        s1.setPublicationFacts(new MultiStringWithCustomFacts());\n+        s2.setPublicationFacts(new MultiStringWithCustomFacts());\n+        assertEquals(s1.hashCode(), s2.hashCode());\n+        s1.getPublicationFacts().getLines(true).add(\"bar\");\n+        assertFalse(s1.hashCode() == s2.hashCode());\n+        s2.getPublicationFacts().getLines(true).add(\"bar\");\n+        assertEquals(s1.hashCode(), s2.hashCode());\n+        s1.setRecIdNumber(\"Foo\");\n+        assertFalse(s1.hashCode() == s2.hashCode());\n+        s2.setRecIdNumber(\"Foo\");\n+        s1.setSourceFiledBy(\"Bar\");\n+        assertFalse(s1.hashCode() == s2.hashCode());\n+        s2.setSourceFiledBy(\"Bar\");\n+        assertEquals(s1.hashCode(), s2.hashCode());\n+        s1.setSourceText(new MultiStringWithCustomFacts());\n+        assertFalse(s1.hashCode() == s2.hashCode());\n+        s2.setSourceText(new MultiStringWithCustomFacts());\n+        assertEquals(s1.hashCode(), s2.hashCode());\n+        s1.getSourceText().getLines(true).add(\"baz\");\n+        s2.getSourceText().getLines(true).add(\"baz\");\n+        s1.setTitle(new MultiStringWithCustomFacts());\n+        s2.setTitle(new MultiStringWithCustomFacts());\n+        s1.getTitle().getLines(true).add(\"bat\");\n+        s2.getTitle().getLines(true).add(\"bat\");\n+        s1.customFacts = null;\n+        s1.getNoteStructures(true).add(new NoteStructure());\n+        s1.setOriginatorsAuthors(new MultiStringWithCustomFacts());\n+        s1.getOriginatorsAuthors().getLines(true).clear();\n+        s1.setPublicationFacts(new MultiStringWithCustomFacts());\n+        s1.getPublicationFacts().getLines(true).clear();\n+        s1.setRecIdNumber(\"Foo\");\n+        s1.setSourceFiledBy(\"Bar\");\n+        s1.setSourceText(new MultiStringWithCustomFacts());\n+        s1.getSourceText().getLines(true).clear();\n+        s1.setTitle(new MultiStringWithCustomFacts());\n+        s1.getTitle().getLines(true).clear();\n+        assertEquals(\"Source [changeDate=ChangeDate [], data=SourceData [], multimedia=[], noteStructures=[NoteStructure []], \"\n+                + \"originatorsAuthors=MultiStringWithCustomFacts [lines=[], ], publicationFacts=MultiStringWithCustomFacts [lines=[], ], \"\n+                + \"recIdNumber=Foo, repositoryCitation=RepositoryCitation [], sourceFiledBy=Bar, \"\n+                + \"sourceText=MultiStringWithCustomFacts [lines=[], ], title=MultiStringWithCustomFacts [lines=[], ], \"\n+                + \"userReferences=[], xref=Foo, ]\", s1.toString());\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new StringTree(null);\n+    }\n+    @Test\n+    public void testFilledInMultiLevels() {\n+        StringTree orig = new StringTree();\n+        orig.setLevel(0);\n+        orig.setXref(\"A\");\n+        orig.setLineNum(1);\n+        orig.setTag(\"B\");\n+        orig.setValue(\"C\");\n+        StringTree l1 = new StringTree();\n+        orig.getChildren(true).add(l1);\n+        l1.setLevel(1);\n+        l1.setLineNum(2);\n+        l1.setTag(\"D\");\n+        l1.setParent(orig);\n+        l1.setValue(\"E\");\n+        StringTree l2 = new StringTree();\n+        l1.getChildren(true).add(l2);\n+        l2.setLevel(2);\n+        l2.setLevel(3);\n+        l2.setTag(\"F\");\n+        l2.setValue(\"G\");\n+        l2.setParent(l1);\n+        StringTree copy = new StringTree(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.getChildren().get(0), copy.getChildren().get(0));\n+        assertNotSame(orig.getChildren().get(0).getChildren().get(0), copy.getChildren().get(0).getChildren().get(0));\n+        assertEquals(orig.getChildren().get(0), copy.getChildren().get(0));\n+        assertNotSame(orig.getChildren().get(0).getChildren().get(0), copy.getChildren().get(0).getChildren().get(0));\n+        assertEquals(orig.toString(), copy.toString());\n+        assertNull(copy.getParent());\n+        assertEquals(copy, copy.getChildren().get(0).getParent());\n+        assertEquals(copy.getChildren().get(0), copy.getChildren().get(0).getChildren().get(0).getParent());\n+    }\n+    @Test\n+    public void testFilledInOneLevel() {\n+        StringTree orig = new StringTree();\n+        orig.setXref(\"Foo\");\n+        orig.setLevel(3);\n+        orig.setLineNum(-50);\n+        orig.setParent(orig);\n+        orig.setTag(\"FRyingPan\");\n+        orig.setValue(\"Cheese\");\n+        StringTree copy = new StringTree(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        assertNull(copy.getParent());\n+        assertNotNull(orig.getParent());\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        StringTree orig = new StringTree();\n+        StringTree copy = new StringTree(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+        st1.setXref(\"Frying Pan\");\n+        st2.setXref(\"Frying Pan\");\n+        st1.setXref(\"Frying Pan\");\n+        st2.setXref(\"Frying Pan\");\n+        st.setXref(\"Frying Pan\");\n+            assertNotNull(f.getCustomFacts(true).toString());\n+            assertFalse(0 == f.getCustomFacts().hashCode());\n+            assertNotNull(i.getCustomFacts(true).toString());\n+            assertFalse(0 == i.getCustomFacts().hashCode());\n+            assertNotNull(m.getCustomFacts(true).toString());\n+            assertFalse(0 == m.getCustomFacts().hashCode());\n+        for (NoteRecord n : g.getNotes().values()) {\n+            assertNotNull(n.getCustomFacts(true).toString());\n+            assertFalse(0 == n.getCustomFacts().hashCode());\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new StringWithCustomFacts((StringWithCustomFacts) null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        StringWithCustomFacts orig = new StringWithCustomFacts();\n+        StringWithCustomFacts copy = new StringWithCustomFacts(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithCustomFacts() {\n+        StringWithCustomFacts orig = new StringWithCustomFacts(\"FryingPan\");\n+        CustomFact cf = getTestCustomFact();\n+        cf.setDescription(\"UNCHANGED\");\n+        orig.getCustomFacts(true).add(cf);\n+        StringWithCustomFacts copy = new StringWithCustomFacts(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(\"FryingPan\", copy.getValue());\n+        orig.setValue(\"Not a Frying Pan anymore\");\n+        assertEquals(\"FryingPan\", copy.getValue());\n+        assertEquals(orig.getCustomFacts().get(0), copy.getCustomFacts().get(0));\n+        assertEquals(\"_HOWDY\", copy.getCustomFacts().get(0).getTag());\n+        cf.setDescription(\"CHANGED\");\n+        assertEquals(\"Copy should not change when original does\", \"UNCHANGED\", copy.getCustomFacts().get(0).getDescription()\n+                .getValue());\n+    }\n+    @Test\n+    public void testWithValues() {\n+        StringWithCustomFacts orig = new StringWithCustomFacts(\"FryingPan\");\n+        StringWithCustomFacts copy = new StringWithCustomFacts(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(\"FryingPan\", copy.getValue());\n+        orig.setValue(\"Not a Frying Pan anymore\");\n+        assertEquals(\"FryingPan\", copy.getValue());\n+    }\n+    @Test\n+    public void testToStringEmptyValueEmptyCustomFacts() {\n+        StringWithCustomFacts swct = new StringWithCustomFacts();\n+        swct.value = \"\";\n+        swct.getCustomFacts(true);\n+        assertEquals(\"\", \"\" + swct);\n+    }\n+    @Test\n+    public void testToStringEmptyValueNonEmptyCustomFacts() {\n+        StringWithCustomFacts swct = new StringWithCustomFacts();\n+        swct.value = \"\";\n+        swct.getCustomFacts(true).add(new CustomFact(\"_TEST\"));\n+        assertEquals(\"\", \"\" + swct);\n+    }\n+    @Test\n+    public void testToStringEmptyValueNullCustomFacts() {\n+        StringWithCustomFacts swct = new StringWithCustomFacts();\n+        swct.value = \"\";\n+        swct.customFacts = null;\n+        assertEquals(\"\", \"\" + swct);\n+        swct.getCustomFacts(true);\n+    }\n+    @Test\n+    public void testToStringNull() {\n+        StringWithCustomFacts swct = null;\n+        assertEquals(\"null\", \"\" + swct);\n+    }\n+    @Test\n+    public void testToStringNullValueEmptyCustomFacts() {\n+        StringWithCustomFacts swct = new StringWithCustomFacts();\n+        swct.value = null;\n+        swct.getCustomFacts(true);\n+        assertEquals(\"null\", \"\" + swct);\n+    }\n+    @Test\n+    public void testToStringNullValueNonEmptyCustomFacts() {\n+        StringWithCustomFacts swct = new StringWithCustomFacts();\n+        swct.value = null;\n+        swct.getCustomFacts(true).add(new CustomFact(\"_TEST\"));\n+        assertEquals(\"null\", \"\" + swct);\n+    }\n+    @Test\n+    public void testToStringNullValueNullCustomFacts() {\n+        StringWithCustomFacts swct = new StringWithCustomFacts();\n+        swct.value = null;\n+        swct.customFacts = null;\n+        assertEquals(\"null\", \"\" + swct);\n+        swct.getCustomFacts(true);\n+    }\n+    @Test\n+    public void testToStringWithValueEmptyCustomFacts() {\n+        StringWithCustomFacts swct = new StringWithCustomFacts();\n+        swct.value = \"Foo\";\n+        swct.getCustomFacts(true);\n+        assertEquals(\"Foo\", \"\" + swct);\n+    }\n+    @Test\n+    public void testToStringWithValueNonEmptyCustomFacts() {\n+        StringWithCustomFacts swct = new StringWithCustomFacts();\n+        swct.value = \"Foo\";\n+        swct.getCustomFacts(true).add(new CustomFact(\"_TEST\"));\n+        assertEquals(\"Foo\", \"\" + swct);\n+    }\n+    @Test\n+    public void testToStringWithValueNullCustomFacts() {\n+        StringWithCustomFacts swct = new StringWithCustomFacts();\n+        swct.value = \"Foo\";\n+        swct.customFacts = null;\n+        assertEquals(\"Foo\", \"\" + swct);\n+        swct.getCustomFacts(true);\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Submission((Submission) null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Submission orig = new Submission();\n+        Submission copy = new Submission(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Submission orig = new Submission();\n+        orig.setAncestorsCount(\"1\");\n+        orig.setDescendantsCount(\"2\");\n+        orig.setNameOfFamilyFile(\"AAA\");\n+        orig.setOrdinanceProcessFlag(\"BBB\");\n+        orig.setRecIdNumber(\"111\");\n+        Submitter s = new Submitter();\n+        s.setName(\"Sally /Submitter/\");\n+        orig.setSubmitter(s);\n+        orig.setTempleCode(\"CCC\");\n+        orig.setXref(\"@S098@\");\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        Submission copy = new Submission(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new Submitter(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        Submitter orig = new Submitter();\n+        Submitter copy = new Submitter(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithLoadedFile() throws IOException, GedcomParserException {\n+        Gedcom loadedGedcom = getLoadedGedcom();\n+        for (Submitter original : loadedGedcom.getSubmitters().values()) {\n+            Submitter copy = new Submitter(original);\n+            assertNotSame(original, copy);\n+            assertEquals(original, copy);\n+        }\n+    }\n+    @Test\n+    public void testWithValues() {\n+        Submitter orig = new Submitter();\n+        orig.setAddress(getTestAddress());\n+        orig.getFaxNumbers(true).add(new StringWithCustomFacts(\"555-1212\"));\n+        orig.getPhoneNumbers(true).add(new StringWithCustomFacts(\"555-1313\"));\n+        orig.getWwwUrls(true).add(new StringWithCustomFacts(\"www.nowhere.com\"));\n+        orig.getEmails(true).add(new StringWithCustomFacts(\"nobody@nowwhere.com\"));\n+        ChangeDate cd = new ChangeDate();\n+        cd.setDate(\"22 FEB 1922\");\n+        orig.setChangeDate(cd);\n+        orig.setName(\"Steve /Submitter/\");\n+        orig.setRecIdNumber(\"123\");\n+        orig.setRegFileNumber(\"345\");\n+        orig.setXref(\"@SBM029@\");\n+        orig.getLanguagePref(true).add(new StringWithCustomFacts(\"English\"));\n+        orig.getLanguagePref(true).add(new StringWithCustomFacts(\"German\"));\n+        orig.getCustomFacts(true).add(getTestCustomFact());\n+        Multimedia m = new Multimedia();\n+        m.setXref(\"@M123@\");\n+        m.setRecIdNumber(\"987\");\n+        orig.getMultimedia(true).add(new MultimediaReference(m));\n+        UserReference u = new UserReference();\n+        u.setReferenceNum(\"555\");\n+        orig.getUserReferences(true).add(u);\n+        Submitter copy = new Submitter(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new SubmitterReference((SubmitterReference) null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        SubmitterReference orig = new SubmitterReference();\n+        SubmitterReference copy = new SubmitterReference(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        SubmitterReference orig = new SubmitterReference();\n+        orig.submitter = new Submitter();\n+        orig.submitter.setName(\"Foo\");\n+        CustomFact ct = new CustomFact(\"_RRR\");\n+        ct.setDescription(\"SSS\");\n+        ct.setXref(\"@TTT@\");\n+        orig.getCustomFacts(true).add(ct);\n+        SubmitterReference copy = new SubmitterReference(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.setSubmitter(new Submitter());\n+        assertEquals(\"Copy should not change if original does\", \"Foo\", copy.getSubmitter().getName().getValue());\n+    }\n+        g.getHeader().setSubmissionReference(new SubmissionReference(g.getSubmission()));\n+        s.setName(\"Joe Tester\");\n+        g.getHeader().setSubmitterReference(new SubmitterReference(s));\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = NullPointerException.class)\n+    public void testCopyNull() {\n+        new UserReference(null);\n+    }\n+    @Test\n+    public void testSimplestPossible() {\n+        UserReference orig = new UserReference();\n+        UserReference copy = new UserReference(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+    }\n+    @Test\n+    public void testWithValues() {\n+        UserReference orig = new UserReference();\n+        orig.setReferenceNum(\"PPP\");\n+        orig.setType(\"QQQ\");\n+        CustomFact ct = new CustomFact(\"_RRR\");\n+        ct.setDescription(\"SSS\");\n+        ct.setXref(\"@TTT@\");\n+        orig.getCustomFacts(true).add(ct);\n+        UserReference copy = new UserReference(orig);\n+        assertEquals(orig, copy);\n+        assertNotSame(orig, copy);\n+        assertEquals(orig.toString(), copy.toString());\n+        orig.getReferenceNum().setValue(\"UUU\");\n+        assertEquals(\"Copy should not change if original does\", \"PPP\", copy.getReferenceNum().getValue());\n+    }\n+        \"PMD.ExcessiveImports\" })\n+    private Gedcom gedcomWithCustomTags;\n+    private Individual tom;\n+    private final FamilyHistorianAdapter fha = new FamilyHistorianAdapter();\n+    private Gedcom gedcomWithoutCustomTags;\n+    @Before\n+    public void setUp() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/famhistcustomtags.ged\");\n+        gedcomWithCustomTags = gp.getGedcom();\n+        assertNotNull(gedcomWithCustomTags);\n+        gp = new GedcomParser();\n+        gp.load(\"sample/famhistnocustomtags.ged\");\n+        gedcomWithoutCustomTags = gp.getGedcom();\n+        assertNotNull(gedcomWithoutCustomTags);\n+        assertNotSame(gedcomWithCustomTags, gedcomWithoutCustomTags);\n+        tom = gedcomWithCustomTags.getIndividuals().get(\"@I1@\");\n+        assertNotNull(tom);\n+    }\n+    @Test\n+    public void testAddNamedList() {\n+        List<CustomFact> lists = fha.getNamedLists(gedcomWithoutCustomTags);\n+        assertNotNull(lists);\n+        assertEquals(0, lists.size());\n+        CustomFact namedList = fha.newNamedList(\"Frying Pans\");\n+        fha.addNamedList(gedcomWithoutCustomTags, namedList);\n+        lists = fha.getNamedLists(gedcomWithoutCustomTags);\n+        assertNotNull(lists);\n+        assertEquals(1, lists.size());\n+        lists = fha.getNamedList(gedcomWithoutCustomTags, \"Frying Pans\");\n+        assertNotNull(lists);\n+        assertEquals(1, lists.size());\n+    }\n+    @Test\n+    public void testClearAddUnrelatedWitnesses() {\n+        IndividualEvent birth = tom.getEventsOfType(IndividualEventType.BIRTH).get(0);\n+        List<CustomFact> witnessNames = fha.getUnrelatedWitnesses(birth);\n+        assertNotNull(witnessNames);\n+        assertEquals(1, witnessNames.size());\n+        fha.removeUnrelatedWitnesses(birth);\n+        witnessNames = fha.getUnrelatedWitnesses(birth);\n+        assertNotNull(witnessNames);\n+        assertEquals(0, witnessNames.size());\n+        CustomFact uw = fha.newUnrelatedWitness(\"Robert Roberts\");\n+        fha.addUnrelatedWitness(birth, uw);\n+        witnessNames = fha.getUnrelatedWitnesses(birth);\n+        assertNotNull(witnessNames);\n+        assertEquals(\"Robert Roberts\", witnessNames.get(0).getDescription().getValue());\n+    }\n+    @Test\n+    public void testClearAddWitnessReferences() {\n+        IndividualEvent birth = tom.getEventsOfType(IndividualEventType.BIRTH).get(0);\n+        List<CustomFact> witnessRefs = fha.getWitnessReferences(birth);\n+        assertNotNull(witnessRefs);\n+        assertEquals(1, witnessRefs.size());\n+        fha.removeWitnessReferences(birth);\n+        witnessRefs = fha.getWitnessReferences(birth);\n+        assertNotNull(witnessRefs);\n+        assertEquals(0, witnessRefs.size());\n+        Individual theresa = gedcomWithCustomTags.getIndividuals().get(\"@I3@\");\n+        CustomFact wr = fha.newWitnessReference(theresa);\n+        fha.addWitnessReference(gedcomWithCustomTags, birth, wr);\n+        witnessRefs = fha.getWitnessReferences(birth);\n+        assertNotNull(witnessRefs);\n+        assertEquals(\"@I3@\", witnessRefs.get(0).getDescription().getValue());\n+    }\n+    @Test\n+    public void testDnaMarkers() {\n+        List<CustomFact> dnaMarkers = fha.getDnaMarkers(tom);\n+        assertNotNull(dnaMarkers);\n+        assertEquals(1, dnaMarkers.size());\n+        CustomFact dnaMarker = dnaMarkers.get(0);\n+        assertEquals(\"_ATTR\", dnaMarker.getTag());\n+        assertEquals(\"xxx\", dnaMarker.getDescription().getValue());\n+        assertEquals(\"DNA Markers\", dnaMarker.getType().getValue());\n+        fha.removeDnaMarkers(tom);\n+        dnaMarkers = fha.getDnaMarkers(tom);\n+        assertNotNull(dnaMarkers);\n+        assertEquals(0, dnaMarkers.size());\n+        CustomFact n = fha.newDnaMarker(\"frying pan\");\n+        fha.addDnaMarker(tom, n);\n+        dnaMarkers = fha.getDnaMarkers(tom);\n+        assertNotNull(dnaMarkers);\n+        assertEquals(1, dnaMarkers.size());\n+        dnaMarker = dnaMarkers.get(0);\n+        assertEquals(\"_ATTR\", dnaMarker.getTag());\n+        assertEquals(\"frying pan\", dnaMarker.getDescription().getValue());\n+        assertEquals(\"DNA Markers\", dnaMarker.getType().getValue());\n+    }\n+    @Test\n+    public void testElected() {\n+        List<CustomFact> electeds = fha.getElected(tom);\n+        assertNotNull(electeds);\n+        assertEquals(1, electeds.size());\n+        CustomFact elected = electeds.get(0);\n+        assertEquals(\"_ATTR\", elected.getTag());\n+        assertEquals(\"grand poobah\", elected.getDescription().getValue());\n+        assertEquals(\"Elected\", elected.getType().getValue());\n+        fha.removeElected(tom);\n+        electeds = fha.getElected(tom);\n+        assertNotNull(electeds);\n+        assertEquals(0, electeds.size());\n+        CustomFact n = fha.newElected(\"frying pan\");\n+        fha.addElected(tom, n);\n+        electeds = fha.getElected(tom);\n+        assertNotNull(electeds);\n+        assertEquals(1, electeds.size());\n+        elected = electeds.get(0);\n+        assertEquals(\"_ATTR\", elected.getTag());\n+        assertEquals(\"frying pan\", elected.getDescription().getValue());\n+        assertEquals(\"Elected\", elected.getType().getValue());\n+    }\n+    @Test\n+    public void testEmployment() {\n+        List<CustomFact> employments = fha.getEmployment(tom);\n+        assertNotNull(employments);\n+        assertEquals(1, employments.size());\n+        CustomFact employment = employments.get(0);\n+        assertEquals(\"_ATTR\", employment.getTag());\n+        assertEquals(\"waiter\", employment.getDescription().getValue());\n+        assertEquals(\"Employment\", employment.getType().getValue());\n+        fha.removeEmployment(tom);\n+        employments = fha.getEmployment(tom);\n+        assertNotNull(employments);\n+        assertEquals(0, employments.size());\n+        CustomFact n = fha.newEmployment(\"frying pan\");\n+        fha.addEmployment(tom, n);\n+        employments = fha.getEmployment(tom);\n+        assertNotNull(employments);\n+        assertEquals(1, employments.size());\n+        employment = employments.get(0);\n+        assertEquals(\"_ATTR\", employment.getTag());\n+        assertEquals(\"frying pan\", employment.getDescription().getValue());\n+        assertEquals(\"Employment\", employment.getType().getValue());\n+    }\n+    @Test\n+    public void testFamilyStatusNegative() {\n+        Family family = gedcomWithoutCustomTags.getFamilies().get(\"@F1@\");\n+        assertNull(fha.getFamilyStatus(family));\n+        fha.setFamilyStatus(family, \"Common Law\");\n+        assertEquals(\"Common Law\", fha.getFamilyStatus(family));\n+    }\n+    @Test\n+    public void testFamilyStatusPositive() {\n+        Family family = gedcomWithCustomTags.getFamilies().get(\"@F1@\");\n+        assertEquals(\"Never Married\", fha.getFamilyStatus(family));\n+        fha.setFamilyStatus(family, null);\n+        assertNull(fha.getFamilyStatus(family));\n+        fha.setFamilyStatus(family, \"Common Law\");\n+        assertEquals(\"Common Law\", fha.getFamilyStatus(family));\n+    }\n+    @Test\n+    public void testGetAddRemoveEmailsToAttribute() {\n+        IndividualAttribute ia = tom.getAttributesOfType(IndividualAttributeType.FACT).get(0);\n+        assertEquals(\"Tomato\", ia.getSubType().getValue());\n+        List<String> emails = fha.getEmails(ia);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"info@internet.com\", emails.get(0));\n+        fha.removeEmails(ia);\n+        emails = fha.getEmails(ia);\n+        assertNotNull(emails);\n+        assertEquals(0, emails.size());\n+        assertNotNull(fha.addEmail(ia, \"matt@gedcom4j.org\"));\n+        emails = fha.getEmails(ia);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"matt@gedcom4j.org\", emails.get(0));\n+    }\n+    @Test\n+    public void testGetAddRemoveEmailsToCustomFact() {\n+        List<CustomFact> dnaMarkers = fha.getDnaMarkers(tom);\n+        assertNotNull(dnaMarkers);\n+        assertEquals(1, dnaMarkers.size());\n+        CustomFact dnaMarker = dnaMarkers.get(0);\n+        List<String> emails = fha.getEmails(dnaMarker);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"info@internet.com\", emails.get(0));\n+        fha.removeEmails(dnaMarker);\n+        emails = fha.getEmails(dnaMarker);\n+        assertNotNull(emails);\n+        assertEquals(0, emails.size());\n+        assertNotNull(fha.addEmail(dnaMarker, \"matt@gedcom4j.org\"));\n+        emails = fha.getEmails(dnaMarker);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"matt@gedcom4j.org\", emails.get(0));\n+    }\n+    @Test\n+    public void testGetAddRemoveEmailsToEvent() {\n+        IndividualEvent birth = tom.getEventsOfType(IndividualEventType.BIRTH).get(0);\n+        List<String> emails = fha.getEmails(birth);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"info@internet.com\", emails.get(0));\n+        fha.removeEmails(birth);\n+        emails = fha.getEmails(birth);\n+        assertNotNull(emails);\n+        assertEquals(0, emails.size());\n+        assertNotNull(fha.addEmail(birth, \"matt@gedcom4j.org\"));\n+        emails = fha.getEmails(birth);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"matt@gedcom4j.org\", emails.get(0));\n+    }\n+    @Test\n+    public void testGetAddRemoveEmailsToRepository() {\n+        Repository repository = gedcomWithCustomTags.getRepositories().get(\"@R0000@\");\n+        List<String> emails = fha.getEmails(repository);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"info@internet.com\", emails.get(0));\n+        fha.removeEmails(repository);\n+        emails = fha.getEmails(repository);\n+        assertNotNull(emails);\n+        assertEquals(0, emails.size());\n+        assertNotNull(fha.addEmail(repository, \"matt@gedcom4j.org\"));\n+        emails = fha.getEmails(repository);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"matt@gedcom4j.org\", emails.get(0));\n+    }\n+    @Test\n+    public void testGetAddRemoveEmailsToSubmitter() {\n+        Submitter submitter = gedcomWithCustomTags.getSubmitters().get(\"@SUBM001@\");\n+        List<String> emails = fha.getEmails(submitter);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"info@internet.com\", emails.get(0));\n+        fha.removeEmails(submitter);\n+        emails = fha.getEmails(submitter);\n+        assertNotNull(emails);\n+        assertEquals(0, emails.size());\n+        assertNotNull(fha.addEmail(submitter, \"matt@gedcom4j.org\"));\n+        emails = fha.getEmails(submitter);\n+        assertNotNull(emails);\n+        assertEquals(1, emails.size());\n+        assertEquals(\"matt@gedcom4j.org\", emails.get(0));\n+    }\n+    @Test\n+    public void testGetAddRemoveWebUrlsToAttribute() {\n+        IndividualAttribute ia = tom.getAttributesOfType(IndividualAttributeType.FACT).get(0);\n+        assertEquals(\"Tomato\", ia.getSubType().getValue());\n+        List<String> faxes = fha.getWebUrls(ia);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://www.internet.com\", faxes.get(0));\n+        fha.removeWebUrls(ia);\n+        faxes = fha.getWebUrls(ia);\n+        assertNotNull(faxes);\n+        assertEquals(0, faxes.size());\n+        assertNotNull(fha.addWebUrl(ia, \"http://gedcom4j.org\"));\n+        faxes = fha.getWebUrls(ia);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://gedcom4j.org\", faxes.get(0));\n+    }\n+    @Test\n+    public void testGetAddRemoveWebUrlsToCustomFact() {\n+        List<CustomFact> dnaMarkers = fha.getDnaMarkers(tom);\n+        assertNotNull(dnaMarkers);\n+        assertEquals(1, dnaMarkers.size());\n+        CustomFact dnaMarker = dnaMarkers.get(0);\n+        List<String> faxes = fha.getWebUrls(dnaMarker);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://www.internet.com\", faxes.get(0));\n+        fha.removeWebUrls(dnaMarker);\n+        faxes = fha.getWebUrls(dnaMarker);\n+        assertNotNull(faxes);\n+        assertEquals(0, faxes.size());\n+        assertNotNull(fha.addWebUrl(dnaMarker, \"http://gedcom4j.org\"));\n+        faxes = fha.getWebUrls(dnaMarker);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://gedcom4j.org\", faxes.get(0));\n+    }\n+    @Test\n+    public void testGetAddRemoveWebUrlsToEvent() {\n+        IndividualEvent birth = tom.getEventsOfType(IndividualEventType.BIRTH).get(0);\n+        List<String> faxes = fha.getWebUrls(birth);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://www.internet.com\", faxes.get(0));\n+        fha.removeWebUrls(birth);\n+        faxes = fha.getWebUrls(birth);\n+        assertNotNull(faxes);\n+        assertEquals(0, faxes.size());\n+        assertNotNull(fha.addWebUrl(birth, \"http://gedcom4j.org\"));\n+        faxes = fha.getWebUrls(birth);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://gedcom4j.org\", faxes.get(0));\n+    }\n+    @Test\n+    public void testGetAddRemoveWebUrlsToRepository() {\n+        Repository repository = gedcomWithCustomTags.getRepositories().get(\"@R0000@\");\n+        List<String> faxes = fha.getWebUrls(repository);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://www.internet.com\", faxes.get(0));\n+        fha.removeWebUrls(repository);\n+        faxes = fha.getWebUrls(repository);\n+        assertNotNull(faxes);\n+        assertEquals(0, faxes.size());\n+        assertNotNull(fha.addWebUrl(repository, \"http://gedcom4j.org\"));\n+        faxes = fha.getWebUrls(repository);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://gedcom4j.org\", faxes.get(0));\n+    }\n+    @Test\n+    public void testGetAddRemoveWebUrlsToSubmitter() {\n+        Submitter submitter = gedcomWithCustomTags.getSubmitters().get(\"@SUBM001@\");\n+        List<String> faxes = fha.getWebUrls(submitter);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://www.internet.com\", faxes.get(0));\n+        fha.removeWebUrls(submitter);\n+        faxes = fha.getWebUrls(submitter);\n+        assertNotNull(faxes);\n+        assertEquals(0, faxes.size());\n+        assertNotNull(fha.addWebUrl(submitter, \"http://gedcom4j.org\"));\n+        faxes = fha.getWebUrls(submitter);\n+        assertNotNull(faxes);\n+        assertEquals(1, faxes.size());\n+        assertEquals(\"http://gedcom4j.org\", faxes.get(0));\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testGetNamedListImmutable() {\n+        List<CustomFact> lists = fha.getNamedList(gedcomWithCustomTags, \"Key Individuals\");\n+        assertNotNull(lists);\n+        assertEquals(1, lists.size());\n+        lists.clear();\n+    }\n+    @Test\n+    public void testGetNamedListNegative() {\n+        List<CustomFact> lists = fha.getNamedList(gedcomWithoutCustomTags, \"Key Individuals\");\n+        assertNotNull(lists);\n+        assertEquals(0, lists.size());\n+        lists = fha.getNamedList(gedcomWithCustomTags, \"My Favorite Frying Pans\");\n+        assertNotNull(lists);\n+        assertEquals(0, lists.size());\n+    }\n+    @Test\n+    public void testGetNamedListPositive() {\n+        List<CustomFact> lists = fha.getNamedList(gedcomWithCustomTags, \"Key Individuals\");\n+        assertNotNull(lists);\n+        assertEquals(1, lists.size());\n+        assertEquals(\"Key Individuals\", lists.get(0).getDescription().getValue());\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testGetNamedListsImmutable() {\n+        List<CustomFact> lists = fha.getNamedLists(gedcomWithCustomTags);\n+        assertNotNull(lists);\n+        assertEquals(1, lists.size());\n+        lists.clear();\n+    }\n+    @Test\n+    public void testGetNamedListsNegative() {\n+        List<CustomFact> lists = fha.getNamedLists(gedcomWithoutCustomTags);\n+        assertNotNull(lists);\n+        assertEquals(0, lists.size());\n+    }\n+    @Test\n+    public void testGetNamedListsPositive() {\n+        List<CustomFact> lists = fha.getNamedLists(gedcomWithCustomTags);\n+        assertNotNull(lists);\n+        assertEquals(1, lists.size());\n+        assertEquals(\"Key Individuals\", lists.get(0).getDescription().getValue());\n+    }\n+    @Test\n+    public void testGetRootIndividualPositive() {\n+        Individual individual = fha.getRootIndividual(gedcomWithCustomTags);\n+        assertNotNull(individual);\n+        assertEquals(tom, individual);\n+        assertSame(tom, individual);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetSetFlagsNegative() {\n+        CustomFact flags = fha.getFlags(tom);\n+        assertNotNull(flags);\n+        assertEquals(2, flags.getCustomFacts().size());\n+        CustomFact newFlags = fha.newNamedList(\"This is intentionally wrong!\");\n+        assertNotNull(newFlags);\n+        fha.setFlags(tom, newFlags);\n+    }\n+    @Test\n+    public void testGetSetFlagsPositive() {\n+        CustomFact flags = fha.getFlags(tom);\n+        assertNotNull(flags);\n+        assertEquals(2, flags.getCustomFacts().size());\n+        CustomFact newFlags = fha.newFlags();\n+        assertNotNull(newFlags);\n+        fha.setFlags(tom, newFlags);\n+        flags = fha.getFlags(tom);\n+        assertNotNull(flags);\n+        assertNull(flags.getCustomFacts());\n+    }\n+    @Test\n+    public void testGetSetNameUsedNegative() {\n+        PersonalName pn = new PersonalName();\n+        List<CustomFact> nameUsed = fha.getNameUsed(pn);\n+        assertNotNull(nameUsed);\n+        assertEquals(0, nameUsed.size());\n+    }\n+    @Test\n+    public void testGetSetNameUsedPositive() {\n+        PersonalName pn = tom.getNames().get(0);\n+        assertNotNull(pn);\n+        List<CustomFact> nameUsed = fha.getNameUsed(pn);\n+        assertNotNull(nameUsed);\n+        assertEquals(1, nameUsed.size());\n+        assertEquals(\"Tony\", nameUsed.get(0).getDescription().getValue());\n+        fha.setNameUsed(pn, \"Billy Jo Bob\");\n+        nameUsed = fha.getNameUsed(pn);\n+        assertEquals(\"Billy Jo Bob\", nameUsed.get(0).getDescription().getValue());\n+    }\n+    @Test\n+    public void testGetSetOtherPlaceNamePositive() {\n+        Place here = new Place();\n+        here.setPlaceName(\"Earth\");\n+        IndividualEvent ie = new IndividualEvent();\n+        ie.setType(IndividualEventType.IMMIGRATION);\n+        ie.setPlace(here);\n+        assertNull(fha.getOtherPlaceName(ie));\n+        fha.setOtherPlaceName(ie, \"Cete Alpha V\");\n+        assertEquals(\"Cete Alpha V\", fha.getOtherPlaceName(ie));\n+        fha.setOtherPlaceName(ie, null);\n+        assertNull(fha.getOtherPlaceName(ie));\n+    }\n+    @Test\n+    public void testGetSetSentenceCustomFact() {\n+        CustomFact cf = new CustomFact(\"_ATTR\");\n+        cf.setType(new StringWithCustomFacts(\"Victory\"));\n+        assertNull(fha.getFactSetSentenceTemplate(cf));\n+        fha.setFactSetSentenceTemplate(cf, \"The quick brown fox jumps over the lazy dog.\");\n+        assertEquals(\"The quick brown fox jumps over the lazy dog.\", fha.getFactSetSentenceTemplate(cf));\n+        fha.setFactSetSentenceTemplate(cf, null);\n+        assertNull(fha.getFactSetSentenceTemplate(cf));\n+    }\n+    @Test\n+    public void testGetSetSentenceFamilyEvent() {\n+        FamilyEvent fe = new FamilyEvent();\n+        fe.setType(FamilyEventType.EVENT);\n+        assertNull(fha.getFactSetSentenceTemplate(fe));\n+        fha.setFactSetSentenceTemplate(fe, \"The quick brown fox jumps over the lazy dog.\");\n+        assertEquals(\"The quick brown fox jumps over the lazy dog.\", fha.getFactSetSentenceTemplate(fe));\n+        fha.setFactSetSentenceTemplate(fe, null);\n+        assertNull(fha.getFactSetSentenceTemplate(fe));\n+    }\n+    @Test\n+    public void testGetSetSentenceIndividualAttribute() {\n+        IndividualAttribute ia = new IndividualAttribute();\n+        ia.setType(IndividualAttributeType.FACT);\n+        assertNull(fha.getFactSetSentenceTemplate(ia));\n+        fha.setFactSetSentenceTemplate(ia, \"The quick brown fox jumps over the lazy dog.\");\n+        assertEquals(\"The quick brown fox jumps over the lazy dog.\", fha.getFactSetSentenceTemplate(ia));\n+        fha.setFactSetSentenceTemplate(ia, null);\n+        assertNull(fha.getFactSetSentenceTemplate(ia));\n+    }\n+    @Test\n+    public void testGetSetSentenceIndividualEvent() {\n+        IndividualEvent ie = new IndividualEvent();\n+        ie.setType(IndividualEventType.EVENT);\n+        assertNull(fha.getFactSetSentenceTemplate(ie));\n+        fha.setFactSetSentenceTemplate(ie, \"The quick brown fox jumps over the lazy dog.\");\n+        assertEquals(\"The quick brown fox jumps over the lazy dog.\", fha.getFactSetSentenceTemplate(ie));\n+        fha.setFactSetSentenceTemplate(ie, null);\n+        assertNull(fha.getFactSetSentenceTemplate(ie));\n+    }\n+    @Test\n+    public void testGetSetUIDNegative() {\n+        assertNull(fha.getUID(gedcomWithoutCustomTags));\n+        fha.setUID(gedcomWithoutCustomTags, \"FryingPan\");\n+        assertEquals(\"FryingPan\", fha.getUID(gedcomWithoutCustomTags));\n+    }\n+    @Test\n+    public void testGetSetUIDPositive() {\n+        assertEquals(\"{C2159006-9E8E-4149-87DB-36E5F6D08A37}\", fha.getUID(gedcomWithCustomTags));\n+        fha.setUID(gedcomWithCustomTags, \"FryingPan\");\n+        assertEquals(\"FryingPan\", fha.getUID(gedcomWithCustomTags));\n+    }\n+    @Test\n+    public void testGetSetVariantExportFormatNegative() {\n+        assertNull(fha.getVariantExportFormat(gedcomWithoutCustomTags));\n+        fha.setVariantExportFormat(gedcomWithoutCustomTags, \"FryingPan\");\n+        assertEquals(\"FryingPan\", fha.getVariantExportFormat(gedcomWithoutCustomTags));\n+    }\n+    @Test\n+    public void testGetSetVariantExportFormatPositive() {\n+        assertEquals(\"DSR\", fha.getVariantExportFormat(gedcomWithCustomTags));\n+        fha.setVariantExportFormat(gedcomWithCustomTags, \"FryingPan\");\n+        assertEquals(\"FryingPan\", fha.getVariantExportFormat(gedcomWithCustomTags));\n+    }\n+    @Test\n+    public void testGetUnrelatedWitnesses() {\n+        IndividualEvent birth = tom.getEventsOfType(IndividualEventType.BIRTH).get(0);\n+        List<CustomFact> witnessNames = fha.getUnrelatedWitnesses(birth);\n+        assertNotNull(witnessNames);\n+        assertEquals(1, witnessNames.size());\n+        CustomFact w1 = witnessNames.get(0);\n+        assertEquals(\"Wally Witness\", w1.getDescription().getValue());\n+        assertEquals(\"Disinterested Observer\", w1.getCustomFactsWithTag(\"ROLE\").get(0).getDescription().getValue());\n+        assertEquals(\"It was sorta awkward\", w1.getNoteStructures().get(0).getLines().get(0));\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testGetWitnessNamesImmutable() {\n+        IndividualEvent birth = tom.getEventsOfType(IndividualEventType.BIRTH).get(0);\n+        List<CustomFact> witnessNames = fha.getUnrelatedWitnesses(birth);\n+        assertNotNull(witnessNames);\n+        witnessNames.clear();\n+    }\n+    @Test\n+    public void testGetWitnessReferences() {\n+        IndividualEvent birth = tom.getEventsOfType(IndividualEventType.BIRTH).get(0);\n+        List<CustomFact> witnessRefs = fha.getWitnessReferences(birth);\n+        assertNotNull(witnessRefs);\n+        assertEquals(1, witnessRefs.size());\n+        CustomFact w1 = witnessRefs.get(0);\n+        assertEquals(\"@I3@\", w1.getDescription().getValue());\n+        assertEquals(\"Birthing Coach\", w1.getCustomFactsWithTag(\"ROLE\").get(0).getDescription().getValue());\n+        assertEquals(\"Passed out during delivery\", w1.getNoteStructures().get(0).getLines().get(0));\n+    }\n+    @Test\n+    public void testHeight() {\n+        List<CustomFact> heights = fha.getHeight(tom);\n+        assertNotNull(heights);\n+        assertEquals(1, heights.size());\n+        CustomFact height = heights.get(0);\n+        assertEquals(\"_ATTR\", height.getTag());\n+        assertEquals(\"5' 1\\\"\", height.getDescription().getValue());\n+        assertEquals(\"Height\", height.getType().getValue());\n+        fha.removeHeight(tom);\n+        heights = fha.getHeight(tom);\n+        assertNotNull(heights);\n+        assertEquals(0, heights.size());\n+        CustomFact n = fha.newHeight(\"frying pan\");\n+        fha.addHeight(tom, n);\n+        heights = fha.getHeight(tom);\n+        assertNotNull(heights);\n+        assertEquals(1, heights.size());\n+        height = heights.get(0);\n+        assertEquals(\"_ATTR\", height.getTag());\n+        assertEquals(\"frying pan\", height.getDescription().getValue());\n+        assertEquals(\"Height\", height.getType().getValue());\n+    }\n+    @Test\n+    public void testMedicalCondition() {\n+        List<CustomFact> medicalConditions = fha.getMedicalCondition(tom);\n+        assertNotNull(medicalConditions);\n+        assertEquals(1, medicalConditions.size());\n+        CustomFact medicalCondition = medicalConditions.get(0);\n+        assertEquals(\"_ATTR\", medicalCondition.getTag());\n+        assertEquals(\"Caries\", medicalCondition.getDescription().getValue());\n+        assertEquals(\"Medical Condition\", medicalCondition.getType().getValue());\n+        fha.removeMedicalCondition(tom);\n+        medicalConditions = fha.getMedicalCondition(tom);\n+        assertNotNull(medicalConditions);\n+        assertEquals(0, medicalConditions.size());\n+        CustomFact n = fha.newMedicalCondition(\"frying pan\");\n+        fha.addMedicalCondition(tom, n);\n+        medicalConditions = fha.getMedicalCondition(tom);\n+        assertNotNull(medicalConditions);\n+        assertEquals(1, medicalConditions.size());\n+        medicalCondition = medicalConditions.get(0);\n+        assertEquals(\"_ATTR\", medicalCondition.getTag());\n+        assertEquals(\"frying pan\", medicalCondition.getDescription().getValue());\n+        assertEquals(\"Medical Condition\", medicalCondition.getType().getValue());\n+    }\n+    @Test\n+    public void testMilitaryId() {\n+        List<CustomFact> militaryIds = fha.getMilitaryId(tom);\n+        assertNotNull(militaryIds);\n+        assertEquals(1, militaryIds.size());\n+        CustomFact militaryId = militaryIds.get(0);\n+        assertEquals(\"_ATTR\", militaryId.getTag());\n+        assertEquals(\"99999\", militaryId.getDescription().getValue());\n+        assertEquals(\"Military ID\", militaryId.getType().getValue());\n+        fha.removeMilitaryId(tom);\n+        militaryIds = fha.getMilitaryId(tom);\n+        assertNotNull(militaryIds);\n+        assertEquals(0, militaryIds.size());\n+        CustomFact n = fha.newMilitaryId(\"frying pan\");\n+        fha.addMilitaryId(tom, n);\n+        militaryIds = fha.getMilitaryId(tom);\n+        assertNotNull(militaryIds);\n+        assertEquals(1, militaryIds.size());\n+        militaryId = militaryIds.get(0);\n+        assertEquals(\"_ATTR\", militaryId.getTag());\n+        assertEquals(\"frying pan\", militaryId.getDescription().getValue());\n+        assertEquals(\"Military ID\", militaryId.getType().getValue());\n+    }\n+    @Test\n+    public void testMilitaryService() {\n+        List<CustomFact> militaryServices = fha.getMilitaryService(tom);\n+        assertNotNull(militaryServices);\n+        assertEquals(1, militaryServices.size());\n+        CustomFact militaryService = militaryServices.get(0);\n+        assertEquals(\"_ATTR\", militaryService.getTag());\n+        assertEquals(\"Coast Guard\", militaryService.getDescription().getValue());\n+        assertEquals(\"Military Service\", militaryService.getType().getValue());\n+        fha.removeMilitaryService(tom);\n+        militaryServices = fha.getMilitaryService(tom);\n+        assertNotNull(militaryServices);\n+        assertEquals(0, militaryServices.size());\n+        CustomFact n = fha.newMilitaryService(\"frying pan\");\n+        fha.addMilitaryService(tom, n);\n+        militaryServices = fha.getMilitaryService(tom);\n+        assertNotNull(militaryServices);\n+        assertEquals(1, militaryServices.size());\n+        militaryService = militaryServices.get(0);\n+        assertEquals(\"_ATTR\", militaryService.getTag());\n+        assertEquals(\"frying pan\", militaryService.getDescription().getValue());\n+        assertEquals(\"Military Service\", militaryService.getType().getValue());\n+    }\n+    @Test\n+    public void testMission() {\n+        List<CustomFact> missions = fha.getMission(tom);\n+        assertNotNull(missions);\n+        assertEquals(1, missions.size());\n+        CustomFact mission = missions.get(0);\n+        assertEquals(\"_ATTR\", mission.getTag());\n+        assertEquals(\"QWERTY\", mission.getDescription().getValue());\n+        assertEquals(\"Mission (LDS)\", mission.getType().getValue());\n+        fha.removeMission(tom);\n+        missions = fha.getMission(tom);\n+        assertNotNull(missions);\n+        assertEquals(0, missions.size());\n+        CustomFact n = fha.newMission(\"frying pan\");\n+        fha.addMission(tom, n);\n+        missions = fha.getMission(tom);\n+        assertNotNull(missions);\n+        assertEquals(1, missions.size());\n+        mission = missions.get(0);\n+        assertEquals(\"_ATTR\", mission.getTag());\n+        assertEquals(\"frying pan\", mission.getDescription().getValue());\n+        assertEquals(\"Mission (LDS)\", mission.getType().getValue());\n+    }\n+    @Test\n+    public void testMultimediaDate() {\n+        Multimedia mm = gedcomWithCustomTags.getMultimedia().get(\"@O1@\");\n+        assertEquals(\"7 JUL 1977\", fha.getMultimediaDate(mm));\n+        fha.setMultimediaDate(mm, null);\n+        assertNull(fha.getMultimediaDate(mm));\n+        fha.setMultimediaDate(mm, \"4 JUL 1976\");\n+        assertEquals(\"4 JUL 1976\", fha.getMultimediaDate(mm));\n+    }\n+    @Test\n+    public void testMultimediaFile() {\n+        Multimedia mm = gedcomWithCustomTags.getMultimedia().get(\"@O1@\");\n+        assertEquals(\"photo.jpg\", fha.getMultimediaFile(mm));\n+        fha.setMultimediaFile(mm, null);\n+        assertNull(fha.getMultimediaFile(mm));\n+        fha.setMultimediaFile(mm, \"photo.png\");\n+        assertEquals(\"photo.png\", fha.getMultimediaFile(mm));\n+    }\n+    @Test\n+    public void testMultimediaKeys() {\n+        Multimedia mm = gedcomWithCustomTags.getMultimedia().get(\"@O1@\");\n+        assertEquals(\"Picture\", fha.getMultimediaKeys(mm));\n+        fha.setMultimediaKeys(mm, null);\n+        assertNull(fha.getMultimediaKeys(mm));\n+        fha.setMultimediaKeys(mm, \"Movie\");\n+        assertEquals(\"Movie\", fha.getMultimediaKeys(mm));\n+    }\n+    @Test\n+    public void testMultimediaNote() {\n+        Multimedia mm = gedcomWithCustomTags.getMultimedia().get(\"@O1@\");\n+        assertEquals(\"Picture is a bit small and may not be him.\", fha.getMultimediaNote(mm));\n+        fha.setMultimediaNote(mm, null);\n+        assertNull(fha.getMultimediaNote(mm));\n+        fha.setMultimediaNote(mm, \"Black and white\");\n+        assertEquals(\"Black and white\", fha.getMultimediaNote(mm));\n+    }\n+    @Test\n+    public void testMultimediaNoteArea() {\n+        Multimedia mm = gedcomWithCustomTags.getMultimedia().get(\"@O1@\");\n+        assertNotNull(mm.getNoteStructures());\n+        assertEquals(1, mm.getNoteStructures().size());\n+        NoteStructure n = mm.getNoteStructures().get(0);\n+        assertEquals(\"{154,46,243,127}\", fha.getMultimediaNoteArea(n));\n+        fha.setMultimediaNoteArea(n, null);\n+        assertNull(fha.getMultimediaNoteArea(n));\n+        fha.setMultimediaNoteArea(n, \"Chess\");\n+        assertEquals(\"Chess\", fha.getMultimediaNoteArea(n));\n+    }\n+    @Test\n+    public void testMultimediaNoteASID() {\n+        Multimedia mm = gedcomWithCustomTags.getMultimedia().get(\"@O1@\");\n+        assertNotNull(mm.getNoteStructures());\n+        assertEquals(1, mm.getNoteStructures().size());\n+        NoteStructure n = mm.getNoteStructures().get(0);\n+        assertEquals(\"1\", fha.getMultimediaNoteASID(n));\n+        fha.setMultimediaNoteASID(n, null);\n+        assertNull(fha.getMultimediaNoteASID(n));\n+        fha.setMultimediaNoteASID(n, \"3\");\n+        assertEquals(\"3\", fha.getMultimediaNoteASID(n));\n+    }\n+    @Test\n+    public void testMultimediaNoteCaption() {\n+        Multimedia mm = gedcomWithCustomTags.getMultimedia().get(\"@O1@\");\n+        assertNotNull(mm.getNoteStructures());\n+        assertEquals(1, mm.getNoteStructures().size());\n+        NoteStructure n = mm.getNoteStructures().get(0);\n+        assertEquals(\"Y\", fha.getMultimediaNoteCaption(n));\n+        fha.setMultimediaNoteCaption(n, null);\n+        assertNull(fha.getMultimediaNoteCaption(n));\n+        fha.setMultimediaNoteCaption(n, \"N\");\n+        assertEquals(\"N\", fha.getMultimediaNoteCaption(n));\n+    }\n+    @Test\n+    public void testMultimediaNoteExclusion() {\n+        Multimedia mm = gedcomWithCustomTags.getMultimedia().get(\"@O1@\");\n+        assertNotNull(mm.getNoteStructures());\n+        assertEquals(1, mm.getNoteStructures().size());\n+        NoteStructure n = mm.getNoteStructures().get(0);\n+        assertEquals(\"ALL\", fha.getMultimediaNoteExclusion(n));\n+        fha.setMultimediaNoteExclusion(n, null);\n+        assertNull(fha.getMultimediaNoteExclusion(n));\n+        fha.setMultimediaNoteExclusion(n, \"Synchronicity\");\n+        assertEquals(\"Synchronicity\", fha.getMultimediaNoteExclusion(n));\n+    }\n+    @Test\n+    public void testNamedListEditingEnabled() {\n+        CustomFact namedList = fha.getNamedList(gedcomWithCustomTags, \"Key Individuals\").get(0);\n+        assertTrue(fha.isEditingEnabled(namedList));\n+        fha.setEditingEnabled(namedList, false);\n+        assertFalse(fha.isEditingEnabled(namedList));\n+        fha.setEditingEnabled(namedList, true);\n+        assertTrue(fha.isEditingEnabled(namedList));\n+    }\n+    @Test\n+    public void testNamesake() {\n+        List<CustomFact> namesakes = fha.getNamesake(tom);\n+        assertNotNull(namesakes);\n+        assertEquals(1, namesakes.size());\n+        CustomFact namesake = namesakes.get(0);\n+        assertEquals(\"_ATTR\", namesake.getTag());\n+        assertEquals(\"Tom Thompson (a complete stranger)\", namesake.getDescription().getValue());\n+        assertEquals(\"Namesake\", namesake.getType().getValue());\n+        fha.removeNamesake(tom);\n+        namesakes = fha.getNamesake(tom);\n+        assertNotNull(namesakes);\n+        assertEquals(0, namesakes.size());\n+        CustomFact n = fha.newNamesake(\"frying pan\");\n+        fha.addNamesake(tom, n);\n+        namesakes = fha.getNamesake(tom);\n+        assertNotNull(namesakes);\n+        assertEquals(1, namesakes.size());\n+        namesake = namesakes.get(0);\n+        assertEquals(\"_ATTR\", namesake.getTag());\n+        assertEquals(\"frying pan\", namesake.getDescription().getValue());\n+        assertEquals(\"Namesake\", namesake.getType().getValue());\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewPlaceNegativeBadXref() {\n+        fha.newPlace(\"bad\", \"asdf\");\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewPlaceNegativeBlankPlaceName() {\n+        fha.newPlace(\"@P1@\", \" \");\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewPlaceNegativeNullPlaceName() {\n+        fha.newPlace(\"@P1@\", null);\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewPlaceNegativeNullXref() {\n+        fha.newPlace(null, \"asdf\");\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewPlaceNegativeXrefPlacenameTransposed() {\n+        fha.newPlace(\"Virginia\", \"@P1@\");\n+    }\n+    @Test\n+    public void testNewPlacePositive() {\n+        assertNotNull(fha.newPlace(\"@P1@\", \"Florida\"));\n+    }\n+    @Test\n+    public void testOrdinances() {\n+        List<CustomFact> ordinances = fha.getOrdinances(tom);\n+        assertNotNull(ordinances);\n+        assertEquals(1, ordinances.size());\n+        CustomFact ordinance = ordinances.get(0);\n+        assertEquals(\"_ATTR\", ordinance.getTag());\n+        assertEquals(\"wasd\", ordinance.getDescription().getValue());\n+        assertEquals(\"Ordinance\", ordinance.getType().getValue());\n+        fha.removeOrdinances(tom);\n+        ordinances = fha.getOrdinances(tom);\n+        assertNotNull(ordinances);\n+        assertEquals(0, ordinances.size());\n+        CustomFact n = fha.newOrdinance(\"frying pan\");\n+        fha.addOrdinance(tom, n);\n+        ordinances = fha.getOrdinances(tom);\n+        assertNotNull(ordinances);\n+        assertEquals(1, ordinances.size());\n+        ordinance = ordinances.get(0);\n+        assertEquals(\"_ATTR\", ordinance.getTag());\n+        assertEquals(\"frying pan\", ordinance.getDescription().getValue());\n+        assertEquals(\"Ordinance\", ordinance.getType().getValue());\n+    }\n+    @Test\n+    public void testPlaceRecords() {\n+        List<CustomFact> places = fha.getPlaceRecords(gedcomWithCustomTags);\n+        assertNotNull(places);\n+        assertEquals(11, places.size());\n+        CustomFact p1 = fha.getPlaceRecord(gedcomWithCustomTags, \"@P1@\");\n+        assertEquals(places.get(0), p1);\n+        assertEquals(\"Ansted, WV, USA\", p1.getDescription().getValue());\n+        fha.removePlaceRecord(gedcomWithCustomTags, p1.getXref());\n+        assertNull(fha.getPlaceRecord(gedcomWithCustomTags, \"@P1@\"));\n+        places = fha.getPlaceRecords(gedcomWithCustomTags);\n+        assertNotNull(places);\n+        assertEquals(10, places.size());\n+        fha.addPlaceRecord(gedcomWithCustomTags, p1);\n+        assertSame(p1, fha.getPlaceRecord(gedcomWithCustomTags, \"@P1@\"));\n+        assertEquals(\"Ansted, WV, USA\", p1.getDescription().getValue());\n+        places = fha.getPlaceRecords(gedcomWithCustomTags);\n+        assertNotNull(places);\n+        assertEquals(11, places.size());\n+        fha.removePlaceRecords(gedcomWithCustomTags);\n+        assertNull(fha.getPlaceRecord(gedcomWithCustomTags, \"@P1@\"));\n+        places = fha.getPlaceRecords(gedcomWithCustomTags);\n+        assertNotNull(places);\n+        assertEquals(0, places.size());\n+        CustomFact newPlace = fha.newPlace(\"@P999@\", \"Cucamonga\");\n+        fha.addPlaceRecord(gedcomWithCustomTags, newPlace);\n+        p1 = fha.getPlaceRecord(gedcomWithCustomTags, \"@P999@\");\n+        assertEquals(p1, newPlace);\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testPlaceRecordsImmutable() {\n+        List<CustomFact> places = fha.getPlaceRecords(gedcomWithCustomTags);\n+        assertNotNull(places);\n+        assertEquals(11, places.size());\n+        places.clear();\n+    }\n+    @Test\n+    public void testRemoveNamedList() {\n+        List<CustomFact> lists = fha.getNamedLists(gedcomWithCustomTags);\n+        assertNotNull(lists);\n+        assertEquals(1, lists.size());\n+        fha.removeNamedList(gedcomWithCustomTags, \"Key Individuals\");\n+        lists = fha.getNamedList(gedcomWithCustomTags, \"Key Individuals\");\n+        assertNotNull(lists);\n+        assertEquals(0, lists.size());\n+    }\n+    @Test\n+    public void testRemoveNamedLists() {\n+        List<CustomFact> lists = fha.getNamedLists(gedcomWithCustomTags);\n+        assertNotNull(lists);\n+        assertEquals(1, lists.size());\n+        fha.removeNamedLists(gedcomWithCustomTags);\n+        lists = fha.getNamedLists(gedcomWithCustomTags);\n+        assertNotNull(lists);\n+        assertEquals(0, lists.size());\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testSetRootIndividualNegative1() {\n+        Individual individual = fha.getRootIndividual(gedcomWithoutCustomTags);\n+        assertNull(individual);\n+        fha.setRootIndividual(gedcomWithoutCustomTags, tom);\n+    }\n+    @Test\n+    public void testSetRootIndividualNegative2() {\n+        Individual individual = fha.getRootIndividual(gedcomWithoutCustomTags);\n+        assertNull(individual);\n+        Individual tomsMom = gedcomWithoutCustomTags.getIndividuals().get(\"@I3@\");\n+        fha.setRootIndividual(gedcomWithoutCustomTags, tomsMom);\n+        assertEquals(tomsMom, fha.getRootIndividual(gedcomWithoutCustomTags));\n+        assertSame(tomsMom, fha.getRootIndividual(gedcomWithoutCustomTags));\n+    }\n+    @Test\n+    public void testSourceType() {\n+        Source src = gedcomWithCustomTags.getSources().get(\"@S1@\");\n+        assertEquals(\"Hearsay\", fha.getSourceType(src));\n+        fha.setSourceType(src, null);\n+        assertNull(fha.getSourceType(src));\n+        fha.setSourceType(src, \"Napkin drawing\");\n+        assertEquals(\"Napkin drawing\", fha.getSourceType(src));\n+    }\n+    private Individual jesse;\n+    private Family family1;\n+    @Before\n+    public void setUp() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/ftmcustomtags.ged\");\n+        final Gedcom g = gp.getGedcom();\n+        final Individual john = g.getIndividuals().get(\"@I1@\");\n+        assertNotNull(john);\n+        jesse = g.getIndividuals().get(\"@I2@\");\n+        assertNotNull(jesse);\n+        final Individual june = g.getIndividuals().get(\"@I3@\");\n+        assertNotNull(june);\n+        family1 = g.getFamilies().get(\"@F1@\");\n+        assertNotNull(family1);\n+        assertSame(jesse, family1.getHusband().getIndividual());\n+        assertSame(june, family1.getWife().getIndividual());\n+        final Family family2 = g.getFamilies().get(\"@F2@\");\n+        assertNotNull(family2);\n+        final Multimedia photo = g.getMultimedia().get(\"@M1@\");\n+        assertNotNull(photo);\n+        final Source source = g.getSources().get(\"@S1@\");\n+        assertNotNull(source);\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testCauseOfDeathImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cod = a.getCauseOfDeath(jesse);\n+        assertNotNull(cod);\n+        cod.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testCircumcisionImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getCircumcision(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testDestinationImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getDestinations(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testElectedImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getElected(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testEmploymentImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getEmployment(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testExcommunicationImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getExcommunication(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testFatherRelationshipImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        IndividualReference ir = new IndividualReference(jesse);\n+        List<CustomFact> cfs = a.getFatherRelationship(ir);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testFuneralImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getFuneral(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testHeightImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getHeights(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testInitiatoryImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getInitiatory(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testMedicalImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getMedical(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testMilitaryIdImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getMilitaryId(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testMilitaryImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getMilitary(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testMissionImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getMission(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testMotherRelationshipImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        IndividualReference ir = new IndividualReference(jesse);\n+        List<CustomFact> cfs = a.getMotherRelationship(ir);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testNamesakeImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getNamesake(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testOrdinanceImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getOrdinance(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testOriginImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getOrigin(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testPhotoImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getPhoto(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testSeparationImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getSeparation(family1);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testWeightImmutable() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cfs = a.getWeight(jesse);\n+        assertNotNull(cfs);\n+        cfs.clear();\n+    }\n+    private Individual jesse;\n+    private Family family2;\n+    @Before\n+    public void setUp() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/ftmcustomtags.ged\");\n+        final Gedcom g = gp.getGedcom();\n+        final Individual john = g.getIndividuals().get(\"@I1@\");\n+        assertNotNull(john);\n+        jesse = g.getIndividuals().get(\"@I2@\");\n+        assertNotNull(jesse);\n+        final Individual june = g.getIndividuals().get(\"@I3@\");\n+        assertNotNull(june);\n+        final Family family1 = g.getFamilies().get(\"@F1@\");\n+        assertNotNull(family1);\n+        assertSame(jesse, family1.getHusband().getIndividual());\n+        assertSame(june, family1.getWife().getIndividual());\n+        family2 = g.getFamilies().get(\"@F2@\");\n+        assertNotNull(family2);\n+        final Multimedia photo = g.getMultimedia().get(\"@M1@\");\n+        assertNotNull(photo);\n+        final Source source = g.getSources().get(\"@S1@\");\n+        assertNotNull(source);\n+    }\n+    @Test\n+    public void testCauseOfDeathNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cod = a.getCauseOfDeath(jesse);\n+        assertNotNull(cod);\n+        assertEquals(0, cod.size());\n+        List<CustomFact> cod2 = new ArrayList<>();\n+        CustomFact cf = a.newCauseOfDeathCustomFact();\n+        cf.setDescription(\"Frying Pan\");\n+        cod2.add(cf);\n+        a.setCausesOfDeath(jesse, cod2);\n+        cod = a.getCauseOfDeath(jesse);\n+        assertNotNull(cod);\n+        assertEquals(1, cod.size());\n+        assertEquals(\"Frying Pan\", cod.get(0).getDescription().getValue());\n+    }\n+    @Test\n+    public void testCircumcisionNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> c = a.getCircumcision(jesse);\n+        assertNotNull(c);\n+        assertEquals(0, c.size());\n+        List<CustomFact> c2 = new ArrayList<>();\n+        CustomFact cf = a.newCircumcisionCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        c2.add(cf);\n+        a.setCircumcision(jesse, c2);\n+        c = a.getCircumcision(jesse);\n+        assertNotNull(c);\n+        assertEquals(1, c.size());\n+        assertEquals(\"Frying Pan\", c.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", c.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", c.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testDestinationNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> d = a.getDestinations(jesse);\n+        assertNotNull(d);\n+        assertEquals(0, d.size());\n+        List<CustomFact> d2 = new ArrayList<>();\n+        CustomFact cf = a.newDestinationCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        d2.add(cf);\n+        a.setDestinations(jesse, d2);\n+        d = a.getDestinations(jesse);\n+        assertNotNull(d);\n+        assertEquals(1, d.size());\n+        assertEquals(\"Frying Pan\", d.get(0).getDescription().getValue());\n+    }\n+    @Test\n+    public void testElectedNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> el = a.getElected(jesse);\n+        assertNotNull(el);\n+        assertEquals(0, el.size());\n+        List<CustomFact> el2 = new ArrayList<>();\n+        CustomFact cf = a.newElectedCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        el2.add(cf);\n+        a.setElected(jesse, el2);\n+        el = a.getElected(jesse);\n+        assertNotNull(el);\n+        assertEquals(1, el.size());\n+        assertEquals(\"Frying Pan\", el.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", el.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", el.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testEmploymentNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> em = a.getEmployment(jesse);\n+        assertNotNull(em);\n+        assertEquals(0, em.size());\n+        List<CustomFact> em2 = new ArrayList<>();\n+        CustomFact cf = a.newEmploymentCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        em2.add(cf);\n+        a.setEmployment(jesse, em2);\n+        em = a.getEmployment(jesse);\n+        assertNotNull(em);\n+        assertEquals(1, em.size());\n+        assertEquals(\"Frying Pan\", em.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", em.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", em.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testExcommunicationNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> ex = a.getExcommunication(jesse);\n+        assertNotNull(ex);\n+        assertEquals(0, ex.size());\n+        List<CustomFact> ex2 = new ArrayList<>();\n+        CustomFact cf = a.newExcommunicationCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        ex2.add(cf);\n+        a.setExcommunication(jesse, ex2);\n+        ex = a.getExcommunication(jesse);\n+        assertNotNull(ex);\n+        assertEquals(1, ex.size());\n+        assertEquals(\"Frying Pan\", ex.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", ex.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", ex.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testFuneralNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> fun = a.getFuneral(jesse);\n+        assertNotNull(fun);\n+        assertEquals(0, fun.size());\n+        List<CustomFact> fun2 = new ArrayList<>();\n+        CustomFact cf = a.newFuneralCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        fun2.add(cf);\n+        a.setFuneral(jesse, fun2);\n+        fun = a.getFuneral(jesse);\n+        assertNotNull(fun);\n+        assertEquals(1, fun.size());\n+        assertEquals(\"Frying Pan\", fun.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", fun.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", fun.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testHeightNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> i = a.getHeights(jesse);\n+        assertNotNull(i);\n+        assertEquals(0, i.size());\n+        List<CustomFact> i2 = new ArrayList<>();\n+        CustomFact cf = a.newHeightCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        i2.add(cf);\n+        a.setHeights(jesse, i2);\n+        i = a.getHeights(jesse);\n+        assertNotNull(i);\n+        assertEquals(1, i.size());\n+        assertEquals(\"Frying Pan\", i.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", i.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", i.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testInitiatoryNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> i = a.getInitiatory(jesse);\n+        assertNotNull(i);\n+        assertEquals(0, i.size());\n+        List<CustomFact> i2 = new ArrayList<>();\n+        CustomFact cf = a.newInitiatoryCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        i2.add(cf);\n+        a.setInitiatory(jesse, i2);\n+        i = a.getInitiatory(jesse);\n+        assertNotNull(i);\n+        assertEquals(1, i.size());\n+        assertEquals(\"Frying Pan\", i.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", i.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", i.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testMedicalNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> m = a.getMedical(jesse);\n+        assertNotNull(m);\n+        assertEquals(0, m.size());\n+        List<CustomFact> m2 = new ArrayList<>();\n+        CustomFact cf = a.newMedicalCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        m2.add(cf);\n+        a.setMedical(jesse, m2);\n+        m = a.getMedical(jesse);\n+        assertNotNull(m);\n+        assertEquals(1, m.size());\n+        assertEquals(\"Frying Pan\", m.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", m.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", m.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testMilitaryIdNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> m = a.getMilitaryId(jesse);\n+        assertNotNull(m);\n+        assertEquals(0, m.size());\n+        List<CustomFact> m2 = new ArrayList<>();\n+        CustomFact cf = a.newMilitaryIdCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        m2.add(cf);\n+        a.setMilitaryId(jesse, m2);\n+        m = a.getMilitaryId(jesse);\n+        assertNotNull(m);\n+        assertEquals(1, m.size());\n+        assertEquals(\"Frying Pan\", m.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", m.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", m.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testMilitaryNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> m = a.getMilitary(jesse);\n+        assertNotNull(m);\n+        assertEquals(0, m.size());\n+        List<CustomFact> m2 = new ArrayList<>();\n+        CustomFact cf = a.newMilitaryCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        m2.add(cf);\n+        a.setMilitary(jesse, m2);\n+        m = a.getMilitary(jesse);\n+        assertNotNull(m);\n+        assertEquals(1, m.size());\n+        assertEquals(\"Frying Pan\", m.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", m.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", m.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testMissionNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> m = a.getMission(jesse);\n+        assertNotNull(m);\n+        assertEquals(0, m.size());\n+        List<CustomFact> m2 = new ArrayList<>();\n+        CustomFact cf = a.newMissionCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        m2.add(cf);\n+        a.setMission(jesse, m2);\n+        m = a.getMission(jesse);\n+        assertNotNull(m);\n+        assertEquals(1, m.size());\n+        assertEquals(\"Frying Pan\", m.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", m.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", m.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testNamesakeNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> n = a.getNamesake(jesse);\n+        assertNotNull(n);\n+        assertEquals(0, n.size());\n+        List<CustomFact> n2 = new ArrayList<>();\n+        CustomFact cf = a.newNamesakeCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        n2.add(cf);\n+        a.setNamesake(jesse, n2);\n+        n = a.getNamesake(jesse);\n+        assertNotNull(n);\n+        assertEquals(1, n.size());\n+        assertEquals(\"Frying Pan\", n.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", n.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", n.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testOrdinanceNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> o = a.getOrdinance(jesse);\n+        assertNotNull(o);\n+        assertEquals(0, o.size());\n+        List<CustomFact> o2 = new ArrayList<>();\n+        CustomFact cf = a.newOrdinanceCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        o2.add(cf);\n+        a.setOrdinance(jesse, o2);\n+        o = a.getOrdinance(jesse);\n+        assertNotNull(o);\n+        assertEquals(1, o.size());\n+        assertEquals(\"Frying Pan\", o.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", o.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", o.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testOriginNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> o = a.getOrigin(jesse);\n+        assertNotNull(o);\n+        assertEquals(0, o.size());\n+        List<CustomFact> o2 = new ArrayList<>();\n+        CustomFact cf = a.newOriginCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        o2.add(cf);\n+        a.setOrigin(jesse, o2);\n+        o = a.getOrigin(jesse);\n+        assertNotNull(o);\n+        assertEquals(1, o.size());\n+        assertEquals(\"Frying Pan\", o.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", o.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", o.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testPhotoNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> o = a.getPhoto(jesse);\n+        assertNotNull(o);\n+        assertEquals(0, o.size());\n+        List<CustomFact> o2 = new ArrayList<>();\n+        CustomFact cf = a.newPhotoCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        o2.add(cf);\n+        a.setPhoto(jesse, o2);\n+        o = a.getPhoto(jesse);\n+        assertNotNull(o);\n+        assertEquals(1, o.size());\n+        assertEquals(\"Frying Pan\", o.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", o.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", o.get(0).getPlace().getPlaceName());\n+    }\n+    @Test\n+    public void testSeparationNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> separations = a.getSeparation(family2);\n+        assertNotNull(separations);\n+        assertEquals(0, separations.size());\n+    }\n+    @Test\n+    public void testWeightNegative() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> w = a.getWeight(jesse);\n+        assertNotNull(w);\n+        assertEquals(0, w.size());\n+        List<CustomFact> w2 = new ArrayList<>();\n+        CustomFact cf = a.newWeightCustomFact();\n+        cf.setDate(\"01 JAN 1990\");\n+        cf.setDescription(\"Frying Pan\");\n+        Place p = new Place();\n+        p.setPlaceName(\"Wyoming, USA\");\n+        cf.setPlace(p);\n+        w2.add(cf);\n+        a.setWeight(jesse, w2);\n+        w = a.getWeight(jesse);\n+        assertNotNull(w);\n+        assertEquals(1, w.size());\n+        assertEquals(\"Frying Pan\", w.get(0).getDescription().getValue());\n+        assertEquals(\"01 JAN 1990\", w.get(0).getDate().getValue());\n+        assertEquals(\"Wyoming, USA\", w.get(0).getPlace().getPlaceName());\n+    }\n+    private Gedcom g;\n+    private Individual john;\n+    private Individual jesse;\n+    private Family family1;\n+    private Multimedia photo;\n+    private Source source;\n+    @Before\n+    public void setUp() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/ftmcustomtags.ged\");\n+        g = gp.getGedcom();\n+        john = g.getIndividuals().get(\"@I1@\");\n+        assertNotNull(john);\n+        jesse = g.getIndividuals().get(\"@I2@\");\n+        assertNotNull(jesse);\n+        final Individual june = g.getIndividuals().get(\"@I3@\");\n+        assertNotNull(june);\n+        family1 = g.getFamilies().get(\"@F1@\");\n+        assertNotNull(family1);\n+        assertSame(jesse, family1.getHusband().getIndividual());\n+        assertSame(june, family1.getWife().getIndividual());\n+        final Family family2 = g.getFamilies().get(\"@F2@\");\n+        assertNotNull(family2);\n+        photo = g.getMultimedia().get(\"@M1@\");\n+        assertNotNull(photo);\n+        source = g.getSources().get(\"@S1@\");\n+        assertNotNull(source);\n+    }\n+    @Test\n+    public void testCauseOfDeathPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> cod = a.getCauseOfDeath(john);\n+        assertNotNull(cod);\n+        assertEquals(1, cod.size());\n+        assertEquals(\"Alien abduction\", cod.get(0).getDescription().getValue());\n+        a.setCausesOfDeath(john, new ArrayList<CustomFact>());\n+        cod = a.getCauseOfDeath(jesse);\n+        assertNotNull(cod);\n+        assertEquals(0, cod.size());\n+    }\n+    @Test\n+    public void testCircumcisionPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> c = a.getCircumcision(john);\n+        assertNotNull(c);\n+        assertEquals(1, c.size());\n+        assertEquals(\"Dr. Streck performed\", c.get(0).getDescription().getValue());\n+        assertEquals(\"08 JAN 1950\", c.get(0).getDate().getValue());\n+        assertEquals(\"Colonial Heights, Independent Cities, Virginia, USA\", c.get(0).getPlace().getPlaceName());\n+        a.setCircumcision(john, new ArrayList<CustomFact>());\n+        c = a.getCircumcision(jesse);\n+        assertNotNull(c);\n+        assertEquals(0, c.size());\n+    }\n+    @Test\n+    public void testDestinationPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> d = a.getDestinations(john);\n+        assertNotNull(d);\n+        assertEquals(1, d.size());\n+        assertEquals(\"Alpha Centauri\", d.get(0).getDescription().getValue());\n+        a.setDestinations(john, new ArrayList<CustomFact>());\n+        d = a.getDestinations(jesse);\n+        assertNotNull(d);\n+        assertEquals(0, d.size());\n+    }\n+    @Test\n+    public void testElectedPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> el = a.getElected(john);\n+        assertNotNull(el);\n+        assertEquals(1, el.size());\n+        assertEquals(\"Mayor of Munchkin City\", el.get(0).getDescription().getValue());\n+        assertEquals(\"08 NOV 1992\", el.get(0).getDate().getValue());\n+        assertEquals(\"Orlando, Brevard, Florida, USA\", el.get(0).getPlace().getPlaceName());\n+        a.setElected(john, new ArrayList<CustomFact>());\n+        el = a.getElected(jesse);\n+        assertNotNull(el);\n+        assertEquals(0, el.size());\n+    }\n+    @Test\n+    public void testEmploymentPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> em = a.getEmployment(john);\n+        assertNotNull(em);\n+        assertEquals(1, em.size());\n+        assertEquals(\"Keeling moose and squirrel\", em.get(0).getDescription().getValue());\n+        assertEquals(\"1981\", em.get(0).getDate().getValue());\n+        assertEquals(\"Frostbite Falls, Minnesota, USA\", em.get(0).getPlace().getPlaceName());\n+        a.setEmployment(john, new ArrayList<CustomFact>());\n+        em = a.getEmployment(jesse);\n+        assertNotNull(em);\n+        assertEquals(0, em.size());\n+    }\n+    @Test\n+    public void testExcommunicationPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> ex = a.getExcommunication(john);\n+        assertNotNull(ex);\n+        assertEquals(1, ex.size());\n+        assertEquals(\"Church of the Flying Spaghetti Monster\", ex.get(0).getDescription().getValue());\n+        assertEquals(\"22 NOV 1982\", ex.get(0).getDate().getValue());\n+        assertEquals(\"Washington City, District Of Columbia, District of Columbia, USA\", ex.get(0).getPlace().getPlaceName());\n+        a.setExcommunication(john, new ArrayList<CustomFact>());\n+        ex = a.getExcommunication(jesse);\n+        assertNotNull(ex);\n+        assertEquals(0, ex.size());\n+    }\n+    @Test\n+    public void testFatherRelationshipPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        Family f = john.getFamiliesWhereChild().get(0).getFamily();\n+        assertSame(family1, f);\n+        assertNotNull(f.getChildren());\n+        assertEquals(1, f.getChildren().size());\n+        IndividualReference c = f.getChildren().get(0);\n+        assertSame(john, c.getIndividual());\n+        List<CustomFact> fatherRelationship = a.getFatherRelationship(c);\n+        assertNotNull(fatherRelationship);\n+        assertEquals(1, fatherRelationship.size());\n+        CustomFact frel = fatherRelationship.get(0);\n+        assertEquals(\"Step\", frel.getDescription().getValue());\n+        List<CustomFact> frels = new ArrayList<>();\n+        CustomFact frel2 = a.newFatherRelationshipCustomFact();\n+        frel2.setDescription(\"Adopted\");\n+        frels.add(frel2);\n+        a.setFatherRelationship(c, frels);\n+        assertEquals(\"Adopted\", a.getFatherRelationship(c).get(0).getDescription().getValue());\n+    }\n+    @Test\n+    public void testFuneralPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> fun = a.getFuneral(john);\n+        assertNotNull(fun);\n+        assertEquals(1, fun.size());\n+        assertEquals(\"Nobody showed up\", fun.get(0).getDescription().getValue());\n+        assertEquals(\"04 JUL 2000\", fun.get(0).getDate().getValue());\n+        assertEquals(\"Honolulu, Honolulu, Hawaii, USA\", fun.get(0).getPlace().getPlaceName());\n+        a.setFuneral(john, new ArrayList<CustomFact>());\n+        fun = a.getFuneral(jesse);\n+        assertNotNull(fun);\n+        assertEquals(0, fun.size());\n+    }\n+    @Test\n+    public void testHeightPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> h = a.getHeights(john);\n+        assertNotNull(h);\n+        assertEquals(1, h.size());\n+        assertEquals(\"6' 2\\\"\", h.get(0).getDescription().getValue());\n+        a.setHeights(john, new ArrayList<CustomFact>());\n+        h = a.getHeights(jesse);\n+        assertNotNull(h);\n+        assertEquals(0, h.size());\n+    }\n+    @Test\n+    public void testInitiatoryPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> i = a.getInitiatory(john);\n+        assertNotNull(i);\n+        assertEquals(1, i.size());\n+        assertEquals(\"Wore a blue tie\", i.get(0).getDescription().getValue());\n+        assertEquals(\"03 MAR 1970\", i.get(0).getDate().getValue());\n+        assertEquals(\"Kalamazoo, Kalamazoo, Michigan, USA\", i.get(0).getPlace().getPlaceName());\n+        a.setInitiatory(john, new ArrayList<CustomFact>());\n+        i = a.getInitiatory(jesse);\n+        assertNotNull(i);\n+        assertEquals(0, i.size());\n+    }\n+    @Test\n+    public void testMedicalPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> m = a.getMedical(john);\n+        assertNotNull(m);\n+        assertEquals(1, m.size());\n+        assertEquals(\"Decapitated, but recovered\", m.get(0).getDescription().getValue());\n+        assertEquals(\"08 AUG 1978\", m.get(0).getDate().getValue());\n+        assertEquals(\"San Antonio, Bexar, Texas, USA\", m.get(0).getPlace().getPlaceName());\n+        a.setMedical(john, new ArrayList<CustomFact>());\n+        m = a.getMedical(jesse);\n+        assertNotNull(m);\n+        assertEquals(0, m.size());\n+    }\n+    @Test\n+    public void testMilitaryIdPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> m = a.getMilitaryId(john);\n+        assertNotNull(m);\n+        assertEquals(1, m.size());\n+        assertEquals(\"1234567\", m.get(0).getDescription().getValue());\n+        assertEquals(\"06 JUN 1966\", m.get(0).getDate().getValue());\n+        assertEquals(\"Walla Walla, Walla Walla, Washington, USA\", m.get(0).getPlace().getPlaceName());\n+        a.setMilitaryId(john, new ArrayList<CustomFact>());\n+        m = a.getMilitaryId(jesse);\n+        assertNotNull(m);\n+        assertEquals(0, m.size());\n+    }\n+    @Test\n+    public void testMilitaryPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> m = a.getMilitary(john);\n+        assertNotNull(m);\n+        assertEquals(1, m.size());\n+        assertEquals(\"Garbage Pail Scrubber\", m.get(0).getDescription().getValue());\n+        assertEquals(\"BET 06 JUN 1966 AND 07 JUL 1967\", m.get(0).getDate().getValue());\n+        assertEquals(\"Fort Bragg, Cumberland, North Carolina, USA\", m.get(0).getPlace().getPlaceName());\n+        a.setMilitary(john, new ArrayList<CustomFact>());\n+        m = a.getMilitary(jesse);\n+        assertNotNull(m);\n+        assertEquals(0, m.size());\n+    }\n+    @Test\n+    public void testMissionPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> m = a.getMission(john);\n+        assertNotNull(m);\n+        assertEquals(1, m.size());\n+        assertEquals(\"It was swell\", m.get(0).getDescription().getValue());\n+        assertEquals(\"BET 01 JAN AND 31 AUG 1977\", m.get(0).getDate().getValue());\n+        assertEquals(\"Pocatello, Bannock, Idaho, USA\", m.get(0).getPlace().getPlaceName());\n+        a.setMission(john, new ArrayList<CustomFact>());\n+        m = a.getMission(jesse);\n+        assertNotNull(m);\n+        assertEquals(0, m.size());\n+    }\n+    @Test\n+    public void testMotherRelationshipPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        Family f = john.getFamiliesWhereChild().get(0).getFamily();\n+        assertSame(family1, f);\n+        assertNotNull(f.getChildren());\n+        assertEquals(1, f.getChildren().size());\n+        IndividualReference c = f.getChildren().get(0);\n+        assertSame(john, c.getIndividual());\n+        List<CustomFact> motherRelationship = a.getMotherRelationship(c);\n+        assertNotNull(motherRelationship);\n+        assertEquals(1, motherRelationship.size());\n+        CustomFact mrel = motherRelationship.get(0);\n+        assertEquals(\"Guardian\", mrel.getDescription().getValue());\n+        List<CustomFact> mrels = new ArrayList<>();\n+        CustomFact mrel2 = a.newMotherRelationshipCustomFact();\n+        mrel2.setDescription(\"Adopted\");\n+        mrels.add(mrel2);\n+        a.setMotherRelationship(c, mrels);\n+        assertEquals(\"Adopted\", a.getMotherRelationship(c).get(0).getDescription().getValue());\n+    }\n+    @Test\n+    public void testNamesakePositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> n = a.getNamesake(john);\n+        assertNotNull(n);\n+        assertEquals(1, n.size());\n+        assertEquals(\"Mr. Phil Philanganes (the Phamous Photographer)\", n.get(0).getDescription().getValue());\n+        assertNull(n.get(0).getDate());\n+        assertNull(n.get(0).getPlace());\n+        a.setNamesake(john, new ArrayList<CustomFact>());\n+        n = a.getNamesake(jesse);\n+        assertNotNull(n);\n+        assertEquals(0, n.size());\n+    }\n+    @Test\n+    public void testOrdinancePositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> o = a.getOrdinance(john);\n+        assertNotNull(o);\n+        assertEquals(1, o.size());\n+        assertEquals(\"Frying pans were not involved\", o.get(0).getDescription().getValue());\n+        assertEquals(\"09 SEP 1979\", o.get(0).getDate().getValue());\n+        assertEquals(\"Temecula, Riverside, California, USA\", o.get(0).getPlace().getPlaceName());\n+        a.setOrdinance(john, new ArrayList<CustomFact>());\n+        o = a.getOrdinance(jesse);\n+        assertNotNull(o);\n+        assertEquals(0, o.size());\n+    }\n+    @Test\n+    public void testOriginPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> o = a.getOrigin(john);\n+        assertNotNull(o);\n+        assertEquals(1, o.size());\n+        assertEquals(\"Cabbage Patch\", o.get(0).getDescription().getValue());\n+        assertNull(o.get(0).getDate());\n+        assertNull(o.get(0).getPlace());\n+        a.setOrigin(john, new ArrayList<CustomFact>());\n+        o = a.getOrigin(jesse);\n+        assertNotNull(o);\n+        assertEquals(0, o.size());\n+    }\n+    @Test\n+    public void testPhotoPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> p = a.getPhoto(john);\n+        assertNotNull(p);\n+        assertEquals(1, p.size());\n+        CustomFact thePhoto = p.get(0);\n+        assertEquals(\"@M1@\", thePhoto.getDescription().getValue());\n+        assertNull(thePhoto.getDate());\n+        assertNull(thePhoto.getPlace());\n+        assertSame(photo, g.getMultimedia().get(thePhoto.getDescription().getValue()));\n+        a.setPhoto(john, new ArrayList<CustomFact>());\n+        p = a.getPhoto(jesse);\n+        assertNotNull(p);\n+        assertEquals(0, p.size());\n+    }\n+    @Test\n+    public void testSeparationPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> separations = a.getSeparation(family1);\n+        assertNotNull(separations);\n+        assertEquals(1, separations.size());\n+        CustomFact theSep = separations.get(0);\n+        assertNotNull(theSep);\n+        assertEquals(\"There was a big fight\", theSep.getDescription().getValue());\n+        assertEquals(\"05 MAY 1955\", theSep.getDate().getValue());\n+        assertEquals(\"Glad Valley, Ziebach, South Dakota, USA\", theSep.getPlace().getPlaceName());\n+        CustomFact sep = a.newSeparationCustomFact();\n+        sep.setDescription(\"Never happened\");\n+        List<CustomFact> newSeps = new ArrayList<>();\n+        newSeps.add(sep);\n+        a.setSeparation(family1, newSeps);\n+        assertEquals(\"Never happened\", a.getSeparation(family1).get(0).getDescription().getValue());\n+        assertNull(a.getSeparation(family1).get(0).getPlace());\n+        assertNull(a.getSeparation(family1).get(0).getDate());\n+    }\n+    @Test\n+    public void testWeightPositive() {\n+        FamilyTreeMaker3Adapter a = new FamilyTreeMaker3Adapter();\n+        List<CustomFact> w = a.getWeight(john);\n+        assertNotNull(w);\n+        assertEquals(1, w.size());\n+        CustomFact wt = w.get(0);\n+        assertEquals(\"165lb\", wt.getDescription().getValue());\n+        assertNull(wt.getDate());\n+        assertNull(wt.getPlace());\n+        assertEquals(1, wt.getCitations().size());\n+        AbstractCitation c = wt.getCitations().get(0);\n+        assertTrue(c instanceof CitationWithSource);\n+        CitationWithSource cws = (CitationWithSource) c;\n+        assertNotNull(cws.getSource());\n+        assertEquals(cws.getSource(), source);\n+        assertSame(cws.getSource(), source);\n+        assertEquals(\"3\", cws.getCertainty().getValue());\n+        assertEquals(\"p1\", cws.getWhereInSource().getValue());\n+        assertEquals(\"Because it was an awesome napkin.\", a.getCertaintyJustification(cws).get(0).getDescription().getValue());\n+        assertNotNull(a.getWebLink(cws));\n+        assertEquals(\"http://gedcom4j.org\", a.getWebLink(cws).get(0).getDescription().getValue());\n+        a.setWeight(john, new ArrayList<CustomFact>());\n+        w = a.getWeight(jesse);\n+        assertNotNull(w);\n+        assertEquals(0, w.size());\n+    }\n+    private final LegacyFamilyTree8Adapter lfta = new LegacyFamilyTree8Adapter();\n+    @SuppressWarnings(\"PMD.SingularField\")\n+    private Gedcom gedcomWithCustomTags;\n+    private Gedcom gedcomWithoutCustomTags;\n+    private Individual will;\n+    @Before\n+    public void setUp() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/legacycustomtags.ged\");\n+        gedcomWithCustomTags = gp.getGedcom();\n+        assertNotNull(gedcomWithCustomTags);\n+        gp = new GedcomParser();\n+        gp.load(\"sample/legacynocustomtags.ged\");\n+        gedcomWithoutCustomTags = gp.getGedcom();\n+        assertNotNull(gedcomWithoutCustomTags);\n+        assertNotSame(gedcomWithCustomTags, gedcomWithoutCustomTags);\n+        will = gedcomWithCustomTags.getIndividuals().get(\"@I2@\");\n+        assertNotNull(will);\n+    }\n+    @Test\n+    public void testAddNewRemoveRemoveAllToDos() {\n+        List<CustomFact> toDos = lfta.getToDos(will);\n+        assertNotNull(toDos);\n+        assertEquals(2, toDos.size());\n+        CustomFact cf1 = toDos.get(0);\n+        CustomFact cf2 = toDos.get(1);\n+        assertEquals(2, lfta.removeToDos(will));\n+        toDos = lfta.getToDos(will);\n+        assertNotNull(toDos);\n+        assertEquals(0, toDos.size());\n+        lfta.addToDo(will, cf2);\n+        lfta.addToDo(will, cf1);\n+        toDos = lfta.getToDos(will);\n+        assertNotNull(toDos);\n+        assertEquals(2, toDos.size());\n+        assertEquals(cf2, toDos.get(0));\n+        assertEquals(cf1, toDos.get(1));\n+        assertEquals(1, lfta.removeTodo(will, cf2));\n+        toDos = lfta.getToDos(will);\n+        assertNotNull(toDos);\n+        assertEquals(1, toDos.size());\n+        assertEquals(cf1, toDos.get(0));\n+        CustomFact cf3 = lfta.newToDo();\n+        lfta.addToDo(will, cf3);\n+        toDos = lfta.getToDos(will);\n+        assertNotNull(toDos);\n+        assertEquals(2, toDos.size());\n+    }\n+    @Test\n+    public void testAddressSortValueNegative() {\n+        Individual willNoCustomTags = gedcomWithoutCustomTags.getIndividuals().get(\"@I2@\");\n+        IndividualEvent milSvc = willNoCustomTags.getEventsOfType(IndividualEventType.EVENT).get(0);\n+        assertEquals(\"Military Service\", milSvc.getSubType().getValue());\n+        Address addr = milSvc.getAddress();\n+        assertNotNull(addr);\n+        assertNull(lfta.getAddressSortValue(addr));\n+    }\n+    @Test\n+    public void testAddressSortValuePositive() {\n+        IndividualEvent milSvc = will.getEventsOfType(IndividualEventType.EVENT).get(0);\n+        assertEquals(\"Military Service\", milSvc.getSubType().getValue());\n+        Address addr = milSvc.getAddress();\n+        assertNotNull(addr);\n+        assertEquals(\"Main\", lfta.getAddressSortValue(addr));\n+        lfta.setAddressSortValue(addr, (String) null);\n+        assertNull(lfta.getAddressSortValue(addr));\n+        lfta.setAddressSortValue(addr, \"zzzzzSortMeLastzzzzzz\");\n+        assertEquals(\"zzzzzSortMeLastzzzzzz\", lfta.getAddressSortValue(addr));\n+    }\n+    @Test\n+    public void testGetSetAddressEmail() {\n+        Address addr = will.getEventsOfType(IndividualEventType.DEATH).get(0).getAddress();\n+        String s = lfta.getAddressEmail(addr);\n+        assertEquals(\"matt@gedcom4j.org\", s);\n+        lfta.setAddressEmail(addr, null);\n+        assertNull(lfta.getAddressEmail(addr));\n+        lfta.setAddressEmail(addr, \"support@gedcom4j.org\");\n+        assertEquals(\"support@gedcom4j.org\", lfta.getAddressEmail(addr));\n+    }\n+    @Test\n+    public void testGetSetAddressListFlag() {\n+        Address addr = will.getEventsOfType(IndividualEventType.BIRTH).get(0).getAddress();\n+        for (AddressMailingList ml : AddressMailingList.values()) {\n+            String s = lfta.getAddressListFlag(addr, ml);\n+            assertEquals(\"Y\", s);\n+            lfta.setAddressListFlag(addr, ml, null);\n+            assertNull(lfta.getAddressListFlag(addr, ml));\n+            lfta.setAddressListFlag(addr, ml, \"N\");\n+            assertEquals(\"N\", lfta.getAddressListFlag(addr, ml));\n+        }\n+    }\n+    @Test\n+    public void testGetSetAddressPrivateFlag() {\n+        Address addr = will.getEventsOfType(IndividualEventType.DEATH).get(0).getAddress();\n+        String s = lfta.getAddressPrivateFlag(addr);\n+        assertEquals(\"Y\", s);\n+        lfta.setAddressPrivateFlag(addr, null);\n+        assertNull(lfta.getAddressPrivateFlag(addr));\n+        lfta.setAddressPrivateFlag(addr, \"N\");\n+        assertEquals(\"N\", lfta.getAddressPrivateFlag(addr));\n+    }\n+    @Test\n+    public void testGetSetFamilyEventPrivateFlag() {\n+        FamilyEvent marriage = gedcomWithCustomTags.getFamilies().get(\"@F1@\").getEvents().get(0);\n+        String s = lfta.getFamilyEventPrivateFlag(marriage);\n+        assertEquals(\"Y\", s);\n+        lfta.setFamilyEventPrivateFlag(marriage, null);\n+        assertNull(lfta.getFamilyEventPrivateFlag(marriage));\n+        lfta.setFamilyEventPrivateFlag(marriage, \"N\");\n+        assertEquals(\"N\", lfta.getFamilyEventPrivateFlag(marriage));\n+    }\n+    @Test\n+    public void testGetSetFamilyMemberPreferredFlagDad() {\n+        Family f = gedcomWithCustomTags.getFamilies().get(\"@F3@\");\n+        Individual dad = f.getHusband().getIndividual();\n+        String s = lfta.getFamilyMemberPreferredFlag(f, dad);\n+        assertEquals(\"Y\", s);\n+        lfta.setFamilyMemberPreferredFlag(f, dad, null);\n+        assertNull(lfta.getFamilyMemberPreferredFlag(f, dad));\n+        lfta.setFamilyMemberPreferredFlag(f, dad, \"N\");\n+        assertEquals(\"N\", lfta.getFamilyMemberPreferredFlag(f, dad));\n+    }\n+    @Test\n+    public void testGetSetFamilyMemberPreferredFlagKid() {\n+        Family f = gedcomWithCustomTags.getFamilies().get(\"@F1@\");\n+        Individual kid1 = f.getChildren().get(0).getIndividual();\n+        Individual kid2 = f.getChildren().get(1).getIndividual();\n+        assertEquals(\"Y\", lfta.getFamilyMemberPreferredFlag(f, kid1));\n+        assertNull(lfta.getFamilyMemberPreferredFlag(f, kid2));\n+        lfta.setFamilyMemberPreferredFlag(f, kid1, null);\n+        assertNull(lfta.getFamilyMemberPreferredFlag(f, kid1));\n+        assertNull(lfta.getFamilyMemberPreferredFlag(f, kid2));\n+        lfta.setFamilyMemberPreferredFlag(f, kid1, \"N\");\n+        assertEquals(\"N\", lfta.getFamilyMemberPreferredFlag(f, kid1));\n+        assertNull(lfta.getFamilyMemberPreferredFlag(f, kid2));\n+    }\n+    @Test\n+    public void testGetSetFamilyMemberPreferredFlagMom() {\n+        Family f = gedcomWithCustomTags.getFamilies().get(\"@F3@\");\n+        Individual mom = f.getWife().getIndividual();\n+        String s = lfta.getFamilyMemberPreferredFlag(f, mom);\n+        assertEquals(\"Y\", s);\n+        lfta.setFamilyMemberPreferredFlag(f, mom, null);\n+        assertNull(lfta.getFamilyMemberPreferredFlag(f, mom));\n+        lfta.setFamilyMemberPreferredFlag(f, mom, \"N\");\n+        assertEquals(\"N\", lfta.getFamilyMemberPreferredFlag(f, mom));\n+    }\n+    @Test\n+    public void testGetSetIndividualEventPrivateFlag() {\n+        IndividualEvent birth = will.getEventsOfType(IndividualEventType.BIRTH).get(0);\n+        String s = lfta.getIndividualEventPrivateFlag(birth);\n+        assertEquals(\"Y\", s);\n+        lfta.setIndividualEventPrivateFlag(birth, null);\n+        assertNull(lfta.getIndividualEventPrivateFlag(birth));\n+        lfta.setIndividualEventPrivateFlag(birth, \"N\");\n+        assertEquals(\"N\", lfta.getIndividualEventPrivateFlag(birth));\n+    }\n+    @Test\n+    public void testGetSetMultimediaDate() {\n+        Multimedia mm = will.getMultimedia().get(0).getMultimedia();\n+        String s = lfta.getMultimediaDate(mm);\n+        assertEquals(\"4 Apr 2013\", s);\n+        lfta.setMultimediaDate(mm, null);\n+        assertNull(lfta.getMultimediaDate(mm));\n+        lfta.setMultimediaDate(mm, \"01 Jan 1986\");\n+        assertEquals(\"01 Jan 1986\", lfta.getMultimediaDate(mm));\n+    }\n+    @Test\n+    public void testGetSetMultimediaPrimaryFlag() {\n+        Multimedia mm = will.getMultimedia().get(0).getMultimedia();\n+        String s = lfta.getMultimediaPrimaryFlag(mm);\n+        assertEquals(\"Y\", s);\n+        lfta.setMultimediaPrimaryFlag(mm, null);\n+        assertNull(lfta.getMultimediaPrimaryFlag(mm));\n+        lfta.setMultimediaPrimaryFlag(mm, \"N\");\n+        assertEquals(\"N\", lfta.getMultimediaPrimaryFlag(mm));\n+    }\n+    @Test\n+    public void testGetSetMultimediaScrapbookTag() {\n+        Multimedia mm = will.getMultimedia().get(0).getMultimedia();\n+        String s = lfta.getMultimediaScrapbookTag(mm);\n+        assertEquals(\"Y\", s);\n+        lfta.setMultimediaScrapbookTag(mm, null);\n+        assertNull(lfta.getMultimediaScrapbookTag(mm));\n+        lfta.setMultimediaScrapbookTag(mm, \"N\");\n+        assertEquals(\"N\", lfta.getMultimediaScrapbookTag(mm));\n+    }\n+    @Test\n+    public void testGetSetMultimediaSound() {\n+        Multimedia mm = will.getMultimedia().get(0).getMultimedia();\n+        String s = lfta.getMultimediaSound(mm);\n+        assertEquals(\"Alarm01.wav\", s);\n+        lfta.setMultimediaSound(mm, null);\n+        assertNull(lfta.getMultimediaSound(mm));\n+        lfta.setMultimediaSound(mm, \"funkytown.mp3\");\n+        assertEquals(\"funkytown.mp3\", lfta.getMultimediaSound(mm));\n+    }\n+    @Test\n+    public void testGetSetMultimediaType() {\n+        Multimedia mm = will.getMultimedia().get(0).getMultimedia();\n+        String s = lfta.getMultimediaType(mm);\n+        assertEquals(\"PHOTO\", s);\n+        lfta.setMultimediaType(mm, null);\n+        assertNull(lfta.getMultimediaType(mm));\n+        lfta.setMultimediaType(mm, \"MOVIE\");\n+        assertEquals(\"MOVIE\", lfta.getMultimediaType(mm));\n+    }\n+    @Test\n+    public void testGetSetSourceInItalics() {\n+        Source src = gedcomWithCustomTags.getSources().get(\"@S2@\");\n+        String s = lfta.getSourceInItalicsFlag(src);\n+        assertEquals(\"Y\", s);\n+        lfta.setSourceInItalicsFlag(src, null);\n+        assertNull(lfta.getSourceInItalicsFlag(src));\n+        lfta.setSourceInItalicsFlag(src, \"N\");\n+        assertEquals(\"N\", lfta.getSourceInItalicsFlag(src));\n+    }\n+    @Test\n+    public void testGetSetSourceInParens() {\n+        Source src = gedcomWithCustomTags.getSources().get(\"@S2@\");\n+        String s = lfta.getSourceInParensFlag(src);\n+        assertEquals(\"Y\", s);\n+        lfta.setSourceInParensFlag(src, null);\n+        assertNull(lfta.getSourceInParensFlag(src));\n+        lfta.setSourceInParensFlag(src, \"N\");\n+        assertEquals(\"N\", lfta.getSourceInParensFlag(src));\n+    }\n+    @Test\n+    public void testGetSetSourceInQuotes() {\n+        Source src = gedcomWithCustomTags.getSources().get(\"@S2@\");\n+        String s = lfta.getSourceInQuotesFlag(src);\n+        assertEquals(\"Y\", s);\n+        lfta.setSourceInQuotesFlag(src, null);\n+        assertNull(lfta.getSourceInQuotesFlag(src));\n+        lfta.setSourceInQuotesFlag(src, \"N\");\n+        assertEquals(\"N\", lfta.getSourceInQuotesFlag(src));\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testGetTodosImmutable() {\n+        List<CustomFact> todos = lfta.getToDos(will);\n+        assertNotNull(todos);\n+        assertEquals(2, todos.size());\n+        todos.clear();\n+    }\n+    @Test\n+    public void testIndividualUIDNegative() {\n+        Individual willNoCustomTags = gedcomWithoutCustomTags.getIndividuals().get(\"@I2@\");\n+        assertNull(lfta.getIndividualUID(willNoCustomTags));\n+    }\n+    @Test\n+    public void testIndividualUIDPositive() {\n+        assertEquals(\"A0DFC922CDC44040B6B22B58106216AB9916\", lfta.getIndividualUID(will));\n+        lfta.setIndividualUID(will, (String) null);\n+        assertNull(lfta.getIndividualUID(will));\n+        lfta.setIndividualUID(will, \"12345678-1234-1234-1234-1234567890AB\");\n+        assertEquals(\"12345678-1234-1234-1234-1234567890AB\", lfta.getIndividualUID(will));\n+    }\n+    @Test\n+    public void testIsSetAddressTag() {\n+        Address addr = will.getEventsOfType(IndividualEventType.BIRTH).get(0).getAddress();\n+        assertTrue(lfta.isAddressTagged(addr));\n+        lfta.setAddressTagged(addr, false);\n+        assertFalse(lfta.isAddressTagged(addr));\n+        assertEquals(0, addr.getCustomFactsWithTag(\"_TAG\").size());\n+        lfta.setAddressTagged(addr, true);\n+        assertTrue(lfta.isAddressTagged(addr));\n+    }\n+    @Test\n+    public void testIsSetFamilyHadNoChildren() {\n+        Family family = gedcomWithCustomTags.getFamilies().get(\"@F3@\");\n+        assertTrue(lfta.isFamilyHadNoChildren(family));\n+        lfta.setFamilyHadNoChildren(family, false);\n+        assertFalse(lfta.isFamilyHadNoChildren(family));\n+        lfta.setFamilyHadNoChildren(family, true);\n+        assertTrue(lfta.isFamilyHadNoChildren(family));\n+    }\n+    @Test\n+    public void testIsSetIndividualTag() {\n+        assertTrue(lfta.isIndividualTagged(will));\n+        lfta.setIndividualTagged(will, false);\n+        assertFalse(lfta.isIndividualTagged(will));\n+        assertEquals(0, will.getCustomFactsWithTag(\"_TAG\").size());\n+        lfta.setIndividualTagged(will, true);\n+        assertTrue(lfta.isIndividualTagged(will));\n+    }\n+    @Test\n+    public void testNameAtAddressNegative() {\n+        Individual willNoCustomTags = gedcomWithoutCustomTags.getIndividuals().get(\"@I2@\");\n+        IndividualEvent milSvc = willNoCustomTags.getEventsOfType(IndividualEventType.EVENT).get(0);\n+        assertEquals(\"Military Service\", milSvc.getSubType().getValue());\n+        Address addr = milSvc.getAddress();\n+        assertNotNull(addr);\n+        assertNull(lfta.getNameAtAddress(addr));\n+    }\n+    @Test\n+    public void testNameAtAddressPositive() {\n+        IndividualEvent milSvc = will.getEventsOfType(IndividualEventType.EVENT).get(0);\n+        assertEquals(\"Military Service\", milSvc.getSubType().getValue());\n+        Address addr = milSvc.getAddress();\n+        assertNotNull(addr);\n+        assertEquals(\"Will Williams\", lfta.getNameAtAddress(addr));\n+        lfta.setNameAtAddress(addr, (String) null);\n+        assertNull(lfta.getNameAtAddress(addr));\n+        lfta.setNameAtAddress(addr, \"Bill Williams\");\n+        assertEquals(\"Bill Williams\", lfta.getNameAtAddress(addr));\n+    }\n+    @Test\n+    public void testToDoCategory() {\n+        CustomFact toDo = lfta.newToDo();\n+        assertNull(lfta.getToDoCategory(toDo));\n+        lfta.setToDoCategory(toDo, \"License\");\n+        assertEquals(\"License\", lfta.getToDoCategory(toDo));\n+        assertEquals(\"Birth Certificate\", lfta.getToDoCategory(lfta.getToDos(will).get(0)));\n+    }\n+    @Test\n+    public void testToDoClosedDate() {\n+        CustomFact toDo = lfta.newToDo();\n+        assertNull(lfta.getToDoClosedDate(toDo));\n+        lfta.setToDoClosedDate(toDo, \"08 OCT 2016\");\n+        assertEquals(\"08 OCT 2016\", lfta.getToDoClosedDate(toDo));\n+        assertEquals(\"1 Oct 2016\", lfta.getToDoClosedDate(lfta.getToDos(will).get(1)));\n+    }\n+    @Test\n+    public void testToDoDescription() {\n+        CustomFact toDo = lfta.newToDo();\n+        assertNull(lfta.getToDoDescription(toDo)); // The ToDo description child element\n+        assertNull(toDo.getDescription()); // Note: NOT the custom tag description (value to right of tag)\n+        lfta.setToDoDescription(toDo, \"License\");\n+        assertEquals(\"License\", lfta.getToDoDescription(toDo));\n+        assertNull(toDo.getDescription());\n+        CustomFact willToDo1 = lfta.getToDos(will).get(0);\n+        assertEquals(\"Obtain\", lfta.getToDoDescription(willToDo1));\n+        assertNull(willToDo1.getDescription());\n+    }\n+    @Test\n+    public void testToDoLocality() {\n+        CustomFact toDo = lfta.newToDo();\n+        assertNull(lfta.getToDoLocality(toDo));\n+        lfta.setToDoLocality(toDo, \"Cucamonga\");\n+        assertEquals(\"Cucamonga\", lfta.getToDoLocality(toDo));\n+        assertEquals(\"Somewhere over the rainbow\", lfta.getToDoLocality(lfta.getToDos(will).get(0)));\n+    }\n+    @Test\n+    @SuppressWarnings(\"PMD.SystemPrintln\")\n+    public void test() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.setStrictCustomTags(false);\n+        gp.load(\"sample/ftmcustomtags.ged\");\n+        Gedcom g = gp.getGedcom();\n+        assertNotNull(g);\n+        for (String e : gp.getErrors()) {\n+            System.out.println(e);\n+        }\n+        assertEquals(0, gp.getErrors().size());\n+        for (String w : gp.getWarnings()) {\n+            System.out.println(w);\n+        }\n+        assertEquals(0, gp.getWarnings().size());\n+        Individual john = g.getIndividuals().get(\"@I1@\");\n+        assertNotNull(john);\n+        assertEquals(19, john.getCustomFacts().size());\n+        CustomFact customFact = john.getCustomFactsWithTag(\"_MDCL\").get(0);\n+        assertNotNull(customFact);\n+        assertEquals(\"Decapitated, but recovered\", customFact.getDescription().getValue());\n+        assertNotNull(customFact.getDate());\n+        assertEquals(\"08 AUG 1978\", customFact.getDate().getValue());\n+        assertEquals(\"San Antonio, Bexar, Texas, USA\", customFact.getPlace().getPlaceName());\n+    }\n+        assertNotNull(p.getNoteStructures());\n+        assertEquals(1, p.getNoteStructures().size());\n+        assertNotNull(p.getNoteStructures());\n+        assertEquals(1, p.getNoteStructures().size());\n+    @SuppressWarnings(\"PMD.SystemPrintln\")\n+        for (String e : gp.getErrors()) {\n+            System.out.println(e);\n+        }\n+        assertNotNull(p.getNoteStructures());\n+        assertEquals(1, p.getNoteStructures().size());\n+        assertEquals(\"There is exactly 1 custom tag on the file as a whole\", 1, gp.getGedcom().getCustomFacts().size());\n+        assertEquals(\"There is exactly 1 custom tag in the header\", 1, gp.getGedcom().getHeader().getCustomFacts().size());\n+        assertEquals(\"UNSPECIFIED\", submitter.getName().getValue());\n+            assertTrue(s.getTitle().getLines(true).get(0).equals(\"William Barnett Family.FTW\") || s.getTitle().getLines(true).get(0)\n+                    .equals(\"Warrick County, IN WPA Indexes\"));\n+        Individual h = family.getHusband().getIndividual();\n+        assertEquals(\"Lawrence Henry /Barnett/\", h.getNames().get(0).getBasic());\n+        Individual w = family.getWife().getIndividual();\n+        assertEquals(\"Velma //\", w.getNames().get(0).getBasic());\n+        NoteStructure note;\n+        assertEquals(2, indi.getNoteStructures().size());\n+        assertEquals(1, name.getNoteStructures().size());\n+            assertEquals(0, citWithSource.getNoteStructures().size());\n+            assertNull(citWithSource.getNoteStructures());\n+        note = name.getNoteStructures().get(0);\n+        assertEquals(1, name.getNoteStructures().size());\n+        assertEquals(1, citWithSource.getNoteStructures().size());\n+        multimedia = citWithSource.getMultimedia().get(0).getMultimedia();\n+        assertEquals(1, multimedia.getNoteStructures().size());\n+        note = multimedia.getNoteStructures().get(0);\n+        assertEquals(1, note.getNoteReference().getLines().size());\n+        assertEquals(\"These are some notes of this multimedia link in the NAME structure.\", note.getNoteReference().getLines().get(\n+                0));\n+        note = citWithSource.getNoteStructures().get(0);\n+        assertNotNull(note.getNoteReference());\n+        assertNotNull(note.getNoteReference().getLines());\n+        assertEquals(3, note.getNoteReference().getLines().size());\n+                note.getNoteReference().getLines().get(0));\n+        note = name.getNoteStructures().get(0);\n+        note = indi.getNoteStructures().get(0);\n+        assertEquals(40, note.getNoteReference().getLines().size());\n+        assertEquals(\"Comments on \\\"Joseph Tag Torture\\\" INDIVIDUAL Record.\", note.getNoteReference().getLines().get(0));\n+        note = indi.getNoteStructures().get(1);\n+        assertEquals(1, citWithSource.getNoteStructures().size());\n+        note = citWithSource.getNoteStructures().get(0);\n+        assertEquals(1, citWithSource.getNoteStructures().size());\n+        note = citWithSource.getNoteStructures().get(0);\n+        assertEquals(1, note.getNoteReference().getLines().size());\n+        assertEquals(\"This is a second source citation in this record.\", note.getNoteReference().getLines().get(0));\n+        assertEquals(1, citWithoutSource.getNoteStructures().size());\n+        note = citWithoutSource.getNoteStructures().get(0);\n+        assertEquals(1, note.getNoteReference().getLines().size());\n+                        + \"More modern GEDCOM files should use source citations to SOURCE records.\", note.getNoteReference()\n+                                .getLines().get(0));\n+        assertNotNull(i.getNoteStructures());\n+        assertEquals(1, i.getNoteStructures().size());\n+        NoteStructure n = i.getNoteStructures().get(0);\n+    @SuppressWarnings(\"PMD.SystemPrintln\")\n+        for (String e : gp.getErrors()) {\n+            System.out.println(e);\n+        }\n+        for (String w : gp.getWarnings()) {\n+            System.out.println(w);\n+        }\n+        List<CustomFact> customFacts = submitter.getName().getCustomFacts();\n+        assertNotNull(customFacts);\n+        assertEquals(1, customFacts.size());\n+        assertCustomTagRecursively(customFacts.get(0), MAX_DEPTH);\n+    private void assertCustomTagRecursively(CustomFact customFact, int remaining) {\n+        assertNotNull(\"With \" + remaining + \" levels remaining, customFacts was null\", customFact);\n+        assertNotNull(\"With \" + remaining + \" levels remaining, customFacts had no children\", customFact.getCustomFacts());\n+        assertEquals(\"With \" + remaining + \" levels remaining, customFacts did not have exactly one child. \", 1, customFact\n+                .getCustomFacts().size());\n+        CustomFact newCustomFacts = customFact.getCustomFacts().get(0);\n+        assertNotNull(newCustomFacts);\n+        assertCustomTagRecursively(newCustomFacts, remaining - 1);\n+    @Test\n+    public void testIgnored() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.setIgnoreCustomTags(true);\n+        gp.load(\"sample/customtagstorture.ged\");\n+        Gedcom g = gp.getGedcom();\n+        assertNull(g.getHeader().getCustomFacts());\n+        assertNull(g.getHeader().getCharacterSet().getCustomFacts());\n+        for (Individual i : g.getIndividuals().values()) {\n+            assertNull(i.getCustomFacts());\n+        }\n+        for (Family f : g.getFamilies().values()) {\n+            assertNull(f.getCustomFacts());\n+        }\n+        for (Source s : g.getSources().values()) {\n+            assertNull(s.getCustomFacts());\n+        }\n+    }\n+    @Test\n+    public void testNotIgnored() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.setIgnoreCustomTags(false);\n+        gp.load(\"sample/customtagstorture.ged\");\n+        Gedcom g = gp.getGedcom();\n+        assertNotNull(g.getHeader().getCustomFacts());\n+        assertNotNull(g.getHeader().getCharacterSet().getCustomFacts());\n+        for (Individual i : g.getIndividuals().values()) {\n+            assertNotNull(i.toString(), i.getCustomFacts());\n+        }\n+        for (Family f : g.getFamilies().values()) {\n+            assertNotNull(f.getCustomFacts());\n+        }\n+        for (Source s : g.getSources().values()) {\n+            assertNotNull(s.getCustomFacts());\n+        }\n+    }\n+                checkJohn(john.getNoteStructures());\n+                checkMary(mary.getNoteStructures());\n+    private void checkJohn(List<NoteStructure> list) {\n+        assertNotNull(list);\n+        assertEquals(1, list.size());\n+        NoteStructure note = list.get(0);\n+    private void checkMary(List<NoteStructure> notes) {\n+        NoteStructure note = notes.get(0);\n+            assertNotNull(i.getCustomFacts());\n+            assertFalse(\"Individual \" + i + \" has no custom facts\", i.getCustomFacts().isEmpty());\n+            for (CustomFact ct : i.getCustomFacts()) {\n+                assertTrue(\"Custom tag should be WAND or MUGL, but is \" + ct.getDescription(), \"WAND\".equals(ct.getTag()) || \"MUGL\"\n+                    assertNotNull(ct.getDescription());\n+                    assertFalse(ct.getDescription().trim().length() == 0);\n+                    assertNull(ct.getDescription());\n+                assertNotNull(i.getCustomFacts());\n+                assertTrue(i.getCustomFacts().isEmpty());\n+                assertNull(i.getCustomFacts());\n+        assertNull(\"\", birth.getYNull());\n+        assertNull(burial.getYNull());\n+        assertEquals(\"Y\", cremation.getYNull());\n+        assertNull(death.getYNull());\n+        assertNotNull(family.getHusband().getIndividual());\n+        assertEquals(\"@I001@\", family.getHusband().getIndividual().getXref());\n+        assertEquals(\"Husband /Gedcom/\", family.getHusband().getIndividual().getNames().get(0).getBasic());\n+        assertNotNull(family.getWife().getIndividual());\n+        assertEquals(\"@I002@\", family.getWife().getIndividual().getXref());\n+        assertEquals(\"Wife /Gedcom/\", family.getWife().getIndividual().getNames().get(0).getBasic());\n+        assertNull(marriage.getNoteStructures());\n+        NoteRecord note = g.getNotes().values().iterator().next();\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N24@\");\n+        NoteRecord note = g.getNotes().get(\"@N25@\"); // This one has lots of extended characters\n+    private static final int EXPECTED_TAG_COUNT = 93;\n+    @Test\n+    public void test() {\n+        Gedcom g = new Gedcom();\n+        ParseProgressEvent ppe = new ParseProgressEvent(this, g, false, 100);\n+        assertNotNull(ppe);\n+        assertEquals(this, ppe.getSource());\n+        assertFalse(ppe.isComplete());\n+        assertEquals(100, ppe.getLinesParsed());\n+        assertEquals(\"ParseProgressEvent [complete=false, linesParsed=100, familiesProcessed=0, individualsProcessed=0, \"\n+                + \"multimediaProcessed=0, notesProcessed=0, repositoriesProcessed=0, sourcesProcessed=0, submittersProcessed=0]\",\n+                ppe.toString());\n+    }\n+        gp.load(\"sample/problemFile.ged\");\n+        assertEquals(\"The relationship length should be 1 hop long after collapsing\", 1, r.getChain().size());\n+        assertEquals(\"The relationship length should be one hop long after collapsing\", 1, r.getChain().size());\n+        assertEquals(\"The relationship length should be 1 hops long after collapsing\", 1, r.getChain().size());\n+        assertEquals(\"The relationship length should be one hops long (after collapsing)\", 1, r.getChain().size());\n+    protected Validator validator;\n+        validator = new Validator(gedcom);\n+    @SuppressWarnings(\"checkstyle:WhitespaceAround\")\n+    protected void assertFindingsContain(Severity severity, Class<? extends ModelElement> c, int code, String fieldName) {\n+        for (Finding f : validator.getResults().getAllFindings()) {\n+            if (f.getSeverity() == severity && f.getItemOfConcern().getClass().equals(c) && f.getProblemCode() == code\n+                    && (fieldName == null || fieldName.equals(f.getFieldNameOfConcern()))) {\n+                return;\n+        fail(\"No finding of severity \" + severity + \" found on object of type \" + c.getName() + \" with code \" + code + \" on field \"\n+                + fieldName + \" as expected.\\nFindings contain: \" + validator.getResults().getAllFindings());\n+    }\n+    protected void assertFindingsContain(Severity severity, ModelElement objectWithFinding, int code, String fieldName) {\n+        for (Finding f : validator.getResults().getAllFindings()) {\n+            if (f.getSeverity() == severity && f.getItemOfConcern() == objectWithFinding && f.getProblemCode() == code\n+                    && (fieldName == null || fieldName.equals(f.getFieldNameOfConcern()))) {\n+                return;\n+        fail(\"No finding of severity \" + severity + \" found on object of type \" + objectWithFinding.getClass().getName()\n+                + \" with code \" + code + \" on field \" + fieldName + \" as expected.\\nFindings contain: \" + validator.getResults()\n+                        .getAllFindings());\n+    }\n+    protected void assertFindingsContain(Severity severity, ModelElement objectWithFinding, ProblemCode code, String fieldName) {\n+        assertFindingsContain(severity, objectWithFinding, code.getCode(), fieldName);\n+        if (!validator.getResults().getAllFindings().isEmpty()) {\n+            StringBuilder sb = new StringBuilder(100);\n+            boolean first = true;\n+            for (Finding f : validator.getResults().getAllFindings()) {\n+                if (!first) {\n+                    sb.append(\"\\n\");\n+                }\n+                sb.append(\"\\t\").append(f);\n+            }\n+            fail(\"There should not be any warnings or errors, but there were:\" + sb.toString());\n+    protected void loadFile(String fileName) throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(fileName);\n+        gedcom = gp.getGedcom();\n+        validator = new Validator(gedcom);\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = IllegalArgumentException.class)\n+    public void mixedTypes() {\n+        new AutoRepair(new Gedcom(), new Family());\n+    }\n+    @Test\n+    public void testBasic() {\n+        Source b = new Source();\n+        b.setXref(\"@S123@\");\n+        b.setRecIdNumber(\"1\");\n+        Source a = new Source(b);\n+        a.setRecIdNumber(\"2\");\n+        AutoRepair ar = new AutoRepair(b, a);\n+        assertNotNull(ar);\n+        assertFalse(ar.getBefore().equals(ar.getAfter()));\n+    }\n+    @Test\n+    public void testEqualsHashcodeToString() {\n+        AutoRepair ar1 = new AutoRepair(new Gedcom(), new Gedcom());\n+        AutoRepair ar2 = new AutoRepair(new Gedcom(), new Gedcom());\n+        assertEquals(ar1, ar2);\n+        assertEquals(ar1.hashCode(), ar2.hashCode());\n+        assertEquals(ar1.toString(), ar2.toString());\n+        ar2 = new AutoRepair(new Family(), new Family());\n+        assertFalse(ar1.equals(ar2));\n+        assertFalse(ar1.hashCode() == ar2.hashCode());\n+        assertFalse(ar1.toString().equals(ar2.toString()));\n+    }\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertEquals(0, validator.getResults().getByCode(ProblemCode.MOTHER_MAY_HAVE_BEEN_DECEASED).size());\n+        assertEquals(0, validator.getResults().getByCode(ProblemCode.FATHER_MAY_HAVE_BEEN_DECEASED).size());\n+        assertEquals(2, validator.getResults().getByCode(ProblemCode.MOTHER_WAS_SIXTY_OR_OLDER).size());\n+        assertEquals(2, validator.getResults().getByCode(ProblemCode.FATHER_WAS_SIXTY_OR_OLDER).size());\n+    }\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.WARNING, IndividualEvent.class, ProblemCode.MOTHER_MAY_NOT_HAVE_BEEN_BORN_YET.getCode(),\n+                \"date\");\n+        assertEquals(1, validator.getResults().getByCode(ProblemCode.MOTHER_MAY_NOT_HAVE_BEEN_BORN_YET).size());\n+        assertEquals(0, validator.getResults().getByCode(ProblemCode.FATHER_MAY_NOT_HAVE_BEEN_BORN_YET).size());\n+        assertEquals(2, validator.getResults().getByCode(ProblemCode.MOTHER_WAS_LESS_THAN_SIXTEEN).size());\n+        assertEquals(2, validator.getResults().getByCode(ProblemCode.FATHER_WAS_LESS_THAN_SIXTEEN).size());\n+    }\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.WARNING, Individual.class, ProblemCode.DESCENDANT_BORN_BEFORE_ANCESTOR.getCode(), null);\n+        assertEquals(5, validator.getResults().getByCode(ProblemCode.DESCENDANT_BORN_BEFORE_ANCESTOR).size());\n+    }\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, Individual.class, ProblemCode.CIRCULAR_ANCESTRAL_RELATIONSHIP.getCode(),\n+                \"familiesWhereChild\");\n+        assertEquals(3, validator.getResults().getByCode(ProblemCode.CIRCULAR_ANCESTRAL_RELATIONSHIP).size());\n+    }\n+    public void testValidateWithoutSourceNoNoteLines() {\n+        NoteStructure n = new NoteStructure();\n+        CitationWithoutSource c = new CitationWithoutSource();\n+        c.getNoteStructures(true).add(n);\n+        AbstractValidator cv = new CitationValidator(validator, c);\n+        assertFindingsContain(Severity.ERROR, n, ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"lines\");\n+    }\n+    @Test\n+    public void testValidateWithoutSourceSimple() {\n+        NoteStructure n = new NoteStructure();\n+        n.getLines(true).add(\"Frying Pan\");\n+        CitationWithoutSource c = new CitationWithoutSource();\n+        c.getNoteStructures(true).add(n);\n+        AbstractValidator cv = new CitationValidator(validator, c);\n+        cv.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testValidateWithSourceNoSource() {\n+        NoteStructure n = new NoteStructure();\n+        n.getLines(true).add(\"Frying Pan\");\n+        AbstractCitation c = new CitationWithSource();\n+        c.getNoteStructures(true).add(n);\n+        AbstractValidator cv = new CitationValidator(validator, c);\n+        cv.validate();\n+        assertFindingsContain(Severity.ERROR, c, ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"source\");\n+    }\n+    @Test\n+    public void testValidateWithSourceSimple() {\n+        NoteStructure n = new NoteStructure();\n+        n.getLines(true).add(\"Frying Pan\");\n+        CitationWithSource c = new CitationWithSource();\n+        c.getNoteStructures(true).add(n);\n+        Source source = new Source();\n+        c.setSource(source);\n+        AbstractValidator cv = new CitationValidator(validator, c);\n+        cv.validate();\n+        assertNoIssues();\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.WARNING, Family.class, ProblemCode.COUPLE_MORE_THAN_FIFTEEN_YEARS_AGE_DIFFERENCE.getCode(),\n+                null);\n+    }\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.WARNING, Individual.class, ProblemCode.SURNAMES_DONT_MATCH_PARENTS.getCode(), \"surnames\");\n+    }\n+    @Test\n+    public void testCountOnly() {\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", \"D\", \"D\", \"D\", \"D\", \"E\", \"F\",\n+                \"F\" }));\n+        DuplicateHandler<String> classUnderTest = new DuplicateHandler<>(list);\n+        assertEquals(5, classUnderTest.count());\n+        assertEquals(\"When only counting, repeated calls should five the same result\", 5, classUnderTest.count());\n+    }\n+    @Test\n+    public void testCountOnlyWithNulls() {\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", null, null, \"D\", \"D\", \"D\", \"D\",\n+                \"E\", null, \"F\", \"F\" }));\n+        DuplicateHandler<String> classUnderTest = new DuplicateHandler<>(list);\n+        assertEquals(7, classUnderTest.count());\n+        assertEquals(\"When only counting, repeated calls should five the same result\", 7, classUnderTest.count());\n+    }\n+    @Test\n+    public void testRemoving() {\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", \"D\", \"D\", \"D\", \"D\", \"E\", \"F\",\n+                \"F\" }));\n+        DuplicateHandler<String> classUnderTest = new DuplicateHandler<>(list);\n+        assertEquals(5, classUnderTest.remove());\n+        assertEquals(Arrays.asList(new String[] { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\" }), list);\n+        assertEquals(\"After removing, repeated calls should return 0 duplicates counted/removed\", 0, classUnderTest.remove());\n+    }\n+    @Test\n+    public void testRemovingWithNulls() {\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", null, null, \"D\", \"D\", \"D\", \"D\",\n+                \"E\", null, \"F\", \"F\" }));\n+        DuplicateHandler<String> classUnderTest = new DuplicateHandler<>(list);\n+        assertEquals(7, classUnderTest.remove());\n+        assertEquals(Arrays.asList(new String[] { \"A\", \"B\", \"C\", null, \"D\", \"E\", \"F\" }), list);\n+        assertEquals(\"After removing, repeated calls should return 0 duplicates counted/removed\", 0, classUnderTest.remove());\n+    }\n+        validator = new Validator(gedcom);\n+        validator.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        f.setHusband(new IndividualReference(dad));\n+        f.setWife(new IndividualReference(mom));\n+        f.getChildren(true).add(new IndividualReference(jr));\n+        validator.validate();\n+        f.setAutomatedRecordId(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, f, ProblemCode.MISSING_REQUIRED_VALUE, \"automatedRecordId\");\n+        f.setAutomatedRecordId(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, f, ProblemCode.MISSING_REQUIRED_VALUE, \"automatedRecordId\");\n+        f.setAutomatedRecordId(\"     \");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, f, ProblemCode.MISSING_REQUIRED_VALUE, \"automatedRecordId\");\n+        f.setAutomatedRecordId(\"Frying Pan\");\n+        validator.validate();\n+        validator.validate();\n+    public void testNoCustomFacts() {\n+        validator.validate();\n+        f.getCustomFacts(true).clear();\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+        f.getChildren(true).add(new IndividualReference(jr));\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, IndividualEvent.class, ProblemCode.DATE_IN_FUTURE.getCode(), \"date\");\n+        assertEquals(2, validator.getResults().getByCode(ProblemCode.DATE_IN_FUTURE).size());\n+    }\n+        s.setName(\"test\");\n+        gedcom.getSubmitters().put(s.getXref(), s);\n+        gedcom.setSubmission(new Submission(\"@SUBN0001@\"));\n+        Header h = gedcom.getHeader();\n+        h.setSubmitterReference(new SubmitterReference(s));\n+        h.setSubmissionReference(new SubmissionReference(gedcom.getSubmission()));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, h, ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"characterSet\");\n+        validator.validate();\n+        h.getCharacterSet().setCharacterSetName((String) null);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, h.getCharacterSet(), ProblemCode.MISSING_REQUIRED_VALUE.getCode(),\n+                \"characterSetName\");\n+        h.getCharacterSet().setCharacterSetName(\"FRYINGPAN\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, h.getCharacterSet().getCharacterSetName(), ProblemCode.ILLEGAL_VALUE.getCode(),\n+                \"value\");\n+        h.getCharacterSet().setCharacterSetName(new StringWithCustomFacts(Encoding.ASCII.getCharacterSetName()));\n+        validator.validate();\n+        s.setName(\"test\");\n+        gedcom.getSubmitters().put(s.getXref(), s);\n+        Header h = gedcom.getHeader();\n+        h.setSubmitterReference(new SubmitterReference(s));\n+        gedcom.setSubmission(new Submission(\"@SUBN0001@\"));\n+        validator.validate();\n+        s.setName(\"test\");\n+        gedcom.getSubmitters().put(s.getXref(), s);\n+        Header h = gedcom.getHeader();\n+        h.setSubmitterReference(new SubmitterReference(s));\n+        gedcom.setSubmission(new Submission(\"@SUBN0001@\"));\n+        h.setSubmissionReference(new SubmissionReference(gedcom.getSubmission()));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, h, ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"gedcomVersion\");\n+        validator.validate();\n+        h.getGedcomVersion().setVersionNumber((String) null);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, h.getGedcomVersion(), ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"versionNumber\");\n+        gedcom.getHeader().setSubmitterReference(null);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, gedcom.getHeader(), ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"submitter\");\n+        s.setName(\"test\");\n+        gedcom.getSubmitters().put(s.getXref(), s);\n+        Header h = gedcom.getHeader();\n+        h.setSubmitterReference(new SubmitterReference(s));\n+        validator.validate();\n+        s.setName(\"test\");\n+        gedcom.getSubmitters().put(s.getXref(), s);\n+        Header h = gedcom.getHeader();\n+        h.setSubmitterReference(new SubmitterReference(s));\n+        gedcom.setSubmission(new Submission(\"@SUBN0001@\"));\n+        h.setSubmissionReference(new SubmissionReference(gedcom.getSubmission()));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, h, ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"sourceSystem\");\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, ss.getCorporation(), ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"businessName\");\n+        validator.validate();\n+        ss.setProductName(\"Yo\");\n+        validator.validate();\n+        ss.setProductName((String) null);\n+        validator.validate();\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, ss, ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"systemId\");\n+        validator.validate();\n+        validator = new Validator(g);\n+        validator.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, e, ProblemCode.MISSING_REQUIRED_VALUE, \"type\");\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+        validator.validate();\n+        e.getAddress().setCity(\"FryingPanVille\");\n+        validator.validate();\n+        AbstractValidator v = new IndividualValidator(validator, i);\n+        assertFindingsContain(Severity.ERROR, i, ProblemCode.MISSING_REQUIRED_VALUE, \"xref\");\n+        validator = new Validator(g);\n+        validator.validate();\n+        for (Finding f : validator.getResults().getAllFindings()) {\n+            assertNotNull(\"The finding should have an object attached\", f.getItemOfConcern());\n+                assertTrue(\"The \" + f.getItemOfConcern().getClass().getName() + \" object attached should be a Map entry\", f\n+                        .getItemOfConcern() instanceof Individual);\n+        subm.setName(\"Sean /Connery/\");\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        assertEquals(1, gv.getResults().getAllFindings().size());\n+        Finding f = gv.getResults().getAllFindings().get(0);\n+        assertEquals(Severity.ERROR, f.getSeverity());\n+        assertEquals(ProblemCode.DUPLICATE_VALUE.getCode(), f.getProblemCode());\n+        assertEquals(\"names\", f.getFieldNameOfConcern());\n+    @Test\n+    public void testBadEnumString1() {\n+        LdsIndividualOrdinance l = new LdsIndividualOrdinance();\n+        l.setDate(\"5 MAY 1905\");\n+        l.setTemple(\"Temple 1\");\n+        l.setType(LdsIndividualOrdinanceType.BAPTISM);\n+        l.setStatus(\"I'm a bad baptism status\");\n+        new LdsIndividualOrdinanceValidator(validator, l).validate();\n+        assertFindingsContain(Severity.ERROR, l, ProblemCode.ILLEGAL_VALUE, \"status\");\n+    }\n+    @Test\n+    public void testNoType() {\n+        LdsIndividualOrdinance l = new LdsIndividualOrdinance();\n+        l.setDate(\"5 MAY 1905\");\n+        l.setTemple(\"Temple 1\");\n+        NoteStructure n = new NoteStructure();\n+        n.getLines(true).add(\"Testing 1 2 3\");\n+        l.getNoteStructures(true).add(n);\n+        new LdsIndividualOrdinanceValidator(validator, l).validate();\n+        assertFindingsContain(Severity.ERROR, l, ProblemCode.MISSING_REQUIRED_VALUE, \"type\");\n+    }\n+    @Test\n+    public void testPositive() {\n+        LdsIndividualOrdinance l = new LdsIndividualOrdinance();\n+        l.setDate(\"5 MAY 1905\");\n+        l.setTemple(\"Temple 1\");\n+        NoteStructure n = new NoteStructure();\n+        n.getLines(true).add(\"Testing 1 2 3\");\n+        l.getNoteStructures(true).add(n);\n+        l.setType(LdsIndividualOrdinanceType.BAPTISM);\n+        new LdsIndividualOrdinanceValidator(validator, l).validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositiveEnumString() {\n+        LdsIndividualOrdinance l = new LdsIndividualOrdinance();\n+        l.setDate(\"5 MAY 1905\");\n+        l.setTemple(\"Temple 1\");\n+        l.setType(LdsIndividualOrdinanceType.BAPTISM);\n+        l.setStatus(new StringWithCustomFacts(LdsBaptismDateStatus.CHILD.getCode()));\n+        new LdsIndividualOrdinanceValidator(validator, l).validate();\n+        assertNoIssues();\n+    }\n+        validator = new Validator(gedcom);\n+        validator.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        f.setHusband(new IndividualReference(dad));\n+        f.setWife(new IndividualReference(mom));\n+        f.getChildren(true).add(new IndividualReference(jr));\n+        validator.validate();\n+        validator.validate();\n+    public void testCustomFacts() {\n+        s.getCustomFacts(true).clear();\n+        validator.validate();\n+        s.setDate((String) null);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.ILLEGAL_VALUE, \"date\");\n+        s.setDate(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.ILLEGAL_VALUE, \"date\");\n+        s.setDate(\"              \");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.ILLEGAL_VALUE, \"date\");\n+        s.setDate(\"Frying Pan\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.ILLEGAL_VALUE, \"date\");\n+        s.setDate(\"01 JAN 1901\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.ILLEGAL_VALUE, \"date\");\n+        s.setStatus(LdsSpouseSealingDateStatus.COMPLETED.getCode());\n+        validator.validate();\n+        s.getNoteStructures(true).clear();\n+        validator.validate();\n+        validator.validate();\n+        s.setPlace(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.MISSING_REQUIRED_VALUE, \"place\");\n+        s.setPlace(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.MISSING_REQUIRED_VALUE, \"place\");\n+        s.setPlace(\"              \");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.MISSING_REQUIRED_VALUE, \"place\");\n+        s.setPlace(\"Frying Pan\");\n+        validator.validate();\n+        s.setStatus(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertNoIssues();\n+        s.setStatus(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.ILLEGAL_VALUE, \"status\");\n+        s.setStatus(\"              \");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.ILLEGAL_VALUE, \"status\");\n+        s.setStatus(\"Frying Pan\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.ILLEGAL_VALUE, \"status\");\n+        s.setStatus(LdsSpouseSealingDateStatus.DNS_CAN.getCode());\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.MISSING_REQUIRED_VALUE, \"date\");\n+        s.setDate(\"1 JAN 1990\");\n+        validator.validate();\n+        s.setTemple(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.MISSING_REQUIRED_VALUE, \"temple\");\n+        s.setTemple(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.MISSING_REQUIRED_VALUE, \"temple\");\n+        s.setTemple(\"              \");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, s, ProblemCode.MISSING_REQUIRED_VALUE, \"temple\");\n+        s.setTemple(\"Frying Pan\");\n+        validator.validate();\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.WARNING, Family.class, ProblemCode.HUSBAND_IS_FEMALE.getCode(), \"husband\");\n+        assertFindingsContain(Severity.WARNING, Family.class, ProblemCode.WIFE_IS_MALE.getCode(), \"wife\");\n+    }\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.WARNING, FamilyEvent.class, ProblemCode.HUSBAND_WAS_LESS_THAN_SIXTEEN.getCode(), \"date\");\n+        assertFindingsContain(Severity.WARNING, FamilyEvent.class, ProblemCode.WIFE_WAS_LESS_THAN_SIXTEEN.getCode(), \"date\");\n+    }\n+        validator.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        s.setName(\"test\");\n+        gedcom.getSubmitters().put(s.getXref(), s);\n+        gedcom.setSubmission(new Submission(\"@SUBN0001@\"));\n+        Header h = gedcom.getHeader();\n+        h.setSubmitterReference(new SubmitterReference(s));\n+        h.setSubmissionReference(new SubmissionReference(gedcom.getSubmission()));\n+        gedcom.getMultimedia().put(mm.getXref(), mm);\n+        gedcom.getHeader().getGedcomVersion().setVersionNumber(SupportedVersion.V5_5_1);\n+        validator.validate();\n+        gedcom.getHeader().getGedcomVersion().setVersionNumber(SupportedVersion.V5_5);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, mm, ProblemCode.MISSING_REQUIRED_VALUE, \"blob\");\n+        mm.setEmbeddedMediaFormat(\"gif\");\n+        validator.validate();\n+        gedcom.getHeader().getGedcomVersion().setVersionNumber(SupportedVersion.V5_5_1);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, mm, ProblemCode.NOT_ALLOWED_IN_GEDCOM_551, \"blob\");\n+        assertFindingsContain(Severity.ERROR, mm, ProblemCode.NOT_ALLOWED_IN_GEDCOM_551, \"embeddedMediaFormat\");\n+        mm.setEmbeddedMediaFormat((String) null);\n+        validator.validate();\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.WARNING, Family.class, ProblemCode.MULTIPLE_CHILDREN_WITH_SAME_GIVEN_NAME.getCode(),\n+                \"children\");\n+        assertEquals(1, validator.getResults().getByCode(ProblemCode.MULTIPLE_CHILDREN_WITH_SAME_GIVEN_NAME).size());\n+    }\n+    private class TestValidator extends AbstractValidator {\n+        private static final long serialVersionUID = -1062408778793170154L;\n+        private final ThingFullOfEnums t = new ThingFullOfEnums();\n+        TestValidator(Validator validator) {\n+            super(validator);\n+        }\n+        @Override\n+        protected void validate() {\n+            mustBeInEnumIfSpecified(LdsBaptismDateStatus.class, t, \"baptismDateStatus\");\n+            mustBeInEnumIfSpecified(LdsBaptismDateStatus.class, t, \"baptismDateStatusString\");\n+        }\n+    }\n+    private class ThingFullOfEnums implements ModelElement {\n+        private static final long serialVersionUID = 9144030330693132907L;\n+        private LdsBaptismDateStatus baptismDateStatus;\n+        private String baptismDateStatusString;\n+        @SuppressWarnings(\"unused\")\n+        public LdsBaptismDateStatus getBaptismDateStatus() {\n+            return baptismDateStatus;\n+        }\n+        @SuppressWarnings(\"unused\")\n+        public String getBaptismDateStatusString() {\n+            return baptismDateStatusString;\n+        }\n+        public void setBaptismDateStatus(LdsBaptismDateStatus baptismDateStatus) {\n+            this.baptismDateStatus = baptismDateStatus;\n+        }\n+        public void setBaptismDateStatusString(String baptismDateStatusString) {\n+            this.baptismDateStatusString = baptismDateStatusString;\n+        }\n+    };\n+    @Test\n+    public void testGoodEnumBadString() {\n+        TestValidator v = new TestValidator(validator);\n+        v.t.setBaptismDateStatus(LdsBaptismDateStatus.CHILD);\n+        v.t.setBaptismDateStatusString(\"No such value in enum\");\n+        v.validate();\n+        assertFindingsContain(Severity.ERROR, v.t, ProblemCode.ILLEGAL_VALUE, \"baptismDateStatusString\");\n+    }\n+    @Test\n+    public void testGoodValues() {\n+        TestValidator v = new TestValidator(validator);\n+        v.t.baptismDateStatus = LdsBaptismDateStatus.CHILD;\n+        v.t.baptismDateStatusString = \"CHILD\";\n+        v.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testNulls() {\n+        TestValidator v = new TestValidator(validator);\n+        v.t.baptismDateStatus = null;\n+        v.t.baptismDateStatusString = null;\n+        v.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testNoteRecords() {\n+        Gedcom g = TestHelper.getMinimalGedcom();\n+        validator = new Validator(g);\n+        validator.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        NoteRecord n = new NoteRecord(\"@N0001@\");\n+        g.getNotes().put(n.getXref(), n);\n+        validator.validate();\n+        assertNoIssues();\n+        n.getCitations(true).clear();\n+        validator.validate();\n+        assertNoIssues();\n+        CitationWithSource cws = new CitationWithSource();\n+        n.getCitations(true).add(cws);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, cws, ProblemCode.MISSING_REQUIRED_VALUE, \"source\");\n+        cws.setSource(new Source());\n+        validator.validate();\n+        assertNoIssues();\n+        n.getUserReferences(true).clear();\n+        validator.validate();\n+        assertNoIssues();\n+        UserReference u = new UserReference();\n+        n.getUserReferences(true).add(u);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, u, ProblemCode.MISSING_REQUIRED_VALUE, \"referenceNum\");\n+        u.setReferenceNum(\"Foo\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testNoteStructures() {\n+        Gedcom g = TestHelper.getMinimalGedcom();\n+        validator = new Validator(g);\n+        validator.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        Individual i = new IndividualFactory().create(g, \"Bob\", \"Boberts\", Sex.MALE, (String) null, null, null, null);\n+        NoteStructure n = new NoteStructure();\n+        i.getNoteStructures(true).add(n);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, n, ProblemCode.MISSING_REQUIRED_VALUE, \"lines\");\n+        n.getLines(true).add(\"Frying Pan\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testSetLinesWithReferenceFails() {\n+        Gedcom g = TestHelper.getMinimalGedcom();\n+        validator = new Validator(g);\n+        validator.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        NoteStructure n = new NoteStructure();\n+        NoteRecord nr = new NoteRecord(\"@N1@\");\n+        g.getNotes().put(\"@N1@\", nr);\n+        n.setNoteReference(nr);\n+        validator.validate();\n+        assertNoIssues();\n+        n.getLines(true).add(\"Frying Pan\");\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testSetReferenceWithLinesFails() {\n+        Gedcom g = TestHelper.getMinimalGedcom();\n+        validator = new Validator(g);\n+        validator.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        Individual i = new IndividualFactory().create(g, \"Bob\", \"Boberts\", Sex.MALE, (String) null, null, null, null);\n+        NoteStructure n = new NoteStructure();\n+        i.getNoteStructures(true).add(n);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, n, ProblemCode.MISSING_REQUIRED_VALUE, \"lines\");\n+        n.getLines(true).add(\"Frying Pan\");\n+        validator.validate();\n+        assertNoIssues();\n+        n.setNoteReference(null);\n+        n.getLines(true).add(\"Foo\");\n+        n.setNoteReference(new NoteRecord(\"@N1@\")); // Boom\n+    }\n+    @Test\n+    public void testNullNotesList() {\n+        Options.setCollectionInitializationEnabled(true);\n+        new NoteStructureListValidator(validator, gedcom.getHeader()).validate();\n+        assertFindingsContain(Severity.INFO, gedcom.getHeader(), ProblemCode.UNINITIALIZED_COLLECTION.getCode(), \"noteStructures\");\n+        Options.setCollectionInitializationEnabled(false);\n+    }\n+    @Test\n+    public void testCountOnly() {\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", null, null, \"D\", \"D\", \"D\", \"D\",\n+                \"E\", null, \"F\", \"F\" }));\n+        NullHandler<String> classUnderTest = new NullHandler<>(list);\n+        assertEquals(3, classUnderTest.count());\n+        assertEquals(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", null, null, \"D\", \"D\", \"D\", \"D\", \"E\", null, \"F\", \"F\" }), list);\n+        assertEquals(\"When only counting, repeated calls should five the same result\", 3, classUnderTest.count());\n+    }\n+    @Test\n+    public void testCountOnlyNoNulls() {\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", \"D\", \"D\", \"D\", \"D\", \"E\", \"F\",\n+                \"F\" }));\n+        NullHandler<String> classUnderTest = new NullHandler<>(list);\n+        assertEquals(0, classUnderTest.count());\n+        assertEquals(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", \"D\", \"D\", \"D\", \"D\", \"E\", \"F\", \"F\" }), list);\n+        assertEquals(\"When only counting, repeated calls should five the same result\", 0, classUnderTest.count());\n+    }\n+    @Test\n+    public void testRemoving() {\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", null, null, \"D\", \"D\", \"D\", \"D\",\n+                \"E\", null, \"F\", \"F\" }));\n+        NullHandler<String> classUnderTest = new NullHandler<>(list);\n+        assertEquals(3, classUnderTest.remove());\n+        assertEquals(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", \"D\", \"D\", \"D\", \"D\", \"E\", \"F\", \"F\" }), list);\n+        assertEquals(\"After removing, repeated calls should return 0 nulls counted/removed\", 0, classUnderTest.remove());\n+    }\n+    @Test\n+    public void testRemovingNoNulls() {\n+        ArrayList<String> list = new ArrayList<>(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", \"D\", \"D\", \"D\", \"D\", \"E\", \"F\",\n+                \"F\" }));\n+        NullHandler<String> classUnderTest = new NullHandler<>(list);\n+        assertEquals(0, classUnderTest.remove());\n+        assertEquals(Arrays.asList(new String[] { \"A\", \"B\", \"B\", \"C\", \"D\", \"D\", \"D\", \"D\", \"E\", \"F\", \"F\" }), list);\n+        assertEquals(\"After removing, repeated calls should return 0 nulls counted/removed\", 0, classUnderTest.remove());\n+    }\n+        validator = new Validator(gedcom);\n+        validator.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        validator.validate();\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"basic\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"basic\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"basic\");\n+        validator.validate();\n+        pn.setGivenName(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"givenName\");\n+        pn.setGivenName(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"givenName\");\n+        pn.setGivenName(\"Fred\");\n+        validator.validate();\n+        pn.setNickname(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"nickname\");\n+        pn.setNickname(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"nickname\");\n+        pn.setNickname(\"Bubba\");\n+        validator.validate();\n+        validator.validate();\n+        pn.getNoteStructures(true);\n+        validator.validate();\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, ind, ProblemCode.LIST_WITH_NULL_VALUE, \"names\");\n+        pn.setPrefix(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"prefix\");\n+        pn.setPrefix(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"prefix\");\n+        pn.setPrefix(\"Mr.\");\n+        validator.validate();\n+        pn.setSuffix(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"suffix\");\n+        pn.setSuffix(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"suffix\");\n+        pn.setSuffix(\"Jr.\");\n+        validator.validate();\n+        pn.setSurname(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"surname\");\n+        pn.setSurname(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"surname\");\n+        pn.setSurname(\"Johnson\");\n+        validator.validate();\n+        pn.setSurnamePrefix(new StringWithCustomFacts((String) null));\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"surnamePrefix\");\n+        pn.setSurnamePrefix(\"\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, pn, ProblemCode.MISSING_REQUIRED_VALUE, \"surnamePrefix\");\n+        pn.setSurnamePrefix(\"van\");\n+        validator.validate();\n+        validator = new Validator(g);\n+        validator.validate();\n+        romanized.setGivenName(\"Bjorn\");\n+        romanized.setSurname(\"Jorgen\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, romanized, ProblemCode.MISSING_REQUIRED_VALUE, \"variation\");\n+        validator.validate();\n+        phonetic.setGivenName(\"Byorn\");\n+        phonetic.setSurname(\"Yorgen\");\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, phonetic, ProblemCode.MISSING_REQUIRED_VALUE, \"variation\");\n+        validator.validate();\n+    @Test\n+    public void test() {\n+        assertTrue(ProblemCode.values().length > 0);\n+        for (ProblemCode pc : ProblemCode.values()) {\n+            assertNotNull(pc.getDescription());\n+            assertEquals(pc.toString(), pc.getCode() + \": \" + pc.getDescription());\n+        }\n+    }\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.WARNING, Family.class, ProblemCode.MORE_THAN_THREE_CHILDREN_BORN_WITHIN_48_HOURS.getCode(),\n+                \"children\");\n+        assertEquals(1, validator.getResults().getByCode(ProblemCode.MORE_THAN_THREE_CHILDREN_BORN_WITHIN_48_HOURS).size());\n+    }\n+    @Test\n+    public void testBadChangeDate() {\n+        Repository r = new Repository();\n+        r.setXref(\"@R1@\");\n+        ChangeDate changeDate = new ChangeDate();\n+        changeDate.setDate(\"Not a valid date\");\n+        r.setChangeDate(changeDate);\n+        new RepositoryValidator(validator, r).validate();\n+        assertFindingsContain(Severity.ERROR, changeDate, ProblemCode.INVALID_DATE, \"date\");\n+    }\n+    @Test\n+    public void testPositive() {\n+        Repository r = new Repository();\n+        r.setXref(\"@R1@\");\n+        ChangeDate changeDate = new ChangeDate();\n+        changeDate.setDate(\"12 DEC 1912\");\n+        r.setChangeDate(changeDate);\n+        new RepositoryValidator(validator, r).validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testNegative() throws IOException, GedcomParserException {\n+        loadFile(\"sample/validatesOk.ged\");\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testPositive() throws IOException, GedcomParserException {\n+        loadFile(\"sample/problemFile.ged\");\n+        validator.validate();\n+        assertFindingsContain(Severity.WARNING, Family.class, ProblemCode.SIMULTANEOUS_BIRTHS_IN_MULTIPLE_LOCATIONS.getCode(),\n+                \"children\");\n+        List<Finding> findingsOfThisType = validator.getResults().getByCode(ProblemCode.SIMULTANEOUS_BIRTHS_IN_MULTIPLE_LOCATIONS);\n+        assertEquals(\"One family has this problem\", 1, findingsOfThisType.size());\n+        assertEquals(\"That family had two children in born on same day in multiple locations\", 2, findingsOfThisType.get(0)\n+                .getRelatedItems(true).size());\n+    }\n+        src.setRecIdNumber(\"\");\n+        AbstractValidator av = new SourceValidator(validator, src);\n+        assertFindingsContain(Severity.ERROR, src, ProblemCode.MISSING_REQUIRED_VALUE, \"recIdNumber\");\n+        assertFindingsContain(Severity.ERROR, src, ProblemCode.XREF_INVALID, \"xref\");\n+        e.setDatePeriod(\"anytime\");\n+        AbstractValidator av = new SourceValidator(validator, src);\n+        Source src = new Source((String) null);\n+        AbstractValidator av = new SourceValidator(validator, src);\n+        assertFindingsContain(Severity.ERROR, src, ProblemCode.MISSING_REQUIRED_VALUE, \"xref\");\n+    @Test(expected = NullPointerException.class)\n+        AbstractValidator av = new SourceValidator(validator, null);\n+    @Test(expected = NullPointerException.class)\n+        AbstractValidator sv = new SubmitterValidator(validator, null);\n+        submitter.setName(\"somebody\");\n+        AbstractValidator sv = new SubmitterValidator(validator, submitter);\n+        assertNoIssues();\n+        submitter.setName(\"\");\n+        AbstractValidator sv = new SubmitterValidator(validator, submitter);\n+        assertFindingsContain(Severity.ERROR, submitter, ProblemCode.MISSING_REQUIRED_VALUE, \"name\");\n+        submitter.setName(\"somebody\");\n+        AbstractValidator sv = new SubmitterValidator(validator, submitter);\n+        assertFindingsContain(Severity.ERROR, submitter, ProblemCode.MISSING_REQUIRED_VALUE, \"xref\");\n+        AbstractValidator sv = new SubmitterValidator(validator, submitter);\n+        assertFindingsContain(Severity.ERROR, submitter, ProblemCode.MISSING_REQUIRED_VALUE, \"name\");\n+        submitter.setName(\"somebody\");\n+        AbstractValidator sv = new SubmitterValidator(validator, submitter);\n+        assertFindingsContain(Severity.ERROR, submitter, ProblemCode.MISSING_REQUIRED_VALUE, \"xref\");\n+    @Test\n+    public void testGetSetFieldNameOfConcern() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Header(), Severity.ERROR, ProblemCode.ILLEGAL_VALUE, null);\n+        assertNull(vf.getFieldNameOfConcern());\n+        vf.setFieldNameOfConcern(\"Foo\");\n+        assertEquals(\"Foo\", vf.getFieldNameOfConcern());\n+    }\n+    @Test\n+    public void testGetSetItemOfConcern() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Header(), Severity.ERROR, ProblemCode.ILLEGAL_VALUE, null);\n+        assertNotNull(vf.getItemOfConcern());\n+        vf.setItemOfConcern(new Gedcom());\n+        assertEquals(Gedcom.class, vf.getItemOfConcern().getClass());\n+    }\n+    @Test\n+    public void testGetSetProblemCode() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Header(), Severity.ERROR, ProblemCode.ILLEGAL_VALUE, null);\n+        assertEquals(ProblemCode.ILLEGAL_VALUE.getCode(), vf.getProblemCode());\n+        vf.setProblemCode(1000);\n+        assertEquals(1000, vf.getProblemCode());\n+    }\n+    @Test\n+    public void testGetSetProblemDescription() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Header(), Severity.ERROR, ProblemCode.ILLEGAL_VALUE, null);\n+        vf.setProblemCode(1000); // Have to set at 1000 or higher to be able to set the description\n+        assertNotNull(vf.getProblemDescription());\n+        vf.setProblemDescription(\"Frying Pan\");\n+        assertEquals(\"Frying Pan\", vf.getProblemDescription());\n+    }\n+    @Test\n+    public void testGetSetRelatedItems() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Header(), Severity.ERROR, ProblemCode.ILLEGAL_VALUE, null);\n+        assertNull(vf.getRelatedItems());\n+        assertNull(vf.getRelatedItems(false));\n+        assertNotNull(vf.getRelatedItems(true));\n+        assertEquals(0, vf.getRelatedItems().size());\n+        vf.getRelatedItems().add(new Family());\n+        assertEquals(1, vf.getRelatedItems().size());\n+        vf.setRelatedItems(new ArrayList<ModelElement>());\n+        assertEquals(0, vf.getRelatedItems().size());\n+    }\n+    @Test\n+    public void testGetSetRepairs() {\n+        assertFalse(Options.isCollectionInitializationEnabled());\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Header(), Severity.ERROR, ProblemCode.ILLEGAL_VALUE, null);\n+        assertNull(vf.getRepairs());\n+        assertNull(vf.getRepairs(false));\n+        assertNotNull(vf.getRepairs(true));\n+        assertEquals(0, vf.getRepairs().size());\n+        vf.getRepairs().add(new AutoRepair(null, null));\n+        assertEquals(1, vf.getRepairs().size());\n+        vf.setRepairs(new ArrayList<AutoRepair>());\n+        assertEquals(0, vf.getRepairs().size());\n+    }\n+    @Test\n+    public void testGetSetSeverity() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Header(), Severity.ERROR, ProblemCode.ILLEGAL_VALUE, null);\n+        assertNotNull(vf.getSeverity());\n+        vf.setSeverity(Severity.INFO);\n+        assertEquals(Severity.INFO, vf.getSeverity());\n+    }\n+    @Test\n+    public void testMultiArgConstructor() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Gedcom(), Severity.INFO, ProblemCode.DUPLICATE_VALUE, null);\n+        assertNotNull(vf);\n+        assertEquals(Gedcom.class, vf.getItemOfConcern().getClass());\n+        assertEquals(Severity.INFO, vf.getSeverity());\n+        assertEquals(ProblemCode.DUPLICATE_VALUE.getCode(), vf.getProblemCode());\n+        assertEquals(ProblemCode.DUPLICATE_VALUE.getDescription(), vf.getProblemDescription());\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testMultiArgConstructorNegativeNullItemOfConcern() {\n+        Validator v = new Validator(new Gedcom());\n+        v.newFinding(null, Severity.INFO, ProblemCode.DUPLICATE_VALUE, null); // Item of concern is null\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testMultiArgConstructorNegativeNullProblemCode() {\n+        Validator v = new Validator(new Gedcom());\n+        v.newFinding(new Gedcom(), Severity.INFO, null, null); // Problem code is null\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testMultiArgConstructorNegativeNullSeverity() {\n+        Validator v = new Validator(new Gedcom());\n+        v.newFinding(new Gedcom(), null, ProblemCode.DUPLICATE_VALUE, null); // Severity is null\n+    }\n+    @Test\n+    public void testSetProblem() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Gedcom(), Severity.INFO, ProblemCode.DUPLICATE_VALUE, null);\n+        vf.setProblem(ProblemCode.ILLEGAL_VALUE);\n+        assertEquals(ProblemCode.ILLEGAL_VALUE.getCode(), vf.getProblemCode());\n+        assertEquals(ProblemCode.ILLEGAL_VALUE.getDescription(), vf.getProblemDescription());\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testSetProblemDescriptionCodeBelow1000() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Gedcom(), Severity.INFO, ProblemCode.DUPLICATE_VALUE, null);\n+        assertNotNull(vf.getProblemDescription());\n+        vf.setProblemDescription(\"Frying Pan\"); // Boom, because code is less than 1000\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testSetSeverityNull() {\n+        Validator v = new Validator(new Gedcom());\n+        Finding vf = v.newFinding(new Gedcom(), Severity.INFO, ProblemCode.DUPLICATE_VALUE, null);\n+        vf.setSeverity(null); // Boom\n+    }\n+    private Gedcom g;\n+    @Before\n+    public void setUp() throws IOException, GedcomParserException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.load(\"sample/Harry_Potter.ged\");\n+        g = gp.getGedcom();\n+    }\n+    @Test\n+    public void testAddAndGetAll() {\n+        Validator v = new Validator(g);\n+        ValidationResults vr = v.getResults();\n+        assertEquals(0, vr.getAllFindings().size());\n+        v.newFinding(g.getIndividuals().get(\"@I1@\"), Severity.INFO, ProblemCode.DUPLICATE_VALUE, null);\n+        assertEquals(1, vr.getAllFindings().size());\n+        vr.clear();\n+        assertEquals(0, vr.getAllFindings().size());\n+    }\n+    @Test\n+    public void testGetByProblemCodeEnum() {\n+        Validator v = new Validator(g);\n+        ValidationResults vr = v.getResults();\n+        assertEquals(0, vr.getAllFindings().size());\n+        v.newFinding(g.getIndividuals().get(\"@I1@\"), Severity.INFO, ProblemCode.DUPLICATE_VALUE, null);\n+        v.newFinding(g.getIndividuals().get(\"@I2@\"), Severity.WARNING, ProblemCode.ILLEGAL_VALUE, null);\n+        v.newFinding(g.getIndividuals().get(\"@I3@\"), Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, null);\n+        assertEquals(3, vr.getAllFindings().size());\n+        assertEquals(1, vr.getByCode(ProblemCode.DUPLICATE_VALUE).size());\n+        assertEquals(1, vr.getByCode(ProblemCode.ILLEGAL_VALUE).size());\n+        assertEquals(1, vr.getByCode(ProblemCode.MISSING_REQUIRED_VALUE).size());\n+        assertEquals(0, vr.getByCode(ProblemCode.CROSS_REFERENCE_NOT_FOUND).size());\n+    }\n+    @Test\n+    public void testGetByProblemCodeInt() {\n+        Validator v = new Validator(g);\n+        ValidationResults vr = v.getResults();\n+        assertEquals(0, vr.getAllFindings().size());\n+        v.newFinding(g.getIndividuals().get(\"@I1@\"), Severity.INFO, ProblemCode.DUPLICATE_VALUE, null);\n+        v.newFinding(g.getIndividuals().get(\"@I2@\"), Severity.WARNING, ProblemCode.ILLEGAL_VALUE, null);\n+        v.newFinding(g.getIndividuals().get(\"@I3@\"), Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, null);\n+        assertEquals(3, vr.getAllFindings().size());\n+        assertEquals(1, vr.getByCode(ProblemCode.DUPLICATE_VALUE.getCode()).size());\n+        assertEquals(1, vr.getByCode(ProblemCode.ILLEGAL_VALUE.getCode()).size());\n+        assertEquals(1, vr.getByCode(ProblemCode.MISSING_REQUIRED_VALUE.getCode()).size());\n+        assertEquals(0, vr.getByCode(ProblemCode.CROSS_REFERENCE_NOT_FOUND.getCode()).size());\n+    }\n+    @Test\n+    public void testGetBySeverity() {\n+        Validator v = new Validator(g);\n+        ValidationResults vr = v.getResults();\n+        assertEquals(0, vr.getAllFindings().size());\n+        v.newFinding(g.getIndividuals().get(\"@I1@\"), Severity.INFO, ProblemCode.DUPLICATE_VALUE, null);\n+        v.newFinding(g.getIndividuals().get(\"@I2@\"), Severity.WARNING, ProblemCode.ILLEGAL_VALUE, null);\n+        v.newFinding(g.getIndividuals().get(\"@I3@\"), Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, null);\n+        assertEquals(3, vr.getAllFindings().size());\n+        assertEquals(1, vr.getBySeverity(Severity.INFO).size());\n+        assertEquals(1, vr.getBySeverity(Severity.WARNING).size());\n+        assertEquals(1, vr.getBySeverity(Severity.ERROR).size());\n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetBySeverityNegative() {\n+        ValidationResults vr = new ValidationResults();\n+        vr.getBySeverity(null); // Boom\n+    }\n+    @Test\n+    public void testGetFindingsForObject() {\n+        Validator v = new Validator(g);\n+        ValidationResults vr = v.getResults();\n+        assertEquals(0, vr.getAllFindings().size());\n+        v.newFinding(g.getIndividuals().get(\"@I1@\"), Severity.INFO, ProblemCode.DUPLICATE_VALUE, null);\n+        v.newFinding(g.getIndividuals().get(\"@I2@\"), Severity.WARNING, ProblemCode.ILLEGAL_VALUE, null);\n+        v.newFinding(g.getIndividuals().get(\"@I3@\"), Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, null);\n+        assertEquals(3, vr.getAllFindings().size());\n+        assertEquals(1, vr.getFindingsForObject(g.getIndividuals().get(\"@I1@\")).size());\n+        assertEquals(1, vr.getFindingsForObject(g.getIndividuals().get(\"@I2@\")).size());\n+        assertEquals(1, vr.getFindingsForObject(g.getIndividuals().get(\"@I3@\")).size());\n+        assertEquals(0, vr.getFindingsForObject(g.getIndividuals().get(\"@I4@\")).size());\n+        assertEquals(0, vr.getFindingsForObject(g.getFamilies().get(\"@F1@\")).size());\n+    }\n+    @Test\n+    public void testAddRepair() {\n+        Finding f = new Validator.Finding();\n+        assertNotNull(f);\n+        assertNotNull(f.getRepairs(true));\n+        f.addRepair(new AutoRepair(new Header(), new Header()));\n+        assertEquals(1, f.getRepairs().size());\n+    }\n+    @Test\n+    public void testFinding() {\n+        Finding f = new Validator.Finding();\n+        assertNotNull(f);\n+    }\n+    @Test\n+    public void testGetRepairs() {\n+        Finding f = new Validator.Finding();\n+        assertNotNull(f);\n+        assertNull(f.getRepairs());\n+    }\n+    @Test\n+    public void testGetRepairsBoolean() {\n+        Finding f = new Validator.Finding();\n+        assertNotNull(f);\n+        assertNotNull(f.getRepairs(true));\n+    }\n+    @Test\n+    public void testGetSetFieldNameOfConcern() {\n+        Finding f = new Validator.Finding();\n+        assertNull(f.getFieldNameOfConcern());\n+        f.setFieldNameOfConcern(\"Foo\");\n+        assertEquals(\"Foo\", f.getFieldNameOfConcern());\n+    }\n+    @Test\n+    public void testGetSetItemOfConcern() {\n+        Finding f = new Validator.Finding();\n+        assertNull(f.getItemOfConcern());\n+        f.setItemOfConcern(new Header());\n+        assertEquals(new Header(), f.getItemOfConcern());\n+    }\n+    @Test\n+    public void testGetSetProblemCode() {\n+        Finding f = new Validator.Finding();\n+        assertEquals(0, f.getProblemCode());\n+        f.setProblemCode(1000);\n+        assertEquals(1000, f.getProblemCode());\n+    }\n+    @Test\n+    public void testGetSetProblemDescription() {\n+        Finding f = new Validator.Finding();\n+        assertEquals(0, f.getProblemCode());\n+        f.setProblemCode(1000);\n+        assertEquals(1000, f.getProblemCode());\n+        assertNull(f.getProblemDescription());\n+        f.setProblemDescription(\"FRYING PAN\");\n+        assertEquals(\"FRYING PAN\", f.getProblemDescription());\n+    }\n+    @Test\n+    public void testGetSetRelatedItems() {\n+        Finding f = new Validator.Finding();\n+        assertNull(f.getRelatedItems());\n+        assertNotNull(f.getRelatedItems(true));\n+        f.setRelatedItems(null);\n+        assertNull(f.getRelatedItems());\n+        f.setRelatedItems(new ArrayList<ModelElement>());\n+        assertNotNull(f.getRelatedItems(true));\n+    }\n+    @Test\n+    public void testGetSetSeverity() {\n+        Finding f = new Validator.Finding();\n+        assertNull(f.getSeverity());\n+        f.setSeverity(Severity.INFO);\n+        assertEquals(Severity.INFO, f.getSeverity());\n+    }\n+    @Test\n+    public void testSetProblem() {\n+        Finding f = new Validator.Finding();\n+        assertEquals(0, f.getProblemCode());\n+        f.setProblem(ProblemCode.CROSS_REFERENCE_NOT_FOUND);\n+        assertEquals(ProblemCode.CROSS_REFERENCE_NOT_FOUND.getCode(), f.getProblemCode());\n+        assertEquals(ProblemCode.CROSS_REFERENCE_NOT_FOUND.getDescription(), f.getProblemDescription());\n+    }\n+    @Test\n+    public void testSetRepairs() {\n+        Finding f = new Validator.Finding();\n+        assertNull(f.getRepairs());\n+        f.setRepairs(new ArrayList<AutoRepair>());\n+        assertNotNull(f.getRepairs());\n+    }\n+    @Test\n+    public void testToString() {\n+        Finding f = new Validator.Finding();\n+        f.setProblem(ProblemCode.CROSS_REFERENCE_NOT_FOUND);\n+        assertEquals(\"Finding [problemCode=0, problemDescription=Cross-referenced item could not be found in the GEDCOM, ]\", f\n+                .toString());\n+    }\n+    private static final String SAMPLE_STRESS_TEST_FILENAME = \"sample/TGC551.ged\";\n+    @Test\n+    public void testEmptyGedcom() {\n+        gedcom = new Gedcom();\n+        validator = new Validator(gedcom);\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    public void testTrailer() {\n+        Submitter s = new Submitter();\n+        s.setXref(\"@SUBM0001@\");\n+        s.setName(\"test\");\n+        gedcom.getSubmitters().put(s.getXref(), s);\n+        gedcom.setSubmission(new Submission(\"@SUBN0001@\"));\n+        gedcom.getHeader().setSubmitterReference(new SubmitterReference(s));\n+        gedcom.setTrailer(null);\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, gedcom, ProblemCode.MISSING_REQUIRED_VALUE.getCode(), \"trailer\");\n+        gedcom.setTrailer(new Trailer());\n+        validator.validate();\n+        assertNoIssues();\n+    }\n+    @Test\n+    @SuppressWarnings(\"PMD.SystemPrintln\")\n+    public void testValidateStressTestFile() throws IOException, GedcomParserException {\n+        GedcomParser p = new GedcomParser();\n+        p.load(SAMPLE_STRESS_TEST_FILENAME);\n+        validator = new Validator(p.getGedcom());\n+        validator.validate();\n+        assertFindingsContain(Severity.ERROR, org.gedcom4j.model.FamilyEvent.class, ProblemCode.ILLEGAL_VALUE.getCode(), \"yNull\");\n+        assertFindingsContain(Severity.ERROR, org.gedcom4j.model.IndividualEvent.class, ProblemCode.ILLEGAL_VALUE.getCode(),\n+                \"yNull\");\n+        assertFindingsContain(Severity.ERROR, org.gedcom4j.model.Multimedia.class, ProblemCode.CROSS_REFERENCE_NOT_FOUND.getCode(),\n+                \"xref\");\n+        assertFindingsContain(Severity.ERROR, org.gedcom4j.model.Multimedia.class, ProblemCode.MISSING_REQUIRED_VALUE.getCode(),\n+                \"blob\");\n+        assertFindingsContain(Severity.ERROR, org.gedcom4j.model.Multimedia.class, ProblemCode.MISSING_REQUIRED_VALUE.getCode(),\n+                \"embeddedMediaFormat\");\n+        assertFindingsContain(Severity.ERROR, org.gedcom4j.model.Multimedia.class, ProblemCode.MISSING_REQUIRED_VALUE.getCode(),\n+                \"xref\");\n+    }\n+    private static final long serialVersionUID = 8324174994665255952L;\n+    @Override\n+    public boolean mayRepair(Finding repairableValidationFinding) {\n+        return false;\n+    }\n+    @SuppressWarnings(\"unused\")\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testConstructorNullGedcom() {\n+        new Validator(null); // boom\n+    }\n+    @Test\n+    public void testGetAutoRepairResponder() {\n+        Validator v = new Validator(new Gedcom());\n+        assertNotNull(v);\n+        assertSame(Validator.AUTO_REPAIR_NONE, v.getAutoRepairResponder());\n+    }\n+    @Test\n+    public void testGetGedcom() {\n+        Gedcom g = new Gedcom();\n+        Validator v = new Validator(g);\n+        assertNotNull(v);\n+        assertSame(g, v.getGedcom());\n+    }\n+    @Test\n+    public void testGetResults() {\n+        Gedcom g = new Gedcom();\n+        Validator v = new Validator(g);\n+        assertNotNull(v.getResults().getAllFindings());\n+        assertEquals(0, v.getResults().getAllFindings().size());\n+        v.newFinding(g, Severity.ERROR, ProblemCode.MISSING_REQUIRED_VALUE, null);\n+        assertEquals(1, v.getResults().getAllFindings().size());\n+    }\n+    @Test\n+    public void testSetAutoRepairResponder() {\n+        Gedcom g = new Gedcom();\n+        Validator v = new Validator(g);\n+        assertSame(Validator.AUTO_REPAIR_NONE, v.getAutoRepairResponder());\n+        v.setAutoRepairResponder(this);\n+        assertSame(this, v.getAutoRepairResponder());\n+    }\n+    @Test\n+    @SuppressWarnings(\"PMD.SystemPrintln\")\n+    public void test() throws IOException, GedcomParserException, GedcomWriterException {\n+        GedcomParser gp = new GedcomParser();\n+        gp.setStrictCustomTags(false);\n+        gp.load(\"sample/ftmcustomtags.ged\");\n+        Gedcom g = gp.getGedcom();\n+        assertNotNull(g);\n+        assertTrue(gp.getErrors().isEmpty());\n+        assertTrue(gp.getWarnings().isEmpty());\n+        Validator v = new Validator(g);\n+        v.validate();\n+        for (Finding f : v.getResults().getAllFindings()) {\n+            System.out.println(f);\n+            System.out.println(f.getStackTrace());\n+        }\n+        assertTrue(v.getResults().getAllFindings().isEmpty());\n+        GedcomWriter gw = new GedcomWriter(g);\n+        gw.write(\"tmp/ftmcustomtags.ged\");\n+        List<String> original = new ArrayList<>();\n+        try (FileReader fr = new FileReader(\"sample/ftmcustomtags.ged\"); BufferedReader br = new BufferedReader(fr)) {\n+            String s = br.readLine();\n+            while (s != null) {\n+                original.add(s);\n+                s = br.readLine();\n+            }\n+        }\n+        List<String> copy = new ArrayList<>();\n+        try (FileReader fr = new FileReader(\"tmp/ftmcustomtags.ged\"); BufferedReader br = new BufferedReader(fr)) {\n+            String s = br.readLine();\n+            while (s != null) {\n+                copy.add(s);\n+                s = br.readLine();\n+            }\n+        }\n+        for (String s : original) {\n+            assertTrue(\"Could not find original line in copy: \" + s, copy.contains(s));\n+        }\n+        for (String s : copy) {\n+            assertTrue(\"Could not find copy line in original: \" + s, original.contains(s));\n+        }\n+        assertEquals(original.size(), copy.size());\n+    }\n+        assertNull(eBefore.getYNull());\n+        gw.setValidationSuppressed(true);\n+        assertNull(eAfter.getYNull());\n+        assertNull(eBefore.getYNull());\n+            List<Finding> allFindings = gw.getValidator().getResults().getAllFindings();\n+            assertEquals(3, allFindings.size());\n+            Finding f0 = allFindings.get(0);\n+            assertEquals(\"description\", f0.getFieldNameOfConcern());\n+            IndividualEvent ie = (IndividualEvent) f0.getItemOfConcern();\n+            assertEquals(IndividualEventType.BIRTH, ie.getType());\n+            assertNotNull(ie.getDescription());\n+            Finding f1 = allFindings.get(1);\n+            assertEquals(\"yNull\", f1.getFieldNameOfConcern());\n+            ie = (IndividualEvent) f1.getItemOfConcern();\n+            assertEquals(IndividualEventType.CREMATION, ie.getType());\n+            assertNotNull(ie.getYNull());\n+            Finding f2 = allFindings.get(2);\n+            assertEquals(\"description\", f2.getFieldNameOfConcern());\n+            ie = (IndividualEvent) f2.getItemOfConcern();\n+            assertEquals(IndividualEventType.BURIAL, ie.getType());\n+            assertNotNull(ie.getDescription());\n+        gw.setValidationSuppressed(false);\n+        c.getEmails(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        c.getEmails(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        gw.setValidationSuppressed(false);\n+        r.getEmails(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        r.getEmails(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        s.setName(\"test\");\n+        gw.setValidationSuppressed(false);\n+        s.getEmails(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        s.setName(\"test\");\n+        gw.setValidationSuppressed(false);\n+        s.getEmails(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        s.setName(\"test\");\n+        gw.setValidationSuppressed(false);\n+        gw.setValidationSuppressed(false);\n+        c.getFaxNumbers(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        c.getFaxNumbers(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        gw.setValidationSuppressed(false);\n+        r.getFaxNumbers(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        r.getFaxNumbers(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        s.setName(\"test\");\n+        gw.setValidationSuppressed(false);\n+        s.getFaxNumbers(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        s.setName(\"test\");\n+        gw.setValidationSuppressed(false);\n+        s.getFaxNumbers(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        s.setName(\"test\");\n+        gw.setValidationSuppressed(false);\n+        gw.setValidationSuppressed(false);\n+        gw.setAutoRepairResponder(Validator.AUTO_REPAIR_NONE);\n+        m.setEmbeddedMediaFormat(\"bmp\");\n+            if (!gw.getValidator().getResults().getAllFindings().isEmpty()) {\n+                System.out.println(this.getClass().getName() + \" found \" + gw.getValidator().getResults().getAllFindings().size()\n+                for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+                if (f.getSeverity() == Severity.ERROR && f.getFieldNameOfConcern().contains(\"blob\")) {\n+        m.setEmbeddedMediaFormat((String) null);\n+        gw.setValidationSuppressed(false);\n+        e.getPlace().setLatitude(\"+50\\u00B0 3' 1.49\\\"\");\n+        e.getPlace().setLongitude(\"+19\\u00B0 56' 21.48\\\"\");\n+        gw.setValidationSuppressed(false);\n+        gw.setValidationSuppressed(false);\n+        gw.setValidationSuppressed(false);\n+        fr.setReferenceToFile(\"C:/foo.gif\");\n+        fr.setTitle(\"Foo\");\n+        fr.setFormat(\"gif\");\n+        fr.setMediaType(\"disk\");\n+        fr.setReferenceToFile(\"C:/bar.png\");\n+        fr.setFormat(\"png\");\n+        fr.setTitle(\"Bar\");\n+        assertTrue(m2.getNoteStructures(true).isEmpty());\n+        gw.setValidationSuppressed(true);\n+        pnv.setVariationType(\"Typed it like it sounds, duh\");\n+        pnv.setVariationType(\"Removed the slashes from the O's\");\n+        gw.setValidationSuppressed(false);\n+        g.getHeader().getCharacterSet().setCharacterSetName(\"UTF-8\");\n+        gw.setValidationSuppressed(false);\n+        g.getHeader().getCharacterSet().setCharacterSetName(\"UTF-8\");\n+        gw.setValidationSuppressed(false);\n+        gw.setValidationSuppressed(false);\n+        c.getWwwUrls(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        c.getWwwUrls(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        gw.setValidationSuppressed(false);\n+        r.getWwwUrls(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        r.getWwwUrls(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        gw.setValidationSuppressed(false);\n+        s.setName(\"test\");\n+        gw.setValidationSuppressed(false);\n+        s.getWwwUrls(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        s.setName(\"test\");\n+        gw.setValidationSuppressed(false);\n+        s.getWwwUrls(true).add(new StringWithCustomFacts(\"Not allowed under 5.5\"));\n+        s.setName(\"test\");\n+        gw.setValidationSuppressed(false);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // Cleanup whatever can be cleaned up\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // Cleanup whatever can be cleaned up\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+    private static final int TEST_CANCELLATION_COUNT = 5;\n+    public void testConstructionCancellation() throws IOException, GedcomParserException, GedcomWriterException {\n+        gw.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        constructionCancelAfter = TEST_CANCELLATION_COUNT;\n+        gw.setValidationSuppressed(true);\n+        gw.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gw.setValidationSuppressed(true);\n+        fileCancelAfter = TEST_CANCELLATION_COUNT;\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gw.setValidationSuppressed(true);\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(19996, linesConstructed);\n+        assertEquals(606594, bytesWritten);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(19996, linesConstructed);\n+        assertEquals(586598, bytesWritten);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gw.setValidationSuppressed(true);\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(19996, linesConstructed);\n+        assertEquals(606594, bytesWritten);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(19996, linesConstructed);\n+        assertEquals(586598, bytesWritten);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(19996, linesConstructed);\n+        assertEquals(1213216, bytesWritten);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(19996, linesConstructed);\n+        assertEquals(1173224, bytesWritten);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(19996, linesConstructed);\n+        assertEquals(1213222, bytesWritten);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(19996, linesConstructed);\n+        assertEquals(1173230, bytesWritten);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+            if (gw.getValidator() != null && gw.getValidator().getResults() != null) {\n+                for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+                    System.out.println(f);\n+                }\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(20945, linesConstructed);\n+        assertEquals(581632, bytesWritten);\n+        Gedcom g = gp.getGedcom();\n+        Validator gv = new Validator(g);\n+        gv.setAutoRepairResponder(Validator.AUTO_REPAIR_ALL);\n+        gv.validate(); // cleanup whatever it can\n+        gw = new GedcomWriter(g);\n+        gw.setValidationSuppressed(true);\n+            for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+                if (f.getRepairs(true).isEmpty()) {\n+                    System.out.println(f);\n+                }\n+        assertTrue(constructNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertTrue(fileNotificationCount > TEST_CANCELLATION_COUNT);\n+        assertEquals(20945, linesConstructed);\n+        assertEquals(557056, bytesWritten);\n+        characterSet.setCharacterSetName(new StringWithCustomFacts(encoding.getCharacterSetName()));\n+                    e.setDescription((String) null);\n+                    e.setDescription((String) null);\n+        gw.setValidationSuppressed(true);\n+            NoteRecord n1 = gedcomOrig.getNotes().get(xref);\n+            NoteRecord n2 = gedcomReadback.getNotes().get(xref);\n+        gw.setValidationSuppressed(true);\n+                \"1 SUBM @SUBMITTER@\", \"1 FILE gedcom4j.emptywritertest.ged\", \"1 GEDC\", \"2 VERS 5.5.1\", \"2 FORM LINEAGE-LINKED\",\n+                \"1 CHAR ANSEL\", \"0 @SUBMISSION@ SUBN\", \"0 TRLR\");\n+        if (indexOf < 0) {\n+        if (!matches) {\n+        p.setLatitude(\"123\");\n+        p.setLongitude(\"3.14159\");\n+        s.setName(\"Matt /Harrah/\");\n+        g.getHeader().setSubmitterReference(new SubmitterReference(s));\n+        gw.setValidationSuppressed(false);\n+        g.getHeader().setSubmissionReference(new SubmissionReference(g.getSubmission()));\n+        s.setName(\"Joe Tester\");\n+        g.getHeader().setSubmitterReference(new SubmitterReference(s));\n+        CustomFact cf = new CustomFact(\"_CUSTSB\");\n+        cf.setXref(\"@CT001@\");\n+        cf.setDescription(\"Custom Submitter Tag\");\n+        s.getCustomFacts(true).add(cf);\n+        CustomFact cf2 = new CustomFact(\"_CUSTNM\");\n+        cf2.setDescription(\"Custom Name Tag\");\n+        s.getName().getCustomFacts(true).add(cf2);\n+        CustomFact cf3 = new CustomFact(\"_CUSTHD\");\n+        cf3.setXref(\"@CT003@\");\n+        cf3.setDescription(\"Custom Header Tag\");\n+        g.getHeader().getCustomFacts(true).add(cf3);\n+        CustomFact cf4 = new CustomFact(\"_CUSTHD2\");\n+        cf4.setXref(\"@CT004@\");\n+        cf4.setDescription(\"Custom Inner Tag inside Custom Header Tag\");\n+        cf3.getCustomFacts(true).add(cf4);\n+            if (!gw.getValidator().getResults().getAllFindings().isEmpty()) {\n+                System.out.println(this.getClass().getName() + \" found \" + gw.getValidator().getResults().getAllFindings().size()\n+                for (Finding f : gw.getValidator().getResults().getAllFindings()) {\n+    @SuppressWarnings({ \"PMD.AvoidPrintStackTrace\", \"PMD.SystemPrintln\" })\n+                assertEquals(\"4 JUL 1776\", ev.getDate().getValue());\n+                assertEquals(1, ev.getCustomFacts().size());\n+                CustomFact cf = ev.getCustomFacts().get(0);\n+                assertEquals(\"_METHOD\", cf.getTag());\n+                assertEquals(\"Hatched from egg\", cf.getDescription().getValue());\n+                assertTrue(ev.getCustomFacts() == null || ev.getCustomFacts().isEmpty());\n+        try {\n+            gw.write(baos);\n+        } catch (GedcomWriterException e) {\n+            e.printStackTrace();\n+            System.out.println(gw.getValidator().getResults());\n+        }\n+        g.getHeader().setSubmissionReference(new SubmissionReference(g.getSubmission()));\n+        s.setName(\"Line break in middle of a wo\\nrd\");\n+        g.getHeader().setSubmitterReference(new SubmitterReference(s));\n",
        "diff_per_file": {
            "src/main/java/org/gedcom4j/comparators/IndividualByLastNameFirstNameComparator.java": "        String s1 = \"-unknown-\";\n",
            "src/main/java/org/gedcom4j/io/encoding/AnselMapping.java": "        return (c >= 0x0300 && c <= 0x0333) || (c >= 0xFE20 && c <= 0xFE23);\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": "            }\n                    lineBuffer.setLength(0);\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": "            }\n                    lineBuffer.setLength(0);\n",
            "src/main/java/org/gedcom4j/model/AbstractCitation.java": "import java.util.ArrayList;\nimport java.util.List;\nimport org.gedcom4j.Options;\n    protected List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        AbstractCitation other = (AbstractCitation) obj;\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n        return true;\n    }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = super.hashCode();\n        result = prime * result + ((notes == null) ? 0 : notes.hashCode());\n        return result;\n    }\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"AbstractCitation [\");\n        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n",
            "src/main/java/org/gedcom4j/model/AbstractElement.java": "import java.util.ArrayList;\npublic abstract class AbstractElement implements Serializable {\n    protected List<StringTree> customTags = getCustomTags(Options.isCollectionInitializationEnabled());\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        AbstractElement other = (AbstractElement) obj;\n        if (getCustomTags() == null) {\n            if (other.getCustomTags() != null) {\n                return false;\n            }\n        } else if (!getCustomTags().equals(other.getCustomTags())) {\n            return false;\n        }\n        return true;\n    }\n            customTags = new ArrayList<StringTree>(0);\n        }\n    }\n    @Override\n    public String toString() {\n            builder.append(\"customTags=\");\n        return builder.toString();\n}\n",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": "    protected StringWithCustomTags religiousAffiliation;\n    protected StringWithCustomTags respAgency;\n    protected StringWithCustomTags restrictionNotice;\n    protected StringWithCustomTags subType;\n    protected List<StringWithCustomTags> wwwUrls = getWwwUrls(Options.isCollectionInitializationEnabled());\n    protected String yNull;\n    @SuppressWarnings({ \"PMD.ExcessiveMethodLength\", \"PMD.NcssMethodCount\" })\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof AbstractEvent)) {\n            return false;\n        }\n        AbstractEvent other = (AbstractEvent) obj;\n        if (address == null) {\n            if (other.address != null) {\n                return false;\n            }\n        } else if (!address.equals(other.address)) {\n            return false;\n        }\n        if (age == null) {\n            if (other.age != null) {\n                return false;\n            }\n        } else if (!age.equals(other.age)) {\n            return false;\n        }\n        if (cause == null) {\n        }\n    }\n    }\n    public List<Multimedia> getMultimedia(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n        }\n    public StringWithCustomTags getReligiousAffiliation() {\n        return religiousAffiliation;\n    }\n    public StringWithCustomTags getRestrictionNotice() {\n        return restrictionNotice;\n    }\n    public List<StringWithCustomTags> getWwwUrls() {\n        return wwwUrls;\n    }\n    public String getyNull() {\n        return yNull;\n    }\n    @Override\n        result = prime * result + (wwwUrls == null ? 0 : wwwUrls.hashCode());\n        result = prime * result + (emails == null ? 0 : emails.hashCode());\n        return result;\n    }\n    public void setAge(StringWithCustomTags age) {\n        this.age = age;\n    }\n    public void setDate(StringWithCustomTags date) {\n        this.date = date;\n    }\n    public void setPlace(Place place) {\n        this.place = place;\n    }\n    public void setRespAgency(StringWithCustomTags respAgency) {\n        }\n        if (citations != null) {\n            builder.append(\"citations=\");\n        if (phoneNumbers != null) {\n            builder.append(\"phoneNumbers=\");\n            builder.append(phoneNumbers);\n",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": "    protected StringWithCustomTags date;\n    protected List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    protected StringWithCustomTags place;\n    protected StringWithCustomTags status;\n    protected StringWithCustomTags temple;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof AbstractLdsOrdinance)) {\n            return false;\n        }\n        AbstractLdsOrdinance other = (AbstractLdsOrdinance) obj;\n        if (getCitations() == null) {\n            if (other.getCitations() != null) {\n                return false;\n            }\n        } else if (!getCitations().equals(other.getCitations())) {\n            return false;\n        }\n        if (date == null) {\n            if (other.date != null) {\n                return false;\n            }\n        } else if (!date.equals(other.date)) {\n            return false;\n        }\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n        int result = super.hashCode();\n    public void setPlace(StringWithCustomTags place) {\n        this.place = place;\n    }\n    public void setTemple(StringWithCustomTags temple) {\n        this.temple = temple;\n    }\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n            builder.append(\", \");\n        }\n        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n            builder.append(\", \");\n        }\n        if (place != null) {\n            builder.append(\"place=\");\n            builder.append(place);\n            builder.append(\", \");\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java": "    protected StringWithCustomTags variationType;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        AbstractNameVariation other = (AbstractNameVariation) obj;\n        if (variation == null) {\n            if (other.variation != null) {\n                return false;\n            }\n        } else if (!variation.equals(other.variation)) {\n            return false;\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Address.java": "    private StringWithCustomTags addr1;\n    private StringWithCustomTags addr2;\n    private StringWithCustomTags city;\n    private StringWithCustomTags country;\n    private List<String> lines = getLines(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags stateProvince;\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Address other = (Address) obj;\n        if (addr1 == null) {\n            if (other.addr1 != null) {\n                return false;\n            }\n        } else if (!addr1.equals(other.addr1)) {\n            return false;\n        }\n        if (addr2 == null) {\n            if (other.addr2 != null) {\n                return false;\n            }\n        } else if (!addr2.equals(other.addr2)) {\n            return false;\n        }\n        if (city == null) {\n            if (other.city != null) {\n                return false;\n            }\n        } else if (!city.equals(other.city)) {\n            return false;\n        }\n        if (country == null) {\n            if (other.country != null) {\n                return false;\n            }\n        } else if (!country.equals(other.country)) {\n            return false;\n        }\n        return addr1;\n    }\n        }\n    public StringWithCustomTags getPostalCode() {\n    public StringWithCustomTags getStateProvince() {\n        return stateProvince;\n    }\n        result = prime * result + (addr2 == null ? 0 : addr2.hashCode());\n            builder.append(\", \");\n        }\n        if (addr2 != null) {\n            builder.append(\"addr2=\");\n            builder.append(addr2);\n            builder.append(\", \");\n        }\n        if (city != null) {\n            builder.append(\"city=\");\n            builder.append(city);\n            builder.append(\", \");\n        }\n        if (country != null) {\n            builder.append(\"country=\");\n            builder.append(country);\n            builder.append(postalCode);\n            builder.append(\", \");\n        }\n        if (stateProvince != null) {\n            builder.append(\"stateProvince=\");\n            builder.append(stateProvince);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n",
            "src/main/java/org/gedcom4j/model/Association.java": "public class Association extends AbstractElement {\n    private StringWithCustomTags associatedEntityType;\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags relationship;\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n            return false;\n        }\n        if (!(obj instanceof Association)) {\n            return false;\n        }\n        Association other = (Association) obj;\n        if (associatedEntityType == null) {\n            if (other.associatedEntityType != null) {\n                return false;\n            }\n        } else if (!associatedEntityType.equals(other.associatedEntityType)) {\n            return false;\n        }\n        if (associatedEntityXref == null) {\n            if (other.associatedEntityXref != null) {\n                return false;\n            }\n        } else if (!associatedEntityXref.equals(other.associatedEntityXref)) {\n            return false;\n        }\n        if (citations == null) {\n    public StringWithCustomTags getRelationship() {\n    }\n    public void setAssociatedEntityXref(String associatedEntityXref) {\n        this.associatedEntityXref = associatedEntityXref;\n    }\n            builder.append(\"associatedEntityType=\");\n            builder.append(associatedEntityType);\n            builder.append(\", \");\n        }\n        if (associatedEntityXref != null) {\n            builder.append(\"associatedEntityXref=\");\n            builder.append(associatedEntityXref);\n            builder.append(\", \");\n        }\n        if (citations != null) {\n            builder.append(\"citations=\");\n",
            "src/main/java/org/gedcom4j/model/ChangeDate.java": "    private static final long serialVersionUID = 6134688970119877487L;\n    private StringWithCustomTags date;\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags time;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n    public int hashCode() {\n        final int prime = 31;\n        int result = super.hashCode();\n        result = prime * result + (date == null ? 0 : date.hashCode());\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        result = prime * result + (time == null ? 0 : time.hashCode());\n        return result;\n    }\n    public void setTime(StringWithCustomTags time) {\n        this.time = time;\n    }\n        if (time != null) {\n            builder.append(\"time=\");\n            builder.append(time);\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/CharacterSet.java": "    private StringWithCustomTags characterSetName = new StringWithCustomTags(Encoding.ANSEL.toString());\n    private StringWithCustomTags versionNum;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        CharacterSet other = (CharacterSet) obj;\n        if (characterSetName == null) {\n            if (other.characterSetName != null) {\n                return false;\n            }\n        } else if (!characterSetName.equals(other.characterSetName)) {\n            return false;\n        }\n        if (versionNum == null) {\n            builder.append(\"versionNum=\");\n            builder.append(versionNum);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n",
            "src/main/java/org/gedcom4j/model/CitationData.java": "    private StringWithCustomTags entryDate;\n    private List<List<String>> sourceText = getSourceText(Options.isCollectionInitializationEnabled());\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        CitationData other = (CitationData) obj;\n        if (entryDate == null) {\n            if (other.entryDate != null) {\n                return false;\n            }\n        } else if (!entryDate.equals(other.entryDate)) {\n            return false;\n        }\n        if (sourceText == null) {\n            if (other.sourceText != null) {\n                return false;\n            }\n    @Override\n",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": "    private Source source;\n    private StringWithCustomTags whereInSource;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        CitationWithSource other = (CitationWithSource) obj;\n        if (certainty == null) {\n            if (other.certainty != null) {\n                return false;\n            }\n        } else if (!certainty.equals(other.certainty)) {\n            return false;\n        }\n        if (data == null) {\n            if (other.data != null) {\n                return false;\n            }\n        } else if (!data.equals(other.data)) {\n            return false;\n        }\n        if (eventCited == null) {\n            if (other.eventCited != null) {\n                return false;\n            }\n        } else if (!eventCited.equals(other.eventCited)) {\n            return false;\n        }\n            return false;\n    }\n    @Override\n        final int prime = 31;\n        int result = super.hashCode();\n        result = prime * result + (data == null ? 0 : data.hashCode());\n        result = prime * result + (eventCited == null ? 0 : eventCited.hashCode());\n    public void setEventCited(StringWithCustomTags eventCited) {\n        this.eventCited = eventCited;\n    }\n    public void setWhereInSource(StringWithCustomTags whereInSource) {\n        this.whereInSource = whereInSource;\n    }\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n        builder.append(\"]\");\n        return builder.toString();\n    }\n",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": "    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        CitationWithoutSource other = (CitationWithoutSource) obj;\n        if (description == null) {\n            if (other.description != null) {\n                return false;\n            }\n        } else if (!description.equals(other.description)) {\n            return false;\n        }\n        if (getNotes() == null) {\n            if (other.getNotes() != null) {\n                return false;\n            }\n        } else if (!getNotes().equals(other.getNotes())) {\n        return builder.toString();\n    }\n",
            "src/main/java/org/gedcom4j/model/Corporation.java": "    private Address address;\n    private String businessName = \"UNSPECIFIED\";\n    private List<StringWithCustomTags> emails = getEmails(Options.isCollectionInitializationEnabled());\n",
            "src/main/java/org/gedcom4j/model/EventRecorded.java": "    private StringWithCustomTags datePeriod;\n    private String eventType;\n    private StringWithCustomTags jurisdiction;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        EventRecorded other = (EventRecorded) obj;\n        if (datePeriod == null) {\n            if (other.datePeriod != null) {\n                return false;\n            }\n        } else if (!datePeriod.equals(other.datePeriod)) {\n            return false;\n        }\n        if (eventType == null) {\n            if (other.eventType != null) {\n        int result = super.hashCode();\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"EventRecorded [\");\n        if (datePeriod != null) {\n            builder.append(\"datePeriod=\");\n            builder.append(datePeriod);\n            builder.append(\", \");\n        }\n        if (eventType != null) {\n            builder.append(\"eventType=\");\n            builder.append(eventType);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Family.java": "    private String xref;\n    @SuppressWarnings({ \"PMD.ExcessiveMethodLength\", \"PMD.NcssMethodCount\" })\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Family other = (Family) obj;\n        if (automatedRecordId == null) {\n            if (other.automatedRecordId != null) {\n                return false;\n            }\n        } else if (!automatedRecordId.equals(other.automatedRecordId)) {\n            return false;\n        }\n        if (changeDate == null) {\n            if (other.changeDate != null) {\n                return false;\n            }\n        } else if (!changeDate.equals(other.changeDate)) {\n            return false;\n        }\n        if (children == null) {\n            if (other.children != null) {\n                return false;\n            }\n        } else if (!children.equals(other.children)) {\n            return false;\n        }\n        if (citations == null) {\n            if (other.citations != null) {\n                return false;\n            }\n        } else if (!citations.equals(other.citations)) {\n            return false;\n        }\n        if (events == null) {\n            if (other.events != null) {\n                return false;\n            }\n        } else if (!events.equals(other.events)) {\n            return false;\n        }\n        if (husband == null) {\n            if (other.husband != null) {\n                return false;\n            }\n        } else if (!husband.equals(other.husband)) {\n            return false;\n        }\n        if (ldsSpouseSealings == null) {\n            if (other.ldsSpouseSealings != null) {\n                return false;\n            }\n        } else if (!ldsSpouseSealings.equals(other.ldsSpouseSealings)) {\n            return false;\n        }\n        if (multimedia == null) {\n            if (other.multimedia != null) {\n                return false;\n            }\n        } else if (!multimedia.equals(other.multimedia)) {\n            return false;\n        }\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n        if (numChildren == null) {\n            if (other.numChildren != null) {\n                return false;\n            }\n        } else if (!numChildren.equals(other.numChildren)) {\n            return false;\n        }\n        if (recFileNumber == null) {\n            if (other.recFileNumber != null) {\n                return false;\n            }\n        } else if (!recFileNumber.equals(other.recFileNumber)) {\n            return false;\n            submitters = new ArrayList<Submitter>(0);\n        return userReferences;\n            userReferences = new ArrayList<UserReference>(0);\n    public int hashCode() {\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n    public void setXref(String xref) {\n        this.xref = xref;\n    }\n            builder.append(children);\n            builder.append(events);\n            builder.append(\", \");\n        }\n        if (husband != null) {\n            builder.append(\"husband=\");\n            builder.append(husband);\n            builder.append(\", \");\n        }\n        if (ldsSpouseSealings != null) {\n            builder.append(\"ldsSpouseSealings=\");\n            builder.append(ldsSpouseSealings);\n            builder.append(notes);\n            builder.append(\", \");\n        }\n        if (numChildren != null) {\n            builder.append(\"numChildren=\");\n            builder.append(numChildren);\n            builder.append(\", \");\n        }\n        if (recFileNumber != null) {\n            builder.append(\"recFileNumber=\");\n            builder.append(recFileNumber);\n            builder.append(submitters);\n            builder.append(\", \");\n        }\n        if (userReferences != null) {\n            builder.append(\"userReferences=\");\n            builder.append(userReferences);\n            builder.append(\", \");\n        }\n        if (wife != null) {\n            builder.append(\"wife=\");\n            builder.append(wife);\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/FamilyChild.java": "import java.util.ArrayList;\n    private Family family;\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags pedigree;\n    private StringWithCustomTags status;\n    @Override\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof FamilyChild)) {\n            return false;\n        }\n        FamilyChild other = (FamilyChild) obj;\n        if (adoptedBy == null) {\n            if (other.adoptedBy != null) {\n                return false;\n            }\n        } else if (!adoptedBy.equals(other.adoptedBy)) {\n            return false;\n        }\n        if (family == null) {\n            if (other.family != null) {\n                return false;\n            }\n        } else {\n            if (other.family == null) {\n                return false;\n            }\n            if (family.getXref() == null) {\n                if (other.family.getXref() != null) {\n                    return false;\n                }\n    @Override\n    public void setFamily(Family family) {\n        this.family = family;\n    }\n    public void setPedigree(StringWithCustomTags pedigree) {\n        this.pedigree = pedigree;\n    }\n        if (family != null) {\n            builder.append(\"family=\");\n            builder.append(family);\n            builder.append(\", \");\n        }\n        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n            builder.append(\", \");\n        }\n        if (pedigree != null) {\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/FamilyEvent.java": "    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof FamilyEvent)) {\n            return false;\n        }\n        FamilyEvent other = (FamilyEvent) obj;\n        if (husbandAge == null) {\n            if (other.husbandAge != null) {\n                return false;\n            }\n        } else if (!husbandAge.equals(other.husbandAge)) {\n            return false;\n        }\n        if (type != other.type) {\n        this.husbandAge = husbandAge;\n    @SuppressWarnings(\"PMD.ExcessiveMethodLength\")\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"FamilyEvent [\");\n        if (husbandAge != null) {\n            builder.append(\"husbandAge=\");\n            builder.append(husbandAge);\n            builder.append(age);\n            builder.append(\", \");\n        }\n        if (cause != null) {\n            builder.append(\"cause=\");\n            builder.append(cause);\n            builder.append(\", \");\n        }\n        if (citations != null) {\n            builder.append(\"citations=\");\n            builder.append(citations);\n",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": "    private Family family;\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof FamilySpouse)) {\n            return false;\n        }\n        FamilySpouse other = (FamilySpouse) obj;\n        if (family == null) {\n            if (other.family != null) {\n                return false;\n            }\n        } else {\n            if (other.family == null) {\n                return false;\n            }\n            if (family.getXref() == null) {\n            builder.append(\"family=\");\n            builder.append(family);\n            builder.append(\", \");\n",
            "src/main/java/org/gedcom4j/model/FileReference.java": "    private StringWithCustomTags format;\n    private StringWithCustomTags mediaType;\n    private StringWithCustomTags referenceToFile;\n    private StringWithCustomTags title;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        FileReference other = (FileReference) obj;\n        if (format == null) {\n            if (other.format != null) {\n                return false;\n            }\n        } else if (!format.equals(other.format)) {\n            return false;\n        }\n        if (mediaType == null) {\n            if (other.mediaType != null) {\n                return false;\n            }\n        } else if (!mediaType.equals(other.mediaType)) {\n            return false;\n        }\n        return result;\n    public void setFormat(StringWithCustomTags format) {\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"FileReference [\");\n        if (format != null) {\n            builder.append(\"format=\");\n            builder.append(format);\n            builder.append(referenceToFile);\n            builder.append(\", \");\n        }\n        if (title != null) {\n            builder.append(\"title=\");\n            builder.append(title);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Gedcom.java": "            return false;\n        }\n        if (individuals == null) {\n            if (other.individuals != null) {\n                return false;\n            }\n        } else if (!individuals.equals(other.individuals)) {\n            return false;\n        }\n        if (multimedia == null) {\n            if (other.multimedia != null) {\n                return false;\n            }\n        } else if (!multimedia.equals(other.multimedia)) {\n            return false;\n        }\n        if (getNotes() == null) {\n            if (other.getNotes() != null) {\n                return false;\n            }\n        } else if (!getNotes().equals(other.getNotes())) {\n            return false;\n        }\n        if (repositories == null) {\n            if (other.repositories != null) {\n                return false;\n            }\n        } else if (!repositories.equals(other.repositories)) {\n            return false;\n        }\n        if (sources == null) {\n            if (other.sources != null) {\n                return false;\n            }\n        } else if (!sources.equals(other.sources)) {\n            return false;\n        }\n        if (submission == null) {\n            if (other.submission != null) {\n                return false;\n            }\n        } else if (!submission.equals(other.submission)) {\n            return false;\n",
            "src/main/java/org/gedcom4j/model/GedcomVersion.java": "    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        GedcomVersion other = (GedcomVersion) obj;\n        if (gedcomForm == null) {\n            if (other.gedcomForm != null) {\n                return false;\n            }\n        } else if (!gedcomForm.equals(other.gedcomForm)) {\n            return false;\n        }\n        if (versionNumber == null) {\n            builder.append(\"versionNumber=\");\n            builder.append(versionNumber);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n",
            "src/main/java/org/gedcom4j/model/Header.java": "    private StringWithCustomTags destinationSystem;\n    private StringWithCustomTags fileName;\n    private GedcomVersion gedcomVersion = new GedcomVersion();\n    private StringWithCustomTags time;\n    @SuppressWarnings(\"PMD.ExcessiveMethodLength\")\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Header other = (Header) obj;\n        if (characterSet == null) {\n            if (other.characterSet != null) {\n                return false;\n            }\n        } else if (!characterSet.equals(other.characterSet)) {\n            return false;\n        }\n        if (copyrightData == null) {\n            if (other.copyrightData != null) {\n                return false;\n            }\n        } else if (!copyrightData.equals(other.copyrightData)) {\n            return false;\n        }\n        if (date == null) {\n            if (other.date != null) {\n                return false;\n            }\n        } else if (!date.equals(other.date)) {\n            return false;\n        }\n        if (destinationSystem == null) {\n            if (other.destinationSystem != null) {\n                return false;\n            }\n        } else if (!destinationSystem.equals(other.destinationSystem)) {\n            return false;\n        }\n        if (fileName == null) {\n            if (other.fileName != null) {\n                return false;\n            }\n        } else if (!fileName.equals(other.fileName)) {\n        if (initializeIfNeeded && copyrightData == null) {\n            copyrightData = new ArrayList<String>(0);\n    }\n    }\n    }\n    }\n    public StringWithCustomTags getTime() {\n    }\n        int result = super.hashCode();\n        result = prime * result + (copyrightData == null ? 0 : copyrightData.hashCode());\n        result = prime * result + (destinationSystem == null ? 0 : destinationSystem.hashCode());\n        result = prime * result + (fileName == null ? 0 : fileName.hashCode());\n        result = prime * result + (time == null ? 0 : time.hashCode());\n    public void setDate(StringWithCustomTags date) {\n    }\n    public void setGedcomVersion(GedcomVersion gedcomVersion) {\n        this.gedcomVersion = gedcomVersion;\n    }\n    }\n    public void setPlaceHierarchy(StringWithCustomTags placeHierarchy) {\n        this.placeHierarchy = placeHierarchy;\n    }\n    }\n    public void setSubmission(Submission submission) {\n        this.submission = submission;\n    }\n    }\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"Header [\");\n        if (characterSet != null) {\n            builder.append(\"characterSet=\");\n            builder.append(\"date=\");\n            builder.append(date);\n            builder.append(\", \");\n        }\n        if (destinationSystem != null) {\n            builder.append(\"destinationSystem=\");\n            builder.append(destinationSystem);\n            builder.append(\", \");\n        }\n        if (fileName != null) {\n            builder.append(\"fileName=\");\n            builder.append(\"notes=\");\n            builder.append(\", \");\n        }\n            builder.append(\"placeHierarchy=\");\n            builder.append(placeHierarchy);\n            builder.append(\", \");\n            builder.append(\"submission=\");\n            builder.append(submission);\n            builder.append(\", \");\n        }\n        if (submitter != null) {\n            builder.append(\"submitter=\");\n            builder.append(submitter);\n            builder.append(\", \");\n        }\n        if (time != null) {\n            builder.append(\"time=\");\n            builder.append(time);\n    }\n",
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java": "    private StringWithCustomTags copyright;\n    private String name = \"UNSPECIFIED\";\n    private StringWithCustomTags publishDate;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        HeaderSourceData other = (HeaderSourceData) obj;\n        if (copyright == null) {\n            if (other.copyright != null) {\n                return false;\n            }\n        } else if (!copyright.equals(other.copyright)) {\n            return false;\n        }\n        if (name == null) {\n            if (other.name != null) {\n        int result = super.hashCode();\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"HeaderSourceData [\");\n        if (copyright != null) {\n            builder.append(\"copyright=\");\n            builder.append(copyright);\n            builder.append(\", \");\n        }\n        if (name != null) {\n            builder.append(\"name=\");\n            builder.append(name);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Individual.java": "import org.gedcom4j.Options;\n    private StringWithCustomTags sex;\n    private List<Submitter> submitters = getSubmitters(Options.isCollectionInitializationEnabled());\n    private List<UserReference> userReferences = getUserReferences(Options.isCollectionInitializationEnabled());\n    private List<StringWithCustomTags> wwwUrls = getWwwUrls(Options.isCollectionInitializationEnabled());\n    private String xref;\n    @SuppressWarnings({ \"PMD.ExcessiveMethodLength\", \"PMD.NcssMethodCount\" })\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Individual other = (Individual) obj;\n        if (address == null) {\n            if (other.address != null) {\n                return false;\n            }\n        } else if (!address.equals(other.address)) {\n            return false;\n        }\n        if (aliases == null) {\n            if (other.aliases != null) {\n                return false;\n            }\n        } else if (!aliases.equals(other.aliases)) {\n            return false;\n        }\n        if (ancestorInterest == null) {\n            if (other.ancestorInterest != null) {\n                return false;\n            }\n        } else if (!ancestorInterest.equals(other.ancestorInterest)) {\n            return false;\n        }\n        if (ancestralFileNumber == null) {\n            if (other.ancestralFileNumber != null) {\n                return false;\n            }\n        } else if (!ancestralFileNumber.equals(other.ancestralFileNumber)) {\n            return false;\n        }\n        if (associations == null) {\n            if (other.associations != null) {\n                return false;\n            }\n        } else if (!associations.equals(other.associations)) {\n            return false;\n        }\n        if (attributes == null) {\n            if (other.attributes != null) {\n                return false;\n            }\n        } else if (!attributes.equals(other.attributes)) {\n            return false;\n        }\n        if (changeDate == null) {\n            if (other.changeDate != null) {\n                return false;\n            }\n        } else if (!changeDate.equals(other.changeDate)) {\n            return false;\n        }\n        if (citations == null) {\n            if (other.citations != null) {\n                return false;\n            }\n        } else if (!citations.equals(other.citations)) {\n            return false;\n        }\n        if (descendantInterest == null) {\n            if (other.descendantInterest != null) {\n                return false;\n            }\n        } else if (!descendantInterest.equals(other.descendantInterest)) {\n            return false;\n        }\n        if (events == null) {\n            if (other.events != null) {\n                return false;\n            }\n        } else if (!events.equals(other.events)) {\n            return false;\n        }\n        if (familiesWhereChild == null) {\n            if (other.familiesWhereChild != null) {\n                return false;\n            }\n        } else if (!familiesWhereChild.equals(other.familiesWhereChild)) {\n            return false;\n        }\n        if (familiesWhereSpouse == null) {\n            if (other.familiesWhereSpouse != null) {\n                return false;\n            }\n        } else if (!familiesWhereSpouse.equals(other.familiesWhereSpouse)) {\n            return false;\n        }\n        if (ldsIndividualOrdinances == null) {\n            if (other.ldsIndividualOrdinances != null) {\n                return false;\n            }\n        } else if (!ldsIndividualOrdinances.equals(other.ldsIndividualOrdinances)) {\n            return false;\n        }\n        if (multimedia == null) {\n            if (other.multimedia != null) {\n                return false;\n            }\n        return ancestralFileNumber;\n    public List<IndividualAttribute> getAttributesOfType(IndividualAttributeType type) {\n    public List<StringWithCustomTags> getEmails() {\n            emails = new ArrayList<StringWithCustomTags>(0);\n            multimedia = new ArrayList<Multimedia>(0);\n        return names;\n        if (initializeIfNeeded && notes == null) {\n        return recIdNumber;\n    }\n                if (this != fam.getHusband() && fam.getHusband() != null) {\n                    result.add(fam.getHusband());\n                }\n                if (this != fam.getWife() && fam.getWife() != null) {\n                    result.add(fam.getWife());\n                }\n            }\n        }\n        return result;\n    }\n    public List<Submitter> getSubmitters() {\n        return submitters;\n    }\n        return userReferences;\n        result = prime * result;\n        result = prime * result + (address == null ? 0 : address.hashCode());\n        result = prime * result + (aliases == null ? 0 : aliases.hashCode());\n        result = prime * result + (ancestorInterest == null ? 0 : ancestorInterest.hashCode());\n        result = prime * result + (ancestralFileNumber == null ? 0 : ancestralFileNumber.hashCode());\n        result = prime * result + (associations == null ? 0 : associations.hashCode());\n        result = prime * result + (attributes == null ? 0 : attributes.hashCode());\n        result = prime * result + (changeDate == null ? 0 : changeDate.hashCode());\n        result = prime * result + (citations == null ? 0 : citations.hashCode());\n        result = prime * result + (descendantInterest == null ? 0 : descendantInterest.hashCode());\n        result = prime * result + (events == null ? 0 : events.hashCode());\n    public void setAddress(Address address) {\n        this.address = address;\n    }\n    public void setChangeDate(ChangeDate changeDate) {\n        this.changeDate = changeDate;\n    }\n    public void setRecIdNumber(StringWithCustomTags recIdNumber) {\n        this.recIdNumber = recIdNumber;\n    }\n    public void setSex(StringWithCustomTags sex) {\n        this.sex = sex;\n    }\n                }\n                        sb.append(fam.getWife().getFormattedName());\n                    }\n                    if (fam.getHusband() != null) {\n                    }\n            }\n                }\n                if (f.getFamily().getHusband() == null) {\n                    sb.append(f.getFamily().getHusband().getFormattedName());\n        }\n                    seenSoFar.add(husband);\n                    Set<Individual> husbandsAncestors = husband.addGenerationOfAncestors(seenSoFar);\n                    result.addAll(husbandsAncestors);\n                    seenSoFar.addAll(husbandsAncestors);\n                    seenSoFar.addAll(wifesAncestors);\n                }\n            }\n        }\n                            Set<Individual> d = i.addGenerationOfDescendants(seenSoFar);\n                            result.addAll(d);\n                        result.add(i);\n                }\n            }\n",
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java": "        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof IndividualAttribute)) {\n            return false;\n        }\n        IndividualAttribute other = (IndividualAttribute) obj;\n        return (type == other.type);\n    }\n",
            "src/main/java/org/gedcom4j/model/IndividualEvent.java": "        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof IndividualEvent)) {\n            return false;\n        }\n        IndividualEvent other = (IndividualEvent) obj;\n        if (family == null) {\n            if (other.family != null) {\n                return false;\n            }\n        } else if (!family.equals(other.family)) {\n            return false;\n        }\n        return (type == other.type);\n    }\n        int result = super.hashCode();\n",
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof LdsIndividualOrdinance)) {\n            return false;\n        }\n        LdsIndividualOrdinance other = (LdsIndividualOrdinance) obj;\n        if (familyWhereChild == null) {\n            if (other.familyWhereChild != null) {\n                return false;\n            }\n        } else if (!familyWhereChild.equals(other.familyWhereChild)) {\n            return false;\n        }\n        if (type != other.type) {\n            return false;\n            builder.append(\"citations=\");\n            builder.append(citations);\n",
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java": "    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"LdsSpouseSealing [\");\n        if (citations != null) {\n            builder.append(\"citations=\");\n            builder.append(citations);\n            builder.append(\", \");\n        }\n        if (date != null) {\n            builder.append(\"date=\");\n            builder.append(date);\n        if (temple != null) {\n            builder.append(\"temple=\");\n            builder.append(temple);\n",
            "src/main/java/org/gedcom4j/model/Multimedia.java": "    private Multimedia continuedObject;\n    private StringWithCustomTags embeddedMediaFormat;\n    private String xref;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Multimedia other = (Multimedia) obj;\n        if (blob == null) {\n            if (other.blob != null) {\n                return false;\n            }\n        } else if (!blob.equals(other.blob)) {\n            return false;\n        }\n        if (embeddedMediaFormat == null) {\n            if (other.embeddedMediaFormat != null) {\n                return false;\n            }\n        } else if (!embeddedMediaFormat.equals(other.embeddedMediaFormat)) {\n            return false;\n        }\n        if (changeDate == null) {\n            if (other.changeDate != null) {\n                return false;\n            }\n        } else if (!changeDate.equals(other.changeDate)) {\n            return false;\n        }\n        if (citations == null) {\n            if (other.citations != null) {\n                return false;\n            }\n        } else if (!citations.equals(other.citations)) {\n            return false;\n        }\n        if (continuedObject == null) {\n            if (other.continuedObject != null) {\n                return false;\n            }\n        } else if (!continuedObject.equals(other.continuedObject)) {\n            return false;\n        }\n        if (fileReferences == null) {\n            if (other.fileReferences != null) {\n                return false;\n        return notes;\n        return userReferences;\n    public void setRecIdNumber(StringWithCustomTags recIdNumber) {\n        this.recIdNumber = recIdNumber;\n    }\n    @Override\n            builder.append(\"changeDate=\");\n            builder.append(changeDate);\n            builder.append(\", \");\n        }\n        if (citations != null) {\n            builder.append(\"citations=\");\n            builder.append(citations);\n            builder.append(\", \");\n        }\n        if (continuedObject != null) {\n            builder.append(\"continuedObject=\");\n            builder.append(\"embeddedTitle=\");\n            builder.append(embeddedTitle);\n            builder.append(\", \");\n        }\n        if (fileReferences != null) {\n            builder.append(\"fileReferences=\");\n            builder.append(fileReferences);\n            builder.append(\", \");\n        }\n        if (notes != null) {\n            builder.append(\"notes=\");\n",
            "src/main/java/org/gedcom4j/model/PersonalName.java": "    private StringWithCustomTags surnamePrefix;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof PersonalName)) {\n            return false;\n        }\n        PersonalName other = (PersonalName) obj;\n        if (basic == null) {\n            if (other.basic != null) {\n                return false;\n            }\n        } else if (!basic.equals(other.basic)) {\n            return false;\n        }\n        if (citations == null) {\n            if (other.citations != null) {\n                return false;\n            }\n        } else if (!citations.equals(other.citations)) {\n            return false;\n        }\n        if (givenName == null) {\n            if (other.givenName != null) {\n                return false;\n            }\n        } else if (!givenName.equals(other.givenName)) {\n            return false;\n        }\n        if (nickname == null) {\n            if (other.nickname != null) {\n                return false;\n            }\n        } else if (!nickname.equals(other.nickname)) {\n            return false;\n        }\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n        if (prefix == null) {\n            if (other.prefix != null) {\n                return false;\n            }\n        } else if (!prefix.equals(other.prefix)) {\n            return false;\n        }\n        if (suffix == null) {\n            if (other.suffix != null) {\n                return false;\n            }\n        } else if (!suffix.equals(other.suffix)) {\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public StringWithCustomTags getPrefix() {\n    public List<PersonalNameVariation> getRomanized() {\n    public StringWithCustomTags getSurname() {\n    public void setNickname(StringWithCustomTags nickname) {\n        this.nickname = nickname;\n    }\n    @Override\n    public String toString() {\n        if (surname != null || givenName != null) {\n            return surname + \", \" + givenName + (nickname == null ? \"\" : \" \\\"\" + nickname + \"\\\"\");\n        }\n        return basic;\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": "    private StringWithCustomTags givenName;\n    private StringWithCustomTags nickname;\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags prefix;\n    private StringWithCustomTags suffix;\n    private StringWithCustomTags surname;\n    private StringWithCustomTags surnamePrefix;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        PersonalNameVariation other = (PersonalNameVariation) obj;\n        if (citations == null) {\n            if (other.citations != null) {\n                return false;\n            }\n        } else if (!citations.equals(other.citations)) {\n            return false;\n        }\n        if (givenName == null) {\n            if (other.givenName != null) {\n                return false;\n            }\n        } else if (!givenName.equals(other.givenName)) {\n            return false;\n        }\n        if (nickname == null) {\n            if (other.nickname != null) {\n                return false;\n            }\n        } else if (!nickname.equals(other.nickname)) {\n            return false;\n        }\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n        return true;\n    }\n    public StringWithCustomTags getSuffix() {\n    public StringWithCustomTags getSurname() {\n    public StringWithCustomTags getSurnamePrefix() {\n        return surnamePrefix;\n    }\n        int result = super.hashCode();\n        result = prime * result + (citations == null ? 0 : citations.hashCode());\n        result = prime * result + (givenName == null ? 0 : givenName.hashCode());\n        result = prime * result + (nickname == null ? 0 : nickname.hashCode());\n        result = prime * result + (prefix == null ? 0 : prefix.hashCode());\n    }\n        this.nickname = nickname;\n    public void setPrefix(StringWithCustomTags prefix) {\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"PersonalNameVariation [\");\n        if (citations != null) {\n            builder.append(\"citations=\");\n            builder.append(citations);\n            builder.append(nickname);\n            builder.append(\", \");\n        }\n        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n            builder.append(\", \");\n        }\n        if (prefix != null) {\n            builder.append(\"prefix=\");\n            builder.append(prefix);\n            builder.append(surname);\n            builder.append(\", \");\n        }\n        if (surnamePrefix != null) {\n            builder.append(\"surnamePrefix=\");\n            builder.append(surnamePrefix);\n            builder.append(\", \");\n        }\n        if (variation != null) {\n            builder.append(\"variation=\");\n            builder.append(variation);\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Place.java": "    private StringWithCustomTags latitude;\n    private StringWithCustomTags longitude;\n    private List<AbstractNameVariation> phonetic = getPhonetic(Options.isCollectionInitializationEnabled());\n    private List<AbstractNameVariation> romanized = getRomanized(Options.isCollectionInitializationEnabled());\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Place other = (Place) obj;\n        if (citations == null) {\n            if (other.citations != null) {\n                return false;\n            }\n        } else if (!citations.equals(other.citations)) {\n            return false;\n        }\n        if (latitude == null) {\n            if (other.latitude != null) {\n                return false;\n            }\n        } else if (!latitude.equals(other.latitude)) {\n            return false;\n        }\n        if (longitude == null) {\n            if (other.longitude != null) {\n                return false;\n            }\n        } else if (!longitude.equals(other.longitude)) {\n            return false;\n        }\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n        if (phonetic == null) {\n            if (other.phonetic != null) {\n                return false;\n    public void setPlaceFormat(StringWithCustomTags placeFormat) {\n        this.placeFormat = placeFormat;\n    }\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"Place [\");\n        if (citations != null) {\n            builder.append(\"citations=\");\n            builder.append(citations);\n            builder.append(\", \");\n        }\n        if (latitude != null) {\n            builder.append(\"latitude=\");\n            builder.append(latitude);\n            builder.append(\", \");\n            builder.append(\", \");\n        }\n        if (phonetic != null) {\n            builder.append(\"phonetic=\");\n            builder.append(phonetic);\n            builder.append(\", \");\n        }\n        if (placeFormat != null) {\n            builder.append(\"placeFormat=\");\n            builder.append(placeFormat);\n            builder.append(\", \");\n",
            "src/main/java/org/gedcom4j/model/Repository.java": "    private ChangeDate changeDate;\n    private List<StringWithCustomTags> emails = getEmails(Options.isCollectionInitializationEnabled());\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    private List<StringWithCustomTags> phoneNumbers = getPhoneNumbers(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags recIdNumber;\n    private List<UserReference> userReferences = getUserReferences(Options.isCollectionInitializationEnabled());\n    private List<StringWithCustomTags> wwwUrls = getWwwUrls(Options.isCollectionInitializationEnabled());\n    private String xref;\n    @Override\n        if (recIdNumber == null) {\n                return false;\n    public List<StringWithCustomTags> getFaxNumbers(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && faxNumbers == null) {\n            faxNumbers = new ArrayList<StringWithCustomTags>(0);\n        }\n        return faxNumbers;\n    }\n    public List<Note> getNotes() {\n        return notes;\n    }\n",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": "    private String repositoryXref;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof RepositoryCitation)) {\n            return false;\n        }\n        RepositoryCitation other = (RepositoryCitation) obj;\n        if (callNumbers == null) {\n            if (other.callNumbers != null) {\n                return false;\n            }\n        } else if (!callNumbers.equals(other.callNumbers)) {\n            return false;\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"RepositoryCitation [\");\n            builder.append(notes);\n            builder.append(\", \");\n        }\n",
            "src/main/java/org/gedcom4j/model/Source.java": "    private String xref;\n    public Source(String xref) {\n        if (xref != null) {\n            this.xref = xref;\n        }\n    }\n    @SuppressWarnings(\"PMD.ExcessiveMethodLength\")\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof Source)) {\n            return false;\n        }\n        Source other = (Source) obj;\n        if (changeDate == null) {\n            if (other.changeDate != null) {\n                return false;\n            }\n        } else if (!changeDate.equals(other.changeDate)) {\n            return false;\n        }\n        if (data == null) {\n            if (other.data != null) {\n                return false;\n            }\n        } else if (!data.equals(other.data)) {\n            return false;\n        }\n        if (multimedia == null) {\n            if (other.multimedia != null) {\n                return false;\n            }\n        } else if (!multimedia.equals(other.multimedia)) {\n            return false;\n        }\n        if (notes == null) {\n            if (other.notes != null) {\n                return false;\n            }\n        if (initializeIfNeeded && title == null) {\n        result = prime * result + (multimedia == null ? 0 : multimedia.hashCode());\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n        result = prime * result + (originatorsAuthors == null ? 0 : originatorsAuthors.hashCode());\n        result = prime * result + (publicationFacts == null ? 0 : publicationFacts.hashCode());\n        result = prime * result + (recIdNumber == null ? 0 : recIdNumber.hashCode());\n        result = prime * result + (repositoryCitation == null ? 0 : repositoryCitation.hashCode());\n        result = prime * result + (sourceFiledBy == null ? 0 : sourceFiledBy.hashCode());\n        result = prime * result + (sourceText == null ? 0 : sourceText.hashCode());\n        result = prime * result + (title == null ? 0 : title.hashCode());\n        result = prime * result + (userReferences == null ? 0 : userReferences.hashCode());\n        result = prime * result + (xref == null ? 0 : xref.hashCode());\n        return result;\n    }\n    public void setData(SourceData data) {\n        this.data = data;\n    }\n    public void setSourceFiledBy(StringWithCustomTags sourceFiledBy) {\n        this.sourceFiledBy = sourceFiledBy;\n    }\n    public void setXref(String xref) {\n        this.xref = xref;\n    }\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"Source [\");\n        if (changeDate != null) {\n            builder.append(\"changeDate=\");\n            builder.append(changeDate);\n            builder.append(\", \");\n        }\n        if (data != null) {\n            builder.append(\"data=\");\n            builder.append(data);\n            builder.append(\", \");\n            builder.append(\"sourceFiledBy=\");\n            builder.append(sourceFiledBy);\n            builder.append(\", \");\n",
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java": "    private StringWithCustomTags callNumber;\n    private StringWithCustomTags mediaType;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof SourceCallNumber)) {\n            return false;\n        }\n        SourceCallNumber other = (SourceCallNumber) obj;\n        if (callNumber == null) {\n            if (other.callNumber != null) {\n                return false;\n            }\n        } else if (!callNumber.equals(other.callNumber)) {\n            return false;\n        }\n        if (mediaType == null) {\n            builder.append(\"mediaType=\");\n            builder.append(mediaType);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n",
            "src/main/java/org/gedcom4j/model/SourceData.java": "    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags respAgency;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        SourceData other = (SourceData) obj;\n        if (eventsRecorded == null) {\n            if (other.eventsRecorded != null) {\n                return false;\n            }\n        } else if (!eventsRecorded.equals(other.eventsRecorded)) {\n            return false;\n        }\n        return notes;\n    public void setRespAgency(StringWithCustomTags respAgency) {\n        this.respAgency = respAgency;\n    }\n        }\n        if (respAgency != null) {\n            builder.append(\"respAgency=\");\n        builder.append(\"]\");\n        return builder.toString();\n    }\n",
            "src/main/java/org/gedcom4j/model/SourceSystem.java": "    private StringWithCustomTags productName;\n    private StringWithCustomTags versionNum;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        SourceSystem other = (SourceSystem) obj;\n        if (corporation == null) {\n            if (other.corporation != null) {\n                return false;\n            }\n        } else if (!corporation.equals(other.corporation)) {\n            return false;\n        }\n        if (productName == null) {\n            if (other.productName != null) {\n                return false;\n            }\n        } else if (!productName.equals(other.productName)) {\n            return false;\n        }\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"SourceSystem [\");\n        if (corporation != null) {\n            builder.append(\"corporation=\");\n            builder.append(corporation);\n}\n",
            "src/main/java/org/gedcom4j/model/StringTree.java": "    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        StringTree other = (StringTree) obj;\n        if (children == null) {\n            if (other.children != null) {\n                return false;\n            }\n        } else if (!children.equals(other.children)) {\n            return false;\n        }\n        if (id == null) {\n            if (other.id != null) {\n                return false;\n            }\n        } else if (!id.equals(other.id)) {\n            return false;\n        }\n    public void setId(String id) {\n        this.id = id;\n    }\n        this.lineNum = lineNum;\n",
            "src/main/java/org/gedcom4j/model/Submission.java": "    private StringWithCustomTags ancestorsCount;\n    private StringWithCustomTags descendantsCount;\n    private StringWithCustomTags nameOfFamilyFile;\n    private StringWithCustomTags ordinanceProcessFlag;\n    private StringWithCustomTags recIdNumber;\n    private StringWithCustomTags templeCode;\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Submission other = (Submission) obj;\n        if (ancestorsCount == null) {\n            if (other.ancestorsCount != null) {\n                return false;\n            }\n        } else if (!ancestorsCount.equals(other.ancestorsCount)) {\n            return false;\n        }\n        if (descendantsCount == null) {\n            if (other.descendantsCount != null) {\n                return false;\n            }\n        } else if (!descendantsCount.equals(other.descendantsCount)) {\n            return false;\n        }\n        if (nameOfFamilyFile == null) {\n            if (other.nameOfFamilyFile != null) {\n                return false;\n            }\n        } else if (!nameOfFamilyFile.equals(other.nameOfFamilyFile)) {\n            return false;\n        }\n        if (ordinanceProcessFlag == null) {\n            if (other.ordinanceProcessFlag != null) {\n                return false;\n            }\n        } else if (!ordinanceProcessFlag.equals(other.ordinanceProcessFlag)) {\n    public int hashCode() {\n        result = prime * result + (templeCode == null ? 0 : templeCode.hashCode());\n    public void setSubmitter(Submitter submitter) {\n        this.submitter = submitter;\n    }\n    public void setXref(String xref) {\n        this.xref = xref;\n    }\n        }\n        if (descendantsCount != null) {\n            builder.append(\"descendantsCount=\");\n            builder.append(descendantsCount);\n            builder.append(\", \");\n        }\n        if (nameOfFamilyFile != null) {\n            builder.append(\"nameOfFamilyFile=\");\n            builder.append(nameOfFamilyFile);\n            builder.append(\", \");\n        }\n        }\n        if (submitter != null) {\n            builder.append(\"submitter=\");\n            builder.append(submitter);\n            builder.append(\", \");\n        }\n        if (templeCode != null) {\n            builder.append(\"templeCode=\");\n            builder.append(templeCode);\n            builder.append(\", \");\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Submitter.java": "    private List<StringWithCustomTags> phoneNumbers = getPhoneNumbers(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags recIdNumber;\n    private StringWithCustomTags regFileNumber;\n    private List<UserReference> userReferences = getUserReferences(Options.isCollectionInitializationEnabled());\n    private List<StringWithCustomTags> wwwUrls = getWwwUrls(Options.isCollectionInitializationEnabled());\n    private String xref;\n    @SuppressWarnings(\"PMD.ExcessiveMethodLength\")\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Submitter other = (Submitter) obj;\n        if (address == null) {\n            if (other.address != null) {\n                return false;\n            }\n        } else if (!address.equals(other.address)) {\n            return false;\n        }\n        if (changeDate == null) {\n            if (other.changeDate != null) {\n                return false;\n            }\n        } else if (!changeDate.equals(other.changeDate)) {\n            return false;\n        }\n        return emails;\n        if (initializeIfNeeded && emails == null) {\n    public List<StringWithCustomTags> getFaxNumbers() {\n    }\n    public StringWithCustomTags getName() {\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n    public List<StringWithCustomTags> getPhoneNumbers(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && phoneNumbers == null) {\n            phoneNumbers = new ArrayList<StringWithCustomTags>(0);\n        }\n        return phoneNumbers;\n    }\n    public StringWithCustomTags getRegFileNumber() {\n        return regFileNumber;\n    }\n        result = prime * result + (address == null ? 0 : address.hashCode());\n        result = prime * result + (changeDate == null ? 0 : changeDate.hashCode());\n        result = prime * result + (languagePref == null ? 0 : languagePref.hashCode());\n        result = prime * result + (multimedia == null ? 0 : multimedia.hashCode());\n        result = prime * result + (name == null ? 0 : name.hashCode());\n",
            "src/main/java/org/gedcom4j/model/UserReference.java": "    private StringWithCustomTags referenceNum;\n    private StringWithCustomTags type;\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        UserReference other = (UserReference) obj;\n        if (referenceNum == null) {\n            if (other.referenceNum != null) {\n                return false;\n            }\n        } else if (!referenceNum.equals(other.referenceNum)) {\n            return false;\n        }\n        if (type == null) {\n            if (other.type != null) {\n                return false;\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/parser/AbstractParser.java": "    protected GedcomParser gedcomParser;\n            f.setXref(xref);\n            gedcomParser.getGedcom().getFamilies().put(xref, f);\n        }\n    }\n    protected Source getSource(String xref) {\n        Source src = gedcomParser.getGedcom().getSources().get(xref);\n        if (src == null) {\n            src = new Source(xref);\n            gedcomParser.getGedcom().getSources().put(src.getXref(), src);\n        }\n        return src;\n    }\n                            listOfString.add(ch.getValue());\n    protected void unknownTag(StringTree node, AbstractElement element) {\n        if (node.getTag().length() > 0 && (node.getTag().charAt(0) == '_') || !gedcomParser.isStrictCustomTags()) {\n            element.getCustomTags(true).add(node);\n            return;\n        }\n        StringBuilder sb = new StringBuilder(64); // Min size = 64\n        sb.append(\"Line \").append(node.getLineNum()).append(\": Cannot handle tag \");\n        sb.append(node.getTag());\n        StringTree st = node;\n        while (st.getParent() != null) {\n            st = st.getParent();\n            sb.append(\", child of \").append(st.getTag() == null ? null : st.getTag());\n            if (st.getId() != null) {\n                sb.append(\" \").append(st.getId());\n            }\n            sb.append(\" on line \").append(st.getLineNum());\n        }\n        addError(sb.toString());\n    }\n    abstract void parse();\n}\n",
            "src/main/java/org/gedcom4j/parser/AddressParser.java": "                if (Tag.ADDRESS_1.equalsText(ch.getTag())) {\n                } else if (Tag.ADDRESS_2.equalsText(ch.getTag())) {\n                    loadInto.setAddr2(new StringWithCustomTags(ch));\n                } else if (Tag.CITY.equalsText(ch.getTag())) {\n                } else if (Tag.STATE.equalsText(ch.getTag())) {\n                } else if (Tag.POSTAL_CODE.equalsText(ch.getTag())) {\n                } else if (Tag.COUNTRY.equalsText(ch.getTag())) {\n                } else if (Tag.CONCATENATION.equalsText(ch.getTag())) {\n",
            "src/main/java/org/gedcom4j/parser/AssociationParser.java": "                    new NoteListParser(gedcomParser, ch, notes).parse();\n                    List<AbstractCitation> citations = loadInto.getCitations(true);\n                    new CitationListParser(gedcomParser, ch, citations).parse();\n                }\n",
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java": "import org.gedcom4j.model.Note;\nimport org.gedcom4j.model.StringWithCustomTags;\n                    loadInto.setDate(new StringWithCustomTags(ch.getValue()));\n                    if (!ch.getChildren().isEmpty()) {\n                        loadInto.setTime(new StringWithCustomTags(ch.getChildren().get(0)));\n                    }\n                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                    List<Note> notes = loadInto.getNotes(true);\n                    new NoteListParser(gedcomParser, ch, notes).parse();\n                } else {\n                    unknownTag(ch, loadInto);\n        }\n",
            "src/main/java/org/gedcom4j/parser/CitationListParser.java": "class CitationListParser extends AbstractParser<List<AbstractCitation>> {\n            }\n    }\n                    CitationData d = new CitationData();\n                    loadCitationData(ch, d);\n                    List<Note> notes = cws.getNotes(true);\n",
            "src/main/java/org/gedcom4j/parser/CorporationParser.java": "                } else if (Tag.PHONE.equalsText(ch.getTag())) {\n                } else if (Tag.WEB_ADDRESS.equalsText(ch.getTag())) {\n                    if (g55()) {\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n",
            "src/main/java/org/gedcom4j/parser/FamilyChildParser.java": "                } else if (Tag.ADOPTION.equalsText(ch.getTag())) {\n                    loadInto.setAdoptedBy(AdoptedByWhichParent.valueOf(ch.getValue()));\n                    loadInto.setStatus(new StringWithCustomTags(ch));\n                    }\n",
            "src/main/java/org/gedcom4j/parser/FamilyEventParser.java": "class FamilyEventParser extends AbstractParser<FamilyEvent> {\n                if (Tag.TYPE.equalsText(ch.getTag())) {\n                } else if (Tag.DATE.equalsText(ch.getTag())) {\n                } else if (Tag.OBJECT_MULTIMEDIA.equalsText(ch.getTag())) {\n                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                    List<Note> notes = loadInto.getNotes(true);\n                } else if (Tag.RESTRICTION.equalsText(ch.getTag())) {\n                    loadInto.setReligiousAffiliation(new StringWithCustomTags(ch));\n                } else if (Tag.CAUSE.equalsText(ch.getTag())) {\n                } else if (Tag.ADDRESS.equalsText(ch.getTag())) {\n                } else if (Tag.PHONE.equalsText(ch.getTag())) {\n                } else if (Tag.WEB_ADDRESS.equalsText(ch.getTag())) {\n                    if (g55()) {\n                        addWarning(\"GEDCOM version is 5.5 but fax number was specified for \" + loadInto.getType() + \" family event on line \" + ch.getLineNum()\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                    if (loadInto.getDescription() == null) {\n                    } else {\n                } else if (Tag.CONTINUATION.equalsText(ch.getTag())) {\n                } else {\n",
            "src/main/java/org/gedcom4j/parser/FamilyParser.java": "class FamilyParser extends AbstractParser<Family> {\n                    new MultimediaLinkParser(gedcomParser, ch, multimedia).parse();\n                } else if (Tag.RECORD_ID_NUMBER.equalsText(ch.getTag())) {\n                    loadInto.setAutomatedRecordId(new StringWithCustomTags(ch));\n                } else if (Tag.CHANGED_DATETIME.equalsText(ch.getTag())) {\n                    ChangeDate changeDate = new ChangeDate();\n                    loadInto.setChangeDate(changeDate);\n                    new ChangeDateParser(gedcomParser, ch, changeDate).parse();\n                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                    List<Note> notes = loadInto.getNotes(true);\n                } else if (Tag.RESTRICTION.equalsText(ch.getTag())) {\n                    loadInto.setRestrictionNotice(new StringWithCustomTags(ch));\n                    if (g55()) {\n                        addWarning(\"GEDCOM version is 5.5 but restriction notice was specified for family on line \" + ch\n                                .getLineNum() + \" , which is a GEDCOM 5.5.1 feature.\"\n                                + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                    }\n                } else if (Tag.REGISTRATION_FILE_NUMBER.equalsText(ch.getTag())) {\n                    loadInto.setRecFileNumber(new StringWithCustomTags(ch));\n                    FamilyEvent event = new FamilyEvent();\n                    loadInto.getEvents(true).add(event);\n                    new FamilyEventParser(gedcomParser, ch, event).parse();\n                } else if (Tag.SEALING_SPOUSE.equalsText(ch.getTag())) {\n                    LdsSpouseSealing ldsss = new LdsSpouseSealing();\n                    loadInto.getLdsSpouseSealings(true).add(ldsss);\n                    new LdsSpouseSealingParser(gedcomParser, ch, ldsss).parse();\n                } else if (Tag.SUBMITTER.equalsText(ch.getTag())) {\n                    loadInto.getSubmitters(true).add(getSubmitter(ch.getValue()));\n                    UserReference u = new UserReference();\n                }\n    }\n",
            "src/main/java/org/gedcom4j/parser/FileReference551Parser.java": "import org.gedcom4j.model.StringWithCustomTags;\n        loadInto.setReferenceToFile(new StringWithCustomTags(stringTree));\n                    loadInto.setTitle(new StringWithCustomTags(fileChild));\n                    unknownTag(fileChild, loadInto);\n        loadInto.setFormat(new StringWithCustomTags(form.getValue()));\n                    loadInto.setMediaType(new StringWithCustomTags(formChild));\n                    typeCount++;\n                } else {\n                    unknownTag(formChild, loadInto);\n            if (typeCount > 1) {\n    }\n",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java": "            }\n",
            "src/main/java/org/gedcom4j/parser/GedcomParser.java": "    private boolean cancelled;\n        cancelled = true;\n    }\n            throw new IllegalArgumentException(\"Read Notification Rate must be at least 1\");\n        }\n        this.readNotificationRate = readNotificationRate;\n    }\n            new IndividualParser(this, rootLevelItem, i).parse();\n        } else if (Tag.SUBMISSION.equalsText(rootLevelItem.getTag())) {\n            Submission s = new Submission(rootLevelItem.getId());\n            gedcom.setSubmission(s);\n            if (gedcom.getHeader() == null) {\n                gedcom.setHeader(new Header());\n            }\n            if (gedcom.getHeader().getSubmission() == null) {\n            }\n        } else if (Tag.FAMILY.equalsText(rootLevelItem.getTag())) {\n            Family f = getFamily(rootLevelItem.getId());\n            new FamilyParser(this, rootLevelItem, f).parse();\n        } else if (Tag.TRAILER.equalsText(rootLevelItem.getTag())) {\n            gedcom.setTrailer(new Trailer());\n        } else if (Tag.SOURCE.equalsText(rootLevelItem.getTag())) {\n            Source s = getSource(rootLevelItem.getId());\n            new SourceParser(this, rootLevelItem, s).parse();\n        } else if (Tag.REPOSITORY.equalsText(rootLevelItem.getTag())) {\n        int i = 0;\n            if (observerRef == null) {\n                ParseProgressListener l = observerRef.get();\n            }\n        StringTree tree = stringTreeBuilder.getTree();\n                throw new GedcomParserException(\"Expected a root level item in the buffer, but found \" + rootLevelItem.getLevel() + \" \" + rootLevelItem.getTag()\n            loadRootItem(rootLevelItem);\n        }\n    }\n",
            "src/main/java/org/gedcom4j/parser/GedcomVersionParser.java": "import org.gedcom4j.model.StringWithCustomTags;\n                    loadInto.setVersionNumber(vn);\n                    loadInto.setGedcomForm(new StringWithCustomTags(ch));\n",
            "src/main/java/org/gedcom4j/parser/HeaderParser.java": "                    loadInto.setSourceSystem(sourceSystem);\n                    new SourceSystemParser(gedcomParser, ch, sourceSystem).parse();\n                } else if (Tag.DESTINATION.equalsText(ch.getTag())) {\n                    loadInto.getCharacterSet().setCharacterSetName(new StringWithCustomTags(ch));\n                        loadInto.getCharacterSet().setVersionNum(new StringWithCustomTags(ch.getChildren().get(0)));\n                } else if (Tag.SUBMITTER.equalsText(ch.getTag())) {\n                    loadInto.setSubmitter(getSubmitter(ch.getValue()));\n                } else if (Tag.FILE.equalsText(ch.getTag())) {\n                    loadInto.setFileName(new StringWithCustomTags(ch));\n                } else if (Tag.GEDCOM_VERSION.equalsText(ch.getTag())) {\n                    GedcomVersion gedcomVersion = new GedcomVersion();\n                    loadInto.setGedcomVersion(gedcomVersion);\n                    new GedcomVersionParser(gedcomParser, ch, gedcomVersion).parse();\n                        gedcomParser.getWarnings().add(\n                                \"GEDCOM version is 5.5, but multiple lines of copyright data were specified, which is only allowed in GEDCOM 5.5.1. \"\n                    }\n                } else if (Tag.SUBMISSION.equalsText(ch.getTag())) {\n                    if (loadInto.getSubmission() == null) {\n                        loadInto.setSubmission(gedcomParser.getGedcom().getSubmission());\n                } else if (Tag.LANGUAGE.equalsText(ch.getTag())) {\n                    loadInto.setLanguage(new StringWithCustomTags(ch));\n                    loadInto.setPlaceHierarchy(new StringWithCustomTags(ch.getChildren().get(0)));\n",
            "src/main/java/org/gedcom4j/parser/HeaderSourceDataParser.java": "                if (Tag.DATE.equalsText(ch.getTag())) {\n                } else if (Tag.COPYRIGHT.equalsText(ch.getTag())) {\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": "        boolean shalemYear = (lenHebrewYear == 355 || lenHebrewYear == 385);\n        int monthLength = 0;\n        } else if (hebrewMonthNum == 2) {\n        } else if (hebrewMonthNum == 3) {\n        }\n                || yearInCycle == 17 || yearInCycle == 0);\n    }\n",
            "src/main/java/org/gedcom4j/parser/IndividualAttributeParser.java": "class IndividualAttributeParser extends AbstractParser<IndividualAttribute> {\n                    loadInto.setPlace(place);\n                } else if (Tag.CAUSE.equalsText(ch.getTag())) {\n                } else if (Tag.SOURCE.equalsText(ch.getTag())) {\n                    loadInto.getPhoneNumbers(true).add(new StringWithCustomTags(ch));\n                    loadInto.getWwwUrls(true).add(new StringWithCustomTags(ch));\n                } else if (Tag.FAX.equalsText(ch.getTag())) {\n                    if (g55()) {\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                    }\n                    new MultimediaLinkParser(gedcomParser, ch, multimedia).parse();\n                    unknownTag(ch, loadInto);\n        }\n    }\n",
            "src/main/java/org/gedcom4j/parser/IndividualEventParser.java": "                } else if (Tag.PLACE.equalsText(ch.getTag())) {\n                    loadInto.setPlace(place);\n                    List<Note> notes = loadInto.getNotes(true);\n                    List<AbstractCitation> citations = loadInto.getCitations(true);\n                    new CitationListParser(gedcomParser, ch, citations).parse();\n                } else if (Tag.ADDRESS.equalsText(ch.getTag())) {\n                    loadInto.setAddress(address);\n                    if (g55()) {\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                    }\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                } else if (Tag.FAX.equalsText(ch.getTag())) {\n                    loadInto.getEmails(true).add(new StringWithCustomTags(ch));\n                        loadInto.setDescription(new StringWithCustomTags(ch));\n                        loadInto.getDescription().setValue(loadInto.getDescription().getValue() + \"\\n\" + ch.getValue());\n                } else {\n",
            "src/main/java/org/gedcom4j/parser/IndividualParser.java": "                        addWarning(\"GEDCOM version is 5.5 but email was specified for individual \" + loadInto.getXref() + \" on line \" + ch.getLineNum()\n                    new IndividualEventParser(gedcomParser, ch, event).parse();\n                    IndividualAttribute a = new IndividualAttribute();\n                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                } else if (Tag.RECORD_ID_NUMBER.equalsText(ch.getTag())) {\n                    new FamilyChildParser(gedcomParser, ch, fc).parse();\n                } else if (Tag.ASSOCIATION.equalsText(ch.getTag())) {\n                } else if (Tag.DESCENDANT_INTEREST.equalsText(ch.getTag())) {\n                } else if (Tag.ANCESTRAL_FILE_NUMBER.equalsText(ch.getTag())) {\n                } else if (Tag.REFERENCE.equalsText(ch.getTag())) {\n                    new UserReferenceParser(gedcomParser, ch, u).parse();\n                }\n        fs.setFamily(f);\n",
            "src/main/java/org/gedcom4j/parser/LdsIndividualOrdinanceParser.java": "                } else if (Tag.PLACE.equalsText(ch.getTag())) {\n                } else if (Tag.TEMPLE.equalsText(ch.getTag())) {\n                } else if (Tag.SOURCE.equalsText(ch.getTag())) {\n                    new CitationListParser(gedcomParser, ch, citations).parse();\n                    List<Note> notes = loadInto.getNotes(true);\n                    new FamilyChildParser(gedcomParser, ch, fc).parse();\n                } else {\n",
            "src/main/java/org/gedcom4j/parser/LdsSpouseSealingParser.java": "                } else if (Tag.STATUS.equalsText(ch.getTag())) {\n                } else if (Tag.TEMPLE.equalsText(ch.getTag())) {\n                } else if (Tag.SOURCE.equalsText(ch.getTag())) {\n                    new CitationListParser(gedcomParser, ch, citations).parse();\n                    unknownTag(ch, loadInto);\n                }\n",
            "src/main/java/org/gedcom4j/parser/LinePieces.java": "    }\n",
            "src/main/java/org/gedcom4j/parser/MultimediaLinkParser.java": "            loadFileReferences(m, stringTree);\n    }\n                    List<Note> notes = m.getNotes(true);\n                } else {\n                }\n        }\n                    if (!g55()) {\n                    }\n                } else {\n",
            "src/main/java/org/gedcom4j/parser/PersonalNameParser.java": "                    loadInto.setNickname(new StringWithCustomTags(ch));\n                    loadInto.setSurnamePrefix(new StringWithCustomTags(ch));\n                    loadInto.setSurname(new StringWithCustomTags(ch));\n                    loadInto.setSuffix(new StringWithCustomTags(ch));\n                    List<AbstractCitation> citations = loadInto.getCitations(true);\n                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                    loadInto.getRomanized(true).add(pnv);\n                    loadPersonalNameVariation(ch, pnv);\n        }\n                    pnv.setSurnamePrefix(new StringWithCustomTags(ch));\n                    pnv.setSurname(new StringWithCustomTags(ch));\n                    pnv.setSuffix(new StringWithCustomTags(ch));\n                    List<AbstractCitation> citations = pnv.getCitations(true);\n                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                    new NoteListParser(gedcomParser, ch, notes).parse();\n                }\n            }\n    }\n",
            "src/main/java/org/gedcom4j/parser/PlaceParser.java": "                    List<Note> notes = loadInto.getNotes(true);\n                    loadInto.setPlaceName(loadInto.getPlaceName() + \"\\n\" + (ch.getValue() == null ? \"\" : ch.getValue()));\n                } else if (Tag.ROMANIZED.equalsText(ch.getTag())) {\n                } else if (Tag.PHONETIC.equalsText(ch.getTag())) {\n                    if (g55()) {\n                } else {\n                }\n",
            "src/main/java/org/gedcom4j/parser/RepositoryParser.java": "                } else if (Tag.PHONE.equalsText(ch.getTag())) {\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                } else if (Tag.FAX.equalsText(ch.getTag())) {\n                    loadInto.getEmails(true).add(new StringWithCustomTags(ch));\n                    new NoteListParser(gedcomParser, ch, notes).parse();\n                } else if (Tag.CHANGED_DATETIME.equalsText(ch.getTag())) {\n                    ChangeDate changeDate = new ChangeDate();\n            }\n",
            "src/main/java/org/gedcom4j/parser/SourceParser.java": "                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                    List<Note> notes = loadInto.getNotes(true);\n                    new NoteListParser(gedcomParser, ch, notes).parse();\n                    List<Multimedia> multimedia = loadInto.getMultimedia(true);\n                    new MultimediaLinkParser(gedcomParser, ch, multimedia).parse();\n                } else if (Tag.REFERENCE.equalsText(ch.getTag())) {\n                    loadInto.getUserReferences(true).add(u);\n                    new UserReferenceParser(gedcomParser, ch, u).parse();\n                } else if (Tag.RECORD_ID_NUMBER.equalsText(ch.getTag())) {\n                } else if (Tag.CHANGED_DATETIME.equalsText(ch.getTag())) {\n                    loadInto.setChangeDate(changeDate);\n                    new ChangeDateParser(gedcomParser, ch, changeDate).parse();\n                } else {\n        }\n    }\n    private RepositoryCitation loadRepositoryCitation(StringTree repo) {\n        }\n        return r;\n    private void loadSourceDataEventRecorded(StringTree dataNode, SourceData sourceData) {\n        EventRecorded e = new EventRecorded();\n        e.setEventType(dataNode.getValue());\n",
            "src/main/java/org/gedcom4j/parser/SourceSystemParser.java": "                } else if (Tag.CORPORATION.equalsText(ch.getTag())) {\n                    loadInto.setCorporation(corporation);\n",
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java": "        numEvictedCumulative += (before - after);\n        if ((before - after) < 2) {\n",
            "src/main/java/org/gedcom4j/parser/StringTreeBuilder.java": "        treeForCurrentLine.setLevel(lp.level);\n",
            "src/main/java/org/gedcom4j/parser/SubmissionParser.java": "                } else if (Tag.FAMILY_FILE.equalsText(ch.getTag())) {\n                    loadInto.setNameOfFamilyFile(new StringWithCustomTags(ch));\n                    loadInto.setTempleCode(new StringWithCustomTags(ch));\n                } else if (Tag.ANCESTORS.equalsText(ch.getTag())) {\n                } else if (Tag.DESCENDANTS.equalsText(ch.getTag())) {\n                    loadInto.setDescendantsCount(new StringWithCustomTags(ch));\n                    loadInto.setOrdinanceProcessFlag(new StringWithCustomTags(ch));\n                } else if (Tag.RECORD_ID_NUMBER.equalsText(ch.getTag())) {\n                } else {\n                    unknownTag(ch, loadInto);\n            }\n        }\n",
            "src/main/java/org/gedcom4j/parser/SubmitterParser.java": "                } else if (Tag.PHONE.equalsText(ch.getTag())) {\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                } else if (Tag.FAX.equalsText(ch.getTag())) {\n                    loadInto.getEmails(true).add(new StringWithCustomTags(ch));\n                } else if (Tag.CHANGED_DATETIME.equalsText(ch.getTag())) {\n                } else if (Tag.RECORD_ID_NUMBER.equalsText(ch.getTag())) {\n                    new NoteListParser(gedcomParser, ch, notes).parse();\n                }\n        }\n    }\n",
            "src/main/java/org/gedcom4j/parser/Tag.java": "    ADDRESS_2(\"ADR2\"),\n",
            "src/main/java/org/gedcom4j/parser/UserReferenceParser.java": "import org.gedcom4j.model.StringWithCustomTags;\n        loadInto.setReferenceNum(new StringWithCustomTags(stringTree.getValue()));\n                    loadInto.setType(new StringWithCustomTags(ch));\n                    unknownTag(ch, loadInto);\n",
            "src/main/java/org/gedcom4j/query/Finder.java": "public class Finder {\n",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "        if (dad != null) {\n                    Individual dadsWife = fs.getFamily().getWife();\n                if (!checkedAlready.contains(fc.getFamily().getWife())) {\n                    checkParent(level, set, fc.getFamily().getWife());\n        }\n                if (mom != null && !checkedAlready.contains(mom)) {\n        }\n                    if (momsHusband != null) {\n                }\n    private void initializeLcaSearch(Individual individual1) {\n        targetList = getExtendedAncestry(individual1);\n        addedAnyCommonAncestors = false;\n    }\n        return false;\n    }\n}\n",
            "src/main/java/org/gedcom4j/relationship/Relationship.java": "    public int compareTo(Relationship other) {\n",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": "                        examineWife(personBeingExamined, fs);\n                    } else if (family.getWife() == personBeingExamined) {\n                        if (lookedAt.contains(family.getHusband())) {\n                        }\n                        examineHusband(personBeingExamined, fs);\n                            if (family.getHusband() == personBeingExamined) { // NOPMD - deliberately using ==, want to\n                                examineChild(personBeingExamined, c, MOTHER);\n                            }\n                        }\n                    }\n                }\n    private void examineChild(Individual personBeingExamined, Individual child, RelationshipName reverseRelationship) {\n        SimpleRelationship r = new SimpleRelationship();\n            r.setName(CHILD);\n            return relationship.reverseForUnknown;\n    private void simplifyRelationship(Relationship relationship) {\n",
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java": "import java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport org.gedcom4j.exception.GedcomValidationException;\nimport org.gedcom4j.model.ChangeDate;\nimport org.gedcom4j.model.UserReference;\nabstract class AbstractValidator {\n    protected GedcomValidator rootValidator;\n        rootValidator.getFindings().add(new GedcomValidationFinding(description, Severity.ERROR, null));\n    protected void addError(String description, Object o) {\n    protected void addInfo(String description) {\n    }\n    }\n    protected void addWarning(String description, Object o) {\n        rootValidator.getFindings().add(new GedcomValidationFinding(description, Severity.WARNING, o));\n    }\n    protected void checkChangeDate(ChangeDate changeDate, Object objectWithChangeDate) {\n            } else {\n        }\n    }\n    protected void checkCustomTags(Object o) {\n        Method customTagsGetter = null;\n        try {\n            customTagsGetter = o.getClass().getMethod(\"getCustomTags\");\n        } catch (@SuppressWarnings(\"unused\") SecurityException unusedAndIgnored) {\n            addError(\"Cannot access getter named 'getCustomTags' on object of type \" + o.getClass().getSimpleName() + \".\", o);\n            return;\n        } catch (@SuppressWarnings(\"unused\") NoSuchMethodException unusedAndIgnored) {\n            addError(\"Cannot find getter named 'getCustomTags' on object of type \" + o.getClass().getSimpleName() + \".\", o);\n            return;\n        }\n        Object fldVal = null;\n        try {\n            fldVal = customTagsGetter.invoke(o);\n        } catch (IllegalArgumentException e) {\n            addError(\"Cannot get value of customTags attribute on object of type \" + o.getClass().getSimpleName() + \" - \" + e.getMessage(), o);\n            return;\n        } catch (IllegalAccessException e) {\n            addError(\"Cannot get value of customTags attribute on object of type \" + o.getClass().getSimpleName() + \" - \" + e.getMessage(), o);\n            return;\n        } catch (InvocationTargetException e) {\n        if (fldVal == null && Options.isCollectionInitializationEnabled()) {\n                    addError(\"Cannot autorepair value of customTags attribute on object of type \" + o.getClass().getSimpleName() + \" - \" + e.getMessage(), o);\n                    return;\n                } catch (IllegalAccessException e) {\n                    return;\n                } catch (InvocationTargetException e) {\n                }\n                rootValidator.addInfo(\"Custom tag collection was null - repaired\", o);\n            } else {\n                rootValidator.addError(\"Custom tag collection is null - must be at least an empty collection\", o);\n            }\n        } else {\n            if (fldVal != null && !(fldVal instanceof List<?>)) {\n                rootValidator.addError(\"Custom tag collection is not a List\", o);\n            }\n        }\n    }\n    }\n    protected void checkOptionalString(StringWithCustomTags optionalString, String fieldDescription, Object objectContainingField) {\n        if (optionalString != null && optionalString.getValue() != null && !isSpecified(optionalString.getValue())) {\n            addError(fieldDescription + \" on \" + objectContainingField.getClass().getSimpleName() + \" is specified, but has a blank value\",\n                    objectContainingField);\n        }\n    protected void checkRequiredString(String requiredString, String fieldDescription, Object objectContainingField) {\n        if (!isSpecified(requiredString)) {\n            addError(fieldDescription + \" on \" + objectContainingField.getClass().getSimpleName() + \" is required, but is either null or blank\",\n                    objectContainingField);\n        }\n    protected void checkRequiredString(StringWithCustomTags requiredString, String fieldDescription, Object objectContainingField) {\n        if (requiredString == null || requiredString.getValue() == null || requiredString.getValue().trim().length() == 0) {\n            addError(fieldDescription + \" on \" + objectContainingField.getClass().getSimpleName() + \" is required, but is either null or blank\",\n                    objectContainingField);\n        }\n        checkStringWithCustomTags(requiredString, fieldDescription);\n    }\n    protected void checkStringList(List<String> stringList, String description, boolean blanksAllowed) {\n        int i = 0;\n                    if (rootValidator.isAutorepairEnabled()) {\n                        addInfo(\"String list (\" + description + \") contains null entry - removed\", stringList);\n                        stringList.remove(i);\n                        continue;\n                    }\n                    addError(\"String list (\" + description + \") contains null entry\", stringList);\n                } else if (!blanksAllowed && !isSpecified(a)) {\n                    if (rootValidator.isAutorepairEnabled()) {\n                        addInfo(\"String list (\" + description + \") contains blank entry where none are allowed - removed\", stringList);\n                        stringList.remove(i);\n                    }\n                    addError(\"String list (\" + description + \") contains blank entry where none are allowed\", stringList);\n                }\n                i++;\n            }\n        }\n    }\n    protected void checkStringTagList(List<StringWithCustomTags> stringList, String description, boolean blanksAllowed) {\n        int i = 0;\n        if (rootValidator.isAutorepairEnabled()) {\n            int dups = new DuplicateEliminator<StringWithCustomTags>(stringList).process();\n        if (stringList != null) {\n            while (i < stringList.size()) {\n                StringWithCustomTags a = stringList.get(i);\n                if (a == null || a.getValue() == null) {\n                    if (rootValidator.isAutorepairEnabled()) {\n                        addInfo(\"String list (\" + description + \") contains null entry - removed\", stringList);\n                        stringList.remove(i);\n                        continue;\n                    }\n                    addError(\"String list (\" + description + \") contains null entry\", stringList);\n                } else if (!blanksAllowed && a.getValue().trim().length() == 0) {\n                    if (rootValidator.isAutorepairEnabled()) {\n                        addInfo(\"String list (\" + description + \") contains blank entry where none are allowed - removed\", stringList);\n                        stringList.remove(i);\n                        continue;\n                    }\n                    addError(\"String list (\" + description + \") contains blank entry where none are allowed\", stringList);\n                }\n                i++;\n            }\n        }\n    }\n    protected void checkUserReferences(List<UserReference> userReferences, Object objectWithUserReferences) {\n        if (userReferences != null) {\n                    checkOptionalString(userReference.getType(), \"reference type\", userReference);\n            }\n        }\n    }\n    protected void checkXref(Object objectContainingXref) {\n        checkXref(objectContainingXref, \"xref\");\n    }\n    protected void checkXref(Object objectContainingXref, String xrefFieldName) {\n        String getterName = \"get\" + xrefFieldName.substring(0, 1).toUpperCase() + xrefFieldName.substring(1);\n            Method xrefGetter = objectContainingXref.getClass().getMethod(getterName);\n            String xref = (String) xrefGetter.invoke(objectContainingXref);\n            checkRequiredString(xref, xrefFieldName, objectContainingXref);\n            if (xref != null) {\n                if (xref.length() < 3) {\n                    addError(\"xref on \" + objectContainingXref.getClass().getSimpleName() + \" is too short to be a valid xref\", objectContainingXref);\n                } else if (xref.charAt(0) != '@') {\n                    addError(\"xref on \" + objectContainingXref.getClass().getSimpleName() + \" is doesn't start with an at-sign (@)\", objectContainingXref);\n                }\n                if (!xref.endsWith(\"@\")) {\n                    addError(\"xref on \" + objectContainingXref.getClass().getSimpleName() + \" is doesn't end with an at-sign (@)\", objectContainingXref);\n                }\n            }\n        } catch (SecurityException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter named \" + getterName\n                    + \" that can be accessed to validate\", e);\n        } catch (ClassCastException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter of the right type named \"\n                    + getterName + \" to validate\", e);\n        } catch (IllegalArgumentException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter named \" + getterName\n                    + \" to validate\", e);\n        } catch (IllegalAccessException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter named \" + getterName\n                    + \" that can be accessed to validate\", e);\n        } catch (InvocationTargetException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter named \" + getterName\n                    + \" to validate\", e);\n        } catch (NoSuchMethodException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter named \" + getterName\n                    + \" to validate\", e);\n        }\n    }\n    protected abstract void validate();\n    private void checkStringWithCustomTags(StringWithCustomTags swct, String fieldDescription) {\n        if (swct == null) {\n            return;\n        }\n        if (swct.getValue() == null || !isSpecified(swct.getValue())) {\n            addError(\"A string with custom tags object (\" + fieldDescription + \") was defined with no value\", swct);\n        }\n        checkCustomTags(swct);\n    private boolean isSpecified(String s) {\n        if (s == null || s.isEmpty()) {\n            return false;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (!Character.isWhitespace(s.charAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/AddressValidator.java": "    private final Address address;\n        checkOptionalString(address.getPostalCode(), \"postal code\", address);\n        checkOptionalString(address.getCountry(), \"country\", address);\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/CitationValidator.java": "import org.gedcom4j.model.AbstractCitation;\n    private final AbstractCitation citation;\n        this.rootValidator = rootValidator;\n    protected void validate() {\n        if (citation == null) {\n            checkOptionalString(c.getEventCited(), \"event type cited from\", c);\n                if (c.getRoleInEvent() != null) {\n            }\n            checkOptionalString(c.getCertainty(), \"certainty/quality\", c);\n        } else if (citation instanceof CitationWithoutSource) {\n            CitationWithoutSource c = (CitationWithoutSource) citation;\n            checkStringList(c.getDescription(), \"description on a citation without a source\", true);\n            List<List<String>> textFromSource = c.getTextFromSource();\n            if (textFromSource == null && Options.isCollectionInitializationEnabled()) {\n                if (rootValidator.isAutorepairEnabled()) {\n                    c.getTextFromSource(true).clear();\n                    addInfo(\"Text from source collection (the list of lists) was null in CitationWithoutSource - autorepaired\", citation);\n                } else {\n                    addError(\"Text from source collection (the list of lists) is null in CitationWithoutSource\", citation);\n                }\n            } else {\n                if (rootValidator.isAutorepairEnabled()) {\n                    int dups = new DuplicateEliminator<List<String>>(textFromSource).process();\n                    if (dups > 0) {\n                        rootValidator.addInfo(dups + \" duplicate texts from source found and removed\", citation);\n                    }\n                }\n                if (textFromSource != null) {\n                    for (List<String> sl : textFromSource) {\n                        if (sl == null) {\n                            checkStringList(sl, \"one of the sublists in the textFromSource collection on a source citation\", true);\n                        }\n                }\n            }\n        } else {\n            throw new IllegalStateException(\"AbstractCitation references must be either CitationWithSource\" + \" instances or CitationWithoutSource instances\");\n        }\n        if (citation.getNotes() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                citation.getNotes(true).clear();\n                addInfo(\"Notes collection was null on \" + citation.getClass().getSimpleName() + \" - autorepaired\");\n            } else {\n                addError(\"Notes collection is null on \" + citation.getClass().getSimpleName());\n            }\n        } else {\n            new NotesValidator(rootValidator, citation, citation.getNotes()).validate();\n        }\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/EventValidator.java": "import org.gedcom4j.model.AbstractCitation;\nimport org.gedcom4j.model.AbstractEvent;\nimport org.gedcom4j.model.Multimedia;\nimport org.gedcom4j.model.StringWithCustomTags;\n    public EventValidator(GedcomValidator rootValidator, AbstractEvent e) {\n        this.rootValidator = rootValidator;\n        this.e = e;\n    }\n            addError(\"Event is null and cannot be validated or autorepaired\");\n            return;\n        }\n        checkOptionalString(e.getAge(), \"age\", e);\n        checkMultimedia();\n        new NotesValidator(rootValidator, e, e.getNotes()).validate();\n        checkPhoneNumbers();\n        checkOptionalString(e.getReligiousAffiliation(), \"religious affiliation\", e);\n        checkOptionalString(e.getRespAgency(), \"responsible agency\", e);\n        checkOptionalString(e.getRestrictionNotice(), \"restriction notice\", e);\n        checkWwwUrls();\n    }\n    private void checkCitations() {\n        List<AbstractCitation> citations = e.getCitations();\n        if (citations == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                rootValidator.addInfo(\"Event had null list of citations - repaired\", e);\n                rootValidator.addError(\"Event has null list of citations\", e);\n            }\n            if (rootValidator.isAutorepairEnabled()) {\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate source citations found and removed\", e);\n                }\n            }\n            if (citations != null) {\n                for (AbstractCitation c : citations) {\n                    new CitationValidator(rootValidator, c).validate();\n                }\n            }\n        }\n    }\n    private void checkEmails() {\n        List<StringWithCustomTags> emails = e.getEmails();\n        if (emails == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                e.getEmails(true).clear();\n                rootValidator.addInfo(\"Event had null list of emails - repaired\", e);\n            } else {\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<StringWithCustomTags>(emails).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate emails found and removed\", e);\n                }\n            }\n            if (emails != null) {\n                for (StringWithCustomTags swct : emails) {\n                    checkRequiredString(swct, \"email\", e);\n                }\n            }\n        }\n    }\n                e.getFaxNumbers(true).clear();\n                rootValidator.addInfo(\"Event had null list of fax numbers - repaired\", e);\n            } else {\n                rootValidator.addError(\"Event has null list of fax numbers\", e);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<StringWithCustomTags>(faxNumbers).process();\n                    rootValidator.addInfo(dups + \" duplicate fax numbers found and removed\", e);\n                }\n            }\n        }\n    }\n        List<Multimedia> multimedia = e.getMultimedia();\n        if (multimedia == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                rootValidator.addInfo(\"Event had null list of multimedia - repaired\", e);\n            } else {\n                rootValidator.addError(\"Event has null list of multimedia\", e);\n            }\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n",
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java": "        checkChangeDate(f.getChangeDate(), f);\n        checkChildren();\n            new IndividualValidator(rootValidator, f.getHusband()).validate();\n            new IndividualValidator(rootValidator, f.getWife()).validate();\n        }\n        new NotesValidator(rootValidator, f, f.getNotes()).validate();\n        checkSubmitters();\n    private void checkChildren() {\n        List<Individual> children = f.getChildren();\n        if (children == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                f.getChildren(true).clear();\n                rootValidator.addInfo(\"Family's collection of children was null - repaired\", f);\n            } else {\n                rootValidator.addError(\"Family's collection of children is null\", f);\n            if (children != null) {\n                for (Individual i : children) {\n                    if (i == null) {\n                        rootValidator.addError(\"Family with xref '\" + f.getXref() + \"' has a null entry in children collection\", f);\n                    }\n                }\n            }\n        }\n    }\n            if (rootValidator.isAutorepairEnabled()) {\n                addInfo(\"citations collection for family was null - rootValidator.autorepaired\", f);\n            } else {\n                addError(\"citations collection for family is null\", f);\n            }\n        } else {\n                    new CitationValidator(rootValidator, c).validate();\n                }\n            }\n        }\n    }\n    private void checkLdsSpouseSealings() {\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<LdsSpouseSealing>(ldsSpouseSealings).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate LDS spouse sealings found and removed\", f);\n                }\n            }\n            if (ldsSpouseSealings != null) {\n",
            "src/main/java/org/gedcom4j/validate/HeaderValidator.java": "class HeaderValidator extends AbstractValidator {\n    public HeaderValidator(GedcomValidator gedcomValidator, Header header) {\n            if (rootValidator.isAutorepairEnabled()) {\n                header.getCopyrightData(true).clear();\n        checkOptionalString(header.getFileName(), \"filename\", header);\n        if (header.getGedcomVersion() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                header.setGedcomVersion(new GedcomVersion());\n            }\n        }\n        if (header.getGedcomVersion().getVersionNumber() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                header.getGedcomVersion().setVersionNumber(SupportedVersion.V5_5_1);\n                rootValidator.addInfo(\"GEDCOM version number in header was null - repaired\", header);\n                rootValidator.addError(\"GEDCOM version number in header must be specified\", header);\n                return;\n        if (header.getSubmitter() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                if (rootValidator.gedcom.getSubmitters() == null || rootValidator.gedcom.getSubmitters().isEmpty()) {\n                } else {\n                rootValidator.addError(\"Submitter not specified in header\", header);\n            }\n            return;\n        }\n        new SubmitterValidator(rootValidator, header.getSubmitter()).validate();\n        if (header.getSubmission() != null) {\n    private void checkCharacterSet() {\n        if (header.getCharacterSet() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                header.setCharacterSet(new CharacterSet());\n                rootValidator.addInfo(\"Header did not have a character set defined - corrected.\", header);\n            } else {\n                rootValidator.addError(\"Header has no character set defined\", header);\n                return;\n            }\n        }\n        if (header.getCharacterSet().getCharacterSetName() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                header.getCharacterSet().setCharacterSetName(new StringWithCustomTags(\"ANSEL\"));\n                rootValidator.addInfo(\"Character set name was not defined\", header.getCharacterSet());\n            } else {\n                rootValidator.addError(\"Character set name was not defined\", header.getCharacterSet());\n                return;\n            }\n        }\n        if (!Encoding.isValidCharacterSetName(header.getCharacterSet().getCharacterSetName().getValue())) {\n            rootValidator.addError(\"Character set name is not one of the supported encodings (\" + Encoding.getSupportedCharacterSetNames() + \")\", header\n                    .getCharacterSet().getCharacterSetName());\n        }\n        checkOptionalString(header.getCharacterSet().getCharacterSetName(), \"character set name\", header.getCharacterSet());\n        checkOptionalString(header.getCharacterSet().getVersionNum(), \"character set version number\", header.getCharacterSet());\n        checkCustomTags(header.getCharacterSet());\n                ss = new SourceSystem();\n                header.setSourceSystem(ss);\n                rootValidator.addInfo(\"No source system specified in header - repaired\", header);\n                return;\n            Corporation c = ss.getCorporation();\n                new AddressValidator(rootValidator, c.getAddress()).validate();\n            if (c.getBusinessName() == null || c.getBusinessName().trim().length() == 0) {\n                    c.setBusinessName(\"UNSPECIFIED\");\n                    rootValidator.addInfo(\"Corporation for source system exists but had no name - repaired\", c);\n                } else {\n                    rootValidator.addError(\"Corporation for source system exists but has no name\", c);\n            }\n            HeaderSourceData sd = ss.getSourceData();\n                    rootValidator.addInfo(\"Source data was specified for source system, \" + \"but name of source data was not specified - repaired\", sd);\n                } else {\n                    rootValidator.addError(\"Source data is specified for source system, \" + \"but name of source data is not specified\", sd);\n            checkOptionalString(sd.getPublishDate(), \"publish date\", sd);\n            checkCustomTags(sd);\n        }\n                ss.setSystemId(\"UNSPECIFIED\");\n                rootValidator.addInfo(\"System ID was not specified in source system in header - repaired\", ss);\n            } else {\n            }\n        }\n        checkOptionalString(ss.getVersionNum(), \"source system version number\", ss);\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java": "import org.gedcom4j.model.*;\nclass IndividualValidator extends AbstractValidator {\n            addError(\"Individual is null\");\n        if (names == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate names found and removed\", individual);\n            }\n            if (names != null) {\n                for (PersonalName pn : names) {\n                    new PersonalNameValidator(rootValidator, pn).validate();\n                }\n            }\n            if (dups > 0) {\n                rootValidator.addInfo(dups + \" duplicate families (where individual was a child) found and removed\", individual);\n            }\n        }\n        if (rootValidator.isAutorepairEnabled()) {\n            int dups = new DuplicateEliminator<FamilySpouse>(individual.getFamiliesWhereSpouse()).process();\n            }\n        }\n        checkAliases();\n        checkAssociations();\n        checkCitations();\n        checkIndividualEvents();\n    }\n            if (rootValidator.isAutorepairEnabled()) {\n                individual.getAliases(true).clear();\n    }\n            }\n        } else {\n            if (individual.getAssociations() != null) {\n                for (Association a : individual.getAssociations()) {\n                    if (a == null) {\n                        addError(\"associations collection for individual contains null entry\", individual);\n                    } else {\n    private void checkCitations() {\n        if (individual.getCitations() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n        } else {\n                for (AbstractCitation c : individual.getCitations()) {\n                    new CitationValidator(rootValidator, c).validate();\n                }\n            }\n        }\n    }\n            if (rootValidator.isAutorepairEnabled()) {\n                addInfo(\"attributes collection for individual was null - rootValidator.autorepaired\", individual);\n            } else {\n                addError(\"attributes collection for individual is null\", individual);\n            }\n        } else {\n            if (individual.getAttributes() != null) {\n                for (IndividualAttribute a : individual.getAttributes()) {\n    private void checkIndividualEvents() {\n                individual.getEvents(true).clear();\n                addInfo(\"events collection for individual was null - rootValidator.autorepaired\", individual);\n            } else {\n                addError(\"events collection for individual is null\", individual);\n",
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java": "class LdsSpouseSealingValidator extends AbstractValidator {\n        this.s = s;\n    }\n            return;\n        }\n        List<AbstractCitation> citations = s.getCitations();\n        if (Options.isCollectionInitializationEnabled() && citations == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                s.getCitations(true).clear();\n                addInfo(\"citations collection for lds spouse sealing was null - rootValidator.autorepaired\", s);\n            } else {\n            }\n            if (rootValidator.isAutorepairEnabled()) {\n",
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java": "import org.gedcom4j.Options;\n            throw new GedcomValidationException(\"Root validator passed in to MultimediaValidator constructor was null\");\n            if (rootValidator.isAutorepairEnabled()) {\n                gedcomVersion = SupportedVersion.V5_5_1;\n                rootValidator.addInfo(\"Was not able to determine GEDCOM version - assuming 5.5.1\", rootValidator.gedcom);\n            } else {\n        } else {\n            gedcomVersion = rootValidator.gedcom.getHeader().getGedcomVersion().getVersionNumber();\n        }\n    }\n    protected void validate() {\n        } else {\n            validate55();\n        }\n    }\n    private void checkUserReferences() {\n        List<UserReference> userReferences = mm.getUserReferences();\n        if (Options.isCollectionInitializationEnabled() && userReferences == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n        }\n        if (rootValidator.isAutorepairEnabled()) {\n            int dups = new DuplicateEliminator<UserReference>(userReferences).process();\n                rootValidator.addInfo(dups + \" duplicate user references found and removed\", mm);\n            }\n        }\n        if (userReferences != null) {\n            for (UserReference u : userReferences) {\n                checkCustomTags(u);\n                if (u.getReferenceNum() == null) {\n            }\n            } else {\n                addError(\"Multimedia object must have xref\", mm);\n        if (rootValidator.gedcom.getMultimedia().get(mm.getXref()) != mm) {\n            if (rootValidator.isAutorepairEnabled()) {\n                rootValidator.gedcom.getMultimedia().put(mm.getXref(), mm);\n    private boolean v551() {\n        if (mm.getBlob() == null || mm.getBlob().isEmpty()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                addError(\"Embedded media object has an empty blob object - cannot repair\", mm);\n            } else {\n                addError(\"Embedded media object has an empty blob object\", mm);\n        if (mm.getCitations() != null && !mm.getCitations().isEmpty()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                mm.getCitations(true).clear();\n                rootValidator.addInfo(\"Citations collection was populated, but not allowed in \" + \"v5.5 of gedcom - repaired (cleared)\", mm);\n            } else {\n    }\n            if (rootValidator.isAutorepairEnabled()) {\n            } else {\n                rootValidator.addError(\"Multimedia object does not have list of file references\", mm);\n                return;\n            }\n        if (mm.getFileReferences() != null) {\n            for (FileReference fr : mm.getFileReferences()) {\n",
            "src/main/java/org/gedcom4j/validate/NameVariationValidator.java": "    protected AbstractNameVariation nv;\n    public NameVariationValidator(GedcomValidator rootValidator, AbstractNameVariation nv) {\n        this.rootValidator = rootValidator;\n        checkRequiredString(nv.getVariation(), \"variation on a personal name\", nv);\n        checkOptionalString(nv.getVariationType(), \"type of variation on a personal name\", nv);\n",
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java": "class PersonalNameValidator extends AbstractValidator {\n    public PersonalNameValidator(GedcomValidator rootValidator, PersonalName pn) {\n        this.rootValidator = rootValidator;\n        if (pn == null) {\n            addError(\"Personal name was null - cannot validate\");\n            return;\n        }\n        checkRequiredString(pn.getBasic(), \"basic name\", pn);\n        if (pn.getCitations() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                pn.getCitations(true).clear();\n                addInfo(\"citations collection for personal name was null - autorepaired\", pn);\n            } else {\n            }\n        }\n            for (AbstractCitation c : pn.getCitations()) {\n        }\n        checkOptionalString(pn.getGivenName(), \"given name\", pn);\n        checkOptionalString(pn.getNickname(), \"nickname\", pn);\n        checkOptionalString(pn.getPrefix(), \"prefix\", pn);\n        checkOptionalString(pn.getSuffix(), \"suffix\", pn);\n        checkOptionalString(pn.getSurname(), \"surname\", pn);\n        checkOptionalString(pn.getSurnamePrefix(), \"surname prefix\", pn);\n        new NotesValidator(rootValidator, pn, pn.getNotes()).validate();\n        List<PersonalNameVariation> phonetic = pn.getPhonetic();\n        if (phonetic == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                pn.getPhonetic(true).clear();\n                rootValidator.addInfo(\"PersonalNameValidator had null list of phonetic name variations - repaired\", pn);\n            } else {\n                rootValidator.addError(\"PersonalNamevalidator has null list of phonetic name variations\", pn);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<PersonalNameVariation>(phonetic).process();\n                if (dups > 0) {\n            if (phonetic != null) {\n                for (AbstractNameVariation nv : phonetic) {\n                    PersonalNameVariation pnv = (PersonalNameVariation) nv;\n                    new PersonalNameVariationValidator(rootValidator, pnv).validate();\n                }\n            }\n        }\n        List<PersonalNameVariation> romanized = pn.getRomanized();\n        if (romanized == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                pn.getRomanized(true).clear();\n                rootValidator.addInfo(\"Event had null list of romanized name variations - repaired\", pn);\n            } else {\n                rootValidator.addError(\"Event has null list of romanized name variations\", pn);\n            }\n        } else {\n",
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java": "class PersonalNameVariationValidator extends NameVariationValidator {\n    }\n        }\n        PersonalNameVariation pnv = (PersonalNameVariation) nv;\n        List<AbstractCitation> citations = pnv.getCitations();\n        if (citations == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                pnv.getCitations(true).clear();\n                addInfo(\"citations collection for personal name was null - autorepaired\", pnv);\n            } else {\n            }\n",
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java": "class PlaceValidator extends AbstractValidator {\n        this.rootValidator = rootValidator;\n        this.place = place;\n        if (place.getCitations() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                rootValidator.addInfo(\"Event had null list of citations - repaired\", place);\n            } else {\n                rootValidator.addError(\"Event has null list of citations\", place);\n            }\n        if (place.getCitations() != null) {\n            }\n        }\n        checkCustomTags(place);\n        checkOptionalString(place.getLatitude(), \"latitude\", place);\n        checkOptionalString(place.getLongitude(), \"longitude\", place);\n        new NotesValidator(rootValidator, place, place.getNotes()).validate();\n        checkOptionalString(place.getPlaceFormat(), \"place format\", place);\n        if (place.getPlaceName() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                addError(\"Place name was unspecified and cannot be repaired\");\n                addError(\"Place name was unspecified\");\n            }\n        }\n        if (phonetic == null && Options.isCollectionInitializationEnabled()) {\n                place.getPhonetic(true).clear();\n                rootValidator.addInfo(\"Event had null list of phonetic name variations - repaired\", place);\n            } else {\n                rootValidator.addError(\"Event has null list of phonetic name variations\", place);\n            }\n        }\n        if (phonetic != null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<AbstractNameVariation>(phonetic).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate phonetic variations found and removed\", place);\n                }\n",
            "src/main/java/org/gedcom4j/validate/RepositoryValidator.java": "    private final Repository repository;\n    public RepositoryValidator(GedcomValidator gedcomValidator, Repository repository) {\n        rootValidator = gedcomValidator;\n    @Override\n    protected void validate() {\n        checkUserReferences(repository.getUserReferences(), repository);\n        checkOptionalString(repository.getRecIdNumber(), \"automated record id\", repository);\n        new NotesValidator(rootValidator, repository, repository.getNotes()).validate();\n        Address a = repository.getAddress();\n        if (a != null) {\n            new AddressValidator(rootValidator, a).validate();\n}\n",
            "src/main/java/org/gedcom4j/validate/SourceValidator.java": "import org.gedcom4j.model.*;\nclass SourceValidator extends AbstractValidator {\n        if (source == null) {\n            addError(\"Source is null and cannot be validated\");\n            List<EventRecorded> eventsRecorded = sd.getEventsRecorded();\n                    addInfo(\"Collection of recorded events in source data structure was null - autorepaired\", sd);\n                } else {\n            } else {\n                if (rootValidator.isAutorepairEnabled()) {\n                    if (dups > 0) {\n                        rootValidator.addInfo(dups + \" duplicate recorded events found and removed\", sd);\n                for (EventRecorded er : eventsRecorded) {\n                    checkOptionalString(er.getDatePeriod(), \"date period\", er);\n            }\n        }\n        List<Multimedia> multimedia = source.getMultimedia();\n        if (multimedia == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                source.getMultimedia(true).clear();\n                addInfo(\"Multimedia collection on source was null - autorepaired\", source);\n            addError(\"Multimedia collection on source is null\", source);\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate multimedia found and removed\", source);\n                }\n            }\n            if (multimedia != null) {\n        }\n        new NotesValidator(rootValidator, source, source.getNotes()).validate();\n            checkRequiredString(c.getRepositoryXref(), \"repository xref\", c);\n            checkCallNumbers(c);\n        }\n    }\n    private void checkCallNumbers(RepositoryCitation citation) {\n",
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java": "import org.gedcom4j.Options;\nimport org.gedcom4j.model.Submitter;\n    private final Submitter submitter;\n        this.rootValidator = rootValidator;\n    protected void validate() {\n        if (submitter == null) {\n        if (submitter.getAddress() != null) {\n            new AddressValidator(rootValidator, submitter.getAddress()).validate();\n        new NotesValidator(rootValidator, submitter, submitter.getNotes()).validate();\n    }\n            }\n        }\n        if (submitter.getLanguagePref(Options.isCollectionInitializationEnabled()) != null) {\n                addError(\"Submitter exceeds limit on language preferences (3)\", submitter);\n            }\n            for (StringWithCustomTags s : languagePref) {\n                checkRequiredString(s, \"language pref\", submitter);\n            }\n        }\n    }\n}\n",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java": "import org.gedcom4j.model.StringTree;\nimport org.gedcom4j.model.StringWithCustomTags;\nimport org.gedcom4j.model.SupportedVersion;\nimport sun.security.krb5.internal.ccache.Tag;\n    protected void emitLinesOfText(int level, String xref, String startingTag, List<String> linesOfText) {\n        List<String> splitLinesOfText = splitLinesOnBreakingCharacters(linesOfText);\n        int lineNum = 0;\n        for (String l : splitLinesOfText) {\n            StringBuilder line = new StringBuilder();\n            if (lineNum == 0) {\n                line.append(level).append(\" \");\n                if (xref != null && xref.length() > 0) {\n                    line.append(xref).append(\" \");\n                }\n                line.append(startingTag).append(\" \").append(l);\n            } else {\n            boolean first = true;\n            for (String v : valueLines) {\n                if (first) {\n                    line.append(level);\n        boolean first = true;\n            } else {\n    void emitCustomTags(int level, List<StringTree> customTags) {\n        if (customTags != null) {\n            for (StringTree st : customTags) {\n                StringBuilder line = new StringBuilder(Integer.toString(level));\n                line.append(\" \");\n                if (st.getId() != null && st.getId().trim().length() > 0) {\n                    line.append(st.getId()).append(\" \");\n                }\n                line.append(st.getTag());\n                if (st.getValue() != null && st.getValue().trim().length() > 0) {\n                    line.append(\" \").append(st.getValue());\n                }\n        }\n    List<String> splitLinesOnBreakingCharacters(List<String> linesOfText) {\n        List<String> result = new ArrayList<String>();\n        if (linesOfText != null) {\n            for (String s : linesOfText) {\n                String[] pieces = s.split(\"(\\r\\n|\\n\\r|\\r|\\n)\");\n                for (String piece : pieces) {\n            }\n        }\n    }\n    private void emitAndSplit(int level, String line) {\n        if (line.length() <= MAX_LINE_LENGTH) {\n            baseWriter.lines.add(line);\n        } else {\n    private void emitTagWithRequiredValue(int level, String xref, String tag, StringWithCustomTags e) throws GedcomWriterException {\n        temp.add(e.getValue());\n        boolean first = true;\n        emitCustomTags(level + 1, e.getCustomTags());\n",
            "src/main/java/org/gedcom4j/writer/AddressEmitter.java": "        emitTagIfValueNotNull(startLevel + 1, \"CITY\", writeFrom.getCity());\n    }\n",
            "src/main/java/org/gedcom4j/writer/ChangeDateEmitter.java": "    }\n",
            "src/main/java/org/gedcom4j/writer/EventEmitter.java": "        new SourceCitationEmitter(baseWriter, startLevel, writeFrom.getCitations()).emit();\n        new NotesEmitter(baseWriter, startLevel, writeFrom.getNotes()).emit();\n        emitCustomTags(startLevel, writeFrom.getCustomTags());\n",
            "src/main/java/org/gedcom4j/writer/FamilyEmitter.java": "                for (Individual i : f.getChildren()) {\n                    emitTagWithRequiredValue(1, \"CHIL\", i.getXref());\n                }\n            }\n            if (f.getSubmitters() != null) {\n                for (Submitter s : f.getSubmitters()) {\n                    emitTagWithRequiredValue(1, \"SUBM\", s.getXref());\n                }\n                for (LdsSpouseSealing s : f.getLdsSpouseSealings()) {\n                    emitLdsFamilyOrdinance(1, s);\n                }\n            }\n            emitTagIfValueNotNull(1, \"RESN\", f.getRestrictionNotice());\n            new MultimediaLinksEmitter(baseWriter, 1, f.getMultimedia()).emit();\n            new NotesEmitter(baseWriter, 1, f.getNotes()).emit();\n                }\n            }\n            emitTag(level + 1, \"HUSB\");\n",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": "    private int constructionNotificationRate = 500;\n        super(null, 0, gedcom);\n    }\n    public LineTerminator getLineTerminator() {\n        return lineTerminator;\n                }\n                i++;\n            }\n        }\n    }\n        if (fileNotificationRate < 1) {\n            throw new IllegalArgumentException(\"File Notification Rate must be at least 1\");\n    public void unregisterFileObserver(FileProgressListener observer) {\n        int i = 0;\n        while (i < fileObservers.size()) {\n            WeakReference<FileProgressListener> observerRef = fileObservers.get(i);\n            if (observerRef == null || observerRef.get() == observer) {\n                fileObservers.remove(observerRef);\n            } else {\n                i++;\n            }\n        }\n    }\n    @Override\n    void emitCustomTags(int level, List<StringTree> customTags) {\n        if (customTags != null) {\n            for (StringTree st : customTags) {\n                StringBuilder line = new StringBuilder(Integer.toString(level));\n                line.append(\" \");\n                }\n                line.append(st.getTag());\n                if (st.getValue() != null && st.getValue().trim().length() > 0) {\n        if ((lines.size() - lastLineCountNotified) > constructionNotificationRate) {\n",
            "src/main/java/org/gedcom4j/writer/HeaderEmitter.java": "        if (header.getSubmitter() != null) {\n            emitTagWithRequiredValue(1, \"SUBM\", header.getSubmitter().getXref());\n        }\n            emitTagWithRequiredValue(1, \"SUBN\", header.getSubmission().getXref());\n        }\n        emitTagIfValueNotNull(1, \"FILE\", header.getFileName());\n        emitTag(1, \"GEDC\");\n        emitTagWithRequiredValue(2, \"FORM\", header.getGedcomVersion().getGedcomForm());\n        emitTagIfValueNotNull(2, \"VERS\", header.getCharacterSet().getVersionNum());\n            emitTag(1, \"PLAC\");\n            emitTagWithRequiredValue(2, \"FORM\", header.getPlaceHierarchy());\n        new NotesEmitter(baseWriter, 1, header.getNotes()).emit();\n        emitCustomTags(1, header.getCustomTags());\n        }\n        emitCustomTags(1, sourceSystem.getCustomTags());\n    }\n}\n",
            "src/main/java/org/gedcom4j/writer/IndividualEmitter.java": "            new SourceCitationEmitter(baseWriter, 1, i.getCitations()).emit();\n        }\n    }\n                new NotesEmitter(baseWriter, level + 1, o.getNotes()).emit();\n    private void emitPersonalNames(int level, List<PersonalName> names) throws GedcomWriterException {\n        if (names != null) {\n                new SourceCitationEmitter(baseWriter, level + 1, n.getCitations()).emit();\n    private void emitPersonalNameVariation(int level, String variationTag, PersonalNameVariation pnv) throws GedcomWriterException {\n            for (FamilySpouse familySpouse : i.getFamiliesWhereSpouse()) {\n                if (familySpouse == null) {\n                    throw new GedcomWriterException(\"Family in which \" + i + \" was a spouse was null\");\n",
            "src/main/java/org/gedcom4j/writer/Multimedia551Emitter.java": "            }\n            emitCustomTags(1, m.getCustomTags());\n            if (m.getBlob() != null && !m.getBlob().isEmpty()) {\n                        + \" was found.  This is only allowed in GEDCOM 5.5\");\n",
            "src/main/java/org/gedcom4j/writer/Multimedia55Emitter.java": "            new NotesEmitter(baseWriter, 1, m.getNotes()).emit();\n            if (m.getContinuedObject() != null && m.getContinuedObject().getXref() != null) {\n                emitTagWithRequiredValue(1, \"OBJE\", m.getContinuedObject().getXref());\n            }\n    }\n",
            "src/main/java/org/gedcom4j/writer/MultimediaLinksEmitter.java": "        super(baseWriter, startLevel, writeFrom);\n    }\n                if (g55()) {\n                    emitTag(startLevel, \"OBJE\");\n                    if (m.getFileReferences().size() > 1) {\n                        throw new GedcomWriterVersionDataMismatchException(\"GEDCOM version is 5.5, but multimedia link references \"\n                                + \"multiple files, which is only allowed in GEDCOM 5.5.1\");\n                    }\n                        FileReference fr = m.getFileReferences().get(0);\n                        if (fr.getFormat() == null) {\n                    if (!m.getNotes().isEmpty()) {\n            emitCustomTags(startLevel + 1, m.getCustomTags());\n",
            "src/main/java/org/gedcom4j/writer/PlaceEmitter.java": "        new SourceCitationEmitter(baseWriter, startLevel + 1, writeFrom.getCitations()).emit();\n        new NotesEmitter(baseWriter, startLevel + 1, writeFrom.getNotes()).emit();\n}\n",
            "src/main/java/org/gedcom4j/writer/RepositoryEmitter.java": "            new NotesEmitter(baseWriter, 1, r.getNotes()).emit();\n            emitStringsWithCustomTags(1, r.getPhoneNumbers(), \"PHON\");\n            emitStringsWithCustomTags(1, r.getWwwUrls(), \"WWW\");\n            emitStringsWithCustomTags(1, r.getFaxNumbers(), \"FAX\");\n            emitStringsWithCustomTags(1, r.getEmails(), \"EMAIL\");\n            emitCustomTags(1, r.getCustomTags());\n",
            "src/main/java/org/gedcom4j/writer/SourceEmitter.java": "                new NotesEmitter(baseWriter, 2, d.getNotes()).emit();\n            }\n            emitLinesOfText(1, \"AUTH\", s.getOriginatorsAuthors());\n            emitLinesOfText(1, \"PUBL\", s.getPublicationFacts());\n            new MultimediaLinksEmitter(baseWriter, 1, s.getMultimedia()).emit();\n            new NotesEmitter(baseWriter, 1, s.getNotes()).emit();\n            emitCustomTags(1, s.getCustomTags());\n",
            "src/main/java/org/gedcom4j/writer/SubmittersEmitter.java": "import org.gedcom4j.model.StringWithCustomTags;\n                for (StringWithCustomTags l : s.getLanguagePref()) {\n            emitStringsWithCustomTags(1, s.getPhoneNumbers(), \"PHON\");\n            emitStringsWithCustomTags(1, s.getWwwUrls(), \"WWW\");\n            emitStringsWithCustomTags(1, s.getFaxNumbers(), \"FAX\");\n            emitStringsWithCustomTags(1, s.getEmails(), \"EMAIL\");\n            emitCustomTags(1, s.getCustomTags());\n",
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java": "import org.gedcom4j.exception.UnsupportedGedcomCharsetException;\n        byte[] unicodeData = { 0x00, 0x30, 0x00, 0x20, 0x00, 0x48, 0x00, 0x45, 0x00, 0x41, 0x00, 0x44, 0x00, 0x0d, 0x00, 0x31, 0x00, 0x20, 0x00, 0x43, 0x00,\n                0x48, 0x00, 0x41, 0x00, 0x52 };\n        BufferedInputStream s = null;\n        try {\n            s = new BufferedInputStream(new ByteArrayInputStream(unicodeData));\n            GedcomFileReader gr = new GedcomFileReader(new GedcomParser(), s);\n            ;\n            List<String> lines = getLines(gr);\n            assertNotNull(lines);\n            assertFalse(lines.isEmpty());\n            assertEquals(2, lines.size());\n            assertEquals(\"0 HEAD\", lines.get(0));\n            assertEquals(\"1 CHAR\", lines.get(1));\n        } finally {\n            if (s != null) {\n",
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java": "import org.junit.Test;\n                + \"Son oncle ( une tante en r\\u00E9alit\\u00E9 Agueda), allait\\u00E9 avec elle, est d\\u00E9c\\u00E9d\\u00E9 ( voir acte). \"\n                + \"Elle croyait qu'il \\u00E9tait mort \\u00E0 cause d'elle, en lui prenant son lait. \"\n",
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java": "import org.gedcom4j.model.Note;\n            assertEquals(1, gp.getWarnings().size());\n",
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java": "import org.gedcom4j.parser.GedcomParser;\nimport org.gedcom4j.writer.GedcomWriter;\n        } catch (GedcomWriterException e) {\n            if (!gw.getValidationFindings().isEmpty()) {\n                System.out.println(this.getClass().getName() + \" found \" + gw.getValidationFindings().size()\n                        + \" validation findings:\");\n                for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                    System.out.println(f);\n            }\n",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": "import org.gedcom4j.model.Submission;\nimport org.gedcom4j.writer.GedcomWriter;\n",
            "src/test/java/org/gedcom4j/model/AssociationTest.java": "        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java": "        assertFalse(\"objects are not equal, so equals() should not return true\", cs1.equals(cs2));\n        assertEquals(\"objects are equal again, so equals() should return true\", cs1, cs2);\n        assertFalse(\"objects are not equal, so hashcodes should not match\", cs1.hashCode() == cs2.hashCode());\n        assertEquals(\"objects are equal again, so hashcodes should match\", cs1.hashCode(), cs2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/CitationDataTest.java": "        } else {\n        } else {\n        if (Options.isCollectionInitializationEnabled()) {\n        } else {\n        if (Options.isCollectionInitializationEnabled()) {\n        } else {\n        } else {\n        } else {\n        if (Options.isCollectionInitializationEnabled()) {\n        } else {\n        if (Options.isCollectionInitializationEnabled()) {\n        } else {\n        assertEquals(\"CitationData [entryDate=Frying Pan, sourceText=[[]], ]\", c1.toString());\n    }\n        c1.setEntryDate(new StringWithCustomTags(\"Frying Pan\"));\n        assertEquals(\"CitationData [entryDate=Frying Pan, sourceText=[[]], ]\", c1.toString());\n    }\n",
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java": "import org.junit.Test;\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n        assertFalse(e1.hashCode() == e2.hashCode());\n        assertTrue(e1.hashCode() == e2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/FamilyTest.java": "        family1.setHusband(new Individual());\n        family1.getHusband().getNames(true).add(hn1);\n        family1.getHusband().getFamiliesWhereSpouse(true).add(fs1);\n        family1.setWife(new Individual());\n        family1.getWife().getNames(true).add(wn1);\n        family1.getWife().getFamiliesWhereSpouse(true).add(fs1);\n        family2.setHusband(new Individual());\n        family2.getHusband().getNames(true).add(hn2);\n        family2.getHusband().getFamiliesWhereSpouse(true).add(fs2);\n        family2.setWife(new Individual());\n        family2.getWife().getNames(true).add(wn2);\n        family2.getWife().getFamiliesWhereSpouse(true).add(fs2);\n    }\n",
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java": "        assertFalse(\"objects are not equal, so equals() should not return true\", gv1.equals(gv2));\n        assertEquals(\"objects are equal again, so equals() should return true\", gv1, gv2);\n        assertFalse(\"objects are not equal, so hashcodes should not equal\", gv1.hashCode() == gv2.hashCode());\n        assertEquals(\"objects are equal again, so hashcodes should equal\", gv1.hashCode(), gv2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java": "        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java": "import org.junit.Test;\n        i2.age = new StringWithCustomTags(\"One\");\n        i2.cause = new StringWithCustomTags(\"Two\");\n        i2.getCustomTags(true).add(new StringTree());\n        i2.date = new StringWithCustomTags(\"Three\");\n        i2.description = new StringWithCustomTags(\"Four\");\n        i2.getEmails(true).add(new StringWithCustomTags(\"Five\"));\n        i2.getFaxNumbers(true).add(new StringWithCustomTags(\"Six\"));\n        i2.getMultimedia(true).add(new Multimedia());\n        i2.getNotes(true).add(new Note());\n        i2.getPhoneNumbers(true).add(new StringWithCustomTags(\"Seven\"));\n        i2.religiousAffiliation = new StringWithCustomTags(\"Eight\");\n        i2.respAgency = new StringWithCustomTags(\"Nine\");\n        i2.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i2.subType = new StringWithCustomTags(\"Eleven\");\n        i2.getWwwUrls(true).add(new StringWithCustomTags(\"Twelve\"));\n        i2.yNull = \"Thirteen\";\n        i2.age = new StringWithCustomTags(\"One\");\n        i2.cause = new StringWithCustomTags(\"Two\");\n        i2.getCustomTags(true).add(new StringTree());\n        i2.date = new StringWithCustomTags(\"Three\");\n        i2.description = new StringWithCustomTags(\"Four\");\n        i2.getEmails(true).add(new StringWithCustomTags(\"Five\"));\n        i2.getFaxNumbers(true).add(new StringWithCustomTags(\"Six\"));\n        i2.getMultimedia(true).add(new Multimedia());\n        i2.getNotes(true).add(new Note());\n        i2.getPhoneNumbers(true).add(new StringWithCustomTags(\"Seven\"));\n        i2.religiousAffiliation = new StringWithCustomTags(\"Eight\");\n        i2.respAgency = new StringWithCustomTags(\"Nine\");\n        i2.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i2.subType = new StringWithCustomTags(\"Eleven\");\n        i2.getWwwUrls(true).add(new StringWithCustomTags(\"Twelve\"));\n        i2.yNull = \"Thirteen\";\n        i.getCitations(true).add(new CitationWithoutSource());\n        i.getCustomTags(true).add(new StringTree());\n        i.description = new StringWithCustomTags(\"Four\");\n        i.getEmails(true).add(new StringWithCustomTags(\"Five\"));\n        i.getFaxNumbers(true).add(new StringWithCustomTags(\"Six\"));\n        i.getMultimedia(true).add(new Multimedia());\n        i.getNotes(true).add(new Note());\n        i.getPhoneNumbers(true).add(new StringWithCustomTags(\"Seven\"));\n        i.place = new Place();\n        i.religiousAffiliation = new StringWithCustomTags(\"Eight\");\n        i.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i.subType = new StringWithCustomTags(\"Eleven\");\n        i.setType(IndividualAttributeType.FACT);\n        i.getWwwUrls(true).add(new StringWithCustomTags(\"Twelve\"));\n        assertEquals(\"IndividualAttribute [type=Fact, address=Address [], age=One, cause=Two, citations=[CitationWithoutSource []], \"\n                + \"date=Three, description=Four, emails=[Five], faxNumbers=[Six], multimedia=[Multimedia []], notes=[Note []], \"\n                + \"phoneNumbers=[Seven], place=Place [], religiousAffiliation=Eight, respAgency=Nine, restrictionNotice=Ten, \"\n                + \"subType=Eleven, wwwUrls=[Twelve], yNull=Thirteen, customTags=[Line 0: 0 (null tag) (null value)]]\", i.toString());\n    }\n}\n",
            "src/test/java/org/gedcom4j/model/IndividualTest.java": "import org.gedcom4j.parser.GedcomParser;\nimport org.gedcom4j.query.Finder;\n    @Test\n    public void testEqualsObject() {\n        Individual i1 = new Individual();\n        Individual i2 = new Individual();\n        assertTrue(i1.equals(i2));\n        i1.setAddress(new Address());\n        assertFalse(i1.equals(i2));\n        i2.setAddress(new Address());\n        assertTrue(i1.equals(i2));\n    }\n    @Test\n    public void testFormattedName() {\n        Individual i = new Individual();\n        addBasicName(i, \"Bob /Dylan/\");\n        assertEquals(\"Bob /Dylan/\", i.getFormattedName());\n        addBasicName(i, \"Robert Allen /Zimmerman/\");\n        assertEquals(\"Bob /Dylan/ aka Robert Allen /Zimmerman/\", i.getFormattedName());\n    }\n    @Test\n    public void testGetAncestors() throws IOException, GedcomParserException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/RelationshipTest.ged\");\n        assertTrue(gp.getErrors().isEmpty());\n        assertTrue(gp.getWarnings().isEmpty());\n        Gedcom g = gp.getGedcom();\n        assertNotNull(g);\n        assertEquals(\"There are supposed to be 43 people in the gedcom - are you using the right file/file version?\", 43, g\n                .getIndividuals().size());\n        assertEquals(\"There are supposed to be 18 families in the gedcom - are you using the right file/file version?\", 18, g\n                .getFamilies().size());\n        Individual robert = getPerson(g, \"Andrews\", \"Robert\");\n        Set<Individual> ancestors = robert.getAncestors();\n        assertNotNull(ancestors);\n        assertEquals(8, ancestors.size());\n        Individual kenneth = getPerson(g, \"Struthers\", \"Kenneth\");\n        ancestors = kenneth.getAncestors();\n        assertNotNull(ancestors);\n        assertEquals(0, ancestors.size());\n    }\n    @Test\n    public void testGetAttributesOfType() {\n        Individual i = new Individual();\n        addAttributeOfType(i, IndividualAttributeType.OCCUPATION);\n        assertNotNull(events);\n        assertEquals(1, events.size());\n        assertTrue(i1.hashCode() == i2.hashCode());\n        addBasicName(i, \"Donald /Draper/\");\n        f.getFamily().setWife(new Individual());\n        addBasicName(f.getFamily().getWife(), \"Anna //\");\n        f.getFamily().setWife(new Individual());\n        assertNotNull(\"Couldn't find \" + givenName + \" \" + surname + \" by name in the gedcom\", result);\n}\n",
            "src/test/java/org/gedcom4j/model/Issue115Test.java": "        f.setHusband(i1);\n        f.getChildren(true).add(i2);\n",
            "src/test/java/org/gedcom4j/model/Issue88Test.java": "import org.junit.Test;\n        assertNull(i.getEvents());\n        assertNull(i.getEvents());\n        i.getEvents(true).add(death);\n        assertNull(i.getEvents());\n",
            "src/test/java/org/gedcom4j/model/LdsSpouseSealingTest.java": "        l1.getCustomTags(true).add(new StringTree());\n        l2.getCustomTags(true).add(new StringTree());\n        l1.date = new StringWithCustomTags(\"Frying Pan\");\n        l2.date = new StringWithCustomTags(\"Frying Pan\");\n        l1.place = new StringWithCustomTags(\"Howdy\");\n        l2.place = new StringWithCustomTags(\"Howdy\");\n        l1.status = new StringWithCustomTags(\"Test\");\n        l2.status = new StringWithCustomTags(\"Test\");\n        l1.getCustomTags(true).add(new StringTree());\n        l2.getCustomTags(true).add(new StringTree());\n        l1.date = new StringWithCustomTags(\"Frying Pan\");\n        l2.date = new StringWithCustomTags(\"Frying Pan\");\n        l1.place = new StringWithCustomTags(\"Howdy\");\n        l2.place = new StringWithCustomTags(\"Howdy\");\n        l1.status = new StringWithCustomTags(\"Test\");\n        l2.status = new StringWithCustomTags(\"Test\");\n        l.getCustomTags(true).add(new StringTree());\n        l.date = new StringWithCustomTags(\"Frying Pan\");\n        l.place = new StringWithCustomTags(\"Howdy\");\n        l.status = new StringWithCustomTags(\"Test\");\n                + \"status=Test, customTags=[Line 0: 0 (null tag) (null value)]]\", l.toString());\n",
            "src/test/java/org/gedcom4j/model/NameVariationTest.java": "        nv1.getCustomTags(true).add(new StringTree());\n        nv1.getCustomTags().clear();\n        nv2.getCustomTags(true).clear();\n        nv1.variationType = new StringWithCustomTags(\"Yo\");\n        nv1.getCustomTags(true).add(new StringTree());\n        nv1.getCustomTags().clear();\n        nv2.getCustomTags(true).clear();\n        nv1.variationType = new StringWithCustomTags(\"Yo\");\n        nv.getCustomTags(true).add(new StringTree());\n        nv.variationType = new StringWithCustomTags(\"All\");\n        assertEquals(\"PersonalNameVariation [variation=Frying Pan, variationType=All, customTags=[Line 0: 0 (null tag) (null value)]]\", nv.toString());\n",
            "src/test/java/org/gedcom4j/model/PersonalNameVariationTest.java": "        pnv1.getCustomTags(true).add(new StringTree());\n        pnv1.getCustomTags().clear();\n        pnv2.getCustomTags(true).clear();\n        pnv1.setGivenName(new StringWithCustomTags(\"Yo\"));\n        pnv1.setGivenName(null);\n        pnv1.setNickname(new StringWithCustomTags(\"Yo\"));\n        pnv1.setNickname(null);\n        pnv1.getNotes(true).add(new Note());\n        pnv1.getNotes().clear();\n        pnv2.getNotes(true).clear();\n        pnv1.setPrefix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setPrefix(null);\n        pnv1.setSuffix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSuffix(null);\n        pnv1.setSurname(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSurname(null);\n        pnv1.setSurnamePrefix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSurnamePrefix(null);\n        pnv1.variationType = new StringWithCustomTags(\"Yo\");\n        pnv1.getCustomTags(true).add(new StringTree());\n        pnv1.getCustomTags().clear();\n        pnv2.getCustomTags(true).clear();\n        pnv1.setGivenName(new StringWithCustomTags(\"Yo\"));\n        pnv1.setGivenName(null);\n        pnv1.setNickname(new StringWithCustomTags(\"Yo\"));\n        pnv1.setNickname(null);\n        pnv1.getNotes(true).add(new Note());\n        pnv1.getNotes().clear();\n        pnv2.getNotes(true).clear();\n        pnv1.setPrefix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setPrefix(null);\n        pnv1.setSuffix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSuffix(null);\n        pnv1.setSurname(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSurname(null);\n        pnv1.setSurnamePrefix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSurnamePrefix(null);\n        pnv1.variationType = new StringWithCustomTags(\"Yo\");\n        pnv.getCustomTags(true).add(new StringTree());\n        pnv.setGivenName(new StringWithCustomTags(\"Now\"));\n        pnv.setNickname(new StringWithCustomTags(\"Is\"));\n        pnv.getNotes(true).add(new Note());\n        pnv.setSuffix(new StringWithCustomTags(\"The\"));\n        pnv.setSurname(new StringWithCustomTags(\"Time\"));\n        pnv.setSurnamePrefix(new StringWithCustomTags(\"For\"));\n        pnv.variationType = new StringWithCustomTags(\"All\");\n                + \"variation=Frying Pan, variationType=All, customTags=[Line 0: 0 (null tag) (null value)]]\", pnv.toString());\n",
            "src/test/java/org/gedcom4j/model/RepositoryTest.java": "        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/SourceCallNumberTest.java": "        scn1.setCallNumber(new StringWithCustomTags(\"Foo\"));\n        scn2.setCallNumber(new StringWithCustomTags(\"Foo\"));\n        scn1.setMediaType(new StringWithCustomTags(\"Foo\"));\n        scn2.setMediaType(new StringWithCustomTags(\"Foo\"));\n",
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java": "        assertFalse(\"They're not equivalent anymore, so equals should be false\", ss1.equals(ss2));\n        assertEquals(\"equals() should be the same for equivalent objects\", ss1, ss2);\n        assertFalse(\"They're not equivalent anymore, so equals should be false\", ss1.equals(ss2));\n        assertEquals(\"equals() should be the same for equivalent objects\", ss1, ss2);\n        assertFalse(\"They're not equivalent anymore, so the hashcodes should differ\", ss1.hashCode() == ss2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/SourceTest.java": "        s1.customTags = null;\n        s1.getCustomTags(true).clear();\n        s2.getCustomTags(true).clear();\n        s1.getMultimedia(true).add(new Multimedia());\n        s2.getMultimedia(true).add(new Multimedia());\n        s1.getNotes(true).add(new Note());\n        s2.getNotes(true).add(new Note());\n        s1.getOriginatorsAuthors(true).add(\"qweqwe\");\n        s2.getOriginatorsAuthors(true).add(\"qweqwe\");\n        s1.getPublicationFacts(true).add(\"foo\");\n        s2.getPublicationFacts(true).add(\"foo\");\n        s1.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        s2.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        assertEquals(s1, s2);\n        s1.setRepositoryCitation(new RepositoryCitation());\n        assertTrue(s1.hashCode() != s2.hashCode());\n        s2.setRepositoryCitation(new RepositoryCitation());\n        assertEquals(s1, s2);\n        s1.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        assertTrue(s1.hashCode() != s2.hashCode());\n        s2.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        s1.getTitle(true).add(\"baz\");\n        assertTrue(s1.hashCode() != s2.hashCode());\n        s2.getTitle(true).add(\"baz\");\n        assertEquals(s1, s2);\n        s1.getUserReferences(true).add(new UserReference());\n        assertTrue(s1.hashCode() != s2.hashCode());\n        s2.getUserReferences(true).add(new UserReference());\n        assertEquals(s1, s2);\n    }\n    @Test\n        Source s1 = new Source(\"Foo\");\n        assertEquals(s1.hashCode(), s2.hashCode());\n        s1.setChangeDate(new ChangeDate());\n        assertEquals(s1.hashCode(), s2.hashCode());\n        s1.getOriginatorsAuthors(true).add(\"foo\");\n        s2.getOriginatorsAuthors(true).add(\"foo\");\n        s1.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        s2.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        s1.setRepositoryCitation(new RepositoryCitation());\n        s2.setRepositoryCitation(new RepositoryCitation());\n        s1.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        s2.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        s1.getSourceText(true).add(\"baz\");\n        s2.getSourceText(true).add(\"baz\");\n        s1.getTitle(true).add(\"bat\");\n        s2.getTitle(true).add(\"bat\");\n        assertEquals(s1.hashCode(), s2.hashCode());\n        s1.getUserReferences(true).add(new UserReference());\n        assertFalse(s1.hashCode() == s2.hashCode());\n        s2.getUserReferences(true).add(new UserReference());\n        assertEquals(s1.hashCode(), s2.hashCode());\n    }\n        s1.setChangeDate(new ChangeDate());\n        s1.customTags = null;\n        s1.setData(new SourceData());\n        s1.getMultimedia(true).clear();\n        s1.getNotes(true).add(new Note());\n        s1.getOriginatorsAuthors(true).clear();\n        s1.getPublicationFacts(true).clear();\n        s1.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        s1.setRepositoryCitation(new RepositoryCitation());\n        s1.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        s1.getSourceText(true).clear();\n        s1.getUserReferences(true).clear();\n                + \"sourceText=[], title=[], userReferences=[], xref=Foo, ]\", s1.toString());\n    }\n",
            "src/test/java/org/gedcom4j/model/StringTreeTest.java": "        assertFalse(st1.equals(st2));\n        assertTrue(st1.hashCode() != st2.hashCode());\n    }\n        for (Individual i : g.getIndividuals().values()) {\n            assertNotNull(i.getCustomTags(true).toString());\n        for (Multimedia m : g.getMultimedia().values()) {\n            assertNotNull(m.getCustomTags(true).toString());\n        for (Note n : g.getNotes().values()) {\n            assertNotNull(n.getCustomTags(true).toString());\n        }\n    }\n",
            "src/test/java/org/gedcom4j/model/TestHelper.java": "        g.getHeader().setSubmission(g.getSubmission());\n        s.setName(new StringWithCustomTags(\"Joe Tester\"));\n        g.getHeader().setSubmitter(s);\n",
            "src/test/java/org/gedcom4j/parser/GedcomParser551Test.java": "        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/5.5.1 sample 4.ged\");\n        assertTrue(gp.getErrors().isEmpty());\n        Gedcom g = gp.getGedcom();\n        assertNotNull(f);\n        assertEquals(1, george.getFamiliesWhereChild().size());\n        FamilyChild fc1 = george.getFamiliesWhereChild().get(0);\n",
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java": "    public void testLoad3() throws IOException, GedcomParserException {\n        Family family = g.getFamilies().get(\"@F1428@\");\n    }\n        assertEquals(1, g.getMultimedia().size());\n        assertEquals(\"42\", citWithSource.getWhereInSource().toString());\n        }\n        source = citWithSource.getSource();\n        } else {\n        assertEquals(null, fileReference.getTitle());\n        note = multimedia.getNotes().get(0);\n        assertNotNull(note.getLines());\n                \"This is a second personal NAME structure in a single INDIVIDUAL record which is allowed in GEDCOM. This second NAME structure has all possible fields for a NAME structure.\",\n                note.getLines().get(0));\n        assertEquals(\"Comments on \\\"Joseph Tag Torture\\\" INDIVIDUAL Record.\", note.getLines().get(0));\n        note = indi.getNotes().get(1);\n        assertEquals(3, note.getLines().size());\n                note.getLines().get(0));\n        assertTrue(indi.getCitations().get(0) instanceof CitationWithSource);\n        assertEquals(0, citWithSource.getMultimedia(true).size());\n        assertEquals(1, citWithSource.getNotes().size());\n        note = citWithSource.getNotes().get(0);\n        assertEquals(1, note.getLines().size());\n                \"How does software handle embedded SOURCE records on import? Such source citations are common in old GEDCOM files. More modern GEDCOM files should use source citations to SOURCE records.\",\n}\n",
            "src/test/java/org/gedcom4j/parser/Issue100Test.java": "import org.gedcom4j.model.Note;\n        assertNotNull(i.getNotes());\n        assertEquals(1, i.getNotes().size());\n        Note n = i.getNotes().get(0);\n",
            "src/test/java/org/gedcom4j/parser/Issue102Test.java": "import org.gedcom4j.model.StringTree;\n    @Test\n        assertEquals(0, gp.getErrors().size());\n        assertEquals(1, gp.getWarnings().size());\n        assertEquals(\"Line 108 did not begin with a level and tag, so it was treated as a non-standard continuation of the previous line.\", gp.getWarnings()\n    }\n        if (remaining <= 0) {\n        assertEquals(\"With \" + remaining + \" levels remaining, customTags did not have exactly one child. \", 1, customTags.getChildren().size());\n    }\n}\n",
            "src/test/java/org/gedcom4j/parser/Issue32Test.java": "import org.gedcom4j.model.Note;\n                checkJohn(john.getNotes());\n                checkMary(mary.getNotes());\n    private void checkJohn(List<Note> notes) {\n        assertNotNull(notes);\n        assertEquals(1, notes.size());\n        Note note = notes.get(0);\n        Note note = notes.get(0);\n        assertEquals(3, note.getLines().size());\n",
            "src/test/java/org/gedcom4j/parser/Issue61Test.java": "import org.gedcom4j.model.Gedcom;\n            assertNotNull(i.getCustomTags());\n            assertFalse(\"Individual \" + i + \" has no custom tags\", i.getCustomTags().isEmpty());\n            for (StringTree ct : i.getCustomTags()) {\n                assertTrue(\"Custom tag should be WAND or MUGL, but is \" + ct.getValue(), \"WAND\".equals(ct.getTag()) || \"MUGL\".equals(ct.getTag()));\n                    assertFalse(ct.getValue().trim().length() == 0);\n                }\n                }\n                assertTrue(i.getCustomTags().isEmpty());\n            } else {\n            }\n",
            "src/test/java/org/gedcom4j/parser/Issue63Test.java": "        assertEquals(\"@I001@\", family.getHusband().getXref());\n        assertEquals(\"Husband /Gedcom/\", family.getHusband().getNames().get(0).getBasic());\n    }\n",
            "src/test/java/org/gedcom4j/parser/Issue87Test.java": "import org.gedcom4j.model.FamilyEventType;\n",
            "src/test/java/org/gedcom4j/parser/Issue96Test.java": "import org.gedcom4j.model.Note;\n        assertEquals(1, g.getNotes().size());\n",
            "src/test/java/org/gedcom4j/parser/StressFileSpecialCharacterReadTest.java": "import org.gedcom4j.model.Gedcom;\n    @Test\n        assertEqualsCharByChar(\"     \\u00E0b\\u0300c\\u0300d\\u0300\\u00E8f\\u0300g\\u0300h\\u0300\\u00ECj\\u0300k\\u0300l\\u0300m\\u0300\", note\n        assertEqualsCharByChar(\"     \\u00E2b\\u0302\\u0109d\\u0302\\u00EAf\\u0302\\u011D\\u0125\\u00EE\\u0135k\\u0302l\\u0302m\\u0302\", note\n        assertEqualsCharByChar(\"     \\u0101b\\u0304c\\u0304d\\u0304\\u0113f\\u0304\\u1E21h\\u0304\\u012Bj\\u0304k\\u0304l\\u0304m\\u0304\", note\n                .getLines().get(50));\n        assertEqualsCharByChar(\"     \\u0147\\u01D1P\\u030cQ\\u030c\\u0158\\u0160\\u0164\\u01D3V\\u030cW\\u030cX\\u030cY\\u030c\\u017D\", note\n        assertEqualsCharByChar(\"     N\\uFE20O\\uFE20P\\uFE20Q\\uFE20R\\uFE20S\\uFE20T\\uFE20U\\uFE20V\\uFE20W\\uFE20X\\uFE20Y\\uFE20Z\\uFE20\",\n        assertEqualsCharByChar(\"     N\\u0315O\\u0315P\\u0315Q\\u0315R\\u0315S\\u0315T\\u0315U\\u0315V\\u0315W\\u0315X\\u0315Y\\u0315Z\\u0315\",\n        assertEqualsCharByChar(\"     N\\u0310O\\u0310P\\u0310Q\\u0310R\\u0310S\\u0310T\\u0310U\\u0310V\\u0310W\\u0310X\\u0310Y\\u0310Z\\u0310\",\n        assertEqualsCharByChar(\"     N\\u0328\\u01EAP\\u0328Q\\u0328R\\u0328S\\u0328T\\u0328\\u0172V\\u0328W\\u0328X\\u0328Y\\u0328Z\\u0328\",\n                note.getLines().get(122));\n                note.getLines().get(134));\n                note.getLines().get(146));\n                note.getLines().get(158));\n                note.getLines().get(170));\n    @Test\n        assertEqualsCharByChar(\"A9 musical flat (\\u266D)\", note.getLines().get(12));\n        assertEqualsCharByChar(\"BF black box - LDS extensions (\\u25A0)\", note.getLines().get(32));\n",
            "src/test/java/org/gedcom4j/parser/TagTest.java": "    private static final int EXPECTED_TAG_COUNT = 92;\n",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": "        Individual i1 = gp.getGedcom().getIndividuals().get(\"@I27@\");\n",
            "src/test/java/org/gedcom4j/relationship/RelationshipCalculatorTest.java": "        assertNotNull(rc.getRelationshipsFound());\n                System.out.println(\"   \" + r);\n        assertEquals(\"Abigail is Alex's great-great-grandmother - there are several ways to get there but one relationship\", 1, rc.getRelationshipsFound()\n",
            "src/test/java/org/gedcom4j/validate/AbstractValidatorTestCase.java": "import junit.framework.TestCase;\n    }\n    public AbstractValidatorTestCase(String name) {\n        super(name);\n    }\n    public void setUp() throws Exception {\n        super.setUp();\n        gedcom = new Gedcom();\n        rootValidator = new GedcomValidator(gedcom);\n    }\n    protected void assertFindingsContain(Severity severity, String... substringOfDescription) {\n        for (GedcomValidationFinding f : rootValidator.getFindings()) {\n            if (f.getSeverity() == severity) {\n                boolean matchAllSoFar = true;\n                for (String substring : substringOfDescription) {\n                    if (!f.getProblemDescription().toLowerCase().contains(substring.toLowerCase())) {\n                        matchAllSoFar = false;\n                    }\n                }\n                if (matchAllSoFar) {\n                    return;\n                }\n            }\n        }\n            for (int i = 0; i < substringOfDescription.length; i++) {\n                if (i == 0) {\n                    sb.append(\" mentioning '\");\n                } else {\n                    sb.append(\" and '\");\n                }\n                sb.append(substringOfDescription[i]).append(\"'\");\n            }\n        }\n        fail(sb.toString());\n    }\n    protected void assertNoIssues() {\n        if (rootValidator.hasErrors() || rootValidator.hasWarnings()) {\n            boolean saveVerbose = verbose;\n            verbose = true;\n            verbose = saveVerbose;\n",
            "src/test/java/org/gedcom4j/validate/CitationValidatorTest.java": "import org.gedcom4j.validate.CitationValidator;\nimport org.gedcom4j.validate.Severity;\n        assertFindingsContain(Severity.ERROR, \"citation\", \"null\");\n    }\n}\n",
            "src/test/java/org/gedcom4j/validate/FamilyValidatorTest.java": "import org.gedcom4j.model.StringWithCustomTags;\nimport org.gedcom4j.model.TestHelper;\n    private Family f;\n        mom = new Individual();\n        mom.setXref(\"@I00002@\");\n        jr = new Individual();\n        gedcom.getFamilies().put(f.getXref(), f);\n        rootValidator.validate();\n        assertNoIssues();\n    }\n    @Test\n    public void testAutomatedRecordId() {\n        f.setAutomatedRecordId(new StringWithCustomTags((String) null));\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"automated\", \"record\", \"id\", \"no value\");\n        assertFindingsContain(Severity.ERROR, \"automated\", \"record\", \"id\", \"custom tags\", \"no value\");\n    }\n    public void testNoCitations() {\n        f.getCitations(true).clear();\n        assertNoIssues();\n    public void testNoDadInFamily() {\n        rootValidator.validate();\n        assertNoIssues();\n    @Test\n        rootValidator.validate();\n",
            "src/test/java/org/gedcom4j/validate/HeaderValidatorTest.java": "public class HeaderValidatorTest extends AbstractValidatorTestCase {\n        h.setSubmitter(s);\n        h.setCharacterSet(null);\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"character set\");\n        h.setCharacterSet(new CharacterSet());\n        h.getCharacterSet().setCharacterSetName(null);\n        rootValidator.validate();\n        h.getCharacterSet().setCharacterSetName(new StringWithCustomTags(\"FRYINGPAN\"));\n        h.getCharacterSet().setCharacterSetName(new StringWithCustomTags(Encoding.ASCII.getCharacterSetName()));\n        rootValidator.validate();\n        assertNoIssues();\n    }\n    @Test\n    public void testCopyrightData() {\n        rootValidator.validate();\n        assertNoIssues();\n    }\n        h.setSubmitter(s);\n        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        h.setSubmission(g.getSubmission());\n        h.setGedcomVersion(null);\n        rootValidator.validate();\n        h.setGedcomVersion(new GedcomVersion());\n        rootValidator.validate();\n        h.getGedcomVersion().setVersionNumber(null);\n    }\n        g.getHeader().setSubmission(g.getSubmission());\n        rootValidator.setAutorepairEnabled(false);\n        Submitter s = new Submitter();\n        s.setXref(\"@SUBM0001@\");\n        s.setName(new StringWithCustomTags(\"test\"));\n        g.getSubmitters().put(s.getXref(), s);\n        h.setSubmitter(s);\n        Gedcom g = new Gedcom();\n        rootValidator.gedcom = g;\n        rootValidator.setAutorepairEnabled(false);\n        Submitter s = new Submitter();\n        s.setXref(\"@SUBM0001@\");\n        s.setName(new StringWithCustomTags(\"test\"));\n        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        h.setSubmission(g.getSubmission());\n        rootValidator.validate();\n        ss.setCorporation(null);\n        ss.setCorporation(new Corporation());\n        rootValidator.validate();\n        ss.getCorporation().setBusinessName(null);\n        ss.getCorporation().setBusinessName(\"Frying Pan\");\n        ss.setProductName(new StringWithCustomTags(\"Yo\"));\n        ss.setProductName(null);\n        rootValidator.validate();\n        ss.setSystemId(null);\n",
            "src/test/java/org/gedcom4j/validate/IndividualEventValidatorTest.java": "        g.getIndividuals().put(i.getXref(), i);\n        assertNoIssues();\n        assertNoIssues();\n        assertNoIssues();\n        assertNoIssues();\n        assertNoIssues();\n        assertNoIssues();\n        rootValidator.validate();\n",
            "src/test/java/org/gedcom4j/validate/IndividualValidatorTest.java": "        AbstractValidator v = new IndividualValidator(rootValidator, i);\n        assertFindingsContain(Severity.ERROR, \"xref\", \"null\");\n        verbose = true;\n        rootValidator.validate();\n        for (GedcomValidationFinding f : rootValidator.getFindings()) {\n            assertNotNull(\"The finding should have an object attached\", f.getItemWithProblem());\n                assertTrue(\"The object attached should be a Map entry\", f.getItemWithProblem() instanceof Map.Entry);\n            }\n",
            "src/test/java/org/gedcom4j/validate/Issue111Test.java": "        g.getSubmitters().put(\"@SUBM@\", subm);\n        assertFalse(gv.hasErrors());\n        assertFalse(gv.hasWarnings());\n        assertTrue(gv.hasInfo());\n        assertEquals(\"INFO: 1 duplicate names found and removed (Duncan /Highlander/)\", gv.getFindings().get(0).toString());\n        assertEquals(\"There can be only one\", 1, i.getNames().size());\n    }\n}\n",
            "src/test/java/org/gedcom4j/validate/LdsSpouseSealingValidatorTest.java": "import org.junit.Test;\n    private Family f;\n        mom = new Individual();\n        mom.setXref(\"@I00002@\");\n        jr = new Individual();\n    }\n    @Test\n        f.getLdsSpouseSealings(true).add(s);\n        assertNoIssues();\n    }\n        rootValidator.validate();\n        assertNoIssues();\n    }\n    public void testDate() {\n        LdsSpouseSealing s = new LdsSpouseSealing();\n        f.getLdsSpouseSealings(true).add(s);\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"date\", \"no value\");\n        s.setDate(new StringWithCustomTags(\"\"));\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"date\", \"no value\");\n        s.setDate(new StringWithCustomTags(\"              \"));\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"date\", \"no value\");\n        LdsSpouseSealing s = new LdsSpouseSealing();\n        f.getLdsSpouseSealings(true).add(s);\n    @Test\n    public void testPlace() {\n        LdsSpouseSealing s = new LdsSpouseSealing();\n        f.getLdsSpouseSealings(true).add(s);\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"place\", \"no value\");\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"place\", \"no value\");\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"place\", \"no value\");\n    public void testStatus() {\n        LdsSpouseSealing s = new LdsSpouseSealing();\n        f.getLdsSpouseSealings(true).add(s);\n        s.setStatus(new StringWithCustomTags((String) null));\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"status\", \"no value\");\n        s.setStatus(new StringWithCustomTags(\"\"));\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"status\", \"no value\");\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"status\", \"no value\");\n        rootValidator.validate();\n        assertNoIssues();\n    }\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"temple\", \"no value\");\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"temple\", \"no value\");\n        rootValidator.validate();\n        assertNoIssues();\n    }\n",
            "src/test/java/org/gedcom4j/validate/MultimediaValidatorTest.java": "        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        h.setSubmission(g.getSubmission());\n        mm = new Multimedia();\n    }\n        assertNoIssues();\n        rootValidator.gedcom.getHeader().getGedcomVersion().setVersionNumber(SupportedVersion.V5_5);\n        rootValidator.validate();\n        rootValidator.validate();\n        assertNoIssues();\n        rootValidator.gedcom.getHeader().getGedcomVersion().setVersionNumber(SupportedVersion.V5_5_1);\n        rootValidator.validate();\n        mm.getBlob().clear();\n        mm.setEmbeddedMediaFormat(null);\n        rootValidator.validate();\n        assertNoIssues();\n}\n",
            "src/test/java/org/gedcom4j/validate/PersonalNameValidatorTest.java": "import org.gedcom4j.model.StringWithCustomTags;\n        super.setUp();\n        gedcom = TestHelper.getMinimalGedcom();\n        ind.getNames(true).add(pn);\n    public void testBasic() {\n        pn.setBasic(null);\n        pn.setBasic(\"\");\n        pn.setBasic(\"       \"); // whitespace gets trimmed\n    @Test\n    public void testGivenName() {\n        pn.setGivenName(new StringWithCustomTags((String) null));\n        assertFindingsContain(Severity.ERROR, \"given name\", \"no value\");\n        pn.setGivenName(new StringWithCustomTags(\"\"));\n        assertFindingsContain(Severity.ERROR, \"given name\", \"no value\");\n    @Test\n    public void testNickname() {\n        pn.setNickname(new StringWithCustomTags((String) null));\n        assertFindingsContain(Severity.ERROR, \"nickname\", \"no value\");\n        pn.setNickname(new StringWithCustomTags(\"\"));\n        assertFindingsContain(Severity.ERROR, \"nickname\", \"no value\");\n    @Test\n        rootValidator.validate();\n        assertNoIssues();\n        ind.getNames(true).add(null);\n        rootValidator.validate();\n    public void testPrefix() {\n        pn.setPrefix(new StringWithCustomTags((String) null));\n        rootValidator.validate();\n        pn.setPrefix(new StringWithCustomTags(\"\"));\n        rootValidator.validate();\n        pn.setPrefix(new StringWithCustomTags(\"Mr.\"));\n    public void testSuffix() {\n        pn.setSuffix(new StringWithCustomTags((String) null));\n        rootValidator.validate();\n        pn.setSuffix(new StringWithCustomTags(\"\"));\n        rootValidator.validate();\n        pn.setSuffix(new StringWithCustomTags(\"Jr.\"));\n    public void testSurname() {\n        pn.setSurname(new StringWithCustomTags((String) null));\n        rootValidator.validate();\n        pn.setSurname(new StringWithCustomTags(\"\"));\n        rootValidator.validate();\n        pn.setSurname(new StringWithCustomTags(\"Johnson\"));\n    public void testSurnamePrefix() {\n        pn.setSurnamePrefix(new StringWithCustomTags((String) null));\n        rootValidator.validate();\n        pn.setSurnamePrefix(new StringWithCustomTags(\"\"));\n        rootValidator.validate();\n        pn.setSurnamePrefix(new StringWithCustomTags(\"van\"));\n",
            "src/test/java/org/gedcom4j/validate/PersonalNameVariationValidatorTest.java": "        g.getIndividuals().put(i.getXref(), i);\n        pn.getRomanized(true).add(romanized);\n        romanized.setVariation(\"Bjorn /Jorgen/\");\n        rootValidator.validate();\n        assertNoIssues();\n        pn.getPhonetic(true).add(phonetic);\n        phonetic.setVariation(\"Byorn /Yorgen/\");\n        rootValidator.validate();\n        assertNoIssues();\n}\n",
            "src/test/java/org/gedcom4j/validate/SourceValidatorTest.java": "        AbstractValidator av = new SourceValidator(rootValidator, src);\n        av.validate();\n        assertFindingsContain(Severity.ERROR, \"xref\", \"source\", \"start\", \"at\", \"sign\");\n        assertFindingsContain(Severity.ERROR, \"xref\", \"source\", \"end\", \"at\", \"sign\");\n        src.getData().getEventsRecorded(true).add(e);\n        av.validate();\n        av.validate();\n        assertFindingsContain(Severity.ERROR, \"xref\", \"required\", \"null\", \"blank\");\n        av.validate();\n    }\n",
            "src/test/java/org/gedcom4j/validate/SubmitterValidatorTest.java": "    public void testValidateNullSubmitter() {\n        sv.validate();\n        submitter.setXref(\"@nobody@\");\n        sv.validate();\n    }\n        sv.validate();\n        assertFindingsContain(Severity.ERROR, \"name\", \"blank\", \"null\");\n        sv.validate();\n        assertFindingsContain(Severity.ERROR, \"xref\", \"null\");\n    }\n        assertFindingsContain(Severity.ERROR, \"name\", \"blank\", \"null\");\n        assertFindingsContain(Severity.ERROR, \"xref\", \"blank\", \"null\");\n    }\n}\n",
            "src/test/java/org/gedcom4j/writer/EventsWithDescriptionsTest.java": "import org.gedcom4j.parser.GedcomParser;\n    }\n}\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551Test.java": "                }\n            }\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n        }\n        g.getHeader().getGedcomVersion().setVersionNumber(SupportedVersion.V5_5);\n        m.setEmbeddedMediaFormat(null);\n        gw.write(\"tmp/delete-me.ged\");\n        GedcomWriter gw = new GedcomWriter(g);\n        PersonalName pn = new PersonalName();\n        assertEquals(IndividualEventType.BIRTH, e.getType());\n        Place p = e.getPlace();\n        assertNotNull(p);\n        assertEquals(\"Krakow, Poland\", p.getPlaceName());\n        assertTrue(p.getPhonetic() == null || p.getPhonetic().isEmpty());\n        assertEquals(\"+50\\u00B0 3' 1.49\\\"\", p.getLatitude().getValue());\n        gw.validationSuppressed = false;\n        g1.getMultimedia().put(m1.getXref(), m1);\n        gp.load(\"tmp/writertest551.ged\");\n        assertNotNull(fr.getMediaType());\n    @Test\n        try {\n            fail(\"Expected to get a GedcomWriterException due to missing field on personal name variation\");\n        } catch (GedcomWriterException expected) {\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterConstructionProgressAndCancellationTest.java": "import org.gedcom4j.parser.GedcomParser;\nimport org.gedcom4j.writer.event.ConstructProgressListener;\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": "import org.gedcom4j.writer.event.ConstructProgressListener;\n    private int linesConstructed = 0;\n    @Test(expected = WriterCancelledException.class)\n        gw = new GedcomWriter(gp.getGedcom());\n        fileCancelAfter = 5;\n        gw.write(new NullOutputStream());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        gw.registerFileObserver(this);\n        try {\n    @SuppressWarnings(\"resource\")\n    public void testNoCancellationAnselCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        cleanUpGedcom(gp, Encoding.ANSEL);\n        gw.registerConstructObserver(this);\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n    @Test\n    public void testNoCancellationAsciiCrlf() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/willis-ascii.ged\");\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw.registerConstructObserver(this);\n        } catch (GedcomWriterException e) {\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        cleanUpGedcom(gp, Encoding.ASCII);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CR_ONLY);\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        try {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n        }\n    }\n        gw.registerFileObserver(this);\n        try {\n            gw.write(new NullOutputStream());\n        } catch (GedcomWriterException e) {\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n        }\n        assertEquals(1243670, bytesWritten);\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                System.out.println(f);\n            }\n            throw e;\n        }\n        assertEquals(1203626, bytesWritten);\n        }\n        assertEquals(40, constructNotificationCount);\n        assertEquals(42, fileNotificationCount);\n        assertEquals(20022, linesConstructed);\n        assertEquals(1243676, bytesWritten);\n    @SuppressWarnings(\"resource\")\n    @Test\n    public void testNoCancellationUnicodeLittleEndianCrOnly() throws IOException, GedcomParserException, GedcomWriterException {\n        GedcomParser gp = new GedcomParser();\n        assertEquals(1203632, bytesWritten);\n    }\n        gp.load(\"sample/willis.ged\");\n        cleanUpGedcom(gp, Encoding.UTF_8);\n        gw = new GedcomWriter(gp.getGedcom());\n        gw.setLineTerminator(LineTerminator.CRLF);\n        GedcomParser gp = new GedcomParser();\n        gw.setAutorepair(true);\n        gw.registerConstructObserver(this);\n        gw.registerFileObserver(this);\n        try {\n    private void cleanUpGedcom(GedcomParser gp, Encoding encoding) {\n        CharacterSet characterSet = new CharacterSet();\n        gv.setVersionNumber(SupportedVersion.V5_5_1);\n                for (AbstractEvent e : i.getEvents()) {\n                    e.setDescription(null);\n                }\n            }\n                for (AbstractEvent e : f.getEvents()) {\n                    e.setDescription(null);\n                }\n            }\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java": "        GedcomWriter gw = new GedcomWriter(gedcomOrig);\n                \"0 @N19@ NOTE A note about this LDS spouse sealing source.\", \"1 CHAN\", \"2 DATE 12 Mar 2000\", \"3 TIME 12:32:13\");\n        assertEquals(gedcomOrig.getNotes().keySet(), gedcomReadback.getNotes().keySet());\n                System.out.println(\"Looking in:\");\n            System.out.println(\"Starting at line \" + indexOf);\n",
            "src/test/java/org/gedcom4j/writer/Issue80WriterTest.java": "        Individual i = new Individual();\n        gw.validationSuppressed = false;\n        gw.setUseLittleEndianForUnicode(false);\n",
            "src/test/java/org/gedcom4j/writer/Issue89Test.java": "import java.io.ByteArrayOutputStream;\nimport org.junit.Test;\n        StringTree sct = new StringTree();\n        sct.setValue(\"Custom Submitter Tag\");\n        nct.setLevel(999);\n        nct.setTag(\"_CUSTNM\");\n        s.getName().getCustomTags(true).add(nct);\n        StringTree hct = new StringTree();\n        hct.setId(\"@CT003@\");\n        hct.setValue(\"Custom Header Tag\");\n        g.getHeader().getCustomTags(true).add(hct);\n        StringTree hct2 = new StringTree();\n        hct2.setTag(\"_CUSTHD2\");\n        hct2.setValue(\"Custom Inner Tag inside Custom Header Tag\");\n        hct.getChildren(true).add(hct2);\n                System.out.println(this.getClass().getName() + \" found \" + gw.getValidationFindings().size()\n                        + \" validation findings:\");\n                    System.out.println(f);\n",
            "src/test/java/org/gedcom4j/writer/Issue95Test.java": "import org.gedcom4j.model.*;\n        assertTrue(gp.getErrors().isEmpty());\n                assertEquals(\"Hatched from egg\", ct.getValue());\n                assertEquals(2, ct.getLevel());\n            } else if (ev.getType() == IndividualEventType.DEATH) {\n                assertEquals(\"Suffolk, VA, USA\", ev.getPlace().getPlaceName());\n                assertTrue(ev.getCustomTags() == null || ev.getCustomTags().isEmpty());\n            }\n        assertEquals(1, countOccurrences(gcAsString, \"2 _METHOD\"));\n        assertEquals(1, countOccurrences(gcAsString, \"2 DATE\"));\n        assertEquals(2, countOccurrences(gcAsString, \"2 PLAC\"));\n",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": "import org.gedcom4j.model.Submission;\nimport org.junit.Test;\n        s.setXref(\"@SUBM0001@\");\n        g.getHeader().setSubmitter(s);\n        GedcomWriter gw = new GedcomWriter(g);\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/comparators/IndividualByLastNameFirstNameComparator.java": [
                59
            ],
            "src/main/java/org/gedcom4j/io/encoding/AnselMapping.java": [
                359
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": [
                95,
                111
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": [
                97,
                113
            ],
            "src/main/java/org/gedcom4j/model/AbstractCitation.java": [
                29,
                30,
                32,
                49,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                81,
                82,
                83,
                92,
                93,
                94,
                95,
                96,
                97,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                113,
                114,
                115,
                116,
                117,
                118,
                119
            ],
            "src/main/java/org/gedcom4j/model/AbstractElement.java": [
                30,
                41,
                50,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                92,
                93,
                103,
                108,
                109,
                113,
                117,
                120
            ],
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": [
                109,
                114,
                120,
                125,
                130,
                135,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                330,
                374,
                406,
                415,
                440,
                442,
                483,
                484,
                485,
                501,
                502,
                503,
                519,
                520,
                521,
                542,
                543,
                544,
                549,
                569,
                570,
                571,
                572,
                590,
                591,
                592,
                610,
                611,
                612,
                630,
                631,
                632,
                650,
                705,
                706,
                707,
                741,
                742,
                743
            ],
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": [
                55,
                60,
                65,
                70,
                75,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                219,
                245,
                246,
                247,
                265,
                266,
                267,
                272,
                273,
                274,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                314
            ],
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java": [
                50,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                149,
                150,
                151,
                153
            ],
            "src/main/java/org/gedcom4j/model/Address.java": [
                50,
                55,
                60,
                65,
                70,
                80,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                152,
                153,
                202,
                211,
                220,
                221,
                222,
                229,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                332,
                333,
                334,
                335,
                336,
                337,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346
            ],
            "src/main/java/org/gedcom4j/model/Association.java": [
                39,
                48,
                63,
                68,
                71,
                72,
                73,
                74,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                191,
                215,
                223,
                224,
                225,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255
            ],
            "src/main/java/org/gedcom4j/model/ChangeDate.java": [
                43,
                48,
                53,
                58,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                164,
                165,
                166,
                185,
                186,
                187,
                195,
                196,
                197
            ],
            "src/main/java/org/gedcom4j/model/CharacterSet.java": [
                45,
                50,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151
            ],
            "src/main/java/org/gedcom4j/model/CitationData.java": [
                48,
                53,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                116
            ],
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": [
                77,
                82,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                129,
                226,
                246,
                248,
                249,
                251,
                252,
                277,
                278,
                279,
                307,
                308,
                309,
                357,
                358,
                359,
                362,
                363,
                364
            ],
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": [
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                165,
                166
            ],
            "src/main/java/org/gedcom4j/model/Corporation.java": [
                56,
                61,
                66
            ],
            "src/main/java/org/gedcom4j/model/EventRecorded.java": [
                44,
                49,
                54,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                122,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                184,
                185,
                186,
                187,
                188
            ],
            "src/main/java/org/gedcom4j/model/Family.java": [
                124,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                469,
                480,
                492,
                519,
                530,
                617,
                618,
                619,
                640,
                650,
                651,
                652,
                653,
                654,
                655,
                656,
                657,
                658,
                659,
                660,
                670,
                671,
                672,
                673,
                674,
                675,
                676,
                677,
                678,
                679,
                680,
                690,
                691,
                692,
                693,
                694,
                695,
                696,
                697,
                698,
                699,
                700,
                710
            ],
            "src/main/java/org/gedcom4j/model/FamilyChild.java": [
                29,
                53,
                58,
                63,
                69,
                71,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                192,
                220,
                221,
                222,
                230,
                231,
                232,
                256,
                257,
                258,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283
            ],
            "src/main/java/org/gedcom4j/model/FamilyEvent.java": [
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                139,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202
            ],
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": [
                49,
                54,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                156,
                157,
                158
            ],
            "src/main/java/org/gedcom4j/model/FileReference.java": [
                44,
                49,
                54,
                59,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                148,
                157,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220
            ],
            "src/main/java/org/gedcom4j/model/Gedcom.java": [
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198
            ],
            "src/main/java/org/gedcom4j/model/GedcomVersion.java": [
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150
            ],
            "src/main/java/org/gedcom4j/model/Header.java": [
                65,
                70,
                75,
                111,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                249,
                250,
                253,
                321,
                339,
                348,
                364,
                366,
                371,
                373,
                375,
                376,
                384,
                405,
                427,
                435,
                436,
                437,
                447,
                455,
                456,
                457,
                467,
                475,
                476,
                477,
                497,
                502,
                503,
                504,
                505,
                506,
                507,
                517,
                518,
                519,
                520,
                521,
                522,
                523,
                524,
                525,
                526,
                527,
                542,
                544,
                545,
                547,
                548,
                554,
                557,
                558,
                559,
                560,
                561,
                562,
                563,
                564,
                565,
                566,
                567,
                568,
                577
            ],
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java": [
                50,
                55,
                60,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                128,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                190,
                191,
                192,
                193,
                194
            ],
            "src/main/java/org/gedcom4j/model/Individual.java": [
                34,
                163,
                168,
                173,
                178,
                183,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                258,
                259,
                260,
                261,
                262,
                263,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                469,
                526,
                608,
                621,
                797,
                808,
                843,
                887,
                888,
                918,
                919,
                920,
                921,
                922,
                923,
                924,
                925,
                926,
                927,
                934,
                935,
                936,
                972,
                1017,
                1018,
                1019,
                1020,
                1021,
                1022,
                1023,
                1024,
                1025,
                1026,
                1027,
                1053,
                1054,
                1055,
                1073,
                1074,
                1075,
                1093,
                1094,
                1095,
                1113,
                1114,
                1115,
                1139,
                1152,
                1153,
                1155,
                1158,
                1160,
                1168,
                1169,
                1172,
                1175,
                1223,
                1224,
                1225,
                1226,
                1234,
                1235,
                1236,
                1237,
                1263,
                1264,
                1267,
                1269,
                1270
            ],
            "src/main/java/org/gedcom4j/model/IndividualAttribute.java": [
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59
            ],
            "src/main/java/org/gedcom4j/model/IndividualEvent.java": [
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                93
            ],
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java": [
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                178,
                179
            ],
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java": [
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                73,
                74,
                75
            ],
            "src/main/java/org/gedcom4j/model/Multimedia.java": [
                80,
                85,
                116,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                337,
                369,
                445,
                446,
                447,
                462,
                472,
                473,
                474,
                475,
                476,
                477,
                478,
                479,
                480,
                481,
                482,
                492,
                493,
                494,
                495,
                496,
                497,
                498,
                499,
                500,
                501,
                502
            ],
            "src/main/java/org/gedcom4j/model/PersonalName.java": [
                99,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                249,
                250,
                251,
                296,
                305,
                337,
                394,
                395,
                396,
                441,
                442,
                443,
                444,
                445,
                446,
                447,
                449
            ],
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": [
                53,
                58,
                63,
                68,
                73,
                78,
                83,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                175,
                176,
                258,
                267,
                276,
                277,
                278,
                289,
                290,
                291,
                292,
                294,
                311,
                320,
                329,
                366,
                367,
                368,
                369,
                370,
                371,
                372,
                382,
                383,
                384,
                385,
                386,
                387,
                388,
                389,
                390,
                391,
                392,
                402,
                403,
                404,
                405,
                406,
                407,
                408,
                409,
                410,
                411,
                412,
                422,
                423,
                424,
                425,
                426,
                428
            ],
            "src/main/java/org/gedcom4j/model/Place.java": [
                53,
                58,
                68,
                83,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                327,
                328,
                329,
                346,
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                355,
                356,
                366,
                367,
                368,
                369,
                370,
                371,
                372,
                373,
                374,
                375,
                376
            ],
            "src/main/java/org/gedcom4j/model/Repository.java": [
                54,
                59,
                74,
                79,
                84,
                89,
                94,
                99,
                101,
                169,
                178,
                251,
                252,
                253,
                254,
                255,
                256,
                272,
                273,
                274
            ],
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": [
                60,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                178,
                179,
                180,
                188,
                189,
                190
            ],
            "src/main/java/org/gedcom4j/model/Source.java": [
                108,
                116,
                117,
                118,
                119,
                120,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                410,
                457,
                458,
                459,
                460,
                461,
                462,
                463,
                464,
                465,
                466,
                467,
                468,
                469,
                487,
                488,
                489,
                517,
                518,
                519,
                527,
                528,
                529,
                534,
                535,
                536,
                537,
                538,
                539,
                540,
                541,
                542,
                543,
                544,
                545,
                546,
                579,
                580,
                581
            ],
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java": [
                43,
                48,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149
            ],
            "src/main/java/org/gedcom4j/model/SourceData.java": [
                53,
                58,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                140,
                168,
                169,
                170,
                188,
                189,
                190,
                198,
                199,
                200
            ],
            "src/main/java/org/gedcom4j/model/SourceSystem.java": [
                55,
                71,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                269
            ],
            "src/main/java/org/gedcom4j/model/StringTree.java": [
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                250,
                251,
                252,
                271
            ],
            "src/main/java/org/gedcom4j/model/Submission.java": [
                43,
                48,
                53,
                58,
                63,
                73,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                234,
                243,
                304,
                305,
                306,
                324,
                325,
                326,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347,
                348,
                349,
                359,
                360,
                361,
                362,
                363,
                364,
                365,
                366,
                367,
                368,
                369,
                379,
                380,
                381,
                382
            ],
            "src/main/java/org/gedcom4j/model/Submitter.java": [
                93,
                98,
                103,
                108,
                113,
                118,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                261,
                272,
                284,
                346,
                353,
                374,
                375,
                376,
                377,
                378,
                379,
                397,
                398,
                399,
                400,
                401,
                402,
                418,
                419,
                420,
                484,
                485,
                486,
                487,
                488
            ],
            "src/main/java/org/gedcom4j/model/UserReference.java": [
                43,
                48,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150
            ],
            "src/main/java/org/gedcom4j/parser/AbstractParser.java": [
                45,
                108,
                109,
                110,
                166,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                229,
                279,
                280,
                281,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                303,
                304
            ],
            "src/main/java/org/gedcom4j/parser/AddressParser.java": [
                65,
                67,
                68,
                69,
                71,
                73,
                75,
                77
            ],
            "src/main/java/org/gedcom4j/parser/AssociationParser.java": [
                65,
                67,
                68,
                73
            ],
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java": [
                32,
                34,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                75
            ],
            "src/main/java/org/gedcom4j/parser/CitationListParser.java": [
                38,
                91,
                94,
                162,
                164,
                168
            ],
            "src/main/java/org/gedcom4j/parser/CorporationParser.java": [
                64,
                66,
                74,
                82
            ],
            "src/main/java/org/gedcom4j/parser/FamilyChildParser.java": [
                65,
                66,
                68,
                72
            ],
            "src/main/java/org/gedcom4j/parser/FamilyEventParser.java": [
                38,
                70,
                72,
                78,
                81,
                82,
                87,
                94,
                101,
                103,
                109,
                111,
                113,
                120,
                127,
                134,
                136,
                139,
                145
            ],
            "src/main/java/org/gedcom4j/parser/FamilyParser.java": [
                38,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                101,
                106,
                109
            ],
            "src/main/java/org/gedcom4j/parser/FileReference551Parser.java": [
                33,
                61,
                68,
                70,
                88,
                94,
                95,
                96,
                97,
                100,
                104
            ],
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java": [
                119
            ],
            "src/main/java/org/gedcom4j/parser/GedcomParser.java": [
                124,
                171,
                172,
                396,
                397,
                398,
                399,
                500,
                501,
                502,
                503,
                504,
                505,
                506,
                507,
                520,
                521,
                522,
                523,
                524,
                525,
                526,
                527,
                528,
                529,
                547,
                550,
                553,
                558,
                570,
                575,
                578,
                581,
                582
            ],
            "src/main/java/org/gedcom4j/parser/GedcomVersionParser.java": [
                32,
                70,
                72
            ],
            "src/main/java/org/gedcom4j/parser/HeaderParser.java": [
                58,
                59,
                60,
                70,
                73,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                86,
                87,
                89,
                90,
                91,
                97,
                99,
                100,
                102
            ],
            "src/main/java/org/gedcom4j/parser/HeaderSourceDataParser.java": [
                63,
                65
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": [
                92,
                93,
                101,
                103,
                105,
                272,
                273
            ],
            "src/main/java/org/gedcom4j/parser/IndividualAttributeParser.java": [
                38,
                70,
                74,
                76,
                82,
                84,
                89,
                91,
                93,
                100,
                107,
                118,
                121,
                122
            ],
            "src/main/java/org/gedcom4j/parser/IndividualEventParser.java": [
                74,
                76,
                82,
                85,
                86,
                91,
                93,
                99,
                101,
                108,
                115,
                117,
                124,
                131,
                139,
                145
            ],
            "src/main/java/org/gedcom4j/parser/IndividualParser.java": [
                85,
                91,
                93,
                100,
                107,
                126,
                127,
                133,
                135,
                137,
                140,
                145,
                161
            ],
            "src/main/java/org/gedcom4j/parser/LdsIndividualOrdinanceParser.java": [
                62,
                66,
                68,
                70,
                72,
                77,
                78
            ],
            "src/main/java/org/gedcom4j/parser/LdsSpouseSealingParser.java": [
                62,
                64,
                66,
                68,
                73,
                74
            ],
            "src/main/java/org/gedcom4j/parser/LinePieces.java": [
                162
            ],
            "src/main/java/org/gedcom4j/parser/MultimediaLinkParser.java": [
                63,
                66,
                144,
                146,
                148,
                150,
                179,
                183,
                184
            ],
            "src/main/java/org/gedcom4j/parser/PersonalNameParser.java": [
                63,
                65,
                67,
                69,
                71,
                73,
                78,
                79,
                88,
                111,
                113,
                115,
                117,
                119,
                121,
                126,
                127,
                129
            ],
            "src/main/java/org/gedcom4j/parser/PlaceParser.java": [
                65,
                70,
                71,
                88,
                106,
                121,
                123
            ],
            "src/main/java/org/gedcom4j/parser/RepositoryParser.java": [
                64,
                70,
                72,
                79,
                86,
                93,
                94,
                100
            ],
            "src/main/java/org/gedcom4j/parser/SourceParser.java": [
                73,
                74,
                75,
                77,
                78,
                79,
                81,
                82,
                83,
                85,
                87,
                88,
                89,
                93,
                94,
                103,
                128,
                129,
                165,
                166,
                168
            ],
            "src/main/java/org/gedcom4j/parser/SourceSystemParser.java": [
                64,
                66
            ],
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java": [
                243,
                244
            ],
            "src/main/java/org/gedcom4j/parser/StringTreeBuilder.java": [
                174
            ],
            "src/main/java/org/gedcom4j/parser/SubmissionParser.java": [
                60,
                61,
                63,
                64,
                66,
                67,
                69,
                70,
                72,
                73,
                75,
                76
            ],
            "src/main/java/org/gedcom4j/parser/SubmitterParser.java": [
                64,
                70,
                72,
                79,
                86,
                93,
                99,
                102,
                104,
                106
            ],
            "src/main/java/org/gedcom4j/parser/Tag.java": [
                49
            ],
            "src/main/java/org/gedcom4j/parser/UserReferenceParser.java": [
                30,
                59,
                63,
                65
            ],
            "src/main/java/org/gedcom4j/query/Finder.java": [
                41
            ],
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                137,
                140,
                209,
                210,
                213,
                223,
                227,
                244,
                247,
                330,
                331,
                333,
                334,
                366,
                367,
                368
            ],
            "src/main/java/org/gedcom4j/relationship/Relationship.java": [
                90
            ],
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": [
                269,
                270,
                271,
                273,
                274,
                282,
                290,
                291,
                292,
                293,
                294,
                309,
                310,
                386,
                431,
                449
            ],
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java": [
                29,
                30,
                31,
                34,
                35,
                37,
                45,
                51,
                60,
                71,
                81,
                95,
                105,
                115,
                116,
                117,
                127,
                138,
                143,
                145,
                154,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                180,
                185,
                186,
                187,
                189,
                190,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                220,
                232,
                233,
                234,
                235,
                236,
                250,
                251,
                252,
                253,
                254,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                286,
                287,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                322,
                323,
                324,
                325,
                331,
                332,
                333,
                334,
                335,
                336,
                337,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347,
                348,
                349,
                350,
                351,
                352,
                362,
                363,
                369,
                371,
                372,
                373,
                381,
                382,
                383,
                393,
                394,
                396,
                397,
                398,
                399,
                400,
                401,
                402,
                403,
                404,
                405,
                406,
                407,
                408,
                409,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                418,
                419,
                420,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                428,
                433,
                444,
                445,
                446,
                447,
                448,
                449,
                450,
                451,
                461,
                462,
                463,
                464,
                465,
                466,
                467,
                468,
                469,
                470,
                471,
                472
            ],
            "src/main/java/org/gedcom4j/validate/AddressValidator.java": [
                42,
                68,
                69,
                70,
                72
            ],
            "src/main/java/org/gedcom4j/validate/CitationValidator.java": [
                32,
                48,
                59,
                64,
                65,
                75,
                77,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                107,
                108,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                126,
                127
            ],
            "src/main/java/org/gedcom4j/validate/EventValidator.java": [
                32,
                33,
                34,
                35,
                57,
                58,
                59,
                60,
                69,
                70,
                74,
                75,
                85,
                86,
                87,
                88,
                89,
                90,
                92,
                94,
                99,
                100,
                101,
                102,
                104,
                106,
                107,
                109,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                166,
                172,
                173,
                174,
                175,
                181,
                182,
                183,
                185,
                186,
                187,
                188,
                191
            ],
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java": [
                65,
                66,
                75,
                78,
                79,
                82,
                86,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                125,
                127,
                128,
                129,
                130,
                131,
                140,
                141,
                142,
                143,
                144,
                149,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165
            ],
            "src/main/java/org/gedcom4j/validate/HeaderValidator.java": [
                39,
                54,
                68,
                69,
                82,
                83,
                84,
                85,
                90,
                91,
                92,
                93,
                94,
                95,
                97,
                98,
                106,
                107,
                108,
                110,
                116,
                117,
                118,
                119,
                120,
                121,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                165,
                166,
                167,
                170,
                175,
                178,
                180,
                182,
                183,
                184,
                185,
                187,
                191,
                195,
                196,
                197,
                202,
                203,
                204,
                207,
                208,
                209,
                211,
                212,
                213,
                214,
                215
            ],
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java": [
                32,
                40,
                63,
                68,
                69,
                78,
                79,
                81,
                82,
                83,
                84,
                85,
                86,
                90,
                91,
                92,
                93,
                94,
                95,
                98,
                99,
                101,
                102,
                103,
                106,
                107,
                115,
                116,
                124,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                155,
                156,
                157,
                163,
                165,
                166,
                167,
                168,
                169,
                170,
                177,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                197,
                200,
                201,
                202,
                203
            ],
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java": [
                41,
                58,
                59,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                77,
                79
            ],
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java": [
                31,
                65,
                70,
                71,
                72,
                73,
                76,
                77,
                78,
                79,
                85,
                89,
                90,
                91,
                92,
                118,
                119,
                120,
                121,
                128,
                129,
                130,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                146,
                158,
                159,
                165,
                166,
                167,
                181,
                189,
                190,
                191,
                192,
                193,
                199,
                200,
                201,
                202,
                203,
                207,
                216,
                219,
                220,
                221,
                222,
                224,
                225
            ],
            "src/main/java/org/gedcom4j/validate/NameVariationValidator.java": [
                42,
                52,
                53,
                67,
                68
            ],
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java": [
                42,
                57,
                58,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                79,
                81,
                84,
                86,
                87,
                88,
                89,
                90,
                91,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126
            ],
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java": [
                39,
                51,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                74
            ],
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java": [
                42,
                58,
                59,
                68,
                69,
                71,
                72,
                73,
                74,
                76,
                79,
                80,
                81,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                91,
                92,
                93,
                96,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109
            ],
            "src/main/java/org/gedcom4j/validate/RepositoryValidator.java": [
                41,
                51,
                52,
                56,
                57,
                66,
                67,
                69,
                71,
                72,
                73,
                77
            ],
            "src/main/java/org/gedcom4j/validate/SourceValidator.java": [
                32,
                40,
                65,
                66,
                75,
                79,
                80,
                83,
                84,
                86,
                87,
                91,
                92,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                104,
                107,
                108,
                109,
                110,
                111,
                113,
                118,
                119,
                131,
                132,
                133,
                134,
                142
            ],
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java": [
                31,
                33,
                46,
                57,
                62,
                63,
                72,
                73,
                75,
                76,
                87,
                88,
                90,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99
            ],
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java": [
                34,
                35,
                36,
                38,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                237,
                238,
                241,
                242,
                283,
                290,
                351,
                352,
                353,
                354,
                355,
                356,
                357,
                358,
                359,
                360,
                361,
                362,
                366,
                377,
                378,
                379,
                380,
                381,
                382,
                385,
                386,
                388,
                398,
                399,
                400,
                401,
                473,
                478,
                481,
                500
            ],
            "src/main/java/org/gedcom4j/writer/AddressEmitter.java": [
                67,
                72
            ],
            "src/main/java/org/gedcom4j/writer/ChangeDateEmitter.java": [
                63
            ],
            "src/main/java/org/gedcom4j/writer/EventEmitter.java": [
                70,
                72,
                73
            ],
            "src/main/java/org/gedcom4j/writer/FamilyEmitter.java": [
                77,
                78,
                79,
                80,
                82,
                83,
                84,
                85,
                88,
                89,
                90,
                91,
                92,
                94,
                95,
                100,
                101,
                122
            ],
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": [
                113,
                160,
                187,
                194,
                195,
                250,
                251,
                252,
                253,
                254,
                307,
                308,
                358,
                359,
                360,
                361,
                362,
                363,
                364,
                365,
                366,
                367,
                418,
                479,
                480,
                481,
                482,
                483,
                484,
                487,
                488,
                489,
                502
            ],
            "src/main/java/org/gedcom4j/writer/HeaderEmitter.java": [
                75,
                76,
                77,
                79,
                80,
                81,
                83,
                85,
                87,
                90,
                91,
                93,
                94,
                126,
                127,
                128,
                130
            ],
            "src/main/java/org/gedcom4j/writer/IndividualEmitter.java": [
                97,
                111,
                113,
                246,
                262,
                263,
                282,
                301,
                326,
                327,
                328
            ],
            "src/main/java/org/gedcom4j/writer/Multimedia551Emitter.java": [
                78,
                88,
                89,
                91
            ],
            "src/main/java/org/gedcom4j/writer/Multimedia55Emitter.java": [
                72,
                77,
                78,
                79,
                94
            ],
            "src/main/java/org/gedcom4j/writer/MultimediaLinksEmitter.java": [
                57,
                58,
                71,
                73,
                74,
                75,
                76,
                77,
                79,
                80,
                100,
                109
            ],
            "src/main/java/org/gedcom4j/writer/PlaceEmitter.java": [
                67,
                68,
                101
            ],
            "src/main/java/org/gedcom4j/writer/RepositoryEmitter.java": [
                67,
                75,
                76,
                77,
                78,
                80
            ],
            "src/main/java/org/gedcom4j/writer/SourceEmitter.java": [
                74,
                75,
                76,
                79,
                82,
                83,
                92
            ],
            "src/main/java/org/gedcom4j/writer/SubmittersEmitter.java": [
                33,
                72,
                76,
                77,
                78,
                79,
                83
            ],
            "src/test/java/org/gedcom4j/io/reader/GedcomFileReaderTest.java": [
                38,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                258,
                259,
                260
            ],
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java": [
                38,
                91,
                92
            ],
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java": [
                39,
                85
            ],
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java": [
                38,
                40,
                88,
                89,
                90,
                91,
                92,
                93,
                95
            ],
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": [
                42,
                44
            ],
            "src/test/java/org/gedcom4j/model/AssociationTest.java": [
                52,
                54,
                56,
                58,
                70,
                72,
                74,
                76,
                88,
                90,
                92,
                94,
                111,
                113,
                115,
                117,
                129,
                131,
                133,
                135,
                147,
                149,
                151,
                153
            ],
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java": [
                51,
                53,
                67,
                69
            ],
            "src/test/java/org/gedcom4j/model/CitationDataTest.java": [
                78,
                84,
                91,
                93,
                100,
                102,
                121,
                127,
                134,
                136,
                143,
                145,
                164,
                165,
                177,
                180,
                181
            ],
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java": [
                33,
                67,
                70,
                83,
                86,
                115,
                118,
                131,
                134,
                147,
                150,
                179,
                182,
                238,
                241,
                254,
                257,
                286,
                289,
                302,
                305
            ],
            "src/test/java/org/gedcom4j/model/FamilyTest.java": [
                62,
                65,
                66,
                68,
                71,
                72,
                78,
                81,
                82,
                84,
                87,
                88,
                167
            ],
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java": [
                50,
                52,
                66,
                68
            ],
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java": [
                52,
                54,
                56,
                58,
                65,
                67,
                70,
                72,
                74,
                76,
                92,
                94,
                96,
                98,
                105,
                107,
                110,
                112,
                114,
                116
            ],
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java": [
                34,
                62,
                67,
                77,
                82,
                87,
                92,
                97,
                102,
                107,
                112,
                122,
                127,
                132,
                137,
                147,
                152,
                176,
                181,
                191,
                196,
                201,
                206,
                211,
                216,
                221,
                226,
                236,
                241,
                246,
                251,
                261,
                266,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                294,
                295,
                296,
                297,
                300,
                301,
                302,
                303,
                304,
                306
            ],
            "src/test/java/org/gedcom4j/model/IndividualTest.java": [
                39,
                40,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                105,
                110,
                111,
                112,
                113,
                173,
                174,
                229,
                259,
                264,
                265,
                272,
                335,
                339
            ],
            "src/test/java/org/gedcom4j/model/Issue115Test.java": [
                125,
                126
            ],
            "src/test/java/org/gedcom4j/model/Issue88Test.java": [
                32,
                54,
                75,
                80,
                100
            ],
            "src/test/java/org/gedcom4j/model/LdsSpouseSealingTest.java": [
                58,
                60,
                63,
                65,
                68,
                70,
                73,
                75,
                95,
                97,
                100,
                102,
                105,
                107,
                110,
                112,
                125,
                126,
                127,
                128,
                131
            ],
            "src/test/java/org/gedcom4j/model/NameVariationTest.java": [
                54,
                56,
                58,
                66,
                84,
                86,
                88,
                96,
                111,
                112,
                113
            ],
            "src/test/java/org/gedcom4j/model/PersonalNameVariationTest.java": [
                61,
                63,
                65,
                68,
                70,
                73,
                75,
                78,
                80,
                82,
                85,
                87,
                90,
                92,
                95,
                97,
                100,
                102,
                110,
                135,
                137,
                139,
                142,
                144,
                147,
                149,
                152,
                154,
                156,
                159,
                161,
                164,
                166,
                169,
                171,
                174,
                176,
                184,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                209
            ],
            "src/test/java/org/gedcom4j/model/RepositoryTest.java": [
                70,
                72,
                79,
                81,
                83,
                85,
                88,
                90,
                92,
                94,
                97,
                99,
                106,
                108,
                110,
                112,
                146,
                148,
                155,
                157,
                159,
                161,
                164,
                166,
                168,
                170,
                173,
                175,
                182,
                184,
                186,
                188
            ],
            "src/test/java/org/gedcom4j/model/SourceCallNumberTest.java": [
                59,
                62,
                74,
                77
            ],
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java": [
                51,
                53,
                55,
                57,
                81
            ],
            "src/test/java/org/gedcom4j/model/SourceTest.java": [
                58,
                60,
                62,
                70,
                72,
                75,
                77,
                80,
                82,
                85,
                87,
                90,
                92,
                93,
                95,
                96,
                97,
                98,
                100,
                101,
                102,
                110,
                111,
                112,
                113,
                115,
                116,
                117,
                118,
                120,
                125,
                127,
                130,
                132,
                157,
                159,
                161,
                169,
                171,
                174,
                176,
                179,
                181,
                184,
                186,
                189,
                191,
                192,
                194,
                195,
                196,
                197,
                199,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                221,
                224,
                226
            ],
            "src/test/java/org/gedcom4j/model/StringTreeTest.java": [
                71,
                108,
                132,
                154,
                155,
                161,
                162,
                168,
                169,
                174,
                175
            ],
            "src/test/java/org/gedcom4j/model/TestHelper.java": [
                46,
                49,
                51
            ],
            "src/test/java/org/gedcom4j/parser/GedcomParser551Test.java": [
                238,
                239,
                274,
                364,
                368,
                571,
                572
            ],
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java": [
                115,
                143,
                164,
                323,
                351,
                359,
                378,
                390,
                401,
                404,
                411,
                421,
                422,
                427,
                430,
                431,
                434,
                437,
                444,
                445,
                448,
                465,
                478,
                481
            ],
            "src/test/java/org/gedcom4j/parser/Issue100Test.java": [
                40,
                77,
                78,
                79
            ],
            "src/test/java/org/gedcom4j/parser/Issue102Test.java": [
                38,
                68,
                73,
                74,
                75,
                77,
                136,
                141,
                145,
                146
            ],
            "src/test/java/org/gedcom4j/parser/Issue32Test.java": [
                39,
                72,
                78,
                91,
                92,
                93,
                94,
                113,
                116
            ],
            "src/test/java/org/gedcom4j/parser/Issue61Test.java": [
                38,
                69,
                70,
                71,
                72,
                75,
                76,
                79,
                108,
                109,
                111
            ],
            "src/test/java/org/gedcom4j/parser/Issue63Test.java": [
                67,
                68,
                76
            ],
            "src/test/java/org/gedcom4j/parser/Issue87Test.java": [
                39
            ],
            "src/test/java/org/gedcom4j/parser/Issue96Test.java": [
                37,
                71
            ],
            "src/test/java/org/gedcom4j/parser/StressFileSpecialCharacterReadTest.java": [
                36,
                81,
                101,
                121,
                141,
                160,
                180,
                200,
                220,
                240,
                260,
                281,
                301,
                321,
                341,
                361,
                381,
                401,
                421
            ],
            "src/test/java/org/gedcom4j/parser/TagTest.java": [
                46
            ],
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": [
                106
            ],
            "src/test/java/org/gedcom4j/relationship/RelationshipCalculatorTest.java": [
                216,
                264,
                312
            ],
            "src/test/java/org/gedcom4j/validate/AbstractValidatorTestCase.java": [
                31,
                61,
                69,
                70,
                71,
                77,
                78,
                79,
                80,
                81,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                103,
                104,
                105,
                106,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                125,
                126,
                127,
                128,
                129
            ],
            "src/test/java/org/gedcom4j/validate/CitationValidatorTest.java": [
                29,
                30,
                45,
                46,
                48
            ],
            "src/test/java/org/gedcom4j/validate/FamilyValidatorTest.java": [
                31,
                32,
                61,
                78,
                79,
                82,
                91,
                93,
                94,
                95,
                100,
                101,
                102,
                103,
                104,
                114,
                119,
                125,
                126,
                137,
                147,
                150,
                151,
                171,
                187
            ],
            "src/test/java/org/gedcom4j/validate/HeaderValidatorTest.java": [
                39,
                55,
                58,
                60,
                61,
                63,
                67,
                68,
                71,
                75,
                76,
                77,
                79,
                84,
                85,
                98,
                99,
                101,
                116,
                117,
                118,
                120,
                121,
                124,
                125,
                128,
                131,
                141,
                143,
                147,
                148,
                149,
                150,
                152,
                164,
                165,
                166,
                167,
                168,
                169,
                173,
                174,
                182,
                186,
                190,
                191,
                194,
                198,
                202,
                206,
                207,
                210
            ],
            "src/test/java/org/gedcom4j/validate/IndividualEventValidatorTest.java": [
                51,
                60,
                64,
                68,
                72,
                76,
                80,
                84
            ],
            "src/test/java/org/gedcom4j/validate/IndividualValidatorTest.java": [
                53,
                55,
                72,
                73,
                77,
                79,
                82,
                83
            ],
            "src/test/java/org/gedcom4j/validate/Issue111Test.java": [
                52,
                64,
                65,
                66,
                68,
                69,
                70,
                72
            ],
            "src/test/java/org/gedcom4j/validate/LdsSpouseSealingValidatorTest.java": [
                31,
                57,
                74,
                75,
                78,
                91,
                96,
                99,
                103,
                104,
                115,
                116,
                117,
                123,
                124,
                125,
                127,
                128,
                130,
                131,
                132,
                134,
                135,
                136,
                148,
                149,
                159,
                170,
                171,
                172,
                174,
                175,
                178,
                179,
                182,
                183,
                194,
                195,
                196,
                197,
                198,
                199,
                201,
                202,
                203,
                206,
                207,
                210,
                211,
                212,
                226,
                227,
                230,
                231,
                234,
                235,
                236
            ],
            "src/test/java/org/gedcom4j/validate/MultimediaValidatorTest.java": [
                56,
                59,
                61,
                62,
                75,
                78,
                79,
                83,
                84,
                87,
                88,
                92,
                93,
                94,
                95,
                98
            ],
            "src/test/java/org/gedcom4j/validate/PersonalNameValidatorTest.java": [
                31,
                59,
                60,
                69,
                79,
                80,
                84,
                88,
                100,
                101,
                102,
                104,
                106,
                108,
                118,
                119,
                120,
                122,
                124,
                126,
                136,
                138,
                139,
                151,
                152,
                160,
                161,
                162,
                165,
                166,
                169,
                178,
                179,
                180,
                183,
                184,
                187,
                196,
                197,
                198,
                201,
                202,
                205,
                214,
                215,
                216,
                219,
                220,
                223
            ],
            "src/test/java/org/gedcom4j/validate/PersonalNameVariationValidatorTest.java": [
                50,
                61,
                66,
                67,
                68,
                71,
                76,
                77,
                78,
                81
            ],
            "src/test/java/org/gedcom4j/validate/SourceValidatorTest.java": [
                46,
                47,
                49,
                50,
                61,
                63,
                73,
                74,
                82,
                84
            ],
            "src/test/java/org/gedcom4j/validate/SubmitterValidatorTest.java": [
                43,
                45,
                55,
                57,
                59,
                69,
                70,
                81,
                83,
                85,
                95,
                106,
                107,
                109
            ],
            "src/test/java/org/gedcom4j/writer/EventsWithDescriptionsTest.java": [
                42,
                152,
                153
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriter551Test.java": [
                77,
                78,
                82,
                88,
                91,
                98,
                99,
                194,
                238,
                265,
                266,
                267,
                268,
                271,
                273,
                292,
                328,
                347,
                363,
                382,
                402,
                404,
                421
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterConstructionProgressAndCancellationTest.java": [
                37,
                39
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": [
                46,
                69,
                142,
                146,
                149,
                150,
                170,
                173,
                174,
                198,
                200,
                203,
                207,
                212,
                213,
                214,
                215,
                234,
                235,
                236,
                237,
                238,
                242,
                246,
                251,
                252,
                253,
                254,
                273,
                274,
                275,
                276,
                277,
                279,
                282,
                286,
                291,
                313,
                314,
                315,
                316,
                317,
                321,
                325,
                352,
                353,
                354,
                355,
                356,
                360,
                391,
                392,
                393,
                394,
                395,
                408,
                409,
                410,
                411,
                430,
                431,
                447,
                448,
                449,
                450,
                481,
                486,
                487,
                488,
                489,
                511,
                512,
                516,
                520,
                521,
                522,
                523,
                527,
                528,
                529,
                530
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java": [
                106,
                244,
                245,
                404,
                424
            ],
            "src/test/java/org/gedcom4j/writer/Issue80WriterTest.java": [
                65,
                81,
                82
            ],
            "src/test/java/org/gedcom4j/writer/Issue89Test.java": [
                29,
                34,
                61,
                64,
                69,
                71,
                73,
                75,
                76,
                78,
                79,
                81,
                83,
                84,
                85,
                93,
                94,
                96
            ],
            "src/test/java/org/gedcom4j/writer/Issue95Test.java": [
                39,
                67,
                81,
                82,
                83,
                84,
                85,
                88,
                98,
                99,
                102
            ],
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": [
                36,
                38,
                59,
                63,
                65
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/gedcom4j/io/encoding/AnselMapping.java": "        return (c >= 0x0300 && c <= 0x0333) || (c >= 0xFE20 && c <= 0xFE23);\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": "            }\n                    lineBuffer.setLength(0);\n",
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": "            }\n                    lineBuffer.setLength(0);\n",
            "src/main/java/org/gedcom4j/model/AbstractElement.java": "import java.io.Serializable;\npublic abstract class AbstractElement implements Serializable {\n    protected List<StringTree> customTags = getCustomTags(Options.isCollectionInitializationEnabled());\n            }\n        } else if (!getCustomTags().equals(other.getCustomTags())) {\n        return true;\n        return customTags;\n        if (initializeIfNeeded && customTags == null) {\n        }\n        return customTags;\n    }\n    @Override\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": "            if (other.restrictionNotice != null) {\n            }\n        }\n            multimedia = new ArrayList<Multimedia>(0);\n    public List<Note> getNotes() {\n    }\n        return restrictionNotice;\n        result = prime * result + (place == null ? 0 : place.hashCode());\n        result = prime * result + (respAgency == null ? 0 : respAgency.hashCode());\n        result = prime * result + (subType == null ? 0 : subType.hashCode());\n    public void setCause(StringWithCustomTags cause) {\n",
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": "    protected StringWithCustomTags date;\n    protected List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    protected StringWithCustomTags place;\n    protected StringWithCustomTags status;\n        }\n    public StringWithCustomTags getDate() {\n    public List<Note> getNotes() {\n    }\n        result = prime * result + (temple == null ? 0 : temple.hashCode());\n    public void setDate(StringWithCustomTags date) {\n        this.status = status;\n    }\n        if (citations != null) {\n            builder.append(\"citations=\");\n            builder.append(citations);\n",
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java": "    protected StringWithCustomTags variationType;\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Address.java": "    }\n    }\n    }\n    }\n    }\n    }\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Association.java": "public class Association extends AbstractElement {\n    private StringWithCustomTags associatedEntityType;\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags relationship;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n        if (relationship == null) {\n            if (other.relationship != null) {\n                return false;\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n            builder.append(\"relationship=\");\n            builder.append(relationship);\n            builder.append(\", \");\n        }\n        if (customTags != null) {\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/ChangeDate.java": "    private static final long serialVersionUID = 6134688970119877487L;\n    private StringWithCustomTags date;\n            if (other.time != null) {\n        result = prime * result + (time == null ? 0 : time.hashCode());\n        return result;\n    }\n    public void setDate(StringWithCustomTags date) {\n        this.date = date;\n    }\n",
            "src/main/java/org/gedcom4j/model/CharacterSet.java": "    private StringWithCustomTags characterSetName = new StringWithCustomTags(Encoding.ANSEL.toString());\n    private StringWithCustomTags versionNum;\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/CitationData.java": "    private StringWithCustomTags entryDate;\n    private List<List<String>> sourceText = getSourceText(Options.isCollectionInitializationEnabled());\n        }\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": "    private StringWithCustomTags certainty;\n    private StringWithCustomTags eventCited;\n        }\n                return false;\n            }\n        } else if (!certainty.equals(other.certainty)) {\n            return false;\n        }\n        if (data == null) {\n            if (other.data != null) {\n                return false;\n            }\n        } else if (!multimedia.equals(other.multimedia)) {\n            return false;\n        }\n        if (getNotes() == null) {\n            if (other.getNotes() != null) {\n                return false;\n            }\n        } else if (!getNotes().equals(other.getNotes())) {\n            return false;\n        }\n        if (roleInEvent == null) {\n            if (other.roleInEvent != null) {\n    public StringWithCustomTags getCertainty() {\n        return certainty;\n    }\n    }\n    public List<Multimedia> getMultimedia() {\n        return multimedia;\n    }\n    public List<Multimedia> getMultimedia(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && multimedia == null) {\n            multimedia = new ArrayList<Multimedia>(0);\n        }\n        return multimedia;\n    }\n    }\n    }\n        result = prime * result + (roleInEvent == null ? 0 : roleInEvent.hashCode());\n        result = prime * result + (source == null ? 0 : source.hashCode());\n        result = prime * result + (whereInSource == null ? 0 : whereInSource.hashCode());\n        return result;\n    }\n    public void setCertainty(StringWithCustomTags certainty) {\n    }\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": "        CitationWithoutSource other = (CitationWithoutSource) obj;\n            }\n        } else if (!getNotes().equals(other.getNotes())) {\n            return false;\n        }\n        if (textFromSource == null) {\n            if (other.textFromSource != null) {\n                return false;\n        }\n",
            "src/main/java/org/gedcom4j/model/EventRecorded.java": "    private StringWithCustomTags datePeriod;\n    private String eventType;\n    private StringWithCustomTags jurisdiction;\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Family.java": "        } else if (!restrictionNotice.equals(other.restrictionNotice)) {\n    public List<Individual> getChildren() {\n        if (initializeIfNeeded && events == null) {\n        if (initializeIfNeeded && ldsSpouseSealings == null) {\n    public List<Multimedia> getMultimedia() {\n        if (initializeIfNeeded && multimedia == null) {\n        return notes;\n    public List<Submitter> getSubmitters(boolean initializeIfNeeded) {\n    public String getXref() {\n        result = prime * result + (numChildren == null ? 0 : numChildren.hashCode());\n        }\n        if (changeDate != null) {\n            builder.append(\"changeDate=\");\n        }\n        if (numChildren != null) {\n            builder.append(\"numChildren=\");\n",
            "src/main/java/org/gedcom4j/model/FamilyChild.java": "import java.util.ArrayList;\nimport java.util.List;\nimport org.gedcom4j.Options;\npublic class FamilyChild extends AbstractElement {\n    private AdoptedByWhichParent adoptedBy;\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags pedigree;\n    private StringWithCustomTags status;\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n        if (pedigree == null) {\n            if (other.pedigree != null) {\n                return false;\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n            builder.append(\"pedigree=\");\n            builder.append(pedigree);\n            builder.append(\", \");\n        }\n        if (status != null) {\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/FamilyEvent.java": "    private StringWithCustomTags husbandAge;\n    private StringWithCustomTags wifeAge;\n    public StringWithCustomTags getHusbandAge() {\n    public StringWithCustomTags getWifeAge() {\n    public void setHusbandAge(StringWithCustomTags husbandAge) {\n    public void setWifeAge(StringWithCustomTags wifeAge) {\n",
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": "import java.util.ArrayList;\nimport java.util.List;\nimport org.gedcom4j.Options;\npublic class FamilySpouse extends AbstractElement {\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n            }\n        } else if (!notes.equals(other.notes)) {\n            return false;\n        }\n        return true;\n    }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n        }\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/FileReference.java": "    private StringWithCustomTags format;\n    private StringWithCustomTags mediaType;\n    private StringWithCustomTags referenceToFile;\n    private StringWithCustomTags title;\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Gedcom.java": "    public Submission getSubmission() {\n    }\n",
            "src/main/java/org/gedcom4j/model/GedcomVersion.java": "    private StringWithCustomTags gedcomForm = new StringWithCustomTags(\"LINEAGE-LINKED\");\n    private SupportedVersion versionNumber = SupportedVersion.V5_5_1;\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Header.java": "    private StringWithCustomTags destinationSystem;\n    private StringWithCustomTags fileName;\n    private GedcomVersion gedcomVersion = new GedcomVersion();\n        }\n        if (sourceSystem == null) {\n            }\n        }\n        if (submission == null) {\n            }\n        return copyrightData;\n        return date;\n        return destinationSystem;\n        return gedcomVersion;\n        return language;\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        return notes;\n        result = prime * result + (fileName == null ? 0 : fileName.hashCode());\n        return result;\n        this.characterSet = characterSet;\n        this.destinationSystem = destinationSystem;\n        this.fileName = fileName;\n        this.language = language;\n    }\n        this.placeHierarchy = placeHierarchy;\n    }\n        this.sourceSystem = sourceSystem;\n            builder.append(\"copyrightData=\");\n            builder.append(copyrightData);\n            builder.append(\", \");\n            builder.append(\"fileName=\");\n            builder.append(fileName);\n            builder.append(\", \");\n            builder.append(\"gedcomVersion=\");\n            builder.append(\", \");\n            builder.append(\"notes=\");\n            builder.append(notes);\n            builder.append(\", \");\n",
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java": "    private StringWithCustomTags copyright;\n    private String name = \"UNSPECIFIED\";\n    private StringWithCustomTags publishDate;\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Individual.java": "    private List<LdsIndividualOrdinance> ldsIndividualOrdinances = getLdsIndividualOrdinances(Options\n            .isCollectionInitializationEnabled());\n        } else if (!familiesWhereChild.equals(other.familiesWhereChild)) {\n            return false;\n        }\n        if (familiesWhereSpouse == null) {\n            if (other.familiesWhereSpouse != null) {\n                return false;\n            }\n            if (other.faxNumbers != null) {\n                return false;\n            if (other.emails != null) {\n            return false;\n            familiesWhereSpouse = new ArrayList<FamilySpouse>(0);\n        }\n        return familiesWhereSpouse;\n    }\n    public List<StringWithCustomTags> getFaxNumbers() {\n        return faxNumbers;\n    }\n    public List<StringWithCustomTags> getFaxNumbers(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && faxNumbers == null) {\n            faxNumbers = new ArrayList<StringWithCustomTags>(0);\n        }\n        return faxNumbers;\n                sb.append(n);\n        return multimedia;\n    }\n                    result.add(fam.getHusband());\n    public List<StringWithCustomTags> getWwwUrls() {\n    }\n    public List<StringWithCustomTags> getWwwUrls(boolean initializeIfNeeded) {\n        }\n    }\n    public void setAddress(Address address) {\n        this.permanentRecFileNumber = permanentRecFileNumber;\n    }\n",
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java": "    }\n        if (place != null) {\n            builder.append(\"place=\");\n            builder.append(place);\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java": "        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Multimedia.java": "    private Multimedia continuedObject;\n    private StringWithCustomTags embeddedMediaFormat;\n            citations = new ArrayList<AbstractCitation>(0);\n            fileReferences = new ArrayList<FileReference>(0);\n        final int prime = 31;\n        int result = super.hashCode();\n        result = prime * result + (embeddedTitle == null ? 0 : embeddedTitle.hashCode());\n            builder.append(\", \");\n        }\n        if (changeDate != null) {\n            builder.append(\", \");\n        }\n        if (embeddedTitle != null) {\n",
            "src/main/java/org/gedcom4j/model/PersonalName.java": "        return citations;\n        return givenName;\n        }\n    public StringWithCustomTags getPrefix() {\n    public List<PersonalNameVariation> getRomanized() {\n        result = prime * result + (basic == null ? 0 : basic.hashCode());\n        result = prime * result + (phonetic == null ? 0 : phonetic.hashCode());\n    public void setBasic(String basic) {\n    public void setGivenName(StringWithCustomTags givenName) {\n    public void setNickname(StringWithCustomTags nickname) {\n    public void setPrefix(StringWithCustomTags prefix) {\n",
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": "    private StringWithCustomTags givenName;\n    private StringWithCustomTags nickname;\n    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n    private StringWithCustomTags prefix;\n    private StringWithCustomTags suffix;\n    private StringWithCustomTags surname;\n    private StringWithCustomTags surnamePrefix;\n        if (notes == null) {\n            if (other.notes != null) {\n        } else if (!notes.equals(other.notes)) {\n    public StringWithCustomTags getGivenName() {\n    public StringWithCustomTags getNickname() {\n    public List<Note> getNotes() {\n        return notes;\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        return notes;\n    public StringWithCustomTags getPrefix() {\n    public StringWithCustomTags getSuffix() {\n    public StringWithCustomTags getSurname() {\n    public StringWithCustomTags getSurnamePrefix() {\n        result = prime * result + (notes == null ? 0 : notes.hashCode());\n    public void setGivenName(StringWithCustomTags givenName) {\n    public void setNickname(StringWithCustomTags nickname) {\n    public void setPrefix(StringWithCustomTags prefix) {\n    public void setSuffix(StringWithCustomTags suffix) {\n    public void setSurname(StringWithCustomTags surname) {\n    public void setSurnamePrefix(StringWithCustomTags surnamePrefix) {\n        if (notes != null) {\n            builder.append(\"notes=\");\n            builder.append(notes);\n        if (customTags != null) {\n            builder.append(\"customTags=\");\n            builder.append(customTags);\n",
            "src/main/java/org/gedcom4j/model/Place.java": "    private StringWithCustomTags latitude;\n    private StringWithCustomTags longitude;\n    private List<AbstractNameVariation> phonetic = getPhonetic(Options.isCollectionInitializationEnabled());\n        }\n    public StringWithCustomTags getLatitude() {\n            notes = new ArrayList<Note>(0);\n    @Override\n        result = prime * result + (placeName == null ? 0 : placeName.hashCode());\n        }\n        if (longitude != null) {\n            builder.append(\"longitude=\");\n",
            "src/main/java/org/gedcom4j/model/Repository.java": "    private ChangeDate changeDate;\n    private List<StringWithCustomTags> emails = getEmails(Options.isCollectionInitializationEnabled());\n        } else if (!faxNumbers.equals(other.faxNumbers)) {\n        }\n        return true;\n    }\n",
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": "    public int hashCode() {\n        final int prime = 31;\n        int result = super.hashCode();\n",
            "src/main/java/org/gedcom4j/model/Source.java": "    public List<Multimedia> getMultimedia() {\n        if (initializeIfNeeded && multimedia == null) {\n            multimedia = new ArrayList<Multimedia>(0);\n        }\n        return multimedia;\n    }\n    public List<Note> getNotes() {\n        return notes;\n    }\n    public List<Note> getNotes(boolean initializeIfNeeded) {\n        if (initializeIfNeeded && notes == null) {\n            notes = new ArrayList<Note>(0);\n        }\n        return notes;\n    }\n    public List<String> getOriginatorsAuthors() {\n        return originatorsAuthors;\n    }\n    public List<String> getOriginatorsAuthors(boolean initializeIfNeeded) {\n        return publicationFacts;\n    }\n    public StringWithCustomTags getRecIdNumber() {\n        return recIdNumber;\n    }\n    public StringWithCustomTags getSourceFiledBy() {\n        return sourceFiledBy;\n    }\n    public List<String> getSourceText() {\n        return sourceText;\n    }\n        result = prime * result + (recIdNumber == null ? 0 : recIdNumber.hashCode());\n    public void setSourceFiledBy(StringWithCustomTags sourceFiledBy) {\n        this.sourceFiledBy = sourceFiledBy;\n    }\n        }\n        if (recIdNumber != null) {\n            builder.append(\"recIdNumber=\");\n",
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java": "    private StringWithCustomTags callNumber;\n    private StringWithCustomTags mediaType;\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/SourceData.java": "    private List<Note> notes = getNotes(Options.isCollectionInitializationEnabled());\n        }\n        if (initializeIfNeeded && notes == null) {\n    public int hashCode() {\n        final int prime = 31;\n        int result = super.hashCode();\n",
            "src/main/java/org/gedcom4j/model/SourceSystem.java": "    private StringWithCustomTags productName;\n    }\n    }\n        return builder.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/StringTree.java": "import java.io.Serializable;\npublic class StringTree implements Serializable {\n    private String id;\n        if (id == null) {\n            if (other.id != null) {\n        } else if (!id.equals(other.id)) {\n    public String getId() {\n        return id;\n    }\n        result = prime * result + (id == null ? 0 : id.hashCode());\n    public void setId(String id) {\n        this.id = id;\n    }\n        StringBuilder sb = new StringBuilder(\"Line \" + lineNum + \": \" + level + (id == null ? \"\" : \" \" + id) + \" \" + (tag == null ? \"(null tag)\" : tag) + \" \"\n                + (value == null ? \"(null value)\" : value));\n",
            "src/main/java/org/gedcom4j/model/Submission.java": "    private StringWithCustomTags ancestorsCount;\n    private StringWithCustomTags descendantsCount;\n    private StringWithCustomTags nameOfFamilyFile;\n    private StringWithCustomTags ordinanceProcessFlag;\n    private StringWithCustomTags recIdNumber;\n    private StringWithCustomTags templeCode;\n    }\n}\n",
            "src/main/java/org/gedcom4j/model/Submitter.java": "            if (other.phoneNumbers != null) {\n            return false;\n            }\n        if (regFileNumber == null) {\n            return false;\n        return true;\n        return address;\n    }\n    }\n",
            "src/main/java/org/gedcom4j/model/Trailer.java": "import java.io.Serializable;\npublic class Trailer implements Serializable {\n",
            "src/main/java/org/gedcom4j/model/UserReference.java": "    private StringWithCustomTags referenceNum;\n    private StringWithCustomTags type;\n    }\n}\n",
            "src/main/java/org/gedcom4j/parser/AbstractParser.java": "    protected Family getFamily(String xref) {\n        if (node.getTag().length() > 0 && (node.getTag().charAt(0) == '_') || !gedcomParser.isStrictCustomTags()) {\n        while (st.getParent() != null) {\n            st = st.getParent();\n            sb.append(\", child of \").append(st.getTag() == null ? null : st.getTag());\n    abstract void parse();\n",
            "src/main/java/org/gedcom4j/parser/AddressParser.java": "import org.gedcom4j.model.StringWithCustomTags;\n                    loadInto.setAddr1(new StringWithCustomTags(ch));\n                    loadInto.setAddr2(new StringWithCustomTags(ch));\n                    loadInto.setCity(new StringWithCustomTags(ch));\n                    loadInto.setStateProvince(new StringWithCustomTags(ch));\n                    loadInto.setPostalCode(new StringWithCustomTags(ch));\n                    loadInto.setCountry(new StringWithCustomTags(ch));\n",
            "src/main/java/org/gedcom4j/parser/AssociationParser.java": "                } else if (Tag.SOURCE.equalsText(ch.getTag())) {\n                    new CitationListParser(gedcomParser, ch, citations).parse();\n                } else if (Tag.TYPE.equalsText(ch.getTag())) {\n            }\n",
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java": "import org.gedcom4j.model.Note;\nimport org.gedcom4j.model.StringWithCustomTags;\n                    loadInto.setDate(new StringWithCustomTags(ch.getValue()));\n                    if (!ch.getChildren().isEmpty()) {\n                        loadInto.setTime(new StringWithCustomTags(ch.getChildren().get(0)));\n                    List<Note> notes = loadInto.getNotes(true);\n                    new NoteListParser(gedcomParser, ch, notes).parse();\n",
            "src/main/java/org/gedcom4j/parser/CitationListParser.java": "            }\n    }\n                            }\n                    }\n                    loadCitationData(ch, d);\n                }\n        }\n    }\n}\n",
            "src/main/java/org/gedcom4j/parser/CorporationParser.java": "import org.gedcom4j.model.StringWithCustomTags;\n                    loadInto.getPhoneNumbers(true).add(new StringWithCustomTags(ch));\n                    loadInto.getWwwUrls(true).add(new StringWithCustomTags(ch));\n                        addWarning(\"GEDCOM version is 5.5 but fax number was specified for the corporation in the source system on line \" + ch.getLineNum()\n                    }\n",
            "src/main/java/org/gedcom4j/parser/FamilyChildParser.java": "import org.gedcom4j.model.*;\n                    loadInto.setAdoptedBy(AdoptedByWhichParent.valueOf(ch.getValue()));\n                } else if (Tag.STATUS.equalsText(ch.getTag())) {\n                    if (g55()) {\n                } else {\n",
            "src/main/java/org/gedcom4j/parser/FamilyEventParser.java": "                if (Tag.TYPE.equalsText(ch.getTag())) {\n                } else if (Tag.DATE.equalsText(ch.getTag())) {\n                } else if (Tag.OBJECT_MULTIMEDIA.equalsText(ch.getTag())) {\n                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                    List<Note> notes = loadInto.getNotes(true);\n                } else if (Tag.RESTRICTION.equalsText(ch.getTag())) {\n                    loadInto.setReligiousAffiliation(new StringWithCustomTags(ch));\n                } else if (Tag.CAUSE.equalsText(ch.getTag())) {\n                } else if (Tag.ADDRESS.equalsText(ch.getTag())) {\n                } else if (Tag.PHONE.equalsText(ch.getTag())) {\n                } else if (Tag.WEB_ADDRESS.equalsText(ch.getTag())) {\n                    if (g55()) {\n                        addWarning(\"GEDCOM version is 5.5 but fax number was specified for \" + loadInto.getType() + \" family event on line \" + ch.getLineNum()\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                    if (loadInto.getDescription() == null) {\n                    } else {\n                } else if (Tag.CONTINUATION.equalsText(ch.getTag())) {\n                } else {\n",
            "src/main/java/org/gedcom4j/parser/FamilyParser.java": "class FamilyParser extends AbstractParser<Family> {\n                } else if (Tag.OBJECT_MULTIMEDIA.equalsText(ch.getTag())) {\n                    new MultimediaLinkParser(gedcomParser, ch, multimedia).parse();\n                    loadInto.setAutomatedRecordId(new StringWithCustomTags(ch));\n                    ChangeDate changeDate = new ChangeDate();\n                    new NoteListParser(gedcomParser, ch, notes).parse();\n                    if (g55()) {\n                    loadInto.setRecFileNumber(new StringWithCustomTags(ch));\n                } else if (FamilyEventType.isValidTag(ch.getTag())) {\n                    loadInto.getEvents(true).add(event);\n                    loadInto.getSubmitters(true).add(getSubmitter(ch.getValue()));\n    }\n",
            "src/main/java/org/gedcom4j/parser/FileReference551Parser.java": "import org.gedcom4j.model.StringWithCustomTags;\n        loadInto.setReferenceToFile(new StringWithCustomTags(stringTree));\n                    loadInto.setTitle(new StringWithCustomTags(fileChild));\n                    unknownTag(fileChild, loadInto);\n        loadInto.setFormat(new StringWithCustomTags(form.getValue()));\n                    loadInto.setMediaType(new StringWithCustomTags(formChild));\n                    unknownTag(formChild, loadInto);\n                addError(\"TYPE was specified more than once for the FORM tag on line \" + form.getLineNum());\n",
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java": "            }\n",
            "src/main/java/org/gedcom4j/parser/GedcomParser.java": "            new IndividualParser(this, rootLevelItem, i).parse();\n            gedcom.setSubmission(s);\n            }\n            List<Note> dummyList = new ArrayList<Note>();\n            }\n        } else if (Tag.FAMILY.equalsText(rootLevelItem.getTag())) {\n            Family f = getFamily(rootLevelItem.getId());\n            new FamilyParser(this, rootLevelItem, f).parse();\n        } else if (Tag.TRAILER.equalsText(rootLevelItem.getTag())) {\n        } else if (Tag.SOURCE.equalsText(rootLevelItem.getTag())) {\n            new RepositoryParser(this, rootLevelItem, r).parse();\n            new MultimediaRecordParser(this, rootLevelItem, multimedia).parse();\n        }\n    }\n",
            "src/main/java/org/gedcom4j/parser/GedcomVersionParser.java": "import org.gedcom4j.model.StringWithCustomTags;\nimport org.gedcom4j.model.SupportedVersion;\n                    loadInto.setGedcomForm(new StringWithCustomTags(ch));\n",
            "src/main/java/org/gedcom4j/parser/HeaderParser.java": "                        loadInto.setTime(new StringWithCustomTags(ch.getChildren().get(0)));\n                } else if (Tag.CHARACTER_SET.equalsText(ch.getTag())) {\n                    loadInto.getCharacterSet().setCharacterSetName(new StringWithCustomTags(ch));\n                } else if (Tag.SUBMITTER.equalsText(ch.getTag())) {\n                    loadInto.setSubmitter(getSubmitter(ch.getValue()));\n                    loadInto.setFileName(new StringWithCustomTags(ch));\n                    loadInto.setGedcomVersion(gedcomVersion);\n                } else if (Tag.COPYRIGHT.equalsText(ch.getTag())) {\n                    loadInto.setPlaceHierarchy(new StringWithCustomTags(ch.getChildren().get(0)));\n                } else {\n                }\n        }\n",
            "src/main/java/org/gedcom4j/parser/HeaderSourceDataParser.java": "import org.gedcom4j.model.StringWithCustomTags;\n                    loadInto.setPublishDate(new StringWithCustomTags(ch));\n                    loadInto.setCopyright(new StringWithCustomTags(ch));\n",
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": "        boolean shalemYear = (lenHebrewYear == 355 || lenHebrewYear == 385);\n        int monthLength = 0;\n        } else if (hebrewMonthNum == 2) {\n        } else if (hebrewMonthNum == 3) {\n        }\n                || yearInCycle == 17 || yearInCycle == 0);\n    }\n",
            "src/main/java/org/gedcom4j/parser/IndividualAttributeParser.java": "                    loadInto.setPlace(place);\n                } else if (Tag.CAUSE.equalsText(ch.getTag())) {\n                } else if (Tag.SOURCE.equalsText(ch.getTag())) {\n                    loadInto.getPhoneNumbers(true).add(new StringWithCustomTags(ch));\n                    loadInto.getWwwUrls(true).add(new StringWithCustomTags(ch));\n                } else if (Tag.FAX.equalsText(ch.getTag())) {\n                    if (g55()) {\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                    }\n                    new MultimediaLinkParser(gedcomParser, ch, multimedia).parse();\n                    unknownTag(ch, loadInto);\n        }\n    }\n",
            "src/main/java/org/gedcom4j/parser/IndividualEventParser.java": "                } else if (Tag.PLACE.equalsText(ch.getTag())) {\n                    loadInto.setPlace(place);\n                    List<Note> notes = loadInto.getNotes(true);\n                    List<AbstractCitation> citations = loadInto.getCitations(true);\n                    new CitationListParser(gedcomParser, ch, citations).parse();\n                } else if (Tag.ADDRESS.equalsText(ch.getTag())) {\n                    loadInto.setAddress(address);\n                    if (g55()) {\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                    }\n                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                } else if (Tag.FAX.equalsText(ch.getTag())) {\n                    loadInto.getEmails(true).add(new StringWithCustomTags(ch));\n                        loadInto.setDescription(new StringWithCustomTags(ch));\n                        loadInto.getDescription().setValue(loadInto.getDescription().getValue() + \"\\n\" + ch.getValue());\n                } else {\n",
            "src/main/java/org/gedcom4j/parser/IndividualParser.java": "                                + \", which is a GEDCOM 5.5.1 feature.\" + \"  Data loaded but cannot be re-written unless GEDCOM version changes.\");\n                } else if (IndividualAttributeType.isValidTag(ch.getTag())) {\n                    loadInto.getAttributes(true).add(a);\n                    List<Note> notes = loadInto.getNotes(true);\n                    loadInto.setRecIdNumber(new StringWithCustomTags(ch));\n                } else if (Tag.ASSOCIATION.equalsText(ch.getTag())) {\n                    Association a = new Association();\n                    loadInto.getDescendantInterest(true).add(getSubmitter(ch.getValue()));\n                    loadInto.setAncestralFileNumber(new StringWithCustomTags(ch));\n                    UserReference u = new UserReference();\n                } else if (Tag.SUBMITTER.equalsText(ch.getTag())) {\n            }\n        familiesWhereSpouse.add(fs);\n",
            "src/main/java/org/gedcom4j/parser/LdsIndividualOrdinanceParser.java": "                    loadInto.setPlace(new StringWithCustomTags(ch));\n                    loadInto.setTemple(new StringWithCustomTags(ch));\n                    List<AbstractCitation> citations = loadInto.getCitations(true);\n                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                    new NoteListParser(gedcomParser, ch, notes).parse();\n                } else {\n                    unknownTag(ch, loadInto);\n",
            "src/main/java/org/gedcom4j/parser/LdsSpouseSealingParser.java": "                    loadInto.setStatus(new StringWithCustomTags(ch));\n                    loadInto.setTemple(new StringWithCustomTags(ch));\n                    List<AbstractCitation> citations = loadInto.getCitations(true);\n                } else if (Tag.NOTE.equalsText(ch.getTag())) {\n                }\n            }\n",
            "src/main/java/org/gedcom4j/parser/LinePieces.java": "    }\n",
            "src/main/java/org/gedcom4j/parser/MultimediaLinkParser.java": "                    m.setEmbeddedTitle(new StringWithCustomTags(ch));\n                    currentFileRef.setReferenceToFile(new StringWithCustomTags(ch));\n                    List<Note> notes = m.getNotes(true);\n                } else {\n                    unknownTag(ch, m);\n                    }\n                    if (!g55()) {\n                        addWarning(\"Gedcom version was 5.5.1, but a NOTE was found on a multimedia link on line \" + ch.getLineNum()\n",
            "src/main/java/org/gedcom4j/parser/PersonalNameParser.java": "                } else if (Tag.SURNAME_PREFIX.equalsText(ch.getTag())) {\n                } else if (Tag.SURNAME.equalsText(ch.getTag())) {\n                } else if (Tag.NAME_SUFFIX.equalsText(ch.getTag())) {\n                } else if (Tag.SOURCE.equalsText(ch.getTag())) {\n                    new CitationListParser(gedcomParser, ch, citations).parse();\n                    List<Note> notes = loadInto.getNotes(true);\n                    loadPersonalNameVariation(ch, pnv);\n                } else if (Tag.PHONETIC.equalsText(ch.getTag())) {\n                } else if (Tag.SURNAME_PREFIX.equalsText(ch.getTag())) {\n                } else if (Tag.SURNAME.equalsText(ch.getTag())) {\n                } else if (Tag.NAME_SUFFIX.equalsText(ch.getTag())) {\n                } else if (Tag.SOURCE.equalsText(ch.getTag())) {\n                    new CitationListParser(gedcomParser, ch, citations).parse();\n                    List<Note> notes = pnv.getNotes(true);\n                    unknownTag(ch, pnv);\n                }\n        }\n",
            "src/main/java/org/gedcom4j/parser/PlaceParser.java": "                    new NoteListParser(gedcomParser, ch, notes).parse();\n                } else if (Tag.ROMANIZED.equalsText(ch.getTag())) {\n                    if (g55()) {\n                    if (g55()) {\n                        addWarning(\"GEDCOM version is 5.5 but a map coordinate was specified on a place on line \" + ch.getLineNum()\n                    unknownTag(ch, loadInto);\n            }\n",
            "src/main/java/org/gedcom4j/parser/RepositoryParser.java": "                    loadInto.getPhoneNumbers(true).add(new StringWithCustomTags(ch));\n                    }\n                    loadInto.getFaxNumbers(true).add(new StringWithCustomTags(ch));\n                    if (g55()) {\n                } else if (Tag.REFERENCE.equalsText(ch.getTag())) {\n                    ChangeDate changeDate = new ChangeDate();\n                    loadInto.setChangeDate(changeDate);\n        }\n",
            "src/main/java/org/gedcom4j/parser/SourceParser.java": "                    loadInto.setRepositoryCitation(loadRepositoryCitation(ch));\n                    List<Note> notes = loadInto.getNotes(true);\n                } else if (Tag.OBJECT_MULTIMEDIA.equalsText(ch.getTag())) {\n                    new MultimediaLinkParser(gedcomParser, ch, multimedia).parse();\n                    UserReference u = new UserReference();\n                    loadInto.setRecIdNumber(new StringWithCustomTags(ch));\n                } else if (Tag.CHANGED_DATETIME.equalsText(ch.getTag())) {\n                    loadInto.setChangeDate(changeDate);\n    }\n                            } else {\n                                unknownTag(gch, scn.getCallNumber());\n                } else {\n        }\n",
            "src/main/java/org/gedcom4j/parser/SourceSystemParser.java": "                    Corporation corporation = new Corporation();\n                    new CorporationParser(gedcomParser, ch, corporation).parse();\n",
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java": "        numEvictedCumulative += (before - after);\n        if ((before - after) < 2) {\n",
            "src/main/java/org/gedcom4j/parser/StringTreeBuilder.java": "        treeForCurrentLine.setLevel(lp.level);\n",
            "src/main/java/org/gedcom4j/parser/SubmissionParser.java": "import org.gedcom4j.model.StringWithCustomTags;\n                    loadInto.setNameOfFamilyFile(new StringWithCustomTags(ch));\n                    loadInto.setTempleCode(new StringWithCustomTags(ch));\n                    loadInto.setAncestorsCount(new StringWithCustomTags(ch));\n                    loadInto.setDescendantsCount(new StringWithCustomTags(ch));\n                    loadInto.setOrdinanceProcessFlag(new StringWithCustomTags(ch));\n                    loadInto.setRecIdNumber(new StringWithCustomTags(ch));\n",
            "src/main/java/org/gedcom4j/parser/SubmitterParser.java": "                    loadInto.getPhoneNumbers(true).add(new StringWithCustomTags(ch));\n                    }\n                    loadInto.getFaxNumbers(true).add(new StringWithCustomTags(ch));\n                    if (g55()) {\n                    ChangeDate changeDate = new ChangeDate();\n                    loadInto.setRecIdNumber(new StringWithCustomTags(ch));\n                } else {\n            }\n}\n",
            "src/main/java/org/gedcom4j/parser/UserReferenceParser.java": "import org.gedcom4j.model.StringWithCustomTags;\n        loadInto.setReferenceNum(new StringWithCustomTags(stringTree.getValue()));\n                    loadInto.setType(new StringWithCustomTags(ch));\n                    unknownTag(ch, loadInto);\n",
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": "        if (dad != null) {\n                    Individual dadsWife = fs.getFamily().getWife();\n                if (!checkedAlready.contains(fc.getFamily().getWife())) {\n            }\n        }\n                }\n                }\n                for (FamilySpouse fs : mom.getFamiliesWhereSpouse()) {\n                        addIndividualAndFamilies(result, momsHusband);\n        targetList = getExtendedAncestry(individual1);\n        checkedAlready = new HashSet<Individual>();\n        }\n    }\n",
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": "                        }\n                        examineWife(personBeingExamined, fs);\n                        if (lookedAt.contains(family.getHusband())) {\n                            continue;\n                                continue;\n                            }\n                                examineChild(personBeingExamined, c, FATHER);\n                            } else if (family.getWife() == personBeingExamined) { // NOPMD - deliberately using ==, want\n                    }\n                }\n    }\n    private void examineMother(Individual personBeingExamined, Individual mother) {\n",
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java": "import org.gedcom4j.exception.GedcomValidationException;\nimport org.gedcom4j.model.StringWithCustomTags;\n        rootValidator.getFindings().add(new GedcomValidationFinding(description, Severity.ERROR, null));\n    }\n        rootValidator.getFindings().add(new GedcomValidationFinding(description, Severity.ERROR, o));\n    }\n        rootValidator.getFindings().add(new GedcomValidationFinding(description, Severity.INFO, null));\n    }\n        rootValidator.getFindings().add(new GedcomValidationFinding(description, Severity.INFO, o));\n    }\n        rootValidator.getFindings().add(new GedcomValidationFinding(description, Severity.WARNING, null));\n    }\n        rootValidator.getFindings().add(new GedcomValidationFinding(description, Severity.WARNING, o));\n    }\n        if (changeDate == null) {\n        checkOptionalString(changeDate.getTime(), \"change time\", objectWithChangeDate);\n        if (changeDate.getNotes() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                changeDate.getNotes(true).clear();\n                addInfo(\"Notes collection was null on \" + changeDate.getClass().getSimpleName() + \" - autorepaired\");\n            } else {\n                addError(\"Notes collection is null on \" + changeDate.getClass().getSimpleName());\n            }\n        } else {\n            new NotesValidator(rootValidator, changeDate, changeDate.getNotes()).validate();\n        }\n        Method customTagsGetter = null;\n        try {\n            customTagsGetter = o.getClass().getMethod(\"getCustomTags\");\n        } catch (@SuppressWarnings(\"unused\") SecurityException unusedAndIgnored) {\n            addError(\"Cannot access getter named 'getCustomTags' on object of type \" + o.getClass().getSimpleName() + \".\", o);\n            return;\n        } catch (@SuppressWarnings(\"unused\") NoSuchMethodException unusedAndIgnored) {\n            addError(\"Cannot find getter named 'getCustomTags' on object of type \" + o.getClass().getSimpleName() + \".\", o);\n            return;\n        }\n        Object fldVal = null;\n        try {\n            fldVal = customTagsGetter.invoke(o);\n        } catch (IllegalArgumentException e) {\n            addError(\"Cannot get value of customTags attribute on object of type \" + o.getClass().getSimpleName() + \" - \" + e.getMessage(), o);\n            return;\n        } catch (IllegalAccessException e) {\n            addError(\"Cannot get value of customTags attribute on object of type \" + o.getClass().getSimpleName() + \" - \" + e.getMessage(), o);\n            return;\n        } catch (InvocationTargetException e) {\n            addError(\"Cannot get value of customTags attribute on object of type \" + o.getClass().getSimpleName() + \" - \" + e.getMessage(), o);\n            return;\n        }\n        if (fldVal == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                } catch (IllegalArgumentException e) {\n                    addError(\"Cannot autorepair value of customTags attribute on object of type \" + o.getClass().getSimpleName() + \" - \" + e.getMessage(), o);\n                    return;\n                } catch (IllegalAccessException e) {\n                    addError(\"Cannot autorepair value of customTags attribute on object of type \" + o.getClass().getSimpleName() + \" - \" + e.getMessage(), o);\n                    return;\n                } catch (InvocationTargetException e) {\n                    addError(\"Cannot autorepair value of customTags attribute on object of type \" + o.getClass().getSimpleName() + \" - \" + e.getMessage(), o);\n                    return;\n                }\n                rootValidator.addInfo(\"Custom tag collection was null - repaired\", o);\n            } else {\n                rootValidator.addError(\"Custom tag collection is null - must be at least an empty collection\", o);\n            }\n        } else {\n            if (fldVal != null && !(fldVal instanceof List<?>)) {\n            }\n    }\n    protected void checkOptionalString(String optionalString, String fieldDescription, Object objectContainingField) {\n        if (optionalString != null && !isSpecified(optionalString)) {\n            addError(fieldDescription + \" on \" + objectContainingField.getClass().getSimpleName() + \" is specified, but has a blank value\",\n                    objectContainingField);\n        }\n    }\n    protected void checkOptionalString(StringWithCustomTags optionalString, String fieldDescription, Object objectContainingField) {\n        if (optionalString != null && optionalString.getValue() != null && !isSpecified(optionalString.getValue())) {\n            addError(fieldDescription + \" on \" + objectContainingField.getClass().getSimpleName() + \" is specified, but has a blank value\",\n                    objectContainingField);\n        }\n        checkStringWithCustomTags(optionalString, fieldDescription);\n    protected void checkRequiredString(String requiredString, String fieldDescription, Object objectContainingField) {\n        if (!isSpecified(requiredString)) {\n            addError(fieldDescription + \" on \" + objectContainingField.getClass().getSimpleName() + \" is required, but is either null or blank\",\n                    objectContainingField);\n        }\n    }\n    protected void checkRequiredString(StringWithCustomTags requiredString, String fieldDescription, Object objectContainingField) {\n        if (requiredString == null || requiredString.getValue() == null || requiredString.getValue().trim().length() == 0) {\n            addError(fieldDescription + \" on \" + objectContainingField.getClass().getSimpleName() + \" is required, but is either null or blank\",\n                    objectContainingField);\n        }\n        checkStringWithCustomTags(requiredString, fieldDescription);\n    protected void checkStringList(List<String> stringList, String description, boolean blanksAllowed) {\n        int i = 0;\n        if (stringList != null) {\n            while (i < stringList.size()) {\n                String a = stringList.get(i);\n                if (a == null) {\n                    if (rootValidator.isAutorepairEnabled()) {\n                        addInfo(\"String list (\" + description + \") contains null entry - removed\", stringList);\n                        stringList.remove(i);\n                        continue;\n                    }\n                    addError(\"String list (\" + description + \") contains null entry\", stringList);\n                } else if (!blanksAllowed && !isSpecified(a)) {\n                    if (rootValidator.isAutorepairEnabled()) {\n                        addInfo(\"String list (\" + description + \") contains blank entry where none are allowed - removed\", stringList);\n                        stringList.remove(i);\n                        continue;\n                    }\n                    addError(\"String list (\" + description + \") contains blank entry where none are allowed\", stringList);\n                }\n                i++;\n            }\n        }\n    }\n    protected void checkStringTagList(List<StringWithCustomTags> stringList, String description, boolean blanksAllowed) {\n        int i = 0;\n        if (rootValidator.isAutorepairEnabled()) {\n            int dups = new DuplicateEliminator<StringWithCustomTags>(stringList).process();\n            if (dups > 0) {\n                rootValidator.addInfo(dups + \" duplicate tagged strings found and removed\", stringList);\n            }\n        }\n        if (stringList != null) {\n            while (i < stringList.size()) {\n                StringWithCustomTags a = stringList.get(i);\n                if (a == null || a.getValue() == null) {\n                    if (rootValidator.isAutorepairEnabled()) {\n                        continue;\n                    }\n                    addError(\"String list (\" + description + \") contains null entry\", stringList);\n                } else if (!blanksAllowed && a.getValue().trim().length() == 0) {\n                    if (rootValidator.isAutorepairEnabled()) {\n                        addInfo(\"String list (\" + description + \") contains blank entry where none are allowed - removed\", stringList);\n                        stringList.remove(i);\n                        continue;\n                    addError(\"String list (\" + description + \") contains blank entry where none are allowed\", stringList);\n                }\n                i++;\n            }\n        }\n    }\n                }\n            }\n        }\n    }\n        try {\n            String xref = (String) xrefGetter.invoke(objectContainingXref);\n            checkRequiredString(xref, xrefFieldName, objectContainingXref);\n            if (xref != null) {\n                if (xref.length() < 3) {\n                } else if (xref.charAt(0) != '@') {\n                    addError(\"xref on \" + objectContainingXref.getClass().getSimpleName() + \" is doesn't start with an at-sign (@)\", objectContainingXref);\n                if (!xref.endsWith(\"@\")) {\n                    addError(\"xref on \" + objectContainingXref.getClass().getSimpleName() + \" is doesn't end with an at-sign (@)\", objectContainingXref);\n                }\n            }\n        } catch (SecurityException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter named \" + getterName\n                    + \" that can be accessed to validate\", e);\n        } catch (ClassCastException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter of the right type named \"\n                    + getterName + \" to validate\", e);\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter named \" + getterName\n                    + \" to validate\", e);\n        } catch (IllegalAccessException e) {\n        } catch (InvocationTargetException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter named \" + getterName\n                    + \" to validate\", e);\n        } catch (NoSuchMethodException e) {\n            throw new GedcomValidationException(objectContainingXref.getClass().getSimpleName() + \" doesn't have an xref getter named \" + getterName\n                    + \" to validate\", e);\n        }\n    }\n    protected abstract void validate();\n        if (swct == null) {\n        if (swct.getValue() == null || !isSpecified(swct.getValue())) {\n            addError(\"A string with custom tags object (\" + fieldDescription + \") was defined with no value\", swct);\n        checkCustomTags(swct);\n    }\n    private boolean isSpecified(String s) {\n            return false;\n",
            "src/main/java/org/gedcom4j/validate/AddressValidator.java": "    public AddressValidator(GedcomValidator rootValidator, Address address) {\n        this.rootValidator = rootValidator;\n        checkStringList(address.getLines(), \"address lines\", false);\n        checkOptionalString(address.getAddr1(), \"line 1\", address);\n        checkOptionalString(address.getAddr2(), \"line 2\", address);\n        checkOptionalString(address.getCity(), \"city\", address);\n        checkOptionalString(address.getStateProvince(), \"state/province\", address);\n        checkOptionalString(address.getPostalCode(), \"postal code\", address);\n        checkOptionalString(address.getCountry(), \"country\", address);\n",
            "src/main/java/org/gedcom4j/validate/CitationValidator.java": "import org.gedcom4j.Options;\n    public CitationValidator(GedcomValidator rootValidator, AbstractCitation citation) {\n        this.rootValidator = rootValidator;\n        }\n        if (citation instanceof CitationWithSource) {\n            CitationWithSource c = (CitationWithSource) citation;\n            if (c.getSource() == null) {\n            }\n            checkOptionalString(c.getWhereInSource(), \"where within source\", c);\n            checkOptionalString(c.getEventCited(), \"event type cited from\", c);\n            if (c.getEventCited() == null) {\n                if (c.getRoleInEvent() != null) {\n                    addError(\"CitationWithSource has role in event but a null event\");\n                }\n            } else {\n                checkOptionalString(c.getRoleInEvent(), \"role in event\", c);\n            }\n            checkOptionalString(c.getCertainty(), \"certainty/quality\", c);\n        } else if (citation instanceof CitationWithoutSource) {\n            CitationWithoutSource c = (CitationWithoutSource) citation;\n            checkStringList(c.getDescription(), \"description on a citation without a source\", true);\n            if (textFromSource == null && Options.isCollectionInitializationEnabled()) {\n                if (rootValidator.isAutorepairEnabled()) {\n                    c.getTextFromSource(true).clear();\n                    addInfo(\"Text from source collection (the list of lists) was null in CitationWithoutSource - autorepaired\", citation);\n                } else {\n                    addError(\"Text from source collection (the list of lists) is null in CitationWithoutSource\", citation);\n                }\n            } else {\n                if (rootValidator.isAutorepairEnabled()) {\n                    int dups = new DuplicateEliminator<List<String>>(textFromSource).process();\n                    if (dups > 0) {\n                        rootValidator.addInfo(dups + \" duplicate texts from source found and removed\", citation);\n                    }\n                }\n                if (textFromSource != null) {\n                    for (List<String> sl : textFromSource) {\n                        if (sl == null) {\n                            addError(\"Text from source collection (the list of lists) in CitationWithoutSource contains a null\", citation);\n                        } else {\n                            checkStringList(sl, \"one of the sublists in the textFromSource collection on a source citation\", true);\n                        }\n                    }\n                }\n            }\n        } else {\n            throw new IllegalStateException(\"AbstractCitation references must be either CitationWithSource\" + \" instances or CitationWithoutSource instances\");\n        }\n        if (citation.getNotes() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n            }\n        } else {\n            new NotesValidator(rootValidator, citation, citation.getNotes()).validate();\n        }\n    }\n",
            "src/main/java/org/gedcom4j/validate/EventValidator.java": "import org.gedcom4j.Options;\nimport org.gedcom4j.model.AbstractCitation;\nimport org.gedcom4j.model.Multimedia;\nimport org.gedcom4j.model.StringWithCustomTags;\n    public EventValidator(GedcomValidator rootValidator, AbstractEvent e) {\n        this.rootValidator = rootValidator;\n        if (e == null) {\n            addError(\"Event is null and cannot be validated or autorepaired\");\n            return;\n        }\n        if (e.getAddress() != null) {\n            new AddressValidator(rootValidator, e.getAddress()).validate();\n        }\n        checkOptionalString(e.getAge(), \"age\", e);\n        checkOptionalString(e.getCause(), \"cause\", e);\n        checkCitations();\n        checkCustomTags(e);\n        checkOptionalString(e.getDate(), \"date\", e);\n        if (e.getDescription() != null && e.getDescription().trim().length() != 0) {\n            rootValidator.addError(\"Event has description, which is non-standard. Remove this value, or move it (perhaps to a Note).\", e);\n        }\n        checkEmails();\n        checkFaxNumbers();\n        checkMultimedia();\n        new NotesValidator(rootValidator, e, e.getNotes()).validate();\n        checkPhoneNumbers();\n        checkOptionalString(e.getReligiousAffiliation(), \"religious affiliation\", e);\n        checkOptionalString(e.getRespAgency(), \"responsible agency\", e);\n        checkOptionalString(e.getRestrictionNotice(), \"restriction notice\", e);\n        checkOptionalString(e.getSubType(), \"subtype\", e);\n        checkWwwUrls();\n    }\n    private void checkCitations() {\n        List<AbstractCitation> citations = e.getCitations();\n        if (citations == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                e.getCitations(true).clear();\n                rootValidator.addInfo(\"Event had null list of citations - repaired\", e);\n            } else {\n            }\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate source citations found and removed\", e);\n                }\n            }\n            if (citations != null) {\n                for (AbstractCitation c : citations) {\n                    new CitationValidator(rootValidator, c).validate();\n                }\n            }\n    }\n    private void checkEmails() {\n        List<StringWithCustomTags> emails = e.getEmails();\n        if (emails == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                e.getEmails(true).clear();\n                rootValidator.addInfo(\"Event had null list of emails - repaired\", e);\n            } else {\n            }\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<StringWithCustomTags>(emails).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate emails found and removed\", e);\n                }\n            }\n            if (emails != null) {\n                for (StringWithCustomTags swct : emails) {\n                    checkRequiredString(swct, \"email\", e);\n                }\n            }\n        }\n    }\n    private void checkFaxNumbers() {\n        List<StringWithCustomTags> faxNumbers = e.getFaxNumbers();\n        if (faxNumbers == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                e.getFaxNumbers(true).clear();\n                rootValidator.addInfo(\"Event had null list of fax numbers - repaired\", e);\n            } else {\n            }\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<StringWithCustomTags>(faxNumbers).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate fax numbers found and removed\", e);\n                }\n            }\n            if (faxNumbers != null) {\n                for (StringWithCustomTags swct : faxNumbers) {\n                    checkRequiredString(swct, \"fax number\", e);\n                }\n            }\n        if (multimedia == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                e.getMultimedia(true).clear();\n                rootValidator.addInfo(\"Event had null list of multimedia - repaired\", e);\n            } else {\n                rootValidator.addError(\"Event has null list of multimedia\", e);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate multimedia found and removed\", e);\n                }\n            }\n            if (multimedia != null) {\n                for (Multimedia m : multimedia) {\n                    new MultimediaValidator(rootValidator, m).validate();\n                }\n        List<StringWithCustomTags> phoneNumbers = e.getPhoneNumbers();\n        if (phoneNumbers == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                e.getPhoneNumbers(true).clear();\n                rootValidator.addInfo(\"Event had null list of phone numbers - repaired\", e);\n            } else {\n                rootValidator.addError(\"Event has null list of phone numbers\", e);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<StringWithCustomTags>(phoneNumbers).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate phone numbers found and removed\", e);\n                }\n            }\n            if (phoneNumbers != null) {\n                for (StringWithCustomTags swct : phoneNumbers) {\n                    checkRequiredString(swct, \"phone number\", e);\n                }\n            }\n        }\n        if (e.getPlace() != null) {\n            new PlaceValidator(rootValidator, e.getPlace()).validate();\n        }\n    private void checkWwwUrls() {\n        List<StringWithCustomTags> wwwUrls = e.getWwwUrls();\n        if (wwwUrls == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                e.getWwwUrls(true).clear();\n                rootValidator.addInfo(\"Event had null list of www urls - repaired\", e);\n            } else {\n                rootValidator.addError(\"Event has null list of www url\", e);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<StringWithCustomTags>(wwwUrls).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate web URLs found and removed\", e);\n                }\n            }\n            if (wwwUrls != null) {\n                for (StringWithCustomTags swct : wwwUrls) {\n                    checkRequiredString(swct, \"www url\", e);\n                }\n            }\n",
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java": "import org.gedcom4j.Options;\nimport org.gedcom4j.model.*;\n        rootValidator = gedcomValidator;\n        this.f = f;\n            for (AbstractEvent ev : f.getEvents()) {\n        }\n        if (f.getHusband() != null) {\n        if (f.getWife() != null) {\n        checkMultimedia();\n        checkOptionalString(f.getRecFileNumber(), \"record file number\", f);\n    }\n                rootValidator.addError(\"Family's collection of children is null\", f);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<Individual>(children).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate children found and removed\", f);\n                }\n            }\n            if (children != null) {\n                for (Individual i : children) {\n                    if (i == null) {\n                        rootValidator.addError(\"Family with xref '\" + f.getXref() + \"' has a null entry in children collection\", f);\n                    }\n                }\n            }\n        }\n    }\n    private void checkCitations() {\n        List<AbstractCitation> citations = f.getCitations();\n        if (citations == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                f.getCitations(true).clear();\n                addInfo(\"citations collection for family was null - rootValidator.autorepaired\", f);\n            } else {\n                addError(\"citations collection for family is null\", f);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate source citations found and removed\", f);\n                }\n            }\n            if (citations != null) {\n                for (AbstractCitation c : citations) {\n                    new CitationValidator(rootValidator, c).validate();\n                }\n            }\n        }\n    }\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<LdsSpouseSealing>(ldsSpouseSealings).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate LDS spouse sealings found and removed\", f);\n                }\n            }\n            if (ldsSpouseSealings != null) {\n                for (LdsSpouseSealing s : ldsSpouseSealings) {\n                    new LdsSpouseSealingValidator(rootValidator, s).validate();\n                }\n            }\n        }\n    }\n                addError(\"Multimedia collection for family is null\", f);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate multimedia found and removed\", f);\n                }\n            }\n            if (multimedia != null) {\n                for (Multimedia m : multimedia) {\n                    new MultimediaValidator(rootValidator, m).validate();\n                }\n            }\n        }\n    }\n                addInfo(\"Submitters collection is missing on family\", f);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<Submitter>(submitters).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate submitters found and removed\", f);\n                }\n            }\n            if (submitters != null) {\n                for (Submitter s : submitters) {\n                    new SubmitterValidator(rootValidator, s).validate();\n                }\n            }\n        }\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/GedcomValidationFinding.java": "package org.gedcom4j.validate;\npublic class GedcomValidationFinding {\n    private Object itemWithProblem;\n    private String problemDescription;\n    private Severity severity;\n    GedcomValidationFinding(String description, Severity severity, Object obj) {\n        problemDescription = description;\n        this.severity = severity;\n        itemWithProblem = obj;\n    }\n    public Object getItemWithProblem() {\n        return itemWithProblem;\n    }\n    public String getProblemDescription() {\n        return problemDescription;\n    }\n    public Severity getSeverity() {\n        return severity;\n    }\n    public void setItemWithProblem(Object itemWithProblem) {\n        this.itemWithProblem = itemWithProblem;\n    }\n    public void setProblemDescription(String problemDescription) {\n        this.problemDescription = problemDescription;\n    }\n    public void setSeverity(Severity severity) {\n        this.severity = severity;\n    }\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(severity).append(\": \").append(problemDescription);\n        if (itemWithProblem != null) {\n            sb.append(\" (\").append(itemWithProblem).append(\")\");\n        }\n        return sb.toString();\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java": "package org.gedcom4j.validate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map.Entry;\nimport org.gedcom4j.Options;\nimport org.gedcom4j.model.*;\npublic class GedcomValidator extends AbstractValidator {\n    private boolean autorepairEnabled = true;\n    private final List<GedcomValidationFinding> findings = new ArrayList<GedcomValidationFinding>();\n    protected Gedcom gedcom = null;\n    public GedcomValidator(Gedcom gedcom) {\n        this.gedcom = gedcom;\n        rootValidator = this;\n    }\n    public List<GedcomValidationFinding> getFindings() {\n        return findings;\n    }\n    public boolean hasErrors() {\n        for (GedcomValidationFinding finding : rootValidator.findings) {\n            if (finding.getSeverity() == Severity.ERROR) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public boolean hasInfo() {\n        for (GedcomValidationFinding finding : rootValidator.findings) {\n            if (finding.getSeverity() == Severity.INFO) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public boolean hasWarnings() {\n        for (GedcomValidationFinding finding : rootValidator.findings) {\n            if (finding.getSeverity() == Severity.WARNING) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public boolean isAutorepairEnabled() {\n        return autorepairEnabled;\n    }\n    public void setAutorepairEnabled(boolean autorepair) {\n        autorepairEnabled = autorepair;\n    }\n    @Override\n    public void validate() {\n        findings.clear();\n        if (gedcom == null) {\n            addError(\"gedcom structure is null\");\n            return;\n        }\n        validateSubmitters();\n        validateHeader();\n        validateIndividuals();\n        validateFamilies();\n        validateRepositories();\n        validateMultimedia();\n        validateNotes();\n        validateSources();\n        validateSubmission(gedcom.getSubmission());\n        validateTrailer();\n        new NotesValidator(rootValidator, gedcom, new ArrayList<Note>(gedcom.getNotes().values())).validate();\n    }\n    void validateSubmission(Submission s) {\n        if (s == null) {\n            addError(\"Submission record on root gedcom is null\", gedcom);\n            return;\n        }\n        checkXref(s);\n        checkOptionalString(s.getAncestorsCount(), \"Ancestor count\", s);\n        checkOptionalString(s.getDescendantsCount(), \"Descendant count\", s);\n        checkOptionalString(s.getNameOfFamilyFile(), \"Name of family file\", s);\n        checkOptionalString(s.getOrdinanceProcessFlag(), \"Ordinance process flag\", s);\n        checkOptionalString(s.getRecIdNumber(), \"Automated record id\", s);\n        checkOptionalString(s.getTempleCode(), \"Temple code\", s);\n    }\n    private void validateFamilies() {\n        for (Entry<String, Family> e : gedcom.getFamilies().entrySet()) {\n            if (e.getKey() == null) {\n                if (rootValidator.autorepairEnabled) {\n                    rootValidator.addError(\"Family in map but has null key - cannot repair\", e.getValue());\n                } else {\n                    rootValidator.addError(\"Family in map but has null key\", e.getValue());\n                }\n                continue;\n            }\n            Family f = e.getValue();\n            if (!e.getKey().equals(f.getXref())) {\n                if (rootValidator.autorepairEnabled) {\n                    rootValidator.addError(\"Family in map not keyed by its xref - cannot repair\", f.getXref());\n                } else {\n                    rootValidator.addError(\"Family in map not keyed by its xref\", f.getXref());\n                }\n                continue;\n            }\n            new FamilyValidator(this, f).validate();\n        }\n    }\n    private void validateHeader() {\n        if (gedcom.getHeader() == null) {\n            if (autorepairEnabled) {\n                gedcom.setHeader(new Header());\n                addInfo(\"Header was null - autorepaired\");\n            } else {\n                addError(\"GEDCOM Header is null\");\n                return;\n            }\n        }\n        new HeaderValidator(rootValidator, gedcom.getHeader()).validate();\n    }\n    private void validateIndividuals() {\n        for (Entry<String, Individual> e : gedcom.getIndividuals().entrySet()) {\n            if (e.getKey() == null) {\n                addError(\"Entry in individuals collection has null key\", e);\n                return;\n            }\n            if (e.getValue() == null) {\n                addError(\"Entry in individuals collection has null value\", e);\n                return;\n            }\n            if (!e.getKey().equals(e.getValue().getXref())) {\n                addError(\"Entry in individuals collection is not keyed by the individual's xref\", e);\n                return;\n            }\n            new IndividualValidator(rootValidator, e.getValue()).validate();\n        }\n    }\n    private void validateMultimedia() {\n        if (gedcom.getMultimedia() != null) {\n            for (Multimedia m : gedcom.getMultimedia().values()) {\n                MultimediaValidator mv = new MultimediaValidator(this, m);\n                mv.validate();\n            }\n        }\n    }\n    private void validateNotes() {\n        int i = 0;\n        for (Note n : gedcom.getNotes().values()) {\n            i++;\n            new NoteValidator(rootValidator, i, n).validate();\n        }\n    }\n    private void validateRepositories() {\n        for (Entry<String, Repository> e : gedcom.getRepositories().entrySet()) {\n            if (e.getKey() == null) {\n                addError(\"Entry in repositories collection has null key\", e);\n                return;\n            }\n            if (e.getValue() == null) {\n                addError(\"Entry in repositories collection has null value\", e);\n                return;\n            }\n            if (!e.getKey().equals(e.getValue().getXref())) {\n                addError(\"Entry in repositories collection is not keyed by the Repository's xref\", e);\n                return;\n            }\n            new RepositoryValidator(rootValidator, e.getValue()).validate();\n        }\n    }\n    private void validateSources() {\n        for (Entry<String, Source> e : gedcom.getSources().entrySet()) {\n            if (e.getKey() == null) {\n                addError(\"Entry in sources collection has null key\", e);\n                return;\n            }\n            if (e.getValue() == null) {\n                addError(\"Entry in sources collection has null value\", e);\n                return;\n            }\n            if (!e.getKey().equals(e.getValue().getXref())) {\n                addError(\"Entry in sources collection is not keyed by the individual's xref\", e);\n                return;\n            }\n            new SourceValidator(rootValidator, e.getValue()).validate();\n        }\n    }\n    private void validateSubmitters() {\n        if (gedcom.getSubmitters().isEmpty()) {\n            if (autorepairEnabled) {\n                Submitter s = new Submitter();\n                s.setXref(\"@SUBM0000@\");\n                s.setName(new StringWithCustomTags(\"UNSPECIFIED\"));\n                gedcom.getSubmitters().put(s.getXref(), s);\n                addInfo(\"Submitters collection was empty - repaired\", gedcom);\n            } else {\n                addError(\"Submitters collection is empty\", gedcom);\n            }\n        }\n        for (Submitter s : gedcom.getSubmitters().values()) {\n            new SubmitterValidator(rootValidator, s).validate();\n        }\n    }\n    private void validateTrailer() {\n        if (gedcom.getTrailer() == null) {\n            if (rootValidator.autorepairEnabled) {\n                gedcom.setTrailer(new Trailer());\n                rootValidator.addInfo(\"Gedcom had no trailer - repaired\", gedcom);\n            } else {\n                rootValidator.addError(\"Gedcom has no trailer\", gedcom);\n            }\n        }\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/HeaderValidator.java": "import org.gedcom4j.Options;\n        this.header = header;\n        }\n        checkCustomTags(header);\n        checkOptionalString(header.getDate(), \"date\", header);\n        checkOptionalString(header.getDestinationSystem(), \"destination system\", header);\n        checkOptionalString(header.getFileName(), \"filename\", header);\n        if (header.getGedcomVersion() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                return;\n            }\n        }\n        if (header.getGedcomVersion().getVersionNumber() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                header.getGedcomVersion().setVersionNumber(SupportedVersion.V5_5_1);\n                rootValidator.addInfo(\"GEDCOM version number in header was null - repaired\", header);\n            } else {\n                rootValidator.addError(\"GEDCOM version number in header must be specified\", header);\n                return;\n            }\n        }\n        checkCustomTags(header.getGedcomVersion());\n        checkOptionalString(header.getLanguage(), \"language\", header);\n        new NotesValidator(rootValidator, header, header.getNotes()).validate();\n        checkOptionalString(header.getPlaceHierarchy(), \"place hierarchy\", header);\n        checkSourceSystem();\n        if (header.getSubmitter() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                if (rootValidator.gedcom.getSubmitters() == null || rootValidator.gedcom.getSubmitters().isEmpty()) {\n                    rootValidator.addError(\"Submitter not specified in header, and autorepair could not \" + \"find a submitter to select as default\", header);\n                } else {\n                    header.setSubmitter(rootValidator.gedcom.getSubmitters().values().iterator().next());\n                }\n            } else {\n                rootValidator.addError(\"Submitter not specified in header\", header);\n            }\n            return;\n        }\n        new SubmitterValidator(rootValidator, header.getSubmitter()).validate();\n        if (header.getSubmission() != null) {\n            rootValidator.validateSubmission(header.getSubmission());\n        }\n        checkOptionalString(header.getTime(), \"time\", header);\n    }\n    private void checkCharacterSet() {\n        if (header.getCharacterSet() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n        if (header.getCharacterSet().getCharacterSetName() == null) {\n                header.getCharacterSet().setCharacterSetName(new StringWithCustomTags(\"ANSEL\"));\n            } else {\n        if (!Encoding.isValidCharacterSetName(header.getCharacterSet().getCharacterSetName().getValue())) {\n            rootValidator.addError(\"Character set name is not one of the supported encodings (\" + Encoding.getSupportedCharacterSetNames() + \")\", header\n                    .getCharacterSet().getCharacterSetName());\n        checkOptionalString(header.getCharacterSet().getCharacterSetName(), \"character set name\", header.getCharacterSet());\n    private void checkSourceSystem() {\n        SourceSystem ss = header.getSourceSystem();\n        if (ss == null) {\n        }\n            Corporation c = ss.getCorporation();\n            if (c.getAddress() != null) {\n                if (rootValidator.isAutorepairEnabled()) {\n                } else {\n                }\n        }\n        checkOptionalString(ss.getProductName(), \"product name\", ss);\n            HeaderSourceData sd = ss.getSourceData();\n            if (sd.getName() == null || sd.getName().trim().length() == 0) {\n                if (rootValidator.isAutorepairEnabled()) {\n                    rootValidator.addError(\"Source data is specified for source system, \" + \"but name of source data is not specified\", sd);\n            checkOptionalString(sd.getCopyright(), \"copyright\", sd);\n            checkCustomTags(sd);\n        }\n        if (ss.getSystemId() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                ss.setSystemId(\"UNSPECIFIED\");\n            } else {\n            }\n        }\n        checkOptionalString(ss.getVersionNum(), \"source system version number\", ss);\n",
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java": "import org.gedcom4j.Options;\nimport org.gedcom4j.model.*;\n        rootValidator = gedcomValidator;\n    protected void validate() {\n        if (individual == null) {\n                rootValidator.addInfo(\"Individual \" + individual.getXref() + \" had no list of names - repaired\", individual);\n            } else {\n                rootValidator.addError(\"Individual \" + individual.getXref() + \" has no list of names\", individual);\n            }\n        } else {\n                int dups = new DuplicateEliminator<PersonalName>(names).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate names found and removed\", individual);\n                }\n            }\n            if (names != null) {\n                for (PersonalName pn : names) {\n                    new PersonalNameValidator(rootValidator, pn).validate();\n                }\n            }\n        }\n        if (rootValidator.isAutorepairEnabled()) {\n            int dups = new DuplicateEliminator<FamilyChild>(individual.getFamiliesWhereChild()).process();\n            if (dups > 0) {\n                rootValidator.addInfo(dups + \" duplicate families (where individual was a child) found and removed\", individual);\n            }\n        }\n                rootValidator.addInfo(dups + \" duplicate families (where individual was a spouse) found and removed\", individual);\n            }\n        }\n        checkCitations();\n        checkIndividualAttributes();\n        checkSubmitters();\n        checkIndividualEvents();\n        }\n    }\n    private void checkAssociations() {\n        if (individual.getAssociations() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                for (Association a : individual.getAssociations()) {\n                    if (a == null) {\n                        addError(\"associations collection for individual contains null entry\", individual);\n                    } else {\n                        checkRequiredString(a.getAssociatedEntityType(), \"associated entity type\", a);\n                        checkXref(a, \"associatedEntityXref\");\n                    }\n                }\n            }\n        }\n    }\n    private void checkCitations() {\n            }\n            if (individual.getCitations() != null) {\n                for (AbstractCitation c : individual.getCitations()) {\n                    new CitationValidator(rootValidator, c).validate();\n                }\n            }\n        }\n    }\n    private void checkIndividualAttributes() {\n        if (individual.getAttributes() == null && Options.isCollectionInitializationEnabled()) {\n            }\n            if (individual.getAttributes() != null) {\n                for (IndividualAttribute a : individual.getAttributes()) {\n                    if (a.getType() == null) {\n                        addError(\"Individual attribute requires a type\", a);\n                    }\n                }\n            }\n        }\n    }\n    private void checkIndividualEvents() {\n        if (individual.getEvents() == null && Options.isCollectionInitializationEnabled()) {\n            }\n            if (individual.getEvents() != null) {\n                for (IndividualEvent a : individual.getEvents()) {\n                    if (a.getType() == null) {\n                        addError(\"Individual event requires a type\", a);\n                    }\n                    new EventValidator(rootValidator, a).validate();\n                }\n            }\n        }\n    }\n    private void checkSubmitters() {\n            if (individual.getAncestorInterest() != null) {\n                for (Submitter submitter : individual.getAncestorInterest()) {\n                    new SubmitterValidator(rootValidator, submitter).validate();\n                }\n            }\n        }\n        if (individual.getDescendantInterest() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                individual.getDescendantInterest(true).clear();\n                addInfo(\"descendantInterest collection for individual was null - rootValidator.autorepaired\", individual);\n            } else {\n                addError(\"descendantInterest collection for individual is null\", individual);\n            if (individual.getDescendantInterest() != null) {\n                for (Submitter submitter : individual.getDescendantInterest()) {\n                    new SubmitterValidator(rootValidator, submitter).validate();\n                }\n            }\n        }\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java": "import java.util.List;\nimport org.gedcom4j.Options;\nimport org.gedcom4j.model.AbstractCitation;\n    public LdsSpouseSealingValidator(GedcomValidator rootValidator, LdsSpouseSealing s) {\n        this.rootValidator = rootValidator;\n        if (s == null) {\n            addError(\"LDS Spouse Sealing is null and cannot be validated\");\n            return;\n        }\n        List<AbstractCitation> citations = s.getCitations();\n        if (Options.isCollectionInitializationEnabled() && citations == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                s.getCitations(true).clear();\n                addInfo(\"citations collection for lds spouse sealing was null - rootValidator.autorepaired\", s);\n            } else {\n                addError(\"citations collection for lds spouse sealing is null\", s);\n            }\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate citations found and removed\", s);\n                }\n            }\n            if (citations != null) {\n                for (AbstractCitation c : citations) {\n                    new CitationValidator(rootValidator, c).validate();\n                }\n            }\n        checkCustomTags(s);\n        checkOptionalString(s.getDate(), \"date\", s);\n        new NotesValidator(rootValidator, s, s.getNotes()).validate();\n        checkOptionalString(s.getPlace(), \"place\", s);\n        checkOptionalString(s.getStatus(), \"status\", s);\n        checkOptionalString(s.getTemple(), \"temple\", s);\n",
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java": "import org.gedcom4j.Options;\nimport org.gedcom4j.exception.GedcomValidationException;\nimport org.gedcom4j.model.*;\n            throw new GedcomValidationException(\"Root validator passed in to MultimediaValidator constructor was null\");\n        }\n        mm = multimedia;\n        if (rootValidator.gedcom == null || rootValidator.gedcom.getHeader() == null || rootValidator.gedcom.getHeader().getGedcomVersion() == null\n                gedcomVersion = SupportedVersion.V5_5_1;\n                rootValidator.addInfo(\"Was not able to determine GEDCOM version - assuming 5.5.1\", rootValidator.gedcom);\n            } else {\n                rootValidator.addError(\"Was not able to determine GEDCOM version - cannot validate multimedia objects\", rootValidator.gedcom);\n            }\n        } else {\n            gedcomVersion = rootValidator.gedcom.getHeader().getGedcomVersion().getVersionNumber();\n        }\n                addError(\"Null file reference in list of file references in multimedia object\", mm);\n            }\n            return;\n        }\n        checkRequiredString(fr.getFormat(), \"format\", fr);\n        checkOptionalString(fr.getMediaType(), \"media type\", fr);\n        checkOptionalString(fr.getTitle(), \"title\", fr);\n        checkRequiredString(fr.getReferenceToFile(), \"reference to file\", fr);\n    }\n                rootValidator.addInfo(\"List of user references on multimedia object was null - repaired\", mm);\n            } else {\n                rootValidator.addError(\"List of user references on multimedia object is null\", mm);\n                return;\n            }\n        }\n        if (rootValidator.isAutorepairEnabled()) {\n            int dups = new DuplicateEliminator<UserReference>(userReferences).process();\n            if (dups > 0) {\n                rootValidator.addInfo(dups + \" duplicate user references found and removed\", mm);\n            }\n        }\n        if (userReferences != null) {\n            for (UserReference u : userReferences) {\n                checkCustomTags(u);\n                    if (rootValidator.isAutorepairEnabled()) {\n                        addError(\"User reference is has a null or blank reference number - cannot repair\", u);\n                    } else {\n                        addError(\"User reference is has a null or blank reference number\", u);\n                    }\n                    continue;\n                }\n            }\n        }\n    }\n            } else {\n                addError(\"Multimedia object must have xref\", mm);\n            }\n            return;\n        }\n        if (rootValidator.gedcom.getMultimedia().get(mm.getXref()) != mm) {\n            if (rootValidator.isAutorepairEnabled()) {\n            } else {\n                rootValidator.addError(\"Multimedia object not keyed by xref in map\", mm);\n            }\n            return;\n        }\n    }\n    private boolean v551() {\n        return SupportedVersion.V5_5_1.equals(gedcomVersion);\n    }\n    private void validate55() {\n                addError(\"Embedded media object has an empty blob object\", mm);\n            }\n        }\n        checkRequiredString(mm.getEmbeddedMediaFormat(), \"embedded media format\", mm);\n        if (mm.getCitations() != null && !mm.getCitations().isEmpty()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                rootValidator.addError(\"Citations collection is populated, but not allowed in \" + \"v5.5 of gedcom\", mm);\n            }\n        }\n    }\n                rootValidator.addError(\"Multimedia object does not have list of file references\", mm);\n                return;\n            }\n        }\n        if (mm.getFileReferences() != null) {\n            for (FileReference fr : mm.getFileReferences()) {\n                checkFileReference(fr);\n            }\n        }\n            }\n        }\n        if (mm.getEmbeddedMediaFormat() != null) {\n            if (rootValidator.isAutorepairEnabled()) {\n        }\n        if (mm.getCitations() != null) {\n            for (AbstractCitation c : mm.getCitations()) {\n                new CitationValidator(rootValidator, c).validate();\n        }\n    private void validateCommon() {\n        checkXref();\n                addError(\"citations collection for multimedia object is null\", mm);\n        if (mm.getContinuedObject() != null) {\n            new MultimediaValidator(rootValidator, mm.getContinuedObject()).validate();\n        }\n        if (Options.isCollectionInitializationEnabled() && mm.getBlob() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                mm.getBlob(true).clear();\n                rootValidator.addInfo(\"Embedded blob was null - repaired\", mm);\n            } else {\n                rootValidator.addError(\"Embedded blob is null\", mm);\n            }\n        }\n        new NotesValidator(rootValidator, mm, mm.getNotes()).validate();\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/NameVariationValidator.java": "    public NameVariationValidator(GedcomValidator rootValidator, AbstractNameVariation nv) {\n        this.rootValidator = rootValidator;\n        if (nv == null) {\n            addError(\"Name variation is null and cannot be validated\");\n            return;\n        }\n        checkCustomTags(nv);\n        checkRequiredString(nv.getVariation(), \"variation on a personal name\", nv);\n        checkOptionalString(nv.getVariationType(), \"type of variation on a personal name\", nv);\n",
            "src/main/java/org/gedcom4j/validate/NoteValidator.java": "package org.gedcom4j.validate;\nimport java.util.List;\nimport org.gedcom4j.Options;\nimport org.gedcom4j.model.AbstractCitation;\nimport org.gedcom4j.model.Note;\nclass NoteValidator extends AbstractValidator {\n    private final Note n;\n    private final int i;\n    public NoteValidator(GedcomValidator rootValidator, int i, Note n) {\n        this.rootValidator = rootValidator;\n        this.i = i;\n        this.n = n;\n    }\n    @Override\n    protected void validate() {\n        if (Options.isCollectionInitializationEnabled() && n.getLines() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                n.getLines(true).clear();\n                addInfo(\"Lines of text collection on note was null - autorepaired\");\n            } else {\n                addError(\"Lines of text collection on note is null\", n);\n                return;\n            }\n        }\n        if (n.getXref() == null && (n.getLines() == null || n.getLines().isEmpty())) {\n            addError(\"Note \" + i + \" without xref has no lines\", n);\n        }\n        checkOptionalString(n.getRecIdNumber(), \"automated record id\", n);\n        List<AbstractCitation> citations = n.getCitations();\n        if (citations == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                n.getCitations(true).clear();\n                addInfo(\"Source citations collection on note was null - autorepaired\");\n            } else {\n                addError(\"Source citations collection on note is null\", n);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate citations found and removed\", n);\n                }\n            }\n            if (citations != null) {\n                for (AbstractCitation c : citations) {\n                    new CitationValidator(rootValidator, c).validate();\n                }\n            }\n        }\n        if (n.getUserReferences() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                n.getUserReferences(true).clear();\n                addInfo(\"User references collection on note was null - autorepaired\");\n            } else {\n                addError(\"User references collection on note is null\", n);\n            }\n        } else {\n            checkUserReferences(n.getUserReferences(), n);\n        }\n        checkChangeDate(n.getChangeDate(), n);\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/NotesValidator.java": "package org.gedcom4j.validate;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.gedcom4j.Options;\nimport org.gedcom4j.exception.GedcomValidationException;\nimport org.gedcom4j.model.Note;\nclass NotesValidator extends AbstractValidator {\n    private final List<Note> notes;\n    private final Object parentObject;\n    public NotesValidator(GedcomValidator rootValidator, Object parentObject, List<Note> notes) {\n        this.rootValidator = rootValidator;\n        this.parentObject = parentObject;\n        this.notes = notes;\n    }\n    @Override\n    protected void validate() {\n        if (notes == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                try {\n                    Field f = parentObject.getClass().getField(\"notes\");\n                    f.set(parentObject, new ArrayList<Note>(0));\n                    addInfo(\"Notes collection on \" + parentObject.getClass().getSimpleName() + \" was null - autorepaired\");\n                } catch (SecurityException e) {\n                    throw new GedcomValidationException(\"Could not autorepair null notes collection on \" + parentObject.getClass().getSimpleName(), e);\n                } catch (NoSuchFieldException e) {\n                    throw new GedcomValidationException(\"Could not autorepair null notes collection on \" + parentObject.getClass().getSimpleName(), e);\n                } catch (IllegalArgumentException e) {\n                    throw new GedcomValidationException(\"Could not autorepair null notes collection on \" + parentObject.getClass().getSimpleName(), e);\n                } catch (IllegalAccessException e) {\n                    throw new GedcomValidationException(\"Could not autorepair null notes collection on \" + parentObject.getClass().getSimpleName(), e);\n                }\n            } else {\n                addError(\"Notes collection on \" + parentObject.getClass().getSimpleName() + \" is null\");\n            }\n        } else {\n            int i = 0;\n            if (notes != null) {\n                if (rootValidator.isAutorepairEnabled()) {\n                    int dups = new DuplicateEliminator<Note>(notes).process();\n                    if (dups > 0) {\n                        rootValidator.addInfo(dups + \" duplicate notes found and removed\", notes);\n                    }\n                }\n                for (Note n : notes) {\n                    i++;\n                    new NoteValidator(rootValidator, i, n).validate();\n                }\n            }\n        }\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java": "import java.util.List;\nimport org.gedcom4j.Options;\nimport org.gedcom4j.model.AbstractCitation;\nimport org.gedcom4j.model.PersonalNameVariation;\n    public PersonalNameValidator(GedcomValidator rootValidator, PersonalName pn) {\n        this.rootValidator = rootValidator;\n        if (pn == null) {\n            addError(\"Personal name was null - cannot validate\");\n            return;\n        }\n        checkRequiredString(pn.getBasic(), \"basic name\", pn);\n        if (pn.getCitations() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                pn.getCitations(true).clear();\n                addInfo(\"citations collection for personal name was null - autorepaired\", pn);\n            } else {\n                addError(\"citations collection for personal name is null\", pn);\n            }\n        }\n        if (pn.getCitations() != null) {\n            for (AbstractCitation c : pn.getCitations()) {\n                new CitationValidator(rootValidator, c).validate();\n            }\n        }\n        checkCustomTags(pn);\n        checkOptionalString(pn.getGivenName(), \"given name\", pn);\n        checkOptionalString(pn.getNickname(), \"nickname\", pn);\n        checkOptionalString(pn.getPrefix(), \"prefix\", pn);\n        checkOptionalString(pn.getSuffix(), \"suffix\", pn);\n        checkOptionalString(pn.getSurname(), \"surname\", pn);\n        checkOptionalString(pn.getSurnamePrefix(), \"surname prefix\", pn);\n        new NotesValidator(rootValidator, pn, pn.getNotes()).validate();\n        List<PersonalNameVariation> phonetic = pn.getPhonetic();\n        if (phonetic == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                pn.getPhonetic(true).clear();\n                rootValidator.addInfo(\"PersonalNameValidator had null list of phonetic name variations - repaired\", pn);\n            } else {\n                rootValidator.addError(\"PersonalNamevalidator has null list of phonetic name variations\", pn);\n            }\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<PersonalNameVariation>(phonetic).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate phonetic found and removed\", pn);\n                }\n            }\n            if (phonetic != null) {\n                for (AbstractNameVariation nv : phonetic) {\n                    PersonalNameVariation pnv = (PersonalNameVariation) nv;\n                    new PersonalNameVariationValidator(rootValidator, pnv).validate();\n                }\n            }\n        List<PersonalNameVariation> romanized = pn.getRomanized();\n        if (romanized == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                pn.getRomanized(true).clear();\n                rootValidator.addInfo(\"Event had null list of romanized name variations - repaired\", pn);\n            } else {\n                rootValidator.addError(\"Event has null list of romanized name variations\", pn);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<PersonalNameVariation>(romanized).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate romanized variations found and removed\", pn);\n                }\n            }\n            if (romanized != null) {\n                for (AbstractNameVariation nv : romanized) {\n                    PersonalNameVariation pnv = (PersonalNameVariation) nv;\n                    new PersonalNameVariationValidator(rootValidator, pnv).validate();\n                }\n            }\n",
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java": "import java.util.List;\nimport org.gedcom4j.model.AbstractCitation;\n    public PersonalNameVariationValidator(GedcomValidator rootValidator, PersonalNameVariation pnv) {\n        super(rootValidator, pnv);\n        if (!(nv instanceof PersonalNameVariation)) {\n            addError(\"Name variation on person is not a PersonalNameVariation\");\n            return;\n        }\n        List<AbstractCitation> citations = pnv.getCitations();\n        if (citations == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                pnv.getCitations(true).clear();\n                addInfo(\"citations collection for personal name was null - autorepaired\", pnv);\n            } else {\n                addError(\"citations collection for personal name is null\", pnv);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<AbstractCitation>(citations).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate citations found and removed\", pnv);\n                }\n            }\n            for (AbstractCitation c : citations) {\n                new CitationValidator(rootValidator, c).validate();\n            }\n        }\n        checkOptionalString(pnv.getGivenName(), \"given name\", pnv);\n        checkOptionalString(pnv.getNickname(), \"nickname\", pnv);\n        checkOptionalString(pnv.getPrefix(), \"prefix\", pnv);\n        checkOptionalString(pnv.getSuffix(), \"suffix\", pnv);\n        checkOptionalString(pnv.getSurname(), \"surname\", pnv);\n        checkOptionalString(pnv.getSurnamePrefix(), \"surname prefix\", pnv);\n        new NotesValidator(rootValidator, pnv, pnv.getNotes()).validate();\n",
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java": "import java.util.List;\nimport org.gedcom4j.Options;\nimport org.gedcom4j.model.AbstractCitation;\n    public PlaceValidator(GedcomValidator rootValidator, Place place) {\n        this.rootValidator = rootValidator;\n        }\n        if (place.getCitations() == null && Options.isCollectionInitializationEnabled()) {\n            if (rootValidator.isAutorepairEnabled()) {\n                place.getCitations(true).clear();\n                rootValidator.addInfo(\"Event had null list of citations - repaired\", place);\n            } else {\n                rootValidator.addError(\"Event has null list of citations\", place);\n            }\n        }\n        if (place.getCitations() != null) {\n            for (AbstractCitation c : place.getCitations()) {\n                new CitationValidator(rootValidator, c).validate();\n            }\n        }\n        checkCustomTags(place);\n        checkOptionalString(place.getLatitude(), \"latitude\", place);\n        checkOptionalString(place.getLongitude(), \"longitude\", place);\n        checkOptionalString(place.getPlaceFormat(), \"place format\", place);\n        if (place.getPlaceName() == null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                addError(\"Place name was unspecified and cannot be repaired\");\n                addError(\"Place name was unspecified\");\n            }\n        }\n        List<AbstractNameVariation> phonetic = place.getPhonetic();\n                place.getPhonetic(true).clear();\n                rootValidator.addInfo(\"Event had null list of phonetic name variations - repaired\", place);\n            } else {\n                rootValidator.addError(\"Event has null list of phonetic name variations\", place);\n            }\n        }\n        if (phonetic != null) {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<AbstractNameVariation>(phonetic).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate phonetic variations found and removed\", place);\n                }\n            }\n            for (AbstractNameVariation nv : phonetic) {\n                new NameVariationValidator(rootValidator, nv).validate();\n            }\n        }\n        List<AbstractNameVariation> romanized = place.getRomanized();\n        if (romanized == null && Options.isCollectionInitializationEnabled()) {\n                place.getRomanized(true).clear();\n                rootValidator.addInfo(\"Event had null list of romanized name variations - repaired\", place);\n            } else {\n                rootValidator.addError(\"Event has null list of romanized name variations\", place);\n            }\n        }\n        if (rootValidator.isAutorepairEnabled()) {\n            int dups = new DuplicateEliminator<AbstractNameVariation>(romanized).process();\n                rootValidator.addInfo(dups + \" duplicate romanized variations found and removed\", place);\n            }\n        }\n        if (romanized != null) {\n            }\n        }\n    }\n}\n",
            "src/main/java/org/gedcom4j/validate/RepositoryValidator.java": "    public RepositoryValidator(GedcomValidator gedcomValidator, Repository repository) {\n        rootValidator = gedcomValidator;\n        }\n        checkXref(repository);\n        checkOptionalString(repository.getName(), \"name\", repository);\n        checkChangeDate(repository.getChangeDate(), repository);\n        checkStringTagList(repository.getEmails(), \"email list\", false);\n        checkUserReferences(repository.getUserReferences(), repository);\n        checkStringTagList(repository.getPhoneNumbers(), \"phone numbers\", false);\n        Address a = repository.getAddress();\n        if (a != null) {\n    }\n",
            "src/main/java/org/gedcom4j/validate/SourceValidator.java": "import org.gedcom4j.Options;\nclass SourceValidator extends AbstractValidator {\n    public SourceValidator(GedcomValidator rootValidator, Source source) {\n        checkChangeDate(source.getChangeDate(), source);\n        if (source.getData() != null) {\n            SourceData sd = source.getData();\n            new NotesValidator(rootValidator, sd, sd.getNotes()).validate();\n            checkOptionalString(sd.getRespAgency(), \"responsible agency\", sd);\n                    sd.getEventsRecorded(true).clear();\n                    addInfo(\"Collection of recorded events in source data structure was null - autorepaired\", sd);\n                }\n            } else {\n                if (rootValidator.isAutorepairEnabled()) {\n                    int dups = new DuplicateEliminator<EventRecorded>(eventsRecorded).process();\n                    if (dups > 0) {\n                        rootValidator.addInfo(dups + \" duplicate recorded events found and removed\", sd);\n                }\n                for (EventRecorded er : eventsRecorded) {\n                    checkOptionalString(er.getDatePeriod(), \"date period\", er);\n                    checkOptionalString(er.getEventType(), \"event type\", er);\n                    checkOptionalString(er.getJurisdiction(), \"jurisdiction\", er);\n        }\n        List<Multimedia> multimedia = source.getMultimedia();\n        if (multimedia == null && Options.isCollectionInitializationEnabled()) {\n            }\n            addError(\"Multimedia collection on source is null\", source);\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<Multimedia>(multimedia).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate multimedia found and removed\", source);\n                }\n            }\n            if (multimedia != null) {\n                for (Multimedia mm : multimedia) {\n                    new MultimediaValidator(rootValidator, mm).validate();\n                }\n            }\n        }\n        new NotesValidator(rootValidator, source, source.getNotes()).validate();\n        checkStringList(source.getOriginatorsAuthors(), \"originators/authors\", false);\n        checkOptionalString(source.getSourceFiledBy(), \"source filed by\", source);\n        checkStringList(source.getTitle(), \"title\", true);\n        checkUserReferences(source.getUserReferences(), source);\n        RepositoryCitation c = source.getRepositoryCitation();\n        if (c != null) {\n            new NotesValidator(rootValidator, c, c.getNotes()).validate();\n            } else {\n                addError(\"Call numbers collection on repository citation is null\", citation);\n            }\n        } else {\n            if (rootValidator.isAutorepairEnabled()) {\n                int dups = new DuplicateEliminator<SourceCallNumber>(callNumbers).process();\n                if (dups > 0) {\n                    rootValidator.addInfo(dups + \" duplicate source call numbers found and removed\", citation);\n                }\n            }\n            if (callNumbers != null) {\n                for (SourceCallNumber scn : callNumbers) {\n                    checkOptionalString(scn.getCallNumber(), \"call number\", scn);\n                    if (scn.getCallNumber() == null) {\n                        if (scn.getMediaType() != null) {\n                            addError(\"You cannot specify media type without a call number in a SourceCallNumber structure\", scn);\n                        }\n                    } else {\n                        checkOptionalString(scn.getMediaType(), \"media type\", scn);\n                    }\n                }\n            }\n        }\n    }\n",
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java": "import org.gedcom4j.Options;\nimport org.gedcom4j.model.StringWithCustomTags;\n    public SubmitterValidator(GedcomValidator rootValidator, Submitter submitter) {\n        this.rootValidator = rootValidator;\n        }\n        checkXref(submitter);\n        checkRequiredString(submitter.getName(), \"name\", submitter);\n        checkLanguagePreferences();\n        checkOptionalString(submitter.getRecIdNumber(), \"record id number\", submitter);\n        checkOptionalString(submitter.getRegFileNumber(), \"submitter registered rfn\", submitter);\n            new AddressValidator(rootValidator, submitter.getAddress()).validate();\n        }\n    }\n            if (dups > 0) {\n                rootValidator.addInfo(dups + \" duplicate language preferences found and removed\", submitter);\n            }\n        }\n        if (submitter.getLanguagePref(Options.isCollectionInitializationEnabled()) != null) {\n                addError(\"Submitter exceeds limit on language preferences (3)\", submitter);\n            }\n            for (StringWithCustomTags s : languagePref) {\n                checkRequiredString(s, \"language pref\", submitter);\n            }\n        }\n    }\n",
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java": "import org.gedcom4j.model.StringTree;\nimport org.gedcom4j.model.StringWithCustomTags;\nimport org.gedcom4j.model.SupportedVersion;\n    protected void emitStringsWithCustomTags(int level, List<StringWithCustomTags> strings, String tagValue) throws GedcomWriterException {\n                emitTagWithRequiredValue(level, tagValue, f);\n        emitTagIfValueNotNull(level, null, tag, value);\n        }\n            line.append(\" \").append(tag);\n                line.append(level);\n    protected void emitTagWithRequiredValue(int level, String tag, String value) throws GedcomWriterException {\n        emitTagWithRequiredValue(level, null, tag, new StringWithCustomTags(value));\n        emitTagWithRequiredValue(level, null, tag, value);\n    }\n    protected boolean g55() {\n            while (remainder.length() > 0) {\n                    remainder = remainder.substring(MAX_LINE_LENGTH);\n",
            "src/main/java/org/gedcom4j/writer/AddressEmitter.java": "        emitCustomTags(startLevel + 1, writeFrom.getCustomTags());\n",
            "src/main/java/org/gedcom4j/writer/ChangeDateEmitter.java": "    }\n",
            "src/main/java/org/gedcom4j/writer/EventEmitter.java": "        new SourceCitationEmitter(baseWriter, startLevel, writeFrom.getCitations()).emit();\n        new NotesEmitter(baseWriter, startLevel, writeFrom.getNotes()).emit();\n        emitCustomTags(startLevel, writeFrom.getCustomTags());\n",
            "src/main/java/org/gedcom4j/writer/FamilyEmitter.java": "            }\n            if (f.getChildren() != null) {\n                    emitTagWithRequiredValue(1, \"CHIL\", i.getXref());\n                }\n            if (f.getSubmitters() != null) {\n                for (LdsSpouseSealing s : f.getLdsSpouseSealings()) {\n                    emitTagWithRequiredValue(1, \"REFN\", u.getReferenceNum());\n                }\n        }\n}\n",
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": "    private int constructionNotificationRate = 500;\n    public GedcomWriter(Gedcom gedcom) throws WriterCancelledException {\n        baseWriter = this;\n    public boolean isCancelled() {\n        }\n                    numErrorFindings++;\n                }\n            }\n            if (numErrorFindings > 0) {\n                throw new GedcomWriterException(\"Cannot write file - \" + numErrorFindings\n                        + \" error(s) found during validation.  Review the validation findings to determine root cause.\");\n            }\n        }\n        new SubmissionEmitter(baseWriter, 0, writeFrom.getSubmission()).emit();\n        new IndividualEmitter(baseWriter, 0, writeFrom.getIndividuals().values()).emit();\n        new FamilyEmitter(baseWriter, 0, writeFrom.getFamilies().values()).emit();\n            for (StringTree st : customTags) {\n",
            "src/main/java/org/gedcom4j/writer/HeaderEmitter.java": "        if (header.getSubmitter() != null) {\n            emitTagWithRequiredValue(1, \"SUBM\", header.getSubmitter().getXref());\n        if (header.getSubmission() != null) {\n            emitTagWithRequiredValue(1, \"SUBN\", header.getSubmission().getXref());\n        emitTagIfValueNotNull(2, \"VERS\", header.getCharacterSet().getVersionNum());\n        emitCustomTags(1, header.getCustomTags());\n    }\n            emitStringsWithCustomTags(3, corporation.getFaxNumbers(), \"FAX\");\n            emitStringsWithCustomTags(3, corporation.getWwwUrls(), \"WWW\");\n            emitStringsWithCustomTags(3, corporation.getEmails(), \"EMAIL\");\n        }\n    }\n",
            "src/main/java/org/gedcom4j/writer/IndividualEmitter.java": "class IndividualEmitter extends AbstractEmitter<Collection<Individual>> {\n            new SourceCitationEmitter(baseWriter, 1, i.getCitations()).emit();\n        }\n    }\n                new NotesEmitter(baseWriter, level + 1, o.getNotes()).emit();\n    private void emitPersonalNames(int level, List<PersonalName> names) throws GedcomWriterException {\n        if (names != null) {\n        if (i.getFamiliesWhereSpouse() != null) {\n            for (FamilySpouse familySpouse : i.getFamiliesWhereSpouse()) {\n                if (familySpouse == null) {\n",
            "src/main/java/org/gedcom4j/writer/Multimedia551Emitter.java": "            new ChangeDateEmitter(baseWriter, 1, m.getChangeDate()).emit();\n            if (m.getBlob() != null && !m.getBlob().isEmpty()) {\n",
            "src/main/java/org/gedcom4j/writer/Multimedia55Emitter.java": "            new NotesEmitter(baseWriter, 1, m.getNotes()).emit();\n            if (m.getContinuedObject() != null && m.getContinuedObject().getXref() != null) {\n                emitTagWithRequiredValue(1, \"OBJE\", m.getContinuedObject().getXref());\n        }\n",
            "src/main/java/org/gedcom4j/writer/MultimediaLinksEmitter.java": "class MultimediaLinksEmitter extends AbstractEmitter<List<Multimedia>> {\n    MultimediaLinksEmitter(GedcomWriter baseWriter, int startLevel, List<Multimedia> writeFrom) throws WriterCancelledException {\n        for (Multimedia m : writeFrom) {\n                    emitTag(startLevel, \"OBJE\");\n                    new NotesEmitter(baseWriter, startLevel + 1, m.getNotes()).emit();\n                    if (!m.getNotes().isEmpty()) {\n            emitCustomTags(startLevel + 1, m.getCustomTags());\n",
            "src/main/java/org/gedcom4j/writer/PlaceEmitter.java": "        new SourceCitationEmitter(baseWriter, startLevel + 1, writeFrom.getCitations()).emit();\n        new NotesEmitter(baseWriter, startLevel + 1, writeFrom.getNotes()).emit();\n}\n",
            "src/main/java/org/gedcom4j/writer/RepositoryEmitter.java": "            new NotesEmitter(baseWriter, 1, r.getNotes()).emit();\n            emitStringsWithCustomTags(1, r.getPhoneNumbers(), \"PHON\");\n            emitStringsWithCustomTags(1, r.getWwwUrls(), \"WWW\");\n            emitStringsWithCustomTags(1, r.getFaxNumbers(), \"FAX\");\n            emitStringsWithCustomTags(1, r.getEmails(), \"EMAIL\");\n            emitCustomTags(1, r.getCustomTags());\n",
            "src/main/java/org/gedcom4j/writer/SourceEmitter.java": "                new NotesEmitter(baseWriter, 2, d.getNotes()).emit();\n            emitLinesOfText(1, \"PUBL\", s.getPublicationFacts());\n                }\n                }\n",
            "src/main/java/org/gedcom4j/writer/SubmittersEmitter.java": "import org.gedcom4j.model.StringWithCustomTags;\n                for (StringWithCustomTags l : s.getLanguagePref()) {\n            emitStringsWithCustomTags(1, s.getPhoneNumbers(), \"PHON\");\n            emitStringsWithCustomTags(1, s.getWwwUrls(), \"WWW\");\n            emitStringsWithCustomTags(1, s.getFaxNumbers(), \"FAX\");\n            emitStringsWithCustomTags(1, s.getEmails(), \"EMAIL\");\n            emitCustomTags(1, s.getCustomTags());\n",
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java": "import org.junit.Test;\n                + \"Son oncle ( une tante en r\\u00E9alit\\u00E9 Agueda), allait\\u00E9 avec elle, est d\\u00E9c\\u00E9d\\u00E9 ( voir acte). \"\n                + \"Elle croyait qu'il \\u00E9tait mort \\u00E0 cause d'elle, en lui prenant son lait. \"\n",
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java": "import org.gedcom4j.model.Note;\n            assertEquals(1, gp.getWarnings().size());\n",
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java": "import org.gedcom4j.validate.GedcomValidationFinding;\n            gw.write(new NullOutputStream());\n            if (!gw.getValidationFindings().isEmpty()) {\n                System.out.println(this.getClass().getName() + \" found \" + gw.getValidationFindings().size()\n                        + \" validation findings:\");\n                for (GedcomValidationFinding f : gw.getValidationFindings()) {\n                    System.out.println(f);\n                }\n            }\n            throw e;\n        }\n        assertEquals(42, eventCount);\n",
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": "import org.gedcom4j.model.StringWithCustomTags;\n",
            "src/test/java/org/gedcom4j/model/AssociationTest.java": "        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.equals(a2));\n        assertEquals(a1, a2);\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n        assertFalse(a1.hashCode() == a2.hashCode());\n        assertEquals(a1.hashCode(), a2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java": "        assertFalse(\"objects are not equal, so equals() should not return true\", cs1.equals(cs2));\n        assertEquals(\"objects are equal again, so equals() should return true\", cs1, cs2);\n        assertFalse(\"objects are not equal, so hashcodes should not match\", cs1.hashCode() == cs2.hashCode());\n        assertEquals(\"objects are equal again, so hashcodes should match\", cs1.hashCode(), cs2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/CitationDataTest.java": "        c1.customTags = null;\n        c1.customTags = new ArrayList<StringTree>();\n        c1.setEntryDate(new StringWithCustomTags(\"Frying Pan\"));\n        c2.setEntryDate(new StringWithCustomTags(\"Frying Pan\"));\n        c1.getSourceText(true).add(new ArrayList<String>());\n        c2.getSourceText(true).add(new ArrayList<String>());\n        c1.customTags = null;\n        c1.customTags = new ArrayList<StringTree>();\n        c1.setEntryDate(new StringWithCustomTags(\"Frying Pan\"));\n        c2.setEntryDate(new StringWithCustomTags(\"Frying Pan\"));\n        c1.getSourceText(true).add(new ArrayList<String>());\n        c2.getSourceText(true).add(new ArrayList<String>());\n        c1.customTags = null;\n        c1.setEntryDate(new StringWithCustomTags(\"Frying Pan\"));\n        c1.getSourceText(true).add(new ArrayList<String>());\n        assertEquals(\"CitationData [entryDate=Frying Pan, sourceText=[[]], ]\", c1.toString());\n        assertEquals(\"CitationData [sourceText=[], customTags=[]]\", c1.toString());\n        c1.customTags = null;\n        c1.setEntryDate(new StringWithCustomTags(\"Frying Pan\"));\n        c1.getSourceText(true).add(new ArrayList<String>());\n        assertEquals(\"CitationData [entryDate=Frying Pan, sourceText=[[]], ]\", c1.toString());\n",
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java": "        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n        assertFalse(e1.equals(e2));\n        assertTrue(e1.equals(e2));\n",
            "src/test/java/org/gedcom4j/model/FamilyTest.java": "        family1.setHusband(new Individual());\n        family1.getHusband().getNames(true).add(hn1);\n        family1.getHusband().getFamiliesWhereSpouse(true).add(fs1);\n        family1.setWife(new Individual());\n        family1.getWife().getNames(true).add(wn1);\n        family1.getWife().getFamiliesWhereSpouse(true).add(fs1);\n        family2.setHusband(new Individual());\n        family2.getHusband().getNames(true).add(hn2);\n        family2.getHusband().getFamiliesWhereSpouse(true).add(fs2);\n        family2.setWife(new Individual());\n        family2.getWife().getNames(true).add(wn2);\n        family2.getWife().getFamiliesWhereSpouse(true).add(fs2);\n    }\n",
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java": "        assertFalse(\"objects are not equal, so equals() should not return true\", gv1.equals(gv2));\n        assertEquals(\"objects are equal again, so equals() should return true\", gv1, gv2);\n        assertFalse(\"objects are not equal, so hashcodes should not equal\", gv1.hashCode() == gv2.hashCode());\n        assertEquals(\"objects are equal again, so hashcodes should equal\", gv1.hashCode(), gv2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java": "        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.equals(h2));\n        assertEquals(h1, h2);\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n        assertFalse(h1.hashCode() == h2.hashCode());\n        assertEquals(h1.hashCode(), h2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java": "        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertFalse(i1.equals(i2));\n        assertEquals(i1, i2);\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        assertTrue(i1.hashCode() != i2.hashCode());\n        assertEquals(i1.hashCode(), i2.hashCode());\n        i.cause = new StringWithCustomTags(\"Two\");\n        i.getCitations(true).add(new CitationWithoutSource());\n        i.date = new StringWithCustomTags(\"Three\");\n        i.description = new StringWithCustomTags(\"Four\");\n        i.getEmails(true).add(new StringWithCustomTags(\"Five\"));\n        i.getFaxNumbers(true).add(new StringWithCustomTags(\"Six\"));\n        i.getMultimedia(true).add(new Multimedia());\n        i.getNotes(true).add(new Note());\n        i.getPhoneNumbers(true).add(new StringWithCustomTags(\"Seven\"));\n        i.place = new Place();\n        i.respAgency = new StringWithCustomTags(\"Nine\");\n        i.restrictionNotice = new StringWithCustomTags(\"Ten\");\n        i.subType = new StringWithCustomTags(\"Eleven\");\n        i.setType(IndividualAttributeType.FACT);\n        i.yNull = \"Thirteen\";\n        assertEquals(\"IndividualAttribute [type=Fact, address=Address [], age=One, cause=Two, citations=[CitationWithoutSource []], \"\n                + \"date=Three, description=Four, emails=[Five], faxNumbers=[Six], multimedia=[Multimedia []], notes=[Note []], \"\n                + \"phoneNumbers=[Seven], place=Place [], religiousAffiliation=Eight, respAgency=Nine, restrictionNotice=Ten, \"\n                + \"subType=Eleven, wwwUrls=[Twelve], yNull=Thirteen, customTags=[Line 0: 0 (null tag) (null value)]]\", i.toString());\n    }\n",
            "src/test/java/org/gedcom4j/model/IndividualTest.java": "        i.getFamiliesWhereSpouse(true).add(f);\n        addBasicName(f.getFamily().getWife(), \"Anna //\");\n        assertNotNull(i.getSpouses());\n        i.getFamiliesWhereSpouse(true).add(f);\n        addBasicName(f.getFamily().getWife(), \"Elizabeth /Hofstadt/\");\n        assertNotNull(i.getSpouses());\n        i.getFamiliesWhereSpouse(true).add(f);\n        addBasicName(f.getFamily().getWife(), \"Anna //\");\n        i.getFamiliesWhereSpouse(true).add(f);\n        addBasicName(f.getFamily().getWife(), \"Elizabeth /Hofstadt/\");\n        assertEquals(\"Donald /Draper/, spouse of Anna //, spouse of Elizabeth /Hofstadt/\", i.toString());\n    private void addAttributeOfType(Individual i, IndividualAttributeType t) {\n        IndividualAttribute e = new IndividualAttribute();\n        e.setType(t);\n        e.description = new StringWithCustomTags(\"Random text for uniqueness \" + Math.random());\n        i.getAttributes(true).add(e);\n    }\n    private void addBasicName(Individual i, String string) {\n        PersonalName pn = new PersonalName();\n        pn.setBasic(string);\n        i.getNames(true).add(pn);\n    }\n    private void addEventOfType(Individual i, IndividualEventType t) {\n        IndividualEvent e = new IndividualEvent();\n        e.setType(t);\n        e.description = new StringWithCustomTags(\"Random text for uniqueness \" + Math.random());\n        i.getEvents(true).add(e);\n    }\n    private Individual getPerson(Gedcom gedcom, String surname, String givenName) {\n        Individual result = new Finder(gedcom).findByName(surname, givenName).get(0);\n        assertNotNull(\"Couldn't find \" + givenName + \" \" + surname + \" by name in the gedcom\", result);\n        return result;\n    }\n}\n",
            "src/test/java/org/gedcom4j/model/Issue115Test.java": "        f.setHusband(i1);\n        f.getChildren(true).add(i2);\n",
            "src/test/java/org/gedcom4j/model/Issue88Test.java": "        birth.date = new StringWithCustomTags(\"1/1/1950\");\n        birth.date = new StringWithCustomTags(\"1/1/1950\");\n        death.date = new StringWithCustomTags(\"12/31/1999\");\n        death.date = new StringWithCustomTags(\"12/31/1999\");\n",
            "src/test/java/org/gedcom4j/model/LdsSpouseSealingTest.java": "        l1.getCustomTags(true).add(new StringTree());\n        l2.getCustomTags(true).add(new StringTree());\n        l1.date = new StringWithCustomTags(\"Frying Pan\");\n        l2.date = new StringWithCustomTags(\"Frying Pan\");\n        l1.place = new StringWithCustomTags(\"Howdy\");\n        l2.place = new StringWithCustomTags(\"Howdy\");\n        l1.status = new StringWithCustomTags(\"Test\");\n        l2.status = new StringWithCustomTags(\"Test\");\n        l1.getCustomTags(true).add(new StringTree());\n        l2.getCustomTags(true).add(new StringTree());\n        l1.date = new StringWithCustomTags(\"Frying Pan\");\n        l2.date = new StringWithCustomTags(\"Frying Pan\");\n        l1.place = new StringWithCustomTags(\"Howdy\");\n        l2.place = new StringWithCustomTags(\"Howdy\");\n        l1.status = new StringWithCustomTags(\"Test\");\n        l2.status = new StringWithCustomTags(\"Test\");\n        l.getCustomTags(true).add(new StringTree());\n        l.date = new StringWithCustomTags(\"Frying Pan\");\n        l.place = new StringWithCustomTags(\"Howdy\");\n        l.status = new StringWithCustomTags(\"Test\");\n                + \"status=Test, customTags=[Line 0: 0 (null tag) (null value)]]\", l.toString());\n",
            "src/test/java/org/gedcom4j/model/NameVariationTest.java": "        nv1.getCustomTags(true).add(new StringTree());\n        nv1.getCustomTags().clear();\n        nv2.getCustomTags(true).clear();\n        nv1.variationType = new StringWithCustomTags(\"Yo\");\n        nv1.getCustomTags(true).add(new StringTree());\n        nv1.getCustomTags().clear();\n        nv2.getCustomTags(true).clear();\n        nv1.variationType = new StringWithCustomTags(\"Yo\");\n        nv.getCustomTags(true).add(new StringTree());\n        nv.variationType = new StringWithCustomTags(\"All\");\n        assertEquals(\"PersonalNameVariation [variation=Frying Pan, variationType=All, customTags=[Line 0: 0 (null tag) (null value)]]\", nv.toString());\n    }\n",
            "src/test/java/org/gedcom4j/model/PersonalNameVariationTest.java": "        pnv1.getCustomTags(true).add(new StringTree());\n        pnv1.getCustomTags().clear();\n        pnv2.getCustomTags(true).clear();\n        pnv1.setGivenName(new StringWithCustomTags(\"Yo\"));\n        pnv1.setGivenName(null);\n        pnv1.setNickname(new StringWithCustomTags(\"Yo\"));\n        pnv1.setNickname(null);\n        pnv1.getNotes(true).add(new Note());\n        pnv1.getNotes().clear();\n        pnv2.getNotes(true).clear();\n        pnv1.setPrefix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setPrefix(null);\n        pnv1.setSuffix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSuffix(null);\n        pnv1.setSurname(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSurname(null);\n        pnv1.setSurnamePrefix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSurnamePrefix(null);\n        pnv1.variationType = new StringWithCustomTags(\"Yo\");\n        pnv1.getCustomTags(true).add(new StringTree());\n        pnv1.getCustomTags().clear();\n        pnv2.getCustomTags(true).clear();\n        pnv1.setGivenName(new StringWithCustomTags(\"Yo\"));\n        pnv1.setGivenName(null);\n        pnv1.setNickname(new StringWithCustomTags(\"Yo\"));\n        pnv1.setNickname(null);\n        pnv1.getNotes(true).add(new Note());\n        pnv1.getNotes().clear();\n        pnv2.getNotes(true).clear();\n        pnv1.setPrefix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setPrefix(null);\n        pnv1.setSuffix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSuffix(null);\n        pnv1.setSurname(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSurname(null);\n        pnv1.setSurnamePrefix(new StringWithCustomTags(\"Yo\"));\n        pnv1.setSurnamePrefix(null);\n        pnv1.variationType = new StringWithCustomTags(\"Yo\");\n        pnv.getCustomTags(true).add(new StringTree());\n        pnv.setGivenName(new StringWithCustomTags(\"Now\"));\n        pnv.setNickname(new StringWithCustomTags(\"Is\"));\n        pnv.getNotes(true).add(new Note());\n        pnv.setSuffix(new StringWithCustomTags(\"The\"));\n        pnv.setSurname(new StringWithCustomTags(\"Time\"));\n        pnv.setSurnamePrefix(new StringWithCustomTags(\"For\"));\n        pnv.variationType = new StringWithCustomTags(\"All\");\n                + \"variation=Frying Pan, variationType=All, customTags=[Line 0: 0 (null tag) (null value)]]\", pnv.toString());\n    }\n",
            "src/test/java/org/gedcom4j/model/RepositoryTest.java": "        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.equals(r2));\n        assertEquals(r1, r2);\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n        assertFalse(r1.hashCode() == r2.hashCode());\n        assertEquals(r1.hashCode(), r2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/SourceCallNumberTest.java": "        scn1.setCallNumber(new StringWithCustomTags(\"Foo\"));\n        scn2.setCallNumber(new StringWithCustomTags(\"Foo\"));\n        scn1.setMediaType(new StringWithCustomTags(\"Foo\"));\n        scn2.setMediaType(new StringWithCustomTags(\"Foo\"));\n",
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java": "        assertFalse(\"They're not equivalent anymore, so equals should be false\", ss1.equals(ss2));\n        assertEquals(\"equals() should be the same for equivalent objects\", ss1, ss2);\n        assertFalse(\"They're not equivalent anymore, so equals should be false\", ss1.equals(ss2));\n        assertEquals(\"equals() should be the same for equivalent objects\", ss1, ss2);\n        assertFalse(\"They're not equivalent anymore, so the hashcodes should differ\", ss1.hashCode() == ss2.hashCode());\n",
            "src/test/java/org/gedcom4j/model/SourceTest.java": "        s1.customTags = null;\n        s1.getCustomTags(true).clear();\n        s2.getCustomTags(true).clear();\n        s1.getMultimedia(true).add(new Multimedia());\n        s2.getMultimedia(true).add(new Multimedia());\n        s1.getNotes(true).add(new Note());\n        s2.getNotes(true).add(new Note());\n        s1.getOriginatorsAuthors(true).add(\"qweqwe\");\n        s2.getOriginatorsAuthors(true).add(\"qweqwe\");\n        s1.getPublicationFacts(true).add(\"foo\");\n        s2.getPublicationFacts(true).add(\"foo\");\n        s1.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        s2.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        s1.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        s2.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        s1.getSourceText(true).add(\"bar\");\n        s2.getSourceText(true).add(\"bar\");\n        s1.getTitle(true).add(\"baz\");\n        s2.getTitle(true).add(\"baz\");\n        s1.customTags = null;\n        s1.getCustomTags(true).clear();\n        s2.getCustomTags(true).clear();\n        s1.getMultimedia(true).add(new Multimedia());\n        s2.getMultimedia(true).add(new Multimedia());\n        s1.getNotes(true).add(new Note());\n        s2.getNotes(true).add(new Note());\n        s1.getOriginatorsAuthors(true).add(\"foo\");\n        s2.getOriginatorsAuthors(true).add(\"foo\");\n        s1.getPublicationFacts(true).add(\"bar\");\n        s2.getPublicationFacts(true).add(\"bar\");\n        s1.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        s2.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        s1.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        s2.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        s1.getSourceText(true).add(\"baz\");\n        s2.getSourceText(true).add(\"baz\");\n        s1.getTitle(true).add(\"bat\");\n        s2.getTitle(true).add(\"bat\");\n        s1.customTags = null;\n        s1.getNotes(true).add(new Note());\n        s1.getOriginatorsAuthors(true).clear();\n        s1.getPublicationFacts(true).clear();\n        s1.setRecIdNumber(new StringWithCustomTags(\"Foo\"));\n        s1.setSourceFiledBy(new StringWithCustomTags(\"Bar\"));\n        s1.getSourceText(true).clear();\n        s1.getTitle(true).clear();\n        assertEquals(\"Source [changeDate=ChangeDate [], data=SourceData [], multimedia=[], notes=[Note []], originatorsAuthors=[], \"\n                + \"publicationFacts=[], recIdNumber=Foo, repositoryCitation=RepositoryCitation [], sourceFiledBy=Bar, \"\n                + \"sourceText=[], title=[], userReferences=[], xref=Foo, ]\", s1.toString());\n",
            "src/test/java/org/gedcom4j/model/StringTreeTest.java": "        assertFalse(st1.equals(st2));\n        assertTrue(st1.hashCode() != st2.hashCode());\n    }\n        for (Individual i : g.getIndividuals().values()) {\n            assertNotNull(i.getCustomTags(true).toString());\n        for (Multimedia m : g.getMultimedia().values()) {\n            assertNotNull(m.getCustomTags(true).toString());\n        for (Note n : g.getNotes().values()) {\n            assertNotNull(n.getCustomTags(true).toString());\n        }\n    }\n",
            "src/test/java/org/gedcom4j/model/TestHelper.java": "        g.getHeader().setSubmission(g.getSubmission());\n        s.setName(new StringWithCustomTags(\"Joe Tester\"));\n        g.getHeader().setSubmitter(s);\n",
            "src/test/java/org/gedcom4j/parser/FamilyEventTypeParseTest.java": "import static org.junit.Assert.assertTrue;\n        assertTrue(gp.getErrors().isEmpty());\n",
            "src/test/java/org/gedcom4j/parser/GedcomParser551Test.java": "public class GedcomParser551Test {\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/5.5.1 sample 4.ged\");\n        assertTrue(gp.getErrors().isEmpty());\n        gp.load(\"sample/5.5.1 sample 4.ged\");\n        Individual george = g.getIndividuals().get(\"@I3@\");\n",
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java": "        assertTrue(gp.getWarnings().isEmpty());\n        GedcomParser gp = new GedcomParser();\n        gp.load(\"sample/a31486.ged\");\n        assertEquals(3, family.getChildren().size());\n        assertEquals(3, indi.getCitations().size());\n            assertEquals(0, citWithSource.getNotes().size());\n        assertEquals(5, note.getLines().size());\n        source = citWithSource.getSource();\n        assertEquals(1, multimedia.getNotes().size());\n        assertEquals(1, note.getLines().size());\n                note.getLines().get(0));\n        note = indi.getNotes().get(0);\n        assertEquals(40, note.getLines().size());\n        assertEquals(\"Comments on \\\"Joseph Tag Torture\\\" INDIVIDUAL Record.\", note.getLines().get(0));\n        note = indi.getNotes().get(1);\n        assertEquals(\n                \"This is a second set of notes for this single individual record. It is embedded in the INDIVIDUAL record instead of being in a separate NOTE record.\",\n        source = citWithSource.getSource();\n        assertEquals(1, citWithSource.getNotes().size());\n        assertEquals(\"A source note.\", note.getLines().get(0));\n        note = citWithSource.getNotes().get(0);\n    }\n",
            "src/test/java/org/gedcom4j/parser/Issue100Test.java": "import org.gedcom4j.model.Note;\n        assertNotNull(i.getNotes());\n        assertEquals(1, i.getNotes().size());\n        Note n = i.getNotes().get(0);\n",
            "src/test/java/org/gedcom4j/parser/Issue102Test.java": "import org.gedcom4j.model.StringTree;\n        List<StringTree> customTags = submitter.getName().getCustomTags();\n        assertNotNull(customTags);\n        assertEquals(1, customTags.size());\n        assertCustomTagRecursively(customTags.get(0), MAX_DEPTH);\n    private void assertCustomTagRecursively(StringTree customTags, int remaining) {\n        assertEquals(99 - remaining, customTags.getLevel());\n        assertNotNull(\"With \" + remaining + \" levels remaining, customTags was null\", customTags);\n        assertNotNull(\"With \" + remaining + \" levels remaining, customTags had no children\", customTags.getChildren());\n        assertEquals(\"With \" + remaining + \" levels remaining, customTags did not have exactly one child. \", 1, customTags.getChildren().size());\n        StringTree newCustomTags = customTags.getChildren().get(0);\n        assertNotNull(newCustomTags);\n        assertCustomTagRecursively(newCustomTags, remaining - 1);\n    }\n",
            "src/test/java/org/gedcom4j/parser/Issue32Test.java": "import org.gedcom4j.model.Note;\n                checkJohn(john.getNotes());\n                checkMary(mary.getNotes());\n    private void checkJohn(List<Note> notes) {\n        assertNotNull(notes);\n        assertEquals(1, notes.size());\n        Note note = notes.get(0);\n        Note note = notes.get(0);\n        assertEquals(3, note.getLines().size());\n",
            "src/test/java/org/gedcom4j/parser/Issue61Test.java": "import org.gedcom4j.model.StringTree;\n            assertNotNull(i.getCustomTags());\n            assertFalse(\"Individual \" + i + \" has no custom tags\", i.getCustomTags().isEmpty());\n            for (StringTree ct : i.getCustomTags()) {\n                assertTrue(\"Custom tag should be WAND or MUGL, but is \" + ct.getValue(), \"WAND\".equals(ct.getTag()) || \"MUGL\".equals(ct.getTag()));\n                    assertFalse(ct.getValue().trim().length() == 0);\n                }\n                }\n                assertTrue(i.getCustomTags().isEmpty());\n            } else {\n            }\n",
            "src/test/java/org/gedcom4j/parser/Issue63Test.java": "        assertEquals(\"@I001@\", family.getHusband().getXref());\n        assertEquals(\"Husband /Gedcom/\", family.getHusband().getNames().get(0).getBasic());\n        assertEquals(\"@I002@\", family.getWife().getXref());\n        assertEquals(\"Wife /Gedcom/\", family.getWife().getNames().get(0).getBasic());\n",
            "src/test/java/org/gedcom4j/parser/Issue87Test.java": "import org.gedcom4j.model.FamilyEventType;\n",
            "src/test/java/org/gedcom4j/parser/Issue96Test.java": "import org.gedcom4j.model.Note;\n        assertEquals(1, g.getNotes().size());\n",
            "src/test/java/org/gedcom4j/parser/StressFileSpecialCharacterReadTest.java": "import static org.junit.Assert.assertTrue;\nimport org.gedcom4j.model.Note;\n        g = gp.getGedcom();\n        Note note = g.getNotes().get(\"@N24@\");\n        assertEqualsCharByChar(\"     \\u01F9\\u00F2p\\u0300q\\u0300r\\u0300s\\u0300t\\u0300\\u00F9v\\u0300\\u1E81x\\u0300\\u1EF3z\\u0300\", note\n        assertEqualsCharByChar(\"     n\\u0302\\u00F4p\\u0302q\\u0302r\\u0302\\u015Dt\\u0302\\u00FBv\\u0302\\u0175x\\u0302\\u0177\\u1E91\", note\n        assertEqualsCharByChar(\"     n\\u0304\\u014Dp\\u0304q\\u0304r\\u0304s\\u0304t\\u0304\\u016Bv\\u0304w\\u0304x\\u0304\\u0233z\\u0304\", note\n                .getLines().get(51));\n        assertEqualsCharByChar(\"     \\u01CEb\\u030c\\u010D\\u010F\\u011Bf\\u030c\\u01E7\\u021F\\u01D0\\u01F0\\u01E9\\u013Em\\u030c\", note\n        assertEqualsCharByChar(\"     a\\uFE20b\\uFE20c\\uFE20d\\uFE20e\\uFE20f\\uFE20g\\uFE20h\\uFE20i\\uFE20j\\uFE20k\\uFE20l\\uFE20m\\uFE20\",\n        assertEqualsCharByChar(\"     a\\u0315b\\u0315c\\u0315d\\u0315e\\u0315f\\u0315g\\u0315h\\u0315i\\u0315j\\u0315k\\u0315l\\u0315m\\u0315\",\n        assertEqualsCharByChar(\"     a\\u0310b\\u0310c\\u0310d\\u0310e\\u0310f\\u0310g\\u0310h\\u0310i\\u0310j\\u0310k\\u0310l\\u0310m\\u0310\",\n        assertEqualsCharByChar(\"     \\u0105b\\u0328c\\u0328d\\u0328\\u0119f\\u0328g\\u0328h\\u0328\\u012Fj\\u0328k\\u0328l\\u0328m\\u0328\", note\n                note.getLines().get(123));\n                note.getLines().get(135));\n                note.getLines().get(147));\n                note.getLines().get(159));\n                note.getLines().get(171));\n        assertEquals(\"\\u00A9 1997 by H. Eichmann, parts \\u00A9 1999-2000 by J. A. Nairn.\", g.getHeader().getCopyrightData().get(0));\n        assertEqualsCharByChar(\"AB plus-or-minus (\\u00B1)\", note.getLines().get(14));\n        assertEqualsCharByChar(\"C1 script l (\\u2113)\", note.getLines().get(34));\n    private void assertEqualsCharByChar(String expected, String actual) {\n",
            "src/test/java/org/gedcom4j/parser/TagTest.java": "    private static final int EXPECTED_TAG_COUNT = 92;\n",
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": "        Individual i1 = gp.getGedcom().getIndividuals().get(\"@I27@\");\n",
            "src/test/java/org/gedcom4j/relationship/RelationshipCalculatorTest.java": "        assertNotNull(rc.getRelationshipsFound());\n                System.out.println(\"   \" + r);\n        assertEquals(\"Abigail is Alex's great-great-grandmother - there are several ways to get there but one relationship\", 1, rc.getRelationshipsFound()\n",
            "src/test/java/org/gedcom4j/validate/AbstractValidatorTestCase.java": "import junit.framework.TestCase;\n    protected boolean verbose = false;\n    }\n    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n        gedcom = new Gedcom();\n        rootValidator = new GedcomValidator(gedcom);\n    }\n    protected void assertFindingsContain(Severity severity, String... substringOfDescription) {\n        for (GedcomValidationFinding f : rootValidator.getFindings()) {\n            if (f.getSeverity() == severity) {\n                boolean matchAllSoFar = true;\n                for (String substring : substringOfDescription) {\n                    if (!f.getProblemDescription().toLowerCase().contains(substring.toLowerCase())) {\n                        matchAllSoFar = false;\n                if (matchAllSoFar) {\n            for (int i = 0; i < substringOfDescription.length; i++) {\n                if (i == 0) {\n                    sb.append(\" mentioning '\");\n                } else {\n                    sb.append(\" and '\");\n",
            "src/test/java/org/gedcom4j/validate/CitationValidatorTest.java": "        CitationValidator cv = new CitationValidator(rootValidator, null);\n",
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java": "package org.gedcom4j.validate;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\npublic class DuplicateEliminatorTest {\n    @Test\n    public void testEmptyList() {\n        List<String> l = new ArrayList<String>();\n        int count = new DuplicateEliminator<String>(l).process();\n        assertEquals(0, count);\n        assertNotNull(l);\n        assertTrue(l.isEmpty());\n    }\n    @Test\n    public void testListWithDups() {\n        List<String> l = new ArrayList<String>();\n        l.add(\"Foo\");\n        l.add(\"Bar\");\n        l.add(\"Dup\");\n        l.add(\"Dup\");\n        l.add(\"Bat\");\n        assertEquals(5, l.size());\n        int count = new DuplicateEliminator<String>(l).process();\n        assertEquals(1, count);\n        assertEquals(4, l.size());\n        assertEquals(\"Foo\", l.get(0));\n        assertEquals(\"Bar\", l.get(1));\n        assertEquals(\"Dup\", l.get(2));\n        assertEquals(\"Bat\", l.get(3));\n        l.add(\"Foo\");\n        assertEquals(5, l.size());\n        count = new DuplicateEliminator<String>(l).process();\n        assertEquals(1, count);\n        assertEquals(4, l.size());\n        assertEquals(\"Foo\", l.get(0));\n        assertEquals(\"Bar\", l.get(1));\n        assertEquals(\"Dup\", l.get(2));\n        assertEquals(\"Bat\", l.get(3));\n        l.add(\"Foo\");\n        l.add(\"Bar\");\n        l.add(\"Baz\");\n        l.add(\"Bat\");\n        l.set(2, \"Baz\");\n        assertEquals(8, l.size());\n        count = new DuplicateEliminator<String>(l).process();\n        assertEquals(4, count);\n        assertEquals(4, l.size());\n        assertEquals(\"Foo\", l.get(0));\n        assertEquals(\"Bar\", l.get(1));\n        assertEquals(\"Baz\", l.get(2));\n        assertEquals(\"Bat\", l.get(3));\n    }\n    @Test\n    public void testListWithNulls() {\n        List<String> l = new ArrayList<String>();\n        l.add(\"Foo\");\n        l.add(\"Bar\");\n        l.add(null);\n        l.add(\"Baz\");\n        l.add(\"Bat\");\n        assertEquals(5, l.size());\n        int count = new DuplicateEliminator<String>(l).process();\n        assertEquals(0, count);\n        assertEquals(5, l.size());\n        assertEquals(\"Foo\", l.get(0));\n        assertEquals(\"Bar\", l.get(1));\n        assertNull(l.get(2));\n        assertEquals(\"Baz\", l.get(3));\n        assertEquals(\"Bat\", l.get(4));\n        l.set(4, null);\n        l.add(null);\n        assertEquals(6, l.size());\n        count = new DuplicateEliminator<String>(l).process();\n        assertEquals(2, count);\n        assertEquals(4, l.size());\n        assertEquals(\"Foo\", l.get(0));\n        assertEquals(\"Bar\", l.get(1));\n        assertNull(l.get(2));\n        assertEquals(\"Baz\", l.get(3));\n    }\n    @Test\n    public void testNoDupList() {\n        List<String> l = new ArrayList<String>();\n        l.add(\"Foo\");\n        l.add(\"Bar\");\n        l.add(\"Baz\");\n        l.add(\"Bat\");\n        assertEquals(4, l.size());\n        int count = new DuplicateEliminator<String>(l).process();\n        assertEquals(0, count);\n        assertEquals(4, l.size());\n        assertEquals(\"Foo\", l.get(0));\n        assertEquals(\"Bar\", l.get(1));\n        assertEquals(\"Baz\", l.get(2));\n        assertEquals(\"Bat\", l.get(3));\n    }\n    @Test\n    public void testNullList() {\n        List<String> l = null;\n        int count = new DuplicateEliminator<String>(l).process();\n        assertEquals(0, count);\n        assertNull(l);\n    }\n}\n",
            "src/test/java/org/gedcom4j/validate/FamilyValidatorTest.java": "import org.gedcom4j.model.StringWithCustomTags;\n        gedcom.getIndividuals().put(dad.getXref(), dad);\n        mom = new Individual();\n        f.getChildren(true).add(jr);\n        gedcom.getFamilies().put(f.getXref(), f);\n        rootValidator.validate();\n        assertNoIssues();\n    }\n    @Test\n    public void testAutomatedRecordId() {\n        f.setAutomatedRecordId(new StringWithCustomTags((String) null));\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"automated\", \"record\", \"id\", \"no value\");\n    @Test\n        f.getCitations(true).clear();\n        rootValidator.validate();\n        f.getCustomTags(true).clear();\n        f.setHusband(null);\n        assertNoIssues();\n    }\n        f.getChildren(true).add(jr);\n    public void testNoMomInFamily() {\n        rootValidator.validate();\n        assertNoIssues();\n",
            "src/test/java/org/gedcom4j/validate/GedcomValidationFindingTest.java": "package org.gedcom4j.validate;\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class GedcomValidationFindingTest {\n    @Test\n    public void testGedcomValidationFinding1() {\n        GedcomValidationFinding gvf = new GedcomValidationFinding(null, null, this);\n        Assert.assertNotNull(gvf);\n        Assert.assertNull(gvf.getProblemDescription());\n        Assert.assertNull(gvf.getSeverity());\n        Assert.assertSame(this, gvf.getItemWithProblem());\n    }\n    @Test\n    public void testGedcomValidationFinding2() {\n        GedcomValidationFinding gvf = new GedcomValidationFinding(\"testing 1 2 3\", Severity.ERROR, this);\n        Assert.assertNotNull(gvf);\n        Assert.assertEquals(\"testing 1 2 3\", gvf.getProblemDescription());\n        Assert.assertEquals(Severity.ERROR, gvf.getSeverity());\n        Assert.assertSame(this, gvf.getItemWithProblem());\n    }\n    @Test\n    public void testToString() {\n        GedcomValidationFinding gvf = new GedcomValidationFinding(\"testing 1 2 3\", Severity.ERROR, Integer.valueOf(4));\n        Assert.assertEquals(\"ERROR: testing 1 2 3 (4)\", gvf.toString());\n    }\n",
            "src/test/java/org/gedcom4j/validate/GedcomValidatorTest.java": "package org.gedcom4j.validate;\nimport java.io.IOException;\nimport org.gedcom4j.exception.GedcomParserException;\nimport org.gedcom4j.model.*;\nimport org.gedcom4j.parser.GedcomParser;\nimport org.junit.Test;\npublic class GedcomValidatorTest extends AbstractValidatorTestCase {\n    private static final String SAMPLE_STRESS_TEST_FILENAME = \"sample/TGC551.ged\";\n    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n    }\n    public void testAutoRepair() {\n        Gedcom g = new Gedcom();\n        GedcomValidator v = new GedcomValidator(g);\n        v.setAutorepairEnabled(false);\n        v.validate();\n        assertFalse(\"Whether or not autorepair is on, there should be findings\", v.getFindings().isEmpty());\n        for (GedcomValidationFinding f : v.getFindings()) {\n            assertEquals(\"With autorepair off, findings should be at error\", Severity.ERROR, f.getSeverity());\n        }\n    }\n    @Test\n    public void testTrailer() {\n        Gedcom g = new Gedcom();\n        rootValidator.gedcom = g;\n        rootValidator.setAutorepairEnabled(false);\n        Submitter s = new Submitter();\n        s.setXref(\"@SUBM0001@\");\n        s.setName(new StringWithCustomTags(\"test\"));\n        g.getSubmitters().put(s.getXref(), s);\n        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        g.getHeader().setSubmitter(s);\n        g.setTrailer(null);\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"trailer\");\n        g.setTrailer(new Trailer());\n        rootValidator.validate();\n        assertNoIssues();\n    }\n    public void testValidateEmptyGedcom() {\n        Gedcom g = new Gedcom();\n        rootValidator = new GedcomValidator(g);\n        verbose = true;\n        rootValidator.validate();\n        assertTrue(\"A new gedcom structure run through the validator with autorepair on should always have at least one finding\",\n                rootValidator.getFindings().size() > 0);\n        for (GedcomValidationFinding f : rootValidator.getFindings()) {\n            assertEquals(\n                    \"All findings on a new gedcom structure run through the validator with autorepair on should be at level of INFO\",\n                    Severity.INFO, f.getSeverity());\n        }\n    }\n    public void testValidateStressTestFile() throws IOException, GedcomParserException {\n        GedcomParser p = new GedcomParser();\n        p.load(SAMPLE_STRESS_TEST_FILENAME);\n        assertTrue(p.getErrors().isEmpty());\n        rootValidator = new GedcomValidator(p.getGedcom());\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"format\", \"embedded\", \"media\");\n    }\n}\n",
            "src/test/java/org/gedcom4j/validate/HeaderValidatorTest.java": "        Header h = g.getHeader();\n        h.setSubmitter(s);\n        h.setSubmission(g.getSubmission());\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"character set\");\n        h.setCharacterSet(new CharacterSet());\n        rootValidator.validate();\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"character set\", \"name\", \"not\", \"defined\");\n        rootValidator.validate();\n        h.getCharacterSet().setCharacterSetName(new StringWithCustomTags(Encoding.ASCII.getCharacterSetName()));\n        rootValidator.validate();\n        assertNoIssues();\n    }\n    @Test\n        h.setSubmitter(s);\n        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        h.getCopyrightData(true);\n        assertNoIssues();\n    }\n    @Test\n        h.setSubmitter(s);\n        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        h.setSubmission(g.getSubmission());\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"gedcom\", \"version\");\n        h.setGedcomVersion(new GedcomVersion());\n        rootValidator.validate();\n        assertNoIssues();\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"gedcom\", \"version\", \"number\");\n    @Test\n    public void testNoSubmitters() {\n        Gedcom g = new Gedcom();\n        Submitter s = new Submitter();\n        s.setXref(\"@SUBM0001@\");\n        s.setName(new StringWithCustomTags(\"test\"));\n        g.getSubmitters().put(s.getXref(), s);\n        Header h = g.getHeader();\n        h.setSubmitter(s);\n    }\n    @Test\n        h.setSubmitter(s);\n        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        h.setSubmission(g.getSubmission());\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"source system\", \"specified\");\n        h.setSourceSystem(new SourceSystem());\n        rootValidator.validate();\n        ss.setCorporation(null);\n        rootValidator.validate();\n        ss.setCorporation(new Corporation());\n        rootValidator.validate();\n        rootValidator.validate();\n        rootValidator.validate();\n        assertNoIssues();\n        rootValidator.validate();\n        ss.setSystemId(null);\n        rootValidator.validate();\n        ss.setSystemId(\"Test\");\n        rootValidator.validate();\n",
            "src/test/java/org/gedcom4j/validate/IndividualEventValidatorTest.java": "        IndividualEvent e = new IndividualEvent();\n        e.getCitations(true).clear();\n        assertNoIssues();\n",
            "src/test/java/org/gedcom4j/validate/IndividualValidatorTest.java": "import org.gedcom4j.model.TestHelper;\n        v.validate();\n    }\n        rootValidator.validate();\n            assertNotNull(\"The finding should have an object attached\", f.getItemWithProblem());\n                errorsCount++;\n        }\n",
            "src/test/java/org/gedcom4j/validate/Issue111Test.java": "import static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n        i.setXref(\"@I001@\");\n        assertTrue(gv.hasInfo());\n        assertEquals(\"INFO: 1 duplicate names found and removed (Duncan /Highlander/)\", gv.getFindings().get(0).toString());\n        assertEquals(\"There can be only one\", 1, i.getNames().size());\n    }\n}\n",
            "src/test/java/org/gedcom4j/validate/LdsSpouseSealingValidatorTest.java": "        dad.setXref(\"@I00001@\");\n        gedcom.getIndividuals().put(dad.getXref(), dad);\n        gedcom.getIndividuals().put(mom.getXref(), mom);\n        rootValidator.validate();\n    public void testCitations() {\n        s.getCitations(true).clear();\n        rootValidator.validate();\n        s.getCustomTags(true).clear();\n        rootValidator.validate();\n    }\n    @Test\n    public void testDate() {\n        f.getLdsSpouseSealings(true).add(s);\n        s.setDate(new StringWithCustomTags((String) null));\n        s.setDate(new StringWithCustomTags(\"Frying Pan\"));\n        rootValidator.validate();\n        f.getLdsSpouseSealings(true).add(s);\n    public void testNullList() {\n        f.getLdsSpouseSealings(true).clear();\n        rootValidator.validate();\n    }\n    @Test\n    public void testPlace() {\n        f.getLdsSpouseSealings(true).add(s);\n        s.setPlace(new StringWithCustomTags((String) null));\n        s.setPlace(new StringWithCustomTags(\"Frying Pan\"));\n        rootValidator.validate();\n    }\n    @Test\n    public void testStatus() {\n        f.getLdsSpouseSealings(true).add(s);\n        s.setStatus(new StringWithCustomTags((String) null));\n        s.setStatus(new StringWithCustomTags(\"Frying Pan\"));\n        rootValidator.validate();\n    }\n    @Test\n    public void testTemple() {\n        f.getLdsSpouseSealings(true).add(s);\n        s.setTemple(new StringWithCustomTags((String) null));\n",
            "src/test/java/org/gedcom4j/validate/MultimediaValidatorTest.java": "import org.gedcom4j.model.*;\n        g.setSubmission(new Submission(\"@SUBN0001@\"));\n        Header h = g.getHeader();\n        h.setSubmitter(s);\n        mm = new Multimedia();\n    }\n        assertFindingsContain(Severity.ERROR, \"blob\", \"empty\");\n        mm.getBlob(true).add(\"foo\");\n        rootValidator.gedcom.getHeader().getGedcomVersion().setVersionNumber(SupportedVersion.V5_5_1);\n        assertFindingsContain(Severity.ERROR, \"blob\", \"populated\", \"5.5.1\");\n        assertFindingsContain(Severity.ERROR, \"embedded\", \"media\", \"format\", \"5.5.1\");\n        rootValidator.validate();\n        assertNoIssues();\n    }\n",
            "src/test/java/org/gedcom4j/validate/NoteValidatorTest.java": "package org.gedcom4j.validate;\nimport org.gedcom4j.model.*;\nimport org.junit.Test;\npublic class NoteValidatorTest extends AbstractValidatorTestCase {\n    @Test\n    public void testNotesAtRootLevel() {\n        Gedcom g = TestHelper.getMinimalGedcom();\n        rootValidator.gedcom = g;\n        rootValidator.setAutorepairEnabled(false);\n        Note n = new Note();\n        n.setXref(\"@N0001@\");\n        g.getNotes().put(n.getXref(), n);\n        rootValidator.validate();\n        assertNoIssues();\n        n.getCitations(true).clear();\n        rootValidator.validate();\n        assertNoIssues();\n        n.getCitations(true).add(new CitationWithSource());\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"CitationWithSource\", \"non-null\", \"reference\");\n        n.getUserReferences(true).clear();\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"CitationWithSource\", \"non-null\", \"reference\");\n        n.getUserReferences(true).add(new UserReference());\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"reference number\", \"null\");\n    }\n    @Test\n    public void testNotesWithoutXref() {\n        Gedcom g = TestHelper.getMinimalGedcom();\n        rootValidator.gedcom = g;\n        rootValidator.setAutorepairEnabled(false);\n        Note n = new Note();\n        n.setXref(null);\n        g.getHeader().getSubmitter().getNotes(true).add(n);\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"note\", \"without xref\", \"lines\");\n        n.getLines(true).add(\"Frying Pan\");\n        rootValidator.validate();\n        assertNoIssues();\n        n.getCitations(true).clear();\n        rootValidator.validate();\n        assertNoIssues();\n        n.getCitations(true).add(new CitationWithSource());\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"CitationWithSource\", \"non-null\", \"reference\");\n        n.getUserReferences(true).clear();\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"CitationWithSource\", \"non-null\", \"reference\");\n        n.getUserReferences(true).add(new UserReference());\n        rootValidator.validate();\n        assertFindingsContain(Severity.ERROR, \"reference number\", \"UserReference\", \"null\");\n    }\n}\n",
            "src/test/java/org/gedcom4j/validate/PersonalNameValidatorTest.java": "import org.gedcom4j.model.StringWithCustomTags;\n        super.setUp();\n        gedcom = TestHelper.getMinimalGedcom();\n        ind.getNames(true).add(pn);\n    public void testBasic() {\n        pn.setBasic(null);\n        pn.setBasic(\"\");\n        pn.setBasic(\"       \"); // whitespace gets trimmed\n    @Test\n    public void testGivenName() {\n        pn.setGivenName(new StringWithCustomTags((String) null));\n        assertFindingsContain(Severity.ERROR, \"given name\", \"no value\");\n        pn.setGivenName(new StringWithCustomTags(\"\"));\n        assertFindingsContain(Severity.ERROR, \"given name\", \"no value\");\n    @Test\n    public void testNickname() {\n        pn.setNickname(new StringWithCustomTags((String) null));\n        assertFindingsContain(Severity.ERROR, \"nickname\", \"no value\");\n        pn.setNickname(new StringWithCustomTags(\"\"));\n        assertFindingsContain(Severity.ERROR, \"nickname\", \"no value\");\n    @Test\n        rootValidator.validate();\n        assertNoIssues();\n        ind.getNames(true).add(null);\n    @Test\n    public void testPrefix() {\n        pn.setPrefix(new StringWithCustomTags((String) null));\n        assertFindingsContain(Severity.ERROR, \"prefix\", \"no value\");\n        pn.setPrefix(new StringWithCustomTags(\"\"));\n        assertFindingsContain(Severity.ERROR, \"prefix\", \"no value\");\n    @Test\n    public void testSuffix() {\n        pn.setSuffix(new StringWithCustomTags((String) null));\n        assertFindingsContain(Severity.ERROR, \"suffix\", \"no value\");\n        pn.setSuffix(new StringWithCustomTags(\"\"));\n        assertFindingsContain(Severity.ERROR, \"suffix\", \"no value\");\n    @Test\n    public void testSurname() {\n        pn.setSurname(new StringWithCustomTags((String) null));\n        assertFindingsContain(Severity.ERROR, \"surname\", \"no value\");\n        pn.setSurname(new StringWithCustomTags(\"\"));\n        assertFindingsContain(Severity.ERROR, \"surname\", \"no value\");\n    @Test\n    public void testSurnamePrefix() {\n        pn.setSurnamePrefix(new StringWithCustomTags((String) null));\n        assertFindingsContain(Severity.ERROR, \"surname prefix\", \"no value\");\n        pn.setSurnamePrefix(new StringWithCustomTags(\"\"));\n        assertFindingsContain(Severity.ERROR, \"surname prefix\", \"no value\");\n",
            "src/test/java/org/gedcom4j/validate/PersonalNameVariationValidatorTest.java": "        romanized.setGivenName(new StringWithCustomTags(\"Bjorn\"));\n        rootValidator.validate();\n        assertNoIssues();\n        PersonalNameVariation phonetic = new PersonalNameVariation();\n        phonetic.setGivenName(new StringWithCustomTags(\"Byorn\"));\n        rootValidator.validate();\n        assertNoIssues();\n    }\n",
            "src/test/java/org/gedcom4j/validate/SourceValidatorTest.java": "import org.gedcom4j.model.StringWithCustomTags;\n        av.validate();\n        assertFindingsContain(Severity.ERROR, \"record id\", \"source\", \"blank\");\n        assertFindingsContain(Severity.ERROR, \"xref\", \"source\", \"end\", \"at\", \"sign\");\n    }\n        av.validate();\n    }\n    }\n    }\n",
            "src/test/java/org/gedcom4j/validate/SubmitterValidatorTest.java": "import org.gedcom4j.model.StringWithCustomTags;\nimport org.gedcom4j.model.Submitter;\n        assertFindingsContain(Severity.ERROR, \"submitter\", \"null\");\n    }\n    public void testValidateSubmitterHasBlankXref() {\n    }\n    public void testValidateSubmitterHasNoName() {\n        Submitter submitter = new Submitter();\n    public void testValidateSubmitterHasNoXref() {\n        submitter.setName(new StringWithCustomTags(\"somebody\"));\n",
            "src/test/java/org/gedcom4j/writer/EventsWithDescriptionsTest.java": "import org.gedcom4j.model.IndividualEventType;\n        assertNull(eBefore.getyNull());\n        gw.validationSuppressed = true;\n        assertNull(eAfter.getyNull());\n        assertNull(eBefore.getyNull());\n            assertEquals(2, gw.getValidationFindings().size());\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriter551Test.java": "                }\n            }\n            for (GedcomValidationFinding f : gw.getValidationFindings()) {\n        }\n        g.getHeader().getGedcomVersion().setVersionNumber(SupportedVersion.V5_5);\n        m.setEmbeddedMediaFormat(null);\n        gw.write(\"tmp/delete-me.ged\");\n        GedcomWriter gw = new GedcomWriter(g);\n        PersonalName pn = new PersonalName();\n        assertEquals(IndividualEventType.BIRTH, e.getType());\n        Place p = e.getPlace();\n        assertNotNull(p);\n        assertEquals(\"Krakow, Poland\", p.getPlaceName());\n        assertTrue(p.getPhonetic() == null || p.getPhonetic().isEmpty());\n        assertEquals(\"+50\\u00B0 3' 1.49\\\"\", p.getLatitude().getValue());\n        gw.validationSuppressed = false;\n        g1.getMultimedia().put(m1.getXref(), m1);\n        gp.load(\"tmp/writertest551.ged\");\n        assertNotNull(fr.getMediaType());\n    @Test\n        try {\n            fail(\"Expected to get a GedcomWriterException due to missing field on personal name variation\");\n        } catch (GedcomWriterException expected) {\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterConstructionProgressAndCancellationTest.java": "        gw.write(new NullOutputStream());\n        assertEquals(40, notificationCount);\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": "import org.junit.Test;\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20022, linesConstructed);\n    @SuppressWarnings(\"resource\")\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20022, linesConstructed);\n    @SuppressWarnings(\"resource\")\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20022, linesConstructed);\n    @SuppressWarnings(\"resource\")\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20022, linesConstructed);\n    @SuppressWarnings(\"resource\")\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20022, linesConstructed);\n    @SuppressWarnings(\"resource\")\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20022, linesConstructed);\n    @SuppressWarnings(\"resource\")\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20022, linesConstructed);\n    @SuppressWarnings(\"resource\")\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20022, linesConstructed);\n    @SuppressWarnings(\"resource\")\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20019, linesConstructed);\n    @SuppressWarnings(\"resource\")\n        assertEquals(40, constructNotificationCount);\n        assertEquals(20019, linesConstructed);\n    private void cleanUpGedcom(GedcomParser gp, Encoding encoding) {\n        CharacterSet characterSet = new CharacterSet();\n        characterSet.setCharacterSetName(new StringWithCustomTags(encoding.getCharacterSetName()));\n            if (f.getEvents() != null) {\n}\n",
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java": "    private final Gedcom gedcomOrig;\n        tmpDir.mkdirs();\n        FileInputStream byteStream = null;\n    public void setUp() throws Exception {\n                String l1 = n1.getLines().get(i);\n                String l2 = n2.getLines().get(i);\n        boolean matches = true; // optimistic\n            }\n",
            "src/test/java/org/gedcom4j/writer/Issue80WriterTest.java": "        Individual i = new Individual();\n        gw.validationSuppressed = false;\n        gw.setUseLittleEndianForUnicode(false);\n",
            "src/test/java/org/gedcom4j/writer/Issue89Test.java": "import org.gedcom4j.validate.GedcomValidationFinding;\nimport org.junit.Test;\n        sct.setTag(\"_CUSTSB\");\n        s.getCustomTags(true).add(sct);\n        StringTree nct = new StringTree();\n        nct.setLevel(999);\n        nct.setTag(\"_CUSTNM\");\n        s.getName().getCustomTags(true).add(nct);\n        StringTree hct = new StringTree();\n        hct.setTag(\"_CUSTHD\");\n        hct.setValue(\"Custom Header Tag\");\n        g.getHeader().getCustomTags(true).add(hct);\n        StringTree hct2 = new StringTree();\n        hct2.setId(\"@CT004@\");\n        hct2.setTag(\"_CUSTHD2\");\n        hct2.setValue(\"Custom Inner Tag inside Custom Header Tag\");\n        hct.getChildren(true).add(hct2);\n        GedcomWriter gw = new GedcomWriter(g);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n            gw.write(baos);\n        } catch (GedcomWriterException e) {\n            }\n            throw e;\n",
            "src/test/java/org/gedcom4j/writer/Issue95Test.java": "                assertEquals(\"_METHOD\", ct.getTag());\n                assertEquals(\"Hatched from egg\", ct.getValue());\n                assertEquals(2, ct.getLevel());\n            } else if (ev.getType() == IndividualEventType.DEATH) {\n                assertEquals(\"Suffolk, VA, USA\", ev.getPlace().getPlaceName());\n                assertTrue(ev.getCustomTags() == null || ev.getCustomTags().isEmpty());\n            }\n",
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": "import org.gedcom4j.model.StringWithCustomTags;\n        Submitter s = new Submitter();\n        g.getSubmitters().put(s.getXref(), s);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/gedcom4j/io/encoding/AnselMapping.java": [
                359
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeBigEndianReader.java": [
                95,
                111
            ],
            "src/main/java/org/gedcom4j/io/reader/UnicodeLittleEndianReader.java": [
                97,
                113
            ],
            "src/main/java/org/gedcom4j/model/AbstractElement.java": [
                29,
                41,
                50,
                67,
                68,
                71,
                80,
                91,
                93,
                94,
                95,
                97,
                118,
                120
            ],
            "src/main/java/org/gedcom4j/model/AbstractEvent.java": [
                252,
                261,
                371,
                417,
                427,
                467,
                502,
                562,
                563,
                564,
                600
            ],
            "src/main/java/org/gedcom4j/model/AbstractLdsOrdinance.java": [
                55,
                60,
                65,
                70,
                153,
                162,
                171,
                205,
                225,
                235,
                256,
                257,
                276,
                277,
                278
            ],
            "src/main/java/org/gedcom4j/model/AbstractNameVariation.java": [
                50,
                151,
                153
            ],
            "src/main/java/org/gedcom4j/model/Address.java": [
                153,
                162,
                171,
                180,
                213,
                222,
                345,
                346,
                347
            ],
            "src/main/java/org/gedcom4j/model/Association.java": [
                39,
                48,
                63,
                68,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                167,
                168,
                169,
                179,
                180,
                181,
                182,
                183,
                184,
                265,
                266,
                267,
                268,
                269,
                275,
                276
            ],
            "src/main/java/org/gedcom4j/model/ChangeDate.java": [
                43,
                48,
                87,
                144,
                145,
                146,
                154,
                155,
                156
            ],
            "src/main/java/org/gedcom4j/model/CharacterSet.java": [
                45,
                50,
                151,
                152
            ],
            "src/main/java/org/gedcom4j/model/CitationData.java": [
                48,
                53,
                112,
                158,
                159
            ],
            "src/main/java/org/gedcom4j/model/CitationWithSource.java": [
                51,
                62,
                94,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                160,
                161,
                162,
                194,
                201,
                202,
                203,
                212,
                213,
                214,
                215,
                216,
                217,
                226,
                244,
                255,
                256,
                257,
                258,
                259,
                267,
                269,
                358,
                359,
                360,
                363,
                364,
                365
            ],
            "src/main/java/org/gedcom4j/model/CitationWithoutSource.java": [
                67,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                159
            ],
            "src/main/java/org/gedcom4j/model/EventRecorded.java": [
                44,
                49,
                54,
                187,
                188
            ],
            "src/main/java/org/gedcom4j/model/Family.java": [
                251,
                280,
                339,
                371,
                382,
                394,
                421,
                467,
                511,
                531,
                632,
                633,
                634,
                672,
                673,
                674
            ],
            "src/main/java/org/gedcom4j/model/FamilyChild.java": [
                29,
                30,
                32,
                39,
                48,
                58,
                63,
                69,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                155,
                156,
                157,
                167,
                168,
                169,
                170,
                171,
                172,
                267,
                268,
                269,
                270,
                271,
                282,
                283
            ],
            "src/main/java/org/gedcom4j/model/FamilyEvent.java": [
                45,
                55,
                97,
                115,
                138,
                158
            ],
            "src/main/java/org/gedcom4j/model/FamilySpouse.java": [
                29,
                30,
                32,
                40,
                54,
                89,
                90,
                91,
                92,
                93,
                94,
                110,
                111,
                112,
                122,
                123,
                124,
                125,
                126,
                127,
                129,
                130,
                131,
                166,
                167,
                168,
                169,
                170,
                171,
                172
            ],
            "src/main/java/org/gedcom4j/model/FileReference.java": [
                44,
                49,
                54,
                59,
                224,
                226
            ],
            "src/main/java/org/gedcom4j/model/Gedcom.java": [
                285,
                413
            ],
            "src/main/java/org/gedcom4j/model/GedcomVersion.java": [
                44,
                49,
                150,
                151
            ],
            "src/main/java/org/gedcom4j/model/Header.java": [
                65,
                70,
                75,
                191,
                192,
                195,
                198,
                199,
                202,
                252,
                261,
                270,
                288,
                297,
                316,
                320,
                376,
                386,
                396,
                416,
                426,
                446,
                447,
                456,
                457,
                466,
                512,
                513,
                514,
                527,
                528,
                529,
                532,
                534,
                542,
                543,
                544
            ],
            "src/main/java/org/gedcom4j/model/HeaderSourceData.java": [
                50,
                55,
                60,
                193,
                194
            ],
            "src/main/java/org/gedcom4j/model/Individual.java": [
                122,
                123,
                276,
                277,
                278,
                279,
                280,
                281,
                282,
                336,
                337,
                343,
                354,
                710,
                711,
                712,
                713,
                720,
                721,
                722,
                731,
                732,
                733,
                734,
                735,
                750,
                785,
                786,
                919,
                980,
                982,
                991,
                994,
                1045,
                1053,
                1084,
                1085
            ],
            "src/main/java/org/gedcom4j/model/LdsIndividualOrdinance.java": [
                113,
                192,
                193,
                194,
                212,
                213,
                214
            ],
            "src/main/java/org/gedcom4j/model/LdsSpouseSealing.java": [
                58,
                59,
                60,
                78,
                79,
                80
            ],
            "src/main/java/org/gedcom4j/model/Multimedia.java": [
                80,
                85,
                261,
                311,
                383,
                384,
                393,
                469,
                470,
                471,
                489,
                490,
                491
            ],
            "src/main/java/org/gedcom4j/model/PersonalName.java": [
                223,
                232,
                264,
                296,
                305,
                354,
                364,
                374,
                384,
                394,
                404
            ],
            "src/main/java/org/gedcom4j/model/PersonalNameVariation.java": [
                53,
                58,
                63,
                68,
                73,
                78,
                83,
                126,
                127,
                130,
                207,
                216,
                225,
                226,
                237,
                238,
                239,
                241,
                249,
                258,
                267,
                276,
                293,
                309,
                319,
                329,
                339,
                349,
                359,
                385,
                386,
                387,
                420,
                421,
                422
            ],
            "src/main/java/org/gedcom4j/model/Place.java": [
                53,
                58,
                68,
                176,
                185,
                217,
                286,
                296,
                357,
                358,
                359
            ],
            "src/main/java/org/gedcom4j/model/Repository.java": [
                54,
                59,
                138,
                147,
                190,
                191
            ],
            "src/main/java/org/gedcom4j/model/RepositoryCitation.java": [
                155,
                156,
                157
            ],
            "src/main/java/org/gedcom4j/model/Source.java": [
                255,
                267,
                268,
                269,
                270,
                271,
                278,
                279,
                280,
                290,
                291,
                292,
                293,
                294,
                295,
                302,
                303,
                304,
                313,
                340,
                341,
                348,
                349,
                350,
                366,
                367,
                368,
                375,
                376,
                377,
                461,
                517,
                518,
                519,
                567,
                568,
                569
            ],
            "src/main/java/org/gedcom4j/model/SourceCallNumber.java": [
                43,
                48,
                149,
                150
            ],
            "src/main/java/org/gedcom4j/model/SourceData.java": [
                53,
                115,
                137,
                153,
                154,
                155
            ],
            "src/main/java/org/gedcom4j/model/SourceSystem.java": [
                55,
                139,
                166,
                267,
                268,
                269
            ],
            "src/main/java/org/gedcom4j/model/StringTree.java": [
                29,
                51,
                66,
                121,
                122,
                125,
                179,
                180,
                181,
                236,
                250,
                251,
                252,
                309,
                310
            ],
            "src/main/java/org/gedcom4j/model/Submission.java": [
                43,
                48,
                53,
                58,
                63,
                73,
                381,
                382
            ],
            "src/main/java/org/gedcom4j/model/Submitter.java": [
                179,
                190,
                202,
                213,
                225,
                234,
                243,
                286,
                323
            ],
            "src/main/java/org/gedcom4j/model/Trailer.java": [
                29,
                37
            ],
            "src/main/java/org/gedcom4j/model/UserReference.java": [
                43,
                48,
                149,
                150
            ],
            "src/main/java/org/gedcom4j/parser/AbstractParser.java": [
                104,
                280,
                289,
                290,
                291,
                303
            ],
            "src/main/java/org/gedcom4j/parser/AddressParser.java": [
                31,
                66,
                68,
                70,
                72,
                74,
                76
            ],
            "src/main/java/org/gedcom4j/parser/AssociationParser.java": [
                66,
                68,
                69,
                74
            ],
            "src/main/java/org/gedcom4j/parser/ChangeDateParser.java": [
                32,
                34,
                64,
                65,
                66,
                69,
                70
            ],
            "src/main/java/org/gedcom4j/parser/CitationListParser.java": [
                91,
                94,
                158,
                160,
                164,
                175,
                177,
                178,
                180
            ],
            "src/main/java/org/gedcom4j/parser/CorporationParser.java": [
                32,
                65,
                67,
                75,
                83
            ],
            "src/main/java/org/gedcom4j/parser/FamilyChildParser.java": [
                31,
                66,
                67,
                69,
                73
            ],
            "src/main/java/org/gedcom4j/parser/FamilyEventParser.java": [
                70,
                72,
                78,
                81,
                82,
                87,
                94,
                101,
                103,
                109,
                111,
                113,
                120,
                127,
                134,
                136,
                139,
                145
            ],
            "src/main/java/org/gedcom4j/parser/FamilyParser.java": [
                38,
                69,
                71,
                73,
                75,
                80,
                83,
                89,
                90,
                92,
                99,
                109
            ],
            "src/main/java/org/gedcom4j/parser/FileReference551Parser.java": [
                33,
                61,
                68,
                70,
                88,
                94,
                97,
                101
            ],
            "src/main/java/org/gedcom4j/parser/FrenchRepublicanCalendarParser.java": [
                119
            ],
            "src/main/java/org/gedcom4j/parser/GedcomParser.java": [
                500,
                503,
                506,
                516,
                520,
                521,
                522,
                523,
                524,
                526,
                531,
                534,
                537,
                538
            ],
            "src/main/java/org/gedcom4j/parser/GedcomVersionParser.java": [
                32,
                33,
                72
            ],
            "src/main/java/org/gedcom4j/parser/HeaderParser.java": [
                66,
                68,
                70,
                75,
                76,
                78,
                81,
                83,
                102,
                105,
                107,
                109
            ],
            "src/main/java/org/gedcom4j/parser/HeaderSourceDataParser.java": [
                31,
                64,
                66
            ],
            "src/main/java/org/gedcom4j/parser/HebrewCalendarParser.java": [
                92,
                93,
                101,
                103,
                105,
                272,
                273
            ],
            "src/main/java/org/gedcom4j/parser/IndividualAttributeParser.java": [
                70,
                74,
                76,
                82,
                84,
                89,
                91,
                93,
                100,
                107,
                118,
                121,
                122
            ],
            "src/main/java/org/gedcom4j/parser/IndividualEventParser.java": [
                74,
                76,
                82,
                85,
                86,
                91,
                93,
                99,
                101,
                108,
                115,
                117,
                124,
                131,
                139,
                145
            ],
            "src/main/java/org/gedcom4j/parser/IndividualParser.java": [
                86,
                92,
                94,
                101,
                108,
                127,
                128,
                134,
                136,
                138,
                141,
                146,
                162
            ],
            "src/main/java/org/gedcom4j/parser/LdsIndividualOrdinanceParser.java": [
                63,
                67,
                69,
                71,
                73,
                78,
                79
            ],
            "src/main/java/org/gedcom4j/parser/LdsSpouseSealingParser.java": [
                63,
                65,
                67,
                69,
                74,
                75
            ],
            "src/main/java/org/gedcom4j/parser/LinePieces.java": [
                162
            ],
            "src/main/java/org/gedcom4j/parser/MultimediaLinkParser.java": [
                140,
                142,
                144,
                146,
                147,
                175,
                179,
                180
            ],
            "src/main/java/org/gedcom4j/parser/PersonalNameParser.java": [
                64,
                66,
                68,
                70,
                72,
                74,
                79,
                80,
                110,
                112,
                114,
                116,
                118,
                120,
                125,
                126,
                128
            ],
            "src/main/java/org/gedcom4j/parser/PlaceParser.java": [
                66,
                71,
                72,
                89,
                107,
                122,
                124
            ],
            "src/main/java/org/gedcom4j/parser/RepositoryParser.java": [
                65,
                71,
                73,
                80,
                87,
                94,
                95,
                101
            ],
            "src/main/java/org/gedcom4j/parser/SourceParser.java": [
                72,
                74,
                76,
                78,
                80,
                84,
                85,
                87,
                94,
                119,
                120,
                124,
                128
            ],
            "src/main/java/org/gedcom4j/parser/SourceSystemParser.java": [
                65,
                67
            ],
            "src/main/java/org/gedcom4j/parser/StringCanonicalizer.java": [
                243,
                244
            ],
            "src/main/java/org/gedcom4j/parser/StringTreeBuilder.java": [
                174
            ],
            "src/main/java/org/gedcom4j/parser/SubmissionParser.java": [
                30,
                61,
                63,
                65,
                67,
                69,
                71
            ],
            "src/main/java/org/gedcom4j/parser/SubmitterParser.java": [
                65,
                71,
                73,
                80,
                87,
                94,
                100,
                103,
                108
            ],
            "src/main/java/org/gedcom4j/parser/UserReferenceParser.java": [
                30,
                59,
                63,
                65
            ],
            "src/main/java/org/gedcom4j/relationship/AncestryCalculator.java": [
                137,
                140,
                209,
                212,
                213,
                221,
                225,
                242,
                245,
                331,
                332,
                364,
                367
            ],
            "src/main/java/org/gedcom4j/relationship/RelationshipCalculator.java": [
                268,
                269,
                271,
                272,
                280,
                281,
                285,
                286,
                293,
                294,
                297,
                381
            ],
            "src/main/java/org/gedcom4j/validate/AbstractValidator.java": [
                34,
                36,
                60,
                61,
                72,
                73,
                82,
                83,
                94,
                95,
                104,
                105,
                116,
                117,
                128,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                201,
                203,
                215,
                216,
                217,
                218,
                219,
                220,
                232,
                233,
                234,
                235,
                236,
                237,
                250,
                251,
                252,
                253,
                254,
                255,
                267,
                268,
                269,
                270,
                271,
                272,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                322,
                323,
                324,
                325,
                326,
                327,
                328,
                329,
                331,
                332,
                333,
                334,
                335,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                347,
                348,
                349,
                350,
                351,
                352,
                370,
                371,
                372,
                373,
                395,
                397,
                398,
                399,
                400,
                402,
                403,
                405,
                406,
                407,
                408,
                409,
                410,
                411,
                412,
                413,
                414,
                416,
                417,
                418,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                428,
                433,
                445,
                448,
                449,
                451,
                452,
                461,
                463
            ],
            "src/main/java/org/gedcom4j/validate/AddressValidator.java": [
                53,
                54,
                63,
                64,
                65,
                66,
                67,
                68,
                69
            ],
            "src/main/java/org/gedcom4j/validate/CitationValidator.java": [
                31,
                58,
                59,
                68,
                69,
                70,
                71,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                121,
                122,
                123,
                124,
                126
            ],
            "src/main/java/org/gedcom4j/validate/EventValidator.java": [
                31,
                32,
                34,
                35,
                57,
                58,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                94,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                107,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                121,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                134,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                161,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257
            ],
            "src/main/java/org/gedcom4j/validate/FamilyValidator.java": [
                31,
                32,
                55,
                56,
                70,
                73,
                74,
                77,
                81,
                84,
                88,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                227
            ],
            "src/main/java/org/gedcom4j/validate/GedcomValidationFinding.java": [
                27,
                35,
                39,
                44,
                49,
                61,
                62,
                63,
                64,
                65,
                72,
                73,
                74,
                81,
                82,
                83,
                90,
                91,
                92,
                100,
                101,
                102,
                110,
                111,
                112,
                120,
                121,
                122,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133
            ],
            "src/main/java/org/gedcom4j/validate/GedcomValidator.java": [
                27,
                29,
                30,
                31,
                33,
                34,
                76,
                82,
                87,
                92,
                100,
                101,
                102,
                103,
                110,
                111,
                112,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                161,
                162,
                163,
                171,
                172,
                173,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                204,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                248,
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                258,
                259,
                264,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                280,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                297,
                298,
                299,
                300,
                301,
                302,
                303,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321,
                322,
                323,
                325,
                330,
                331,
                332,
                333,
                334,
                335,
                336,
                337,
                338,
                339,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                351,
                352,
                353,
                354,
                355,
                356,
                357,
                358,
                359,
                360,
                361,
                362,
                363,
                364,
                365,
                366,
                371,
                372,
                373,
                374,
                375,
                376,
                377,
                378,
                379,
                380,
                381
            ],
            "src/main/java/org/gedcom4j/validate/HeaderValidator.java": [
                29,
                56,
                74,
                75,
                76,
                77,
                82,
                83,
                84,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                130,
                131,
                132,
                140,
                142,
                144,
                149,
                150,
                151,
                153,
                161,
                162,
                163,
                172,
                175,
                177,
                181,
                184,
                186,
                188,
                189,
                191,
                192,
                193,
                197,
                201,
                203,
                204,
                205,
                206,
                207,
                209,
                211,
                212,
                213
            ],
            "src/main/java/org/gedcom4j/validate/IndividualValidator.java": [
                31,
                32,
                56,
                61,
                62,
                71,
                72,
                73,
                74,
                75,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                97,
                98,
                99,
                103,
                104,
                105,
                106,
                123,
                124,
                129,
                130,
                131,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                150,
                155,
                162,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                175,
                176,
                182,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                197,
                198,
                204,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                221,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                241,
                244,
                245,
                246,
                247,
                248,
                249,
                251,
                253
            ],
            "src/main/java/org/gedcom4j/validate/LdsSpouseSealingValidator.java": [
                29,
                31,
                32,
                56,
                57,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                91,
                92,
                93,
                94,
                95,
                96
            ],
            "src/main/java/org/gedcom4j/validate/MultimediaValidator.java": [
                31,
                32,
                33,
                65,
                66,
                67,
                68,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                158,
                159,
                160,
                161,
                162,
                165,
                166,
                169,
                170,
                171,
                172,
                173,
                174,
                181,
                182,
                183,
                188,
                193,
                194,
                195,
                196,
                199,
                200,
                204,
                205,
                206,
                207,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                237,
                238,
                241,
                242,
                249,
                252,
                253,
                254,
                256,
                263,
                264,
                273,
                276,
                277,
                278,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                290,
                291,
                293
            ],
            "src/main/java/org/gedcom4j/validate/NameVariationValidator.java": [
                52,
                53,
                62,
                63,
                64,
                65,
                66,
                67,
                68
            ],
            "src/main/java/org/gedcom4j/validate/NoteValidator.java": [
                27,
                29,
                31,
                32,
                33,
                41,
                46,
                51,
                63,
                64,
                65,
                66,
                67,
                72,
                73,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                85,
                86,
                87,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                124
            ],
            "src/main/java/org/gedcom4j/validate/NotesValidator.java": [
                27,
                29,
                30,
                31,
                33,
                34,
                35,
                43,
                48,
                53,
                65,
                66,
                67,
                68,
                69,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                110,
                112
            ],
            "src/main/java/org/gedcom4j/validate/PersonalNameValidator.java": [
                29,
                31,
                32,
                35,
                57,
                58,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                103,
                104,
                105,
                106,
                107,
                108,
                110,
                111,
                112,
                113,
                114,
                115,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                134,
                135,
                136,
                137,
                138,
                139
            ],
            "src/main/java/org/gedcom4j/validate/PersonalNameVariationValidator.java": [
                29,
                31,
                49,
                50,
                62,
                63,
                64,
                65,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93
            ],
            "src/main/java/org/gedcom4j/validate/PlaceValidator.java": [
                29,
                31,
                32,
                57,
                58,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                83,
                84,
                86,
                87,
                88,
                89,
                91,
                92,
                93,
                95,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                112,
                113,
                114,
                115,
                117,
                118,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                129,
                130,
                131,
                133,
                136,
                137,
                139,
                141
            ],
            "src/main/java/org/gedcom4j/validate/RepositoryValidator.java": [
                51,
                52,
                61,
                62,
                63,
                64,
                65,
                66,
                68,
                71,
                72,
                76
            ],
            "src/main/java/org/gedcom4j/validate/SourceValidator.java": [
                31,
                40,
                55,
                70,
                71,
                72,
                73,
                74,
                78,
                79,
                82,
                83,
                84,
                85,
                86,
                87,
                89,
                91,
                92,
                93,
                94,
                97,
                98,
                99,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                124,
                125,
                126,
                128,
                129,
                130,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171
            ],
            "src/main/java/org/gedcom4j/validate/SubmitterValidator.java": [
                31,
                32,
                56,
                57,
                66,
                67,
                68,
                69,
                70,
                71,
                73,
                74,
                76,
                85,
                86,
                87,
                88,
                90,
                92,
                93,
                94,
                95,
                96,
                97,
                98
            ],
            "src/main/java/org/gedcom4j/writer/AbstractEmitter.java": [
                34,
                35,
                36,
                162,
                165,
                212,
                253,
                271,
                287,
                313,
                314,
                330,
                331,
                338,
                406,
                409
            ],
            "src/main/java/org/gedcom4j/writer/AddressEmitter.java": [
                71
            ],
            "src/main/java/org/gedcom4j/writer/ChangeDateEmitter.java": [
                63
            ],
            "src/main/java/org/gedcom4j/writer/EventEmitter.java": [
                70,
                72,
                73
            ],
            "src/main/java/org/gedcom4j/writer/FamilyEmitter.java": [
                75,
                76,
                78,
                79,
                82,
                88,
                98,
                100,
                124,
                152
            ],
            "src/main/java/org/gedcom4j/writer/GedcomWriter.java": [
                113,
                159,
                161,
                221,
                389,
                445,
                446,
                447,
                448,
                449,
                450,
                451,
                452,
                455,
                456,
                457,
                482
            ],
            "src/main/java/org/gedcom4j/writer/HeaderEmitter.java": [
                75,
                76,
                78,
                79,
                87,
                94,
                95,
                117,
                118,
                119,
                120,
                128
            ],
            "src/main/java/org/gedcom4j/writer/IndividualEmitter.java": [
                40,
                97,
                111,
                113,
                246,
                262,
                263,
                325,
                326,
                327
            ],
            "src/main/java/org/gedcom4j/writer/Multimedia551Emitter.java": [
                87,
                89
            ],
            "src/main/java/org/gedcom4j/writer/Multimedia55Emitter.java": [
                72,
                77,
                78,
                93
            ],
            "src/main/java/org/gedcom4j/writer/MultimediaLinksEmitter.java": [
                42,
                56,
                68,
                73,
                91,
                100,
                109
            ],
            "src/main/java/org/gedcom4j/writer/PlaceEmitter.java": [
                67,
                68,
                101
            ],
            "src/main/java/org/gedcom4j/writer/RepositoryEmitter.java": [
                67,
                75,
                76,
                77,
                78,
                80
            ],
            "src/main/java/org/gedcom4j/writer/SourceEmitter.java": [
                74,
                79,
                88,
                117
            ],
            "src/main/java/org/gedcom4j/writer/SubmittersEmitter.java": [
                33,
                72,
                76,
                77,
                78,
                79,
                83
            ],
            "src/test/java/org/gedcom4j/io/reader/Issue81ReaderTest.java": [
                38,
                91,
                92
            ],
            "src/test/java/org/gedcom4j/io/reader/LongLineReaderTest.java": [
                39,
                85
            ],
            "src/test/java/org/gedcom4j/io/writer/AnselWriterCancellationTest.java": [
                39,
                87,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                99
            ],
            "src/test/java/org/gedcom4j/io/writer/GedcomFileWriterTest.java": [
                41
            ],
            "src/test/java/org/gedcom4j/model/AssociationTest.java": [
                52,
                54,
                56,
                58,
                70,
                72,
                74,
                76,
                88,
                90,
                92,
                94,
                111,
                113,
                115,
                117,
                129,
                131,
                133,
                135,
                147,
                149,
                151,
                153
            ],
            "src/test/java/org/gedcom4j/model/CharacterSetTest.java": [
                51,
                53,
                67,
                69
            ],
            "src/test/java/org/gedcom4j/model/CitationDataTest.java": [
                75,
                81,
                88,
                90,
                97,
                99,
                118,
                124,
                131,
                133,
                140,
                142,
                160,
                161,
                162,
                164,
                174,
                176,
                177,
                178,
                180
            ],
            "src/test/java/org/gedcom4j/model/FamilyEventTest.java": [
                66,
                69,
                82,
                85,
                114,
                117,
                130,
                133,
                146,
                149,
                178,
                181,
                237,
                240,
                253,
                256,
                285,
                288,
                301,
                304
            ],
            "src/test/java/org/gedcom4j/model/FamilyTest.java": [
                62,
                65,
                66,
                68,
                71,
                72,
                78,
                81,
                82,
                84,
                87,
                88,
                167
            ],
            "src/test/java/org/gedcom4j/model/GedcomVersionTest.java": [
                50,
                52,
                66,
                68
            ],
            "src/test/java/org/gedcom4j/model/HeaderSourceDataTest.java": [
                52,
                54,
                56,
                58,
                65,
                67,
                70,
                72,
                74,
                76,
                92,
                94,
                96,
                98,
                105,
                107,
                110,
                112,
                114,
                116
            ],
            "src/test/java/org/gedcom4j/model/IndividualAttributeTest.java": [
                61,
                63,
                66,
                68,
                76,
                78,
                81,
                83,
                86,
                88,
                91,
                93,
                96,
                98,
                101,
                103,
                106,
                108,
                111,
                113,
                121,
                123,
                126,
                128,
                131,
                133,
                136,
                138,
                146,
                148,
                151,
                153,
                175,
                177,
                180,
                182,
                190,
                192,
                195,
                197,
                200,
                202,
                205,
                207,
                210,
                212,
                215,
                217,
                220,
                222,
                225,
                227,
                235,
                237,
                240,
                242,
                245,
                247,
                250,
                252,
                260,
                262,
                265,
                267,
                281,
                282,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                293,
                294,
                295,
                296,
                298,
                300,
                301,
                302,
                303,
                304
            ],
            "src/test/java/org/gedcom4j/model/IndividualTest.java": [
                194,
                199,
                200,
                207,
                213,
                214,
                263,
                265,
                270,
                273,
                274,
                285,
                286,
                287,
                288,
                289,
                290,
                300,
                301,
                302,
                303,
                305,
                315,
                316,
                317,
                318,
                319,
                320,
                333,
                334,
                335,
                336,
                337,
                339
            ],
            "src/test/java/org/gedcom4j/model/Issue115Test.java": [
                125,
                126
            ],
            "src/test/java/org/gedcom4j/model/Issue88Test.java": [
                53,
                74,
                79,
                99
            ],
            "src/test/java/org/gedcom4j/model/LdsSpouseSealingTest.java": [
                58,
                60,
                63,
                65,
                68,
                70,
                73,
                75,
                95,
                97,
                100,
                102,
                105,
                107,
                110,
                112,
                125,
                126,
                127,
                128,
                131
            ],
            "src/test/java/org/gedcom4j/model/NameVariationTest.java": [
                54,
                56,
                58,
                66,
                84,
                86,
                88,
                96,
                111,
                112,
                113,
                115
            ],
            "src/test/java/org/gedcom4j/model/PersonalNameVariationTest.java": [
                61,
                63,
                65,
                68,
                70,
                73,
                75,
                78,
                80,
                82,
                85,
                87,
                90,
                92,
                95,
                97,
                100,
                102,
                110,
                135,
                137,
                139,
                142,
                144,
                147,
                149,
                152,
                154,
                156,
                159,
                161,
                164,
                166,
                169,
                171,
                174,
                176,
                184,
                200,
                201,
                202,
                203,
                204,
                205,
                206,
                207,
                209,
                211
            ],
            "src/test/java/org/gedcom4j/model/RepositoryTest.java": [
                70,
                72,
                79,
                81,
                83,
                85,
                88,
                90,
                92,
                94,
                97,
                99,
                106,
                108,
                110,
                112,
                146,
                148,
                155,
                157,
                159,
                161,
                164,
                166,
                168,
                170,
                173,
                175,
                182,
                184,
                186,
                188
            ],
            "src/test/java/org/gedcom4j/model/SourceCallNumberTest.java": [
                59,
                62,
                74,
                77
            ],
            "src/test/java/org/gedcom4j/model/SourceSystemTest.java": [
                51,
                53,
                55,
                57,
                81
            ],
            "src/test/java/org/gedcom4j/model/SourceTest.java": [
                58,
                60,
                62,
                70,
                72,
                75,
                77,
                80,
                82,
                85,
                87,
                90,
                92,
                100,
                102,
                105,
                107,
                110,
                112,
                137,
                139,
                141,
                149,
                151,
                154,
                156,
                159,
                161,
                164,
                166,
                169,
                171,
                179,
                181,
                184,
                186,
                189,
                191,
                210,
                213,
                214,
                215,
                216,
                218,
                219,
                220,
                222,
                223,
                224
            ],
            "src/test/java/org/gedcom4j/model/StringTreeTest.java": [
                71,
                108,
                132,
                154,
                155,
                161,
                162,
                168,
                169,
                174,
                175
            ],
            "src/test/java/org/gedcom4j/model/TestHelper.java": [
                46,
                49,
                51
            ],
            "src/test/java/org/gedcom4j/parser/FamilyEventTypeParseTest.java": [
                31,
                66
            ],
            "src/test/java/org/gedcom4j/parser/GedcomParser551Test.java": [
                50,
                238,
                239,
                274,
                296,
                569
            ],
            "src/test/java/org/gedcom4j/parser/GedcomParserTest.java": [
                97,
                116,
                117,
                145,
                333,
                355,
                363,
                378,
                394,
                405,
                415,
                425,
                426,
                427,
                430,
                432,
                433,
                439,
                445,
                450,
                464,
                480
            ],
            "src/test/java/org/gedcom4j/parser/Issue100Test.java": [
                40,
                77,
                78,
                79
            ],
            "src/test/java/org/gedcom4j/parser/Issue102Test.java": [
                38,
                120,
                121,
                122,
                123,
                134,
                135,
                139,
                140,
                141,
                142,
                143,
                144,
                145
            ],
            "src/test/java/org/gedcom4j/parser/Issue32Test.java": [
                39,
                72,
                78,
                91,
                92,
                93,
                94,
                113,
                116
            ],
            "src/test/java/org/gedcom4j/parser/Issue61Test.java": [
                40,
                69,
                70,
                71,
                72,
                75,
                76,
                79,
                108,
                109,
                111
            ],
            "src/test/java/org/gedcom4j/parser/Issue63Test.java": [
                67,
                68,
                71,
                74
            ],
            "src/test/java/org/gedcom4j/parser/Issue87Test.java": [
                39
            ],
            "src/test/java/org/gedcom4j/parser/Issue96Test.java": [
                37,
                71
            ],
            "src/test/java/org/gedcom4j/parser/StressFileSpecialCharacterReadTest.java": [
                31,
                37,
                66,
                83,
                103,
                123,
                143,
                162,
                182,
                202,
                222,
                242,
                262,
                283,
                303,
                323,
                343,
                363,
                383,
                403,
                423,
                443
            ],
            "src/test/java/org/gedcom4j/parser/TagTest.java": [
                46
            ],
            "src/test/java/org/gedcom4j/relationship/AncestryCalculatorTest.java": [
                106
            ],
            "src/test/java/org/gedcom4j/relationship/RelationshipCalculatorTest.java": [
                216,
                264,
                312
            ],
            "src/test/java/org/gedcom4j/validate/AbstractValidatorTestCase.java": [
                31,
                54,
                71,
                76,
                77,
                78,
                79,
                80,
                81,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                101,
                109,
                110,
                111,
                112,
                113
            ],
            "src/test/java/org/gedcom4j/validate/CitationValidatorTest.java": [
                43
            ],
            "src/test/java/org/gedcom4j/validate/DuplicateEliminatorTest.java": [
                27,
                29,
                30,
                31,
                32,
                34,
                35,
                37,
                44,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                104,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                138,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                171
            ],
            "src/test/java/org/gedcom4j/validate/FamilyValidatorTest.java": [
                31,
                76,
                78,
                90,
                91,
                93,
                94,
                95,
                100,
                101,
                102,
                103,
                104,
                124,
                126,
                127,
                138,
                148,
                151,
                152,
                163,
                172,
                175,
                188
            ],
            "src/test/java/org/gedcom4j/validate/GedcomValidationFindingTest.java": [
                27,
                29,
                30,
                38,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                68,
                69,
                70,
                71,
                72
            ],
            "src/test/java/org/gedcom4j/validate/GedcomValidatorTest.java": [
                27,
                29,
                31,
                32,
                33,
                34,
                41,
                46,
                48,
                49,
                50,
                51,
                56,
                57,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                84,
                85,
                86,
                88,
                89,
                90,
                91,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                119,
                121,
                122,
                123,
                124,
                125,
                130,
                131,
                133
            ],
            "src/test/java/org/gedcom4j/validate/HeaderValidatorTest.java": [
                54,
                55,
                56,
                60,
                61,
                63,
                64,
                68,
                69,
                72,
                75,
                76,
                77,
                79,
                84,
                94,
                95,
                96,
                99,
                101,
                106,
                116,
                117,
                118,
                121,
                122,
                124,
                125,
                126,
                129,
                130,
                136,
                137,
                138,
                147,
                148,
                149,
                150,
                151,
                152,
                157,
                162,
                172,
                173,
                174,
                178,
                179,
                181,
                182,
                186,
                187,
                190,
                195,
                199,
                203,
                204,
                207,
                210,
                211,
                214,
                215
            ],
            "src/test/java/org/gedcom4j/validate/IndividualEventValidatorTest.java": [
                53,
                62,
                85
            ],
            "src/test/java/org/gedcom4j/validate/IndividualValidatorTest.java": [
                33,
                54,
                56,
                73,
                79,
                81,
                84
            ],
            "src/test/java/org/gedcom4j/validate/Issue111Test.java": [
                30,
                31,
                54,
                66,
                68,
                69,
                70,
                72
            ],
            "src/test/java/org/gedcom4j/validate/LdsSpouseSealingValidatorTest.java": [
                71,
                72,
                76,
                89,
                97,
                101,
                102,
                114,
                115,
                117,
                122,
                123,
                125,
                126,
                138,
                139,
                149,
                160,
                161,
                162,
                164,
                169,
                170,
                172,
                173,
                185,
                186,
                188,
                193,
                194,
                196,
                197,
                209,
                210,
                212,
                217,
                218,
                220,
                221
            ],
            "src/test/java/org/gedcom4j/validate/MultimediaValidatorTest.java": [
                29,
                56,
                57,
                58,
                61,
                62,
                80,
                81,
                87,
                89,
                90,
                94,
                95,
                97
            ],
            "src/test/java/org/gedcom4j/validate/NoteValidatorTest.java": [
                27,
                29,
                30,
                38,
                43,
                44,
                45,
                46,
                47,
                49,
                50,
                51,
                53,
                54,
                56,
                57,
                58,
                59,
                60,
                61,
                63,
                64,
                65,
                66,
                67,
                68,
                70,
                75,
                76,
                77,
                78,
                79,
                81,
                82,
                83,
                86,
                87,
                88,
                89,
                90,
                92,
                93,
                94,
                95,
                96,
                97,
                99,
                100,
                101,
                102,
                103,
                104,
                106,
                108
            ],
            "src/test/java/org/gedcom4j/validate/PersonalNameValidatorTest.java": [
                31,
                59,
                60,
                69,
                79,
                80,
                84,
                88,
                100,
                101,
                102,
                104,
                106,
                108,
                118,
                119,
                120,
                122,
                124,
                126,
                136,
                138,
                139,
                151,
                159,
                160,
                161,
                163,
                165,
                167,
                177,
                178,
                179,
                181,
                183,
                185,
                195,
                196,
                197,
                199,
                201,
                203,
                213,
                214,
                215,
                217,
                219,
                221
            ],
            "src/test/java/org/gedcom4j/validate/PersonalNameVariationValidatorTest.java": [
                62,
                67,
                68,
                70,
                72,
                77,
                78,
                80
            ],
            "src/test/java/org/gedcom4j/validate/SourceValidatorTest.java": [
                32,
                47,
                48,
                50,
                51,
                63,
                65,
                75,
                84
            ],
            "src/test/java/org/gedcom4j/validate/SubmitterValidatorTest.java": [
                29,
                30,
                46,
                59,
                76,
                85,
                90,
                91,
                101,
                103
            ],
            "src/test/java/org/gedcom4j/writer/EventsWithDescriptionsTest.java": [
                41,
                81,
                87,
                105,
                140,
                150
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriter551Test.java": [
                77,
                78,
                82,
                88,
                91,
                98,
                99,
                194,
                238,
                265,
                266,
                267,
                268,
                271,
                273,
                292,
                328,
                347,
                363,
                382,
                402,
                404,
                421
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterConstructionProgressAndCancellationTest.java": [
                90,
                111
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterFileProgressAndCancellationTest.java": [
                47,
                182,
                184,
                198,
                217,
                219,
                233,
                252,
                254,
                268,
                287,
                289,
                303,
                322,
                324,
                338,
                357,
                359,
                373,
                392,
                394,
                408,
                427,
                429,
                443,
                462,
                464,
                478,
                497,
                499,
                511,
                512,
                513,
                526,
                534
            ],
            "src/test/java/org/gedcom4j/writer/GedcomWriterTest.java": [
                77,
                109,
                113,
                157,
                252,
                253,
                412,
                432
            ],
            "src/test/java/org/gedcom4j/writer/Issue80WriterTest.java": [
                65,
                81,
                82
            ],
            "src/test/java/org/gedcom4j/writer/Issue89Test.java": [
                33,
                34,
                63,
                65,
                67,
                69,
                71,
                73,
                75,
                77,
                78,
                79,
                81,
                82,
                83,
                84,
                85,
                87,
                88,
                89,
                90,
                91,
                98,
                99
            ],
            "src/test/java/org/gedcom4j/writer/Issue95Test.java": [
                80,
                81,
                82,
                83,
                84,
                85,
                88
            ],
            "src/test/java/org/gedcom4j/writer/Issue97Test.java": [
                35,
                58,
                62
            ]
        }
    }
]