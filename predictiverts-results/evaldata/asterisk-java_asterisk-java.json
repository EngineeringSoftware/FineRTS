[
    {
        "commit": "2225b892",
        "prev_commit": "a630a125",
        "changed_files": [
            "src/main/java/org/asteriskjava/pbx/internal/activity/ActivityHelper.java",
            "src/main/java/org/asteriskjava/pbx/internal/asterisk/MeetmeRoomControl.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerConnection.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/DialLocalToAgiActivity.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/DialToAgiWithAbortCallback.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/FilteredManagerListenerWrapper.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/ListenerManager.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/Dial.java",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/DialToAgi.java",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/EventListenerBaseClass.java",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/OriginateBaseClass.java",
            "src/test/java/org/asteriskjava/pbx/internal/core/ListenerManagerTest.java"
        ],
        "changed_files_num": 14,
        "changed_java_files": [
            "src/main/java/org/asteriskjava/pbx/internal/activity/ActivityHelper.java",
            "src/main/java/org/asteriskjava/pbx/internal/asterisk/MeetmeRoomControl.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerConnection.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/DialLocalToAgiActivity.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/DialToAgiWithAbortCallback.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/FilteredManagerListenerWrapper.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/ListenerManager.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/Dial.java",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/DialToAgi.java",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/EventListenerBaseClass.java",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/OriginateBaseClass.java",
            "src/test/java/org/asteriskjava/pbx/internal/core/ListenerManagerTest.java"
        ],
        "changed_java_files_num": 14,
        "failed_test_list": [],
        "passed_test_list": [
            "AbstractAgiCommandTest",
            "CallerIdTest",
            "ResponseBuilderImplTest",
            "AbstractManagerEventListenerTest",
            "AstUtilTest",
            "CompositeMappingStrategyTest",
            "NewStateEventTest",
            "CdrEventTest",
            "ChannelReloadEventTest",
            "ResourceBundleMappingStrategyTest",
            "GetDataCommandTest",
            "ScriptEngineMappingStrategyTest",
            "ActionBuilderImplTest",
            "EventBuilderImplTest",
            "AgiReaderImplTest",
            "AsyncAgiEventTest",
            "DefaultAgiServerTest",
            "QueueMemberStateTest",
            "AsteriskChannelImplTest",
            "T38FaxStatusEventTest",
            "BridgeEnterEventComparatorTest",
            "RateLimiterTest",
            "ClassNameMappingStrategyTest",
            "HangupCauseTest",
            "AgiReplyImplTest",
            "AsteriskQueueMemberImplTest",
            "ConfigFileParserTest",
            "SkypeChatMessageEventTest",
            "CoreStatusResponseTest",
            "AgiChannelImplTest",
            "AsteriskAgentImplTest",
            "DateUtilTest",
            "RtcpReceivedEventTest",
            "SkypeBuddyStatusEventTest",
            "AgiRequestImplTest",
            "AgiWriterImplTest",
            "SipShowPeerResponseTest",
            "ExecCommandTest",
            "ManagerReaderImplTest",
            "ListenerManagerTest",
            "ManagerConnectionImplTest",
            "ManagerWriterImplTest"
        ],
        "tests_cases_num": {
            "ConfigFileParserTest": 4,
            "ClassNameMappingStrategyTest": 2,
            "CompositeMappingStrategyTest": 2,
            "DefaultAgiServerTest": 4,
            "ResourceBundleMappingStrategyTest": 3,
            "ScriptEngineMappingStrategyTest": 3,
            "AbstractAgiCommandTest": 6,
            "ExecCommandTest": 5,
            "GetDataCommandTest": 4,
            "AgiChannelImplTest": 3,
            "AgiReaderImplTest": 5,
            "AgiReplyImplTest": 12,
            "AgiRequestImplTest": 24,
            "AgiWriterImplTest": 1,
            "CallerIdTest": 7,
            "HangupCauseTest": 1,
            "QueueMemberStateTest": 2,
            "AsteriskAgentImplTest": 1,
            "AsteriskChannelImplTest": 1,
            "AsteriskQueueMemberImplTest": 1,
            "AbstractManagerEventListenerTest": 2,
            "AsyncAgiEventTest": 2,
            "CdrEventTest": 3,
            "ChannelReloadEventTest": 3,
            "NewStateEventTest": 2,
            "RtcpReceivedEventTest": 5,
            "SkypeBuddyStatusEventTest": 2,
            "SkypeChatMessageEventTest": 1,
            "T38FaxStatusEventTest": 2,
            "ActionBuilderImplTest": 16,
            "EventBuilderImplTest": 35,
            "ManagerConnectionImplTest": 22,
            "ManagerReaderImplTest": 9,
            "ManagerWriterImplTest": 2,
            "ResponseBuilderImplTest": 9,
            "BridgeEnterEventComparatorTest": 17,
            "CoreStatusResponseTest": 2,
            "SipShowPeerResponseTest": 4,
            "RateLimiterTest": 1,
            "ListenerManagerTest": 1,
            "AstUtilTest": 6,
            "DateUtilTest": 2
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+        EventListenerBaseClass listener = new EventListenerBaseClass(activityName, PBXFactory.getActivePBX())\r\n+        listener.startListener();\r\n+                    \"The MeetmeRoomControl has not been initialised. Please call MeetmeRoomControl.init().\"); //$NON-NLS-1$\r\n+        super(\"MeetmeRoomControl\", pbx); //$NON-NLS-1$\r\n+        this.startListener();\r\n+        CoherentManagerEventQueue newRealtime = new CoherentManagerEventQueue(\"Realtime\", //$NON-NLS-1$\r\n+                CoherentManagerConnection.managerConnection);\r\n+        CoherentManagerEventQueue newStandard = new CoherentManagerEventQueue(\"Standard\", //$NON-NLS-1$\r\n+                CoherentManagerConnection.managerConnection);\r\n+    private final ListenerManager listeners = new ListenerManager();\n+    public CoherentManagerEventQueue(String name, ManagerConnection connection)\n+        connection.addEventListener(this);\n+        final List<FilteredManagerListenerWrapper> listenerCopy;\n+            listenerCopy = this.listeners.getCopyAsList();\n+            for (final FilteredManagerListenerWrapper filter : listenerCopy)\n+    private void dispatchEventOnThread(final ManagerEvent event, final FilteredManagerListenerWrapper filter,\n+            final CountDownLatch latch)\n+            this.listeners.addListener(listener);\n+        if (melf != null)\n+            synchronized (this.listeners)\n+                this.listeners.removeListener(melf);\n+                synchronized (this.globalEvents)\n+                    this.globalEvents.clear();\n+                    Iterator<FilteredManagerListenerWrapper> itr = this.listeners.iterator();\n+                    while (itr.hasNext())\n+                        FilteredManagerListenerWrapper readdContainer = itr.next();\n+                        this.globalEvents.addAll(expandEvents(readdContainer._listener.requiredEvents()));\n+            }\n+                Iterator<FilteredManagerListenerWrapper> itr = eventQueue.listeners.iterator();\n+                while (itr.hasNext())\n+                    FilteredManagerListenerWrapper listener = itr.next();\n+        super(\"Dial \" + from + \" to AGI\", PBXFactory.getActivePBX());\n+            this.startListener();\n+    public void asyncStartDial()\n+        Runnable runner = new Runnable()\n+        {\n+            @Override\n+            public void run()\n+            {\n+                dialer.startActivity(false);\n+                completion.waitForCompletion(3, TimeUnit.MINUTES);\n+                final ActivityStatusEnum status;\n+                if (dialer.isSuccess())\n+                {\n+                    status = ActivityStatusEnum.SUCCESS;\n+                }\n+                else\n+                {\n+                    status = ActivityStatusEnum.FAILURE;\n+                }\n+                iCallback.progress(dialer, status, status.getDefaultMessage());\n+            }\n+        };\n+        new Thread(runner).start();\n+    FilteredManagerListener<ManagerEvent> _listener;\n+    Set<Class< ? extends ManagerEvent>> requiredEvents;\n+    private final static AtomicInteger seed = new AtomicInteger();\n+    Integer equalityBuster = seed.incrementAndGet();\n+    public FilteredManagerListenerWrapper(FilteredManagerListener<ManagerEvent> listener)\n+    {\n+        this._listener = listener;\n+        this.requiredEvents = listener.requiredEvents();\n+        if (requiredEvents.contains(BridgeEvent.class))\n+        {\n+            requiredEvents.add(LinkEvent.class);\n+            requiredEvents.add(UnlinkEvent.class);\n+        }\n+        for (Class< ? extends ManagerEvent> event : requiredEvents)\n+        {\n+            if (!CoherentEventFactory.mapEvents.values().contains(event)\n+                    && !CoherentEventFactory.mapResponses.values().contains(event))\n+            {\n+                throw new RuntimeException(\n+                        \"The requested event type of \" + event + \"+isn't known by \" + CoherentEventFactory.class);\n+            }\n+        }\n+    }\n+    @Override\n+    public String toString()\n+    {\n+        return this._listener.getName();\n+    }\n+    private final TreeSet<FilteredManagerListenerWrapper> listeners = new TreeSet<>(new ListenerPriorityComparator());\n+    Log logger = LogFactory.getLog(ListenerManager.class);\n+    final class ListenerPriorityComparator implements Comparator<FilteredManagerListenerWrapper>\n+    {\n+        @Override\n+        public int compare(FilteredManagerListenerWrapper lhs, FilteredManagerListenerWrapper rhs)\n+        {\n+            int result = lhs._listener.getPriority().compare(rhs._listener.getPriority());\n+            if (result == 0)\n+                result = lhs.equalityBuster.compareTo(rhs.equalityBuster);\n+            return result;\n+        }\n+    }\n+    public void clear()\n+    {\n+        listeners.clear();\n+    }\n+    public int size()\n+    {\n+        return listeners.size();\n+    }\n+    public Iterator<FilteredManagerListenerWrapper> iterator()\n+    {\n+        return listeners.iterator();\n+    }\n+    public void addListener(FilteredManagerListener<ManagerEvent> listener)\n+    {\n+        listeners.add(new FilteredManagerListenerWrapper(listener));\n+    }\n+    List<FilteredManagerListenerWrapper> getCopyAsList()\n+    {\n+        List<FilteredManagerListenerWrapper> list = new LinkedList<>();\n+        for (FilteredManagerListenerWrapper listener : listeners)\n+        {\n+            list.add(listener);\n+        }\n+        return list;\n+    }\n+    boolean removeListener(FilteredManagerListener<ManagerEvent> toRemove)\n+    {\n+        boolean removed = false;\n+        Iterator<FilteredManagerListenerWrapper> itr = listeners.iterator();\n+        while (itr.hasNext())\n+        {\n+            FilteredManagerListenerWrapper container = itr.next();\n+            if (container._listener == toRemove)\n+            {\n+                logger.error(\"Removing listener \" + toRemove);\n+                itr.remove();\n+                removed = true;\n+                break;\n+            }\n+        }\n+        return removed;\n+    }\n+        super(\"PeerMonitor\", PBXFactory.getActivePBX()); //$NON-NLS-1$\r\n+        this.startListener();\r\n+        super(descriptiveName, PBXFactory.getActivePBX());\r\n+            this.startListener();\r\n+        super(descriptiveName, PBXFactory.getActivePBX());\r\n+            this.startListener();\r\n+    private final PBX pbx;\r\n+    protected EventListenerBaseClass(final String descriptiveName, PBX iPBX)\r\n+        this.pbx = iPBX;\r\n+    public void startListener()\r\n+        ((AsteriskPBX) pbx).addListener(this);\r\n+        ((AsteriskPBX) pbx).removeListener(this);\r\n+                listener.startListener();\r\n+    Exception ex = new Exception(\"Created here\");\r\n+\r\n+    private final AsteriskPBX pbx;\r\n+\r\n+        super(\"NewOrginateClass\", PBXFactory.getActivePBX());\r\n+        pbx = (AsteriskPBX) PBXFactory.getActivePBX();\r\n+            this.startListener();\r\n+\r\n+            logger.debug(\"Check \" + ctr);\r\n+                    logger.info(\"Id is \" + __originateID);\r\n+                    break;\r\n+    volatile boolean managereventRecevied = false;\n+    @Test\n+    public void listenerTest() throws InterruptedException\n+    {\n+        List<FilteredManagerListener<ManagerEvent>> listeners = new LinkedList<>();\n+        ListenerManager queue = new ListenerManager();\n+        for (int i = 0; i < 1000; i++)\n+        {\n+            FilteredManagerListener<ManagerEvent> listener = getListener();\n+            listeners.add(listener);\n+            queue.addListener(listener);\n+        }\n+        Collections.shuffle(listeners);\n+        for (FilteredManagerListener<ManagerEvent> listener : listeners)\n+        {\n+            assertTrue(queue.removeListener(listener));\n+        }\n+        assertTrue(queue.size() == 0);\n+    }\n+    private FilteredManagerListener<ManagerEvent> getListener()\n+    {\n+        return new FilteredManagerListener<ManagerEvent>()\n+        {\n+            @Override\n+            public Set<Class< ? extends ManagerEvent>> requiredEvents()\n+            {\n+                Set<Class< ? extends ManagerEvent>> events = new HashSet<>();\n+                events.add(VarSetEvent.class);\n+                return events;\n+            }\n+            @Override\n+            public void onManagerEvent(ManagerEvent event)\n+            {\n+                managereventRecevied = true;\n+            }\n+            @Override\n+            public ListenerPriority getPriority()\n+            {\n+                return ListenerPriority.NORMAL;\n+            }\n+            @Override\n+            public String getName()\n+            {\n+                return \"test\";\n+            }\n+        };\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/asteriskjava/pbx/internal/activity/ActivityHelper.java": "        EventListenerBaseClass listener = new EventListenerBaseClass(activityName, PBXFactory.getActivePBX())\n        listener.startListener();\n",
            "src/main/java/org/asteriskjava/pbx/internal/asterisk/MeetmeRoomControl.java": "                    \"The MeetmeRoomControl has not been initialised. Please call MeetmeRoomControl.init().\"); //$NON-NLS-1$\n        super(\"MeetmeRoomControl\", pbx); //$NON-NLS-1$\n        this.startListener();\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerConnection.java": "        CoherentManagerEventQueue newRealtime = new CoherentManagerEventQueue(\"Realtime\", //$NON-NLS-1$\n                CoherentManagerConnection.managerConnection);\n        CoherentManagerEventQueue newStandard = new CoherentManagerEventQueue(\"Standard\", //$NON-NLS-1$\n                CoherentManagerConnection.managerConnection);\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java": "import java.util.Iterator;\nimport java.util.List;\nimport org.asteriskjava.manager.ManagerConnection;\n    private final ListenerManager listeners = new ListenerManager();\n    public CoherentManagerEventQueue(String name, ManagerConnection connection)\n        connection.addEventListener(this);\n        final List<FilteredManagerListenerWrapper> listenerCopy;\n            listenerCopy = this.listeners.getCopyAsList();\n            for (final FilteredManagerListenerWrapper filter : listenerCopy)\n    private void dispatchEventOnThread(final ManagerEvent event, final FilteredManagerListenerWrapper filter,\n            final CountDownLatch latch)\n            this.listeners.addListener(listener);\n        if (melf != null)\n            synchronized (this.listeners)\n                this.listeners.removeListener(melf);\n                synchronized (this.globalEvents)\n                    this.globalEvents.clear();\n                    Iterator<FilteredManagerListenerWrapper> itr = this.listeners.iterator();\n                    while (itr.hasNext())\n                        FilteredManagerListenerWrapper readdContainer = itr.next();\n                        this.globalEvents.addAll(expandEvents(readdContainer._listener.requiredEvents()));\n            }\n                Iterator<FilteredManagerListenerWrapper> itr = eventQueue.listeners.iterator();\n                while (itr.hasNext())\n                    FilteredManagerListenerWrapper listener = itr.next();\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/DialLocalToAgiActivity.java": "        super(\"Dial \" + from + \" to AGI\", PBXFactory.getActivePBX());\n            this.startListener();\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/DialToAgiWithAbortCallback.java": "    public void asyncStartDial()\n        Runnable runner = new Runnable()\n        {\n            @Override\n            public void run()\n            {\n                dialer.startActivity(false);\n                completion.waitForCompletion(3, TimeUnit.MINUTES);\n                final ActivityStatusEnum status;\n                if (dialer.isSuccess())\n                {\n                    status = ActivityStatusEnum.SUCCESS;\n                }\n                else\n                {\n                    status = ActivityStatusEnum.FAILURE;\n                }\n                iCallback.progress(dialer, status, status.getDefaultMessage());\n            }\n        };\n        new Thread(runner).start();\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/FilteredManagerListenerWrapper.java": "package org.asteriskjava.pbx.internal.core;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.asteriskjava.pbx.asterisk.wrap.events.BridgeEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.LinkEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.ManagerEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.UnlinkEvent;\npublic class FilteredManagerListenerWrapper\n{\n    FilteredManagerListener<ManagerEvent> _listener;\n    Set<Class< ? extends ManagerEvent>> requiredEvents;\n    private final static AtomicInteger seed = new AtomicInteger();\n    Integer equalityBuster = seed.incrementAndGet();\n    public FilteredManagerListenerWrapper(FilteredManagerListener<ManagerEvent> listener)\n    {\n        this._listener = listener;\n        this.requiredEvents = listener.requiredEvents();\n        if (requiredEvents.contains(BridgeEvent.class))\n        {\n            requiredEvents.add(LinkEvent.class);\n            requiredEvents.add(UnlinkEvent.class);\n        }\n        for (Class< ? extends ManagerEvent> event : requiredEvents)\n        {\n            if (!CoherentEventFactory.mapEvents.values().contains(event)\n                    && !CoherentEventFactory.mapResponses.values().contains(event))\n            {\n                throw new RuntimeException(\n                        \"The requested event type of \" + event + \"+isn't known by \" + CoherentEventFactory.class);\n            }\n        }\n    }\n    @Override\n    public String toString()\n    {\n        return this._listener.getName();\n    }\n}\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/ListenerManager.java": "package org.asteriskjava.pbx.internal.core;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.asteriskjava.pbx.asterisk.wrap.events.ManagerEvent;\nimport org.asteriskjava.util.Log;\nimport org.asteriskjava.util.LogFactory;\npublic class ListenerManager\n{\n    private final TreeSet<FilteredManagerListenerWrapper> listeners = new TreeSet<>(new ListenerPriorityComparator());\n    Log logger = LogFactory.getLog(ListenerManager.class);\n    final class ListenerPriorityComparator implements Comparator<FilteredManagerListenerWrapper>\n    {\n        @Override\n        public int compare(FilteredManagerListenerWrapper lhs, FilteredManagerListenerWrapper rhs)\n        {\n            int result = lhs._listener.getPriority().compare(rhs._listener.getPriority());\n            if (result == 0)\n                result = lhs.equalityBuster.compareTo(rhs.equalityBuster);\n            return result;\n        }\n    }\n    public void clear()\n    {\n        listeners.clear();\n    }\n    public int size()\n    {\n        return listeners.size();\n    }\n    public Iterator<FilteredManagerListenerWrapper> iterator()\n    {\n        return listeners.iterator();\n    }\n    public void addListener(FilteredManagerListener<ManagerEvent> listener)\n    {\n        listeners.add(new FilteredManagerListenerWrapper(listener));\n    }\n    List<FilteredManagerListenerWrapper> getCopyAsList()\n    {\n        List<FilteredManagerListenerWrapper> list = new LinkedList<>();\n        for (FilteredManagerListenerWrapper listener : listeners)\n        {\n            list.add(listener);\n        }\n        return list;\n    }\n    boolean removeListener(FilteredManagerListener<ManagerEvent> toRemove)\n    {\n        boolean removed = false;\n        Iterator<FilteredManagerListenerWrapper> itr = listeners.iterator();\n        while (itr.hasNext())\n        {\n            FilteredManagerListenerWrapper container = itr.next();\n            if (container._listener == toRemove)\n            {\n                logger.error(\"Removing listener \" + toRemove);\n                itr.remove();\n                removed = true;\n                break;\n            }\n        }\n        return removed;\n    }\n}\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java": "        super(\"PeerMonitor\", PBXFactory.getActivePBX()); //$NON-NLS-1$\n        this.startListener();\n",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/Dial.java": "        super(descriptiveName, PBXFactory.getActivePBX());\n            this.startListener();\n",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/DialToAgi.java": "        super(descriptiveName, PBXFactory.getActivePBX());\n            this.startListener();\n",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/EventListenerBaseClass.java": "    private final PBX pbx;\n    protected EventListenerBaseClass(final String descriptiveName, PBX iPBX)\n        this.pbx = iPBX;\n    public void startListener()\n        ((AsteriskPBX) pbx).addListener(this);\n        ((AsteriskPBX) pbx).removeListener(this);\n                listener.startListener();\n",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/OriginateBaseClass.java": "    Exception ex = new Exception(\"Created here\");\n    private final AsteriskPBX pbx;\n        super(\"NewOrginateClass\", PBXFactory.getActivePBX());\n        pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n            this.startListener();\n            logger.debug(\"Check \" + ctr);\n                    logger.info(\"Id is \" + __originateID);\n                    break;\n",
            "src/test/java/org/asteriskjava/pbx/internal/core/ListenerManagerTest.java": "package org.asteriskjava.pbx.internal.core;\nimport static org.junit.Assert.assertTrue;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport org.asteriskjava.pbx.ListenerPriority;\nimport org.asteriskjava.pbx.asterisk.wrap.events.ManagerEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.VarSetEvent;\nimport org.junit.Test;\npublic class ListenerManagerTest\n{\n    volatile boolean managereventRecevied = false;\n    @Test\n    public void listenerTest() throws InterruptedException\n    {\n        List<FilteredManagerListener<ManagerEvent>> listeners = new LinkedList<>();\n        ListenerManager queue = new ListenerManager();\n        for (int i = 0; i < 1000; i++)\n        {\n            FilteredManagerListener<ManagerEvent> listener = getListener();\n            listeners.add(listener);\n            queue.addListener(listener);\n        }\n        Collections.shuffle(listeners);\n        for (FilteredManagerListener<ManagerEvent> listener : listeners)\n        {\n            assertTrue(queue.removeListener(listener));\n        }\n        assertTrue(queue.size() == 0);\n    }\n    private FilteredManagerListener<ManagerEvent> getListener()\n    {\n        return new FilteredManagerListener<ManagerEvent>()\n        {\n            @Override\n            public Set<Class< ? extends ManagerEvent>> requiredEvents()\n            {\n                Set<Class< ? extends ManagerEvent>> events = new HashSet<>();\n                events.add(VarSetEvent.class);\n                return events;\n            }\n            @Override\n            public void onManagerEvent(ManagerEvent event)\n            {\n                managereventRecevied = true;\n            }\n            @Override\n            public ListenerPriority getPriority()\n            {\n                return ListenerPriority.NORMAL;\n            }\n            @Override\n            public String getName()\n            {\n                return \"test\";\n            }\n        };\n    }\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/asteriskjava/pbx/internal/activity/ActivityHelper.java": [
                65,
                87
            ],
            "src/main/java/org/asteriskjava/pbx/internal/asterisk/MeetmeRoomControl.java": [
                72,
                81,
                88
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerConnection.java": [
                399,
                400,
                408,
                409
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java": [
                5,
                6,
                14,
                40,
                54,
                57,
                199,
                202,
                211,
                238,
                239,
                285,
                321,
                323,
                325,
                330,
                332,
                333,
                334,
                336,
                337,
                341,
                358,
                359,
                361
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/DialLocalToAgiActivity.java": [
                53,
                96
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/DialToAgiWithAbortCallback.java": [
                25,
                28,
                29,
                31,
                32,
                33,
                34,
                36,
                38,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                49,
                51,
                52,
                54
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/FilteredManagerListenerWrapper.java": [
                1,
                3,
                4,
                6,
                7,
                8,
                9,
                11,
                12,
                13,
                14,
                16,
                17,
                19,
                20,
                21,
                22,
                24,
                25,
                28,
                29,
                30,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                43,
                44,
                45,
                46,
                47,
                49
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/ListenerManager.java": [
                1,
                3,
                4,
                5,
                6,
                7,
                9,
                10,
                11,
                13,
                14,
                15,
                17,
                19,
                20,
                21,
                22,
                23,
                25,
                27,
                28,
                30,
                31,
                32,
                34,
                35,
                36,
                37,
                39,
                40,
                41,
                42,
                44,
                45,
                46,
                47,
                49,
                50,
                51,
                52,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                62,
                63,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                84
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java": [
                77,
                79
            ],
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/Dial.java": [
                36,
                65
            ],
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/DialToAgi.java": [
                34,
                62
            ],
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/EventListenerBaseClass.java": [
                16,
                18,
                21,
                36,
                39,
                48,
                78
            ],
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/OriginateBaseClass.java": [
                56,
                76,
                80,
                81,
                179,
                456,
                503,
                504
            ],
            "src/test/java/org/asteriskjava/pbx/internal/core/ListenerManagerTest.java": [
                1,
                3,
                5,
                6,
                7,
                8,
                9,
                11,
                12,
                13,
                14,
                16,
                17,
                19,
                21,
                22,
                23,
                24,
                26,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                40,
                42,
                44,
                45,
                46,
                47,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                57,
                58,
                59,
                60,
                61,
                63,
                64,
                65,
                66,
                67,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                77
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/asteriskjava/pbx/internal/activity/ActivityHelper.java": "        EventListenerBaseClass listener = new EventListenerBaseClass(activityName)\n        listener.startListener(PBXFactory.getActivePBX());\n",
            "src/main/java/org/asteriskjava/pbx/internal/asterisk/MeetmeRoomControl.java": "                    \"Thee MeetmeRoomControl has not been initialised. Please call MeetmeRoomControl.init().\"); //$NON-NLS-1$\n        super(\"MeetmeRoomControl\"); //$NON-NLS-1$\n        this.startListener(pbx);\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerConnection.java": "        CoherentManagerEventQueue newRealtime = new CoherentManagerEventQueue(\"Realtime\"); //$NON-NLS-1$\n        CoherentManagerEventQueue newStandard = new CoherentManagerEventQueue(\"Standard\"); //$NON-NLS-1$\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java": "import java.util.Comparator;\nimport java.util.Set;\nimport java.util.TreeSet;\n    private class Listener\n    {\n        FilteredManagerListener<ManagerEvent> _listener;\n        Set<Class< ? extends ManagerEvent>> requiredEvents;\n        public Listener(FilteredManagerListener<ManagerEvent> listener)\n        {\n            this._listener = listener;\n            this.requiredEvents = listener.requiredEvents();\n            if (requiredEvents.contains(BridgeEvent.class))\n            {\n                requiredEvents.add(LinkEvent.class);\n                requiredEvents.add(UnlinkEvent.class);\n            }\n            for (Class< ? extends ManagerEvent> event : requiredEvents)\n            {\n                if (!CoherentEventFactory.mapEvents.values().contains(event)\n                        && !CoherentEventFactory.mapResponses.values().contains(event))\n                {\n                    throw new RuntimeException(\n                            \"The requested event type of \" + event + \"+isn't known by \" + CoherentEventFactory.class);\n                }\n            }\n        }\n        @Override\n        public String toString()\n        {\n            return this._listener.getName();\n        }\n    }\n    private final TreeSet<Listener> listeners = new TreeSet<>(new ListenerPriorityComparator());\n    public CoherentManagerEventQueue(String name)\n        CoherentManagerConnection.managerConnection.addEventListener(this);\n        final TreeSet<Listener> listenerCopy = new TreeSet<>(new ListenerPriorityComparator());\n            listenerCopy.addAll(this.listeners);\n            for (final Listener filter : listenerCopy)\n    private void dispatchEventOnThread(final ManagerEvent event, final Listener filter, final CountDownLatch latch)\n            this.listeners.add(new Listener(listener));\n        synchronized (this.listeners)\n            if (melf != null)\n                for (Listener container : this.listeners)\n                    if (container._listener == melf)\n                        this.listeners.remove(container);\n                        synchronized (this.globalEvents)\n                        {\n                            this.globalEvents.clear();\n                            for (Listener readdContainer : this.listeners)\n                            {\n                                this.globalEvents.addAll(expandEvents(readdContainer._listener.requiredEvents()));\n                            }\n                        }\n                        break;\n            }\n        }\n    }\n    final class ListenerPriorityComparator implements Comparator<Listener>\n    {\n        @Override\n        public int compare(Listener lhs, Listener rhs)\n        {\n            int result = lhs._listener.getPriority().compare(rhs._listener.getPriority());\n            if (result == 0)\n                result = (lhs._listener.equals(rhs._listener) ? 0 : 1);\n            return result;\n                for (Listener listener : eventQueue.listeners)\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/DialLocalToAgiActivity.java": "        super(\"Dial \" + from + \" to AGI\");\n            this.startListener(PBXFactory.getActivePBX());\n        this.close();\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/DialToAgiWithAbortCallback.java": "    public DialToAgiActivityImpl start()\n        dialer.startActivity(false);\n        completion.waitForCompletion(3, TimeUnit.MINUTES);\n        final ActivityStatusEnum status;\n        if (dialer.isSuccess())\n        {\n            status = ActivityStatusEnum.SUCCESS;\n        }\n        else\n        {\n            status = ActivityStatusEnum.FAILURE;\n        }\n        iCallback.progress(dialer, status, status.getDefaultMessage());\n        return dialer;\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java": "        super(\"PeerMonitor\"); //$NON-NLS-1$\n        this.startListener(PBXFactory.getActivePBX());\n",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/Dial.java": "        super(descriptiveName);\n            this.startListener(PBXFactory.getActivePBX());\n",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/DialToAgi.java": "        super(descriptiveName);\n            this.startListener(PBXFactory.getActivePBX());\n",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/EventListenerBaseClass.java": "import org.asteriskjava.pbx.PBXFactory;\n    protected EventListenerBaseClass(final String descriptiveName)\n    public void startListener(PBX iPBX)\n        ((AsteriskPBX) iPBX).addListener(this);\n        AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n        pbx.removeListener(this);\n                listener.startListener(PBXFactory.getActivePBX());\n",
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/OriginateBaseClass.java": "        super(\"NewOrginateClass\"); //$NON-NLS-1$\n        AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n            this.startListener(pbx);\n        this.close();\n            logger.error(\"Check \" + ctr);\n                            break;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/asteriskjava/pbx/internal/activity/ActivityHelper.java": [
                65,
                87
            ],
            "src/main/java/org/asteriskjava/pbx/internal/asterisk/MeetmeRoomControl.java": [
                72,
                81,
                88
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerConnection.java": [
                399,
                407
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentManagerEventQueue.java": [
                4,
                6,
                7,
                40,
                41,
                42,
                43,
                45,
                46,
                47,
                48,
                50,
                51,
                54,
                55,
                56,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                69,
                70,
                71,
                72,
                73,
                75,
                77,
                91,
                93,
                235,
                238,
                247,
                274,
                320,
                356,
                358,
                360,
                362,
                364,
                369,
                370,
                371,
                372,
                373,
                374,
                375,
                376,
                377,
                380,
                381,
                382,
                384,
                385,
                386,
                387,
                388,
                390,
                392,
                393,
                395,
                410
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/DialLocalToAgiActivity.java": [
                53,
                96,
                117
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/DialToAgiWithAbortCallback.java": [
                25,
                27,
                29,
                31,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                42,
                44
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/PeerMonitor.java": [
                77,
                79
            ],
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/Dial.java": [
                36,
                65
            ],
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/DialToAgi.java": [
                34,
                62
            ],
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/EventListenerBaseClass.java": [
                4,
                18,
                35,
                38,
                47,
                48,
                78
            ],
            "src/main/java/org/asteriskjava/pbx/internal/managerAPI/OriginateBaseClass.java": [
                76,
                171,
                176,
                239,
                453,
                498
            ]
        }
    },
    {
        "commit": "7d5bc101",
        "prev_commit": "6f17d94c",
        "changed_files": [
            "NlStreamReaderFast273316816601633219txt",
            "src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScanner.java",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerCrNl.java",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerFactory.java",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerNl.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerDeterministicTest.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerRandomTest.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerSpeedTest.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerSpeedTestOnSocket.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerTestSocketSource.java"
        ],
        "changed_files_num": 11,
        "changed_java_files": [
            "src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScanner.java",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerCrNl.java",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerFactory.java",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerNl.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerDeterministicTest.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerRandomTest.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerSpeedTest.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerSpeedTestOnSocket.java",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerTestSocketSource.java"
        ],
        "changed_java_files_num": 10,
        "failed_test_list": [],
        "passed_test_list": [
            "AbstractAgiCommandTest",
            "CallerIdTest",
            "ResponseBuilderImplTest",
            "AbstractManagerEventListenerTest",
            "AstUtilTest",
            "CompositeMappingStrategyTest",
            "NewStateEventTest",
            "CdrEventTest",
            "FastScannerDeterministicTest",
            "ChannelReloadEventTest",
            "ResourceBundleMappingStrategyTest",
            "GetDataCommandTest",
            "ScriptEngineMappingStrategyTest",
            "ActionBuilderImplTest",
            "EventBuilderImplTest",
            "AgiReaderImplTest",
            "AsyncAgiEventTest",
            "DefaultAgiServerTest",
            "QueueMemberStateTest",
            "AsteriskChannelImplTest",
            "T38FaxStatusEventTest",
            "BridgeEnterEventComparatorTest",
            "RateLimiterTest",
            "FastScannerRandomTest",
            "ClassNameMappingStrategyTest",
            "HangupCauseTest",
            "AgiReplyImplTest",
            "AsteriskQueueMemberImplTest",
            "ConfigFileParserTest",
            "SkypeChatMessageEventTest",
            "CoreStatusResponseTest",
            "AgiChannelImplTest",
            "AsteriskAgentImplTest",
            "DateUtilTest",
            "RtcpReceivedEventTest",
            "SkypeBuddyStatusEventTest",
            "AgiRequestImplTest",
            "FastScannerSpeedTest",
            "AgiWriterImplTest",
            "SipShowPeerResponseTest",
            "ExecCommandTest",
            "ManagerReaderImplTest",
            "ListenerManagerTest",
            "ManagerConnectionImplTest",
            "ManagerWriterImplTest"
        ],
        "tests_cases_num": {
            "ConfigFileParserTest": 4,
            "ClassNameMappingStrategyTest": 2,
            "CompositeMappingStrategyTest": 2,
            "DefaultAgiServerTest": 4,
            "ResourceBundleMappingStrategyTest": 3,
            "ScriptEngineMappingStrategyTest": 3,
            "AbstractAgiCommandTest": 6,
            "ExecCommandTest": 5,
            "GetDataCommandTest": 4,
            "AgiChannelImplTest": 3,
            "AgiReaderImplTest": 5,
            "AgiReplyImplTest": 12,
            "AgiRequestImplTest": 24,
            "AgiWriterImplTest": 1,
            "CallerIdTest": 7,
            "HangupCauseTest": 1,
            "QueueMemberStateTest": 2,
            "AsteriskAgentImplTest": 1,
            "AsteriskChannelImplTest": 1,
            "AsteriskQueueMemberImplTest": 1,
            "AbstractManagerEventListenerTest": 2,
            "AsyncAgiEventTest": 2,
            "CdrEventTest": 3,
            "ChannelReloadEventTest": 3,
            "NewStateEventTest": 2,
            "RtcpReceivedEventTest": 5,
            "SkypeBuddyStatusEventTest": 2,
            "SkypeChatMessageEventTest": 1,
            "T38FaxStatusEventTest": 2,
            "ActionBuilderImplTest": 16,
            "EventBuilderImplTest": 35,
            "ManagerConnectionImplTest": 22,
            "ManagerReaderImplTest": 9,
            "ManagerWriterImplTest": 2,
            "ResponseBuilderImplTest": 9,
            "BridgeEnterEventComparatorTest": 17,
            "CoreStatusResponseTest": 2,
            "SipShowPeerResponseTest": 4,
            "RateLimiterTest": 1,
            "ListenerManagerTest": 1,
            "AstUtilTest": 6,
            "DateUtilTest": 2,
            "FastScannerDeterministicTest": 3,
            "FastScannerRandomTest": 2,
            "FastScannerSpeedTest": 3
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+    private FastScanner scanner;\n+        InputStreamReader reader = new InputStreamReader(inputStream, encoding);\n+        this.scanner = FastScannerFactory.getReader(reader, pattern);\n+        String line = null;\n+    public String next() throws IOException;\n+    private char crChar = '\\r';\n+    private boolean seenReturn = false;\n+    public FastScannerCrNl(Readable reader)\n+    {\n+        super(reader);\n+    }\n+    protected String getLine(boolean endOfLine)\n+    {\n+        for (int i = start; i < end; i++)\n+        {\n+            if (cbuf.get(i) == crChar)\n+            {\n+                seenReturn = true;\n+            }\n+            else if (seenReturn && cbuf.get(i) == nlChar)\n+            {\n+                if (i == start)\n+                {\n+                    result.setLength(result.length() - 1);\n+                }\n+                if (i > start)\n+                {\n+                    result.append(cbuf.subSequence(start, start + (i - start) - 1));\n+                }\n+                start = i + 1;\n+                String tmp = result.toString();\n+                result.setLength(0);\n+                seenReturn = false;\n+                return tmp;\n+            }\n+            else\n+            {\n+                seenReturn = false;\n+            }\n+        }\n+        if (end >= start)\n+        {\n+            result.append(cbuf.subSequence(start, start + (end - start))).toString();\n+            start = 0;\n+            end = 0;\n+        }\n+        return null;\n+    }\n+    private static final Log logger = LogFactory.getLog(FastScannerFactory.class);\n+    private static volatile boolean useLegacyScanner = false;\n+    public static FastScanner getReader(Readable reader, Pattern pattern)\n+    {\n+        if (!useLegacyScanner)\n+        {\n+            if (pattern.pattern().equals(\"\\r\\n\"))\n+            {\n+                return new FastScannerCrNl(reader);\n+            }\n+            if (pattern.pattern().equals(\"\\n\"))\n+            {\n+                return new FastScannerNl(reader);\n+            }\n+        }\n+        logger.warn(\"Using legacy scanner\");\n+        Scanner scanner = new Scanner(reader);\n+        scanner.useDelimiter(pattern);\n+        return getWrappedScanner(scanner);\n+    }\n+    public static void useLegacyScanner(boolean b)\n+    {\n+        useLegacyScanner = b;\n+    }\n+    private static FastScanner getWrappedScanner(final Scanner scanner)\n+    {\n+        return new FastScanner()\n+        {\n+            @Override\n+            public String next() throws IOException\n+            {\n+                try\n+                {\n+                    return scanner.next();\n+                }\n+                catch (NoSuchElementException e)\n+                {\n+                    return null;\n+                }\n+            }\n+            @Override\n+            public void close()\n+            {\n+                scanner.close();\n+            }\n+        };\n+    }\n+    private static final Log logger = LogFactory.getLog(FastScannerNl.class);\n+    private static final int BUFFER_SIZE = 8192;\n+    private AtomicReference<Readable> readableReference = new AtomicReference<>();\n+    protected char nlChar = '\\n';\n+    protected StringBuilder result = new StringBuilder(80);\n+    protected CharBuffer cbuf = CharBuffer.allocate(BUFFER_SIZE);\n+    protected int end = 0;\n+    protected int start = 0;\n+    private boolean closed = false;\n+    protected final Object sync = new Object();\n+    private boolean isFirst = true;\n+    File logfile;\n+    private BufferedWriter writer;\n+    public FastScannerNl(Readable reader)\n+    {\n+        this.readableReference.set(reader);\n+    }\n+    public String next() throws IOException\n+    {\n+        int bytes = 0;\n+        String line = getLine(false);\n+        if (line == null)\n+        {\n+            Readable readable = readableReference.get();\n+            while (readable != null && (bytes = readable.read(cbuf)) > -1)\n+            {\n+                cbuf.position(0);\n+                end = bytes;\n+                line = getLine(bytes >= 0);\n+                if (line != null)\n+                {\n+                    if (isFirst && line.length() == 0)\n+                    {\n+                        line = getLine(bytes >= 0);\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+        isFirst = false;\n+        if (line == null)\n+        {\n+            String tmp = result.toString();\n+            result.setLength(0);\n+            if (readableReference.get() == null && tmp.length() == 0)\n+            {\n+                return null;\n+            }\n+            if (bytes == -1 && tmp.length() == 0)\n+            {\n+                return null;\n+            }\n+            return tmp;\n+        }\n+        return line;\n+    }\n+    protected String getLine(boolean endOfLine)\n+    {\n+        for (int i = start; i < end; i++)\n+        {\n+            if (cbuf.get(i) == nlChar)\n+            {\n+                if (i > start)\n+                {\n+                    result.append(cbuf.subSequence(start, start + (i - start)));\n+                }\n+                start = i + 1;\n+                String tmp = result.toString();\n+                result.setLength(0);\n+                return tmp;\n+            }\n+        }\n+        if (end >= start)\n+        {\n+            result.append(cbuf.subSequence(start, start + (end - start))).toString();\n+            start = 0;\n+            end = 0;\n+        }\n+        return null;\n+    }\n+    public void close()\n+    {\n+        synchronized (sync)\n+        {\n+            if (closed)\n+                return;\n+            if (readableReference.get() instanceof Closeable)\n+            {\n+                try\n+                {\n+                    ((Closeable) readableReference.get()).close();\n+                }\n+                catch (IOException ioe)\n+                {\n+                    logger.error(ioe, ioe);\n+                }\n+            }\n+            readableReference.set(null);\n+            closed = true;\n+        }\n+    }\n+    @SuppressWarnings(\"unused\")\n+    private void createFileWriter()\n+    {\n+        try\n+        {\n+            logfile = File.createTempFile(this.getClass().getSimpleName(), \"txt\");\n+            writer = Files.newBufferedWriter(logfile.toPath(), Charset.defaultCharset(), StandardOpenOption.APPEND);\n+        }\n+        catch (IOException e)\n+        {\n+            e.printStackTrace();\n+        }\n+    }\n+    @SuppressWarnings(\"unused\")\n+    private void writeToFile(int bytes) throws IOException\n+    {\n+        String lines = new StringBuffer().append(cbuf, 0, bytes).toString();\n+        writer.append(lines, 0, bytes);\n+    }\n+    @SuppressWarnings(\"unused\")\n+    private void closeFileWriter() throws IOException\n+    {\n+        writer.flush();\n+        writer.close();\n+    }\n+    @Test\n+    public void testCrNlScanner() throws Exception\n+    {\n+        testScanner(10000, SocketConnectionFacadeImpl.NL_PATTERN);\n+    }\n+    @Test\n+    public void testNlScanner() throws Exception\n+    {\n+        testScanner(10000, SocketConnectionFacadeImpl.CRNL_PATTERN);\n+    }\n+    private void testScanner(int testLines, Pattern pattern) throws Exception\n+    {\n+        final byte[] bytes = buildTestData(testLines, pattern).getBytes();\n+        InputStream inputStream = new ByteArrayInputStream(bytes);\n+        InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+        try (FastScanner scanner = FastScannerFactory.getReader(reader, pattern))\n+        {\n+            System.out.println(\"\\nTesting scanner class: \" + scanner.getClass());\n+            int ctr = 0;\n+            @SuppressWarnings(\"unused\")\n+            String t;\n+            while ((t = scanner.next()) != null)\n+            {\n+                ctr++;\n+            }\n+            assertTrue(\"Counter expected : \" + (testLines) + \" got \" + ctr, (testLines) == ctr);\n+        }\n+        catch (NoSuchElementException e)\n+        {\n+        }\n+        System.out.println(\"Done\\n\");\n+    }\n+    @Test\n+    public void testBR2Accuraccy3() throws Exception\n+    {\n+        final byte[] bytes = Files.readAllBytes(new File(\"NlStreamReaderFast273316816601633219txt\").toPath());\n+        InputStream inputStream = new ByteArrayInputStream(bytes);\n+        InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+        try (FastScannerNl scanner = new FastScannerNl(reader);)\n+        {\n+            String t;\n+            while ((t = scanner.next()) != null)\n+            {\n+                System.out.println(\"L: \" + t + \" \" + t.length());\n+            }\n+        }\n+        catch (NoSuchElementException e)\n+        {\n+        }\n+    }\n+    String buildTestData(int lines, Pattern terminator)\n+    {\n+        StringBuilder builder = new StringBuilder(lines * 30);\n+        int ctr = 0;\n+        while (ctr < lines)\n+        {\n+            ctr++;\n+            builder.append(\"Hallo hello: one line with text! \" + ctr + terminator.pattern());\n+        }\n+        return builder.toString();\n+    }\n+    @Test\n+    public void compareOutputOfNlFastScannerToScanner() throws Exception\n+    {\n+        setupTest(SocketConnectionFacadeImpl.NL_PATTERN, \"NL\");\n+    }\n+    @Test\n+    public void compareOutputOfCrNlFastScannerToScanner() throws Exception\n+    {\n+        setupTest(SocketConnectionFacadeImpl.CRNL_PATTERN, \"CR NL\");\n+    }\n+    void setupTest(final Pattern pattern, String caption) throws InterruptedException\n+    {\n+        final AtomicInteger ctr = new AtomicInteger();\n+        int tests = 50;\n+        for (int i = 0; i < tests; i++)\n+        {\n+            try\n+            {\n+                String testData = generateTestData(1_000_000);\n+                compare(testData, pattern);\n+                System.out.println(caption + \" Completed \" + (ctr.incrementAndGet()) * 1 + \"MB\");\n+            }\n+            catch (Exception e)\n+            {\n+                e.printStackTrace();\n+                fail();\n+            }\n+        }\n+    }\n+    boolean compare(String testData, Pattern pattern) throws IOException\n+    {\n+        InputStream inputStream1 = new ByteArrayInputStream(testData.getBytes());\n+        InputStreamReader reader1 = new InputStreamReader(inputStream1, StandardCharsets.UTF_8);\n+        InputStream inputStream2 = new ByteArrayInputStream(testData.getBytes());\n+        InputStreamReader reader2 = new InputStreamReader(inputStream2, StandardCharsets.UTF_8);\n+        FastScanner fast = FastScannerFactory.getReader(reader2, pattern);\n+        String scannerResult = \"\";\n+        String fastResult = \"\";\n+        int ctr = 0;\n+        Scanner scanner = new Scanner(reader1);\n+        scanner.useDelimiter(pattern);\n+        try\n+        {\n+            while ((scannerResult = scanner.next()) != null)\n+            {\n+                ctr++;\n+                fastResult = fast.next();\n+                if (!fastResult.equals(scannerResult))\n+                {\n+                    System.out.println(\"Expected \" + ByteArrayUtil.toHexString(scannerResult.getBytes()));\n+                    System.out.println(\"Got      \" + ByteArrayUtil.toHexString(fastResult.getBytes()));\n+                    System.out.println(\"Error \" + ctr);\n+                    System.out.println(\"\");\n+                    throw new RuntimeException(\"Mismatched output\");\n+                }\n+            }\n+        }\n+        catch (NoSuchElementException e)\n+        {\n+            if (fast.next() != null)\n+            {\n+                throw new RuntimeException(\"Expected null, not something else\");\n+            }\n+        }\n+        finally\n+        {\n+            scanner.close();\n+            fast.close();\n+        }\n+        return false;\n+    }\n+    public static String generateTestData(int byteSize)\n+    {\n+        Random rand = new Random();\n+        String bodyData = \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(),.<>[] {};':\\\"\";\n+        bodyData += bodyData.toUpperCase();\n+        String[] terminators = new String[]{\"\\n\", \"\\r\", \"\\r\\n\", \"\\n\\r\"};\n+        StringBuilder builder = new StringBuilder(byteSize * 2);\n+        for (int i = 0; i < byteSize; i++)\n+        {\n+            if (Math.random() * 100 > 98)\n+            {\n+                builder.append(terminators[rand.nextInt(terminators.length)]);\n+            }\n+            else\n+            {\n+                int position = rand.nextInt(bodyData.length());\n+                builder.append(bodyData.substring(position, position + 1));\n+            }\n+        }\n+        return builder.toString();\n+    }\n+    @Test\n+    public void testScannerSpeed() throws Exception\n+    {\n+        final byte[] bytes = FastScannerRandomTest.generateTestData(10_000_000).getBytes();\n+        for (int i = 10; i-- > 0;)\n+        {\n+            System.out.print(\"Scanner \" + i + \":\\t\");\n+            InputStream inputStream = new ByteArrayInputStream(bytes);\n+            InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+            long start = System.currentTimeMillis();\n+            int ctr = 0;\n+            try (Scanner scanner = new Scanner(reader);)\n+            {\n+                scanner.useDelimiter(Pattern.compile(\"\\r\\n\"));\n+                @SuppressWarnings(\"unused\")\n+                String t;\n+                while ((t = scanner.next()) != null)\n+                {\n+                    ctr++;\n+                }\n+                System.out.print(ctr + \"\\t\");\n+            }\n+            catch (NoSuchElementException e)\n+            {\n+                System.out.print(ctr + \"\\t\");\n+            }\n+            System.out.println((System.currentTimeMillis() - start) + \" ms\");\n+        }\n+    }\n+    @Test\n+    public void test1() throws Exception\n+    {\n+        System.out.println(\"\\nTesting fast CrNlStream\");\n+        fastScannerSpeedTest(SocketConnectionFacadeImpl.CRNL_PATTERN);\n+    }\n+    @Test\n+    public void test2() throws Exception\n+    {\n+        System.out.println(\"\\nTesting fast NlStream\");\n+        fastScannerSpeedTest(SocketConnectionFacadeImpl.NL_PATTERN);\n+    }\n+    private void fastScannerSpeedTest(Pattern pattern) throws Exception\n+    {\n+        final byte[] bytes = FastScannerRandomTest.generateTestData(10_000_000).getBytes();\n+        for (int i = 10; i-- > 0;)\n+        {\n+            System.out.print(\"Fast \" + i + \":\\t\");\n+            InputStream inputStream = new ByteArrayInputStream(bytes);\n+            InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+            FastScanner scanner = FastScannerFactory.getReader(reader, pattern);\n+            long start = System.currentTimeMillis();\n+            try\n+            {\n+                int ctr = 0;\n+                @SuppressWarnings(\"unused\")\n+                String t;\n+                while ((t = scanner.next()) != null)\n+                {\n+                    ctr++;\n+                }\n+                System.out.print(ctr + \"\\t\");\n+            }\n+            catch (NoSuchElementException e)\n+            {\n+            }\n+            System.out.println((System.currentTimeMillis() - start) + \" ms\");\n+        }\n+    }\n+    @Test\n+    public void testScannerSpeed() throws Exception\n+    {\n+        try\n+        {\n+            for (int i = 10; i-- > 0;)\n+            {\n+                InputStreamReader reader = getReader();\n+                System.out.print(\"Scanner \" + i + \":\\t\");\n+                long start = System.currentTimeMillis();\n+                int ctr = 0;\n+                try (Scanner scanner = new Scanner(reader);)\n+                {\n+                    scanner.useDelimiter(Pattern.compile(\"\\r\\n\"));\n+                    @SuppressWarnings(\"unused\")\n+                    String t;\n+                    while ((t = scanner.next()) != null)\n+                    {\n+                        ctr++;\n+                    }\n+                    System.out.print(ctr + \"\\t\");\n+                }\n+                catch (NoSuchElementException e)\n+                {\n+                    System.out.print(ctr + \"\\t\");\n+                }\n+                System.out.println((System.currentTimeMillis() - start) + \" ms\");\n+            }\n+        }\n+        catch (Exception e)\n+        {\n+            System.out.println(\n+                    \"If you want to run FastScannerSpeedTestOnSocket, you'll need to run FastScannerTestSocketSource first\");\n+        }\n+    }\n+    private InputStreamReader getReader() throws UnknownHostException, IOException, InterruptedException\n+    {\n+        Socket echoSocket = new Socket(\"127.0.0.1\", FastScannerTestSocketSource.portNumber);\n+        InputStream inputStream = echoSocket.getInputStream();\n+        InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+        return reader;\n+    }\n+    @Test\n+    public void test1() throws Exception\n+    {\n+        System.out.println(\"\\nTesting fast CrNlStream\");\n+        fastScannerSpeedTest(SocketConnectionFacadeImpl.CRNL_PATTERN);\n+    }\n+    @Test\n+    public void test2() throws Exception\n+    {\n+        System.out.println(\"\\nTesting fast NlStream\");\n+        fastScannerSpeedTest(SocketConnectionFacadeImpl.NL_PATTERN);\n+    }\n+    private void fastScannerSpeedTest(Pattern pattern) throws Exception\n+    {\n+        try\n+        {\n+            for (int i = 10; i-- > 0;)\n+            {\n+                InputStreamReader reader = getReader();\n+                System.out.print(\"Fast \" + i + \":\\t\");\n+                FastScanner scanner = FastScannerFactory.getReader(reader, pattern);\n+                long start = System.currentTimeMillis();\n+                try\n+                {\n+                    int ctr = 0;\n+                    @SuppressWarnings(\"unused\")\n+                    String t;\n+                    while ((t = scanner.next()) != null)\n+                    {\n+                        ctr++;\n+                    }\n+                    System.out.print(ctr + \"\\t\");\n+                }\n+                catch (NoSuchElementException e)\n+                {\n+                }\n+                System.out.println((System.currentTimeMillis() - start) + \" ms\");\n+            }\n+        }\n+        catch (Exception e)\n+        {\n+            System.out.println(\n+                    \"If you want to run FastScannerSpeedTestOnSocket, you'll need to run FastScannerTestSocketSource first\");\n+        }\n+    }\n+    final static byte[] bytes = FastScannerRandomTest.generateTestData(100_000_000).getBytes();\n+    public static int portNumber = 2048;\n+    public static void main(String[] args) throws IOException\n+    {\n+        while (true)\n+        {\n+            listen();\n+        }\n+    }\n+    static void listen() throws IOException\n+    {\n+        System.out.println(\"Waiting for connect on \" + portNumber);\n+        try (ServerSocket serverSocket = new ServerSocket(portNumber); Socket clientSocket = serverSocket.accept();)\n+        {\n+            clientSocket.getOutputStream().write(bytes);\n+        }\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java": "import org.asteriskjava.util.internal.streamreader.FastScanner;\nimport org.asteriskjava.util.internal.streamreader.FastScannerFactory;\n    private FastScanner scanner;\n        InputStreamReader reader = new InputStreamReader(inputStream, encoding);\n        this.scanner = FastScannerFactory.getReader(reader, pattern);\n        String line = null;\n",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScanner.java": "package org.asteriskjava.util.internal.streamreader;\nimport java.io.Closeable;\nimport java.io.IOException;\npublic interface FastScanner extends Closeable\n{\n    public String next() throws IOException;\n}\n",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerCrNl.java": "package org.asteriskjava.util.internal.streamreader;\npublic class FastScannerCrNl extends FastScannerNl\n{\n    private char crChar = '\\r';\n    private boolean seenReturn = false;\n    public FastScannerCrNl(Readable reader)\n    {\n        super(reader);\n    }\n    protected String getLine(boolean endOfLine)\n    {\n        for (int i = start; i < end; i++)\n        {\n            if (cbuf.get(i) == crChar)\n            {\n                seenReturn = true;\n            }\n            else if (seenReturn && cbuf.get(i) == nlChar)\n            {\n                if (i == start)\n                {\n                    result.setLength(result.length() - 1);\n                }\n                if (i > start)\n                {\n                    result.append(cbuf.subSequence(start, start + (i - start) - 1));\n                }\n                start = i + 1;\n                String tmp = result.toString();\n                result.setLength(0);\n                seenReturn = false;\n                return tmp;\n            }\n            else\n            {\n                seenReturn = false;\n            }\n        }\n        if (end >= start)\n        {\n            result.append(cbuf.subSequence(start, start + (end - start))).toString();\n            start = 0;\n            end = 0;\n        }\n        return null;\n    }\n}\n",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerFactory.java": "package org.asteriskjava.util.internal.streamreader;\nimport java.io.IOException;\nimport java.util.NoSuchElementException;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\nimport org.asteriskjava.util.Log;\nimport org.asteriskjava.util.LogFactory;\npublic class FastScannerFactory\n{\n    private static final Log logger = LogFactory.getLog(FastScannerFactory.class);\n    private static volatile boolean useLegacyScanner = false;\n    public static FastScanner getReader(Readable reader, Pattern pattern)\n    {\n        if (!useLegacyScanner)\n        {\n            if (pattern.pattern().equals(\"\\r\\n\"))\n            {\n                return new FastScannerCrNl(reader);\n            }\n            if (pattern.pattern().equals(\"\\n\"))\n            {\n                return new FastScannerNl(reader);\n            }\n        }\n        logger.warn(\"Using legacy scanner\");\n        Scanner scanner = new Scanner(reader);\n        scanner.useDelimiter(pattern);\n        return getWrappedScanner(scanner);\n    }\n    public static void useLegacyScanner(boolean b)\n    {\n        useLegacyScanner = b;\n    }\n    private static FastScanner getWrappedScanner(final Scanner scanner)\n    {\n        return new FastScanner()\n        {\n            @Override\n            public String next() throws IOException\n            {\n                try\n                {\n                    return scanner.next();\n                }\n                catch (NoSuchElementException e)\n                {\n                    return null;\n                }\n            }\n            @Override\n            public void close()\n            {\n                scanner.close();\n            }\n        };\n    }\n}\n",
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerNl.java": "package org.asteriskjava.util.internal.streamreader;\nimport java.io.BufferedWriter;\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.CharBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.atomic.AtomicReference;\nimport org.asteriskjava.util.Log;\nimport org.asteriskjava.util.LogFactory;\npublic class FastScannerNl implements FastScanner\n{\n    private static final Log logger = LogFactory.getLog(FastScannerNl.class);\n    private static final int BUFFER_SIZE = 8192;\n    private AtomicReference<Readable> readableReference = new AtomicReference<>();\n    protected char nlChar = '\\n';\n    protected StringBuilder result = new StringBuilder(80);\n    protected CharBuffer cbuf = CharBuffer.allocate(BUFFER_SIZE);\n    protected int end = 0;\n    protected int start = 0;\n    private boolean closed = false;\n    protected final Object sync = new Object();\n    private boolean isFirst = true;\n    File logfile;\n    private BufferedWriter writer;\n    public FastScannerNl(Readable reader)\n    {\n        this.readableReference.set(reader);\n    }\n    public String next() throws IOException\n    {\n        int bytes = 0;\n        String line = getLine(false);\n        if (line == null)\n        {\n            Readable readable = readableReference.get();\n            while (readable != null && (bytes = readable.read(cbuf)) > -1)\n            {\n                cbuf.position(0);\n                end = bytes;\n                line = getLine(bytes >= 0);\n                if (line != null)\n                {\n                    if (isFirst && line.length() == 0)\n                    {\n                        line = getLine(bytes >= 0);\n                    }\n                    break;\n                }\n            }\n        }\n        isFirst = false;\n        if (line == null)\n        {\n            String tmp = result.toString();\n            result.setLength(0);\n            if (readableReference.get() == null && tmp.length() == 0)\n            {\n                return null;\n            }\n            if (bytes == -1 && tmp.length() == 0)\n            {\n                return null;\n            }\n            return tmp;\n        }\n        return line;\n    }\n    protected String getLine(boolean endOfLine)\n    {\n        for (int i = start; i < end; i++)\n        {\n            if (cbuf.get(i) == nlChar)\n            {\n                if (i > start)\n                {\n                    result.append(cbuf.subSequence(start, start + (i - start)));\n                }\n                start = i + 1;\n                String tmp = result.toString();\n                result.setLength(0);\n                return tmp;\n            }\n        }\n        if (end >= start)\n        {\n            result.append(cbuf.subSequence(start, start + (end - start))).toString();\n            start = 0;\n            end = 0;\n        }\n        return null;\n    }\n    public void close()\n    {\n        synchronized (sync)\n        {\n            if (closed)\n                return;\n            if (readableReference.get() instanceof Closeable)\n            {\n                try\n                {\n                    ((Closeable) readableReference.get()).close();\n                }\n                catch (IOException ioe)\n                {\n                    logger.error(ioe, ioe);\n                }\n            }\n            readableReference.set(null);\n            closed = true;\n        }\n    }\n    @SuppressWarnings(\"unused\")\n    private void createFileWriter()\n    {\n        try\n        {\n            logfile = File.createTempFile(this.getClass().getSimpleName(), \"txt\");\n            writer = Files.newBufferedWriter(logfile.toPath(), Charset.defaultCharset(), StandardOpenOption.APPEND);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n    @SuppressWarnings(\"unused\")\n    private void writeToFile(int bytes) throws IOException\n    {\n        String lines = new StringBuffer().append(cbuf, 0, bytes).toString();\n        writer.append(lines, 0, bytes);\n    }\n    @SuppressWarnings(\"unused\")\n    private void closeFileWriter() throws IOException\n    {\n        writer.flush();\n        writer.close();\n    }\n}\n",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerDeterministicTest.java": "package org.asteriskjava.util.internal.streamreader;\nimport static org.junit.Assert.assertTrue;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.util.NoSuchElementException;\nimport java.util.regex.Pattern;\nimport org.asteriskjava.util.internal.SocketConnectionFacadeImpl;\nimport org.junit.Test;\npublic class FastScannerDeterministicTest\n{\n    @Test\n    public void testCrNlScanner() throws Exception\n    {\n        testScanner(10000, SocketConnectionFacadeImpl.NL_PATTERN);\n    }\n    @Test\n    public void testNlScanner() throws Exception\n    {\n        testScanner(10000, SocketConnectionFacadeImpl.CRNL_PATTERN);\n    }\n    private void testScanner(int testLines, Pattern pattern) throws Exception\n    {\n        final byte[] bytes = buildTestData(testLines, pattern).getBytes();\n        InputStream inputStream = new ByteArrayInputStream(bytes);\n        InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n        try (FastScanner scanner = FastScannerFactory.getReader(reader, pattern))\n        {\n            System.out.println(\"\\nTesting scanner class: \" + scanner.getClass());\n            int ctr = 0;\n            @SuppressWarnings(\"unused\")\n            String t;\n            while ((t = scanner.next()) != null)\n            {\n                ctr++;\n            }\n            assertTrue(\"Counter expected : \" + (testLines) + \" got \" + ctr, (testLines) == ctr);\n        }\n        catch (NoSuchElementException e)\n        {\n        }\n        System.out.println(\"Done\\n\");\n    }\n    @Test\n    public void testBR2Accuraccy3() throws Exception\n    {\n        final byte[] bytes = Files.readAllBytes(new File(\"NlStreamReaderFast273316816601633219txt\").toPath());\n        InputStream inputStream = new ByteArrayInputStream(bytes);\n        InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n        try (FastScannerNl scanner = new FastScannerNl(reader);)\n        {\n            String t;\n            while ((t = scanner.next()) != null)\n            {\n                System.out.println(\"L: \" + t + \" \" + t.length());\n            }\n        }\n        catch (NoSuchElementException e)\n        {\n        }\n    }\n    String buildTestData(int lines, Pattern terminator)\n    {\n        StringBuilder builder = new StringBuilder(lines * 30);\n        int ctr = 0;\n        while (ctr < lines)\n        {\n            ctr++;\n            builder.append(\"Hallo hello: one line with text! \" + ctr + terminator.pattern());\n        }\n        return builder.toString();\n    }\n}\n",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerRandomTest.java": "package org.asteriskjava.util.internal.streamreader;\nimport static org.junit.Assert.fail;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.NoSuchElementException;\nimport java.util.Random;\nimport java.util.Scanner;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.regex.Pattern;\nimport org.asteriskjava.util.internal.SocketConnectionFacadeImpl;\nimport org.junit.Test;\nimport ch.qos.logback.core.encoder.ByteArrayUtil;\npublic class FastScannerRandomTest\n{\n    @Test\n    public void compareOutputOfNlFastScannerToScanner() throws Exception\n    {\n        setupTest(SocketConnectionFacadeImpl.NL_PATTERN, \"NL\");\n    }\n    @Test\n    public void compareOutputOfCrNlFastScannerToScanner() throws Exception\n    {\n        setupTest(SocketConnectionFacadeImpl.CRNL_PATTERN, \"CR NL\");\n    }\n    void setupTest(final Pattern pattern, String caption) throws InterruptedException\n    {\n        final AtomicInteger ctr = new AtomicInteger();\n        int tests = 50;\n        for (int i = 0; i < tests; i++)\n        {\n            try\n            {\n                String testData = generateTestData(1_000_000);\n                compare(testData, pattern);\n                System.out.println(caption + \" Completed \" + (ctr.incrementAndGet()) * 1 + \"MB\");\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n                fail();\n            }\n        }\n    }\n    boolean compare(String testData, Pattern pattern) throws IOException\n    {\n        InputStream inputStream1 = new ByteArrayInputStream(testData.getBytes());\n        InputStreamReader reader1 = new InputStreamReader(inputStream1, StandardCharsets.UTF_8);\n        InputStream inputStream2 = new ByteArrayInputStream(testData.getBytes());\n        InputStreamReader reader2 = new InputStreamReader(inputStream2, StandardCharsets.UTF_8);\n        FastScanner fast = FastScannerFactory.getReader(reader2, pattern);\n        String scannerResult = \"\";\n        String fastResult = \"\";\n        int ctr = 0;\n        Scanner scanner = new Scanner(reader1);\n        scanner.useDelimiter(pattern);\n        try\n        {\n            while ((scannerResult = scanner.next()) != null)\n            {\n                ctr++;\n                fastResult = fast.next();\n                if (!fastResult.equals(scannerResult))\n                {\n                    System.out.println(\"Expected \" + ByteArrayUtil.toHexString(scannerResult.getBytes()));\n                    System.out.println(\"Got      \" + ByteArrayUtil.toHexString(fastResult.getBytes()));\n                    System.out.println(\"Error \" + ctr);\n                    System.out.println(\"\");\n                    throw new RuntimeException(\"Mismatched output\");\n                }\n            }\n        }\n        catch (NoSuchElementException e)\n        {\n            if (fast.next() != null)\n            {\n                throw new RuntimeException(\"Expected null, not something else\");\n            }\n        }\n        finally\n        {\n            scanner.close();\n            fast.close();\n        }\n        return false;\n    }\n    public static String generateTestData(int byteSize)\n    {\n        Random rand = new Random();\n        String bodyData = \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(),.<>[] {};':\\\"\";\n        bodyData += bodyData.toUpperCase();\n        String[] terminators = new String[]{\"\\n\", \"\\r\", \"\\r\\n\", \"\\n\\r\"};\n        StringBuilder builder = new StringBuilder(byteSize * 2);\n        for (int i = 0; i < byteSize; i++)\n        {\n            if (Math.random() * 100 > 98)\n            {\n                builder.append(terminators[rand.nextInt(terminators.length)]);\n            }\n            else\n            {\n                int position = rand.nextInt(bodyData.length());\n                builder.append(bodyData.substring(position, position + 1));\n            }\n        }\n        return builder.toString();\n    }\n}\n",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerSpeedTest.java": "package org.asteriskjava.util.internal.streamreader;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.NoSuchElementException;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\nimport org.asteriskjava.util.internal.SocketConnectionFacadeImpl;\nimport org.junit.Test;\npublic class FastScannerSpeedTest\n{\n    @Test\n    public void testScannerSpeed() throws Exception\n    {\n        final byte[] bytes = FastScannerRandomTest.generateTestData(10_000_000).getBytes();\n        for (int i = 10; i-- > 0;)\n        {\n            System.out.print(\"Scanner \" + i + \":\\t\");\n            InputStream inputStream = new ByteArrayInputStream(bytes);\n            InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n            long start = System.currentTimeMillis();\n            int ctr = 0;\n            try (Scanner scanner = new Scanner(reader);)\n            {\n                scanner.useDelimiter(Pattern.compile(\"\\r\\n\"));\n                @SuppressWarnings(\"unused\")\n                String t;\n                while ((t = scanner.next()) != null)\n                {\n                    ctr++;\n                }\n                System.out.print(ctr + \"\\t\");\n            }\n            catch (NoSuchElementException e)\n            {\n                System.out.print(ctr + \"\\t\");\n            }\n            System.out.println((System.currentTimeMillis() - start) + \" ms\");\n        }\n    }\n    @Test\n    public void test1() throws Exception\n    {\n        System.out.println(\"\\nTesting fast CrNlStream\");\n        fastScannerSpeedTest(SocketConnectionFacadeImpl.CRNL_PATTERN);\n    }\n    @Test\n    public void test2() throws Exception\n    {\n        System.out.println(\"\\nTesting fast NlStream\");\n        fastScannerSpeedTest(SocketConnectionFacadeImpl.NL_PATTERN);\n    }\n    private void fastScannerSpeedTest(Pattern pattern) throws Exception\n    {\n        final byte[] bytes = FastScannerRandomTest.generateTestData(10_000_000).getBytes();\n        for (int i = 10; i-- > 0;)\n        {\n            System.out.print(\"Fast \" + i + \":\\t\");\n            InputStream inputStream = new ByteArrayInputStream(bytes);\n            InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n            FastScanner scanner = FastScannerFactory.getReader(reader, pattern);\n            long start = System.currentTimeMillis();\n            try\n            {\n                int ctr = 0;\n                @SuppressWarnings(\"unused\")\n                String t;\n                while ((t = scanner.next()) != null)\n                {\n                    ctr++;\n                }\n                System.out.print(ctr + \"\\t\");\n            }\n            catch (NoSuchElementException e)\n            {\n            }\n            System.out.println((System.currentTimeMillis() - start) + \" ms\");\n        }\n    }\n}\n",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerSpeedTestOnSocket.java": "package org.asteriskjava.util.internal.streamreader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.NoSuchElementException;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\nimport org.asteriskjava.util.internal.SocketConnectionFacadeImpl;\nimport org.junit.Test;\npublic class FastScannerSpeedTestOnSocket\n{\n    @Test\n    public void testScannerSpeed() throws Exception\n    {\n        try\n        {\n            for (int i = 10; i-- > 0;)\n            {\n                InputStreamReader reader = getReader();\n                System.out.print(\"Scanner \" + i + \":\\t\");\n                long start = System.currentTimeMillis();\n                int ctr = 0;\n                try (Scanner scanner = new Scanner(reader);)\n                {\n                    scanner.useDelimiter(Pattern.compile(\"\\r\\n\"));\n                    @SuppressWarnings(\"unused\")\n                    String t;\n                    while ((t = scanner.next()) != null)\n                    {\n                        ctr++;\n                    }\n                    System.out.print(ctr + \"\\t\");\n                }\n                catch (NoSuchElementException e)\n                {\n                    System.out.print(ctr + \"\\t\");\n                }\n                System.out.println((System.currentTimeMillis() - start) + \" ms\");\n            }\n        }\n        catch (Exception e)\n        {\n            System.out.println(\n                    \"If you want to run FastScannerSpeedTestOnSocket, you'll need to run FastScannerTestSocketSource first\");\n        }\n    }\n    private InputStreamReader getReader() throws UnknownHostException, IOException, InterruptedException\n    {\n        Socket echoSocket = new Socket(\"127.0.0.1\", FastScannerTestSocketSource.portNumber);\n        InputStream inputStream = echoSocket.getInputStream();\n        InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n        return reader;\n    }\n    @Test\n    public void test1() throws Exception\n    {\n        System.out.println(\"\\nTesting fast CrNlStream\");\n        fastScannerSpeedTest(SocketConnectionFacadeImpl.CRNL_PATTERN);\n    }\n    @Test\n    public void test2() throws Exception\n    {\n        System.out.println(\"\\nTesting fast NlStream\");\n        fastScannerSpeedTest(SocketConnectionFacadeImpl.NL_PATTERN);\n    }\n    private void fastScannerSpeedTest(Pattern pattern) throws Exception\n    {\n        try\n        {\n            for (int i = 10; i-- > 0;)\n            {\n                InputStreamReader reader = getReader();\n                System.out.print(\"Fast \" + i + \":\\t\");\n                FastScanner scanner = FastScannerFactory.getReader(reader, pattern);\n                long start = System.currentTimeMillis();\n                try\n                {\n                    int ctr = 0;\n                    @SuppressWarnings(\"unused\")\n                    String t;\n                    while ((t = scanner.next()) != null)\n                    {\n                        ctr++;\n                    }\n                    System.out.print(ctr + \"\\t\");\n                }\n                catch (NoSuchElementException e)\n                {\n                }\n                System.out.println((System.currentTimeMillis() - start) + \" ms\");\n            }\n        }\n        catch (Exception e)\n        {\n            System.out.println(\n                    \"If you want to run FastScannerSpeedTestOnSocket, you'll need to run FastScannerTestSocketSource first\");\n        }\n    }\n}\n",
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerTestSocketSource.java": "package org.asteriskjava.util.internal.streamreader;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\npublic class FastScannerTestSocketSource\n{\n    final static byte[] bytes = FastScannerRandomTest.generateTestData(100_000_000).getBytes();\n    public static int portNumber = 2048;\n    public static void main(String[] args) throws IOException\n    {\n        while (true)\n        {\n            listen();\n        }\n    }\n    static void listen() throws IOException\n    {\n        System.out.println(\"Waiting for connect on \" + portNumber);\n        try (ServerSocket serverSocket = new ServerSocket(portNumber); Socket clientSocket = serverSocket.accept();)\n        {\n            clientSocket.getOutputStream().write(bytes);\n        }\n    }\n}\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java": [
                37,
                38,
                51,
                171,
                173,
                181
            ],
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScanner.java": [
                1,
                3,
                4,
                6,
                7,
                8,
                10
            ],
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerCrNl.java": [
                1,
                3,
                4,
                6,
                7,
                9,
                10,
                11,
                13,
                15,
                16,
                18,
                19,
                20,
                21,
                24,
                25,
                26,
                27,
                30,
                31,
                33,
                34,
                35,
                36,
                38,
                39,
                41,
                44,
                47,
                50,
                52,
                53,
                54,
                55,
                57,
                58,
                59,
                60,
                61,
                65,
                66,
                67,
                68,
                69,
                70,
                72
            ],
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerFactory.java": [
                1,
                3,
                4,
                5,
                6,
                8,
                9,
                11,
                12,
                13,
                15,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                33,
                34,
                35,
                37,
                39,
                41,
                42,
                43,
                44,
                46,
                47,
                48,
                49,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                64,
                65,
                66,
                67,
                68,
                70,
                71,
                72
            ],
            "src/main/java/org/asteriskjava/util/internal/streamreader/FastScannerNl.java": [
                2,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                14,
                15,
                17,
                18,
                19,
                21,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                32,
                34,
                36,
                38,
                39,
                40,
                44,
                46,
                47,
                48,
                51,
                52,
                53,
                58,
                61,
                62,
                66,
                68,
                71,
                73,
                74,
                75,
                76,
                79,
                80,
                81,
                82,
                83,
                85,
                87,
                88,
                90,
                92,
                93,
                96,
                97,
                98,
                99,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                110,
                112,
                113,
                115,
                116,
                117,
                118,
                119,
                120,
                122,
                123,
                125,
                128,
                131,
                132,
                134,
                135,
                136,
                137,
                141,
                142,
                143,
                144,
                145,
                146,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                185,
                186,
                187,
                188,
                189,
                190,
                192,
                193,
                194,
                195,
                196,
                197,
                199
            ],
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerDeterministicTest.java": [
                1,
                3,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                14,
                15,
                17,
                18,
                20,
                21,
                22,
                23,
                24,
                26,
                27,
                28,
                29,
                30,
                32,
                33,
                35,
                37,
                39,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                51,
                52,
                53,
                55,
                56,
                57,
                58,
                60,
                61,
                63,
                64,
                65,
                67,
                69,
                71,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                81,
                82,
                83,
                84,
                85,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98
            ],
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerRandomTest.java": [
                1,
                3,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                16,
                17,
                19,
                21,
                22,
                23,
                24,
                25,
                26,
                28,
                30,
                31,
                32,
                33,
                35,
                37,
                38,
                40,
                42,
                44,
                45,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                59,
                61,
                63,
                64,
                66,
                67,
                69,
                70,
                72,
                74,
                75,
                77,
                78,
                80,
                82,
                83,
                84,
                85,
                86,
                87,
                89,
                90,
                92,
                93,
                94,
                95,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                117,
                118,
                119,
                120,
                121,
                123,
                125,
                126,
                127,
                128,
                129,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                140,
                142,
                143
            ],
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerSpeedTest.java": [
                1,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                11,
                12,
                14,
                15,
                16,
                17,
                18,
                19,
                21,
                22,
                23,
                25,
                27,
                29,
                30,
                31,
                32,
                34,
                36,
                37,
                38,
                39,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                53,
                54,
                55,
                56,
                57,
                58,
                60,
                61,
                62,
                67,
                68,
                69,
                71,
                72,
                73,
                75,
                76,
                77,
                79,
                81,
                82,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                93,
                94,
                95,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                105
            ],
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerSpeedTestOnSocket.java": [
                1,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                13,
                14,
                16,
                17,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                27,
                28,
                30,
                31,
                32,
                33,
                35,
                37,
                38,
                39,
                40,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                60,
                61,
                63,
                65,
                67,
                68,
                69,
                71,
                72,
                73,
                74,
                75,
                76,
                78,
                79,
                80,
                85,
                86,
                87,
                89,
                90,
                91,
                92,
                93,
                94,
                96,
                97,
                98,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                109,
                110,
                111,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                127
            ],
            "src/test/java/org/asteriskjava/util/internal/streamreader/FastScannerTestSocketSource.java": [
                1,
                3,
                4,
                5,
                7,
                8,
                10,
                11,
                13,
                14,
                16,
                17,
                19,
                20,
                22,
                24,
                25,
                26,
                28,
                29,
                30,
                31,
                32,
                34
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java": "import java.io.BufferedReader;\nimport java.util.Scanner;\n    private Scanner scanner;\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, encoding));\n        this.scanner = new Scanner(reader);\n        this.scanner.useDelimiter(pattern);\n        String line;\n            if (scanner.ioException() != null)\n            {\n                throw scanner.ioException();\n            }\n            if (scanner.ioException() != null)\n            {\n                throw scanner.ioException();\n            }\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/asteriskjava/util/internal/SocketConnectionFacadeImpl.java": [
                19,
                32,
                51,
                171,
                173,
                174,
                181,
                188,
                189,
                190,
                191,
                197,
                198,
                199,
                200
            ]
        }
    },
    {
        "commit": "cbfaf57e",
        "prev_commit": "624ba313",
        "changed_files": [
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java",
            "src/test/java/org/asteriskjava/fastagi/SimpleAgiRequest.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java",
            "src/test/java/org/asteriskjava/fastagi/SimpleAgiRequest.java"
        ],
        "changed_java_files_num": 2,
        "failed_test_list": [],
        "passed_test_list": [
            "AbstractAgiCommandTest",
            "CallerIdTest",
            "ResponseBuilderImplTest",
            "AbstractManagerEventListenerTest",
            "AstUtilTest",
            "CompositeMappingStrategyTest",
            "NewStateEventTest",
            "CdrEventTest",
            "FastScannerDeterministicTest",
            "ChannelReloadEventTest",
            "ResourceBundleMappingStrategyTest",
            "GetDataCommandTest",
            "ScriptEngineMappingStrategyTest",
            "ActionBuilderImplTest",
            "EventBuilderImplTest",
            "AgiReaderImplTest",
            "AsyncAgiEventTest",
            "DefaultAgiServerTest",
            "QueueMemberStateTest",
            "AsteriskChannelImplTest",
            "T38FaxStatusEventTest",
            "BridgeEnterEventComparatorTest",
            "RateLimiterTest",
            "FastScannerRandomTest",
            "ClassNameMappingStrategyTest",
            "HangupCauseTest",
            "AgiReplyImplTest",
            "AsteriskQueueMemberImplTest",
            "ConfigFileParserTest",
            "SkypeChatMessageEventTest",
            "CoreStatusResponseTest",
            "AgiChannelImplTest",
            "AsteriskAgentImplTest",
            "DateUtilTest",
            "RtcpReceivedEventTest",
            "SkypeBuddyStatusEventTest",
            "AgiRequestImplTest",
            "FastScannerSpeedTest",
            "AsteriskVersionTest",
            "AgiWriterImplTest",
            "SipShowPeerResponseTest",
            "ExecCommandTest",
            "ManagerReaderImplTest",
            "ListenerManagerTest",
            "ManagerConnectionImplTest",
            "ManagerWriterImplTest"
        ],
        "tests_cases_num": {
            "AsteriskVersionTest": 4,
            "ConfigFileParserTest": 4,
            "ClassNameMappingStrategyTest": 2,
            "CompositeMappingStrategyTest": 2,
            "DefaultAgiServerTest": 4,
            "ResourceBundleMappingStrategyTest": 3,
            "ScriptEngineMappingStrategyTest": 3,
            "AbstractAgiCommandTest": 6,
            "ExecCommandTest": 5,
            "GetDataCommandTest": 4,
            "AgiChannelImplTest": 3,
            "AgiReaderImplTest": 5,
            "AgiReplyImplTest": 12,
            "AgiRequestImplTest": 24,
            "AgiWriterImplTest": 1,
            "CallerIdTest": 7,
            "HangupCauseTest": 1,
            "QueueMemberStateTest": 2,
            "AsteriskAgentImplTest": 1,
            "AsteriskChannelImplTest": 1,
            "AsteriskQueueMemberImplTest": 1,
            "AbstractManagerEventListenerTest": 2,
            "AsyncAgiEventTest": 2,
            "CdrEventTest": 3,
            "ChannelReloadEventTest": 3,
            "NewStateEventTest": 2,
            "RtcpReceivedEventTest": 5,
            "SkypeBuddyStatusEventTest": 2,
            "SkypeChatMessageEventTest": 1,
            "T38FaxStatusEventTest": 2,
            "ActionBuilderImplTest": 16,
            "EventBuilderImplTest": 35,
            "ManagerConnectionImplTest": 22,
            "ManagerReaderImplTest": 9,
            "ManagerWriterImplTest": 2,
            "ResponseBuilderImplTest": 9,
            "BridgeEnterEventComparatorTest": 17,
            "CoreStatusResponseTest": 2,
            "SipShowPeerResponseTest": 4,
            "RateLimiterTest": 1,
            "ListenerManagerTest": 1,
            "AstUtilTest": 7,
            "DateUtilTest": 2,
            "FastScannerDeterministicTest": 3,
            "FastScannerRandomTest": 2,
            "FastScannerSpeedTest": 3
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+                File[] files = folder.listFiles();\n+                if (files != null)\n+                    for (File actual : files)\n+                    {\n+                        String entryName = actual.getName();\n+                        entryName = entryName.substring(0, entryName.lastIndexOf('.'));\n+                        names.add(entryName);\n+                    }\n+    private AsteriskVersion asteriskVersion = AsteriskVersion.ASTERISK_13;\n",
        "diff_per_file": {
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java": "                File[] files = folder.listFiles();\n                if (files != null)\n                    for (File actual : files)\n                    {\n                        String entryName = actual.getName();\n                        entryName = entryName.substring(0, entryName.lastIndexOf('.'));\n                        names.add(entryName);\n                    }\n",
            "src/test/java/org/asteriskjava/fastagi/SimpleAgiRequest.java": "    private AsteriskVersion asteriskVersion = AsteriskVersion.ASTERISK_13;\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java": [
                365,
                366,
                368,
                369,
                370,
                371,
                372,
                373
            ],
            "src/test/java/org/asteriskjava/fastagi/SimpleAgiRequest.java": [
                31
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java": "                File[] contenuti = folder.listFiles();\n                String entryName;\n                for (File actual : contenuti)\n                    entryName = actual.getName();\n                    entryName = entryName.substring(0, entryName.lastIndexOf('.'));\n                    names.add(entryName);\n",
            "src/test/java/org/asteriskjava/fastagi/SimpleAgiRequest.java": "    private AsteriskVersion asteriskVersion;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java": [
                365,
                366,
                367,
                369,
                370,
                371
            ],
            "src/test/java/org/asteriskjava/fastagi/SimpleAgiRequest.java": [
                31
            ]
        }
    },
    {
        "commit": "18893be7",
        "prev_commit": "b7c35d5b",
        "changed_files": [
            "src/main/java/org/asteriskjava/manager/internal/AbstractBuilder.java",
            "src/main/java/org/asteriskjava/manager/internal/EventBuilderImpl.java",
            "src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/DbGetResponseEvent.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentEventFactory.java",
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/org/asteriskjava/manager/internal/AbstractBuilder.java",
            "src/main/java/org/asteriskjava/manager/internal/EventBuilderImpl.java",
            "src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/DbGetResponseEvent.java",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentEventFactory.java",
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java"
        ],
        "changed_java_files_num": 5,
        "failed_test_list": [],
        "passed_test_list": [
            "AbstractAgiCommandTest",
            "CallerIdTest",
            "ResponseBuilderImplTest",
            "AbstractManagerEventListenerTest",
            "AstUtilTest",
            "CompositeMappingStrategyTest",
            "NewStateEventTest",
            "CdrEventTest",
            "FastScannerDeterministicTest",
            "ChannelReloadEventTest",
            "ResourceBundleMappingStrategyTest",
            "GetDataCommandTest",
            "ScriptEngineMappingStrategyTest",
            "ActionBuilderImplTest",
            "EventBuilderImplTest",
            "AgiReaderImplTest",
            "AsyncAgiEventTest",
            "DefaultAgiServerTest",
            "QueueMemberStateTest",
            "AsteriskChannelImplTest",
            "T38FaxStatusEventTest",
            "BridgeEnterEventComparatorTest",
            "RateLimiterTest",
            "FastScannerRandomTest",
            "ClassNameMappingStrategyTest",
            "HangupCauseTest",
            "AgiReplyImplTest",
            "AsteriskQueueMemberImplTest",
            "ConfigFileParserTest",
            "SkypeChatMessageEventTest",
            "CoreStatusResponseTest",
            "AgiChannelImplTest",
            "AsteriskAgentImplTest",
            "DateUtilTest",
            "RtcpReceivedEventTest",
            "SkypeBuddyStatusEventTest",
            "AgiRequestImplTest",
            "FastScannerSpeedTest",
            "AsteriskVersionTest",
            "AgiWriterImplTest",
            "SipShowPeerResponseTest",
            "ExecCommandTest",
            "ManagerReaderImplTest",
            "ListenerManagerTest",
            "ManagerConnectionImplTest",
            "ManagerWriterImplTest"
        ],
        "tests_cases_num": {
            "AsteriskVersionTest": 4,
            "ConfigFileParserTest": 4,
            "ClassNameMappingStrategyTest": 2,
            "CompositeMappingStrategyTest": 2,
            "DefaultAgiServerTest": 4,
            "ResourceBundleMappingStrategyTest": 3,
            "ScriptEngineMappingStrategyTest": 3,
            "AbstractAgiCommandTest": 6,
            "ExecCommandTest": 5,
            "GetDataCommandTest": 4,
            "AgiChannelImplTest": 3,
            "AgiReaderImplTest": 5,
            "AgiReplyImplTest": 12,
            "AgiRequestImplTest": 24,
            "AgiWriterImplTest": 1,
            "CallerIdTest": 7,
            "HangupCauseTest": 1,
            "QueueMemberStateTest": 2,
            "AsteriskAgentImplTest": 1,
            "AsteriskChannelImplTest": 1,
            "AsteriskQueueMemberImplTest": 1,
            "AbstractManagerEventListenerTest": 2,
            "AsyncAgiEventTest": 2,
            "CdrEventTest": 3,
            "ChannelReloadEventTest": 3,
            "NewStateEventTest": 2,
            "RtcpReceivedEventTest": 5,
            "SkypeBuddyStatusEventTest": 2,
            "SkypeChatMessageEventTest": 1,
            "T38FaxStatusEventTest": 2,
            "ActionBuilderImplTest": 16,
            "EventBuilderImplTest": 35,
            "ManagerConnectionImplTest": 22,
            "ManagerReaderImplTest": 9,
            "ManagerWriterImplTest": 2,
            "ResponseBuilderImplTest": 9,
            "BridgeEnterEventComparatorTest": 17,
            "CoreStatusResponseTest": 2,
            "SipShowPeerResponseTest": 4,
            "RateLimiterTest": 1,
            "ListenerManagerTest": 1,
            "AstUtilTest": 7,
            "DateUtilTest": 2,
            "FastScannerDeterministicTest": 3,
            "FastScannerRandomTest": 2,
            "FastScannerSpeedTest": 3
        },
        "ekstazi_test_list": [],
        "ekstazi_failed_test_list": [],
        "starts_test_list": [],
        "starts_failed_test_list": [],
        "diff_code": "+                    logger.debug(\"Key: \" + entry2.getKey() + \" Value: \" + entry2.getValue());\n+    private final static Set<Class<ManagerEvent>> knownManagerEventClasses = ReflectionUtil\n+            .loadClasses(\"org.asteriskjava.manager.event\", ManagerEvent.class);\n+    public DbGetResponseEvent(final org.asteriskjava.manager.event.DbGetResponseEvent event)\n+    static Hashtable<Class<org.asteriskjava.manager.event.ManagerEvent>, Class<ManagerEvent>> mapEvents = new Hashtable<>();\n+        Set<Class<ManagerEvent>> knownClasses = ReflectionUtil.loadClasses(\"org.asteriskjava.pbx.asterisk.wrap.events\",\n+                ManagerEvent.class);\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        for (Class< ? > known : knownClasses)\n+        {\n+            Class< ? > clazz = null;\n+            try\n+            {\n+                clazz = classLoader.loadClass(\"org.asteriskjava.manager.event\" + \".\" + known.getSimpleName());\n+                if (!Modifier.isAbstract(clazz.getModifiers()))\n+                {\n+                    if (known.getConstructor(clazz) != null)\n+                    {\n+                        if (ResponseEvent.class.isAssignableFrom(known))\n+                        {\n+                            CoherentEventFactory.mapResponses.put(\n+                                    (Class<org.asteriskjava.manager.event.ResponseEvent>) clazz,\n+                                    (Class<ResponseEvent>) known);\n+                            logger.info(\"Response Event Added \" + clazz + \" --> \" + known);\n+                        }\n+                        else\n+                        {\n+                            CoherentEventFactory.mapEvents.put((Class<org.asteriskjava.manager.event.ManagerEvent>) clazz,\n+                                    (Class<ManagerEvent>) known);\n+                            logger.info(\"Manager Event Added \" + clazz + \" --> \" + known);\n+                        }\n+                    }\n+                    else\n+                    {\n+                        logger.warn(\"Skipping class \" + clazz + \" it doesn't have a public constructor with one arg of type \"\n+                                + known);\n+                    }\n+                }\n+                else\n+                {\n+                    logger.info(\"Skipping abstract class \" + clazz);\n+                }\n+            }\n+            catch (ClassNotFoundException e)\n+            {\n+                logger.error(e, e);\n+                throw new RuntimeException(e);\n+            }\n+            catch (NoSuchMethodException e)\n+            {\n+                logger.error(clazz.getCanonicalName() + \" doesn't have an appropriate event constructor\");\n+            }\n+            catch (SecurityException e)\n+            {\n+                logger.error(e, e);\n+            }\n+        }\n+    public static Map<String, Method> getGetters(final Class< ? > clazz)\n+    public static Map<String, Method> getSetters(Class< ? > clazz)\n+            Class< ? > clazz = classLoader.loadClass(s);\n+            Constructor< ? > constructor = clazz.getConstructor();\n+    private static final Log logger = LogFactory.getLog(ReflectionUtil.class);\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Set<Class<T>> loadClasses(String packageName, Class<T> baseClassOrInterface)\n+    {\n+        Set<Class<T>> result = new HashSet<>();\n+        try\n+        {\n+            Set<String> classNames = getClassNamesFromPackage(packageName);\n+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+            for (String className : classNames)\n+            {\n+                try\n+                {\n+                    Class< ? > clazz = classLoader.loadClass(packageName + \".\" + className);\n+                    if (!Modifier.isAbstract(clazz.getModifiers()) && baseClassOrInterface.isAssignableFrom(clazz))\n+                    {\n+                        result.add((Class<T>) clazz);\n+                    }\n+                }\n+                catch (Throwable e)\n+                {\n+                    logger.error(e, e);\n+                }\n+            }\n+            logger.info(\"Loaded \" + result.size());\n+        }\n+        catch (Exception e)\n+        {\n+            logger.error(e, e);\n+        }\n+        return result;\n+    }\n+    private static Set<String> getClassNamesFromPackage(String packageName) throws IOException, URISyntaxException\n+    {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        Enumeration<URL> packageURLs;\n+        Set<String> names = new HashSet<String>();\n+        packageName = packageName.replace(\".\", \"/\");\n+        packageURLs = classLoader.getResources(packageName);\n+        while (packageURLs.hasMoreElements())\n+        {\n+            URL packageURL = packageURLs.nextElement();\n+            if (packageURL.getProtocol().equals(\"jar\"))\n+            {\n+                String jarFileName;\n+                Enumeration<JarEntry> jarEntries;\n+                String entryName;\n+                jarFileName = URLDecoder.decode(packageURL.getFile(), \"UTF-8\");\n+                jarFileName = jarFileName.substring(5, jarFileName.indexOf(\"!\"));\n+                logger.info(\">\" + jarFileName);\n+                try (JarFile jf = new JarFile(jarFileName);)\n+                {\n+                    jarEntries = jf.entries();\n+                    while (jarEntries.hasMoreElements())\n+                    {\n+                        entryName = jarEntries.nextElement().getName();\n+                        if (entryName.startsWith(packageName) && entryName.endsWith(\".class\"))\n+                        {\n+                            entryName = entryName.substring(packageName.length() + 1, entryName.lastIndexOf('.'));\n+                            names.add(entryName);\n+                        }\n+                    }\n+                }\n+            }\n+            else\n+            {\n+                URI uri = new URI(packageURL.toString());\n+                File folder = new File(uri.getPath());\n+                File[] contenuti = folder.listFiles();\n+                String entryName;\n+                for (File actual : contenuti)\n+                {\n+                    entryName = actual.getName();\n+                    entryName = entryName.substring(0, entryName.lastIndexOf('.'));\n+                    names.add(entryName);\n+                }\n+            }\n+        }\n+        Iterator<String> itr = names.iterator();\n+        while (itr.hasNext())\n+        {\n+            String name = itr.next();\n+            if (name.equals(\"package\") || name.endsWith(\".\") || name.length() == 0)\n+            {\n+                itr.remove();\n+            }\n+        }\n+        return names;\n+    }\n",
        "diff_per_file": {
            "src/main/java/org/asteriskjava/manager/internal/AbstractBuilder.java": "                    logger.debug(\"Key: \" + entry2.getKey() + \" Value: \" + entry2.getValue());\n",
            "src/main/java/org/asteriskjava/manager/internal/EventBuilderImpl.java": "import org.asteriskjava.util.ReflectionUtil;\n    private final static Set<Class<ManagerEvent>> knownManagerEventClasses = ReflectionUtil\n            .loadClasses(\"org.asteriskjava.manager.event\", ManagerEvent.class);\n",
            "src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/DbGetResponseEvent.java": "    public DbGetResponseEvent(final org.asteriskjava.manager.event.DbGetResponseEvent event)\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentEventFactory.java": "import java.lang.reflect.Modifier;\nimport java.util.Set;\nimport org.asteriskjava.util.ReflectionUtil;\n@SuppressWarnings({\"unchecked\"})\n    static Hashtable<Class<org.asteriskjava.manager.event.ManagerEvent>, Class<ManagerEvent>> mapEvents = new Hashtable<>();\n        Set<Class<ManagerEvent>> knownClasses = ReflectionUtil.loadClasses(\"org.asteriskjava.pbx.asterisk.wrap.events\",\n                ManagerEvent.class);\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        for (Class< ? > known : knownClasses)\n        {\n            Class< ? > clazz = null;\n            try\n            {\n                clazz = classLoader.loadClass(\"org.asteriskjava.manager.event\" + \".\" + known.getSimpleName());\n                if (!Modifier.isAbstract(clazz.getModifiers()))\n                {\n                    if (known.getConstructor(clazz) != null)\n                    {\n                        if (ResponseEvent.class.isAssignableFrom(known))\n                        {\n                            CoherentEventFactory.mapResponses.put(\n                                    (Class<org.asteriskjava.manager.event.ResponseEvent>) clazz,\n                                    (Class<ResponseEvent>) known);\n                            logger.info(\"Response Event Added \" + clazz + \" --> \" + known);\n                        }\n                        else\n                        {\n                            CoherentEventFactory.mapEvents.put((Class<org.asteriskjava.manager.event.ManagerEvent>) clazz,\n                                    (Class<ManagerEvent>) known);\n                            logger.info(\"Manager Event Added \" + clazz + \" --> \" + known);\n                        }\n                    }\n                    else\n                    {\n                        logger.warn(\"Skipping class \" + clazz + \" it doesn't have a public constructor with one arg of type \"\n                                + known);\n                    }\n                }\n                else\n                {\n                    logger.info(\"Skipping abstract class \" + clazz);\n                }\n            }\n            catch (ClassNotFoundException e)\n            {\n                logger.error(e, e);\n                throw new RuntimeException(e);\n            }\n            catch (NoSuchMethodException e)\n            {\n                logger.error(clazz.getCanonicalName() + \" doesn't have an appropriate event constructor\");\n            }\n            catch (SecurityException e)\n            {\n                logger.error(e, e);\n            }\n        }\n",
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java": "import java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.Modifier;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n    public static Map<String, Method> getGetters(final Class< ? > clazz)\n    public static Map<String, Method> getSetters(Class< ? > clazz)\n            Class< ? > clazz = classLoader.loadClass(s);\n            Constructor< ? > constructor = clazz.getConstructor();\n    private static final Log logger = LogFactory.getLog(ReflectionUtil.class);\n    @SuppressWarnings(\"unchecked\")\n    public static <T> Set<Class<T>> loadClasses(String packageName, Class<T> baseClassOrInterface)\n    {\n        Set<Class<T>> result = new HashSet<>();\n        try\n        {\n            Set<String> classNames = getClassNamesFromPackage(packageName);\n            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n            for (String className : classNames)\n            {\n                try\n                {\n                    Class< ? > clazz = classLoader.loadClass(packageName + \".\" + className);\n                    if (!Modifier.isAbstract(clazz.getModifiers()) && baseClassOrInterface.isAssignableFrom(clazz))\n                    {\n                        result.add((Class<T>) clazz);\n                    }\n                }\n                catch (Throwable e)\n                {\n                    logger.error(e, e);\n                }\n            }\n            logger.info(\"Loaded \" + result.size());\n        }\n        catch (Exception e)\n        {\n            logger.error(e, e);\n        }\n        return result;\n    }\n    private static Set<String> getClassNamesFromPackage(String packageName) throws IOException, URISyntaxException\n    {\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        Enumeration<URL> packageURLs;\n        Set<String> names = new HashSet<String>();\n        packageName = packageName.replace(\".\", \"/\");\n        packageURLs = classLoader.getResources(packageName);\n        while (packageURLs.hasMoreElements())\n        {\n            URL packageURL = packageURLs.nextElement();\n            if (packageURL.getProtocol().equals(\"jar\"))\n            {\n                String jarFileName;\n                Enumeration<JarEntry> jarEntries;\n                String entryName;\n                jarFileName = URLDecoder.decode(packageURL.getFile(), \"UTF-8\");\n                jarFileName = jarFileName.substring(5, jarFileName.indexOf(\"!\"));\n                logger.info(\">\" + jarFileName);\n                try (JarFile jf = new JarFile(jarFileName);)\n                {\n                    jarEntries = jf.entries();\n                    while (jarEntries.hasMoreElements())\n                    {\n                        entryName = jarEntries.nextElement().getName();\n                        if (entryName.startsWith(packageName) && entryName.endsWith(\".class\"))\n                        {\n                            entryName = entryName.substring(packageName.length() + 1, entryName.lastIndexOf('.'));\n                            names.add(entryName);\n                        }\n                    }\n                }\n            }\n            else\n            {\n                URI uri = new URI(packageURL.toString());\n                File folder = new File(uri.getPath());\n                File[] contenuti = folder.listFiles();\n                String entryName;\n                for (File actual : contenuti)\n                {\n                    entryName = actual.getName();\n                    entryName = entryName.substring(0, entryName.lastIndexOf('.'));\n                    names.add(entryName);\n                }\n            }\n        }\n        Iterator<String> itr = names.iterator();\n        while (itr.hasNext())\n        {\n            String name = itr.next();\n            if (name.equals(\"package\") || name.endsWith(\".\") || name.length() == 0)\n            {\n                itr.remove();\n            }\n        }\n        return names;\n    }\n"
        },
        "diff_line_number_list_per_file": {
            "src/main/java/org/asteriskjava/manager/internal/AbstractBuilder.java": [
                82
            ],
            "src/main/java/org/asteriskjava/manager/internal/EventBuilderImpl.java": [
                38,
                54,
                55
            ],
            "src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/DbGetResponseEvent.java": [
                11
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentEventFactory.java": [
                5,
                7,
                17,
                25,
                31,
                40,
                41,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94
            ],
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java": [
                19,
                20,
                24,
                25,
                26,
                27,
                28,
                29,
                31,
                32,
                35,
                36,
                37,
                65,
                112,
                238,
                239,
                266,
                276,
                277,
                278,
                279,
                281,
                282,
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297,
                298,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                308,
                309,
                320,
                321,
                322,
                323,
                324,
                326,
                327,
                329,
                330,
                331,
                332,
                333,
                334,
                336,
                337,
                340,
                341,
                342,
                343,
                344,
                345,
                346,
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                355,
                358,
                359,
                360,
                361,
                362,
                365,
                366,
                367,
                368,
                369,
                370,
                371,
                372,
                373,
                374,
                377,
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                385,
                387,
                388
            ]
        },
        "starts_total_time": 0,
        "ekstazi_total_time": 0,
        "ekstazi_select_time": 0,
        "starts_select_time": 0,
        "deleted_diff_per_file": {
            "src/main/java/org/asteriskjava/manager/internal/AbstractBuilder.java": "                    logger.warn(\"Key: \" + entry2.getKey() + \" Value: \" + entry2.getValue());\n",
            "src/main/java/org/asteriskjava/manager/internal/EventBuilderImpl.java": "import java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n    private final static Set<Class< ? extends ManagerEvent>> knownManagerEventClasses = loadEventClasses();\n    @SuppressWarnings(\"unchecked\")\n    private static Set<Class< ? extends ManagerEvent>> loadEventClasses()\n    {\n        Set<Class< ? extends ManagerEvent>> result = new HashSet<>();\n        try\n        {\n            Set<String> classNames = getClassNamesFromPackage(\"org.asteriskjava.manager.event\");\n            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n            for (String className : classNames)\n            {\n                try\n                {\n                    Class< ? > clazz = classLoader.loadClass(\"org.asteriskjava.manager.event.\" + className);\n                    if (!Modifier.isAbstract(clazz.getModifiers()) && ManagerEvent.class.isAssignableFrom(clazz))\n                    {\n                        result.add((Class< ? extends ManagerEvent>) clazz);\n                    }\n                }\n                catch (Throwable e)\n                {\n                    logger.error(e, e);\n                }\n            }\n            logger.error(\"Loaded \" + result.size());\n        }\n        catch (Exception e)\n        {\n            logger.error(e, e);\n        }\n        return result;\n    }\n    public static Set<String> getClassNamesFromPackage(String packageName) throws IOException, URISyntaxException\n    {\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        Enumeration<URL> packageURLs;\n        Set<String> names = new HashSet<String>();\n        packageName = packageName.replace(\".\", \"/\");\n        packageURLs = classLoader.getResources(packageName);\n        while (packageURLs.hasMoreElements())\n        {\n            URL packageURL = packageURLs.nextElement();\n            if (packageURL.getProtocol().equals(\"jar\"))\n            {\n                String jarFileName;\n                Enumeration<JarEntry> jarEntries;\n                String entryName;\n                jarFileName = URLDecoder.decode(packageURL.getFile(), \"UTF-8\");\n                jarFileName = jarFileName.substring(5, jarFileName.indexOf(\"!\"));\n                System.out.println(\">\" + jarFileName);\n                try (JarFile jf = new JarFile(jarFileName);)\n                {\n                    jarEntries = jf.entries();\n                    while (jarEntries.hasMoreElements())\n                    {\n                        entryName = jarEntries.nextElement().getName();\n                        if (entryName.startsWith(packageName) && entryName.endsWith(\".class\"))\n                        {\n                            entryName = entryName.substring(packageName.length() + 1, entryName.lastIndexOf('.'));\n                            names.add(entryName);\n                        }\n                    }\n                }\n            }\n            else\n            {\n                URI uri = new URI(packageURL.toString());\n                File folder = new File(uri.getPath());\n                File[] contenuti = folder.listFiles();\n                String entryName;\n                for (File actual : contenuti)\n                {\n                    entryName = actual.getName();\n                    entryName = entryName.substring(0, entryName.lastIndexOf('.'));\n                    names.add(entryName);\n                }\n            }\n        }\n        Iterator<String> itr = names.iterator();\n        while (itr.hasNext())\n        {\n            String name = itr.next();\n            if (name.equals(\"package\") || name.endsWith(\".\") || name.length() == 0)\n            {\n                itr.remove();\n            }\n        }\n        return names;\n    }\n",
            "src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/DbGetResponseEvent.java": "    DbGetResponseEvent(final org.asteriskjava.manager.event.DbGetResponseEvent event)\n",
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentEventFactory.java": "import org.asteriskjava.pbx.asterisk.wrap.events.AgentCalledEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.AgentConnectEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.BridgeEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.ConfbridgeListCompleteEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.ConfbridgeListEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.ConnectEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.DialEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.DisconnectEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.DndStateEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.ExtensionStatusEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.HangupEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.LinkEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.MasqueradeEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.MeetMeJoinEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.MeetMeLeaveEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.NewChannelEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.NewStateEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.OriginateResponseEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.ParkedCallEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.PeerEntryEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.PeerStatusEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.PeerlistCompleteEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.QueueCallerLeaveEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.RenameEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.StatusCompleteEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.StatusEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.UnlinkEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.UnparkedCallEvent;\nimport org.asteriskjava.pbx.asterisk.wrap.events.VarSetEvent;\n@SuppressWarnings(\"deprecation\")\n    static Hashtable<Class< ? extends org.asteriskjava.manager.event.ManagerEvent>, Class< ? extends ManagerEvent>> mapEvents = new Hashtable<>();\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.AgentCalledEvent.class, AgentCalledEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.AgentConnectEvent.class, AgentConnectEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.QueueCallerLeaveEvent.class,\n                QueueCallerLeaveEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.BridgeEvent.class, BridgeEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.ConnectEvent.class, ConnectEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.DialEvent.class, DialEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.DisconnectEvent.class, DisconnectEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.DndStateEvent.class, DndStateEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.ExtensionStatusEvent.class,\n                ExtensionStatusEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.HangupEvent.class, HangupEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.LinkEvent.class, LinkEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.MasqueradeEvent.class, MasqueradeEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.MeetMeJoinEvent.class, MeetMeJoinEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.MeetMeLeaveEvent.class, MeetMeLeaveEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.NewChannelEvent.class, NewChannelEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.NewStateEvent.class, NewStateEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.ParkedCallEvent.class, ParkedCallEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.PeerStatusEvent.class, PeerStatusEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.RenameEvent.class, RenameEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.ResponseEvent.class, ResponseEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.UnlinkEvent.class, UnlinkEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.UnparkedCallEvent.class, UnparkedCallEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.VarSetEvent.class, VarSetEvent.class);\n        CoherentEventFactory.mapResponses.put(org.asteriskjava.manager.event.OriginateResponseEvent.class,\n                OriginateResponseEvent.class);\n        CoherentEventFactory.mapResponses.put(org.asteriskjava.manager.event.PeerEntryEvent.class, PeerEntryEvent.class);\n        CoherentEventFactory.mapResponses.put(org.asteriskjava.manager.event.PeerlistCompleteEvent.class,\n                PeerlistCompleteEvent.class);\n        CoherentEventFactory.mapResponses.put(org.asteriskjava.manager.event.StatusCompleteEvent.class,\n                StatusCompleteEvent.class);\n        CoherentEventFactory.mapResponses.put(org.asteriskjava.manager.event.StatusEvent.class, StatusEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.ConfbridgeListEvent.class,\n                ConfbridgeListEvent.class);\n        CoherentEventFactory.mapEvents.put(org.asteriskjava.manager.event.ConfbridgeListCompleteEvent.class,\n                ConfbridgeListCompleteEvent.class);\n",
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java": "    public static Map<String, Method> getGetters(final Class<?> clazz)\n    public static Map<String, Method> getSetters(Class<?> clazz)\n            Class<?> clazz = classLoader.loadClass(s);\n            Constructor<?> constructor = clazz.getConstructor();\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/org/asteriskjava/manager/internal/AbstractBuilder.java": [
                82
            ],
            "src/main/java/org/asteriskjava/manager/internal/EventBuilderImpl.java": [
                19,
                20,
                23,
                24,
                25,
                26,
                29,
                32,
                38,
                39,
                63,
                75,
                76,
                77,
                78,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                107,
                108,
                110,
                111,
                112,
                113,
                114,
                116,
                117,
                119,
                120,
                121,
                122,
                123,
                124,
                126,
                127,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                148,
                149,
                150,
                151,
                152,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                177,
                178
            ],
            "src/main/java/org/asteriskjava/pbx/asterisk/wrap/events/DbGetResponseEvent.java": [
                11
            ],
            "src/main/java/org/asteriskjava/pbx/internal/core/CoherentEventFactory.java": [
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                34,
                35,
                36,
                37,
                38,
                51,
                57,
                70,
                72,
                73,
                74,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                99,
                100,
                101,
                102,
                103,
                105,
                106,
                107,
                109,
                110,
                111,
                112
            ],
            "src/main/java/org/asteriskjava/util/ReflectionUtil.java": [
                50,
                96,
                219,
                220
            ]
        }
    }
]