[
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java"
        ],
        "changed_java_files_num": 2,
        "commit": "f286e759",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "sl sl RuntimeException slice slice slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix epsilonEquals epsilonEquals testSolveSquareVector solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum testDenseArrayCreation Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertEquals testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {},
        "diff_code": "+\t@Override\n+\tpublic void setMultiple(INDArray a, INDArray b) {\n+\t\tif (a instanceof AMatrix) {\n+\t\t\tif (b instanceof AMatrix) {\n+\t\t\t\tsetMultiple((AMatrix)a,(AMatrix)b);\n+\t\t\t\treturn;\n+\t\t\t} else if (b.dimensionality()==0) {\n+\t\t\t\tsetMultiple((AMatrix)a,b.get());\n+\t\t\t} else {\n+\t\t\t\tset((AMatrix)a);\n+\t\t\t\tmultiply(b);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tset(a);\n+\t\t\tmultiply(b);\n+\t\t}\n+\t}\n+\tpublic void setMultiple(AMatrix a, AMatrix b) {\n+\t\tset(a);\n+\t\tmultiply(b);\n+\t}\n+\t\n+\t@Override\n+\tpublic void addMultiple(INDArray src, double factor) {\n+\t\tadd(src.get()*factor);\n+\t}\n+\t\n+\t@Override\n+\tpublic void addPower(INDArray src, double factor) {\n+\t\tadd(Math.pow(src.get(),factor));\n+\t}\n+\t\n+\t@Override\n+\tpublic void setApplyOp(Op op, INDArray a) {\n+\t\tset(op.apply(a.get()));\n+\t}\n+\t\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": [
                635,
                636,
                637,
                638,
                639,
                640,
                641,
                642,
                643,
                644,
                645,
                646,
                647,
                648,
                649,
                650,
                651,
                658,
                659,
                660,
                661
            ],
            "src/main/java/mikera/vectorz/AScalar.java": [
                172,
                173,
                174,
                175,
                177,
                178,
                179,
                180,
                333,
                334,
                335,
                336
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": "\t@Override\n\tpublic void setMultiple(INDArray a, INDArray b) {\n\t\tif (a instanceof AMatrix) {\n\t\t\tif (b instanceof AMatrix) {\n\t\t\t\tsetMultiple((AMatrix)a,(AMatrix)b);\n\t\t\t\treturn;\n\t\t\t} else if (b.dimensionality()==0) {\n\t\t\t\tsetMultiple((AMatrix)a,b.get());\n\t\t\t} else {\n\t\t\t\tset((AMatrix)a);\n\t\t\t\tmultiply(b);\n\t\t\t}\n\t\t} else {\n\t\t\tset(a);\n\t\t\tmultiply(b);\n\t\t}\n\t}\n\tpublic void setMultiple(AMatrix a, AMatrix b) {\n\t\tset(a);\n\t\tmultiply(b);\n\t}\n",
            "src/main/java/mikera/vectorz/AScalar.java": "\t@Override\n\tpublic void addMultiple(INDArray src, double factor) {\n\t\tadd(src.get()*factor);\n\t}\n\t@Override\n\tpublic void addPower(INDArray src, double factor) {\n\t\tadd(Math.pow(src.get(),factor));\n\t}\n\t@Override\n\tpublic void setApplyOp(Op op, INDArray a) {\n\t\tset(op.apply(a.get()));\n\t}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "b0211e72",
        "queries": {
            "src/main/java/mikera/matrixx/AMatrix.java": "IMatrix implements extends AMatrix class abstract public VectorzException IntArrays ErrorMessages DoubleArrays Constants Vector0 MatrixViewVector ADenseArrayVector Vectorz Vector Tools Op2 Op IOperator AVector AVector AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Maths IdentityTranslation AffineMN AAffineTransform transformz transformz transformz Hash randomz ZeroMatrix TransposedMatrix SubMatrixView SparseRowMatrix SparseColumnMatrix MatrixRowView MatrixRowList MatrixRowIterator MatrixElementIterator MatrixColumnView MatrixColumnList MatrixBandView ImmutableMatrix IdentityMatrix AStridedMatrix ARectangularMatrix ADenseArrayMatrix Rank Multiplications Inverse Determinant Definite algo algo algo algo algo Index AIndex indexz indexz SliceArray JoinedArray IDense AbstractArray AbstractArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl ISparse INDArray Arrayz Array arrayz arrayz arrayz arrayz arrayz arrayz arrayz arrayz List Iterator Arrays ArrayList util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/AScalar.java": "isMutable boolean iterator shape shape offsets offsets offsets offsets subArray getSlices sliceCount index dimension \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException position slice slice dimensionality getTransposeView getTranspose dest dest getElements \"Element position must be zero for any scalar\" \"Length must be 0 or 1\" return return return return return return if if if if if length length length length length offset offset offset offset values values pos pos setElements y this this this this this this this invalidIndex invalidIndex invalidIndex invalidIndex IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException new new new new new new new new new new throw throw throw throw throw throw throw throw throw throw x x x x value set set void void void get get get get double double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ EMPTY_LONG_ARRAY SCALAR_LONG_SHAPE EMPTY_INT_ARRAY SCALAR_SHAPE int int int int int int int int int int int int int int int serialVersionUID long long final final final final final final final static static static private private private IScalar implements Object Object Object extends AScalar AScalar AScalar AScalar class abstract abstract abstract public public public public public public public public public public public public public public public public public LongArrays LongArrays IntArrays IntArrays ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages WrappedScalarVector SingleDoubleIterator ImmutableScalar Hash randomz AMatrix matrixx IDense IDense BroadcastScalarArray AbstractArray AbstractArray impl impl impl impl impl impl INDArray INDArray INDArray arrayz arrayz arrayz arrayz List List Iterator Iterator util util util util util DoubleBuffer nio java java java import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 13,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/test/java/mikera/matrixx/TestMatrix.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/test/java/mikera/matrixx/TestMatrix.java"
        ],
        "changed_java_files_num": 3,
        "commit": "b0211e72",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "sl sl RuntimeException slice slice slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix epsilonEquals epsilonEquals testSolveSquareVector solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum testDenseArrayCreation Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertEquals testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {},
        "diff_code": "+\t@Override\n+\tpublic void setElements(double... values) {\n+\t\tint vl=values.length;\n+\t\tif (vl!=1) throw new IllegalArgumentException(\"Wrong number of elements in source array: \"+vl);\n+\t\tset(values[0]);\n+\t}\n+\t\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": [
                291,
                292,
                293,
                294,
                295,
                296
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": "\t@Override\n\tpublic void setElements(double... values) {\n\t\tint vl=values.length;\n\t\tif (vl!=1) throw new IllegalArgumentException(\"Wrong number of elements in source array: \"+vl);\n\t\tset(values[0]);\n\t}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "f113a614",
        "queries": {
            "src/main/java/mikera/vectorz/AScalar.java": "isMutable boolean iterator shape shape offsets offsets offsets offsets subArray getSlices sliceCount index dimension \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException position slice slice dimensionality getTransposeView getTranspose dest dest getElements \"Element position must be zero for any scalar\" \"Length must be 0 or 1\" return return return return return return if if if if if length length length length length offset offset offset offset values values pos pos setElements y this this this this this this this invalidIndex invalidIndex invalidIndex invalidIndex IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException new new new new new new new new new new throw throw throw throw throw throw throw throw throw throw x x x x value set set void void void get get get get double double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ EMPTY_LONG_ARRAY SCALAR_LONG_SHAPE EMPTY_INT_ARRAY SCALAR_SHAPE int int int int int int int int int int int int int int int serialVersionUID long long final final final final final final final static static static private private private IScalar implements Object Object Object extends AScalar AScalar AScalar AScalar class abstract abstract abstract public public public public public public public public public public public public public public public public public LongArrays LongArrays IntArrays IntArrays ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages WrappedScalarVector SingleDoubleIterator ImmutableScalar Hash randomz AMatrix matrixx IDense IDense BroadcastScalarArray AbstractArray AbstractArray impl impl impl impl impl impl INDArray INDArray INDArray arrayz arrayz arrayz arrayz List List Iterator Iterator util util util util util DoubleBuffer nio java java java import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 13,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java",
            "src/test/java/mikera/matrixx/TestMatrices.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java",
            "src/test/java/mikera/matrixx/TestMatrices.java"
        ],
        "changed_java_files_num": 4,
        "commit": "f113a614",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "sl sl RuntimeException slice slice slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix epsilonEquals epsilonEquals testSolveSquareVector solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum testDenseArrayCreation Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertEquals testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java": "\t\tint dims=this.dimensions;\n\t\tif (dims!=a.dimensions) throw new IllegalArgumentException(ErrorMessages.incompatibleShapes(this,a));\n\t\tdouble[] data=this.getLeadingDiagonal().toDoubleArray();\n\t\ta.getLeadingDiagonal().multiplyTo(data, 0);\n\t\treturn DiagonalMatrix.wrap(data);\n\t\t} else if (a instanceof Matrix) {\n\t\t\treturn innerProduct((Matrix) a);\n\t\t}\n",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": "\t\tif (!(a instanceof DiagonalMatrix)) return a.innerProduct(this);\n\t\tif (!(dimensions==a.dimensions)) throw new IllegalArgumentException(ErrorMessages.mismatch(this, a));\n",
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java": "\t\treturn wrap(v.toDoubleArray());\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java": [
                231,
                232,
                233,
                234,
                235,
                242,
                243,
                244
            ],
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": [
                250,
                251
            ],
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java": [
                50
            ]
        },
        "diff_code": "+\t\tAMatrix result=clone();\n+\t\tresult.getLeadingDiagonal().multiply(a.getLeadingDiagonal());\n+\t\treturn result;\n+\t\t} \n+\t\n+\t\tif (dimensions!=a.dimensions) throw new IllegalArgumentException(ErrorMessages.mismatch(this, a));\n+\t\treturn wrap(v.clone());\n+\t\n+\t@Test public void g_DiagonalMatrix() {\t\n+\t\tdoGenericTests(DiagonalMatrix.create(Vectorz.createUniformRandomVector(5)));\n+\t}\n+\t\n+\t@Test public void g_WrappedDiagonalMatrix() {\t\n+\t\tdoGenericTests(WrappedDiagonalMatrix.wrap(Vector2.of(1,2).join(Vector.of(3,4))));\n+\t}\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java": [
                231,
                232,
                233,
                240
            ],
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": [
                250
            ],
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java": [
                50
            ],
            "src/test/java/mikera/matrixx/TestMatrices.java": [
                18,
                34,
                41,
                755,
                756,
                757,
                759,
                760,
                761
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java": "\t\tAMatrix result=clone();\n\t\tresult.getLeadingDiagonal().multiply(a.getLeadingDiagonal());\n\t\treturn result;\n\t\t} \n",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": "\t\tif (dimensions!=a.dimensions) throw new IllegalArgumentException(ErrorMessages.mismatch(this, a));\n",
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java": "\t\treturn wrap(v.clone());\n",
            "src/test/java/mikera/matrixx/TestMatrices.java": "import mikera.matrixx.impl.DiagonalMatrix;\nimport mikera.matrixx.impl.WrappedDiagonalMatrix;\nimport mikera.vectorz.Vector2;\n\t@Test public void g_DiagonalMatrix() {\t\n\t\tdoGenericTests(DiagonalMatrix.create(Vectorz.createUniformRandomVector(5)));\n\t}\n\t@Test public void g_WrappedDiagonalMatrix() {\t\n\t\tdoGenericTests(WrappedDiagonalMatrix.wrap(Vector2.of(1,2).join(Vector.of(3,4))));\n\t}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "433d6039",
        "queries": {
            "src/main/java/mikera/matrixx/impl/ADiagonalMatrix.java": "col copyColumnTo data create DiagonalMatrix DiagonalMatrix incompatibleShapes IllegalArgumentException a a a a a a addCopy addCopy offset offset addToArray addToArray addToArray fill destOffset destOffset destOffset destOffset destOffset dest dest dest dest dest dest row row row copyRowTo elementSquaredSum elementSquaredSum elementSum elementSum min elementMin elementMin max Math Math ldv ldv ldv ldv ldv ldv elementMax elementMax checkSquare nonZeroCount nonZeroCount nonZeroCount rank unsafeGetDiagonalValue unsafeGetDiagonalValue for det det det determinant double double double double double double double double double double double getNonZeroBand bandLength createZeroVector invalidBand else else else else band band band band band band getBand lowerBandwidthLimit upperBandwidthLimit cols rows isSameShape isSameShape invalidIndex j j j j i i i i i i i i checkIndex ARectangularMatrix ARectangularMatrix mismatch mismatch IndexOutOfBoundsException IndexOutOfBoundsException IndexOutOfBoundsException IndexOutOfBoundsException new new new new new throw throw throw throw throw columnCount columnCount columnCount rowCount rowCount rowCount rowCount if if if if if if if if if dims dims dims dims dims dims m m m m m m m m m m m m m m m m m checkSameShape checkSameShape void void void void void void isFullyMutable isFullyMutable isMutable isLowerTriangular isUpperTriangular isRectangularDiagonal isDiagonal isDiagonal isSymmetric isBoolean isBoolean getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal isZero isZero true true true true true true isSquare boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return nonZeroBand Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ this this this this this this this this dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions int int int int int int int int int int int int int int int int int int int int protected protected protected protected protected serialVersionUID long long final final final final final final static private ASingleBandMatrix extends ADiagonalMatrix ADiagonalMatrix class abstract abstract public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public VectorzException ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages SingleElementVector ASingleElementVector ADenseArrayVector Vectorz Vectorz Vector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Matrix AMatrix AMatrix AMatrix AMatrix AMatrix Arrays Arrays util util util java import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": "\"dimension mismatch: \" validate validate exactClone result result result mismatch innerProduct innerProduct innerProduct innerProduct unsafeGetDiagonalValue getDiagonalValue reciprocal inverse determinant clone isZero isZero isBoolean isBoolean false isIdentity arraymultiply getArrayOffset offset offset \"Wrong length vector: \" instanceof instanceof transformInPlace transformInPlace transformInPlace for for for ddata ddata sdata sdata wrongDestLength wrongSourceLength cc cc rowCount rc rc rc rc dest dest dest dest dest dest source source source source transform i i i i i i i i i i i i i i i i i i i i i i i rowDotProduct copyOf copyOf newData newData newData newData newData newData multiplyCopy factor factor factor factor multiply multiply multiply multiply isFullyMutable true true isMutable boolean boolean boolean boolean boolean unsafeSet unsafeSet else this this this this this notFullyMutable UnsupportedOperationException value value value value value unsafeGet unsafeGet unsafeGet checkIndex column column column column column column column column column row row row row row row row row row row row row row get nonZeroCount nonZeroCount elementProduct elementProduct diagonalProduct elementSum elementSum elementSum trace set set checkSameShape a a a a a a a a a a a setSparse c c addSparse addSparse void void void void void void void void void Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal \"Source is not a diagonal matrix!\" IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException throw throw throw throw throw throw throw isDiagonal if if if if if if if if if if if if if m m m toDoubleArray toDoubleArray v v v v v v v v v v v v v v arraycopy System create create create create create create return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return dims dims createDimensions getArray getArray getArray getArray length length length length length length length length values values values values values values values values values values wrap wrap wrap wrap wrap wrap wrap new new new new new new new new new new new new new new super super super super super dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions int int int int int int int int int int int int int int int int int int int int lead lead lead lead lead lead lead lead lead lead lead lead lead data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data double double double double double double double double double double double double double double double double double double double double double double double double double double serialVersionUID long long static static static static static static static private private private private ADiagonalMatrix ADiagonalMatrix ADiagonalMatrix ADiagonalMatrix extends DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix class final final final final public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public VectorzException VectorzException ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays util util util ADenseArrayVector ADenseArrayVector ADenseArrayVector ADenseArrayVector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix import import import import import import import import impl impl matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/impl/WrappedDiagonalMatrix.java": "\"dimension mismatch: \" validate validate exactClone exactClone newLead newLead newLead mismatch instanceof innerProduct innerProduct innerProduct innerProduct unsafeGetDiagonalValue getDiagonalValue reciprocalCopy null inverse determinant isZero isZero isBoolean isBoolean elementsEqual isIdentity transformInPlace transformInPlace setInnerProduct dest dest source source transform i i i i i i i rowDotProduct multiplyCopy multiplyCopy factor factor factor factor multiply multiply multiply multiply multiply isFullyMutable isFullyMutable isMutable isMutable boolean boolean boolean boolean boolean unsafeSet unsafeSet unsafeSet else this this this this this notFullyMutable notFullyMutable UnsupportedOperationException UnsupportedOperationException value value value value value unsafeGet unsafeGet unsafeGet unsafeGet unsafeGet checkIndex checkIndex column column column column column column column column column column column column row row row row row row row row row row row row row row row row get get get nonZeroCount nonZeroCount elementProduct elementProduct elementProduct diagonalProduct elementSum elementSum elementSum trace set set checkSameShape a a a a a a a a a a a setSparse c c addSparse addSparse void void void void void void void void void Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ toDoubleArray getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal \"Source is not a diagonal matrix!\" IllegalArgumentException IllegalArgumentException throw throw throw throw throw isDiagonal if if if if if if if if if if m m m clone clone clone v v v v v v v v arraycopy System data data data data data data data create create create create new new new new new new new new new new return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return dims dims createDimensions leadingDiagonal leadingDiagonal leadingDiagonal wrap wrap wrap wrap wrap wrap wrap wrap wrap length length length length values values values values values values double double double double double double double double double double double double double double double double double double double createLength super super super super super dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions int int int int int int int int int int int int int int lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead lead serialVersionUID long long static static static static static static static private private private private ADiagonalMatrix ADiagonalMatrix ADiagonalMatrix ADiagonalMatrix extends WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix WrappedDiagonalMatrix class final final final public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public VectorzException VectorzException ErrorMessages ErrorMessages ErrorMessages ErrorMessages util util ADenseArrayVector ADenseArrayVector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix import import import import import import import impl impl matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/matrixx/TestMatrices.java": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 13,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/Tools.java",
            "src/main/java/mikera/vectorz/util/DoubleArrays.java",
            "src/test/java/mikera/arrayz/TestArrays.java",
            "src/test/java/mikera/matrixx/algo/TestLinear.java",
            "src/test/java/mikera/vectorz/TestQuaternions.java"
        ],
        "changed_files_num": 9,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/Tools.java",
            "src/main/java/mikera/vectorz/util/DoubleArrays.java",
            "src/test/java/mikera/arrayz/TestArrays.java",
            "src/test/java/mikera/matrixx/algo/TestLinear.java",
            "src/test/java/mikera/vectorz/TestQuaternions.java"
        ],
        "changed_java_files_num": 9,
        "commit": "a55d9673",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum testDenseArrayCreation Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t\t\treturn (get()==a.get());\n",
            "src/main/java/mikera/vectorz/AScalar.java": "\t\treturn (o.dimensionality()==0)&&(o.get()==get());\n\t\treturn data[offset]==get();\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\t\tif (unsafeGet(i) != v.unsafeGet(i))\n",
            "src/main/java/mikera/vectorz/util/DoubleArrays.java": "\t\t\tif (as[i+aOffset]!=bs[i+bOffset]) return false;\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\t\t\tassertEquals(b.slice(i),c.slice(i));\n\t\t\t\tassertEquals(b, c);\n",
            "src/test/java/mikera/matrixx/algo/TestLinear.java": "        assertEquals(Vector.of(0,0.5),x);\n",
            "src/test/java/mikera/vectorz/TestQuaternions.java": "\t\tassertEquals(Vector4.of(0,0,0,1),Quaternions.invert(Vector4.of(0,0,0,1)));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                827
            ],
            "src/main/java/mikera/vectorz/AScalar.java": [
                457,
                462
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                379
            ],
            "src/main/java/mikera/vectorz/util/DoubleArrays.java": [
                536
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                475,
                483
            ],
            "src/test/java/mikera/matrixx/algo/TestLinear.java": [
                32
            ],
            "src/test/java/mikera/vectorz/TestQuaternions.java": [
                11
            ]
        },
        "diff_code": "+\t\t\treturn Tools.equals(get(),a.get());\n+\t@Override\n+\tpublic int compareTo(INDArray a) {\n+\t\treturn Double.compare(get(), a.get());\n+\t}\n+\t\n+\t\treturn (o.dimensionality()==0)&&(Tools.equals(o.get(),get()));\n+\t\treturn Tools.equals(data[offset],get());\n+\t\t\tif (!Tools.equals(unsafeGet(i),v.unsafeGet(i)))\n+\t\n+\tpublic static boolean equals(double a, double b) {\n+\t\treturn Double.compare(a, b)==0;\n+\t}\n+\t\t\tif (!Tools.equals(as[i+aOffset],bs[i+bOffset])) return false;\n+\t\t\t\tassertTrue(b.slice(i).epsilonEquals(c.slice(i),0.0));\n+\t\t\t\tassertTrue(b.epsilonEquals(c,0.0));\n+        assertTrue(Vector.of(0,0.5).epsilonEquals(x));\n+\t\tassertTrue(Vector4.of(0,0,0,1).epsilonEquals(Quaternions.invert(Vector4.of(0,0,0,1)),0.0));\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                827
            ],
            "src/main/java/mikera/vectorz/AScalar.java": [
                455,
                456,
                457,
                458,
                462,
                467
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                379
            ],
            "src/main/java/mikera/vectorz/Tools.java": [
                175,
                176,
                177
            ],
            "src/main/java/mikera/vectorz/util/DoubleArrays.java": [
                536
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                475,
                483
            ],
            "src/test/java/mikera/matrixx/algo/TestLinear.java": [
                32
            ],
            "src/test/java/mikera/vectorz/TestQuaternions.java": [
                11
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t\t\treturn Tools.equals(get(),a.get());\n",
            "src/main/java/mikera/vectorz/AScalar.java": "\t@Override\n\tpublic int compareTo(INDArray a) {\n\t\treturn Double.compare(get(), a.get());\n\t}\n\t\treturn (o.dimensionality()==0)&&(Tools.equals(o.get(),get()));\n\t\treturn Tools.equals(data[offset],get());\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\t\tif (!Tools.equals(unsafeGet(i),v.unsafeGet(i)))\n",
            "src/main/java/mikera/vectorz/Tools.java": "\tpublic static boolean equals(double a, double b) {\n\t\treturn Double.compare(a, b)==0;\n\t}\n",
            "src/main/java/mikera/vectorz/util/DoubleArrays.java": "\t\t\tif (!Tools.equals(as[i+aOffset],bs[i+bOffset])) return false;\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\t\t\tassertTrue(b.slice(i).epsilonEquals(c.slice(i),0.0));\n\t\t\t\tassertTrue(b.epsilonEquals(c,0.0));\n",
            "src/test/java/mikera/matrixx/algo/TestLinear.java": "        assertTrue(Vector.of(0,0.5).epsilonEquals(x));\n",
            "src/test/java/mikera/vectorz/TestQuaternions.java": "\t\tassertTrue(Vector4.of(0,0,0,1).epsilonEquals(Quaternions.invert(Vector4.of(0,0,0,1)),0.0));\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "709eac8d",
        "queries": {
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "case case switch innerProduct innerProduct value value value fill fill isView ensureMutable isZero isZero l2 l2 l2 l1 l1 l1 l1 si si si si si si s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 s1 ss ss ss ss ss ss ss ss pos pos pos pos pos pos pos elementCount elementCount offset offset offset offset offset values values values values values values values setElements setElements setElements setElements setElements setElements setElements join isSameShape isElementConstrained isElementConstrained result result result result result result result result result result result result init init reduce reduce reduce reduce reduce applyOpCopy divideCopy clone clone clone clone r r r r r r r r r multiplyCopy multiplyCopy multiplyCopy d d d d d d d multiply multiply multiply multiply rc rc apply apply set set set b b b b b b b b op op op op op op op op op op op op op op op op op applyOp applyOp applyOp applyOp applyOp applyOp applyOp applyOp applyOp void void void void void void void void isFullyMutable isFullyMutable isFullyMutable isMutable isMutable IDense isDense instanceof instanceof this this this isSparse isBoolean isBoolean isBoolean true true true true true true true slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice s s s s s s s s sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sc sc sc sc sc sc sc sc sc sc sc asVector asVector asVector asVector asVector else else else else else false false false false false false false false false false if if if if if if if if if if if if if if if if if if if if if if if dims dims dims dims dims dims dims dims dims dims dims dims epsilon epsilon epsilon epsilon TEST_EPSILON a a a a a a a a a a a a a a a a epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean copyOf getLongShape sh sh sh dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality getShapeClone dim dim getShape getShape getShape getShape getShape getShape getData toArray ix ix ix ix ix ix for for for for for for for for for for for for for for for for for for for new new ixs ixs ixs length length length length length length n n n n n n n n n n n n n n n n n n n n n n n n xs xs xs y y x x j toInt toInt toInt toInt toInt toInt return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int get get get get get get get get get get get get get get get get get get get get get double double double double double double double double double double double double double double double double double double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ serialVersionUID long long long long long long long final final static private Iterable implements T T AbstractArray class abstract abstract abstract abstract public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public VectorzException LongArrays LongArrays IntArrays ErrorMessages DoubleArrays Constants SingleDoubleIterator Vectorz Vectorz Vector Tools Tools Tools Tools Tools Tools Tools Tools Tools Scalar Ops Op2 Op2 Op2 Op2 Op2 Op Op Op IOperator IOperator AVector AVector AVector AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Maths SparseRowMatrix Matrixx Matrix AMatrix matrixx matrixx matrixx matrixx Index Index AIndex AIndex indexz indexz ISparse ISparse INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray Arrayz Array List Iterator Arrays ArrayList util util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import impl impl impl arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/AScalar.java": "isMutable boolean iterator shape shape offsets offsets offsets offsets subArray getSlices sliceCount index dimension \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException position slice slice dimensionality getTransposeView getTranspose dest dest getElements \"Element position must be zero for any scalar\" \"Length must be 0 or 1\" return return return return return return if if if if if length length length length length offset offset offset offset values values pos pos setElements y this this this this this this this invalidIndex invalidIndex invalidIndex invalidIndex IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException new new new new new new new new new new throw throw throw throw throw throw throw throw throw throw x x x x value set set void void void get get get get double double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ EMPTY_LONG_ARRAY SCALAR_LONG_SHAPE EMPTY_INT_ARRAY SCALAR_SHAPE int int int int int int int int int int int int int int int serialVersionUID long long final final final final final final final static static static private private private IScalar implements Object Object Object extends AScalar AScalar AScalar AScalar class abstract abstract abstract public public public public public public public public public public public public public public public public public LongArrays LongArrays IntArrays IntArrays ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages WrappedScalarVector SingleDoubleIterator ImmutableScalar Hash randomz AMatrix matrixx IDense IDense BroadcastScalarArray AbstractArray AbstractArray impl impl impl impl impl impl INDArray INDArray INDArray arrayz arrayz arrayz arrayz List List Iterator Iterator util util util util util DoubleBuffer nio java java java import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/AVector.java": "IVector implements Double extends AVector class abstract public \"serial\" SuppressWarnings @ VectorzException IntArrays ErrorMessages DoubleArrays Constants Logistic ops WrappedSubVector VectorIterator VectorIndexScalar Vector0 SparseIndexedVector ListWrapper JoinedVector IndexedSubVector IndexedElementVisitor ImmutableVector ISparseVector ArraySubVector ASparseVector ASizedVector ADenseArrayVector Maths Hash randomz RowMatrix BroadcastVectorMatrix Matrixx Matrix AMatrix matrixx matrixx matrixx matrixx matrixx Index AIndex indexz indexz SliceArray AbstractArray AbstractArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl ISparse INDArray Arrayz arrayz arrayz arrayz arrayz arrayz List Iterator Arrays ArrayList util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/Tools.java": "isBoolean compare equals true false diff diff diff tolerance tolerance tolerance TEST_EPSILON Vectorz b b b b b b a a a a a a epsilonEquals epsilonEquals epsilonEquals boolean boolean boolean boolean \"Cannot convert to double: \" toDouble toDouble toDouble round Math n n n \"Out of range when converting to int\" r r r \"Cannot convert to int: \" \"Cannot convert to int: \" IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException throw throw throw throw get get AScalar AScalar AScalar AScalar doubleValue doubleValue doubleValue doubleValue Long Long else else else else else else Integer Integer Number Number Number Number Number Number instanceof instanceof instanceof instanceof instanceof instanceof instanceof if if if if if if if if if if object object object object object object object object object object object object object object object object object object toInt toInt toInt toInt toInt toInt toInt toInt toInt toInt next hasNext while result result result T T T T T add add item item for new new new new new new list list list iter iter iter iter iter Iterable toList toList E E E E E E l l l long long long doubleToLongBits Double Double Double Double Double d d d d d d d d d d d d d d d d d d d d d d double double double double double double double double double double double double double double double return return return return return return return return return return return return return return return return return return return return return return return value value hashCode hashCode hashCode hashCode int int int int int int int int int int int int int toString toString toString o o Object Object Object debugBreak void static static static static static static static static static static static static static static static static static static private Tools Tools class final public public public public public public public public public public public public public public public public public public public List List Iterator Iterator ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList util util util java java java import import import vectorz mikera package ",
            "src/main/java/mikera/vectorz/util/DoubleArrays.java": "clone copyOf arraycopy arraycopy System System nas nas nas nas nas len len len position position position position position position insert elementsEqual isZero isZero isZero isBoolean isBoolean false false false false false false false false false n n n n n n n true true true true true true true true true true true bs bs bs bs bs bs bs bs bs bs as as as as as as as as as as equals equals equals equals boolean boolean boolean boolean boolean boolean boolean boolean negate negate sqrt sqrt log log log log exp exp exp exp val val val val val val val val val val val val val val val val val val val val constant constant constant constant scaleAdd scaleAdd reciprocal reciprocal else else max max max max max max min min min min min min clamp clamp aStride aStride aStride aStride bStride bStride bStride bStride bStride bStride bStride bval bval bOffset bOffset bOffset bOffset bOffset bOffset bOffset bOffset bOffset bOffset bOffset bOffset bOffset bOffset b b b b b b b b b aOffset aOffset aOffset aOffset aOffset aOffset aOffset aOffset aOffset aOffset aOffset aOffset aOffset a a a a a a a a a dotProduct dotProduct dotProduct dotProduct dotProduct dotProduct arraydivide arraymultiply sub sub src2Offset src2Offset src2 src2 src1Offset src1Offset src1 src1 addProduct srcStride srcStride srcStride srcStride destOffset destOffset destOffset destOffset destOffset destOffset destOffset destOffset destOffset destOffset factor factor factor factor factor factor factor factor factor factor srcOffset srcOffset srcOffset srcOffset srcOffset srcOffset srcOffset srcOffset srcOffset srcOffset srcOffset srcOffset addMultiple addMultiple add add add add add divide signum signum signum signum logisticFunction logisticFunction logistic logistic tanh tanh tanh tanh ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds ds square square src src src src src src src src src src src src src src src src src dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest value value value value value value value value value value value value value value value value value value multiply multiply multiply void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void continue nonZeroCount nonZeroCount elementAbsPowSum pow pow pow pow pow pow exponent exponent exponent exponent exponent exponent exponent exponent elementPowSum x x x x x x x x x x x x x elementSquaredSum elementSquaredSum elementSquaredSum elementSquaredSum \"Can't get max abs index for length 0 array\" elementMaxAbsIndex \"Can't get min index for length 0 array\" elementMinIndex ind ind ind ind ind ind ind ind ind \"Can't get max index for length 0 array\" IllegalArgumentException IllegalArgumentException IllegalArgumentException throw throw throw elementMaxIndex abs abs abs abs abs abs Math Math Math Math Math Math Math Math Math Math Math Math Math Math Math Math Math elementMaxAbs elementMaxAbs elementMaxAbs elementMax elementMax elementMax if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if v v v v v v v v v v v v v v v v v v v v v v v v MAX_VALUE MAX_VALUE Double Double elementMin elementMin elementMin elementProduct stride stride stride stride stride stride stride offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data elementSum elementSum elementSum new new new new new EMPTY double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static private DoubleArrays DoubleArrays class final final final final final final final final final final final final public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public Logistic Logistic Logistic ops IndexedElementVisitor impl Tools Tools Tools Op2 import import import import util vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/arrayz/TestArrays.java": "RuntimeException slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/matrixx/algo/TestLinear.java": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/vectorz/TestQuaternions.java": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 13,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/AMatrix.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/AMatrix.java"
        ],
        "changed_java_files_num": 1,
        "commit": "9584bbd7",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "sl sl RuntimeException slice slice slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix epsilonEquals epsilonEquals testSolveSquareVector solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum testDenseArrayCreation Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertEquals testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": "import mikera.matrixx.impl.DenseColumnMatrix;\n        AMatrix Q = DenseColumnMatrix.wrap(this.rowCount(), this.columnCount(), this.getTransposeView().toDoubleArray());\n        for( int i = 0; i < Q.columnCount(); i++ ) {\n            AVector a = Q.getColumn(i);\n            for( int j = i+1; j < Q.columnCount(); j++ ) {\n                double val = a.innerProduct(Q.getColumn(j)).get();\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": [
                26,
                347,
                348,
                349,
                351,
                352
            ]
        },
        "diff_code": "+\t    int n=rowCount();\n+        List<AVector> cols=getColumns();\n+\t    for( int i = 0; i < n; i++ ) {\n+            AVector a = cols.get(i);\n+            for( int j = i+1; j < n; j++ ) {\n+                double val = a.dotProduct(cols.get(j));\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": [
                345,
                347,
                348,
                349,
                351,
                352
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": "\t    int n=rowCount();\n        List<AVector> cols=getColumns();\n\t    for( int i = 0; i < n; i++ ) {\n            AVector a = cols.get(i);\n            for( int j = i+1; j < n; j++ ) {\n                double val = a.dotProduct(cols.get(j));\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "53763c4d",
        "queries": {
            "src/main/java/mikera/matrixx/AMatrix.java": "IMatrix implements extends AMatrix class abstract public VectorzException IntArrays ErrorMessages DoubleArrays Constants Vector0 MatrixViewVector ADenseArrayVector Vectorz Vector Tools Op2 Op IOperator AVector AVector AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Maths IdentityTranslation AffineMN AAffineTransform transformz transformz transformz Hash randomz ZeroMatrix TransposedMatrix SubMatrixView SparseRowMatrix SparseColumnMatrix MatrixRowView MatrixRowList MatrixRowIterator MatrixElementIterator MatrixColumnView MatrixColumnList MatrixBandView ImmutableMatrix IdentityMatrix AStridedMatrix ARectangularMatrix ADenseArrayMatrix Rank Multiplications Inverse Determinant Definite algo algo algo algo algo Index indexz SliceArray JoinedArray IDense AbstractArray AbstractArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl ISparse INDArray Arrayz Array arrayz arrayz arrayz arrayz arrayz arrayz arrayz arrayz List Iterator Arrays ArrayList util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 24,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 13,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java",
            "src/test/java/mikera/arrayz/TestArrays.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java",
            "src/test/java/mikera/arrayz/TestArrays.java"
        ],
        "changed_java_files_num": 5,
        "commit": "53763c4d",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "sl sl RuntimeException slice slice slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix epsilonEquals epsilonEquals testSolveSquareVector solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum testDenseArrayCreation Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertEquals testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/arrayz/INDArray.java": "\t@Deprecated\n",
            "src/main/java/mikera/matrixx/AMatrix.java": "\t\tthrow new UnsupportedOperationException(\"Can't set matrix to array: \"+a.getClass() +\" with shape: \"+Arrays.toString(a.getShape()));\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\t    case 0: setApplyOp(op,a.get());\n\t\t\tcase 1: setApplyOp(op,a.asVector());\n",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "\t\tint[] ixs=sv.nonSparseIndex().data;\n\t\tint ii=0;\n\t\twhile (ixs[ii]<offset) ii++;\n\t\tint ind=ixs[ii];\n\t\tfor (int i=0; i<length; i++) {\n\t\t\tint di=destOffset+i*stride;\n\t\t\tif (ind==(offset+i)) {\n\t\t\t\tdestData[di]=svs.unsafeGet(ii);\n\t\t\t\tii++;\n\t\t\t\tind=(ii<ixs.length)?ixs[ii]:0; // set to 0 if no more indexes to access\n\t\t\t} else {\n\t\t\t\tdestData[di]=0.0;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/INDArray.java": [
                556
            ],
            "src/main/java/mikera/matrixx/AMatrix.java": [
                576
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                2681,
                2682
            ],
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": [
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103
            ]
        },
        "diff_code": "+\t\tsuper.set(a);\n+\t\t    case 0: setApplyOp(op,a.get()); return;\n+\t\t\tcase 1: setApplyOp(op,a.asVector()); return;\n+\t\tif (svs.length==0) {\n+\t\t\tfor (int i=0; i<length; i++) {\n+\t\t\t\tdestData[destOffset+i*stride]=0.0;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tint[] ixs=sv.nonSparseIndex().data;\n+\t\t\tint ii=0;\n+\t\t\twhile (ixs[ii]<offset) ii++;\n+\t\t\tint ind=ixs[ii];\n+\t\t\tfor (int i=0; i<length; i++) {\n+\t\t\t\tint di=destOffset+i*stride;\n+\t\t\t\tif (ind==(offset+i)) {\n+\t\t\t\t\tdestData[di]=svs.unsafeGet(ii);\n+\t\t\t\t\tii++;\n+\t\t\t\t\tind=(ii<ixs.length)?ixs[ii]:0; // set to 0 if no more indexes to access\n+\t\t\t\t} else {\n+\t\t\t\t\tdestData[di]=0.0;\n+\t\t\t\t}\n+\t\t\n+\t\tfor (Op op : TestOps.ALL_OPS) {\n+\t\t\tif (op.isStochastic()) continue;\n+\t\t\tINDArray r=a.exactClone().ensureMutable();\n+\t\t\tr.applyOp(op);\n+\t\t\tif (r.hasUncountable()) continue;\n+\t\t\t\n+\t\t\tassertEquals(r,a.applyOpCopy(op));\n+\t\t\t\n+\t\t\tINDArray tmp=r.copy();\n+\t\t\tr.fill(Double.NaN);\n+\t\t\tr.setApplyOp(op, a);\n+\t\t\tassertEquals(tmp,r);\n+\t\t}\n+\t\t\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": [
                576
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                2681,
                2682
            ],
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": [
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                413,
                414,
                415,
                416,
                417,
                419,
                421,
                422,
                423,
                424,
                425
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/AMatrix.java": "\t\tsuper.set(a);\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\t    case 0: setApplyOp(op,a.get()); return;\n\t\t\tcase 1: setApplyOp(op,a.asVector()); return;\n",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "\t\tif (svs.length==0) {\n\t\t\tfor (int i=0; i<length; i++) {\n\t\t\t\tdestData[destOffset+i*stride]=0.0;\n\t\t\t}\n\t\t} else {\n\t\t\tint[] ixs=sv.nonSparseIndex().data;\n\t\t\tint ii=0;\n\t\t\twhile (ixs[ii]<offset) ii++;\n\t\t\tint ind=ixs[ii];\n\t\t\tfor (int i=0; i<length; i++) {\n\t\t\t\tint di=destOffset+i*stride;\n\t\t\t\tif (ind==(offset+i)) {\n\t\t\t\t\tdestData[di]=svs.unsafeGet(ii);\n\t\t\t\t\tii++;\n\t\t\t\t\tind=(ii<ixs.length)?ixs[ii]:0; // set to 0 if no more indexes to access\n\t\t\t\t} else {\n\t\t\t\t\tdestData[di]=0.0;\n\t\t\t\t}\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\tfor (Op op : TestOps.ALL_OPS) {\n\t\t\tif (op.isStochastic()) continue;\n\t\t\tINDArray r=a.exactClone().ensureMutable();\n\t\t\tr.applyOp(op);\n\t\t\tif (r.hasUncountable()) continue;\n\t\t\tassertEquals(r,a.applyOpCopy(op));\n\t\t\tINDArray tmp=r.copy();\n\t\t\tr.fill(Double.NaN);\n\t\t\tr.setApplyOp(op, a);\n\t\t\tassertEquals(tmp,r);\n\t\t}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "305aacd2",
        "queries": {
            "src/main/java/mikera/matrixx/AMatrix.java": "IMatrix implements extends AMatrix class abstract public VectorzException IntArrays ErrorMessages DoubleArrays Constants Vector0 MatrixViewVector ADenseArrayVector Vectorz Vector Tools Op2 Op IOperator AVector AVector AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Maths IdentityTranslation AffineMN AAffineTransform transformz transformz transformz Hash randomz ZeroMatrix TransposedMatrix SubMatrixView SparseRowMatrix SparseColumnMatrix MatrixRowView MatrixRowList MatrixRowIterator MatrixElementIterator MatrixColumnView MatrixColumnList MatrixBandView ImmutableMatrix IdentityMatrix DenseColumnMatrix AStridedMatrix ARectangularMatrix ADenseArrayMatrix Rank Multiplications Inverse Determinant Definite algo algo algo algo algo Index indexz SliceArray JoinedArray IDense AbstractArray AbstractArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl ISparse INDArray Arrayz Array arrayz arrayz arrayz arrayz arrayz arrayz arrayz arrayz List Iterator Arrays ArrayList util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/AVector.java": "Comparable IVector implements Double extends AVector AVector class abstract public \"serial\" SuppressWarnings @ VectorzException IntArrays ErrorMessages DoubleArrays Constants Logistic ops WrappedSubVector VectorIterator VectorIndexScalar Vector0 SparseIndexedVector ListWrapper JoinedVector IndexedSubVector IndexedElementVisitor ImmutableVector ISparseVector ArraySubVector ASparseVector ASizedVector ADenseArrayVector Maths Hash randomz RowMatrix BroadcastVectorMatrix Matrixx Matrix AMatrix matrixx matrixx matrixx matrixx matrixx Index indexz SliceArray AbstractArray AbstractArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl ISparse INDArray Arrayz arrayz arrayz arrayz arrayz arrayz List Iterator Arrays ArrayList util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "notYetImplemented new throw precision roundToZero includesIndex boolean visit unsafeGet v v v v v get i i i k k k k k for vs vs return return return if if cnt cnt cnt ix ix ix elementVisitor elementVisitor IndexedElementVisitor visitNonZero double double double nonSparseIndex nonSparseIndex nonSparseValues nonSparseValues Override Override Override nonSparseElementCount super length length length int int int int int int protected ISparseVector implements ASizedVector extends ASparseVector ASparseVector ASparseVector class abstract abstract abstract abstract abstract public public public public public public public \"serial\" SuppressWarnings @ @ @ @ VectorzException VectorzException ErrorMessages ErrorMessages Vectorz Vector Op2 AVector AVector AVector AMatrix matrixx Index Index Index indexz List Arrays util util util util java java import import import import import import import import import import impl vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/arrayz/TestArrays.java": "sl sl RuntimeException slice slice slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 24,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 13,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/arrayz/Array.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java",
            "src/main/java/mikera/matrixx/Matrixx.java",
            "src/test/java/mikera/arrayz/TestArrays.java"
        ],
        "changed_files_num": 5,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/Array.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java",
            "src/main/java/mikera/matrixx/Matrixx.java",
            "src/test/java/mikera/arrayz/TestArrays.java"
        ],
        "changed_java_files_num": 5,
        "commit": "2398244f",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/arrayz/Array.java": "\t\treturn new Array(shape.length, shape, DoubleArrays.createStorageArray(shape));\n",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t\treturn JoinedArray.join(this,a,0);\t\t\n\t\tint n=dimensionality();\n",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": "\tpublic static JoinedArray join(INDArray a, INDArray b, int dim) {\n\t@Override\n\tpublic INDArray slice(int dimension, int index) {\n\t\tif (this.dimension==dimension) {\n\t\t\treturn (index<split)?left.slice(dimension,index):right.slice(dimension,index-split);\t\t\t\n\t\t} else if (dimension==0) {\n\t\t\treturn slice(index);\n\t\t} else {\n\t\t\tint nd= (dimension<this.dimension)?dimension:dimension-1;\n\t\t\treturn left.slice(dimension,index).join(right.slice(dimension,index),nd);\t\t\t\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/Matrixx.java": "\t\tif (o instanceof AMatrix) {\n\t\t\treturn (AMatrix) o;\n\t\t} else if (o instanceof AVector) {\n\t\t\treturn ColumnMatrix.wrap((AVector) o);\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\tint n=a.dimensionality();\n\t\tif (n==0) return;\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tassertEquals(a,a.rotateView(i, 1).rotateView(i, size-1));\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/Array.java": [
                107
            ],
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                1383,
                1390
            ],
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": [
                31,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103
            ],
            "src/main/java/mikera/matrixx/Matrixx.java": [
                78,
                79,
                80,
                81
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                104,
                105,
                107,
                110
            ]
        },
        "diff_code": "+\t\treturn new Array(shape.length, shape.clone(), DoubleArrays.createStorageArray(shape));\n+\t\t\tif (a.sliceCount()!=sc) return false;\n+\t\t\tif (sc==0) return true;\n+\t\tif (nslices==0) return Array.newArray(shape);\n+\t\treturn this.join(a,0);\t\t\n+\t\tint n=dimensionality();\n+\tpublic static INDArray join(INDArray a, INDArray b, int dim) {\n+\t\tif (a.getShape(dim)==0) return b;\n+\t\tif (b.getShape(dim)==0) return a;\n+\t@Override\n+\tpublic INDArray slice(int dimension, int index) {\n+\t\tif (this.dimension==dimension) {\n+\t\t\treturn (index<split)?left.slice(dimension,index):right.slice(dimension,index-split);\t\t\t\n+\t\t} else if (dimension==0) {\n+\t\t\treturn slice(index);\n+\t\t} else {\n+\t\t\tint nd= (dimension<this.dimension)?dimension:dimension-1;\n+\t\t\treturn left.slice(dimension,index).join(right.slice(dimension,index),nd);\t\t\t\n+\t\t}\n+\t}\n+\t\n+\t\n+\tpublic static AMatrix toMatrix(INDArray a) {\n+\t\tint dims=a.dimensionality();\n+\t\tif (dims==0) return Matrix.wrap(1, 1, new double[]{a.get()});\n+\t\t\n+\t\tif (dims==1) {\n+\t\t\tif (a instanceof AVector) return ColumnMatrix.wrap(((AVector)a).clone());\n+\t\t\treturn ColumnMatrix.wrap(a.toVector());\n+\t\t}\n+\t\tif (dims==2) return Matrix.create(a);\n+\t\tthrow new UnsupportedOperationException(\"Can't convert to matrix: \"\n+\t\t\t\t+ a.getClass() + \" with shape \" +a.getShape());\n+\t}\n+\t\tif (o instanceof INDArray) {\n+\t\t\treturn toMatrix((INDArray)o);\n+\t\tint dims=a.dimensionality();\n+\t\tif (dims==0) return;\n+\t\tfor (int i=0; i<dims; i++) {\n+\t\t\t\n+\t\t\tINDArray r1=a.rotateView(i, 1);\n+\t\t\tINDArray r2=r1.rotateView(i, size-1);\n+\t\t\tassertEquals(a,r2);\n+\t\ttestEmptyArray(a);\n+\tprivate void testEmptyArray(INDArray a) {\n+\t\tif (a.elementCount()>0) return;\n+\t\t\n+\t\ttry {\n+\t\t\ta.elementMax();\n+\t\t\tfail(\"Should not be able to get max value of an empty array!\");\n+\t\t} catch (Throwable t) {\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\ta.elementMin();\n+\t\t\tfail(\"Should not be able to get min value of an empty array!\");\n+\t\t} catch (Throwable t) {\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void g_EmptyArray() {\n+\t\tINDArray empty = Array.newArray(0,3);\n+\t\ttestArray(empty);\n+\t}\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/Array.java": [
                107
            ],
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                841,
                868,
                1368,
                1386,
                1397
            ],
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": [
                31,
                40,
                41,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91
            ],
            "src/main/java/mikera/matrixx/Matrixx.java": [
                70,
                71,
                72,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                93,
                94
            ],
            "src/test/java/mikera/arrayz/TestArrays.java": [
                104,
                105,
                107,
                111,
                112,
                113,
                939,
                965,
                966,
                968,
                969,
                970,
                971,
                973,
                975,
                976,
                977,
                978,
                980,
                981,
                1008,
                1009,
                1010,
                1011,
                1012
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/arrayz/Array.java": "\t\treturn new Array(shape.length, shape.clone(), DoubleArrays.createStorageArray(shape));\n",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t\t\tif (a.sliceCount()!=sc) return false;\n\t\t\tif (sc==0) return true;\n\t\tif (nslices==0) return Array.newArray(shape);\n\t\treturn this.join(a,0);\t\t\n\t\tint n=dimensionality();\n",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": "\tpublic static INDArray join(INDArray a, INDArray b, int dim) {\n\t\tif (a.getShape(dim)==0) return b;\n\t\tif (b.getShape(dim)==0) return a;\n\t@Override\n\tpublic INDArray slice(int dimension, int index) {\n\t\tif (this.dimension==dimension) {\n\t\t\treturn (index<split)?left.slice(dimension,index):right.slice(dimension,index-split);\t\t\t\n\t\t} else if (dimension==0) {\n\t\t\treturn slice(index);\n\t\t} else {\n\t\t\tint nd= (dimension<this.dimension)?dimension:dimension-1;\n\t\t\treturn left.slice(dimension,index).join(right.slice(dimension,index),nd);\t\t\t\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/Matrixx.java": "\tpublic static AMatrix toMatrix(INDArray a) {\n\t\tint dims=a.dimensionality();\n\t\tif (dims==0) return Matrix.wrap(1, 1, new double[]{a.get()});\n\t\tif (dims==1) {\n\t\t\tif (a instanceof AVector) return ColumnMatrix.wrap(((AVector)a).clone());\n\t\t\treturn ColumnMatrix.wrap(a.toVector());\n\t\t}\n\t\tif (dims==2) return Matrix.create(a);\n\t\tthrow new UnsupportedOperationException(\"Can't convert to matrix: \"\n\t\t\t\t+ a.getClass() + \" with shape \" +a.getShape());\n\t}\n\t\tif (o instanceof INDArray) {\n\t\t\treturn toMatrix((INDArray)o);\n",
            "src/test/java/mikera/arrayz/TestArrays.java": "\t\tint dims=a.dimensionality();\n\t\tif (dims==0) return;\n\t\tfor (int i=0; i<dims; i++) {\n\t\t\tINDArray r1=a.rotateView(i, 1);\n\t\t\tINDArray r2=r1.rotateView(i, size-1);\n\t\t\tassertEquals(a,r2);\n\t\ttestEmptyArray(a);\n\tprivate void testEmptyArray(INDArray a) {\n\t\tif (a.elementCount()>0) return;\n\t\ttry {\n\t\t\ta.elementMax();\n\t\t\tfail(\"Should not be able to get max value of an empty array!\");\n\t\t} catch (Throwable t) {\n\t\t}\n\t\ttry {\n\t\t\ta.elementMin();\n\t\t\tfail(\"Should not be able to get min value of an empty array!\");\n\t\t} catch (Throwable t) {\n\t\t}\n\t}\n\t@Test\n\tpublic void g_EmptyArray() {\n\t\tINDArray empty = Array.newArray(0,3);\n\t\ttestArray(empty);\n\t}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "6afc6863",
        "queries": {
            "src/main/java/mikera/arrayz/Array.java": "invalidIndex invalidIndex offsets offsets offsets offsets subArray reverse reverse NDArray getTransposeView getTransposeView getTranspose removeIndex removeIndex offset offset wrapStrided wrapStrided wrapStrided else checkShape Arrayz Arrayz index index index index index index majorSlice majorSlice slice slice slice toVector asVector value value set get i i i i i for ix ix ix indexes indexes indexes indexes indexes indexes getIndex getIndex getIndex dim dim getStride getStride getStride copyIntsToLongs lshape lshape lshape getLongShape invalidDimension IndexOutOfBoundsException dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension checkDimension void void protected protected Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ toDoubleArray dimensionality dimensionality a a a a INDArray INDArray INDArray INDArray INDArray INDArray create create createStorageArray clone newArray m m m getArray getArray getShape getShape getShape v v v return return return return return return return return return return return return return return return return return return return \"Data array does not have correct number of elements, expected: \" IllegalArgumentException IllegalArgumentException IllegalArgumentException throw throw throw throw if if if if if if if ec ec ec wrap wrap wrap wrap wrap wrap calcStrides calcStrides length length length length length length new new new new new new new new new new new arrayProduct arrayProduct n n n n n this this this this this this this this this this this this super super shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape dims dims dims dims dims dims data data data data data data data data data data data data data data data data data data data data data double double double double double double double double strides strides strides strides strides strides strides strides strides strides strides dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int serialVersionUID long long long long long static static static static static static private private private private private private private private implements extends Array Array Array Array Array Array Array Array Array Array Array Array Array Array Array class final final final final final final public public public public public public public public public public public public public public public public public public VectorzException IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays ErrorMessages ErrorMessages ErrorMessages ErrorMessages DoubleArrays DoubleArrays StridedElementIterator ArrayIndexScalar ArrayIndexScalar Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Tools Scalar Op2 Op IOperator AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Matrix Matrix matrixx Index indexz ImmutableArray IStridedArray IStridedArray IDenseArray IDenseArray BaseShapedArray BaseShapedArray impl impl impl impl impl impl List Iterator ArrayList util util util util util util util DoubleBuffer nio java java java java import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "case case switch innerProduct innerProduct value value value fill fill isView ensureMutable isZero isZero l2 l2 l2 l1 l1 l1 l1 si si si si si si s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 s1 ss ss ss ss ss ss ss ss pos pos pos pos pos pos pos elementCount elementCount offset offset offset offset offset values values values values values values values setElements setElements setElements setElements setElements setElements setElements join isSameShape isElementConstrained isElementConstrained result result result result result result result result result result result result init init reduce reduce reduce reduce reduce applyOpCopy divideCopy clone clone clone clone r r r r r r r r r multiplyCopy multiplyCopy multiplyCopy d d d d d d d multiply multiply multiply multiply rc rc apply apply set set set b b b b b b b b op op op op op op op op op op op op op op op op op applyOp applyOp applyOp applyOp applyOp applyOp applyOp applyOp applyOp void void void void void void void void isFullyMutable isFullyMutable isFullyMutable isMutable isMutable IDense isDense instanceof instanceof this this this isSparse isBoolean isBoolean isBoolean true true true true true true true slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice s s s s s s s s sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sc sc sc sc sc sc sc sc sc sc sc asVector asVector asVector asVector asVector else else else else else false false false false false false false false false false if if if if if if if if if if if if if if if if if if if if if if if dims dims dims dims dims dims dims dims dims dims dims dims epsilon epsilon epsilon epsilon TEST_EPSILON a a a a a a a a a a a a a a a a epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean copyOf getLongShape sh sh sh dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality getShapeClone dim dim getShape getShape getShape getShape getShape getShape getData toArray ix ix ix ix ix ix for for for for for for for for for for for for for for for for for for for new new ixs ixs ixs length length length length length length n n n n n n n n n n n n n n n n n n n n n n n n xs xs xs y y x x j toInt toInt toInt toInt toInt toInt return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int get get get get get get get get get get get get get get get get get get get get get double double double double double double double double double double double double double double double double double double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ serialVersionUID long long long long long long long final final static private Iterable implements T T AbstractArray class abstract abstract abstract abstract public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public VectorzException LongArrays LongArrays IntArrays ErrorMessages DoubleArrays Constants SingleDoubleIterator Vectorz Vectorz Vector Tools Tools Tools Tools Tools Tools Tools Tools Tools Scalar Ops Op2 Op2 Op2 Op2 Op2 Op Op Op IOperator IOperator AVector AVector AVector AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Maths SparseRowMatrix Matrixx Matrix AMatrix matrixx matrixx matrixx matrixx Index Index AIndex AIndex indexz indexz ISparse ISparse INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray Arrayz Array List Iterator Arrays ArrayList util util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import impl impl impl arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": "y y y y y y y y y y sliceCount sliceCount sliceCount x x x x x x x x x x x x x x x x x getClass \"0d get not supported on \" \"Inconsistent shape along split dimension\" Error validate validate exactClone exactClone exactClone op op op applyOp applyOp applyOp true isView boolean invalidComponent IndexOutOfBoundsException IndexOutOfBoundsException IndexOutOfBoundsException IndexOutOfBoundsException case case switch k k k getComponent componentCount nd nd index index index index index index index checkShape majorSlice majorSlice majorSlice majorSlice majorSlice majorSlice majorSlice slice slice slice slice slice slice slice slice slice slice slice value value value set set set void void void clone clone else else else else else else else else else di di di di invalidIndex invalidIndex invalidIndex invalidIndex invalidIndex length length indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes get get get get get get get get get get get get double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ return return return return return return return return return return return return return return return return return return return return return i i i i i i for incompatibleShapes incompatibleShapes IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException new new new new new new new new new new new new new throw throw throw throw throw throw throw throw throw throw if if if if if if if if if if if if if if if if if if if dimensionality dimensionality dimensionality dimensionality n n n b b b b b b b b a a a a a a a a join join getShape getShape getShape getShape getShape getShape getShape shape shape shape this this this this this this this this this this this this getShapeClone super super dim dim dim dim dim dim dim split split split split split split split split split split split split split split split split dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension int int int int int int int int int int int int int int int int int int int right right right right right right right right right right right right right right right right right right left left left left left left left left left left left left left left left left left left serialVersionUID long final final final final final static static private private BaseShapedArray extends JoinedArray JoinedArray JoinedArray JoinedArray JoinedArray class public public public public public public public public public public public public public public public ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages util Op Op vectorz vectorz INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray Arrayz Arrayz import import import import impl arrayz arrayz arrayz mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/Matrixx.java": "sliceCount sliceCount nextDouble nextDouble void void set result result result IMatrix setRow setRow setRow setRow firstRow firstRow firstRow size size \"Too few rows in matrix\" extractUpperTriangular j j j j j j j j j j j j j j j j j j r r r r r r \"Too few columns in matrix\" extractLowerTriangular inverse createInverse data data data data data data data data data copyTo min n n source source source createFromVector Matrix11 createRandomMatrix createRandomMatrix fillRandomValues fillRandomValues fillRandomValues fillRandomValues fillRandomValues fillRandomValues createSquareMatrix createSquareMatrix createSquareMatrix createRandomSquareMatrix createRandomSquareMatrix create2DRotationMatrix Matrix22 Matrix22 Matrix22 createZAxisRotationMatrix createYAxisRotationMatrix createXAxisRotationMatrix unsafeGet unsafeGet unsafeGet unsafeGet unsafeGet \"Rotation matrix requires a 3d axis vector\" sin sa sa sa sa sa sa sa s s s s w w w w w w w w w w w w u u u u u u u u u u u u cos ca ca ca ca ca ca ca ca ca ca sqrt Math Math Math Math d d d d z z z z z z y y y y y y x x x x x x angle angle angle angle angle angle angle angle angle angle angle angle angle angle angle axis axis axis axis createRotationMatrix createRotationMatrix createRotationMatrix createRotationMatrix createRotationMatrix createRotationMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 setElements getLeadingDiagonal diagonalValues diagonalValues diagonalValues diagonalValues diagonalValues createDiagonalMatrix createDiagonalMatrix scalingFactors scalingFactors scalingFactors createScalarMatrix im im im im im im im im im factor factor factor factor factor createScaleMatrix createScaleMatrix columns columns columns columns columns columns columns columns columns columns columns columns columns columns columns columns columns columns columns columns columns columns createImmutableZeroMatrix asVector asVector asVector slice incompatibleShape getColumn cols cols cols toDoubleArray toDoubleArray replaceRow replaceRow sm sm sm \"Length of indexes array must match length of weights array\" IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException weights weights weights indexes indexes indexes colIterator colIterator createSparseColumns createSparseColumns sparseClone sparseClone sparseClone createZeroVector isZero isZero null v v v v v v v v v v v v v v v v v v v v v v v v v v v hasNext while add add vecList vecList vecList vecList length length length length length length length length length length length len len next next v0 v0 v0 vecIterator vecIterator vecIterator vecIterator createSparseArray createSparseArray createSparseArray iterator rowIterator rowIterator rowIterator rowIterator rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows createSparseRows createSparseRows createSparseRows createSparseRows createSparseRows columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc createSparse createSparse createSparse createSparse createSparse createFromVectors createFromVectors createFromVectors toList al al Iterable Iterable Iterable else else o o o o o o Object Object \"unchecked\" SuppressWarnings @ getShape getShape getShape \" with shape \" getClass getClass \"Can't convert to matrix: \" \"Can't convert to matrix: \" UnsupportedOperationException UnsupportedOperationException throw throw throw throw throw throw throw toVector clone clone instanceof instanceof instanceof get get get get get double double double double double double double double double double double double double double double double double double double double wrap wrap wrap wrap wrap wrap wrap wrap Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix if if if if if if if if if if if if if if if if if if if if if if if if dimensionality dimensionality dims dims dims dims a a a a a a a a a a a a a a a a a a a a a a a toMatrix toMatrix toMatrix unsafeSet unsafeSet unsafeSet unsafeSet unsafeSet unsafeSet unsafeSet i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i for for for for for for for for for for for for for for for for for newMatrix newMatrix newMatrix newMatrix newMatrix newMatrix newMatrix newMatrix newMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m createMutableIdentityMatrix create create create create create create create create create create create create create create create create create create create create create create createImmutableIdentityMatrix createImmutableIdentityMatrix return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int createIdentityMatrix createIdentityMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix new new new new new new new new new new new new new new new new new new new rand rand rand rand rand rand rand rand SPARSE_ELEMENT_THRESHOLD SPARSE_ELEMENT_THRESHOLD long long final final static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static private private private Matrixx Matrixx Matrixx class public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public Parsers Parser Parseable parser parser parser edn edn edn bpsm bpsm bpsm us us us VectorzException VectorzException ErrorMessages ErrorMessages SparseIndexedVector SparseIndexedVector Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Tools Tools AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix ZeroMatrix ZeroMatrix ZeroMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix ScalarMatrix ScalarMatrix IdentityMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix ColumnMatrix ColumnMatrix AStridedMatrix ADiagonalMatrix ADiagonalMatrix ADiagonalMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl Index Index indexz INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray arrayz Random Random Random Random Random Random List List List List Iterator Iterator Iterator Iterator Iterator Arrays ArrayList ArrayList ArrayList ArrayList util util util util util util util java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/arrayz/TestArrays.java": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 12,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java",
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java",
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java"
        ],
        "changed_java_files_num": 3,
        "commit": "f34a3165",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java": "\t\tif (vdata.length==0) return 0.0;\n",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "\tpublic double dotProduct(AVector v) {\n\t\tcheckSameLength(v);\n\t\tdouble result=0.0;\n\t\tIndex ni=nonSparseIndex();\n\t\tfor (int i=0; i<ni.length(); i++) {\n\t\t\tint ii=ni.get(i);\n\t\t\tresult+=unsafeGet(ii)*v.unsafeGet(ii);\n\t\t}\t\t\n\t\treturn result;\n\t}\n",
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java": "\t\treturn value*v.get(index);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java": [
                135
            ],
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": [
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169
            ],
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java": [
                295
            ]
        },
        "diff_code": "+\t\t\n+\t\tint vNonSparse=v.nonSparseElementCount();\n+\t\tif (vNonSparse==0) return 0.0; // zero vector\n+\t\tif (vNonSparse==1) { // single non-saprse element\n+\t\t\tif (v instanceof ASingleElementVector) {\n+\t\t\t\tASingleElementVector av=(ASingleElementVector)v;\n+\t\t\t\tint ix=av.index(); // non-sparse index\n+\t\t\t\treturn av.value()*unsafeGet(ix);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\tpublic abstract double dotProduct(AVector v);\n+\t\treturn value*v.unsafeGet(index);\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java": [
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142
            ],
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": [
                160
            ],
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java": [
                295
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java": "\t\tint vNonSparse=v.nonSparseElementCount();\n\t\tif (vNonSparse==0) return 0.0; // zero vector\n\t\tif (vNonSparse==1) { // single non-saprse element\n\t\t\tif (v instanceof ASingleElementVector) {\n\t\t\t\tASingleElementVector av=(ASingleElementVector)v;\n\t\t\t\tint ix=av.index(); // non-sparse index\n\t\t\t\treturn av.value()*unsafeGet(ix);\n\t\t\t}\n\t\t}\n",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "\tpublic abstract double dotProduct(AVector v);\n",
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java": "\t\treturn value*v.unsafeGet(index);\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "d16a9a14",
        "queries": {
            "src/main/java/mikera/vectorz/impl/ASparseIndexedVector.java": "a innerProduct stride stride j j j j j j j j j j result result result result result result ixs ixs ixs ixs this this tdata tdata tdata tdata tdata tdata offset offset offset offset dotProduct dotProduct nonZeroCount nonZeroCount elementSquaredSum elementSquaredSum unsafeGet unsafeSet factor factor multiply void elementSum elementSum true false if for for for for di di seekPosition seekPosition si si index index index end end start start start isRangeZero isZero isZero indexPosition i i i i i i i i i i i includesIndex boolean boolean boolean Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ data data data data data data data data data data data return return return return return return return return return return internalIndexArray internalIndex internalIndex internalIndex internalIndex internalIndex internalIndex internalData internalData internalData internalData internalData internalData internalData internalData internalData double double double double double double double double double double double double double double super length length length length length length length int int int int int int int int int int int int int int int int int serialVersionUID long long final static private ASparseVector extends ASparseIndexedVector ASparseIndexedVector class abstract abstract abstract public public public public public public public public public public public public VectorzException IntArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays AVector AVector AMatrix AMatrix matrixx Index Index Index indexz Arrays util util util util java import import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/impl/ASparseVector.java": "notYetImplemented new throw precision roundToZero includesIndex boolean visit unsafeGet v v v v v get i i i k k k k k for vs vs return return return if if cnt cnt cnt ix ix ix elementVisitor elementVisitor IndexedElementVisitor visitNonZero double double double nonSparseIndex nonSparseIndex nonSparseValues nonSparseValues Override Override Override nonSparseElementCount super length length length int int int int int int protected ISparseVector implements ASizedVector extends ASparseVector ASparseVector ASparseVector class abstract abstract abstract abstract abstract public public public public public public public \"serial\" SuppressWarnings @ @ @ @ VectorzException VectorzException ErrorMessages ErrorMessages Vectorz Vector Op2 AVector AVector AVector AMatrix matrixx Index Index Index indexz List Arrays util util util util java java import import import import import import import import import import impl vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/impl/SingleElementVector.java": "protected dotProduct dotProduct dotProduct abs elementAbsPowSum pow pow p p p p elementPowSum isInfinite isNaN Double Double hasUncountable ASparseVector add includesIndex EMPTY_INT_ARRAY nonZeroIndices visit elementVisitor elementVisitor IndexedElementVisitor visitNonZero nonSparseIndex nonSparseValues nonSparseElementCount equals for for data data data data data data data data equalsArray of of of sparseClone SparseIndexedVector SparseIndexedVector exactClone getRow innerProduct d d multiplyCopy multiplyCopy null instanceof a a a a a tryEfficientJoin ZeroVector ZeroVector INSTANCE Vector0 checkRange subVector ZERO ImmutableScalar invalidIndex wrap VectorIndexScalar slice factor factor addMultipleToArray stride stride stride stride arrayOffset arrayOffset arrayOffset arrayOffset array array array array array array offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset addToArray addToArray v v v v v v v v v v v isStochastic applyOpCopy applyOpCopy applyOpCopy result result result result else else apply apply apply apply reduceZeros reduceZeros reduceZeros reduceZeros reduceZeros init init init init init init op op op op op op op op op op op op op op op reduce reduce immutable immutable UnsupportedOperationException UnsupportedOperationException set void void void void void unsafeGet unsafeGet unsafeGet IndexOutOfBoundsException IndexOutOfBoundsException get false false false false false false isFullyMutable elementSquaredSum min elementMin max Math Math Math Math Math elementMax elementProduct elementSum magnitude index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index index true true true length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length start start start isRangeZero isRangeZero isRangeZero isZero boolean boolean boolean boolean boolean boolean boolean Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return len len len len i i i i i i i i i i i i i i i i i i i i i i i i i val val create create create create create create create static \"Invalid non-zero component index: \" \"SingleElementVEctor must have >= 1 dimensions\" IllegalArgumentException IllegalArgumentException new new new new new new new new new new throw throw throw throw throw throw if if if if if if if if if if if if if if if if if if if if if if if if super super super this this this this this this this this dimensions dimensions dimensions dimensions dimensions dimensions componentIndex componentIndex componentIndex componentIndex componentIndex componentIndex componentIndex int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double ASingleElementVector extends SingleElementVector SingleElementVector SingleElementVector SingleElementVector SingleElementVector SingleElementVector SingleElementVector SingleElementVector SingleElementVector SingleElementVector SingleElementVector class final final final public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public \"serial\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ IntArrays IntArrays ErrorMessages ErrorMessages ErrorMessages ErrorMessages util util Vector1 Vector1 Op2 Op2 Op2 Op Op AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AScalar AScalar AMatrix AMatrix matrixx Index Index Index Index indexz import import import import import import import import import impl vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java",
            "src/main/java/mikera/vectorz/Vectorz.java",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java",
            "src/test/java/mikera/arrayz/TestBigSparse.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java",
            "src/main/java/mikera/vectorz/Vectorz.java",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java",
            "src/test/java/mikera/arrayz/TestBigSparse.java"
        ],
        "changed_java_files_num": 4,
        "commit": "d16a9a14",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java": "\t\treturn innerProduct(SparseRowMatrix.create(a));\n",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": "\t\tASparseIndexedVector r = SparseIndexedVector.createLength(cc);\n\t\t\tr.addMultiple(row, value);\n\t\treturn r;\n\t\tASparseIndexedVector r = SparseIndexedVector.createLength(cc);\n\t\tfor (int i = 0; i < cc; i++) {\n\t\t\tr.unsafeSet(i, this.dotProduct((ASparseVector) m.getColumn(i)));\n\t\treturn r;\n\t\tAVector r = SparseIndexedVector.createLength(cc);\n\t\t\tr.unsafeSet(i, this.dotProduct(m.getColumn(i)));\n\t\treturn r;\n",
            "src/test/java/mikera/arrayz/TestBigSparse.java": "\t\tm.innerProduct(m.getTranspose());\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java": [
                438
            ],
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": [
                280,
                296,
                298,
                305,
                306,
                307,
                309,
                323,
                325,
                327
            ],
            "src/test/java/mikera/arrayz/TestBigSparse.java": [
                98
            ]
        },
        "diff_code": "+\t\tSparseRowMatrix r = Matrixx.createSparse(rows, a.columnCount());\n+\t\tfor (int i = 0; i < rows; ++i) {\n+\t\t\tAVector row = unsafeGetVector(i);\n+            if (row != null) {\n+\t\t\t    r.replaceRow(i,row.innerProduct(a));\n+            }\n+\t\t}\n+\t\treturn r;\n+\t\tAVector result= SparseIndexedVector.createLength(cc); // inistially use sparse result\n+\t\t\tresult.addMultiple(row, value);\n+\t\t\tif ((result instanceof SparseIndexedVector)&& \n+\t\t\t\t\t((SparseIndexedVector)result).nonSparseElementCount()>(cc/4)) {\n+\t\t\t\tresult=result.toVector();\n+\t\t\t}\n+\t\treturn result;\n+\t\tint nzc = 0;\n+\t\tAVector result = SparseIndexedVector.createLength(cc);\n+\t\tfor (int i = 0; i < rc; i++) {\n+\t\t\tdouble v=this.dotProduct(m.getColumn(i));\n+\t\t\tif (v==0.0) continue;\n+\t\t\tnzc++;\n+\t\t\tif ((result instanceof SparseIndexedVector)&&(i>20)&&(nzc>(i/4))) {\n+\t\t\t\tresult=result.toVector();\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult.unsafeSet(i, v);\n+\t\treturn result;\n+\t\tAVector result = SparseIndexedVector.createLength(cc);\n+\t\tint nzc = 0;\n+\t\t\tdouble v=this.dotProduct(m.getColumn(i));\n+\t\t\tif (v==0.0) continue;\n+\t\t\t\n+\t\t\tnzc++;\n+\t\t\tif ((i>20)&&(nzc>(i/4))) {\n+\t\t\t\tresult=result.toVector();\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult.unsafeSet(i, v);\n+\t\treturn result;\n+\t\tAMatrix mt=m.getTranspose();\n+\t\tassertTrue(mt.isSparse());\n+\t\tm.innerProduct(mt);\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java": [
                438,
                439,
                440,
                441,
                442,
                443,
                444,
                445
            ],
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": [
                289,
                299,
                300,
                301,
                302,
                303,
                305,
                311,
                313,
                314,
                315,
                316,
                318,
                319,
                321,
                322,
                324,
                326,
                340,
                341,
                343,
                344,
                346,
                347,
                349,
                350,
                352,
                354
            ],
            "src/test/java/mikera/arrayz/TestBigSparse.java": [
                98,
                99,
                100
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java": "\t\tSparseRowMatrix r = Matrixx.createSparse(rows, a.columnCount());\n\t\tfor (int i = 0; i < rows; ++i) {\n\t\t\tAVector row = unsafeGetVector(i);\n            if (row != null) {\n\t\t\t    r.replaceRow(i,row.innerProduct(a));\n            }\n\t\t}\n\t\treturn r;\n",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": "\t\tAVector result= SparseIndexedVector.createLength(cc); // inistially use sparse result\n\t\t\tresult.addMultiple(row, value);\n\t\t\tif ((result instanceof SparseIndexedVector)&& \n\t\t\t\t\t((SparseIndexedVector)result).nonSparseElementCount()>(cc/4)) {\n\t\t\t\tresult=result.toVector();\n\t\t\t}\n\t\treturn result;\n\t\tint nzc = 0;\n\t\tAVector result = SparseIndexedVector.createLength(cc);\n\t\tfor (int i = 0; i < rc; i++) {\n\t\t\tdouble v=this.dotProduct(m.getColumn(i));\n\t\t\tif (v==0.0) continue;\n\t\t\tnzc++;\n\t\t\tif ((result instanceof SparseIndexedVector)&&(i>20)&&(nzc>(i/4))) {\n\t\t\t\tresult=result.toVector();\n\t\t\t}\n\t\t\tresult.unsafeSet(i, v);\n\t\treturn result;\n\t\tAVector result = SparseIndexedVector.createLength(cc);\n\t\tint nzc = 0;\n\t\t\tdouble v=this.dotProduct(m.getColumn(i));\n\t\t\tif (v==0.0) continue;\n\t\t\tnzc++;\n\t\t\tif ((i>20)&&(nzc>(i/4))) {\n\t\t\t\tresult=result.toVector();\n\t\t\t}\n\t\t\tresult.unsafeSet(i, v);\n\t\treturn result;\n",
            "src/test/java/mikera/arrayz/TestBigSparse.java": "\t\tAMatrix mt=m.getTranspose();\n\t\tassertTrue(mt.isSparse());\n\t\tm.innerProduct(mt);\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "202294b8",
        "queries": {
            "src/main/java/mikera/matrixx/impl/SparseRowMatrix.java": "toArray toArray vectors vectors vectors vectors createZeroVector incompatibleShapes IllegalArgumentException throw length length length length if super data data data data data data data data new new new new this this this this columnCount columnCount columnCount columnCount columnCount columnCount columnCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount int int int int int int protected protected protected protected protected emptyRow emptyRow SPARSE_ELEMENT_THRESHOLD serialVersionUID long long final final final static static private private private IFastRows implements ASparseRCMatrix extends SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix SparseRowMatrix class public VectorzException ErrorMessages ErrorMessages ZeroVector SparseIndexedVector SingleElementVector GrowableIndexedVector IndexedElementVisitor Vectorz Vectorz Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Matrixx AMatrix ISparse ISparse INDArray arrayz arrayz List List List Arrays ArrayList util util util util util java java java import import import import import import import import import import import import import import import import import impl impl impl impl impl impl matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": "result checkLength rowCount rc rc columnCount cc cc innerProduct nonSparseElementCount nonSparseElementCount Override getRow getRow row row row m m m m m m m createFromRow iterator iterator iterable iterable SparseHashedVector nonSparseIndex nonSparseIndex unsafeGet unsafeGet unsafeGet unsafeGet unsafeGet vals vals vals vals vals vals vals vals vals len len len nonZeroIndices indexes indexes indexes indexes \"Can't create a length 0 SparseIndexedVector\" \"Can't create a length 0 SparseIndexedVector\" \"Can't create a length 0 SparseIndexedVector\" srcLength srcLength srcLength ASparseVector ASparseVector ASparseVector toDouble toSparseIndexedVector toSparseIndexedVector toSparseIndexedVector toSparseIndexedVector append append i i i i i i i i i i i i i i i i i i i i i i i i i i i for for for for for gv gv gv gv gv gv GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector values values values values values values cantCreateVector IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException TYPE Double isPrimitive null getComponentType ec ec ec ec klass klass klass Class Class Number Number asList isArray isArray getClass getClass Iterable Iterable Iterable Iterable else else else else instanceof instanceof instanceof instanceof instanceof instanceof o o o o o o o o o o o o o o Object Object Object \"unchecked\" SuppressWarnings @ @ sv sv sv EMPTY EMPTY createLength createLength createLength createLength getElements getElements n n n n n n n n n n n n n n n ixs ixs ixs ixs ixs ixs ixs ixs ixs ixs ixs ixs v v v v v v v v v v v createWithIndices copyOf clone \"Length of index: mismatch woth data\" \"Index must be sorted and distinct\" throw throw throw throw throw throw if if if if if if if if if if if if if if if if if if create create create create create create create create create create create create create create create create create create create create create create indices indices return return return return return return return return return return return return return return return return return return return return return return return isDistinctSorted isDistinctSorted isDistinctSorted assert assert assert assert wrap wrap wrap wrap wrap wrap wrap wrap toDoubleArray source source source source source source source source source source source source source source source source super new new new new new new new new new new new new new new new new this this this this length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int index index index index index index index index index index index index index index index index index index index index index index index index data data data data data data data data data data data data data data data data data data data data double double double double double double double double double double double double double double double double double double double serialVersionUID long final static static static static static static static static static static static static static static static static private private private private private private ASparseIndexedVector extends SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector class public public public public public public public public public public public public public public public public public public VectorzException VectorzException VectorzException IntArrays ErrorMessages ErrorMessages DoubleArrays DoubleArrays DoubleArrays Vectorz Vector Tools Tools Op2 Op AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector SparseRowMatrix SparseRowMatrix SparseColumnMatrix AVectorMatrix AVectorMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx Index Index Index Index Index Index Index Index Index Index Index Index Index Index indexz List List Iterator Iterator Iterator Iterator Arrays Arrays util util util util util util util java java java import import import import import import import import import import import import import import import import import import impl impl impl impl vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/arrayz/TestBigSparse.java": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/matrixx/impl/MatrixBandView.java",
            "src/main/java/mikera/vectorz/impl/AMatrixViewVector.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/matrixx/impl/MatrixBandView.java",
            "src/main/java/mikera/vectorz/impl/AMatrixViewVector.java"
        ],
        "changed_java_files_num": 3,
        "commit": "1c250ab9",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {},
        "deleted_line_number_list_per_file": {},
        "diff_code": "+\t@Override\n+\tpublic double dotProduct(AVector v) {\n+\t\tif (v instanceof ADenseArrayVector) return dotProduct((ADenseArrayVector)v);\n+ \t\tif (v instanceof ASparseVector) return ((ASparseVector)v).dotProduct(this);\n+ \t\t\n+ \t\tint len=checkSameLength(v);\n+\t\tdouble total=0.0;\n+\t\tfor (int i=0; i<len; i++) {\n+\t\t\ttotal+=unsafeGet(i)*v.unsafeGet(i);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\t\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/impl/AMatrixViewVector.java": [
                67,
                68,
                69,
                70,
                72,
                73,
                74,
                75,
                76,
                77,
                78
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/vectorz/impl/AMatrixViewVector.java": "\t@Override\n\tpublic double dotProduct(AVector v) {\n\t\tif (v instanceof ADenseArrayVector) return dotProduct((ADenseArrayVector)v);\n \t\tif (v instanceof ASparseVector) return ((ASparseVector)v).dotProduct(this);\n \t\tint len=checkSameLength(v);\n\t\tdouble total=0.0;\n\t\tfor (int i=0; i<len; i++) {\n\t\t\ttotal+=unsafeGet(i)*v.unsafeGet(i);\n\t\t}\n\t\treturn total;\n\t}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "57e69918",
        "queries": {
            "src/main/java/mikera/vectorz/impl/AMatrixViewVector.java": "checkIndex value set unsafeGet unsafeSet c c c r r r v v double double addAt void void Override Override calcCol calcCol i i i i i i i calcRow calcRow this super length length int int int int int int int int int source source source source source source protected protected protected protected ASizedVector extends AMatrixViewVector AMatrixViewVector class abstract abstract abstract public public public \"serial\" SuppressWarnings @ @ @ AVector AMatrix AMatrix AMatrix matrixx import import impl vectorz vectorz mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 12,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/arrayz/NDArray.java"
        ],
        "changed_files_num": 1,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/NDArray.java"
        ],
        "changed_java_files_num": 1,
        "commit": "3583abd0",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum testDenseArrayCreation Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/arrayz/NDArray.java": "\t\t\tif (st==1) {\n\t\t\t\top.applyTo(data, offset, len);\n\t\t\t} else {\n\t\t\t\tfor (int i=0; i<len; i++) {\n\t\t\t\t\tdata[offset+i*st]=op.apply(data[offset+i*st]);\n\t\t\t\t}\n\t\t\t}\n\tpublic boolean equals(NDArray a) {\n\t\tif (a==this) return true;\n\t\tif (dimensions!=a.dimensions) return false;\n\t\tif (dimensions==0) return get()==a.get();\n\t\treturn equalsBySlices(a);\n\t}\n\t\tif (a instanceof NDArray) {\n\t\t\treturn equals((NDArray)a);\n\t\t}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/NDArray.java": [
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                271,
                272,
                273,
                274,
                275,
                276,
                280,
                281,
                282
            ]
        },
        "diff_code": "+\t\t} else if (dimensions==3) {\n+\t\t\treturn Matrixx.wrapStrided(data, getShape(1), getShape(2),offset+majorSlice*getStride(0), getStride(1),getStride(2));\n+\t\t\top.applyTo(data, offset, st, len);\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/NDArray.java": [
                13,
                172,
                173,
                244
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/arrayz/NDArray.java": "import mikera.matrixx.Matrixx;\n\t\t} else if (dimensions==3) {\n\t\t\treturn Matrixx.wrapStrided(data, getShape(1), getShape(2),offset+majorSlice*getStride(0), getStride(1),getStride(2));\n\t\t\top.applyTo(data, offset, st, len);\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "3630484d",
        "queries": {
            "src/main/java/mikera/arrayz/NDArray.java": "index index index dimension dimension dimension copyOfRange copyOfRange \"Can't slice a 0-d NDArray\" checkShape checkShape majorSlice majorSlice majorSlice majorSlice majorSlice majorSlice broadcast broadcast reshape reshape slice slice slice slice join INSTANCE asVector asVector reverse reverse wrapStrided wrapStrided wrapStrided wrapStrided wrapStrided Arrayz Arrayz Arrayz Arrayz getTransposeView getTransposeView getTranspose ix ix ix indexes indexes indexes indexes y y y invalidIndex invalidIndex invalidIndex UnsupportedOperationException UnsupportedOperationException x x x x x x getSlices s s i i i i i i i i i i i i i for for for for getStride getStride getStride getStride getStride getStride getStride getStride getStride getStride getStride getStride st st st st sliceCount sliceCount n n n n else else else else else else else else else else value value value value value value value value value value set set set set set void void void void Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ newArray \" is not a strided array!\" getClass IllegalArgumentException IllegalArgumentException IllegalArgumentException throw throw throw throw throw instanceof if if if if if if if if if if if if if if INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray getStrides getArrayOffset a a a a a a a a a m m m getShape getShape getShape getShape getShape getShape getShape getArray getArray v v v v v v v return return return return return return return return return return return return return return return return return return dims dims wrap wrap wrap wrap wrap wrap wrap wrap wrap dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions this this this this this this stride stride stride stride stride stride stride offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset offset data data data data data data data data data data data data data data data data data data data calcStrides calcStrides length length length length length arrayProduct double double double double double double double double new new new new new new new new new new super super super super shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape int int int int int int int int int int int int int int int int int int int int int int int int int int int int int serialVersionUID long static static static static static static static private extends NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray class final final public public public public public public public public public public public public public public public public public public VectorzException IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays ErrorMessages ErrorMessages ErrorMessages ErrorMessages Vector0 Vector0 SingleDoubleIterator ArraySubVector ArraySubVector ArrayIndexScalar ArrayIndexScalar Vectorz Vectorz Vectorz Vector Vector Op IOperator AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Matrixx Matrixx Matrix Matrix matrixx matrixx ImmutableArray IStridedArray IStridedArray IStridedArray IStridedArray BaseNDArray BaseNDArray impl impl impl impl impl impl impl List Iterator Arrays Arrays Arrays ArrayList util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 13,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/impl/AVectorMatrix.java",
            "src/test/java/mikera/matrixx/TestMatrices.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/impl/AVectorMatrix.java",
            "src/test/java/mikera/matrixx/TestMatrices.java"
        ],
        "changed_java_files_num": 2,
        "commit": "f1ca9f8d",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiagonalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestPseudoInverses": "calculate PseudoInverse mi mi create create m m testDiagonalPseudoInverse void @ TestPseudoInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/test/java/mikera/matrixx/TestMatrices.java": "\t\tAVector v=Vectorz.newVector(m.columnCount());\n\t\tAVector t=Vectorz.newVector(m.rowCount());\n"
        },
        "deleted_line_number_list_per_file": {
            "src/test/java/mikera/matrixx/TestMatrices.java": [
                445,
                446
            ]
        },
        "diff_code": "+\t\tif ((rows==0)||(cols==0)) return ZeroMatrix.create(rows, cols);\n+\t\tint rc=m.rowCount();\n+\t\tint cc=m.columnCount();\n+\t\t\n+\t\tAVector v=Vectorz.newVector(cc);\n+\t\tAVector t=Vectorz.newVector(rc);\n+\t\t\n+\t\tAMatrix zm=m.subMatrix(0, rc, 0, 0).innerProduct(m.subMatrix(0, 0, 0, cc));\n+\t\tassertEquals(ZeroMatrix.create(rc, cc),zm);\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/impl/AVectorMatrix.java": [
                234
            ],
            "src/test/java/mikera/matrixx/TestMatrices.java": [
                445,
                446,
                448,
                449,
                458,
                459
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/impl/AVectorMatrix.java": "\t\tif ((rows==0)||(cols==0)) return ZeroMatrix.create(rows, cols);\n",
            "src/test/java/mikera/matrixx/TestMatrices.java": "\t\tint rc=m.rowCount();\n\t\tint cc=m.columnCount();\n\t\tAVector v=Vectorz.newVector(cc);\n\t\tAVector t=Vectorz.newVector(rc);\n\t\tAMatrix zm=m.subMatrix(0, rc, 0, 0).innerProduct(m.subMatrix(0, 0, 0, cc));\n\t\tassertEquals(ZeroMatrix.create(rc, cc),zm);\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "6997d252",
        "queries": {
            "src/main/java/mikera/matrixx/impl/AVectorMatrix.java": "avm avm clone clone equalsByRows m m equals wrap VectorMatrixMN subVector newRows newRows newRows create ZeroMatrix colStart colStart rowStart rowStart subMatrix createLength r r r innerProduct getComponent componentCount join v v v v v v getColumn INSTANCE asVector nonZeroCount nonZeroCount elementSquaredSum elementSquaredSum result result result result result result result result result elementSum elementSum isBoolean isBoolean isZero isZero isView op op applyOp applyOp columnCount columnCount cc cc cc cc checkColumn col col col copyColumnTo getElements getElements getElements destOffset destOffset destOffset destOffset destOffset destOffset destOffset copyRowTo inputVector inputVector rowDotProduct dotProduct dotProduct dotProduct dotProduct wrongDestLength wrongDestLength IllegalArgumentException IllegalArgumentException new new new throw throw length length instanceof instanceof dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest source source source source source source transform transform transform unsafeSet unsafeSet unsafeSet unsafeSet unsafeSet value value value value fill fill true true true true false false false if if if if if if if if if if for for for for for for for for for for for for for for for rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc isFullyMutable isFullyMutable boolean boolean boolean boolean boolean unsafeGet unsafeGet unsafeGet column column column column column column get get double double double double double double double double double double double double return return return return return return return return return return return return return return return return return return return return return return return return return return getRowView getRowView getRowView getRowView getRowView getRowView getRowView getRowView getRowView getRow getRow getRow getRow getRow getRow getRow getRow getRow getRow getRow getRow getRow getRow getRow getRow getRow row row row row row row row row row row row row i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i replaceRow void void void void void void void void void Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ super super cols cols cols cols cols cols rows rows rows rows rows rows rows rows int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int protected serialVersionUID long long long final final final static private IFastRows implements ARectangularMatrix extends extends T T T T AVectorMatrix AVectorMatrix class abstract abstract abstract public public public public public public public public public public public public public public public public public public public public public public public public public public public public public ErrorMessages ErrorMessages ErrorMessages util Vector0 Vector0 Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Op Op AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz AMatrix AMatrix AMatrix AMatrix AMatrix import import import import import import import impl impl matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/matrixx/TestMatrices.java": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 12,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestPseudoInverses": 1,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_java_files_num": 3,
        "commit": "96e1eea1",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiagonalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestPseudoInverses": "epsilonEquals assertTrue double double new new testBAsicPseudoInverse assertEquals calculate calculate PseudoInverse PseudoInverse mi mi mi mi create create create create m m m m testDiagonalPseudoInverse void void @ @ TestPseudoInverses class public public public ZeroMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix impl impl Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Assert junit junit org org static import import import import import import algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "    private int numRows;\n    private int numCols;\n    private int numRowsT;\n    private int numColsT;\n    private IBidiagonalResult bidiagResult;\n    private SvdImplicitQrAlgorithm qralg = new SvdImplicitQrAlgorithm();\n    double diag[];\n    double off[];\n    private Matrix Ut;\n    private Matrix Vt;\n    private double singularValues[];\n    private int numSingular;\n    private boolean compact;\n    private boolean transposed;\n    private Matrix A_mod = Matrix.create(1,1);\n    public static SVDResult decompose(AMatrix A, boolean compact) {\n    \tSvdImplicitQr svd = new SvdImplicitQr(compact);\n    \treturn svd._decompose(A);\n    }\n    public SvdImplicitQr(boolean compact) {\n        this.compact = compact;\n    }\n    public AVector getSingularValues() {\n        return Vector.wrap(singularValues);\n    }\n    public int numberOfSingularValues() {\n        return numSingular;\n    }\n    public boolean isCompact() {\n        return compact;\n    }\n    public AMatrix getU() {\n    \treturn Ut.getTranspose();\n    }\n    public AMatrix getV() {\n        \treturn Vt.getTranspose();\n    }\n    public AMatrix getS() {\n        int m = compact ? numSingular : numRows;\n        int n = compact ? numSingular : numCols;\n        Matrix S = Matrix.create(m,n);\n        for( int i = 0; i < numSingular; i++ ) {\n            S.unsafeSet(i,i, singularValues[i]);\n        }\n        return S;\n    }\n    public SVDResult _decompose(AMatrix _orig) {\n    \tMatrix orig = _orig.copy().toMatrix();\n        setup(orig);\n        if (bidiagonalization(orig)) {\n            return null;\n        }\n        if( computeUSV() )\n            return null;\n        makeSingularPositive();\n        undoTranspose();\n        return new SVDResult(getU(), getS(), getV(), getSingularValues());\n    }\n    private boolean bidiagonalization(Matrix orig) {\n        if( transposed ) {\n            A_mod = orig.getTransposeCopy().toMatrix();\n        } else {\n            A_mod = orig.copy().toMatrix();\n        }\n        bidiagResult = Bidiagonal.decompose(A_mod, compact);\n        return bidiagResult == null;\n    }\n    private void undoTranspose() {\n        if( transposed ) {\n            Matrix temp = Vt;\n            Vt = Ut;\n            Ut = temp;\n        }\n    }\n    private boolean computeUSV() {\n        diag = bidiagResult.getB().getBand(0).toDoubleArray();\n        off = bidiagResult.getB().getBand(1).toDoubleArray();\n        qralg.setMatrix(numRowsT,numColsT,diag,off);\n            Ut = bidiagResult.getU().getTranspose().toMatrix();\n            Vt = bidiagResult.getV().getTranspose().toMatrix();\n        qralg.setFastValues(false);\n            qralg.setUt(Ut);\n            qralg.setVt(Vt);\n        boolean ret = !qralg.process();\n        return ret;\n    }\n    private void setup(Matrix orig) {\n        transposed = orig.columnCount() > orig.rowCount();\n        if( transposed ) {\n            numRowsT = orig.columnCount();\n            numColsT = orig.rowCount();\n        } else {\n            numRowsT = orig.rowCount();\n            numColsT = orig.columnCount();\n        }\n        numRows = orig.rowCount();\n        numCols = orig.columnCount();\n        diag = new double[ numColsT ];\n        off = new double[ numColsT-1 ];\n    }\n    private void makeSingularPositive() {\n        numSingular = qralg.getNumberOfSingularValues();\n        singularValues = qralg.getSingularValues();\n        double[] UtData = Ut.asDoubleArray();\n        for( int i = 0; i < numSingular; i++ ) {\n            double val = qralg.getSingularValue(i);\n            if( val < 0 ) {\n                singularValues[i] = 0.0d - val;\n                    int start = i* Ut.columnCount();\n                    int stop = start+ Ut.columnCount();\n                    for( int j = start; j < stop; j++ ) {\n                        UtData[j] = 0.0d - UtData[j];\n                }\n            } else {\n                singularValues[i] = val;\n            }\n        }\n    }\n    public int numRows() {\n        return numRows;\n    }\n    public int numCols() {\n        return numCols;\n    }\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "import static org.junit.Assert.assertEquals;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                46,
                47,
                50,
                51,
                58,
                59,
                61,
                62,
                64,
                65,
                67,
                68,
                71,
                82,
                85,
                87,
                88,
                89,
                90,
                105,
                106,
                110,
                112,
                113,
                114,
                116,
                117,
                118,
                120,
                121,
                122,
                124,
                127,
                128,
                130,
                133,
                134,
                136,
                137,
                138,
                140,
                142,
                143,
                144,
                146,
                147,
                149,
                151,
                152,
                154,
                155,
                156,
                158,
                159,
                162,
                165,
                167,
                168,
                170,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                195,
                196,
                197,
                198,
                203,
                205,
                207,
                209,
                213,
                219,
                224,
                225,
                227,
                228,
                231,
                234,
                235,
                236,
                239,
                240,
                241,
                243,
                244,
                246,
                247,
                259,
                265,
                266,
                267,
                269,
                270,
                271,
                273,
                274,
                279,
                280,
                282,
                283,
                285,
                286,
                287,
                288,
                289,
                290,
                292,
                293,
                294,
                296,
                297,
                298
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                3
            ]
        },
        "diff_code": "+\tprivate int numRows;\n+\tprivate int numCols;\n+\tprivate int numRowsT;\n+\tprivate int numColsT;\n+\tprivate IBidiagonalResult bidiagResult;\n+\tprivate SvdImplicitQrAlgorithm qralg = new SvdImplicitQrAlgorithm();\n+\tdouble diag[];\n+\tdouble off[];\n+\tprivate Matrix Ut;\n+\tprivate Matrix Vt;\n+\tprivate double singularValues[];\n+\tprivate int numSingular;\n+\tprivate boolean compact;\n+\tprivate boolean transposed;\n+\tprivate Matrix A_mod = Matrix.create(1, 1);\n+\tpublic static SVDResult decompose(AMatrix A, boolean compact) {\n+\t\tSvdImplicitQr svd = new SvdImplicitQr(compact);\n+\t\treturn svd._decompose(A);\n+\t}\n+\tpublic SvdImplicitQr(boolean compact) {\n+\t\tthis.compact = compact;\n+\t}\n+\tpublic AVector getSingularValues() {\n+\t\treturn Vector.wrap(singularValues);\n+\t}\n+\tpublic int numberOfSingularValues() {\n+\t\treturn numSingular;\n+\t}\n+\tpublic boolean isCompact() {\n+\t\treturn compact;\n+\t}\n+\tpublic AMatrix getU() {\n+\t\treturn Ut.getTranspose();\n+\t}\n+\tpublic AMatrix getV() {\n+\t\treturn Vt.getTranspose();\n+\t}\n+\tpublic AMatrix getS() {\n+\t\tint m = compact ? numSingular : numRows;\n+\t\tint n = compact ? numSingular : numCols;\n+\t\tMatrix S = Matrix.create(m, n);\n+\t\tfor (int i = 0; i < numSingular; i++) {\n+\t\t\tS.unsafeSet(i, i, singularValues[i]);\n+\t\t}\n+\t\treturn S;\n+\t}\n+\tpublic SVDResult _decompose(AMatrix _orig) {\n+\t\tMatrix orig = _orig.copy().toMatrix();\n+\t\tsetup(orig);\n+\t\tif (bidiagonalization(orig)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (computeUSV())\n+\t\t\treturn null;\n+\t\tmakeSingularPositive();\n+\t\tundoTranspose();\n+\t\treturn new SVDResult(getU(), getS(), getV(), getSingularValues());\n+\t}\n+\tprivate boolean bidiagonalization(Matrix orig) {\n+\t\tif (transposed) {\n+\t\t\tA_mod = orig.getTransposeCopy().toMatrix();\n+\t\t} else {\n+\t\t\tA_mod = orig.copy().toMatrix();\n+\t\t}\n+\t\tbidiagResult = Bidiagonal.decompose(A_mod, compact);\n+\t\treturn bidiagResult == null;\n+\t}\n+\tprivate void undoTranspose() {\n+\t\tif (transposed) {\n+\t\t\tMatrix temp = Vt;\n+\t\t\tVt = Ut;\n+\t\t\tUt = temp;\n+\t\t}\n+\t}\n+\tprivate boolean computeUSV() {\n+\t\tdiag = bidiagResult.getB().getBand(0).toDoubleArray();\n+\t\toff = bidiagResult.getB().getBand(1).toDoubleArray();\n+\t\tqralg.setMatrix(numRowsT, numColsT, diag, off);\n+\t\tUt = bidiagResult.getU().getTranspose().toMatrix();\n+\t\tVt = bidiagResult.getV().getTranspose().toMatrix();\n+\t\tqralg.setFastValues(false);\n+\t\tqralg.setUt(Ut);\n+\t\tqralg.setVt(Vt);\n+\t\tboolean ret = !qralg.process();\n+\t\treturn ret;\n+\t}\n+\tprivate void setup(Matrix orig) {\n+\t\ttransposed = orig.columnCount() > orig.rowCount();\n+\t\tif (transposed) {\n+\t\t\tnumRowsT = orig.columnCount();\n+\t\t\tnumColsT = orig.rowCount();\n+\t\t} else {\n+\t\t\tnumRowsT = orig.rowCount();\n+\t\t\tnumColsT = orig.columnCount();\n+\t\t}\n+\t\tnumRows = orig.rowCount();\n+\t\tnumCols = orig.columnCount();\n+\t\tdiag = new double[numColsT];\n+\t\toff = new double[numColsT - 1];\n+\t}\n+\tprivate void makeSingularPositive() {\n+\t\tnumSingular = qralg.getNumberOfSingularValues();\n+\t\tsingularValues = qralg.getSingularValues();\n+\t\tfor (int i = 0; i < numSingular; i++) {\n+\t\t\tdouble val = qralg.getSingularValue(i);\n+\t\t\tif (val < 0) {\n+\t\t\t\tsingularValues[i] = 0.0d - val;\n+\t\t\t\tUt.multiplyRow(i, -1.0);\n+\t\t\t} else {\n+\t\t\t\tsingularValues[i] = val;\n+\t\t\t}\n+\t\t}\n+\t}\n+\tpublic int numRows() {\n+\t\treturn numRows;\n+\t}\n+\tpublic int numCols() {\n+\t\treturn numCols;\n+\t}\n+\t\n+\t@Test\n+\tpublic void testBAsicPseudoInverse() {\n+\t\tAMatrix m=Matrix.create(new double[][] {{4,7},{2,6}});\n+\t\tAMatrix mi=PseudoInverse.calculate(m);\n+\t\tassertTrue(Matrix.create(new double[][] {{0.6,-0.7},{-0.2,0.4}}).epsilonEquals(mi));\n+\t}\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                48,
                49,
                52,
                53,
                61,
                62,
                64,
                65,
                67,
                68,
                70,
                71,
                74,
                86,
                89,
                91,
                92,
                93,
                94,
                114,
                115,
                119,
                121,
                122,
                123,
                125,
                126,
                127,
                129,
                130,
                131,
                133,
                137,
                138,
                140,
                144,
                145,
                147,
                148,
                149,
                151,
                153,
                154,
                155,
                157,
                158,
                160,
                162,
                163,
                165,
                166,
                167,
                169,
                170,
                173,
                176,
                178,
                179,
                181,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                206,
                207,
                208,
                209,
                214,
                216,
                218,
                220,
                224,
                230,
                236,
                237,
                239,
                240,
                243,
                246,
                247,
                248,
                251,
                252,
                253,
                255,
                256,
                258,
                259,
                275,
                282,
                283,
                284,
                286,
                287,
                289,
                290,
                292,
                293,
                294,
                295,
                296,
                297,
                299,
                300,
                301,
                303,
                304,
                305
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                3,
                8,
                10,
                20,
                21,
                22,
                23,
                24,
                25
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\tprivate int numRows;\n\tprivate int numCols;\n\tprivate int numRowsT;\n\tprivate int numColsT;\n\tprivate IBidiagonalResult bidiagResult;\n\tprivate SvdImplicitQrAlgorithm qralg = new SvdImplicitQrAlgorithm();\n\tdouble diag[];\n\tdouble off[];\n\tprivate Matrix Ut;\n\tprivate Matrix Vt;\n\tprivate double singularValues[];\n\tprivate int numSingular;\n\tprivate boolean compact;\n\tprivate boolean transposed;\n\tprivate Matrix A_mod = Matrix.create(1, 1);\n\tpublic static SVDResult decompose(AMatrix A, boolean compact) {\n\t\tSvdImplicitQr svd = new SvdImplicitQr(compact);\n\t\treturn svd._decompose(A);\n\t}\n\tpublic SvdImplicitQr(boolean compact) {\n\t\tthis.compact = compact;\n\t}\n\tpublic AVector getSingularValues() {\n\t\treturn Vector.wrap(singularValues);\n\t}\n\tpublic int numberOfSingularValues() {\n\t\treturn numSingular;\n\t}\n\tpublic boolean isCompact() {\n\t\treturn compact;\n\t}\n\tpublic AMatrix getU() {\n\t\treturn Ut.getTranspose();\n\t}\n\tpublic AMatrix getV() {\n\t\treturn Vt.getTranspose();\n\t}\n\tpublic AMatrix getS() {\n\t\tint m = compact ? numSingular : numRows;\n\t\tint n = compact ? numSingular : numCols;\n\t\tMatrix S = Matrix.create(m, n);\n\t\tfor (int i = 0; i < numSingular; i++) {\n\t\t\tS.unsafeSet(i, i, singularValues[i]);\n\t\t}\n\t\treturn S;\n\t}\n\tpublic SVDResult _decompose(AMatrix _orig) {\n\t\tMatrix orig = _orig.copy().toMatrix();\n\t\tsetup(orig);\n\t\tif (bidiagonalization(orig)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (computeUSV())\n\t\t\treturn null;\n\t\tmakeSingularPositive();\n\t\tundoTranspose();\n\t\treturn new SVDResult(getU(), getS(), getV(), getSingularValues());\n\t}\n\tprivate boolean bidiagonalization(Matrix orig) {\n\t\tif (transposed) {\n\t\t\tA_mod = orig.getTransposeCopy().toMatrix();\n\t\t} else {\n\t\t\tA_mod = orig.copy().toMatrix();\n\t\t}\n\t\tbidiagResult = Bidiagonal.decompose(A_mod, compact);\n\t\treturn bidiagResult == null;\n\t}\n\tprivate void undoTranspose() {\n\t\tif (transposed) {\n\t\t\tMatrix temp = Vt;\n\t\t\tVt = Ut;\n\t\t\tUt = temp;\n\t\t}\n\t}\n\tprivate boolean computeUSV() {\n\t\tdiag = bidiagResult.getB().getBand(0).toDoubleArray();\n\t\toff = bidiagResult.getB().getBand(1).toDoubleArray();\n\t\tqralg.setMatrix(numRowsT, numColsT, diag, off);\n\t\tUt = bidiagResult.getU().getTranspose().toMatrix();\n\t\tVt = bidiagResult.getV().getTranspose().toMatrix();\n\t\tqralg.setFastValues(false);\n\t\tqralg.setUt(Ut);\n\t\tqralg.setVt(Vt);\n\t\tboolean ret = !qralg.process();\n\t\treturn ret;\n\t}\n\tprivate void setup(Matrix orig) {\n\t\ttransposed = orig.columnCount() > orig.rowCount();\n\t\tif (transposed) {\n\t\t\tnumRowsT = orig.columnCount();\n\t\t\tnumColsT = orig.rowCount();\n\t\t} else {\n\t\t\tnumRowsT = orig.rowCount();\n\t\t\tnumColsT = orig.columnCount();\n\t\t}\n\t\tnumRows = orig.rowCount();\n\t\tnumCols = orig.columnCount();\n\t\tdiag = new double[numColsT];\n\t\toff = new double[numColsT - 1];\n\t}\n\tprivate void makeSingularPositive() {\n\t\tnumSingular = qralg.getNumberOfSingularValues();\n\t\tsingularValues = qralg.getSingularValues();\n\t\tfor (int i = 0; i < numSingular; i++) {\n\t\t\tdouble val = qralg.getSingularValue(i);\n\t\t\tif (val < 0) {\n\t\t\t\tsingularValues[i] = 0.0d - val;\n\t\t\t\tUt.multiplyRow(i, -1.0);\n\t\t\t} else {\n\t\t\t\tsingularValues[i] = val;\n\t\t\t}\n\t\t}\n\t}\n\tpublic int numRows() {\n\t\treturn numRows;\n\t}\n\tpublic int numCols() {\n\t\treturn numCols;\n\t}\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "import static org.junit.Assert.*;\nimport mikera.matrixx.Matrix;\nimport mikera.matrixx.impl.ZeroMatrix;\n\t@Test\n\tpublic void testBAsicPseudoInverse() {\n\t\tAMatrix m=Matrix.create(new double[][] {{4,7},{2,6}});\n\t\tAMatrix mi=PseudoInverse.calculate(m);\n\t\tassertTrue(Matrix.create(new double[][] {{0.6,-0.7},{-0.2,0.4}}).epsilonEquals(mi));\n\t}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "f1ca9f8d",
        "queries": {
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "numCols numRows int int private private SvdImplicitQr class public Vector AVector vectorz vectorz IBidiagonalResult Bidiagonal Matrix AMatrix import import import import import import svd impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "epsilonEquals assertTrue double double new new testBAsicPseudoInverse assertEquals calculate calculate PseudoInverse PseudoInverse mi mi mi mi create create create create m m m m testDiagonalPseudoInverse void void @ @ TestPseudoInverses class public public public ZeroMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix impl impl Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Assert junit junit org org static import import import import import import algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 12,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestPseudoInverses": 2,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/Matrix.java",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/Matrix.java",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java"
        ],
        "changed_java_files_num": 2,
        "commit": "72cd9dcd",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiagonalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestPseudoInverses": "testMiniPseudoInverse1 epsilonEquals epsilonEquals double double double double new new new new testBasicPseudoInverse calculate calculate calculate PseudoInverse PseudoInverse PseudoInverse mi mi mi mi mi mi create create create create create create m m m m m m testDiagonalPseudoInverse void void void @ @ @ TestPseudoInverses class public public public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test assertTrue assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/Matrix.java": "\t\tint rc = checkRow(j);\n\t\tcol.checkLength(rc);\n\t\tcol.copyTo(0, data, j, rc, cols);\n",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": "\t\tVector r=Vector.createLength(rows);\n\t\t\tr.addMultiple(getColumn(i),a.get(i));\n\t\treturn r;\n                m.getColumn(i).set(v);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/Matrix.java": [
                616,
                617,
                618
            ],
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": [
                427,
                429,
                431,
                449
            ]
        },
        "diff_code": "+\t\tcol.checkLength(rows);\n+\t\tcol.copyTo(0, data, j, rows, cols);\n+\t\tVector result=Vector.createLength(rows);\n+\t\t\tdouble aval=a.unsafeGet(i);\n+\t\t\tif (aval!=0.0) result.addMultiple(getColumn(i),aval);\n+\t\treturn result;\n+                m.setColumn(i, v);;\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/Matrix.java": [
                616,
                617
            ],
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": [
                427,
                429,
                430,
                432,
                450
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/Matrix.java": "\t\tcol.checkLength(rows);\n\t\tcol.copyTo(0, data, j, rows, cols);\n",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": "\t\tVector result=Vector.createLength(rows);\n\t\t\tdouble aval=a.unsafeGet(i);\n\t\t\tif (aval!=0.0) result.addMultiple(getColumn(i),aval);\n\t\treturn result;\n                m.setColumn(i, v);;\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "9991bb8d",
        "queries": {
            "src/main/java/mikera/matrixx/Matrix.java": "get asDoubleArray put toDoubleBuffer targetData targetData copyOf toMatrix asVector doffset doffset soffset soffset dst dst src src addRowMultiple offset offset factor factor factor factor multiplyRow x x x swapColumns t t t t i2 i2 i2 i2 i2 i2 i1 i1 i1 i1 i1 i1 k k k k k k k k k b b j j j j j j j j j j j j j j j j j j swapRows else checkColumn checkColumn getColumn getRowView checkRow getRow getRow column column column column column total total total ddata ddata getArray getArray sdata sdata di di di dotProduct unsafeSet wrongSourceLength wrongSourceLength wrongDestLength wrongDestLength source source source source source source source source source source colOffset colOffset col col col col col copyColumnTo copyColumnTo srcOffset srcOffset destOffset destOffset destOffset destOffset dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest dest row row row row row row row row row row row copyRowTo nonZeroCount nonZeroCount log log exp exp square square signum signum abs abs void void void void void void void void void void void void void void elementMin elementMin elementMax elementMax elementSquaredSum elementSquaredSum elementSum elementSum toMatrixTranspose toMatrixTranspose r r s s transposeInnerProduct multiply multiply multiply transform transform transform transform createLength result result result instanceof instanceof instanceof a a a a a a a a innerProduct innerProduct innerProduct rowStride rowStride \"Invalid submatrix end position\" \"Invalid submatrix start position\" IndexOutOfBoundsException IndexOutOfBoundsException colStart colStart colStart colStart colStart rowStart rowStart rowStart rowStart rowStart subMatrix \"data array is of wrong size: \" isPackedArray isZero isZero isBoolean isBoolean false isView true true isFullyMutable boolean boolean boolean boolean boolean Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ arraycopy arraycopy System System \" has length \" \"Array shape is not rectangular! Row \" drow drow drow drow v v setRow setRow setRow cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc toVector toVector toVector row0 row0 row0 rc rc rc rc rc rc rc rc rc rc rc rc rc rc rc Object createFromRows wrap wrap wrap wrap wrap wrap wrap getShape getShape \"Can only create matrix from 2D array\" dimensionality random Math i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i for for for for for for for for for for for for d d d cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols cols rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows createRandom \"Cannot create Matrix with dimensionality: \" IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException throw throw throw throw throw throw throw throw throw throw if if if if if if if if if if if if if if if length length length length length length length length length length length length length length length length length length dims dims dims shape shape shape shape new new new new new new new new new new new new new return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return create create create create create create create create create create create create create super data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data double double double double double double double double double double double double double double double double double double double double double double createStorage int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int toDoubleArray toDoubleArray toDoubleArray columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount this this this this this this this this m m m m m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix serialVersionUID long long static static static static static static static static static static private private extends Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix class final final final final final final public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays StridedVector StridedVector StridedElementIterator ArraySubVector ArraySubVector ArraySubVector ArraySubVector AStridedVector AStridedVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Op2 Op AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz StridedRowMatrix StridedRowMatrix DenseColumnMatrix AStridedMatrix AStridedMatrix ADenseArrayMatrix ADenseArrayMatrix impl impl impl impl impl impl impl impl Multiplications Multiplications Multiplications algo INDArray INDArray arrayz Iterator Arrays util util util util DoubleBuffer DoubleBuffer nio java java java import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": "toArray createZeroVector incompatibleShapes IllegalArgumentException throw length length if super data data data data data data new new new this this columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount int int int int int int protected protected protected emptyColumn emptyColumn SPARSE_ELEMENT_THRESHOLD serialVersionUID long long final final final static static private private private IFastColumns implements ASparseRCMatrix extends SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix class public VectorzException ErrorMessages ErrorMessages SparseIndexedVector SingleElementVector Vectorz Vectorz Vector Op2 Op IOperator AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Matrixx Matrix AMatrix ISparse ISparse arrayz List List util util util java import import import import import import import import import import import import import import import impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 12,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestPseudoInverses": 3,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java",
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java",
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_java_files_num": 4,
        "commit": "e78dc6e0",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiagonalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestPseudoInverses": "mii mii getTranspose testZeroPseudoInverse testDiagonalPseudoInverse2 testMiniPseudoInverse1 epsilonEquals epsilonEquals double double double double new new new new testBasicPseudoInverse calculate calculate calculate calculate calculate calculate PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse mi mi mi mi mi mi mi mi mi mi mi create create create create create create create create create m m m m m m m m m m m m testDiagonalPseudoInverse void void void void void @ @ @ @ @ TestPseudoInverses class public public public public public public ZeroMatrix ZeroMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix impl impl Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java": "\t\tISVDResult svd = SVD.decompose(a,true);\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\t\tif (compact&&(numSingular<getS().rowCount())) {\n\t\t\tAMatrix cU=getU().subMatrix(0, numRows, 0, numSingular);\n\t\t\tAMatrix cS=DiagonalMatrix.create(svs);\n\t\t\tAMatrix cV=getV().subMatrix(0, numCols, 0, numSingular);\n\t\t\treturn new SVDResult(cU,cS,cV,svs);\t\n\t\t} else {\n\t\t\treturn new SVDResult(getU(), getS(), getV(), svs);\n\t\t}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java": [
                18
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170
            ]
        },
        "diff_code": "+\t\tISVDResult svd = SVD.decomposeNonZero(a);\n+\t\n+\tpublic static ISVDResult decomposeNonZero(AMatrix A) {\n+\t\tISVDResult svd=decomposeCompact(A);\n+\t\t\n+\t\tAVector svs=svd.getSingularValues();\n+\t\tint m=A.rowCount();\n+\t\tint n=A.columnCount();\n+\t\tint s=svs.length(); // length of singular values vector\n+\t\t\n+\t\tint svNumber=0;\n+\t\tfor (int i=0; i<s; i++) {\n+\t\t\tif (svs.unsafeGet(i)==0.0) break;\n+\t\t\tsvNumber++;\n+\t\t}\n+\t\t\n+\t\tif (svNumber<s) {\n+\t\t\tAVector newSvs=svs.subVector(0,svNumber); // truncated vector of singulat values\n+\t\t\tAMatrix cU=svd.getU().subMatrix(0, m, 0, svNumber);\n+\t\t\tAMatrix cS=DiagonalMatrix.create(newSvs);\n+\t\t\tAMatrix cV=svd.getV().subMatrix(0, n, 0, svNumber);\n+\t\t\treturn new SVDResult(cU,cS,cV,newSvs);\t\n+\t\t} else {\n+\t\t\treturn svd;\n+\t\t}\n+\t}\n+\t\treturn new SVDResult(getU(), getS(), getV(), svs);\n+\t@Test\n+\tpublic void testDiagonalPseudoInverse2() {\n+\t\tAMatrix m=DiagonalMatrix.create(2,0);\n+\t\tAMatrix mi=PseudoInverse.calculate(m);\n+\t\tassertEquals(DiagonalMatrix.create(0.5,0.0),mi);\n+\t}\n+\t@Test\n+\tpublic void testZeroPseudoInverse() {\n+\t\tAMatrix m=ZeroMatrix.create(3,2);\n+\t\t\n+\t\tAMatrix mi=PseudoInverse.calculate(m);\n+\t\tassertEquals(m.getTranspose(),mi);\n+\t\t\n+\t\tAMatrix mii=PseudoInverse.calculate(mi);\n+\t\tassertEquals(m,mii);\n+\t}\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java": [
                18
            ],
            "src/main/java/mikera/matrixx/decompose/SVD.java": [
                5,
                7,
                8,
                79,
                80,
                82,
                83,
                84,
                85,
                88,
                89,
                90,
                91,
                92,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                163
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                11,
                35,
                36,
                37,
                38,
                39,
                40,
                42,
                43,
                44,
                46,
                47,
                49,
                50,
                51
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java": "\t\tISVDResult svd = SVD.decomposeNonZero(a);\n",
            "src/main/java/mikera/matrixx/decompose/SVD.java": "import mikera.matrixx.decompose.impl.svd.SVDResult;\nimport mikera.matrixx.impl.DiagonalMatrix;\nimport mikera.vectorz.AVector;\n\tpublic static ISVDResult decomposeNonZero(AMatrix A) {\n\t\tISVDResult svd=decomposeCompact(A);\n\t\tAVector svs=svd.getSingularValues();\n\t\tint m=A.rowCount();\n\t\tint n=A.columnCount();\n\t\tint s=svs.length(); // length of singular values vector\n\t\tint svNumber=0;\n\t\tfor (int i=0; i<s; i++) {\n\t\t\tif (svs.unsafeGet(i)==0.0) break;\n\t\t\tsvNumber++;\n\t\t}\n\t\tif (svNumber<s) {\n\t\t\tAVector newSvs=svs.subVector(0,svNumber); // truncated vector of singulat values\n\t\t\tAMatrix cU=svd.getU().subMatrix(0, m, 0, svNumber);\n\t\t\tAMatrix cS=DiagonalMatrix.create(newSvs);\n\t\t\tAMatrix cV=svd.getV().subMatrix(0, n, 0, svNumber);\n\t\t\treturn new SVDResult(cU,cS,cV,newSvs);\t\n\t\t} else {\n\t\t\treturn svd;\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\t\treturn new SVDResult(getU(), getS(), getV(), svs);\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "import mikera.matrixx.impl.ZeroMatrix;\n\t@Test\n\tpublic void testDiagonalPseudoInverse2() {\n\t\tAMatrix m=DiagonalMatrix.create(2,0);\n\t\tAMatrix mi=PseudoInverse.calculate(m);\n\t\tassertEquals(DiagonalMatrix.create(0.5,0.0),mi);\n\t}\n\t@Test\n\tpublic void testZeroPseudoInverse() {\n\t\tAMatrix m=ZeroMatrix.create(3,2);\n\t\tAMatrix mi=PseudoInverse.calculate(m);\n\t\tassertEquals(m.getTranspose(),mi);\n\t\tAMatrix mii=PseudoInverse.calculate(mi);\n\t\tassertEquals(m,mii);\n\t}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "91e87b3c",
        "queries": {
            "src/main/java/mikera/matrixx/algo/PseudoInverse.java": "a calculate static PseudoInverse class public public Vector vectorz DiagonalMatrix impl SVD ISVDResult decompose decompose AMatrix AMatrix AMatrix import import import import import algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/decompose/SVD.java": "length s columnCount n rowCount m int int int getSingularValues svs svs decomposeNonZero true decomposeCompact decomposeCompact compact compact boolean false return return return A A A A A A A A A A static static static static private SVD SVD class public public public public public AVector AVector vectorz DiagonalMatrix SvdImplicitQr SvdImplicitQr SvdImplicitQr SvdImplicitQr SVDResult svd svd svd svd impl impl impl ISVDResult ISVDResult ISVDResult ISVDResult ISVDResult ISVDResult AMatrix AMatrix AMatrix AMatrix AMatrix import import import import import import decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "numCols numRows int int private private SvdImplicitQr class public Vector AVector vectorz vectorz DiagonalMatrix IBidiagonalResult Bidiagonal Matrix AMatrix import import import import import import import svd impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "mii mii getTranspose testZeroPseudoInverse testDiagonalPseudoInverse2 testMiniPseudoInverse1 epsilonEquals epsilonEquals double double double double new new new new testBasicPseudoInverse calculate calculate calculate calculate calculate calculate PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse mi mi mi mi mi mi mi mi mi mi mi create create create create create create create create create m m m m m m m m m m m m testDiagonalPseudoInverse void void void void void @ @ @ @ @ TestPseudoInverses class public public public public public public ZeroMatrix ZeroMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix impl impl Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 12,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestPseudoInverses": 5,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/util/ErrorMessages.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/util/ErrorMessages.java"
        ],
        "changed_java_files_num": 2,
        "commit": "3630484d",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum testDenseArrayCreation Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": "\t\tassert(indexes.length==0);\n\t\t\tthrow new IllegalArgumentException(\"\"+indexes.length+\"D set not supported on AScalar\");\n",
            "src/main/java/mikera/vectorz/util/ErrorMessages.java": "\t\treturn \"Incompatible shapes: \"+shape(a)+\" vs. \"+shape(b);\n\t\treturn \"Can't broadcast \"+describeArray(a)+\" to shape: \"+shape(b);\n\t\treturn \"Element index \"+i+\" invalid for \"+a.getClass()+\" with shape \"+shape(a);\n\t\treturn \"Subrange {start=\"+start+\", length=\"+length+\"} not valid on vector with length \"+v.length();\n\t\treturn \"Matrix should be square but has shape: \"+shape(a);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": [
                251,
                260
            ],
            "src/main/java/mikera/vectorz/util/ErrorMessages.java": [
                56,
                84,
                146,
                150,
                195
            ]
        },
        "diff_code": "+\t\tif (indexes.length!=0) throw new IllegalArgumentException(ErrorMessages.invalidIndex(this, indexes));\n+\t\t\tthrow new IllegalArgumentException(ErrorMessages.invalidIndex(this, indexes));\n+\t\treturn \"Incompatible shapes: \"+describeArray(a)+\" vs. \"+describeArray(b);\n+\t\treturn \"Can't broadcast \"+describeArray(a)+\" to shape of \"+describeArray(b);\n+\t\treturn \"Element index \"+i+\" invalid for \"+describeArray(a);\n+\t\treturn \"Subrange {start=\"+start+\", length=\"+length+\"} not valid on \"+describeArray(v);\n+\t\treturn \"Matrix must be square: \"+describeArray(a);\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": [
                251,
                260
            ],
            "src/main/java/mikera/vectorz/util/ErrorMessages.java": [
                56,
                84,
                146,
                150,
                195
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/vectorz/AScalar.java": "\t\tif (indexes.length!=0) throw new IllegalArgumentException(ErrorMessages.invalidIndex(this, indexes));\n\t\t\tthrow new IllegalArgumentException(ErrorMessages.invalidIndex(this, indexes));\n",
            "src/main/java/mikera/vectorz/util/ErrorMessages.java": "\t\treturn \"Incompatible shapes: \"+describeArray(a)+\" vs. \"+describeArray(b);\n\t\treturn \"Can't broadcast \"+describeArray(a)+\" to shape of \"+describeArray(b);\n\t\treturn \"Element index \"+i+\" invalid for \"+describeArray(a);\n\t\treturn \"Subrange {start=\"+start+\", length=\"+length+\"} not valid on \"+describeArray(v);\n\t\treturn \"Matrix must be square: \"+describeArray(a);\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "d8196419",
        "queries": {
            "src/main/java/mikera/vectorz/AScalar.java": "isMutable boolean iterator shape shape offsets offsets offsets offsets subArray getSlices sliceCount index dimension \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException position slice slice dimensionality getTransposeView getTranspose dest dest getElements \"Element position must be zero for any scalar\" \"Length must be 0 or 1\" return return return return return return if if if if if length length length length length offset offset offset offset values values pos pos setElements y this this this this this this this invalidIndex invalidIndex invalidIndex invalidIndex IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException new new new new new new new new new new throw throw throw throw throw throw throw throw throw throw x x x x value set set void void void get get get get double double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ EMPTY_LONG_ARRAY SCALAR_LONG_SHAPE EMPTY_INT_ARRAY SCALAR_SHAPE int int int int int int int int int int int int int int int serialVersionUID long long final final final final final final final static static static private private private IScalar implements Object Object Object extends AScalar AScalar AScalar AScalar class abstract abstract abstract public public public public public public public public public public public public public public public public public LongArrays LongArrays IntArrays IntArrays ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages WrappedScalarVector SingleDoubleIterator ImmutableScalar Hash randomz AMatrix matrixx IDense IDense BroadcastScalarArray AbstractArray AbstractArray impl impl impl impl impl impl INDArray INDArray INDArray arrayz arrayz arrayz arrayz List List Iterator Iterator util util util util util DoubleBuffer nio java java java import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/util/ErrorMessages.java": "\"Can't create vector from class: \" o o cantCreateVector \"No derivative available for class: \" noDerivative \" with shape \" getSimpleName \"Can't reduce without initial value over zero elements\" \"Can't reduce without initial value in empty \" zeroElementReduce zeroElementReduce \"Incorrect number of elements\" wrongElementCount \"No elements available in \" noElements \"Matrix must be square: \" nonSquareMatrix \" on \" \"Illegal band \" band band invalidBand \"Not yet implemented!\" notYetImplemented \"Matrix is singular!\" singularMatrix \"Too many elements with shape: \" tooManyElements \"This error shouldn't be possible!!! Please report an issue with a stack trace at https://github.com/mikera/vectorz/issues\" impossible \"Insufficient elements \" insufficientElements \"Cannot access slices of 0-D \" noSlices \" on dimension \" \" does not have component: \" invalidComponent \" does not have slice: \" \" does not have slice: \" slice slice slice slice invalidSlice invalidSlice \"} not valid on \" \", length=\" \"Subrange {start=\" start start invalidRange \" invalid for \" \"Element index \" invalidElementIndex \"1-D access with index \" i i i i i i \"Access at position \" \"Access at position \" \"Access at position \" else else \" not possible for \" \" not possible for \" \" not possible for \" \" not possible for \" \" not possible for \" \" not possible for \" \"-D access with index \" \"-D access with index \" \"\" \"\" length length length length length length length length length length if if invalidIndex invalidIndex invalidIndex invalidIndex \" does not have dimension: \" dimension dimension dimension dimension invalidDimension \" is immutable!\" Object Object Object immutable \"Illegal shape: \" illegalSize \"Invalid index: \" position \"Square matrix required but got \" squareMatrixRequired \"Wrong source vector size: \" source source source source wrongSourceLength \"Wrong destination vector size: \" dest dest wrongDestLength \" at position: \" getClass getClass getClass getClass getClass getClass \"Can't mutate \" column column row row notFullyMutable \" to shape of \" \" to shape: \" \"Can't broadcast \" \"Can't broadcast \" incompatibleBroadcast incompatibleBroadcast \" vs. actual length: \" \"Incompatible shapes: specified length \" actual actual specified specified \" must match \" \"Index shape: \" v v v v \"Incompatible shape: \" m m m m m m incompatibleShape describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray describeArray \"Incompatible shapes: \" incompatibleShapes incompatibleShapes incompatibleShapes \" vs. \" \" vs. \" \"Mismatched sizes: \" b b b b b b mismatch ix ix ix ix copyOf IntArrays long long long long long long long pos pos pos pos pos pos pos pos pos pos wrap index index index index indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes int int int int int int int int int int int int int int int int int int int toString toString toString toString toString toString toString getShape getShape getShape getShape of of of of return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static private private private private private private private ErrorMessages ErrorMessages class public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public AVector AVector AVector AVector AVector AVector AMatrix AMatrix AMatrix AMatrix AMatrix matrixx Index Index Index Index Index Index Index Index AIndex AIndex AIndex indexz indexz INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray arrayz import import import import import util vectorz vectorz mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 13,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_files_num": 3,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/decompose/SVD.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java"
        ],
        "changed_java_files_num": 3,
        "commit": "87f5a79e",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiagonalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestPseudoInverses": "mii mii getTranspose testZeroPseudoInverse testDiagonalPseudoInverse2 testMiniPseudoInverse1 epsilonEquals epsilonEquals double double double double new new new new testBasicPseudoInverse calculate calculate calculate calculate calculate calculate PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse mi mi mi mi mi mi mi mi mi mi mi create create create create create create create create create m m m m m m m m m m m m testDiagonalPseudoInverse void void void void void @ @ @ @ @ TestPseudoInverses class public public public public public public ZeroMatrix ZeroMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix impl impl Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/decompose/SVD.java": "import mikera.matrixx.decompose.ISVDResult;\n\t\tint svNumber=0;\n\t\tfor (int i=0; i<s; i++) {\n\t\t\tif (svs.unsafeGet(i)==0.0) break;\n\t\t\tsvNumber++;\n\t\t}\n\t\t\tAVector newSvs=svs.subVector(0,svNumber); // truncated vector of singulat values\n\t\t\tAMatrix cU=svd.getU().subMatrix(0, m, 0, svNumber);\n\t\t\tAMatrix cV=svd.getV().subMatrix(0, n, 0, svNumber);\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "import mikera.matrixx.impl.DiagonalMatrix;\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "\t\tAMatrix m=DiagonalMatrix.create(2,0);\n\t\tassertEquals(DiagonalMatrix.create(0.5,0.0),mi);\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/decompose/SVD.java": [
                4,
                88,
                89,
                90,
                91,
                92,
                95,
                96,
                98
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                25
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                37,
                39
            ]
        },
        "diff_code": "+\t\tint svNumber=(int)svs.nonZeroCount();\n+\t\t\tint[] ixs=new int[svNumber];\n+\t\t\tint ix=0;\n+\t\t\tfor (int i=0; i<s; i++) {\n+\t\t\t\tif (svs.unsafeGet(i)==0.0) continue;\n+\t\t\t\tixs[ix++]=i;\n+\t\t\t}\n+\t\t\t\n+\t\t\tAVector newSvs=svs.selectClone(ixs); // truncated vector of singular values\n+\t\t\t\n+\t\t\tAMatrix U=svd.getU();\n+\t\t\tAMatrix V=svd.getV();\n+\t\t\tAMatrix cU=Matrix.create(m, svNumber);\n+\t\t\tAMatrix cV=Matrix.create(n, svNumber);\n+\t\t\tfor (int i=0; i<svNumber; i++) {\n+\t\t\t\tint si=ixs[i]; // index of non-zero singular value\n+\t\t\t\tcU.setColumn(i, U.getColumn(si));\n+\t\t\t\tcV.setColumn(i, V.getColumn(si));\n+\t\t\t}\n+\t\t\t\n+\t\tAMatrix m=DiagonalMatrix.create(0,2);\n+\t\tassertEquals(DiagonalMatrix.create(0.0,0.5),mi);\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/decompose/SVD.java": [
                4,
                88,
                91,
                92,
                93,
                94,
                95,
                96,
                98,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109
            ],
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": [
                37,
                39
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/decompose/SVD.java": "import mikera.matrixx.Matrix;\n\t\tint svNumber=(int)svs.nonZeroCount();\n\t\t\tint[] ixs=new int[svNumber];\n\t\t\tint ix=0;\n\t\t\tfor (int i=0; i<s; i++) {\n\t\t\t\tif (svs.unsafeGet(i)==0.0) continue;\n\t\t\t\tixs[ix++]=i;\n\t\t\t}\n\t\t\tAVector newSvs=svs.selectClone(ixs); // truncated vector of singular values\n\t\t\tAMatrix U=svd.getU();\n\t\t\tAMatrix V=svd.getV();\n\t\t\tAMatrix cU=Matrix.create(m, svNumber);\n\t\t\tAMatrix cV=Matrix.create(n, svNumber);\n\t\t\tfor (int i=0; i<svNumber; i++) {\n\t\t\t\tint si=ixs[i]; // index of non-zero singular value\n\t\t\t\tcU.setColumn(i, U.getColumn(si));\n\t\t\t\tcV.setColumn(i, V.getColumn(si));\n\t\t\t}\n",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "\t\tAMatrix m=DiagonalMatrix.create(0,2);\n\t\tassertEquals(DiagonalMatrix.create(0.0,0.5),mi);\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "e78dc6e0",
        "queries": {
            "src/main/java/mikera/matrixx/decompose/SVD.java": "length s columnCount n rowCount m int int int getSingularValues svs svs decomposeNonZero true decomposeCompact decomposeCompact compact compact boolean false return return return A A A A A A A A A A ISVDResult ISVDResult ISVDResult ISVDResult ISVDResult static static static static private SVD SVD class public public public public public AVector AVector vectorz DiagonalMatrix SvdImplicitQr SvdImplicitQr SvdImplicitQr SvdImplicitQr SVDResult svd svd svd svd impl impl impl Matrix AMatrix AMatrix AMatrix AMatrix AMatrix import import import import import import decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/matrixx/algo/TestPseudoInverses.java": "mii mii getTranspose testZeroPseudoInverse testDiagonalPseudoInverse2 testMiniPseudoInverse1 epsilonEquals epsilonEquals double double double double new new new new testBasicPseudoInverse calculate calculate calculate calculate calculate calculate PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse mi mi mi mi mi mi mi mi mi mi mi create create create create create create create create create m m m m m m m m m m m m testDiagonalPseudoInverse void void void void void @ @ @ @ @ TestPseudoInverses class public public public public public public ZeroMatrix ZeroMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix impl impl Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 12,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestPseudoInverses": 5,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/arrayz/Arrayz.java",
            "src/main/java/mikera/vectorz/Vectorz.java"
        ],
        "changed_files_num": 2,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/Arrayz.java",
            "src/main/java/mikera/vectorz/Vectorz.java"
        ],
        "changed_java_files_num": 2,
        "commit": "b2244eac",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n n n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiaginalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum testDenseArrayCreation Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/vectorz/Vectorz.java": "\t@SuppressWarnings(\"unchecked\")\n\t\t\treturn Vectorz.create((double[])o);\n\t}\n\tpublic static AVector create(Object o) {\n\t\treturn toVector(o);\n\t}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/Vectorz.java": [
                591,
                596,
                607,
                609,
                610,
                611
            ]
        },
        "diff_code": "+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static INDArray create(List<?> slices) {\n+\t\tint n=slices.size();\n+\t\tif (n==0) return Vector0.INSTANCE;\n+\t\tObject o1=slices.get(0);\n+\t\tif ((o1 instanceof AScalar)||(o1 instanceof Number)) {\n+\t\t\treturn Vectorz.create((List<Object>)slices);\n+\t\t} else if (o1 instanceof AVector) {\n+\t\t\treturn Matrixx.create((List<Object>)slices);\n+\t\t} else {\n+\t\t\tArrayList<INDArray> al=new ArrayList<INDArray>(n);\n+\t\t\tfor (Object o: slices) {\n+\t\t\t\tal.add(create(o));\n+\t\t\t}\n+\t\t\treturn SliceArray.create(al);\n+\t\t}\n+\t}\n+\t\n+\t\t\treturn Vectorz.wrap((double[])o);\n+\t\t} else {\n+\t\t\treturn create(o);\n+\t\t}\n+\t}\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static AVector create(Object o) {\n+\t\tif (o instanceof AVector) {\n+\t\t\treturn create((AVector)o);\n+\t\t} else if (o instanceof double[]) {\n+\t\t\treturn Vector.create((double)o);\n+\t} \n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/Arrayz.java": [
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109
            ],
            "src/main/java/mikera/vectorz/Vectorz.java": [
                595,
                600,
                601,
                602,
                603,
                610,
                611,
                612,
                613,
                614,
                615,
                622
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/arrayz/Arrayz.java": "\t@SuppressWarnings(\"unchecked\")\n\tpublic static INDArray create(List<?> slices) {\n\t\tint n=slices.size();\n\t\tif (n==0) return Vector0.INSTANCE;\n\t\tObject o1=slices.get(0);\n\t\tif ((o1 instanceof AScalar)||(o1 instanceof Number)) {\n\t\t\treturn Vectorz.create((List<Object>)slices);\n\t\t} else if (o1 instanceof AVector) {\n\t\t\treturn Matrixx.create((List<Object>)slices);\n\t\t} else {\n\t\t\tArrayList<INDArray> al=new ArrayList<INDArray>(n);\n\t\t\tfor (Object o: slices) {\n\t\t\t\tal.add(create(o));\n\t\t\t}\n\t\t\treturn SliceArray.create(al);\n\t\t}\n\t}\n",
            "src/main/java/mikera/vectorz/Vectorz.java": "\t\t\treturn Vectorz.wrap((double[])o);\n\t\t} else {\n\t\t\treturn create(o);\n\t\t}\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static AVector create(Object o) {\n\t\tif (o instanceof AVector) {\n\t\t\treturn create((AVector)o);\n\t\t} else if (o instanceof double[]) {\n\t\t\treturn Vector.create((double)o);\n\t} \n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "42886241",
        "queries": {
            "src/main/java/mikera/arrayz/Arrayz.java": "invalidSlice IndexOutOfBoundsException index index index index dimension dimension dimension array array array checkShape fillNormal fillNormal fillNormal fillNormal random random random random seed seed seed seed fillRandom fillRandom fillRandom fillRandom void void void void void m m sa sa sa tailArray subshape subshape createSparseArray createSparseArray ZERO createZeroArray createSparseMutable createSparseMutable createSparseMutable toArray \"Unable to create sparse array from input of type: \" os os os getLength reflect reflect lang lang getComponentType klass klass klass klass klass Class slice slice target target target it it Iterable Iterable Iterable arrs arrs arrs arrs sliceDims sliceDims sliceDims a0 a0 a0 sc sc sc sparseClone sparseClone sparseClone set set getSliceViews getSliceViews sliceCount sliceCount sliceCount sliceCount sliceCount toMatrix toMatrix asVector asVector asVector asVector asVector asVector createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse true isPackedStrides i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i st st st st st st st false false false boolean boolean isPackedLayout isPackedLayout strides strides strides strides strides strides strides strides strides strides offset offset offset offset offset offset offset offset wrapStrided wrapStrided wrapStrided wrapStrided ednString ednString String parse nextValue defaultConfiguration newParser p p newParseable pbr pbr reader reader load load createFromVector createFromVector createFromVector createFromVector createFromVector NDArray NDArray arrayProduct eec eec eec long long long ec ec ec cc cc cc rc rc rc insufficientElements insufficientElements insufficientElements IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException dlength dlength dlength dlength dlength dlength dlength dlength dlength dlength data data data data data data data data data data data data data data data data data data data data T T T T T T getShape getShape getShape getShape toDoubleArray toDoubleArray toDoubleArray wrap wrap wrap wrap wrap wrap wrap wrap wrap wrap wrap wrap wrap dimensionality dimensionality dimensionality dimensionality a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a Array Array Array Array Array Array Array default default default default createLength case case case case case case case case case case case case case case case switch switch switch switch switch length length length length length length length length length length length dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims dims shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape shape newArray newArray slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices slices \"Don't know how to create array from: \" throw throw throw throw throw throw asList isArray isArray getClass getClass getClass doubleValue add add add add add o o o o o o o o o o o o o o o o o o for for for for for for for for for for new new new new new new new new new new new new new al al al al al al else else else else else else else else else else else else else else else else else else else else else else else else else Number Number Number Number Number Number get get get get get get get get o1 o1 o1 o1 o1 o1 o1 o1 o1 INSTANCE INSTANCE size size size size n n n n n n n n n n n n n n n n n int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int list list list list of of double double double double double double double return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return instanceof instanceof instanceof instanceof instanceof instanceof instanceof instanceof instanceof instanceof instanceof instanceof instanceof instanceof if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if object object object object object object object object object object object object object object object Object Object Object Object Object Object Object Object Object Object Object Object Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray static static static static static static static static static static static static static static static static static static static static static static static static \"unchecked\" \"unchecked\" \"unchecked\" \"unchecked\" SuppressWarnings SuppressWarnings SuppressWarnings SuppressWarnings @ @ @ @ private Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz class class class public public public public public public public public public public public public public public public public public public public public public public public public public Parsers Parsers Parsers Parsers Parser Parser Parseable Parseable parser parser parser edn edn edn bpsm bpsm bpsm us us us VectorzException VectorzException IntArrays IntArrays IntArrays ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ZeroVector ZeroVector Vector0 Vector0 Vector0 SparseIndexedVector SparseIndexedVector ImmutableScalar ImmutableScalar ArraySubVector ArraySubVector ArrayIndexScalar ArrayIndexScalar ArrayIndexScalar Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar Scalar Scalar Scalar AVector AVector AVector AVector AScalar AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix StridedMatrix StridedMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix matrixx matrixx matrixx matrixx ZeroArray ZeroArray SliceArray SliceArray SliceArray SliceArray SliceArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl Random Random Random List List List List List List List List List List List List List List Arrays Arrays ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList ArrayList util util util util util util util StringReader StringReader Reader Reader io io java java java java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/Vectorz.java": "MIN_SPARSE_LENGTH int TEST_EPSILON double final final static static private Vectorz Vectorz class public public public Parsers Parser CollectionBuilder parser parser parser edn edn edn bpsm bpsm bpsm us us us VectorzException ErrorMessages ZeroVector Vector0 StridedVector SparseIndexedVector SingleElementVector RepeatedElementVector RangeVector AxisVector ArraySubVector AStridedVector ADenseArrayVector impl impl impl impl impl impl impl impl impl impl impl Rand AIndex indexz INDArray arrayz Random List ArrayList util util util util util util DoubleBuffer nio java java java java import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 11,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 13,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/matrixx/algo/IPLSResult.java",
            "src/main/java/mikera/matrixx/algo/PLS.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPLS.java"
        ],
        "changed_files_num": 4,
        "changed_java_files": [
            "src/main/java/mikera/matrixx/algo/IPLSResult.java",
            "src/main/java/mikera/matrixx/algo/PLS.java",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java",
            "src/test/java/mikera/matrixx/algo/TestPLS.java"
        ],
        "changed_java_files_num": 4,
        "commit": "0b938530",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiagonalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPLS": "epsilonEquals assertTrue getQ getB innerProduct innerProduct coeff coeff getTranspose getTranspose getP PseudoInverse ptinv ptinv calculate calculate PLS pls pls pls pls IPLSResult Y Y double double double new new new create create create X X testPLS void @ TestPLS class public public Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestPseudoInverses": "mii mii getTranspose testZeroPseudoInverse testDiagonalPseudoInverse2 testMiniPseudoInverse1 epsilonEquals epsilonEquals double double double double new new new new testBasicPseudoInverse calculate calculate calculate calculate calculate calculate PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse PseudoInverse mi mi mi mi mi mi mi mi mi mi mi create create create create create create create create create m m m m m m m m m m m m testDiagonalPseudoInverse void void void void void @ @ @ @ @ TestPseudoInverses class public public public public public public ZeroMatrix ZeroMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix impl impl Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/matrixx/algo/PLS.java": "public class PLS {\n\tprivate PLS() {};\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\t\tif (computeUSV())\n\t\t\treturn null;\n\tprivate boolean computeUSV() {\n\t\tboolean ret = !qralg.process();\n\t\treturn ret;\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/algo/PLS.java": [
                8,
                11
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                152,
                153,
                189,
                213,
                219
            ]
        },
        "diff_code": "+\t\n+\tpublic AMatrix getX();\n+\t\n+\tpublic AMatrix getY();\n+\t\n+\tpublic AMatrix getT();\n+\t\n+\tpublic AMatrix getP();\n+\tpublic AMatrix getQ();\n+\tpublic AMatrix getW();\n+\tpublic AMatrix getB();\n+\t\n+\tprivate final AMatrix origX;\n+\t\n+\tprivate final Matrix X;\n+\tprivate final Matrix Y; \n+\tprivate final Matrix P; \n+\tprivate final Matrix Q; \n+\tprivate final Matrix T; \n+\tprivate final Matrix U;\n+\tprivate final Matrix W;\n+\tprivate final Vector b;\n+\tprivate final DiagonalMatrix B;\n+\tprivate final int l; \n+\tprivate final int n; \n+\tprivate final int m; \n+\tprivate final int p;\n+\t\n+\t\n+\t\n+\t@Override\n+\tpublic AMatrix getX() {\n+\t\treturn origX;\n+\t}\n+\t@Override\n+\tpublic AMatrix getY() {\n+\t\treturn Y;\n+\t}\n+\t@Override\n+\tpublic AMatrix getT() {\n+\t\treturn T;\n+\t}\n+\t@Override\n+\tpublic AMatrix getP() {\n+\t\treturn P;\n+\t}\n+\t\n+\t@Override\n+\tpublic AMatrix getQ() {\n+\t\treturn Q;\n+\t}\n+\t@Override\n+\tpublic AMatrix getW() {\n+\t\treturn W;\n+\t}\n+\t@Override\n+\tpublic AMatrix getB() {\n+\t\treturn B;\n+\t}\n+\tprivate PLS(AMatrix X, AMatrix Y, int nFactors) {\n+\t\tthis.origX=X;\n+\t\tthis.Y=Matrix.create(Y);\n+\t\tthis.X=Matrix.create(origX);\n+\t\tn=X.rowCount();\n+\t\tm=X.columnCount();\n+\t\tl=nFactors;\n+\t\tp=Y.columnCount();\n+\t\tif(Y.rowCount()!=n) throw new IllegalArgumentException(\"PLS regression requires equal number of rows in X annd Y matrices\");\n+\t\t\n+\t\tT=Matrix.create(n,l);\n+\t\tU=Matrix.create(n,l);\n+\t\tP=Matrix.create(m,l);\n+\t\tQ=Matrix.create(p,l);\n+\t\tW=Matrix.create(m,l);\n+\t\tb=Vector.createLength(l);\n+\t\tB=DiagonalMatrix.createDimensions(l);\n+\t};\n+\tpublic static IPLSResult calculate(AMatrix X, AMatrix Y, int nFactors) {\n+\t\t PLS pls= new PLS(X, Y, nFactors);\n+\t\t pls.calcResult();\n+\t\t return pls;\n+\t}\n+\t\n+\tprivate int selectMaxSSColumn(AMatrix A) {\n+\t\tint c=0;\n+\t\tdouble best=0.0;\n+\t\tfor (int i=0; i<m; i++) {\n+\t\t\tdouble ss=A.getColumn(i).elementSquaredSum();\n+\t\t\tif (ss>best) {\n+\t\t\t\tc=i;\n+\t\t\t\tbest=ss;\n+\t\t\t}\n+\t\t}\n+\t\treturn c;\n+\t}\n+\tprivate void calcResult() {\n+\t\tVector u=Vector.createLength(n);\n+\t\tVector w=Vector.createLength(m);\n+\t\tVector t=Vector.createLength(n);\n+\t\tVector t_old=Vector.createLength(n);\n+\t\tVector q=Vector.createLength(p);\n+\t\tVector pv=Vector.createLength(m);\n+\t\t\n+\t\tfor (int j=0; j<m; j++) {\n+\t\t\tAVector col=X.getColumnView(j);\n+\t\t\tdouble mean=col.elementSum()/n;\n+\t\t\tcol.add(-mean);\n+\t\t}\n+\t\tfor (int i=0; i<l; i++) {\n+\t\t\tu.set(X.getColumn(selectMaxSSColumn(X)));\n+\t\t\t\n+\t\t\tint maxIterations=10;\n+\t\t\tint iterations=0;\n+\t\t\twhile (iterations++<=maxIterations) {\n+\t\t\t\tw.setInnerProduct(u, X);\n+\t\t\t\tw.normalise();\n+\t\t\t\tt.setInnerProduct(X, w);\n+\t\t\t\tt.normalise();\n+\t\t\t\tq.setInnerProduct(t, Y);\n+\t\t\t\tif (q.normalise()==0) break; // exit if q length is zero\n+\t\t\t\tu.setInnerProduct(Y, q);\n+\t\t\t\t\n+\t\t\t\tdouble dist=t.distance(t_old);\n+\t\t\t\tif(dist<0.00000000001) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t} else {\n+\t\t\t\t\tt_old.set(t);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\tU.setColumn(i, u);\n+\t\t\tW.setColumn(i, w);\n+\t\t\tT.setColumn(i, t);\n+\t\t\tQ.setColumn(i, q);\n+\t\t\tb.set(i,t.dotProduct(u));\n+\t\t\t\n+\t\t\tpv.setInnerProduct(t, X);\n+\t\t\tdouble tss=t.elementSquaredSum();\n+\t\t\tif (tss!=0.0) pv.multiply(1.0/tss);\n+\t\t\tP.setColumn(i, pv);\n+\t\t\t\n+\t\t\tpv.negate();\n+\t\t\tX.addOuterProduct(t, pv);\n+\t\t}\n+\t\tB.getLeadingDiagonal().set(b);\n+\t}\n+\t\n+\t\tcomputeUSV();\n+\tprivate void computeUSV() {\n+\t\tqralg.process();\n+\t@Test\n+\tpublic void testPLS() {\n+\t\tAMatrix X=Matrix.create(new double[][]{{-1},\n+\t\t\t\t\t\t\t\t\t\t\t   {2}});\n+\t\tAMatrix Y=Matrix.create(new double[][]{{1,1},\n+\t\t\t\t\t\t\t\t\t\t\t   {7,10.000}});\n+\t\tIPLSResult pls=PLS.calculate(X,Y,2);\n+\t\tAMatrix ptinv=PseudoInverse.calculate(pls.getP().getTranspose());\n+\t\tAMatrix coeff=ptinv.innerProduct(pls.getB().innerProduct(pls.getQ().getTranspose()));\n+\t\tassertTrue(coeff.epsilonEquals(Matrix.create(new double[][]{{2,3}})));\n+\t}\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/matrixx/algo/IPLSResult.java": [
                1,
                3,
                5,
                11,
                17,
                23,
                30,
                36,
                42,
                48,
                52
            ],
            "src/main/java/mikera/matrixx/algo/PLS.java": [
                3,
                4,
                5,
                6,
                7,
                14,
                15,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                27,
                28,
                29,
                30,
                34,
                35,
                36,
                37,
                39,
                40,
                41,
                42,
                44,
                45,
                46,
                47,
                49,
                50,
                51,
                52,
                54,
                55,
                56,
                57,
                59,
                60,
                61,
                62,
                64,
                65,
                66,
                67,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                89,
                90,
                91,
                92,
                93,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                117,
                118,
                119,
                120,
                121,
                123,
                125,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                146,
                147,
                148,
                149,
                150,
                153,
                154,
                155,
                156,
                159,
                160,
                161,
                162,
                163
            ],
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": [
                151,
                187,
                211
            ],
            "src/test/java/mikera/matrixx/algo/TestPLS.java": [
                1,
                3,
                5,
                7,
                8,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                23
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/matrixx/algo/IPLSResult.java": "package mikera.matrixx.algo;\nimport mikera.matrixx.AMatrix;\npublic interface IPLSResult {\n\tpublic AMatrix getX();\n\tpublic AMatrix getY();\n\tpublic AMatrix getT();\n\tpublic AMatrix getP();\n\tpublic AMatrix getQ();\n\tpublic AMatrix getW();\n\tpublic AMatrix getB();\n}\n",
            "src/main/java/mikera/matrixx/algo/PLS.java": "import mikera.matrixx.AMatrix;\nimport mikera.matrixx.Matrix;\nimport mikera.matrixx.impl.DiagonalMatrix;\nimport mikera.vectorz.AVector;\nimport mikera.vectorz.Vector;\npublic class PLS implements IPLSResult {\n\tprivate final AMatrix origX;\n\tprivate final Matrix X;\n\tprivate final Matrix Y; \n\tprivate final Matrix P; \n\tprivate final Matrix Q; \n\tprivate final Matrix T; \n\tprivate final Matrix U;\n\tprivate final Matrix W;\n\tprivate final Vector b;\n\tprivate final DiagonalMatrix B;\n\tprivate final int l; \n\tprivate final int n; \n\tprivate final int m; \n\tprivate final int p;\n\t@Override\n\tpublic AMatrix getX() {\n\t\treturn origX;\n\t}\n\t@Override\n\tpublic AMatrix getY() {\n\t\treturn Y;\n\t}\n\t@Override\n\tpublic AMatrix getT() {\n\t\treturn T;\n\t}\n\t@Override\n\tpublic AMatrix getP() {\n\t\treturn P;\n\t}\n\t@Override\n\tpublic AMatrix getQ() {\n\t\treturn Q;\n\t}\n\t@Override\n\tpublic AMatrix getW() {\n\t\treturn W;\n\t}\n\t@Override\n\tpublic AMatrix getB() {\n\t\treturn B;\n\t}\n\tprivate PLS(AMatrix X, AMatrix Y, int nFactors) {\n\t\tthis.origX=X;\n\t\tthis.Y=Matrix.create(Y);\n\t\tthis.X=Matrix.create(origX);\n\t\tn=X.rowCount();\n\t\tm=X.columnCount();\n\t\tl=nFactors;\n\t\tp=Y.columnCount();\n\t\tif(Y.rowCount()!=n) throw new IllegalArgumentException(\"PLS regression requires equal number of rows in X annd Y matrices\");\n\t\tT=Matrix.create(n,l);\n\t\tU=Matrix.create(n,l);\n\t\tP=Matrix.create(m,l);\n\t\tQ=Matrix.create(p,l);\n\t\tW=Matrix.create(m,l);\n\t\tb=Vector.createLength(l);\n\t\tB=DiagonalMatrix.createDimensions(l);\n\t};\n\tpublic static IPLSResult calculate(AMatrix X, AMatrix Y, int nFactors) {\n\t\t PLS pls= new PLS(X, Y, nFactors);\n\t\t pls.calcResult();\n\t\t return pls;\n\t}\n\tprivate int selectMaxSSColumn(AMatrix A) {\n\t\tint c=0;\n\t\tdouble best=0.0;\n\t\tfor (int i=0; i<m; i++) {\n\t\t\tdouble ss=A.getColumn(i).elementSquaredSum();\n\t\t\tif (ss>best) {\n\t\t\t\tc=i;\n\t\t\t\tbest=ss;\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}\n\tprivate void calcResult() {\n\t\tVector u=Vector.createLength(n);\n\t\tVector w=Vector.createLength(m);\n\t\tVector t=Vector.createLength(n);\n\t\tVector t_old=Vector.createLength(n);\n\t\tVector q=Vector.createLength(p);\n\t\tVector pv=Vector.createLength(m);\n\t\tfor (int j=0; j<m; j++) {\n\t\t\tAVector col=X.getColumnView(j);\n\t\t\tdouble mean=col.elementSum()/n;\n\t\t\tcol.add(-mean);\n\t\t}\n\t\tfor (int i=0; i<l; i++) {\n\t\t\tu.set(X.getColumn(selectMaxSSColumn(X)));\n\t\t\tint maxIterations=10;\n\t\t\tint iterations=0;\n\t\t\twhile (iterations++<=maxIterations) {\n\t\t\t\tw.setInnerProduct(u, X);\n\t\t\t\tw.normalise();\n\t\t\t\tt.setInnerProduct(X, w);\n\t\t\t\tt.normalise();\n\t\t\t\tq.setInnerProduct(t, Y);\n\t\t\t\tif (q.normalise()==0) break; // exit if q length is zero\n\t\t\t\tu.setInnerProduct(Y, q);\n\t\t\t\tdouble dist=t.distance(t_old);\n\t\t\t\tif(dist<0.00000000001) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tt_old.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tU.setColumn(i, u);\n\t\t\tW.setColumn(i, w);\n\t\t\tT.setColumn(i, t);\n\t\t\tQ.setColumn(i, q);\n\t\t\tb.set(i,t.dotProduct(u));\n\t\t\tpv.setInnerProduct(t, X);\n\t\t\tdouble tss=t.elementSquaredSum();\n\t\t\tif (tss!=0.0) pv.multiply(1.0/tss);\n\t\t\tP.setColumn(i, pv);\n\t\t\tpv.negate();\n\t\t\tX.addOuterProduct(t, pv);\n\t\t}\n\t\tB.getLeadingDiagonal().set(b);\n\t}\n",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "\t\tcomputeUSV();\n\tprivate void computeUSV() {\n\t\tqralg.process();\n",
            "src/test/java/mikera/matrixx/algo/TestPLS.java": "package mikera.matrixx.algo;\nimport static org.junit.Assert.*;\nimport org.junit.Test;\nimport mikera.matrixx.AMatrix;\nimport mikera.matrixx.Matrix;\npublic class TestPLS {\n\t@Test\n\tpublic void testPLS() {\n\t\tAMatrix X=Matrix.create(new double[][]{{-1},\n\t\t\t\t\t\t\t\t\t\t\t   {2}});\n\t\tAMatrix Y=Matrix.create(new double[][]{{1,1},\n\t\t\t\t\t\t\t\t\t\t\t   {7,10.000}});\n\t\tIPLSResult pls=PLS.calculate(X,Y,2);\n\t\tAMatrix ptinv=PseudoInverse.calculate(pls.getP().getTranspose());\n\t\tAMatrix coeff=ptinv.innerProduct(pls.getB().innerProduct(pls.getQ().getTranspose()));\n\t\tassertTrue(coeff.epsilonEquals(Matrix.create(new double[][]{{2,3}})));\n\t}\n}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestPLS",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "87f5a79e",
        "queries": {
            "src/main/java/mikera/matrixx/algo/IPLSResult.java": "getB getW getQ getP getT getY getX IPLSResult interface public public public public public public public public AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix import algo matrixx matrixx mikera mikera package ",
            "src/main/java/mikera/matrixx/algo/PLS.java": "pv q t_old t w u void elementSquaredSum getColumn ss ss ss i i i i i for best best best double double c c c A A selectMaxSSColumn calcResult calcResult pls pls pls calculate static createDimensions createLength createLength createLength createLength createLength createLength createLength \"PLS regression requires equal number of rows in X annd Y matrices\" IllegalArgumentException new new throw if if columnCount columnCount rowCount rowCount create create create create create create create this this this nFactors nFactors nFactors nFactors getB getW getQ getP getT getY return return return return return return return return return getX Override Override Override Override Override Override Override @ @ @ @ @ @ @ p p p p m m m m m m m n n n n n n n n l l l l l l l l l int int int int int int int int int B B B b b W W W U U T T T Q Q Q P P P Y Y Y Y Y Y Y Y Y X X X X X X X X origX origX origX origX final final final final final final final final final final final final final final private private private private private private private private private private private private private private private private private IPLSResult IPLSResult implements PLS PLS PLS PLS class public public public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix impl Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/decompose/impl/svd/SvdImplicitQr.java": "numCols numRows int int private private SvdImplicitQr class public Vector AVector vectorz vectorz IBidiagonalResult Bidiagonal Matrix AMatrix import import import import import import svd impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "src/test/java/mikera/matrixx/algo/TestPLS.java": "epsilonEquals assertTrue getQ getB innerProduct innerProduct coeff coeff getTranspose getTranspose getP PseudoInverse ptinv ptinv calculate calculate PLS pls pls pls pls IPLSResult Y Y double double double new new new create create create X X testPLS void @ TestPLS class public public Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 12,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPLS": 1,
            "TestPrimitiveVectors": 6,
            "TestPseudoInverses": 5,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    },
    {
        "changed_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java",
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/matrixx/impl/ABandedMatrix.java",
            "src/main/java/mikera/matrixx/impl/ASparseRCMatrix.java",
            "src/main/java/mikera/matrixx/impl/BandedMatrix.java",
            "src/main/java/mikera/matrixx/impl/BroadcastVectorMatrix.java",
            "src/main/java/mikera/matrixx/impl/ColumnMatrix.java",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java"
        ],
        "changed_files_num": 14,
        "changed_java_files": [
            "src/main/java/mikera/arrayz/INDArray.java",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java",
            "src/main/java/mikera/matrixx/AMatrix.java",
            "src/main/java/mikera/matrixx/impl/ABandedMatrix.java",
            "src/main/java/mikera/matrixx/impl/ASparseRCMatrix.java",
            "src/main/java/mikera/matrixx/impl/BandedMatrix.java",
            "src/main/java/mikera/matrixx/impl/BroadcastVectorMatrix.java",
            "src/main/java/mikera/matrixx/impl/ColumnMatrix.java",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java",
            "src/main/java/mikera/vectorz/AScalar.java",
            "src/main/java/mikera/vectorz/AVector.java",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java"
        ],
        "changed_java_files_num": 14,
        "commit": "8d66a481",
        "data_objects": {
            "BitVectorTest": "v2 v2 v2 clone clone v v v create create sub createUniformRandomVector Vectorz rv rv rv testBigBitVector elementSum elementSum elementSum elementSum bitCount Long testElementSum testConstruct isView assertTrue Vector Vector Vector subVector sb sb sb AVector AVector AVector AVector testSubVector set set set set of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new new b b b b b b b b b b b b b b b b BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector BitVector testSet void void void void void @ @ @ @ @ BitVectorTest class public public public public public public Test Test Test Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "Test3DVectors": "a a a a for testAll testSubVector return i i int double Override join join join join Vector1 Vector1 Vector1 Vector1 vectors_3D vectors_3D \"serial\" SuppressWarnings @ @ @ @ Vector2 Vector2 append append grownVector grownVector grownVector grownVector GrowableVector GrowableVector temp temp testVector testVector testVector get get get get testValues testValues of of of of of of of of of of of of Vector3 Vector3 Vector3 Vector3 add assertNotEquals negate negate negate n n n n n n n n testNegate testNegate Vector Vector Vector Vector new new new new subVector subVector subVector subVector subVector NaN NaN NaN Double Double Double fill fill fill clone clone clone clone testMutateClone testMutateClone dotProduct magnitudeSquared assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v v v v v v v v v v v v v v v v v v v v v v v v AVector AVector AVector AVector AVector AVector AVector AVector AVector testDot testDot void void void void void void void private private private private private Test3DVectors class public public public public Test Test Test AComputedVector AComputedVector impl Assert junit junit org org static import import import vectorz vectorz mikera mikera package ",
            "TestAffine": "t3 t3 Translation3 Translation3 a23 a23 Affine23 Affine23 a34 a34 Affine34 Affine34 AffineMN createTranslation rtrans rtrans rtrans ATranslation rvector rvector createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix identityTranslation identityTranslation Transformz Transformz Transformz createRandomMatrix m65 m65 m65 genericAffineTests of of of of genericConstantTests @ @ doTransformTests TestTransformz MatrixTransform doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests doAffineTests isUnitLengthVector isZero transformNormal normalise new new new new new new new new new new fillGaussian newVector newVector dimensions dimensions dimensions return if testNormalTransform testNormalTransform testCloneTransform testCloneTransform copyOfTranslationVector copyOfTranslationVector getTranslationVector getTranslationVector assertNotNull r r r r r r r r createZeroVector createZeroVector testApplyToZeroVector testApplyToZeroVector transformInPlace z z z z z z z z getTranslation getTranslation getTranslation getTranslation rowCount columnCount testAffineDecomposition testAffineDecomposition private private private private private private epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals r2 r2 r2 r2 r2 r2 r2 r2 r2 r2 add add clone clone clone clone r1 r1 r1 r1 r1 r1 r1 transform transform transform transform transform transform tv tv innerProduct innerProduct getMatrix getMatrix getMatrix getMatrix td td d d d d d d d createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v isLinear assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue isSquare isSquare isSquare assertEquals assertEquals assertEquals outputDimensions outputDimensions outputDimensions outputDimensions outputDimensions outputDim outputDim inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDimensions inputDim inputDim inputDim inputDim int int int t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform AAffineTransform testAffineProperty testAffineProperty void void void void void void void void void TestAffine class public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz ConstantTransform ConstantTransform ConstantTransform ConstantTransform ConstantTransform impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx Assert static Test Test Test junit junit org org Random Random util java import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAltLU": "testDecompose void @ TestAltLU class public public Test Test TriangularSolver solve ILUPResult Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertNotEquals assertFalse assertEquals assertArrayEquals Assert Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit junit org org org org org org org org static static static static static static static import import import import import import import import import import import import import import lu impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestArrays": "RuntimeException slice testSlices r2 r2 r1 r1 rotateView rotateView rotateView size size testRotateView new subArray a2 a2 n n testSubArray toArray sliceCount createSequence reorder copy c c c return return return if if if testReorder e e e IndexOutOfBoundsException IndexOutOfBoundsException catch catch catch try try try reshape elementCount elementCount r r r r getLongShape longShape longShape long long i i i i i i i i i i i i i i i i i i i i i for for for for length length length length dimensionality dimensionality dimensionality dimensionality dimensionality dims dims dims dims dims dims dims dims getShape getShape getShape getShape getShape getShape shape shape shape shape shape shape shape shape int int int int int int int int int int int asVector v v v a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testShape void void void void void private private private private private TestArrays class public VectorzException IntArrays DoubleArrays Constant ops Vectorz Vector Tools TestingUtils TestOps Scalar Ops Op AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix VectorMatrixM3 Matrixx AMatrix matrixx matrixx matrixx matrixx Indexz Indexz indexz SliceArray JoinedArray ImmutableArray IStridedArray IDense BroadcastScalarArray impl impl impl impl impl impl impl impl Test List Iterator Arrays util util util util util util DoubleBuffer nio StringReader io java java java java java fail fail fail fail assertTrue assertNull assertNotNull assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert Assert junit junit junit junit junit junit junit org org org org org org org static static static static static static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestAxisVector": "square testSquare of dotProduct assertEquals create create v v v v AxisVector AxisVector AxisVector AxisVector testDot void void @ @ TestAxisVector class public public public Vector Vector Test Test Test Assert junit junit org org static import import import impl vectorz vectorz mikera mikera package ",
            "TestBanded": "getLeadingDiagonal setElements of of sm sm sm isZero subMatrix subMatrix assertTrue DiagonalMatrix testBandedSubMatrix BandedMatrix testBandedBandwidth fill fill getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals create create create m m m m m m m m m m m m m m m m m m m m testBandwidths void void void @ @ @ TestBanded class public public public public Vector Vector Vector vectorz Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Assert junit junit org org static import import import import import impl matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestBands": "add innerProduct innerProduct assertFalse isSymmetric isSymmetric assertTrue AMatrix testBandedCase createIdentityMatrix Matrixx fill fill bm bm bm testBandedMatrix testWrappedBand length length bandLength bandLength bandLength bandLength bandLength bandLength bandLength bandLength testBandLength testDiagonalMatrix getBandWrapped getBandWrapped getBandWrapped getBandWrapped getBand getBand getBand getBand getBand getBand of of of of of of of of lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidth lowerBandwidth upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidth upperBandwidth assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals asVector fillIndexes create create create create create create m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m Matrix Matrix Matrix Matrix Matrix Matrix testFilledMatrix void void void void void void @ @ @ @ @ @ TestBands class public public public public public public public Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector vectorz vectorz DiagonalMatrix DiagonalMatrix DiagonalMatrix BandedMatrix BandedMatrix BandedMatrix BandedMatrix impl impl Assert junit junit org org static import import import import import import matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBidiagonalRow": "a create testZero createIdentity testIdentity wide wide wide wide checkGenericCompact checkGenericCompact checkGenericCompact checkGenericCompact true true true true ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact ansCompact checkGeneric checkGeneric checkGeneric checkGeneric checkGeneric ans ans ans ans ans ans ans ans ans ans ans ans ans createRandom createRandom A A A A A A A A A A A A A A A A A A A A tall tall tall tall N N N N N N N i i i int int int int for for for for testRandomMatrices void void void void @ @ @ new rand protected protected TestBidiagonalRow class public public public public assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull assertNotNull Assert Assert static static Test Test Test Test junit junit junit org org org BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow BidiagonalRow IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult IBidiagonalResult Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java import import import import import import import import bidiagonal bidiagonal impl impl decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestBigSparse": "testBigVectorMultiply addMultiple testBigVectorAdd fillGaussian createLength testSparseColumnDotProduct magnitudeSquared b b createRandomChoice createRandomChoice a a a a a VALS VALS VALS VALS VALS VALS VALS testBigSparseDotProduct clone v3 v3 v3 v3 dotProduct dotProduct dotProduct dotProduct createRange v2 v2 v2 v2 v2 createSparseMutable createSparseMutable createSparseMutable testBigDotProduct isFullyMutable getClass \"Not fully sparse:\" sparseClone sparseClone testBigZeros isSameShape mmt mmt testSparseInnerProduct addCopy mz mz isZero isZero add add testSparseAdd MAX MAX reduce reduce testBigReduce testBigMultiply3 isSparse nextGaussian nextGaussian nextGaussian nextGaussian nextInt nextInt nextInt nextInt nextInt nextInt nextInt nextInt i i i i i i i i i i i i for for for for new new new new testBigMultiply2 create create create create create create create createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v testBigMatrixVectorDot multiply get get get get get get innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r r r r r r r r SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE SIZE int int int int int int int int int int int int int int int int int testBigMultiply density assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue mt mt mt mt mt mt mt exactClone set set set set set set set set set set set set set getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose getTranspose createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse createSparse testBigMatrix createSparseArray Arrayz INDArray testBigArray @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ elementMin elementMax elementMax elementMax elementSquaredSum elementSum elementSum elementSum nonZeroCount nonZeroCount elementCount elementCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigStats testBigStats testBigStats void void void void void void void void void void void void void void void void private TestBigSparse class public public public public public public public public public public public public public public public public SparseIndexedVector SparseIndexedVector SparseIndexedVector SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RangeVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Scalar Ops Ops Ops AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random Random Random Random Random Random Random Random Random Rand util util ZeroMatrix ZeroMatrix ZeroMatrix SparseRowMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix IdentityMatrix impl impl impl impl impl impl impl impl Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx Indexz Indexz Indexz indexz Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestChol": "toMatrix getL foundL assertNotNull ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ true true canL canL boolean boolean new rand false canR canR TestChol TestChol class public public public Test Test Cholesky Cholesky ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java Assert junit junit org org static import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholInner": "toMatrix getL foundL ans ans ans L dataL dataL create create A A dataA dataA double double return if testDecomposeL void @ canR true true canL canL boolean boolean new rand TestCholInner class public public Test Test CholeskyInner CholeskyInner ICholeskyResult ICholeskyResult Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNotNull assertNotNull assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDU": "testNotPositiveDefinate toDoubleArray getLeadingDiagonal getD getElements getElements toMatrix getL foundL foundL ans ans ans ans D D L L dataL dataL create create create A A A A dataA dataA dataA dataA double double double double double testDecompose void void @ @ new new rand TestCholLDU class public public public Test Test Test CholeskyLDU CholeskyLDU CholeskyLDU ICholeskyLDUResult ICholeskyLDUResult Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Random Random Random util java assertNull assertNull assertNotNull assertNotNull assertArrayEquals assertArrayEquals assertArrayEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import chol chol impl impl decompose decompose decompose decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestCholLDUSolver": "b dataB dataB create create A dataA dataA double double testInverseAndSolve void @ new rand TestCholLDUSolver class public public assertTrue assertArrayEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org CholeskyLDUSolver impl Matrix Matrix Matrix Matrix Matrix import import import import import import chol solve solve matrixx matrixx matrixx mikera mikera mikera package ",
            "TestCholSolver": "tests tests BaseCholSolveTests BaseCholSolveTests new new solver solver standardTests standardTests void @ TestCholSolver class public public Test Test junit org CholeskySolver CholeskySolver CholeskySolver impl import import chol solve solve matrixx matrixx mikera mikera package ",
            "TestCholesky": "getTranspose innerProduct createRandomMatrix z z z testCholesky assertEquals validateCholesky r r a a a a a double new create create original original original testCholeskyRegression void void @ @ TestCholesky class public public public Test Test Test ZeroMatrix IdentityMatrix impl impl ICholeskyResult ICholeskyResult Cholesky Cholesky decompose decompose decompose Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDecomposition": "testLU assertEquals getL L L of of of of of of create create Matrixx Matrixx m m AMatrix AMatrix testCholesky void void @ @ TestDecomposition class public public public Vector Vector Vector Vector Vector Vector Vector vectorz PermutationMatrix IdentityMatrix ThinSVD svd SimpleLUP lu impl impl impl impl QR ISVDResult IQRResult ILUPResult Cholesky Cholesky decompose decompose decompose decompose decompose decompose decompose decompose Test Test Test Assert junit junit org org static import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestDenseMultiply": "transposeInnerProduct testTransposeMul directMultiply toMatrixTranspose toMatrixTranspose mt mt mt mt mt mt mt mt mt mt testRectangularMul testSmallMul naiveMultiply naiveMultiply naiveMultiply naiveMultiply doubleBlockedMultiply blockedMultiply blockedMultiply blockedMultiply blockedMultiply multiply multiply multiply multiply assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals innerProduct innerProduct innerProduct ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip ip createRandomMatrix createRandomMatrix createRandomMatrix createRandomMatrix m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m m testBigMul void void void void @ @ @ @ TestDenseMultiply class public public public public public Test Test Test Test Test Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Multiplications Matrixx Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix Assert junit junit org org static import import import import import import algo algo matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestDeterminant": "testDetEquivalence4 calculateLUPDeterminant calculateLUPDeterminant naiveDeterminant naiveDeterminant assertEquals assertEquals testDetEquivalence3 determinant d double createRandomSquareMatrix createRandomSquareMatrix createRandomSquareMatrix m m m m m m m m testDeterminant void void void \"unused\" SuppressWarnings @ @ @ @ TestDeterminant class public public public public Determinant Determinant Determinant Determinant Determinant Matrixx Matrixx Matrixx Matrixx Matrix Matrix Matrix Matrix Test Test Test Test Assert junit junit org org static import import import import import algo algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestDiagonalMatrix": "of of addOuterProductSparse testAddOuterProductSparse addCopy double new isFullyMutable clone testDiagonalAdd isPositiveSemiDefinite isPositiveSemiDefinite isPositiveSemiDefinite isPositiveDefinite isPositiveDefinite isPositiveDefinite testDefinite assertFalse assertFalse assertFalse assertFalse isOrthogonal isOrthogonal assertTrue assertTrue assertTrue assertTrue assertTrue testOrthogonal innerProduct assertEquals assertEquals assertEquals b b create create create create create create create create create create create create create create create create a a a a a DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix testInnerProduct void void void void void @ @ @ @ @ TestDiagonalMatrix class public public public public public public Test Test Test Test Test Test Vector Vector Vector vectorz Definite Definite Definite Definite Definite Definite Definite algo Matrix22 Matrix22 Matrix Matrix Assert junit junit org org static import import import import import import impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera package ",
            "TestErrors": "of describeArray ErrorMessages \"Vector with shape [3]\" assertEquals testDescribe void @ TestErrors class public public Vector Vector Test Test Assert junit junit org org static import import import util vectorz vectorz mikera mikera package ",
            "TestFFT": "r2 r2 r1 r1 r0 r0 testFFTReverise realForwardFull fft fft fft random random random random Math Math Math Math r r r new new new new d d d d d d d d d double double double double double double double double testFFT void void @ @ TestFFT class public public public Test Test Test FFT FFT FFT FFT FFT assertEquals assertEquals assertEquals Assert junit junit org org static import import import algo algo matrixx matrixx mikera mikera package ",
            "TestGrowableVector": "i i i i i i i i i int int for for testGrowingLarge set get get get get get of Vector testGrowableCopy @ @ length length length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals append append append new new new g g g g g g g g g g g g g g g g GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector GrowableVector v v v v v v AVector AVector doGrowableTest doGrowableTest void void void TestGrowableVector class public public public public Test Test Test Assert junit junit org org static import import vectorz mikera package ",
            "TestHessenbergSimilarDecomposition": "getH H toMatrix toMatrix getQ Q HessenbergSimilarDecomposition result result result HessenbergResult checkItAll checkItAll createRandom A A A A testItAllTogether void void @ TOLERANCE double private private TestHessenbergSimilarDecomposition class public public assertTrue Assert static static Test Test junit junit org org Vector vectorz Multiplications algo Matrix Matrix Matrix Matrix Matrix Matrix import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderColQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void HouseholderColQR return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderColQR class public public assertTrue assertEquals Assert Assert static static Test Test junit junit junit org org org AStridedMatrix Multiplications algo Matrix Matrix Matrix Random Random Random util java import import import import import import import qr qr qr impl impl decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestHouseholderQR": "createRandom A A DebugQR DebugQR w w private checkSubHouse checkSubHouse i i i i for width width width width width width width width int int int int householder householder void void return compact compact boolean createQRDecomposition QRDecomposition protected Override @ @ new new new rand GenericQrCheck extends TestHouseholderQR class public public Test Test ZeroMatrix IdentityMatrix AStridedMatrix HouseholderQR HouseholderQR IQRResult Multiplications algo Matrix Matrix Matrix AMatrix assertTrue assertEquals Assert Assert junit junit junit org org org static static Random Random Random util java import import import import import import import import import import import import qr qr qr qr impl impl impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestIndex": "testReverse ind3 ind3 createSequence createSequence Indexz Indexz ind2 ind2 ind2 ind1 ind1 testEquals isDistinctSorted isDistinctSorted isDistinctSorted isSorted isSorted isSorted assertFalse assertFalse assertFalse assertFalse isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue testDistinctSorted compose c c b b a a testCompose get i i i i i int for length assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreate void void void void void @ @ @ @ @ TestIndex class public public public public public public Test Test Test Test Test Test ComputedIndex impl HashSet util java Assert junit junit org org static import import import import indexz indexz mikera mikera package ",
            "TestIndexz": "testIntegerChoice includeSorted createSorted toSet toSet s s s Integer of of testSetCreate size size size add add isPermutation length length i i i i i i int int for for new new hs hs hs hs hs hs testPermutations create create assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createRandomPermutation createRandomPermutation testVectorConvert contains createRandomChoice createRandomChoice chi chi chi chi isSorted isSorted isSorted isDistinct isDistinct isDistinct assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue createSequence Indexz Indexz Indexz Indexz Indexz ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind ind Index Index Index Index Index Index Index Index Index Index Index Index Index Index testCreateChoice void void void void void @ @ @ @ @ TestIndexz class public public public public public public Test Test Test Test Test Test Vector Vector vectorz Set Set HashSet HashSet HashSet HashSet HashSet util util java java Assert junit junit org org static import import import import import indexz mikera mikera package ",
            "TestIntArrays": "indexPosition assertEquals length i i i i i for new testIndexPositionOverflow intersectSorted testIntersectSorted mergeSorted assertArrayEquals assertArrayEquals testMergeSorted assertFalse assertFalse assertFalse zs zs zs zs zs zs zs ys ys ys ys ys ys testEquals decrementAll incrementAll xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs xs int int int int int int int int int int int int int testIncDec create data equals equals equals equals equals equals IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays IntArrays assertTrue assertTrue assertTrue of of of of of of of of of of of ix ix ix testCreate void void void void void void @ @ @ @ @ @ TestIntArrays class public public public public public public public Index Index Index indexz Test Test Test Test Test Test Test Assert junit junit org org static import import import util vectorz mikera mikera package ",
            "TestInverses": "inverse mi mi create create m m testDiagonalInverse void @ TestInverses class public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl AMatrix AMatrix AMatrix Test Test assertEquals assertEquals Assert junit junit org org static import import import import algo matrixx matrixx matrixx mikera mikera mikera package ",
            "TestJoinedVectors": "fillGaussian testVectorRejoin isFullyMutable testJoinedVector3Add validate jabc jabc jabc jabc numArrays numArrays numArrays jb jb jb jb ja ja ja ja c c b b b a a testJoinedCoalesce exactClone exactClone testJoinedVectorAdd sv sv testJoinedArraySubs subVector subVector subVector subVector subVector subVector jv jv jv jv jv jv jv clone clone clone is is is is is testJoinedViews INSTANCE INSTANCE INSTANCE INSTANCE Vector0 Vector0 Vector0 Vector0 Vector0 RepeatedElementVector RepeatedElementVector RepeatedElementVector RangeVector RangeVector RangeVector RangeVector RangeVector RangeVector testJoinedOptimisations ArraySubVector jr jr slices slices subMatrix sm sm m m testMatrixRowJoining create create create create create create create ZeroVector createIdentityMatrix JoinedMultiVector getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getClass getSlices getSlices getSlices getSlices createRandomMatrix createRandomMatrix testJoinedRows testJoinedArrayVectorAddMultiple2 wrap t t t t t t t t t t new double double testJoinedArrayVectorAddMultiple addProduct addProduct addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple addMultiple multiply multiply w w w w w w w w w w w testJoinedArrayVectors add add add add add fillIndexes fillIndexes createLength createLength createLength d d d d d d isZero testJoinedArrayAdd set set JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector JoinedArrayVector instanceof get get get get get get get get get get get get get get get get get get get get get get length length length length length join join join join join join join join join join join join join join join join join join join join join join join join join i i i i i i i i i i i i i i i i i i i i int int int int int for for for for for j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j j of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testJoinedArrays void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestJoinedVectors class class class class class class class class class class class class class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector3 Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector ZeroMatrix ZeroMatrix Matrixx Matrixx Matrixx Matrixx AMatrix AMatrix AMatrix matrixx matrixx matrixx List List util java assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import import import import impl impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestLUSolver": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver LUSolver LUSolver LUSolver LUSolver LUSolver LUSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestLUSolver class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertNotNull assertNotNull assertNotNull assertNotNull assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import lu impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestLinear": "assertNull testSolveSquareMatrixSingular testSolveSquareMatrixRectangular IllegalArgumentException expected asDoubleArray assertArrayEquals testSolveSquareMatrix testSolveSquareVector epsilonEquals epsilonEquals epsilonEquals solveLeastSquares solveLeastSquares solveLeastSquares testSolveLeastSquaresVector assertEquals of of of of of of of of of x x x x x x x x x x isIdentity innerProduct assertTrue assertTrue assertTrue assertTrue inverse mi mi double double double double double double double double new new new new new new new new create create create create create create create m m m m m m m m m m m m m m testSimpleSquareSolve void void void void void void @ @ @ @ @ @ TestLinear class class public public public public public public public Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector vectorz vectorz Linear Linear Linear Linear Linear Linear Linear solve solve solve solve Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test Test Test Test Assert junit junit org org static import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestMatrices": "transposeInPlace doSquareTransposeTest transposeInnerProduct innerProduct toMatrixTranspose getTransposeView equalsTranspose equalsTranspose assertTrue assertTrue getTranspose getTranspose getTranspose getTranspose clone clone doTransposeTest assertNotSame getRow get get get get get set j j j j j j j j j i i i i i i i i i for for columnCount cc cc rowCount rc rc int int int int assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 m2 exactClone exactClone return isFullyMutable if m m m m m m m m m m m m m m m m m m m m m m m AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix doMutationTest void void void private private private TestMatrices class public Constant ops AxisVector Vectorz Vector3 Vector2 Vector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Random util TestTransformz MatrixTransform transformz transformz ZeroMatrix WrappedDiagonalMatrix VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedRowMatrix StridedMatrix SparseRowMatrix SparseColumnMatrix ScalarMatrix RowMatrix QuadtreeMatrix PermutedMatrix PermutationMatrix LowerTriangularMatrix ImmutableMatrix IdentityMatrix DiagonalMatrix DenseColumnMatrix ColumnMatrix BufferMatrix BlockDiagonalMatrix BandedMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Indexz indexz TestArrays NDArray INDArray Arrayz arrayz arrayz arrayz arrayz Test Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMatrix": "addCopy t b b createRandomMatrix createRandomMatrix Matrixx Matrixx create create a a testOptimised subMatrix B B B B B AMatrix isIdentity assertTrue inverse elementSum elementSum columnCount columnCount rowCount rowCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createIdentity createIdentity A A A A A A A A Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix testIdentity void void @ @ TestMatrix class public public public Assert static Test Test Test junit junit org org Vector AVector vectorz vectorz QR decompose Random util java import import import import import import matrixx matrixx mikera mikera mikera mikera package ",
            "TestMatrixBuilder": "isIdentity rowCount toMatrix m m m join double of of of append append append new new mb mb mb mb mb MatrixBuilder MatrixBuilder testBuild void @ TestMatrixBuilder class public public Test Test Vector3 Vector3 Vector Vector Vector AMatrix AMatrix matrixx assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestMisc": "mimv mimv mv mv calculate mi mi mi mi assert doInverseTest private testRotationMatrix compose ct ct m2 m2 m1 m1 testCompoundTransform get get get get get get get get m33 m33 m33 m33 m33 testEquivalentDeterminant testPermuteDeterminant determinant determinant determinant determinant determinant determinant getRow getRow new new new new new new mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn mmn testBasicDeterminant transform transform createScaleMatrix createScaleMatrix createScaleMatrix tv tv tv set set set set set set set set length j j j j j j j j j j j j j j newVector i i i i i i i i i i i i i i testScale ri ri inverse inverse inv inv magnitude magnitude magnitude magnitude magnitude magnitude axis axis testRandomRotation isZero isFullyMutable newMatrix m m m m m m m m m m m m m m m columns columns columns columns columns rows rows rows rows rows int int int int int int int int for for for for for for for for testGeneralGenerator negate createYAxisRotationMatrix PI of of of of of test180RotationMatrix epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals y2 y2 y y clone clone x2 x2 x x x columnCount columnCount columnCount rowCount rowCount rowCount rowCount innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct innerProduct r r r r r r r r r r r r r r r createRandomMatrix tr tr tr AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix createRotationMatrix createRotationMatrix createRotationMatrix Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx Matrixx rot rot rot rot rot rot rot rot rot rot Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 Matrix33 createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector createUniformRandomVector v v v v v v v v v v v v v v v v v v v v v v v v v v v v v random random random random random Math Math Math Math Math Math angle angle angle angle angle angle angle angle double double double double testCompose void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestMisc class public public public public public public public public public public public Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vector3 Vector3 Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz MatrixTransform MatrixTransform MatrixTransform ATransform ATransform transformz transformz ZeroMatrix VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixMN VectorMatrixM3 UpperTriangularMatrix StridedMatrix RowMatrix PermutationMatrix DiagonalMatrix AStridedMatrix impl impl impl impl impl impl impl impl impl Inverse Inverse algo INDArray arrayz Test Test Test Test Test Test Test Test Test Test Test fail assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static static import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscArrayOps": "wrap wrap createIdentity i i i elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum elementAbsPowSum testElementSum Long asList asList a3 a3 a3 a2 a2 a2 a1 a1 a1 a1 a0 a0 a0 a0 testConstruction testDenseArrayCreation Integer Integer Integer createSparse createSparse createSparse createSparse testSparseArrayCreation isZero isZero asVector asVector reshape reshape reshape reshape reshape reshape INSTANCE INSTANCE testZeroPaddedReshape scale nonZeroCount nonZeroCount length add testNonZeroCount getTranspose \"[[[1.0,0.0],[0.0,0.0]],[[2.0,0.0],[0.0,1.0]]]\" n n \"[[[1.0,2.0],[0.0,0.0]],[[0.0,0.0],[0.0,1.0]]]\" testTranspose dense fillRandom int createSparseArray testSparse \"[[1, 2], [4, 5], [7, 8]]\" parse parse parse testParse slice slice slice join j j j j j j double double double double double testJoinedSlice getSlices getSlices Double Double testDoubleSlice get get get dimensionality dimensionality dimensionality elementCount innerProduct c c c c fill fill b b b newArray newArray newArray Array Array Array Array testInnerProducts getLeadingDiagonal assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals square clone v2 v2 v2 m m m m m m m outerProduct createUniformRandomVector createUniformRandomVector v v v v v v v v v v testOuterProducts instanceof instanceof assertTrue assertTrue assertTrue assertTrue Object Object Object Object Object Object Object Object Object Object create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create create Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz Arrayz a a a a a a a a a a a a of of of of of of of of of of of of of of of of of of of of of of of new new new new new new new new new new new new new new new new new new new new as as as as INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray testCreateFromArray void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ @ @ @ @ TestMiscArrayOps class public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test ZeroVector ZeroVector ZeroVector Vector0 Vector0 Vector0 SingleElementVector SingleElementVector SingleElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector ImmutableScalar ImmutableScalar AxisVector AxisVector AxisVector Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar BitVector BitVector BitVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz ZeroMatrix ZeroMatrix ZeroMatrix PermutationMatrix PermutationMatrix PermutationMatrix IdentityMatrix IdentityMatrix IdentityMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix ColumnMatrix ColumnMatrix ColumnMatrix BlockDiagonalMatrix BlockDiagonalMatrix BlockDiagonalMatrix Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix22 Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx ZeroArray ZeroArray ZeroArray SliceArray SliceArray SliceArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl Arrays Arrays Arrays util java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestMiscMatrices": "of divide double double new new m m m testDivideByVector create create create create ZeroMatrix ZeroMatrix testEquals void void @ @ TestMiscMatrices class public public public Vector Vector vectorz Matrix Matrix Matrix Matrix Test Test Test assertNotEquals assertNotEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import impl matrixx matrixx mikera mikera mikera package ",
            "TestMiscVectors": "int reorder r r testReorder INSTANCE Vector0 create GrowableIndexedVector GrowableIndexedVector testGrowableIndexedVector unsafeSet unsafeSet set set set set currentCapacity append append gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv gv testGrowableVector join getClass getClass sv2 sv2 sv2 length length length length length length sv1 sv1 sv1 fillGaussian createLength testRejoin addMultiple addMultiple testVectorStuff exactClone add sv sv sv sv StridedVector StridedVector v v v v v v v v v v v v v v v testStridedAdd subVector subVector subVector subVector subVector subVector of of of of of of of of of of of of of of of of of of assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals t2 t2 t2 wrap wrap wrap TriangularIndexedVector TriangularIndexedVector t1 t1 t1 new new new data data data data double double testTriangularIndexedVector void void void void void void void @ @ @ @ @ @ @ TestMiscVectors class public public public public public public public public Test Test Test Test Test Test Test Test Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector GrowableVector GrowableVector GrowableVector AVector AVector AVector AVector AVector AVector Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestNDArray": "isView INDArray testClone assertTrue assertTrue testVectorEquals createRandomSquareMatrix create m m m wrap wrap wrap of of of of v v v testWrap equals equals equals assertFalse assertFalse add testScalarAdd new new new new s s s s s elementSum nonZeroCount elementCount get get get assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals set set set set newArray newArray newArray a a a a a a a a a a a a a a a a a a a NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray NDArray testScalarArray void void void void void @ @ @ @ @ TestNDArray class public public public public public public Test Test Test Test Test Test Vector Vector Vector Vector Vector Vector Scalar Scalar Scalar Scalar Scalar Scalar vectorz vectorz Matrixx Matrixx Matrix22 Matrix Matrix Matrix AMatrix matrixx matrixx matrixx matrixx Arrays util java Assert junit junit org org static import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera package ",
            "TestOps": "i i i v3 v3 v2 v2 v2 clone clone v1 v1 v1 v1 v1 fillGaussian Vectorz createLength sv sv sv sv isDomainBounded isStochastic SIZE SIZE SIZE int int testVectorApply minValue maxValue assertTrue assertTrue return return return isNaN Double nextGaussian r r r r double testApply private private assertNotNull testLinear log SOFTPLUS testSoftplus LOG EXP E E E IDENTITY LINEAR LINEAR RECIPROCAL SIGNUM CBRT RINT FLOOR CEIL SQRT SQUARE TAN COS PI PI Math Math Math Math Math Math SIN testFunctions applyTo applyTo ABS ABS testAbs applyInverse applyInverse applyInverse LOG10 LOG10 testLog10 TANH testTanh applyOpCopy applyOpCopy derivative derivative derivative derivative derivative derivative derivative derivative derivative apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply apply LOGISTIC LOGISTIC testLogistic assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals applyOp applyOp of of of of of Vector Vector Vector Vector Vector Vector Vector Vector v v v v v v AVector AVector AVector AVector create create compose op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op op testComposedOp void void void void void void void void void void @ @ @ @ @ @ @ @ ONE \"Problem analysing Ops\" throw e e Throwable catch null get get add add try getType isAssignableFrom getModifiers isStatic if if if if field field field field for for getDeclaredFields Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops declaredFields declaredFields new new ALL_OPS ALL_OPS ALL_OPS Op Op Op Op Op Op Op Op Op Op Op Op Op final TestOps class class class public public public public public public public public public public VectorzException VectorzException StochasticBinary Quadratic Power Offset Logistic Linear Linear Linear Identity GaussianNoise Constant Constant Composed Composed Clamp ops ops ops ops ops ops ops ops ops ops ops Rand Rand Maths TestTransformz transformz Assert static static static Test Test Test Test Test Test Test Test Test junit junit org org List List ArrayList ArrayList util util util util util Modifier Modifier Field Field Field reflect reflect lang lang java java java java import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestPrimitiveVectors": "getClass getRow r0 r0 m2 m2 testPrimitiveMatricSlices slice slice broadcast a a testBroadCast getT getZ getY getX Vector4 v4 v4 Vector3 v3 v3 Vector2 Vector2 Vector2 Vector2 v2 v2 v1 v1 testCompoenetGetters elementSum softmaxCopy sm sm AVector AVector v v v v v testVector1Softmax epsilonEquals testEpsilonEquals BitVector Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 Vector1 of of of of of of of of of of of of of Vector Vector double new new create Vectorz testSmallEquals void void void void void void @ @ @ @ @ @ TestPrimitiveVectors class class public public public public public public public APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector APrimitiveVector impl Matrix22 Matrix22 Matrix22 matrixx INDArray INDArray arrayz Test Test Test Test Test Test Test assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import vectorz vectorz mikera mikera mikera mikera package ",
            "TestPseudoInverses": "testMiniPseudoInverse1 epsilonEquals epsilonEquals double double double double new new new new testBasicPseudoInverse calculate calculate calculate PseudoInverse PseudoInverse PseudoInverse mi mi mi mi mi mi create create create create create create m m m m m m testDiagonalPseudoInverse void void void @ @ @ TestPseudoInverses class public public public public DiagonalMatrix DiagonalMatrix DiagonalMatrix impl Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix Test Test Test Test assertTrue assertTrue assertTrue assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQR": "validateQR result result createRandomMatrix a a a testQR void @ TestQR class public public Test Test ZeroMatrix IdentityMatrix impl impl QR QR IQRResult IQRResult decompose decompose decompose Matrixx Matrixx Matrix AMatrix AMatrix assertTrue Assert junit junit org org static import import import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestQRHouseColSolve": "e IllegalArgumentException catch quality try q_good q_good A_bad toMatrix toMatrix create create A_good A_good checkQuality B_orig B_orig B B B B modifiesB epsilonEquals epsilonEquals setA setA setA new new new solver solver solver solver solver solver solver solver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver QRHouseColSolver copy copy A A A A A createRandom createRandom createRandom A_orig A_orig A_orig modifiesA void void void @ @ @ tol double double protected TestQRHouseColSolve class public public public public Test Test Test Test DiagonalMatrix DiagonalMatrix DiagonalMatrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals Assert Assert junit junit junit org org org static static import import import import import import qr impl impl solve solve matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestQuaternions": "mul r1 b b a a a invert invert Quaternions Quaternions Quaternions epsilonEquals of of of Vector4 Vector4 Vector4 Vector4 Vector4 Vector4 assertTrue testInvert void @ TestQuaternions class public public Test Test Matrixx Matrix33 matrixx matrixx Assert junit junit org org static import import import import vectorz mikera mikera mikera package ",
            "TestRank": "testRank void @ TestRank class public public assertEquals Assert static Test Test junit junit org org ZeroMatrix impl SVD ISVDResult decompose decompose Matrix22 Matrix import import import import import import import algo matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestScalars": "length asVector v v v AVector exactClone testAsVector private get get get double setElements testSetElements innerProduct innerProduct outerProduct outerProduct fillNormal newArray a a a a a a a a a a testProducts nonZeroCount elementSum assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Scalar Scalar Scalar new new new new s s s s s s s s s s s s s s s s AScalar AScalar AScalar AScalar miscTests void void void void @ @ @ TestScalars class public public public public MatrixIndexScalar ImmutableScalar IdentityMatrix impl impl impl Matrixx matrixx matrixx TestArrays INDArray INDArray Arrayz Arrayz Array Array arrayz arrayz arrayz arrayz Assert static Test Test Test Test junit junit org org import import import import import import import import import import vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseColumnMatrix": "getColumn replaceColumn of v v v testReplace toSparseRowMatrix rm rm SparseRowMatrix createRandomMatrix create create m m m m m m SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix testSparseRowConvert void void @ @ TestSparseColumnMatrix class public public public ZeroVector SparseIndexedVector AxisVector Vectorz Vector Vector Vector Ops AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand Matrixx Matrixx Matrix AMatrix Indexz Index indexz indexz Test Test Test List util util java assertTrue assertTrue assertFalse assertEquals assertEquals Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseHashedVector": "maxElementIndex maxAbsElementIndex nonZeroCount minElement minElement maxAbsElement testSparseOps v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct set v v v v v v v v v v v v v v v testSet assertFalse includesIndex includesIndex assertTrue assertTrue elementSum get get nonSparseValues length length assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals of of of of of of of of of of of of of of of create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector SparseHashedVector testConstruction void void void void @ @ @ @ TestSparseHashedVector class public public public public public Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index indexz Assert junit junit org org static import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseIndexedVector": "roundToZero rsv rsv ASparseVector testRoundToZero v3 v3 v3 v3 v3 subVector subVector subVector subVector v2 v2 v2 v2 v2 addProduct addProduct addProduct addProduct addProduct addProduct exactClone ADenseArrayVector instanceof vs vs vs vs vs vs vs newVector newVector newVector vz vz vz testAddProduct sv2 sv2 sv2 nonZeroCount nonZeroCount nonSparseIndex nonSparseIndex nonSparseIndex testZeroHandling add v v v v v v v testZeroSetting int int int int new new new new cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices cloneIncludingIndices testCloneIncluding testFaultyConstruction Throwable lang java expected isZero SparseHashedVector testSparseHashedConversion addSparse testAddSparse assertNotEquals validate validate sparseClone sparseClone sc sc sc sc set set set set set set set set nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount nonSparseElementCount createLength createLength createLength createLength createLength testCreateAndClone includesIndex includesIndex elementSum elementSum elementSum get get get nonSparseValues length length length length length length of of of of of of of of of of of of of of of of of of of of of create create create create create create create sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv sv SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector testConstruction void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestSparseIndexedVector class class public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Vectorz Vectorz Vectorz Vectorz Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector AVector AVector Index Index Index Index Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertFalse assertFalse assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit org org org org org static static static import import import import import import import import import impl vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSparseRowMatrix": "getRow assertTrue replaceRow of v v v create m m m SparseRowMatrix SparseRowMatrix testReplace void @ TestSparseRowMatrix class public public VectorzException SparseIndexedVector AxisVector Vectorz Vector Vector Vector AVector Ops vectorz vectorz vectorz vectorz vectorz vectorz vectorz Rand SparseColumnMatrix Matrix AMatrix Indexz Index indexz indexz List util util util java Test Test Assert junit junit org org static import import import import import import import import import import import import import import import import impl impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSparseVectors": "testSpareIndexedCreate of of Vector Vector nonEmpty nonEmpty empty empty empty create create add add clone w w nonZeroIndices int new equals assertTrue testIndexed elementSum elementSum set set nonZeroCount nonZeroCount nonZeroCount nonZeroCount assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals createLength createLength createLength v v v v v v v v v v v v v v testHashed void void void @ @ @ TestSparseVectors class public public public public Test Test Test Test ASparseVector ZeroVector ZeroVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseHashedVector SparseHashedVector SparseHashedVector impl impl impl impl Assert junit junit org org static Arrays Arrays util java import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera package ",
            "TestSpecialOps": "getDerivativeOp getDerivativeOp getDerivativeOp getDerivativeOp ddddsin sin sin testDerivativeChains testCompositions ATAN ASIN ACOS SQUARE sum product compose compose compose compose NEGATE TAN COS COS SIN SIN SIN SIN SIN SIN SIN SQRT RECIPROCAL TANH TANH LOG EXP EXP STOCHASTIC_LOGISTIC nextDouble v v v v i i i int SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SOFTPLUS SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC SCALED_LOGISTIC derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput derivativeForOutput testDerivatives LINEAR LINEAR LINEAR os os os applyTo applyTo LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC LOGISTIC new new fs fs fs fs fs fs testOp edx edx edx epsilon epsilon epsilon epsilon derivative derivative derivative derivative derivative derivative derivative dx dx dx apply apply apply SINH testSinh D_CROSS_ENTROPY_LOGISTIC dCrossEntropy dCrossEntropy dCrossEntropy log Math POSITIVE_INFINITY POSITIVE_INFINITY Double Double CROSS_ENTROPY Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops Ops applyOp applyOp create create create create create create create create create create crossEntropy crossEntropy crossEntropy output output output of of of of target target target Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testCrossEntropy @ @ @ @ @ @ testDerivativeAt testDerivativeAt x x x x x x for for xs xs double double double double double double double double double op op op op op op op op Op Op Op Op Op Op Op testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt testDerivativesAt void void void void void void void void private private TestSpecialOps class public public public public public public public Quadratic Quadratic Power Power Power Power Linear Linear Linear Linear Linear Constant ops ops ops ops Rand Rand util Test Test Test Test Test Test Test assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import import import import import vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera package ",
            "TestSvdImplicitQr": "compact boolean StandardSvdChecks extends TestSvdImplicitQr class public Test AVector vectorz Matrix Arrays util java assertNotNull assertTrue fail Assert Assert Assert junit junit junit junit org org org org static static static import import import import import import import svd impl decompose matrixx matrixx mikera mikera mikera package ",
            "TestSvdImplicitQrAlgorithm": "zeroOnDiagonal length length length knownDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound PI cos Math Math val val process process setMatrix setMatrix i i i i i i i i i off off off off off off diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double double N N N N N N N N N N int int int for for for true true SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm SvdImplicitQrAlgorithm oneBidiagonalMatrix void void void @ @ @ new new new new new new new new new rand private TestSvdImplicitQrAlgorithm class public public public public assertNotNull assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert Assert static static static Random Random Random util java Test Test Test Test junit junit junit junit org org org org DiagonalMatrix BidiagonalRow bidiagonal IBidiagonalResult Multiplications algo Matrix import import import import import import import import import import svd svd svd svd svd svd svd svd svd svd svd svd svd impl impl impl decompose decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera package ",
            "TestSymmEigen": "of of of of of of epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals eigenVectors eigenVectors eigenVectors eigenVectors eigenVectors getEigenvalues eigenValues eigenValues eigenValues eigenValues eigenValues test1 getEigenVectors getEigenVectors false result result result result result vectorsNotComputed UnsupportedOperationException decomposeSymmetric decomposeSymmetric decomposeSymmetric double double double new new new new new create create create A A A A A A unsymmetric void void void IllegalArgumentException expected expected @ @ @ TestSymmEigen class class class public public public public Test Test Test Test Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector Vector Vector Vector AVector AVector AVector vectorz vectorz vectorz IEigenResult IEigenResult IEigenResult Eigen Eigen Eigen Eigen decompose decompose Matrix Matrix Matrix Matrix Matrix Matrix Matrix assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue Assert junit junit org org static import import import import import import import import algo matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQRAlgorithmDecomposition": "checkLargeValue checkAllZeros checkIdentity checkRandomSymmetric true true false justSymmetricTests_separate void @ return setComputeVectorsWithValues if new alg alg alg createDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition SymmetricQRAlgorithmDecomposition pow Math EPS double final computeVectors computeVectors computeVectors computeVectors private together together together boolean boolean TestSymmetricQRAlgorithmDecomposition class public public public public Test Test Vector2 AVector vectorz vectorz AltLU lu Multiplications algo Matrixx Matrix AMatrix fail assertTrue assertNotNull assertFalse assertEquals Assert Assert Assert Assert Assert junit junit junit junit junit junit org org org org org org static static static static static static import import import import import import import import import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestSymmetricQrAlgorithm": "N N N N zeroDiagonalNotZeroOff hasOffDiagonal countNumFound countNumFound countNumFound countNumFound countNumFound countNumFound i i i i i i i i i i i i i i int int int int for for for process process alg alg alg alg alg alg alg alg alg alg SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm SymmetricQrAlgorithm length length length length length length off off off off off off off new new new new new new new new diag diag diag diag diag diag diag diag diag diag diag diag double double double double double double double double double double double double shouldNotChange void void void @ @ @ TestSymmetricQrAlgorithm class public public public public assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert static static Test Test Test Test junit junit junit org org org TridiagonalDecompositionHouseholder hessenberg Matrix import import import import import eigen impl impl decompose decompose matrixx matrixx matrixx mikera mikera mikera package ",
            "TestTesting": "TestVectors AVector Random Test Assert junit junit org org static import import import import import util util vectorz vectorz vectorz mikera mikera mikera mikera package ",
            "TestTools": "null testNullToDouble NullPointerException \"foo\" testStringToDouble IllegalArgumentException expected expected Integer Double new new new toDouble toDouble toDouble toDouble toDouble Tools Tools Tools Tools Tools assertEquals assertEquals assertEquals testToDouble void void void @ @ @ TestTools class class class public public public public Test Test Test Test BigDecimal BigDecimal math java Assert junit junit org org static import import import vectorz mikera package ",
            "TestTransformz": "assertEquals transform y y x x constantTransform Transformz t t ATransform of of v v v testConstantTransform void @ TestTransformz class public public Vectorz Vector3 Vector3 Vector2 Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz SubsetTransform impl Indexz Index indexz indexz Assert static Test Test junit junit org org import import import import import import import import import import transformz transformz mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestTridiagonalDecompositionHouseholder": "alg alg createSymmetric A A width width width width int for fullTest void @ return createDecomposition createDecomposition TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder TridiagonalDecompositionHouseholder new new rand rand protected protected TestTridiagonalDecompositionHouseholder class public public assertTrue assertEquals Assert Assert static static Random Random Random util java Test Test junit junit junit org org org Multiplications algo Matrix Matrix AMatrix import import import import import import import hessenberg impl decompose decompose matrixx matrixx matrixx matrixx mikera mikera mikera mikera package ",
            "TestVector": "iterator v3 v3 Iterable v2 v2 assertEquals assertEquals assertEquals create create create v1 v1 of v v v v Vector Vector Vector Vector Vector Vector Vector Vector asList l l l l Number extends testIterableConstruction void @ TestVector class public public List List Arrays Arrays util util java java Assert static Test Test junit junit org org import import import import vectorz mikera package ",
            "TestVectorBuilder": "asVector wv wv v v append append append length toVector toVector assertEquals assertEquals new vb vb vb vb vb vb vb testBuild void @ TestVectorBuilder class public public Test Test GrowableVector GrowableVector GrowableVector AVector AVector AVector Assert junit junit org org static import import import import util vectorz vectorz vectorz mikera mikera mikera package ",
            "TestVectorMath": "PI Math negate angle angle testAngle test3DMath newVector dim dim dim dim join testGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths doGenericMaths create create create create doMagnitudeTests doMagnitudeTests private subMultiple sub doSubtractionTests doSubtractionTests addWeighted addWeighted fillRandom Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz doWeightedTests doWeightedTests addMultiple addMultiple add add add av av av av av av av av av av av ones ones ones ones ones ones ones ones ones ones doAdditionTests doAdditionTests i i i i i i i i i i i i i i for for for for length length length len len len len len len int int int int int int int fill fill fill doFillTests doFillTests normalise clone clone clone clone clone clone clone clone clone clone clone clone clone doNormaliseTests doNormaliseTests set vv vv vv m m m double return isFullyMutable if if exactClone exactClone doMultiplyTests doMultiplyTests magnitude magnitude magnitude magnitude magnitude magnitude magnitude magnitude Vector2 Vector2 magnitudeSquared testMagnitude epsilonEquals epsilonEquals epsilonEquals epsilonEquals projectToPlane v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v testProjection Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 new new new new new new testDotProduct testSubVectorMultiply2 get get get get get get get multiply multiply multiply multiply multiply multiply b b b b b b b b subVector subVector subVector subVector a a a a a a AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector testSubVectorMultiply dotProduct dotProduct ix ix v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 v1 testIndexedDotProduct addCopy Vector1 Vector1 of of of of of of of of of of of of of of of of of of of of of Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector testBasicAddCopy void void void void void void void void void void void void void void void void void void @ @ @ @ @ @ @ @ @ @ TestVectorMath class public public public public public public public public public public public public public public public public public public Test Test Test Test Test Test Test Test Test Test Test Index Index Index indexz assertTrue assertTrue assertTrue assertTrue assertTrue assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals Assert Assert junit junit junit org org org static static import import import import vectorz mikera mikera package ",
            "TestVectorMatrix": "wrap create assertEquals createRandomMatrix Matrixx m m m AMatrix testVMWrap void @ TestVectorMatrix class public public Test Test VectorMatrixMN VectorMatrixMN VectorMatrixMN impl Assert junit junit org org static import import import matrixx matrixx mikera mikera package ",
            "TestVectors": "INSTANCE zv zv join testSubvectors r testAddMultipleIndexed2 createRandomChoice ix ix ix ix ix tlen tlen tlen fillGaussian fillGaussian testAddMultipleIndexed minElementIndex minElement maxElementIndex maxElement maxAbsElementIndex abs testMinMax elementProduct testElementProduct createZeroVector distanceSquared elementSquaredSum ss ss ss testElementSquaredSum res res res res res res addMultipleSparse multiplyCopy multiplyCopy addSparse b b b a a a asVector createRandomLike TestingUtils src src src testAddSparse addMultiple addMultiple addMultiple createLength createLength createLength createLength tv tv tv tv tv tv tv tv tv tv tv tv tv testAddMultiple addMultipleToArray addMultipleToArray testAddMultipleToArray rotateView rotateView rotateView rotateCopy rotateCopy rotateCopy testRotate isMutable isMutable isMutable assertFalse assertFalse s2 s2 s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 shiftCopy shiftCopy shiftCopy testShift sv sv sv sv sv select select select s0 s0 s0 s0 s0 s0 s0 s0 s0 testSelect getTranspose createRandomMatrix m m m m m m m innerProduct innerProduct innerProduct dotProduct c c c testInnerProducts epsilonEquals epsilonEquals epsilonEquals addProduct addProduct addProduct p2 p2 p2 p2 createUniformRandomVector createUniformRandomVector createUniformRandomVector p1 p1 p1 p1 testAddProduct ds2 ds2 ds2 addToArray addToArray addToArray ds ds ds ds ds ds ds ds ds ds ds ds len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len len testAddToArray toList testHashCode parse str str String testParse private private private private private private private private private private private private private private private private private private \"[1.0,2.0]\" Vector2 \"[0.0,0.0]\" testString equals PI Math Math hashCode hashCode hashCode hashCode testSubVectorCopy testWrap set set set v3 v3 v3 v3 subVector subVector subVector subVector subVector subVector subVector subVector isView isView isView isView get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get wrap wrap wrap wrap i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int for for for for for for data data data data data data data data data data testSubVectors Iterable create create add add add new new new new new new new new new al al al al al Object Object Object testCreateFromIterable elementSum elementSum elementSum elementSum elementSum elementSum elementSum testElementSum testElementSum clampMax testClampMax clampMin testClampMin clamp testClamping toString toString toString toString \"[1.0,2.0,3.0]\" testToString Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector Vector crossProduct testCross square square clone vc vc vc vc vc vc testSquare assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue assertTrue magnitudeSquared d2 d2 d d d d double double double double double double double double double double double double double double double double double testMagnitudes fill fill exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone exactClone z z z return return return return return return return return return return return isFullyMutable isFullyMutable isFullyMutable isFullyMutable isFullyMutable if if if if if if if if if if if if if if if if if maxAbsElement maxAbsElement maxAbsElement maxAbsElement length length length length length length length length length length length length length length length length length length length length length length length length length newVector Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz Vectorz zero zero AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector distanceLinf distanceLinf distanceLinf distanceL1 distance magnitude magnitude assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 v2 of of of of of of of of of of of of of of v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 Vector3 testDistances testDistances void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void TestVectors class public public public public public public public public public public public public public public public public \"deprecation\" SuppressWarnings @ @ @ @ @ @ @ @ @ @ @ @ @ Constant ops ZeroVector WrappedSubVector Vector0 Vector0 StridedVector SparseIndexedVector SparseImmutableVector SparseHashedVector SingleElementVector RepeatedElementVector RangeVector MatrixViewVector JoinedVector JoinedMultiVector JoinedArrayVector IndexedSubVector IndexedArrayVector IndexVector ImmutableVector GrowableIndexedVector IndexedElementVisitor BufferVector AxisVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector ArraySubVector impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl Rand Rand Matrixx Matrixx AMatrix AMatrix matrixx matrixx Indexz Indexz Indexz Index Index Index indexz indexz TestArrays INDArray INDArray arrayz arrayz Test Test Test Test Test Test Test Test Test Test Test Test Test List Arrays Arrays ArrayList ArrayList ArrayList util util util util java java java Assert junit junit org org static import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "TestVectorz": "t UnsupportedOperationException catch \"set on AxisVector succeeded!!\" fail set try axisVector testAxisVector assertTrue join join v0 v0 v0 v0 v0 testVector0 minElementIndex elementMin maxElementIndex elementMax testIndexOf length length newVector newVector Vectorz Vectorz Vectorz v v v v v v v v v v v v v v v AVector AVector AVector i i i i i int for testCreateLength Vector Vector Vector Vector Vector Vector4 Vector3 Vector2 of of of of of of of of Vector1 append append append append append toVector toVector toVector toVector toVector toVector INSTANCE INSTANCE assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals assertEquals new vb vb vb vb vb vb vb vb vb vb vb vb testVectorBuilder void void void void void @ @ @ @ @ TestVectorz class public public public public public public Test Test Test Test Test Test Vector0 Vector0 Vector0 Vector0 impl GrowableVector GrowableVector GrowableVector Assert junit junit org org static import import import import vectorz vectorz vectorz mikera mikera mikera package "
        },
        "deleted_diff_per_file": {
            "src/main/java/mikera/vectorz/AVector.java": "import mikera.vectorz.impl.ISparseVector;\n\t\tif (this instanceof ISparseVector) {\n\t\t\tset(src);\n\t\t} else {\n\t\t\tset(src);\n\t\t}\n"
        },
        "deleted_line_number_list_per_file": {
            "src/main/java/mikera/vectorz/AVector.java": [
                27,
                2359,
                2361,
                2362,
                2363,
                2364
            ]
        },
        "diff_code": "+\tpublic void setSparse(double v);\n+\t\n+\t@Override\n+\tpublic void setSparse(double value) {\n+\t\tint sc=sliceCount();\n+\t\tfor (int i=0; i<sc; i++) {\n+\t\t\tINDArray s=slice(i);\n+\t\t\ts.setSparse(value);\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void setSparse(double v) {\n+\t\tleft.setSparse(v);\n+\t\tright.setSparse(v);\n+\t}\n+\t\n+\t@Override\n+\tpublic final void setSparse(INDArray a) {\n+\t\tint dims=a.dimensionality();\n+\t\tif (dims==0) {\n+\t\t\tsetSparse(a.get());\n+\t\t} else if (dims==1) {\n+\t\t\tsetSparse(a.asVector());\n+\t\t} else if (dims==2) {\n+\t\t\tsetSparse(Matrixx.toMatrix(a));\n+\t\t} else {\n+\t\t\tthrow new IllegalArgumentException(ErrorMessages.incompatibleBroadcast(a, this));\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void setSparse(double value) {\n+\t\tint minBand=-lowerBandwidthLimit();\n+\t\tint maxBand=upperBandwidthLimit();\n+\t\tfor (int i=minBand; i<=maxBand; i++) {\n+\t\t\tgetBand(i).setSparse(value);\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+ \tpublic void setSparse(double value) {\n+\t\tlong n=componentCount();\n+\t\tfor (int i=0; i<n; i++) {\n+\t\t\tAVector v = unsafeGetVector(i);\n+\t\t\tif (v==null) continue;\n+\t\t\tif (v.isFullyMutable()) {\n+\t\t\t\tv.setSparse(value);\n+\t\t\t} else {\n+\t\t\t\tv = v.sparseClone();\n+\t\t\t\tv.setSparse(value);\n+\t\t\t\tunsafeSetVec(i, v);\t\t\t\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t\t\n+\t@Override\n+\tpublic void setSparse(double v) {\n+\t\tthrow new UnsupportedOperationException(ErrorMessages.immutable(this));\n+\t}\n+\t@Override\n+\tpublic void setSparse(double value) {\n+\t\tvector.setSparse(value);\n+\t}\n+\t\n+\t@Override\n+\tpublic void setSparse(double value) {\n+\t\tlead.set(value);\n+\t}\n+\t\n+\t@Override\n+\tpublic void setColumn(int i, AVector col) {\n+\t\treplaceColumn(i,col.clone());\n+\t}\n+\t\n+\t@Override\n+ \tpublic void setSparse(double v) {\n+\t\tset(v);\n+\t}\n+\t\n+\t\tset(src);\n+\t}\n+\t\n+\t@Override\n+ \tpublic void setSparse(double v) {\n+\t\tset(v);\n+\t@Override\n+ \tpublic void setSparse(double v) {\n+\t\tArrays.fill(data, v);\n+\t}\n+\t\n",
        "diff_line_number_list_per_file": {
            "src/main/java/mikera/arrayz/INDArray.java": [
                772
            ],
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": [
                598,
                599,
                600,
                601,
                602,
                603,
                604,
                605
            ],
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": [
                170,
                171,
                172,
                173,
                174
            ],
            "src/main/java/mikera/matrixx/AMatrix.java": [
                1137,
                1138,
                1139,
                1140,
                1141,
                1142,
                1143,
                1144,
                1145,
                1146,
                1147,
                1148,
                1149
            ],
            "src/main/java/mikera/matrixx/impl/ABandedMatrix.java": [
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166
            ],
            "src/main/java/mikera/matrixx/impl/ASparseRCMatrix.java": [
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                292,
                293,
                294,
                295,
                296,
                297
            ],
            "src/main/java/mikera/matrixx/impl/BroadcastVectorMatrix.java": [
                101,
                102,
                103,
                104
            ],
            "src/main/java/mikera/matrixx/impl/ColumnMatrix.java": [
                93,
                94,
                95,
                96
            ],
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": [
                82,
                83,
                84,
                85
            ],
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": [
                175,
                176,
                177,
                178
            ],
            "src/main/java/mikera/vectorz/AScalar.java": [
                38,
                39,
                40,
                41
            ],
            "src/main/java/mikera/vectorz/AVector.java": [
                2358,
                2359,
                2361,
                2362,
                2363
            ],
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": [
                420,
                421,
                422,
                423
            ]
        },
        "diff_per_file": {
            "src/main/java/mikera/arrayz/INDArray.java": "\tpublic void setSparse(double v);\n",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "\t@Override\n\tpublic void setSparse(double value) {\n\t\tint sc=sliceCount();\n\t\tfor (int i=0; i<sc; i++) {\n\t\t\tINDArray s=slice(i);\n\t\t\ts.setSparse(value);\n\t\t}\n\t}\n",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": "\t@Override\n\tpublic void setSparse(double v) {\n\t\tleft.setSparse(v);\n\t\tright.setSparse(v);\n\t}\n",
            "src/main/java/mikera/matrixx/AMatrix.java": "\t@Override\n\tpublic final void setSparse(INDArray a) {\n\t\tint dims=a.dimensionality();\n\t\tif (dims==0) {\n\t\t\tsetSparse(a.get());\n\t\t} else if (dims==1) {\n\t\t\tsetSparse(a.asVector());\n\t\t} else if (dims==2) {\n\t\t\tsetSparse(Matrixx.toMatrix(a));\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(ErrorMessages.incompatibleBroadcast(a, this));\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/impl/ABandedMatrix.java": "\t@Override\n\tpublic void setSparse(double value) {\n\t\tint minBand=-lowerBandwidthLimit();\n\t\tint maxBand=upperBandwidthLimit();\n\t\tfor (int i=minBand; i<=maxBand; i++) {\n\t\t\tgetBand(i).setSparse(value);\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/impl/ASparseRCMatrix.java": "\t@Override\n \tpublic void setSparse(double value) {\n\t\tlong n=componentCount();\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tAVector v = unsafeGetVector(i);\n\t\t\tif (v==null) continue;\n\t\t\tif (v.isFullyMutable()) {\n\t\t\t\tv.setSparse(value);\n\t\t\t} else {\n\t\t\t\tv = v.sparseClone();\n\t\t\t\tv.setSparse(value);\n\t\t\t\tunsafeSetVec(i, v);\t\t\t\n\t\t\t}\n\t\t}\n\t}\n",
            "src/main/java/mikera/matrixx/impl/BroadcastVectorMatrix.java": "\t@Override\n\tpublic void setSparse(double v) {\n\t\tthrow new UnsupportedOperationException(ErrorMessages.immutable(this));\n\t}\n",
            "src/main/java/mikera/matrixx/impl/ColumnMatrix.java": "\t@Override\n\tpublic void setSparse(double value) {\n\t\tvector.setSparse(value);\n\t}\n",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": "\t@Override\n\tpublic void setSparse(double value) {\n\t\tlead.set(value);\n\t}\n",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": "\t@Override\n\tpublic void setColumn(int i, AVector col) {\n\t\treplaceColumn(i,col.clone());\n\t}\n",
            "src/main/java/mikera/vectorz/AScalar.java": "\t@Override\n \tpublic void setSparse(double v) {\n\t\tset(v);\n\t}\n",
            "src/main/java/mikera/vectorz/AVector.java": "\t\tset(src);\n\t}\n\t@Override\n \tpublic void setSparse(double v) {\n\t\tset(v);\n",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": "\t@Override\n \tpublic void setSparse(double v) {\n\t\tArrays.fill(data, v);\n\t}\n"
        },
        "ekstazi_failed_test_list": [],
        "ekstazi_select_time": 0,
        "ekstazi_test_list": [],
        "ekstazi_total_time": 0,
        "failed_test_list": [],
        "passed_test_list": [
            "TestInverses",
            "TestAxisVector",
            "TestBands",
            "TestVectors",
            "TestTools",
            "TestMiscVectors",
            "TestAffine",
            "TestDenseMultiply",
            "TestArrays",
            "TestJoinedVectors",
            "TestTridiagonalDecompositionHouseholder",
            "TestIndex",
            "TestBanded",
            "TestBigSparse",
            "TestQuaternions",
            "TestMatrices",
            "TestLinear",
            "TestSymmetricQRAlgorithmDecomposition",
            "TestOps",
            "TestVectorz",
            "TestTransformz",
            "TestAltLU",
            "TestFFT",
            "TestSvdImplicitQr",
            "TestSvdImplicitQrAlgorithm",
            "TestGrowableVector",
            "TestVectorBuilder",
            "TestHessenbergSimilarDecomposition",
            "TestSparseHashedVector",
            "TestIndexz",
            "TestSparseColumnMatrix",
            "TestDecomposition",
            "TestMisc",
            "TestPrimitiveVectors",
            "TestSymmetricQrAlgorithm",
            "TestSpecialOps",
            "TestErrors",
            "TestHouseholderQR",
            "TestMiscMatrices",
            "TestDiagonalMatrix",
            "TestVector",
            "TestLUSolver",
            "TestPseudoInverses",
            "TestCholLDUSolver",
            "TestHouseholderColQR",
            "TestSparseRowMatrix",
            "TestQRHouseColSolve",
            "TestCholSolver",
            "Test3DVectors",
            "TestMiscArrayOps",
            "TestCholLDU",
            "BitVectorTest",
            "TestIntArrays",
            "TestRank",
            "TestSymmEigen",
            "TestScalars",
            "TestTesting",
            "TestBidiagonalRow",
            "TestDeterminant",
            "TestSparseIndexedVector",
            "TestMatrix",
            "TestVectorMath",
            "TestChol",
            "TestVectorMatrix",
            "TestQR",
            "TestCholInner",
            "TestSparseVectors",
            "TestNDArray",
            "TestCholesky",
            "TestMatrixBuilder"
        ],
        "prev_commit": "72cd9dcd",
        "queries": {
            "src/main/java/mikera/arrayz/INDArray.java": "reduceSlices reduceSlices getComponents components withComponents k getComponent componentCount elementAbsPowSum p p elementPowSum hasUncountable elementProduct getElement signumCopy absDiffCopy absDiff absCopy equalsArray equalsArray denseClone sparseClone dense sparse mutable immutable exp log abs epsilon epsilonEquals epsilonEquals toVector getSliceViews asDoubleArray toSliceArray toDoubleArray toDoubleBuffer validate getSlices getSlices signum sqrt squareCopy square pow addMultipleSparse c addSparse addSparse setSparse setSparse setMultiple setMultiple setApplyOp setInnerProduct addOuterProductSparse addOuterProduct addInnerProduct addInnerProduct exponent exponent exponent addPower addPower src src src src src addMultiple bfactor b b b b b b b b b b constant constant scaleAdd scaleAdd scaleCopy Deprecated @ scale arr dest dest dest getElements getElements getElements getElements length pos values values values setElements setElements setElements exactClone elementsEqual equals init init reduce reduce operator applyOpCopy op op op op op op op op op applyOp applyOp applyOp applyOp ensureMutable copy clone isZero isView isSameShape isElementConstrained isFullyMutable isDense isSparse isBoolean isMutable boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean nonZeroCount factor factor factor factor factor factor factor factor factor factor divideCopy divideCopy divide divide multiplyCopy multiplyCopy multiply multiply elementIterator elementSquaredSum elementMin elementMax elementSum elementCount sliceCount getTransposeCopy getTransposeView getTranspose offsets subArray join join sliceValue majorSlice majorSlice slice slice broadcastCopyLike broadcastCloneLike target target target target target broadcastLike broadcastLike broadcastLike broadcast shift rotateView order order dimension dimension dimension dimension dimension reorder reorder shape shape shape reshape asElementList Double Double asVector outerProduct innerProduct innerProduct innerProduct innerProduct max min clamp reciprocalCopy reciprocal negateCopy negate fill v v v addAt subCopy sub sub offset offset offset offset offset offset data data data addToArray d d d addCopy addCopy add add o Object Object Object a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a index index index j i i i i value value value value value value value set set set set set set set void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void void indexes indexes y y x x x x ix ix get get get get get get get get get double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double double getLongShape long long long long long long long long long long dim getShapeClone getShape getShape dimensionality int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int Comparable Cloneable extends INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray interface public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public Vector Vector Op2 Op2 Op2 Op2 Op2 Op2 Op2 Op Op Op Op IOperator IOperator AVector AVector AVector AVector AVector AVector AVector AScalar AScalar vectorz vectorz vectorz vectorz vectorz vectorz AMatrix AMatrix AMatrix matrixx Index Index AIndex AIndex indexz indexz List List List List List Iterator Iterator util util DoubleBuffer DoubleBuffer nio Serializable Serializable io java java java java import import import import import import import import import import import import import arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/arrayz/impl/AbstractArray.java": "case case switch innerProduct innerProduct value value value fill fill isView ensureMutable isZero isZero l2 l2 l2 l1 l1 l1 l1 si si si si si si s2 s2 s2 s2 s2 s1 s1 s1 s1 s1 s1 s1 s1 ss ss ss ss ss ss ss ss pos pos pos pos pos pos pos elementCount elementCount offset offset offset offset offset values values values values values values values setElements setElements setElements setElements setElements setElements setElements join isSameShape isElementConstrained isElementConstrained result result result result result result result result result result result result init init reduce reduce reduce reduce reduce applyOpCopy divideCopy clone clone clone clone r r r r r r r r r multiplyCopy multiplyCopy multiplyCopy d d d d d d d multiply multiply multiply multiply rc rc apply apply set set set b b b b b b b b op op op op op op op op op op op op op op op op op applyOp applyOp applyOp applyOp applyOp applyOp applyOp applyOp applyOp void void void void void void void void isFullyMutable isFullyMutable isFullyMutable isMutable isMutable IDense isDense instanceof instanceof this this this isSparse isBoolean isBoolean isBoolean true true true true true true true slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice slice s s s s s s s s sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sliceCount sc sc sc sc sc sc sc sc sc sc sc asVector asVector asVector asVector asVector else else else else else false false false false false false false false false false if if if if if if if if if if if if if if if if if if if if if if if dims dims dims dims dims dims dims dims dims dims dims dims epsilon epsilon epsilon epsilon TEST_EPSILON a a a a a a a a a a a a a a a a epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals epsilonEquals boolean boolean boolean boolean boolean boolean boolean boolean boolean boolean copyOf getLongShape sh sh sh dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality dimensionality getShapeClone dim dim getShape getShape getShape getShape getShape getShape getData toArray ix ix ix ix ix ix for for for for for for for for for for for for for for for for for for for new new ixs ixs ixs length length length length length length n n n n n n n n n n n n n n n n n n n n n n n n xs xs xs y y x x j toInt toInt toInt toInt toInt toInt return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int get get get get get get get get get get get get get get get get get get get get get double double double double double double double double double double double double double double double double double double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ serialVersionUID long long long long long long long final final static private Iterable implements T T AbstractArray class abstract abstract abstract abstract public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public VectorzException LongArrays LongArrays IntArrays ErrorMessages DoubleArrays Constants SingleDoubleIterator Vectorz Vectorz Vector Tools Tools Tools Tools Tools Tools Tools Tools Tools Scalar Ops Op2 Op2 Op2 Op2 Op2 Op Op Op IOperator IOperator AVector AVector AVector AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Maths SparseRowMatrix Matrixx Matrix AMatrix matrixx matrixx matrixx matrixx Index Index AIndex AIndex indexz indexz ISparse ISparse INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray Arrayz Array List Iterator Arrays ArrayList util util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import impl impl impl arrayz arrayz arrayz arrayz arrayz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/arrayz/impl/JoinedArray.java": "v v v setSparse setSparse setSparse y y y y y y y y y y sliceCount sliceCount sliceCount x x x x x x x x x x x x x x x x x getClass \"0d get not supported on \" \"Inconsistent shape along split dimension\" Error validate validate exactClone exactClone exactClone op op op applyOp applyOp applyOp true isView boolean invalidComponent IndexOutOfBoundsException IndexOutOfBoundsException IndexOutOfBoundsException IndexOutOfBoundsException case case switch k k k getComponent componentCount nd nd index index index index index index index checkShape majorSlice majorSlice majorSlice majorSlice majorSlice majorSlice majorSlice slice slice slice slice slice slice slice slice slice slice slice value value value set set set void void void void clone clone else else else else else else else else else di di di di invalidIndex invalidIndex invalidIndex invalidIndex invalidIndex length length indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes indexes get get get get get get get get get get get get double double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ return return return return return return return return return return return return return return return return return return return return return i i i i i i for incompatibleShapes incompatibleShapes IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException new new new new new new new new new new new new new throw throw throw throw throw throw throw throw throw throw if if if if if if if if if if if if if if if if if if if dimensionality dimensionality dimensionality dimensionality n n n b b b b b b b b a a a a a a a a join join getShape getShape getShape getShape getShape getShape getShape shape shape shape this this this this this this this this this this this this getShapeClone super super dim dim dim dim dim dim dim split split split split split split split split split split split split split split split split dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension dimension int int int int int int int int int int int int int int int int int int int right right right right right right right right right right right right right right right right right right right left left left left left left left left left left left left left left left left left left left serialVersionUID long final final final final final static static private private BaseShapedArray extends JoinedArray JoinedArray JoinedArray JoinedArray JoinedArray class public public public public public public public public public public public public public public public public ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages util Op Op vectorz vectorz INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray INDArray Arrayz Arrayz import import import import impl arrayz arrayz arrayz mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/AMatrix.java": "IMatrix implements extends AMatrix class abstract public VectorzException IntArrays ErrorMessages DoubleArrays Constants Vector0 MatrixViewVector ADenseArrayVector Vectorz Vector Tools Op2 Op IOperator AVector AVector AScalar vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Maths IdentityTranslation AffineMN AAffineTransform transformz transformz transformz Hash randomz ZeroMatrix TransposedMatrix SubMatrixView SparseRowMatrix SparseColumnMatrix MatrixRowView MatrixRowList MatrixRowIterator MatrixElementIterator MatrixColumnView MatrixColumnList MatrixBandView ImmutableMatrix IdentityMatrix AStridedMatrix ARectangularMatrix ADenseArrayMatrix Rank Multiplications Inverse Determinant Definite algo algo algo algo algo Index AIndex indexz indexz SliceArray JoinedArray IDense AbstractArray AbstractArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl ISparse INDArray Arrayz arrayz arrayz arrayz arrayz arrayz arrayz arrayz List Iterator Arrays ArrayList util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/impl/ABandedMatrix.java": "createStorage toDoubleArray bandStartRow bandStartColumn di di b2 b2 b1 b1 addToArray addToArray getElements offset offset offset offset offset offset data data data data exactClone exactClone unsafeSet unsafeSet unsafeSet length length result result result result result result result v v dotProduct dotProduct checkIndex checkIndex get super upper upper upper upper lower lower lower lower \"serial\" SuppressWarnings toMatrixTranspose this this this this this this this this this set set set create create m m m m m m rc rc rc rc toMatrix multiply multiply maxBand maxBand minBand minBand setSparse setSparse value value value value value value value value value value elementSquaredSum elementSquaredSum elementProduct diagonalProduct trace elementSum elementSum elementSum isSparse t t t t t t t t t nonZeroCount nonZeroCount unsafeGet unsafeGet unsafeGet unsafeGet unsafeGet unsafeGet unsafeGet b b b b b b b b b b b b b b b b b min min min min min end end start start fill fill fill cc cc cc cc cc cc cc cc cc cc destOffset destOffset destOffset destOffset dest dest dest dest dest double double double double double double double double double double double double double double double double double double double double double double double copyRowTo copyRowTo void void void void void void void void BandedMatrixRow BandedMatrixRow BandedMatrixRow new checkRow row row row row row row row row row row row row row row row row row row row row row row row getRowView getRowView isLowerTriangular isUpperTriangular equals max max max Math Math Math Math Math Math Math Math bs bs columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount isSymmetric isFullyMutable isFullyMutable isFullyMutable false false false false false true true true ub ub lb lb isMutable isMutable isMutable isMutable boolean boolean boolean boolean boolean boolean boolean boolean boolean lowerBandwidth lowerBandwidth lowerBandwidth return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return isZero isZero isZero isZero if if if if if if if i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i for for for for for for for for for for for for for for for for for upperBandwidth upperBandwidth upperBandwidth band band band getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand getBand lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit lowerBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit upperBandwidthLimit int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ serialVersionUID long long long final final final final final static private private IFastBands implements extends extends ABandedMatrix ABandedMatrix ABandedMatrix ABandedMatrix class class abstract abstract abstract abstract public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public VectorzException DoubleArrays DoubleArrays ASizedVector ASizedVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz Matrix Matrix Matrix Matrix Matrix Matrix Matrix AMatrix AMatrix Arrays Arrays util util util java import import import import import import import impl impl matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/impl/ASparseRCMatrix.java": "abs sparseClone isFullyMutable else null null if if if line line line line line line line line line rr rr reciprocal reciprocal for for for componentCount componentCount componentCount n n n n n n lineLength lineLength create create v v value value double fill true isSparse boolean Override Override Override Override @ @ @ @ return return unsafeGetVector vec vec i i i i i i i i i i i i i i i i i i unsafeSetVec unsafeSetVec void void void void this super cols cols rows rows int int int int int int int data data data data data data data data data data protected protected protected serialVersionUID long long long long final final static private ARectangularMatrix extends ASparseRCMatrix ASparseRCMatrix class abstract public public public public public public VectorzException DoubleArrays util util RepeatedElementVector RepeatedElementVector RepeatedElementVector RepeatedElementVector Vectorz Vector Op AVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz Matrix AMatrix import import import import import import import import import impl impl matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/impl/BroadcastVectorMatrix.java": "setSparse isZero isZero immutable immutable UnsupportedOperationException UnsupportedOperationException throw throw value set unsafeGet unsafeGet column column column column column exactClone exactClone subVector cols cols colStart colStart rowStart subMatrix getElements copyRowTo fill destOffset destOffset destOffset destOffset destOffset dest dest dest dest double double double double double double double copyColumnTo void void void void get get get get create col col col col getColumn getRow checkRow checkRow checkRow row row row row row row row row row getRowView new new new wrap wrap wrap isMutable false false return return return return return return return return return return return isFullyMutable boolean boolean boolean Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ this this this length super rows rows rows rows rows rows rows rows rows int int int int int int int int int int int int int int int int int int int v v v v v v v v source source source source source source source source source source source source serialVersionUID long static static private private private IFastColumns IFastRows implements ARectangularMatrix extends BroadcastVectorMatrix BroadcastVectorMatrix BroadcastVectorMatrix BroadcastVectorMatrix BroadcastVectorMatrix BroadcastVectorMatrix class final final final final final public public public public public public public public public public public public public public public public ErrorMessages ErrorMessages ErrorMessages RepeatedElementVector RepeatedElementVector AVector AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz AMatrix AMatrix AMatrix Arrays Arrays util util java import import import import import impl impl matrixx matrixx mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/impl/ColumnMatrix.java": "asDoubleArray columnCount toVector innerProduct s s s transposeInnerProduct equalsArray equalsArray boolean setSparse setSparse exactClone exactClone subVector getRowView getColumnView getTransposeView getTranspose RowMatrix RowMatrix RowMatrix RowMatrix offset offset offset offset data data data data addToArray addToArray d d j i i i i i i i addAt addAt unsafeSet unsafeSet unsafeGet unsafeGet value value value value value value set set position position column column column column column column column column get get get row row row row row row row row row row row row copyRowTo getElements vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector vector this this invalidSlice invalidSlice IndexOutOfBoundsException IndexOutOfBoundsException IndexOutOfBoundsException IndexOutOfBoundsException throw throw throw throw if if if if destOffset destOffset destOffset destOffset dest dest dest dest double double double double double double double double double double col col col int int int int int int int int int int int int int int int int int int copyColumnTo void void void void void void void Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ new new new new new new new new return return return return return return return return return return wrap wrap length super v v v v v v v serialVersionUID long final static static private IFastRows IFastColumns implements AVectorAsMatrixView extends ColumnMatrix ColumnMatrix ColumnMatrix ColumnMatrix ColumnMatrix ColumnMatrix class public public public public public public public public public public public public public public public public public public public ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages util Vector Vector AVector AVector AVector AVector AVector vectorz vectorz vectorz Matrix Matrix Matrix Matrix import import import import impl matrixx matrixx mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/impl/DiagonalMatrix.java": "\"dimension mismatch: \" validate validate exactClone result result result mismatch innerProduct innerProduct innerProduct innerProduct unsafeGetDiagonalValue getDiagonalValue reciprocal inverse determinant clone isZero isZero isBoolean isBoolean false isIdentity arraymultiply getArrayOffset offset offset \"Wrong length vector: \" instanceof instanceof transformInPlace transformInPlace transformInPlace for for for ddata ddata sdata sdata wrongDestLength wrongSourceLength cc cc rowCount rc rc rc rc dest dest dest dest dest dest source source source source transform i i i i i i i i i i i i i i i i i i i i i i i rowDotProduct copyOf copyOf newData newData newData newData newData newData multiplyCopy factor factor factor factor multiply multiply multiply multiply isFullyMutable true true isMutable boolean boolean boolean boolean boolean unsafeSet unsafeSet else this this this this this notFullyMutable UnsupportedOperationException unsafeGet unsafeGet unsafeGet checkIndex column column column column column column column column column row row row row row row row row row row row row row get nonZeroCount nonZeroCount elementProduct elementProduct diagonalProduct elementSum elementSum elementSum trace value value value value value value value set set set checkSameShape a a a a a a a a a a a setSparse setSparse c c addSparse addSparse void void void void void void void void void void Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal getLeadingDiagonal \"Source is not a diagonal matrix!\" IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException throw throw throw throw throw throw throw isDiagonal if if if if if if if if if if if if if m m m toDoubleArray toDoubleArray v v v v v v v v v v v v v v arraycopy System create create create create create create return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return dims dims createDimensions getArray getArray getArray getArray length length length length length length length length values values values values values values values values values values wrap wrap wrap wrap wrap wrap wrap new new new new new new new new new new new new new new super super super super super dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions dimensions int int int int int int int int int int int int int int int int int int int int lead lead lead lead lead lead lead lead lead lead lead lead lead lead data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data data double double double double double double double double double double double double double double double double double double double double double double double double double double double serialVersionUID long long static static static static static static static private private private private ADiagonalMatrix ADiagonalMatrix ADiagonalMatrix ADiagonalMatrix extends DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix DiagonalMatrix class final final final final public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public VectorzException VectorzException ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays DoubleArrays util util util ADenseArrayVector ADenseArrayVector ADenseArrayVector ADenseArrayVector Vector Vector Vector Vector Vector Vector Vector Vector Vector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz Matrixx Matrixx AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix AMatrix import import import import import import import import impl impl matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/matrixx/impl/SparseColumnMatrix.java": "toArray createZeroVector incompatibleShapes IllegalArgumentException throw length length if super data data data data data data new new new this this columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount columnCount rowCount rowCount rowCount rowCount rowCount rowCount rowCount int int int int int int protected protected protected emptyColumn emptyColumn SPARSE_ELEMENT_THRESHOLD serialVersionUID long long final final final static static private private private IFastColumns implements ASparseRCMatrix extends SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix SparseColumnMatrix class public VectorzException ErrorMessages ErrorMessages SparseIndexedVector SingleElementVector Vectorz Vectorz Vector Op2 Op IOperator AVector AVector AVector AVector AVector AVector vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz Matrixx Matrix AMatrix ISparse ISparse arrayz List List util util util java import import import import import import import import import import import import import import import impl impl impl matrixx matrixx matrixx matrixx mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/AScalar.java": "isMutable boolean iterator shape shape offsets offsets offsets offsets subArray getSlices sliceCount index dimension \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" \"Can't slice a scalar!\" UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException UnsupportedOperationException position slice slice dimensionality getTransposeView getTranspose dest dest getElements \"Element position must be zero for any scalar\" \"Length must be 0 or 1\" return return return return return return if if if if if length length length length length offset offset offset offset values values pos pos setElements y this this this this this this this invalidIndex invalidIndex invalidIndex invalidIndex IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException new new new new new new new new new new throw throw throw throw throw throw throw throw throw throw x x x x v v setSparse value set set set void void void void get get get get double double double double double double double Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override Override @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ EMPTY_LONG_ARRAY SCALAR_LONG_SHAPE EMPTY_INT_ARRAY SCALAR_SHAPE int int int int int int int int int int int int int int int serialVersionUID long long final final final final final final final static static static private private private IScalar implements Object Object Object extends AScalar AScalar AScalar AScalar class abstract abstract abstract public public public public public public public public public public public public public public public public public public LongArrays LongArrays IntArrays IntArrays ErrorMessages ErrorMessages ErrorMessages ErrorMessages ErrorMessages WrappedScalarVector SingleDoubleIterator ImmutableScalar Hash randomz AMatrix matrixx IDense IDense BroadcastScalarArray AbstractArray AbstractArray impl impl impl impl impl impl INDArray INDArray INDArray arrayz arrayz arrayz arrayz List List Iterator Iterator util util util util util DoubleBuffer nio java java java import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/AVector.java": "IVector implements Double extends AVector class abstract public \"serial\" SuppressWarnings @ VectorzException IntArrays ErrorMessages DoubleArrays Constants Logistic ops WrappedSubVector VectorIterator VectorIndexScalar Vector0 SparseIndexedVector ListWrapper JoinedVector IndexedSubVector IndexedElementVisitor ImmutableVector ArraySubVector ASparseVector ASizedVector ADenseArrayVector Maths Hash randomz RowMatrix BroadcastVectorMatrix Matrixx Matrix AMatrix matrixx matrixx matrixx matrixx matrixx Index AIndex indexz indexz SliceArray AbstractArray AbstractArray impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl impl ISparse INDArray Arrayz arrayz arrayz arrayz arrayz arrayz List Iterator Arrays ArrayList util util util util util util util util util util DoubleBuffer nio java java java java java import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import import vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package ",
            "src/main/java/mikera/vectorz/impl/SparseIndexedVector.java": "result checkLength rowCount rc rc columnCount cc cc innerProduct nonSparseElementCount nonSparseElementCount Override getRow getRow row row row m m m m m m m createFromRow iterator iterator iterable iterable SparseHashedVector nonSparseIndex nonSparseIndex unsafeGet unsafeGet unsafeGet unsafeGet unsafeGet vals vals vals vals vals vals vals vals vals len len len nonZeroIndices indexes indexes indexes indexes \"Can't create a length 0 SparseIndexedVector\" \"Can't create a length 0 SparseIndexedVector\" \"Can't create a length 0 SparseIndexedVector\" srcLength srcLength srcLength ASparseVector ASparseVector ASparseVector toDouble toSparseIndexedVector toSparseIndexedVector toSparseIndexedVector toSparseIndexedVector append append i i i i i i i i i i i i i i i i i i i i i i i i i i i for for for for for gv gv gv gv gv gv GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector GrowableIndexedVector values values values values values values cantCreateVector IllegalArgumentException IllegalArgumentException IllegalArgumentException IllegalArgumentException TYPE Double isPrimitive null getComponentType ec ec ec ec klass klass klass Class Class Number Number asList isArray isArray getClass getClass Iterable Iterable Iterable Iterable else else else else instanceof instanceof instanceof instanceof instanceof instanceof o o o o o o o o o o o o o o Object Object Object \"unchecked\" SuppressWarnings @ @ sv sv sv EMPTY EMPTY createLength createLength createLength createLength getElements getElements n n n n n n n n n n n n n n n ixs ixs ixs ixs ixs ixs ixs ixs ixs ixs ixs ixs v v v v v v v v v v v createWithIndices copyOf clone \"Length of index: mismatch woth data\" \"Index must be sorted and distinct\" throw throw throw throw throw throw if if if if if if if if if if if if if if if if if if create create create create create create create create create create create create create create create create create create create create create create indices indices return return return return return return return return return return return return return return return return return return return return return return return isDistinctSorted isDistinctSorted isDistinctSorted assert assert assert assert wrap wrap wrap wrap wrap wrap wrap wrap toDoubleArray source source source source source source source source source source source source source source source source super new new new new new new new new new new new new new new new new this this this this length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length length int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int int index index index index index index index index index index index index index index index index index index index index index index index index data data data data data data data data data data data data data data data data data data data data double double double double double double double double double double double double double double double double double double double serialVersionUID long final static static static static static static static static static static static static static static static static private private private private private private ASparseIndexedVector extends SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector SparseIndexedVector class public public public public public public public public public public public public public public public public public public VectorzException VectorzException VectorzException IntArrays ErrorMessages ErrorMessages DoubleArrays DoubleArrays DoubleArrays Vectorz Vector Tools Tools Op2 Op AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector AVector SparseRowMatrix SparseRowMatrix SparseColumnMatrix AVectorMatrix AVectorMatrix AMatrix AMatrix matrixx matrixx matrixx matrixx Index Index Index Index Index Index Index Index Index Index Index Index Index Index indexz List List Iterator Iterator Iterator Iterator Arrays Arrays util util util util util util util java java java import import import import import import import import import import import import import import import import import import impl impl impl impl vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz vectorz mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera mikera package "
        },
        "starts_failed_test_list": [],
        "starts_select_time": 0,
        "starts_test_list": [],
        "starts_total_time": 0,
        "tests_cases_num": {
            "BitVectorTest": 5,
            "Test3DVectors": 2,
            "TestAffine": 2,
            "TestAltLU": 12,
            "TestArrays": 12,
            "TestAxisVector": 2,
            "TestBanded": 3,
            "TestBands": 6,
            "TestBidiagonalRow": 3,
            "TestBigSparse": 19,
            "TestChol": 4,
            "TestCholInner": 3,
            "TestCholLDU": 2,
            "TestCholLDUSolver": 1,
            "TestCholSolver": 1,
            "TestCholesky": 6,
            "TestDecomposition": 4,
            "TestDenseMultiply": 4,
            "TestDeterminant": 3,
            "TestDiagonalMatrix": 5,
            "TestErrors": 1,
            "TestFFT": 2,
            "TestGrowableVector": 2,
            "TestHessenbergSimilarDecomposition": 2,
            "TestHouseholderColQR": 5,
            "TestHouseholderQR": 8,
            "TestIndex": 10,
            "TestIndexz": 5,
            "TestIntArrays": 6,
            "TestInverses": 1,
            "TestJoinedVectors": 15,
            "TestLUSolver": 6,
            "TestLinear": 6,
            "TestMatrices": 26,
            "TestMatrix": 9,
            "TestMatrixBuilder": 1,
            "TestMisc": 3,
            "TestMiscArrayOps": 14,
            "TestMiscMatrices": 2,
            "TestMiscVectors": 7,
            "TestNDArray": 8,
            "TestOps": 10,
            "TestPrimitiveVectors": 6,
            "TestPseudoInverses": 3,
            "TestQR": 8,
            "TestQRHouseColSolve": 7,
            "TestQuaternions": 2,
            "TestRank": 6,
            "TestScalars": 4,
            "TestSparseColumnMatrix": 11,
            "TestSparseHashedVector": 4,
            "TestSparseIndexedVector": 10,
            "TestSparseRowMatrix": 11,
            "TestSparseVectors": 4,
            "TestSpecialOps": 8,
            "TestSvdImplicitQr": 2,
            "TestSvdImplicitQrAlgorithm": 6,
            "TestSymmEigen": 3,
            "TestSymmetricQRAlgorithmDecomposition": 2,
            "TestSymmetricQrAlgorithm": 4,
            "TestTesting": 1,
            "TestTools": 3,
            "TestTransformz": 2,
            "TestTridiagonalDecompositionHouseholder": 3,
            "TestVector": 1,
            "TestVectorBuilder": 1,
            "TestVectorMath": 10,
            "TestVectorMatrix": 1,
            "TestVectors": 43,
            "TestVectorz": 6
        }
    }
]